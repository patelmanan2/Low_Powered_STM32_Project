
Writing_Tool_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  0800dc20  0800dc20  0001dc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e640  0800e640  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e640  0800e640  0001e640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e648  0800e648  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e648  0800e648  0001e648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e64c  0800e64c  0001e64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001ec  0800e83c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800e83c  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b263  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023bb  00000000  00000000  0002b4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002d878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cb  00000000  00000000  0002e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001365e  00000000  00000000  0002ece3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f63  00000000  00000000  00042341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069cd1  00000000  00000000  000532a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e7c  00000000  00000000  000bcf78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000c0df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dc04 	.word	0x0800dc04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800dc04 	.word	0x0800dc04

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa15 	bl	800186c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f965 	bl	800171c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa07 	bl	800186c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9fd 	bl	800186c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f98d 	bl	80017a0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f983 	bl	80017a0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f84d 	bl	80025f8 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fca6 	bl	8001eb8 <__aeabi_dsub>
 800056c:	f002 f844 	bl	80025f8 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 f9b5 	bl	8001934 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 f878 	bl	80026c4 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 f9ac 	bl	8001934 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fc68 	bl	8001eb8 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 f831 	bl	8002664 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 f995 	bl	8001934 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 f858 	bl	80026c4 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fa32 	bl	8000a80 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 f950 	bl	80028e8 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 f94b 	bl	80028e8 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f001 ffe1 	bl	80028ac <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f001 ffd5 	bl	80028ac <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	0800dca0 	.word	0x0800dca0
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800dce0 	.word	0x0800dce0

080009f0 <__aeabi_ui2f>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	1e04      	subs	r4, r0, #0
 80009f4:	d00e      	beq.n	8000a14 <__aeabi_ui2f+0x24>
 80009f6:	f001 ff59 	bl	80028ac <__clzsi2>
 80009fa:	239e      	movs	r3, #158	; 0x9e
 80009fc:	0001      	movs	r1, r0
 80009fe:	1a1b      	subs	r3, r3, r0
 8000a00:	2b96      	cmp	r3, #150	; 0x96
 8000a02:	dc0c      	bgt.n	8000a1e <__aeabi_ui2f+0x2e>
 8000a04:	2808      	cmp	r0, #8
 8000a06:	d02c      	beq.n	8000a62 <__aeabi_ui2f+0x72>
 8000a08:	3908      	subs	r1, #8
 8000a0a:	408c      	lsls	r4, r1
 8000a0c:	0264      	lsls	r4, r4, #9
 8000a0e:	0a64      	lsrs	r4, r4, #9
 8000a10:	b2d8      	uxtb	r0, r3
 8000a12:	e001      	b.n	8000a18 <__aeabi_ui2f+0x28>
 8000a14:	2000      	movs	r0, #0
 8000a16:	2400      	movs	r4, #0
 8000a18:	05c0      	lsls	r0, r0, #23
 8000a1a:	4320      	orrs	r0, r4
 8000a1c:	bd70      	pop	{r4, r5, r6, pc}
 8000a1e:	2b99      	cmp	r3, #153	; 0x99
 8000a20:	dd0a      	ble.n	8000a38 <__aeabi_ui2f+0x48>
 8000a22:	0002      	movs	r2, r0
 8000a24:	0020      	movs	r0, r4
 8000a26:	321b      	adds	r2, #27
 8000a28:	4090      	lsls	r0, r2
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1e50      	subs	r0, r2, #1
 8000a2e:	4182      	sbcs	r2, r0
 8000a30:	2005      	movs	r0, #5
 8000a32:	1a40      	subs	r0, r0, r1
 8000a34:	40c4      	lsrs	r4, r0
 8000a36:	4314      	orrs	r4, r2
 8000a38:	2905      	cmp	r1, #5
 8000a3a:	dc16      	bgt.n	8000a6a <__aeabi_ui2f+0x7a>
 8000a3c:	0022      	movs	r2, r4
 8000a3e:	480f      	ldr	r0, [pc, #60]	; (8000a7c <__aeabi_ui2f+0x8c>)
 8000a40:	4002      	ands	r2, r0
 8000a42:	0765      	lsls	r5, r4, #29
 8000a44:	d009      	beq.n	8000a5a <__aeabi_ui2f+0x6a>
 8000a46:	250f      	movs	r5, #15
 8000a48:	402c      	ands	r4, r5
 8000a4a:	2c04      	cmp	r4, #4
 8000a4c:	d005      	beq.n	8000a5a <__aeabi_ui2f+0x6a>
 8000a4e:	3204      	adds	r2, #4
 8000a50:	0154      	lsls	r4, r2, #5
 8000a52:	d502      	bpl.n	8000a5a <__aeabi_ui2f+0x6a>
 8000a54:	239f      	movs	r3, #159	; 0x9f
 8000a56:	4002      	ands	r2, r0
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	0192      	lsls	r2, r2, #6
 8000a5c:	0a54      	lsrs	r4, r2, #9
 8000a5e:	b2d8      	uxtb	r0, r3
 8000a60:	e7da      	b.n	8000a18 <__aeabi_ui2f+0x28>
 8000a62:	0264      	lsls	r4, r4, #9
 8000a64:	2096      	movs	r0, #150	; 0x96
 8000a66:	0a64      	lsrs	r4, r4, #9
 8000a68:	e7d6      	b.n	8000a18 <__aeabi_ui2f+0x28>
 8000a6a:	1f4a      	subs	r2, r1, #5
 8000a6c:	4094      	lsls	r4, r2
 8000a6e:	0022      	movs	r2, r4
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <__aeabi_ui2f+0x8c>)
 8000a72:	4002      	ands	r2, r0
 8000a74:	0765      	lsls	r5, r4, #29
 8000a76:	d0f0      	beq.n	8000a5a <__aeabi_ui2f+0x6a>
 8000a78:	e7e5      	b.n	8000a46 <__aeabi_ui2f+0x56>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	fbffffff 	.word	0xfbffffff

08000a80 <__aeabi_dadd>:
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a82:	464f      	mov	r7, r9
 8000a84:	4646      	mov	r6, r8
 8000a86:	46d6      	mov	lr, sl
 8000a88:	0004      	movs	r4, r0
 8000a8a:	b5c0      	push	{r6, r7, lr}
 8000a8c:	001f      	movs	r7, r3
 8000a8e:	030b      	lsls	r3, r1, #12
 8000a90:	0010      	movs	r0, r2
 8000a92:	004e      	lsls	r6, r1, #1
 8000a94:	0a5b      	lsrs	r3, r3, #9
 8000a96:	0fcd      	lsrs	r5, r1, #31
 8000a98:	0f61      	lsrs	r1, r4, #29
 8000a9a:	007a      	lsls	r2, r7, #1
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	00e3      	lsls	r3, r4, #3
 8000aa0:	033c      	lsls	r4, r7, #12
 8000aa2:	0fff      	lsrs	r7, r7, #31
 8000aa4:	46bc      	mov	ip, r7
 8000aa6:	0a64      	lsrs	r4, r4, #9
 8000aa8:	0f47      	lsrs	r7, r0, #29
 8000aaa:	4327      	orrs	r7, r4
 8000aac:	0d76      	lsrs	r6, r6, #21
 8000aae:	0d52      	lsrs	r2, r2, #21
 8000ab0:	00c0      	lsls	r0, r0, #3
 8000ab2:	46b9      	mov	r9, r7
 8000ab4:	4680      	mov	r8, r0
 8000ab6:	1ab7      	subs	r7, r6, r2
 8000ab8:	4565      	cmp	r5, ip
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x3e>
 8000abc:	e09b      	b.n	8000bf6 <__aeabi_dadd+0x176>
 8000abe:	2f00      	cmp	r7, #0
 8000ac0:	dc00      	bgt.n	8000ac4 <__aeabi_dadd+0x44>
 8000ac2:	e084      	b.n	8000bce <__aeabi_dadd+0x14e>
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dadd+0x4a>
 8000ac8:	e0be      	b.n	8000c48 <__aeabi_dadd+0x1c8>
 8000aca:	4ac8      	ldr	r2, [pc, #800]	; (8000dec <__aeabi_dadd+0x36c>)
 8000acc:	4296      	cmp	r6, r2
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dadd+0x52>
 8000ad0:	e124      	b.n	8000d1c <__aeabi_dadd+0x29c>
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	464c      	mov	r4, r9
 8000ad6:	0412      	lsls	r2, r2, #16
 8000ad8:	4314      	orrs	r4, r2
 8000ada:	46a1      	mov	r9, r4
 8000adc:	2f38      	cmp	r7, #56	; 0x38
 8000ade:	dd00      	ble.n	8000ae2 <__aeabi_dadd+0x62>
 8000ae0:	e167      	b.n	8000db2 <__aeabi_dadd+0x332>
 8000ae2:	2f1f      	cmp	r7, #31
 8000ae4:	dd00      	ble.n	8000ae8 <__aeabi_dadd+0x68>
 8000ae6:	e1d6      	b.n	8000e96 <__aeabi_dadd+0x416>
 8000ae8:	2220      	movs	r2, #32
 8000aea:	464c      	mov	r4, r9
 8000aec:	1bd2      	subs	r2, r2, r7
 8000aee:	4094      	lsls	r4, r2
 8000af0:	46a2      	mov	sl, r4
 8000af2:	4644      	mov	r4, r8
 8000af4:	40fc      	lsrs	r4, r7
 8000af6:	0020      	movs	r0, r4
 8000af8:	4654      	mov	r4, sl
 8000afa:	4304      	orrs	r4, r0
 8000afc:	4640      	mov	r0, r8
 8000afe:	4090      	lsls	r0, r2
 8000b00:	1e42      	subs	r2, r0, #1
 8000b02:	4190      	sbcs	r0, r2
 8000b04:	464a      	mov	r2, r9
 8000b06:	40fa      	lsrs	r2, r7
 8000b08:	4304      	orrs	r4, r0
 8000b0a:	1a89      	subs	r1, r1, r2
 8000b0c:	1b1c      	subs	r4, r3, r4
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	4192      	sbcs	r2, r2
 8000b12:	4252      	negs	r2, r2
 8000b14:	1a8b      	subs	r3, r1, r2
 8000b16:	469a      	mov	sl, r3
 8000b18:	4653      	mov	r3, sl
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	d400      	bmi.n	8000b20 <__aeabi_dadd+0xa0>
 8000b1e:	e0d4      	b.n	8000cca <__aeabi_dadd+0x24a>
 8000b20:	4653      	mov	r3, sl
 8000b22:	025a      	lsls	r2, r3, #9
 8000b24:	0a53      	lsrs	r3, r2, #9
 8000b26:	469a      	mov	sl, r3
 8000b28:	4653      	mov	r3, sl
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0xb0>
 8000b2e:	e104      	b.n	8000d3a <__aeabi_dadd+0x2ba>
 8000b30:	4650      	mov	r0, sl
 8000b32:	f001 febb 	bl	80028ac <__clzsi2>
 8000b36:	0003      	movs	r3, r0
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	1ad2      	subs	r2, r2, r3
 8000b40:	4651      	mov	r1, sl
 8000b42:	40d0      	lsrs	r0, r2
 8000b44:	4099      	lsls	r1, r3
 8000b46:	0002      	movs	r2, r0
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	42b3      	cmp	r3, r6
 8000b4e:	da00      	bge.n	8000b52 <__aeabi_dadd+0xd2>
 8000b50:	e102      	b.n	8000d58 <__aeabi_dadd+0x2d8>
 8000b52:	1b9b      	subs	r3, r3, r6
 8000b54:	1c59      	adds	r1, r3, #1
 8000b56:	291f      	cmp	r1, #31
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_dadd+0xdc>
 8000b5a:	e0a7      	b.n	8000cac <__aeabi_dadd+0x22c>
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	0010      	movs	r0, r2
 8000b60:	0026      	movs	r6, r4
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	409c      	lsls	r4, r3
 8000b66:	4098      	lsls	r0, r3
 8000b68:	40ce      	lsrs	r6, r1
 8000b6a:	40ca      	lsrs	r2, r1
 8000b6c:	1e63      	subs	r3, r4, #1
 8000b6e:	419c      	sbcs	r4, r3
 8000b70:	4330      	orrs	r0, r6
 8000b72:	4692      	mov	sl, r2
 8000b74:	2600      	movs	r6, #0
 8000b76:	4304      	orrs	r4, r0
 8000b78:	0763      	lsls	r3, r4, #29
 8000b7a:	d009      	beq.n	8000b90 <__aeabi_dadd+0x110>
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	4023      	ands	r3, r4
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d005      	beq.n	8000b90 <__aeabi_dadd+0x110>
 8000b84:	1d23      	adds	r3, r4, #4
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	41a4      	sbcs	r4, r4
 8000b8a:	4264      	negs	r4, r4
 8000b8c:	44a2      	add	sl, r4
 8000b8e:	001c      	movs	r4, r3
 8000b90:	4653      	mov	r3, sl
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	d400      	bmi.n	8000b98 <__aeabi_dadd+0x118>
 8000b96:	e09b      	b.n	8000cd0 <__aeabi_dadd+0x250>
 8000b98:	4b94      	ldr	r3, [pc, #592]	; (8000dec <__aeabi_dadd+0x36c>)
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	429e      	cmp	r6, r3
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x122>
 8000ba0:	e0b8      	b.n	8000d14 <__aeabi_dadd+0x294>
 8000ba2:	4653      	mov	r3, sl
 8000ba4:	4992      	ldr	r1, [pc, #584]	; (8000df0 <__aeabi_dadd+0x370>)
 8000ba6:	08e4      	lsrs	r4, r4, #3
 8000ba8:	400b      	ands	r3, r1
 8000baa:	0019      	movs	r1, r3
 8000bac:	075b      	lsls	r3, r3, #29
 8000bae:	4323      	orrs	r3, r4
 8000bb0:	0572      	lsls	r2, r6, #21
 8000bb2:	024c      	lsls	r4, r1, #9
 8000bb4:	0b24      	lsrs	r4, r4, #12
 8000bb6:	0d52      	lsrs	r2, r2, #21
 8000bb8:	0512      	lsls	r2, r2, #20
 8000bba:	07ed      	lsls	r5, r5, #31
 8000bbc:	4322      	orrs	r2, r4
 8000bbe:	432a      	orrs	r2, r5
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	0011      	movs	r1, r2
 8000bc4:	bce0      	pop	{r5, r6, r7}
 8000bc6:	46ba      	mov	sl, r7
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	46a8      	mov	r8, r5
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d048      	beq.n	8000c64 <__aeabi_dadd+0x1e4>
 8000bd2:	1b97      	subs	r7, r2, r6
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d000      	beq.n	8000bda <__aeabi_dadd+0x15a>
 8000bd8:	e10e      	b.n	8000df8 <__aeabi_dadd+0x378>
 8000bda:	000c      	movs	r4, r1
 8000bdc:	431c      	orrs	r4, r3
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dadd+0x162>
 8000be0:	e1b7      	b.n	8000f52 <__aeabi_dadd+0x4d2>
 8000be2:	1e7c      	subs	r4, r7, #1
 8000be4:	2f01      	cmp	r7, #1
 8000be6:	d100      	bne.n	8000bea <__aeabi_dadd+0x16a>
 8000be8:	e226      	b.n	8001038 <__aeabi_dadd+0x5b8>
 8000bea:	4d80      	ldr	r5, [pc, #512]	; (8000dec <__aeabi_dadd+0x36c>)
 8000bec:	42af      	cmp	r7, r5
 8000bee:	d100      	bne.n	8000bf2 <__aeabi_dadd+0x172>
 8000bf0:	e1d5      	b.n	8000f9e <__aeabi_dadd+0x51e>
 8000bf2:	0027      	movs	r7, r4
 8000bf4:	e107      	b.n	8000e06 <__aeabi_dadd+0x386>
 8000bf6:	2f00      	cmp	r7, #0
 8000bf8:	dc00      	bgt.n	8000bfc <__aeabi_dadd+0x17c>
 8000bfa:	e0b2      	b.n	8000d62 <__aeabi_dadd+0x2e2>
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	d047      	beq.n	8000c90 <__aeabi_dadd+0x210>
 8000c00:	4a7a      	ldr	r2, [pc, #488]	; (8000dec <__aeabi_dadd+0x36c>)
 8000c02:	4296      	cmp	r6, r2
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x188>
 8000c06:	e089      	b.n	8000d1c <__aeabi_dadd+0x29c>
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	464c      	mov	r4, r9
 8000c0c:	0412      	lsls	r2, r2, #16
 8000c0e:	4314      	orrs	r4, r2
 8000c10:	46a1      	mov	r9, r4
 8000c12:	2f38      	cmp	r7, #56	; 0x38
 8000c14:	dc6b      	bgt.n	8000cee <__aeabi_dadd+0x26e>
 8000c16:	2f1f      	cmp	r7, #31
 8000c18:	dc00      	bgt.n	8000c1c <__aeabi_dadd+0x19c>
 8000c1a:	e16e      	b.n	8000efa <__aeabi_dadd+0x47a>
 8000c1c:	003a      	movs	r2, r7
 8000c1e:	4648      	mov	r0, r9
 8000c20:	3a20      	subs	r2, #32
 8000c22:	40d0      	lsrs	r0, r2
 8000c24:	4684      	mov	ip, r0
 8000c26:	2f20      	cmp	r7, #32
 8000c28:	d007      	beq.n	8000c3a <__aeabi_dadd+0x1ba>
 8000c2a:	2240      	movs	r2, #64	; 0x40
 8000c2c:	4648      	mov	r0, r9
 8000c2e:	1bd2      	subs	r2, r2, r7
 8000c30:	4090      	lsls	r0, r2
 8000c32:	0002      	movs	r2, r0
 8000c34:	4640      	mov	r0, r8
 8000c36:	4310      	orrs	r0, r2
 8000c38:	4680      	mov	r8, r0
 8000c3a:	4640      	mov	r0, r8
 8000c3c:	1e42      	subs	r2, r0, #1
 8000c3e:	4190      	sbcs	r0, r2
 8000c40:	4662      	mov	r2, ip
 8000c42:	0004      	movs	r4, r0
 8000c44:	4314      	orrs	r4, r2
 8000c46:	e057      	b.n	8000cf8 <__aeabi_dadd+0x278>
 8000c48:	464a      	mov	r2, r9
 8000c4a:	4302      	orrs	r2, r0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dadd+0x1d0>
 8000c4e:	e103      	b.n	8000e58 <__aeabi_dadd+0x3d8>
 8000c50:	1e7a      	subs	r2, r7, #1
 8000c52:	2f01      	cmp	r7, #1
 8000c54:	d100      	bne.n	8000c58 <__aeabi_dadd+0x1d8>
 8000c56:	e193      	b.n	8000f80 <__aeabi_dadd+0x500>
 8000c58:	4c64      	ldr	r4, [pc, #400]	; (8000dec <__aeabi_dadd+0x36c>)
 8000c5a:	42a7      	cmp	r7, r4
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x1e0>
 8000c5e:	e18a      	b.n	8000f76 <__aeabi_dadd+0x4f6>
 8000c60:	0017      	movs	r7, r2
 8000c62:	e73b      	b.n	8000adc <__aeabi_dadd+0x5c>
 8000c64:	4c63      	ldr	r4, [pc, #396]	; (8000df4 <__aeabi_dadd+0x374>)
 8000c66:	1c72      	adds	r2, r6, #1
 8000c68:	4222      	tst	r2, r4
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_dadd+0x1ee>
 8000c6c:	e0e0      	b.n	8000e30 <__aeabi_dadd+0x3b0>
 8000c6e:	000a      	movs	r2, r1
 8000c70:	431a      	orrs	r2, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d000      	beq.n	8000c78 <__aeabi_dadd+0x1f8>
 8000c76:	e174      	b.n	8000f62 <__aeabi_dadd+0x4e2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_dadd+0x1fe>
 8000c7c:	e1d0      	b.n	8001020 <__aeabi_dadd+0x5a0>
 8000c7e:	464a      	mov	r2, r9
 8000c80:	4302      	orrs	r2, r0
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dadd+0x206>
 8000c84:	e1e3      	b.n	800104e <__aeabi_dadd+0x5ce>
 8000c86:	074a      	lsls	r2, r1, #29
 8000c88:	08db      	lsrs	r3, r3, #3
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	08c9      	lsrs	r1, r1, #3
 8000c8e:	e029      	b.n	8000ce4 <__aeabi_dadd+0x264>
 8000c90:	464a      	mov	r2, r9
 8000c92:	4302      	orrs	r2, r0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x218>
 8000c96:	e17d      	b.n	8000f94 <__aeabi_dadd+0x514>
 8000c98:	1e7a      	subs	r2, r7, #1
 8000c9a:	2f01      	cmp	r7, #1
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dadd+0x220>
 8000c9e:	e0e0      	b.n	8000e62 <__aeabi_dadd+0x3e2>
 8000ca0:	4c52      	ldr	r4, [pc, #328]	; (8000dec <__aeabi_dadd+0x36c>)
 8000ca2:	42a7      	cmp	r7, r4
 8000ca4:	d100      	bne.n	8000ca8 <__aeabi_dadd+0x228>
 8000ca6:	e166      	b.n	8000f76 <__aeabi_dadd+0x4f6>
 8000ca8:	0017      	movs	r7, r2
 8000caa:	e7b2      	b.n	8000c12 <__aeabi_dadd+0x192>
 8000cac:	0010      	movs	r0, r2
 8000cae:	3b1f      	subs	r3, #31
 8000cb0:	40d8      	lsrs	r0, r3
 8000cb2:	2920      	cmp	r1, #32
 8000cb4:	d003      	beq.n	8000cbe <__aeabi_dadd+0x23e>
 8000cb6:	2340      	movs	r3, #64	; 0x40
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	4314      	orrs	r4, r2
 8000cbe:	1e63      	subs	r3, r4, #1
 8000cc0:	419c      	sbcs	r4, r3
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	4304      	orrs	r4, r0
 8000cca:	0763      	lsls	r3, r4, #29
 8000ccc:	d000      	beq.n	8000cd0 <__aeabi_dadd+0x250>
 8000cce:	e755      	b.n	8000b7c <__aeabi_dadd+0xfc>
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	08e3      	lsrs	r3, r4, #3
 8000cd4:	0752      	lsls	r2, r2, #29
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	4652      	mov	r2, sl
 8000cda:	0037      	movs	r7, r6
 8000cdc:	08d1      	lsrs	r1, r2, #3
 8000cde:	4a43      	ldr	r2, [pc, #268]	; (8000dec <__aeabi_dadd+0x36c>)
 8000ce0:	4297      	cmp	r7, r2
 8000ce2:	d01f      	beq.n	8000d24 <__aeabi_dadd+0x2a4>
 8000ce4:	0309      	lsls	r1, r1, #12
 8000ce6:	057a      	lsls	r2, r7, #21
 8000ce8:	0b0c      	lsrs	r4, r1, #12
 8000cea:	0d52      	lsrs	r2, r2, #21
 8000cec:	e764      	b.n	8000bb8 <__aeabi_dadd+0x138>
 8000cee:	4642      	mov	r2, r8
 8000cf0:	464c      	mov	r4, r9
 8000cf2:	4314      	orrs	r4, r2
 8000cf4:	1e62      	subs	r2, r4, #1
 8000cf6:	4194      	sbcs	r4, r2
 8000cf8:	18e4      	adds	r4, r4, r3
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	4192      	sbcs	r2, r2
 8000cfe:	4252      	negs	r2, r2
 8000d00:	4692      	mov	sl, r2
 8000d02:	448a      	add	sl, r1
 8000d04:	4653      	mov	r3, sl
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	d5df      	bpl.n	8000cca <__aeabi_dadd+0x24a>
 8000d0a:	4b38      	ldr	r3, [pc, #224]	; (8000dec <__aeabi_dadd+0x36c>)
 8000d0c:	3601      	adds	r6, #1
 8000d0e:	429e      	cmp	r6, r3
 8000d10:	d000      	beq.n	8000d14 <__aeabi_dadd+0x294>
 8000d12:	e0b3      	b.n	8000e7c <__aeabi_dadd+0x3fc>
 8000d14:	0032      	movs	r2, r6
 8000d16:	2400      	movs	r4, #0
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e74d      	b.n	8000bb8 <__aeabi_dadd+0x138>
 8000d1c:	074a      	lsls	r2, r1, #29
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	08c9      	lsrs	r1, r1, #3
 8000d24:	001a      	movs	r2, r3
 8000d26:	430a      	orrs	r2, r1
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x2ac>
 8000d2a:	e200      	b.n	800112e <__aeabi_dadd+0x6ae>
 8000d2c:	2480      	movs	r4, #128	; 0x80
 8000d2e:	0324      	lsls	r4, r4, #12
 8000d30:	430c      	orrs	r4, r1
 8000d32:	0324      	lsls	r4, r4, #12
 8000d34:	4a2d      	ldr	r2, [pc, #180]	; (8000dec <__aeabi_dadd+0x36c>)
 8000d36:	0b24      	lsrs	r4, r4, #12
 8000d38:	e73e      	b.n	8000bb8 <__aeabi_dadd+0x138>
 8000d3a:	0020      	movs	r0, r4
 8000d3c:	f001 fdb6 	bl	80028ac <__clzsi2>
 8000d40:	0003      	movs	r3, r0
 8000d42:	3318      	adds	r3, #24
 8000d44:	2b1f      	cmp	r3, #31
 8000d46:	dc00      	bgt.n	8000d4a <__aeabi_dadd+0x2ca>
 8000d48:	e6f7      	b.n	8000b3a <__aeabi_dadd+0xba>
 8000d4a:	0022      	movs	r2, r4
 8000d4c:	3808      	subs	r0, #8
 8000d4e:	4082      	lsls	r2, r0
 8000d50:	2400      	movs	r4, #0
 8000d52:	42b3      	cmp	r3, r6
 8000d54:	db00      	blt.n	8000d58 <__aeabi_dadd+0x2d8>
 8000d56:	e6fc      	b.n	8000b52 <__aeabi_dadd+0xd2>
 8000d58:	1af6      	subs	r6, r6, r3
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <__aeabi_dadd+0x370>)
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	4692      	mov	sl, r2
 8000d60:	e70a      	b.n	8000b78 <__aeabi_dadd+0xf8>
 8000d62:	2f00      	cmp	r7, #0
 8000d64:	d02b      	beq.n	8000dbe <__aeabi_dadd+0x33e>
 8000d66:	1b97      	subs	r7, r2, r6
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_dadd+0x2ee>
 8000d6c:	e0b8      	b.n	8000ee0 <__aeabi_dadd+0x460>
 8000d6e:	4c1f      	ldr	r4, [pc, #124]	; (8000dec <__aeabi_dadd+0x36c>)
 8000d70:	42a2      	cmp	r2, r4
 8000d72:	d100      	bne.n	8000d76 <__aeabi_dadd+0x2f6>
 8000d74:	e11c      	b.n	8000fb0 <__aeabi_dadd+0x530>
 8000d76:	2480      	movs	r4, #128	; 0x80
 8000d78:	0424      	lsls	r4, r4, #16
 8000d7a:	4321      	orrs	r1, r4
 8000d7c:	2f38      	cmp	r7, #56	; 0x38
 8000d7e:	dd00      	ble.n	8000d82 <__aeabi_dadd+0x302>
 8000d80:	e11e      	b.n	8000fc0 <__aeabi_dadd+0x540>
 8000d82:	2f1f      	cmp	r7, #31
 8000d84:	dd00      	ble.n	8000d88 <__aeabi_dadd+0x308>
 8000d86:	e19e      	b.n	80010c6 <__aeabi_dadd+0x646>
 8000d88:	2620      	movs	r6, #32
 8000d8a:	000c      	movs	r4, r1
 8000d8c:	1bf6      	subs	r6, r6, r7
 8000d8e:	0018      	movs	r0, r3
 8000d90:	40b3      	lsls	r3, r6
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	40f8      	lsrs	r0, r7
 8000d96:	1e5e      	subs	r6, r3, #1
 8000d98:	41b3      	sbcs	r3, r6
 8000d9a:	40f9      	lsrs	r1, r7
 8000d9c:	4304      	orrs	r4, r0
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	4489      	add	r9, r1
 8000da2:	4444      	add	r4, r8
 8000da4:	4544      	cmp	r4, r8
 8000da6:	419b      	sbcs	r3, r3
 8000da8:	425b      	negs	r3, r3
 8000daa:	444b      	add	r3, r9
 8000dac:	469a      	mov	sl, r3
 8000dae:	0016      	movs	r6, r2
 8000db0:	e7a8      	b.n	8000d04 <__aeabi_dadd+0x284>
 8000db2:	4642      	mov	r2, r8
 8000db4:	464c      	mov	r4, r9
 8000db6:	4314      	orrs	r4, r2
 8000db8:	1e62      	subs	r2, r4, #1
 8000dba:	4194      	sbcs	r4, r2
 8000dbc:	e6a6      	b.n	8000b0c <__aeabi_dadd+0x8c>
 8000dbe:	4c0d      	ldr	r4, [pc, #52]	; (8000df4 <__aeabi_dadd+0x374>)
 8000dc0:	1c72      	adds	r2, r6, #1
 8000dc2:	4222      	tst	r2, r4
 8000dc4:	d000      	beq.n	8000dc8 <__aeabi_dadd+0x348>
 8000dc6:	e0a8      	b.n	8000f1a <__aeabi_dadd+0x49a>
 8000dc8:	000a      	movs	r2, r1
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d000      	beq.n	8000dd2 <__aeabi_dadd+0x352>
 8000dd0:	e10a      	b.n	8000fe8 <__aeabi_dadd+0x568>
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dadd+0x358>
 8000dd6:	e15e      	b.n	8001096 <__aeabi_dadd+0x616>
 8000dd8:	464a      	mov	r2, r9
 8000dda:	4302      	orrs	r2, r0
 8000ddc:	d000      	beq.n	8000de0 <__aeabi_dadd+0x360>
 8000dde:	e161      	b.n	80010a4 <__aeabi_dadd+0x624>
 8000de0:	074a      	lsls	r2, r1, #29
 8000de2:	08db      	lsrs	r3, r3, #3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	08c9      	lsrs	r1, r1, #3
 8000de8:	e77c      	b.n	8000ce4 <__aeabi_dadd+0x264>
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	000007ff 	.word	0x000007ff
 8000df0:	ff7fffff 	.word	0xff7fffff
 8000df4:	000007fe 	.word	0x000007fe
 8000df8:	4ccf      	ldr	r4, [pc, #828]	; (8001138 <__aeabi_dadd+0x6b8>)
 8000dfa:	42a2      	cmp	r2, r4
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_dadd+0x380>
 8000dfe:	e0ce      	b.n	8000f9e <__aeabi_dadd+0x51e>
 8000e00:	2480      	movs	r4, #128	; 0x80
 8000e02:	0424      	lsls	r4, r4, #16
 8000e04:	4321      	orrs	r1, r4
 8000e06:	2f38      	cmp	r7, #56	; 0x38
 8000e08:	dc5b      	bgt.n	8000ec2 <__aeabi_dadd+0x442>
 8000e0a:	2f1f      	cmp	r7, #31
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_dadd+0x390>
 8000e0e:	e0dc      	b.n	8000fca <__aeabi_dadd+0x54a>
 8000e10:	2520      	movs	r5, #32
 8000e12:	000c      	movs	r4, r1
 8000e14:	1bed      	subs	r5, r5, r7
 8000e16:	001e      	movs	r6, r3
 8000e18:	40ab      	lsls	r3, r5
 8000e1a:	40ac      	lsls	r4, r5
 8000e1c:	40fe      	lsrs	r6, r7
 8000e1e:	1e5d      	subs	r5, r3, #1
 8000e20:	41ab      	sbcs	r3, r5
 8000e22:	4334      	orrs	r4, r6
 8000e24:	40f9      	lsrs	r1, r7
 8000e26:	431c      	orrs	r4, r3
 8000e28:	464b      	mov	r3, r9
 8000e2a:	1a5b      	subs	r3, r3, r1
 8000e2c:	4699      	mov	r9, r3
 8000e2e:	e04c      	b.n	8000eca <__aeabi_dadd+0x44a>
 8000e30:	464a      	mov	r2, r9
 8000e32:	1a1c      	subs	r4, r3, r0
 8000e34:	1a88      	subs	r0, r1, r2
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	4192      	sbcs	r2, r2
 8000e3a:	4252      	negs	r2, r2
 8000e3c:	4692      	mov	sl, r2
 8000e3e:	0002      	movs	r2, r0
 8000e40:	4650      	mov	r0, sl
 8000e42:	1a12      	subs	r2, r2, r0
 8000e44:	4692      	mov	sl, r2
 8000e46:	0212      	lsls	r2, r2, #8
 8000e48:	d478      	bmi.n	8000f3c <__aeabi_dadd+0x4bc>
 8000e4a:	4653      	mov	r3, sl
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_dadd+0x3d2>
 8000e50:	e66a      	b.n	8000b28 <__aeabi_dadd+0xa8>
 8000e52:	2100      	movs	r1, #0
 8000e54:	2500      	movs	r5, #0
 8000e56:	e745      	b.n	8000ce4 <__aeabi_dadd+0x264>
 8000e58:	074a      	lsls	r2, r1, #29
 8000e5a:	08db      	lsrs	r3, r3, #3
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	08c9      	lsrs	r1, r1, #3
 8000e60:	e73d      	b.n	8000cde <__aeabi_dadd+0x25e>
 8000e62:	181c      	adds	r4, r3, r0
 8000e64:	429c      	cmp	r4, r3
 8000e66:	419b      	sbcs	r3, r3
 8000e68:	4449      	add	r1, r9
 8000e6a:	468a      	mov	sl, r1
 8000e6c:	425b      	negs	r3, r3
 8000e6e:	449a      	add	sl, r3
 8000e70:	4653      	mov	r3, sl
 8000e72:	2601      	movs	r6, #1
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	d400      	bmi.n	8000e7a <__aeabi_dadd+0x3fa>
 8000e78:	e727      	b.n	8000cca <__aeabi_dadd+0x24a>
 8000e7a:	2602      	movs	r6, #2
 8000e7c:	4652      	mov	r2, sl
 8000e7e:	4baf      	ldr	r3, [pc, #700]	; (800113c <__aeabi_dadd+0x6bc>)
 8000e80:	2101      	movs	r1, #1
 8000e82:	401a      	ands	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	4021      	ands	r1, r4
 8000e88:	0862      	lsrs	r2, r4, #1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	07dc      	lsls	r4, r3, #31
 8000e8e:	085b      	lsrs	r3, r3, #1
 8000e90:	469a      	mov	sl, r3
 8000e92:	4314      	orrs	r4, r2
 8000e94:	e670      	b.n	8000b78 <__aeabi_dadd+0xf8>
 8000e96:	003a      	movs	r2, r7
 8000e98:	464c      	mov	r4, r9
 8000e9a:	3a20      	subs	r2, #32
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	46a4      	mov	ip, r4
 8000ea0:	2f20      	cmp	r7, #32
 8000ea2:	d007      	beq.n	8000eb4 <__aeabi_dadd+0x434>
 8000ea4:	2240      	movs	r2, #64	; 0x40
 8000ea6:	4648      	mov	r0, r9
 8000ea8:	1bd2      	subs	r2, r2, r7
 8000eaa:	4090      	lsls	r0, r2
 8000eac:	0002      	movs	r2, r0
 8000eae:	4640      	mov	r0, r8
 8000eb0:	4310      	orrs	r0, r2
 8000eb2:	4680      	mov	r8, r0
 8000eb4:	4640      	mov	r0, r8
 8000eb6:	1e42      	subs	r2, r0, #1
 8000eb8:	4190      	sbcs	r0, r2
 8000eba:	4662      	mov	r2, ip
 8000ebc:	0004      	movs	r4, r0
 8000ebe:	4314      	orrs	r4, r2
 8000ec0:	e624      	b.n	8000b0c <__aeabi_dadd+0x8c>
 8000ec2:	4319      	orrs	r1, r3
 8000ec4:	000c      	movs	r4, r1
 8000ec6:	1e63      	subs	r3, r4, #1
 8000ec8:	419c      	sbcs	r4, r3
 8000eca:	4643      	mov	r3, r8
 8000ecc:	1b1c      	subs	r4, r3, r4
 8000ece:	45a0      	cmp	r8, r4
 8000ed0:	419b      	sbcs	r3, r3
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	425b      	negs	r3, r3
 8000ed6:	1acb      	subs	r3, r1, r3
 8000ed8:	469a      	mov	sl, r3
 8000eda:	4665      	mov	r5, ip
 8000edc:	0016      	movs	r6, r2
 8000ede:	e61b      	b.n	8000b18 <__aeabi_dadd+0x98>
 8000ee0:	000c      	movs	r4, r1
 8000ee2:	431c      	orrs	r4, r3
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dadd+0x468>
 8000ee6:	e0c7      	b.n	8001078 <__aeabi_dadd+0x5f8>
 8000ee8:	1e7c      	subs	r4, r7, #1
 8000eea:	2f01      	cmp	r7, #1
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_dadd+0x470>
 8000eee:	e0f9      	b.n	80010e4 <__aeabi_dadd+0x664>
 8000ef0:	4e91      	ldr	r6, [pc, #580]	; (8001138 <__aeabi_dadd+0x6b8>)
 8000ef2:	42b7      	cmp	r7, r6
 8000ef4:	d05c      	beq.n	8000fb0 <__aeabi_dadd+0x530>
 8000ef6:	0027      	movs	r7, r4
 8000ef8:	e740      	b.n	8000d7c <__aeabi_dadd+0x2fc>
 8000efa:	2220      	movs	r2, #32
 8000efc:	464c      	mov	r4, r9
 8000efe:	4640      	mov	r0, r8
 8000f00:	1bd2      	subs	r2, r2, r7
 8000f02:	4094      	lsls	r4, r2
 8000f04:	40f8      	lsrs	r0, r7
 8000f06:	4304      	orrs	r4, r0
 8000f08:	4640      	mov	r0, r8
 8000f0a:	4090      	lsls	r0, r2
 8000f0c:	1e42      	subs	r2, r0, #1
 8000f0e:	4190      	sbcs	r0, r2
 8000f10:	464a      	mov	r2, r9
 8000f12:	40fa      	lsrs	r2, r7
 8000f14:	4304      	orrs	r4, r0
 8000f16:	1889      	adds	r1, r1, r2
 8000f18:	e6ee      	b.n	8000cf8 <__aeabi_dadd+0x278>
 8000f1a:	4c87      	ldr	r4, [pc, #540]	; (8001138 <__aeabi_dadd+0x6b8>)
 8000f1c:	42a2      	cmp	r2, r4
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x4a2>
 8000f20:	e6f9      	b.n	8000d16 <__aeabi_dadd+0x296>
 8000f22:	1818      	adds	r0, r3, r0
 8000f24:	4298      	cmp	r0, r3
 8000f26:	419b      	sbcs	r3, r3
 8000f28:	4449      	add	r1, r9
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	18cb      	adds	r3, r1, r3
 8000f2e:	07dc      	lsls	r4, r3, #31
 8000f30:	0840      	lsrs	r0, r0, #1
 8000f32:	085b      	lsrs	r3, r3, #1
 8000f34:	469a      	mov	sl, r3
 8000f36:	0016      	movs	r6, r2
 8000f38:	4304      	orrs	r4, r0
 8000f3a:	e6c6      	b.n	8000cca <__aeabi_dadd+0x24a>
 8000f3c:	4642      	mov	r2, r8
 8000f3e:	1ad4      	subs	r4, r2, r3
 8000f40:	45a0      	cmp	r8, r4
 8000f42:	4180      	sbcs	r0, r0
 8000f44:	464b      	mov	r3, r9
 8000f46:	4240      	negs	r0, r0
 8000f48:	1a59      	subs	r1, r3, r1
 8000f4a:	1a0b      	subs	r3, r1, r0
 8000f4c:	469a      	mov	sl, r3
 8000f4e:	4665      	mov	r5, ip
 8000f50:	e5ea      	b.n	8000b28 <__aeabi_dadd+0xa8>
 8000f52:	464b      	mov	r3, r9
 8000f54:	464a      	mov	r2, r9
 8000f56:	08c0      	lsrs	r0, r0, #3
 8000f58:	075b      	lsls	r3, r3, #29
 8000f5a:	4665      	mov	r5, ip
 8000f5c:	4303      	orrs	r3, r0
 8000f5e:	08d1      	lsrs	r1, r2, #3
 8000f60:	e6bd      	b.n	8000cde <__aeabi_dadd+0x25e>
 8000f62:	2a00      	cmp	r2, #0
 8000f64:	d000      	beq.n	8000f68 <__aeabi_dadd+0x4e8>
 8000f66:	e08e      	b.n	8001086 <__aeabi_dadd+0x606>
 8000f68:	464b      	mov	r3, r9
 8000f6a:	4303      	orrs	r3, r0
 8000f6c:	d117      	bne.n	8000f9e <__aeabi_dadd+0x51e>
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	2500      	movs	r5, #0
 8000f72:	0309      	lsls	r1, r1, #12
 8000f74:	e6da      	b.n	8000d2c <__aeabi_dadd+0x2ac>
 8000f76:	074a      	lsls	r2, r1, #29
 8000f78:	08db      	lsrs	r3, r3, #3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	08c9      	lsrs	r1, r1, #3
 8000f7e:	e6d1      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 8000f80:	1a1c      	subs	r4, r3, r0
 8000f82:	464a      	mov	r2, r9
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	419b      	sbcs	r3, r3
 8000f88:	1a89      	subs	r1, r1, r2
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	1acb      	subs	r3, r1, r3
 8000f8e:	469a      	mov	sl, r3
 8000f90:	2601      	movs	r6, #1
 8000f92:	e5c1      	b.n	8000b18 <__aeabi_dadd+0x98>
 8000f94:	074a      	lsls	r2, r1, #29
 8000f96:	08db      	lsrs	r3, r3, #3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	08c9      	lsrs	r1, r1, #3
 8000f9c:	e69f      	b.n	8000cde <__aeabi_dadd+0x25e>
 8000f9e:	4643      	mov	r3, r8
 8000fa0:	08d8      	lsrs	r0, r3, #3
 8000fa2:	464b      	mov	r3, r9
 8000fa4:	464a      	mov	r2, r9
 8000fa6:	075b      	lsls	r3, r3, #29
 8000fa8:	4665      	mov	r5, ip
 8000faa:	4303      	orrs	r3, r0
 8000fac:	08d1      	lsrs	r1, r2, #3
 8000fae:	e6b9      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	08d8      	lsrs	r0, r3, #3
 8000fb4:	464b      	mov	r3, r9
 8000fb6:	464a      	mov	r2, r9
 8000fb8:	075b      	lsls	r3, r3, #29
 8000fba:	4303      	orrs	r3, r0
 8000fbc:	08d1      	lsrs	r1, r2, #3
 8000fbe:	e6b1      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 8000fc0:	4319      	orrs	r1, r3
 8000fc2:	000c      	movs	r4, r1
 8000fc4:	1e63      	subs	r3, r4, #1
 8000fc6:	419c      	sbcs	r4, r3
 8000fc8:	e6eb      	b.n	8000da2 <__aeabi_dadd+0x322>
 8000fca:	003c      	movs	r4, r7
 8000fcc:	000d      	movs	r5, r1
 8000fce:	3c20      	subs	r4, #32
 8000fd0:	40e5      	lsrs	r5, r4
 8000fd2:	2f20      	cmp	r7, #32
 8000fd4:	d003      	beq.n	8000fde <__aeabi_dadd+0x55e>
 8000fd6:	2440      	movs	r4, #64	; 0x40
 8000fd8:	1be4      	subs	r4, r4, r7
 8000fda:	40a1      	lsls	r1, r4
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	001c      	movs	r4, r3
 8000fe0:	1e63      	subs	r3, r4, #1
 8000fe2:	419c      	sbcs	r4, r3
 8000fe4:	432c      	orrs	r4, r5
 8000fe6:	e770      	b.n	8000eca <__aeabi_dadd+0x44a>
 8000fe8:	2a00      	cmp	r2, #0
 8000fea:	d0e1      	beq.n	8000fb0 <__aeabi_dadd+0x530>
 8000fec:	464a      	mov	r2, r9
 8000fee:	4302      	orrs	r2, r0
 8000ff0:	d0c1      	beq.n	8000f76 <__aeabi_dadd+0x4f6>
 8000ff2:	074a      	lsls	r2, r1, #29
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	08c9      	lsrs	r1, r1, #3
 8000ffc:	0312      	lsls	r2, r2, #12
 8000ffe:	4211      	tst	r1, r2
 8001000:	d008      	beq.n	8001014 <__aeabi_dadd+0x594>
 8001002:	4648      	mov	r0, r9
 8001004:	08c4      	lsrs	r4, r0, #3
 8001006:	4214      	tst	r4, r2
 8001008:	d104      	bne.n	8001014 <__aeabi_dadd+0x594>
 800100a:	4643      	mov	r3, r8
 800100c:	0021      	movs	r1, r4
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	0742      	lsls	r2, r0, #29
 8001012:	4313      	orrs	r3, r2
 8001014:	0f5a      	lsrs	r2, r3, #29
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	0752      	lsls	r2, r2, #29
 800101a:	08db      	lsrs	r3, r3, #3
 800101c:	4313      	orrs	r3, r2
 800101e:	e681      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 8001020:	464b      	mov	r3, r9
 8001022:	4303      	orrs	r3, r0
 8001024:	d100      	bne.n	8001028 <__aeabi_dadd+0x5a8>
 8001026:	e714      	b.n	8000e52 <__aeabi_dadd+0x3d2>
 8001028:	464b      	mov	r3, r9
 800102a:	464a      	mov	r2, r9
 800102c:	08c0      	lsrs	r0, r0, #3
 800102e:	075b      	lsls	r3, r3, #29
 8001030:	4665      	mov	r5, ip
 8001032:	4303      	orrs	r3, r0
 8001034:	08d1      	lsrs	r1, r2, #3
 8001036:	e655      	b.n	8000ce4 <__aeabi_dadd+0x264>
 8001038:	1ac4      	subs	r4, r0, r3
 800103a:	45a0      	cmp	r8, r4
 800103c:	4180      	sbcs	r0, r0
 800103e:	464b      	mov	r3, r9
 8001040:	4240      	negs	r0, r0
 8001042:	1a59      	subs	r1, r3, r1
 8001044:	1a0b      	subs	r3, r1, r0
 8001046:	469a      	mov	sl, r3
 8001048:	4665      	mov	r5, ip
 800104a:	2601      	movs	r6, #1
 800104c:	e564      	b.n	8000b18 <__aeabi_dadd+0x98>
 800104e:	1a1c      	subs	r4, r3, r0
 8001050:	464a      	mov	r2, r9
 8001052:	42a3      	cmp	r3, r4
 8001054:	4180      	sbcs	r0, r0
 8001056:	1a8a      	subs	r2, r1, r2
 8001058:	4240      	negs	r0, r0
 800105a:	1a12      	subs	r2, r2, r0
 800105c:	4692      	mov	sl, r2
 800105e:	0212      	lsls	r2, r2, #8
 8001060:	d549      	bpl.n	80010f6 <__aeabi_dadd+0x676>
 8001062:	4642      	mov	r2, r8
 8001064:	1ad4      	subs	r4, r2, r3
 8001066:	45a0      	cmp	r8, r4
 8001068:	4180      	sbcs	r0, r0
 800106a:	464b      	mov	r3, r9
 800106c:	4240      	negs	r0, r0
 800106e:	1a59      	subs	r1, r3, r1
 8001070:	1a0b      	subs	r3, r1, r0
 8001072:	469a      	mov	sl, r3
 8001074:	4665      	mov	r5, ip
 8001076:	e57f      	b.n	8000b78 <__aeabi_dadd+0xf8>
 8001078:	464b      	mov	r3, r9
 800107a:	464a      	mov	r2, r9
 800107c:	08c0      	lsrs	r0, r0, #3
 800107e:	075b      	lsls	r3, r3, #29
 8001080:	4303      	orrs	r3, r0
 8001082:	08d1      	lsrs	r1, r2, #3
 8001084:	e62b      	b.n	8000cde <__aeabi_dadd+0x25e>
 8001086:	464a      	mov	r2, r9
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	4302      	orrs	r2, r0
 800108c:	d138      	bne.n	8001100 <__aeabi_dadd+0x680>
 800108e:	074a      	lsls	r2, r1, #29
 8001090:	4313      	orrs	r3, r2
 8001092:	08c9      	lsrs	r1, r1, #3
 8001094:	e646      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 8001096:	464b      	mov	r3, r9
 8001098:	464a      	mov	r2, r9
 800109a:	08c0      	lsrs	r0, r0, #3
 800109c:	075b      	lsls	r3, r3, #29
 800109e:	4303      	orrs	r3, r0
 80010a0:	08d1      	lsrs	r1, r2, #3
 80010a2:	e61f      	b.n	8000ce4 <__aeabi_dadd+0x264>
 80010a4:	181c      	adds	r4, r3, r0
 80010a6:	429c      	cmp	r4, r3
 80010a8:	419b      	sbcs	r3, r3
 80010aa:	4449      	add	r1, r9
 80010ac:	468a      	mov	sl, r1
 80010ae:	425b      	negs	r3, r3
 80010b0:	449a      	add	sl, r3
 80010b2:	4653      	mov	r3, sl
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	d400      	bmi.n	80010ba <__aeabi_dadd+0x63a>
 80010b8:	e607      	b.n	8000cca <__aeabi_dadd+0x24a>
 80010ba:	4652      	mov	r2, sl
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <__aeabi_dadd+0x6bc>)
 80010be:	2601      	movs	r6, #1
 80010c0:	401a      	ands	r2, r3
 80010c2:	4692      	mov	sl, r2
 80010c4:	e601      	b.n	8000cca <__aeabi_dadd+0x24a>
 80010c6:	003c      	movs	r4, r7
 80010c8:	000e      	movs	r6, r1
 80010ca:	3c20      	subs	r4, #32
 80010cc:	40e6      	lsrs	r6, r4
 80010ce:	2f20      	cmp	r7, #32
 80010d0:	d003      	beq.n	80010da <__aeabi_dadd+0x65a>
 80010d2:	2440      	movs	r4, #64	; 0x40
 80010d4:	1be4      	subs	r4, r4, r7
 80010d6:	40a1      	lsls	r1, r4
 80010d8:	430b      	orrs	r3, r1
 80010da:	001c      	movs	r4, r3
 80010dc:	1e63      	subs	r3, r4, #1
 80010de:	419c      	sbcs	r4, r3
 80010e0:	4334      	orrs	r4, r6
 80010e2:	e65e      	b.n	8000da2 <__aeabi_dadd+0x322>
 80010e4:	4443      	add	r3, r8
 80010e6:	4283      	cmp	r3, r0
 80010e8:	4180      	sbcs	r0, r0
 80010ea:	4449      	add	r1, r9
 80010ec:	468a      	mov	sl, r1
 80010ee:	4240      	negs	r0, r0
 80010f0:	001c      	movs	r4, r3
 80010f2:	4482      	add	sl, r0
 80010f4:	e6bc      	b.n	8000e70 <__aeabi_dadd+0x3f0>
 80010f6:	4653      	mov	r3, sl
 80010f8:	4323      	orrs	r3, r4
 80010fa:	d100      	bne.n	80010fe <__aeabi_dadd+0x67e>
 80010fc:	e6a9      	b.n	8000e52 <__aeabi_dadd+0x3d2>
 80010fe:	e5e4      	b.n	8000cca <__aeabi_dadd+0x24a>
 8001100:	074a      	lsls	r2, r1, #29
 8001102:	4313      	orrs	r3, r2
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	08c9      	lsrs	r1, r1, #3
 8001108:	0312      	lsls	r2, r2, #12
 800110a:	4211      	tst	r1, r2
 800110c:	d009      	beq.n	8001122 <__aeabi_dadd+0x6a2>
 800110e:	4648      	mov	r0, r9
 8001110:	08c4      	lsrs	r4, r0, #3
 8001112:	4214      	tst	r4, r2
 8001114:	d105      	bne.n	8001122 <__aeabi_dadd+0x6a2>
 8001116:	4643      	mov	r3, r8
 8001118:	4665      	mov	r5, ip
 800111a:	0021      	movs	r1, r4
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	0742      	lsls	r2, r0, #29
 8001120:	4313      	orrs	r3, r2
 8001122:	0f5a      	lsrs	r2, r3, #29
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	0752      	lsls	r2, r2, #29
 800112a:	4313      	orrs	r3, r2
 800112c:	e5fa      	b.n	8000d24 <__aeabi_dadd+0x2a4>
 800112e:	2300      	movs	r3, #0
 8001130:	4a01      	ldr	r2, [pc, #4]	; (8001138 <__aeabi_dadd+0x6b8>)
 8001132:	001c      	movs	r4, r3
 8001134:	e540      	b.n	8000bb8 <__aeabi_dadd+0x138>
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	000007ff 	.word	0x000007ff
 800113c:	ff7fffff 	.word	0xff7fffff

08001140 <__aeabi_ddiv>:
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	4657      	mov	r7, sl
 8001144:	464e      	mov	r6, r9
 8001146:	4645      	mov	r5, r8
 8001148:	46de      	mov	lr, fp
 800114a:	b5e0      	push	{r5, r6, r7, lr}
 800114c:	030c      	lsls	r4, r1, #12
 800114e:	001f      	movs	r7, r3
 8001150:	004b      	lsls	r3, r1, #1
 8001152:	4681      	mov	r9, r0
 8001154:	4692      	mov	sl, r2
 8001156:	0005      	movs	r5, r0
 8001158:	b085      	sub	sp, #20
 800115a:	0b24      	lsrs	r4, r4, #12
 800115c:	0d5b      	lsrs	r3, r3, #21
 800115e:	0fce      	lsrs	r6, r1, #31
 8001160:	2b00      	cmp	r3, #0
 8001162:	d100      	bne.n	8001166 <__aeabi_ddiv+0x26>
 8001164:	e152      	b.n	800140c <__aeabi_ddiv+0x2cc>
 8001166:	4ad2      	ldr	r2, [pc, #840]	; (80014b0 <__aeabi_ddiv+0x370>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d100      	bne.n	800116e <__aeabi_ddiv+0x2e>
 800116c:	e16e      	b.n	800144c <__aeabi_ddiv+0x30c>
 800116e:	0f42      	lsrs	r2, r0, #29
 8001170:	00e4      	lsls	r4, r4, #3
 8001172:	4314      	orrs	r4, r2
 8001174:	2280      	movs	r2, #128	; 0x80
 8001176:	0412      	lsls	r2, r2, #16
 8001178:	4322      	orrs	r2, r4
 800117a:	4690      	mov	r8, r2
 800117c:	4acd      	ldr	r2, [pc, #820]	; (80014b4 <__aeabi_ddiv+0x374>)
 800117e:	00c5      	lsls	r5, r0, #3
 8001180:	4693      	mov	fp, r2
 8001182:	449b      	add	fp, r3
 8001184:	2300      	movs	r3, #0
 8001186:	4699      	mov	r9, r3
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	033c      	lsls	r4, r7, #12
 800118c:	007b      	lsls	r3, r7, #1
 800118e:	4650      	mov	r0, sl
 8001190:	0b24      	lsrs	r4, r4, #12
 8001192:	0d5b      	lsrs	r3, r3, #21
 8001194:	0fff      	lsrs	r7, r7, #31
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <__aeabi_ddiv+0x5c>
 800119a:	e11a      	b.n	80013d2 <__aeabi_ddiv+0x292>
 800119c:	4ac4      	ldr	r2, [pc, #784]	; (80014b0 <__aeabi_ddiv+0x370>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d100      	bne.n	80011a4 <__aeabi_ddiv+0x64>
 80011a2:	e15e      	b.n	8001462 <__aeabi_ddiv+0x322>
 80011a4:	0f42      	lsrs	r2, r0, #29
 80011a6:	00e4      	lsls	r4, r4, #3
 80011a8:	4322      	orrs	r2, r4
 80011aa:	2480      	movs	r4, #128	; 0x80
 80011ac:	0424      	lsls	r4, r4, #16
 80011ae:	4314      	orrs	r4, r2
 80011b0:	4ac0      	ldr	r2, [pc, #768]	; (80014b4 <__aeabi_ddiv+0x374>)
 80011b2:	00c1      	lsls	r1, r0, #3
 80011b4:	4694      	mov	ip, r2
 80011b6:	465a      	mov	r2, fp
 80011b8:	4463      	add	r3, ip
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	469b      	mov	fp, r3
 80011be:	2000      	movs	r0, #0
 80011c0:	0033      	movs	r3, r6
 80011c2:	407b      	eors	r3, r7
 80011c4:	469a      	mov	sl, r3
 80011c6:	464b      	mov	r3, r9
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d827      	bhi.n	800121c <__aeabi_ddiv+0xdc>
 80011cc:	4aba      	ldr	r2, [pc, #744]	; (80014b8 <__aeabi_ddiv+0x378>)
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	58d3      	ldr	r3, [r2, r3]
 80011d2:	469f      	mov	pc, r3
 80011d4:	46b2      	mov	sl, r6
 80011d6:	9b00      	ldr	r3, [sp, #0]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d016      	beq.n	800120a <__aeabi_ddiv+0xca>
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0xa2>
 80011e0:	e287      	b.n	80016f2 <__aeabi_ddiv+0x5b2>
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d000      	beq.n	80011e8 <__aeabi_ddiv+0xa8>
 80011e6:	e0d5      	b.n	8001394 <__aeabi_ddiv+0x254>
 80011e8:	2300      	movs	r3, #0
 80011ea:	2200      	movs	r2, #0
 80011ec:	2500      	movs	r5, #0
 80011ee:	051b      	lsls	r3, r3, #20
 80011f0:	4313      	orrs	r3, r2
 80011f2:	4652      	mov	r2, sl
 80011f4:	07d2      	lsls	r2, r2, #31
 80011f6:	4313      	orrs	r3, r2
 80011f8:	0028      	movs	r0, r5
 80011fa:	0019      	movs	r1, r3
 80011fc:	b005      	add	sp, #20
 80011fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001200:	46bb      	mov	fp, r7
 8001202:	46b2      	mov	sl, r6
 8001204:	46a9      	mov	r9, r5
 8001206:	46a0      	mov	r8, r4
 8001208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800120a:	2200      	movs	r2, #0
 800120c:	2500      	movs	r5, #0
 800120e:	4ba8      	ldr	r3, [pc, #672]	; (80014b0 <__aeabi_ddiv+0x370>)
 8001210:	e7ed      	b.n	80011ee <__aeabi_ddiv+0xae>
 8001212:	46ba      	mov	sl, r7
 8001214:	46a0      	mov	r8, r4
 8001216:	000d      	movs	r5, r1
 8001218:	9000      	str	r0, [sp, #0]
 800121a:	e7dc      	b.n	80011d6 <__aeabi_ddiv+0x96>
 800121c:	4544      	cmp	r4, r8
 800121e:	d200      	bcs.n	8001222 <__aeabi_ddiv+0xe2>
 8001220:	e1c4      	b.n	80015ac <__aeabi_ddiv+0x46c>
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0xe6>
 8001224:	e1bf      	b.n	80015a6 <__aeabi_ddiv+0x466>
 8001226:	2301      	movs	r3, #1
 8001228:	425b      	negs	r3, r3
 800122a:	469c      	mov	ip, r3
 800122c:	002e      	movs	r6, r5
 800122e:	4640      	mov	r0, r8
 8001230:	2500      	movs	r5, #0
 8001232:	44e3      	add	fp, ip
 8001234:	0223      	lsls	r3, r4, #8
 8001236:	0e0c      	lsrs	r4, r1, #24
 8001238:	431c      	orrs	r4, r3
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	4699      	mov	r9, r3
 800123e:	0423      	lsls	r3, r4, #16
 8001240:	020a      	lsls	r2, r1, #8
 8001242:	0c1f      	lsrs	r7, r3, #16
 8001244:	4649      	mov	r1, r9
 8001246:	9200      	str	r2, [sp, #0]
 8001248:	9701      	str	r7, [sp, #4]
 800124a:	f7fe ffff 	bl	800024c <__aeabi_uidivmod>
 800124e:	0002      	movs	r2, r0
 8001250:	437a      	muls	r2, r7
 8001252:	040b      	lsls	r3, r1, #16
 8001254:	0c31      	lsrs	r1, r6, #16
 8001256:	4680      	mov	r8, r0
 8001258:	4319      	orrs	r1, r3
 800125a:	428a      	cmp	r2, r1
 800125c:	d907      	bls.n	800126e <__aeabi_ddiv+0x12e>
 800125e:	2301      	movs	r3, #1
 8001260:	425b      	negs	r3, r3
 8001262:	469c      	mov	ip, r3
 8001264:	1909      	adds	r1, r1, r4
 8001266:	44e0      	add	r8, ip
 8001268:	428c      	cmp	r4, r1
 800126a:	d800      	bhi.n	800126e <__aeabi_ddiv+0x12e>
 800126c:	e201      	b.n	8001672 <__aeabi_ddiv+0x532>
 800126e:	1a88      	subs	r0, r1, r2
 8001270:	4649      	mov	r1, r9
 8001272:	f7fe ffeb 	bl	800024c <__aeabi_uidivmod>
 8001276:	9a01      	ldr	r2, [sp, #4]
 8001278:	0436      	lsls	r6, r6, #16
 800127a:	4342      	muls	r2, r0
 800127c:	0409      	lsls	r1, r1, #16
 800127e:	0c36      	lsrs	r6, r6, #16
 8001280:	0003      	movs	r3, r0
 8001282:	430e      	orrs	r6, r1
 8001284:	42b2      	cmp	r2, r6
 8001286:	d904      	bls.n	8001292 <__aeabi_ddiv+0x152>
 8001288:	1936      	adds	r6, r6, r4
 800128a:	3b01      	subs	r3, #1
 800128c:	42b4      	cmp	r4, r6
 800128e:	d800      	bhi.n	8001292 <__aeabi_ddiv+0x152>
 8001290:	e1e9      	b.n	8001666 <__aeabi_ddiv+0x526>
 8001292:	1ab0      	subs	r0, r6, r2
 8001294:	4642      	mov	r2, r8
 8001296:	9e00      	ldr	r6, [sp, #0]
 8001298:	0412      	lsls	r2, r2, #16
 800129a:	431a      	orrs	r2, r3
 800129c:	0c33      	lsrs	r3, r6, #16
 800129e:	001f      	movs	r7, r3
 80012a0:	0c11      	lsrs	r1, r2, #16
 80012a2:	4690      	mov	r8, r2
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	0413      	lsls	r3, r2, #16
 80012a8:	0432      	lsls	r2, r6, #16
 80012aa:	0c16      	lsrs	r6, r2, #16
 80012ac:	0032      	movs	r2, r6
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	435a      	muls	r2, r3
 80012b2:	9603      	str	r6, [sp, #12]
 80012b4:	437b      	muls	r3, r7
 80012b6:	434e      	muls	r6, r1
 80012b8:	4379      	muls	r1, r7
 80012ba:	0c17      	lsrs	r7, r2, #16
 80012bc:	46bc      	mov	ip, r7
 80012be:	199b      	adds	r3, r3, r6
 80012c0:	4463      	add	r3, ip
 80012c2:	429e      	cmp	r6, r3
 80012c4:	d903      	bls.n	80012ce <__aeabi_ddiv+0x18e>
 80012c6:	2680      	movs	r6, #128	; 0x80
 80012c8:	0276      	lsls	r6, r6, #9
 80012ca:	46b4      	mov	ip, r6
 80012cc:	4461      	add	r1, ip
 80012ce:	0c1e      	lsrs	r6, r3, #16
 80012d0:	1871      	adds	r1, r6, r1
 80012d2:	0416      	lsls	r6, r2, #16
 80012d4:	041b      	lsls	r3, r3, #16
 80012d6:	0c36      	lsrs	r6, r6, #16
 80012d8:	199e      	adds	r6, r3, r6
 80012da:	4288      	cmp	r0, r1
 80012dc:	d302      	bcc.n	80012e4 <__aeabi_ddiv+0x1a4>
 80012de:	d112      	bne.n	8001306 <__aeabi_ddiv+0x1c6>
 80012e0:	42b5      	cmp	r5, r6
 80012e2:	d210      	bcs.n	8001306 <__aeabi_ddiv+0x1c6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	1e5a      	subs	r2, r3, #1
 80012e8:	9b00      	ldr	r3, [sp, #0]
 80012ea:	469c      	mov	ip, r3
 80012ec:	4465      	add	r5, ip
 80012ee:	001f      	movs	r7, r3
 80012f0:	429d      	cmp	r5, r3
 80012f2:	419b      	sbcs	r3, r3
 80012f4:	425b      	negs	r3, r3
 80012f6:	191b      	adds	r3, r3, r4
 80012f8:	18c0      	adds	r0, r0, r3
 80012fa:	4284      	cmp	r4, r0
 80012fc:	d200      	bcs.n	8001300 <__aeabi_ddiv+0x1c0>
 80012fe:	e19e      	b.n	800163e <__aeabi_ddiv+0x4fe>
 8001300:	d100      	bne.n	8001304 <__aeabi_ddiv+0x1c4>
 8001302:	e199      	b.n	8001638 <__aeabi_ddiv+0x4f8>
 8001304:	4690      	mov	r8, r2
 8001306:	1bae      	subs	r6, r5, r6
 8001308:	42b5      	cmp	r5, r6
 800130a:	41ad      	sbcs	r5, r5
 800130c:	1a40      	subs	r0, r0, r1
 800130e:	426d      	negs	r5, r5
 8001310:	1b40      	subs	r0, r0, r5
 8001312:	4284      	cmp	r4, r0
 8001314:	d100      	bne.n	8001318 <__aeabi_ddiv+0x1d8>
 8001316:	e1d2      	b.n	80016be <__aeabi_ddiv+0x57e>
 8001318:	4649      	mov	r1, r9
 800131a:	f7fe ff97 	bl	800024c <__aeabi_uidivmod>
 800131e:	9a01      	ldr	r2, [sp, #4]
 8001320:	040b      	lsls	r3, r1, #16
 8001322:	4342      	muls	r2, r0
 8001324:	0c31      	lsrs	r1, r6, #16
 8001326:	0005      	movs	r5, r0
 8001328:	4319      	orrs	r1, r3
 800132a:	428a      	cmp	r2, r1
 800132c:	d900      	bls.n	8001330 <__aeabi_ddiv+0x1f0>
 800132e:	e16c      	b.n	800160a <__aeabi_ddiv+0x4ca>
 8001330:	1a88      	subs	r0, r1, r2
 8001332:	4649      	mov	r1, r9
 8001334:	f7fe ff8a 	bl	800024c <__aeabi_uidivmod>
 8001338:	9a01      	ldr	r2, [sp, #4]
 800133a:	0436      	lsls	r6, r6, #16
 800133c:	4342      	muls	r2, r0
 800133e:	0409      	lsls	r1, r1, #16
 8001340:	0c36      	lsrs	r6, r6, #16
 8001342:	0003      	movs	r3, r0
 8001344:	430e      	orrs	r6, r1
 8001346:	42b2      	cmp	r2, r6
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x20c>
 800134a:	e153      	b.n	80015f4 <__aeabi_ddiv+0x4b4>
 800134c:	9803      	ldr	r0, [sp, #12]
 800134e:	1ab6      	subs	r6, r6, r2
 8001350:	0002      	movs	r2, r0
 8001352:	042d      	lsls	r5, r5, #16
 8001354:	431d      	orrs	r5, r3
 8001356:	9f02      	ldr	r7, [sp, #8]
 8001358:	042b      	lsls	r3, r5, #16
 800135a:	0c1b      	lsrs	r3, r3, #16
 800135c:	435a      	muls	r2, r3
 800135e:	437b      	muls	r3, r7
 8001360:	469c      	mov	ip, r3
 8001362:	0c29      	lsrs	r1, r5, #16
 8001364:	4348      	muls	r0, r1
 8001366:	0c13      	lsrs	r3, r2, #16
 8001368:	4484      	add	ip, r0
 800136a:	4463      	add	r3, ip
 800136c:	4379      	muls	r1, r7
 800136e:	4298      	cmp	r0, r3
 8001370:	d903      	bls.n	800137a <__aeabi_ddiv+0x23a>
 8001372:	2080      	movs	r0, #128	; 0x80
 8001374:	0240      	lsls	r0, r0, #9
 8001376:	4684      	mov	ip, r0
 8001378:	4461      	add	r1, ip
 800137a:	0c18      	lsrs	r0, r3, #16
 800137c:	0412      	lsls	r2, r2, #16
 800137e:	041b      	lsls	r3, r3, #16
 8001380:	0c12      	lsrs	r2, r2, #16
 8001382:	1840      	adds	r0, r0, r1
 8001384:	189b      	adds	r3, r3, r2
 8001386:	4286      	cmp	r6, r0
 8001388:	d200      	bcs.n	800138c <__aeabi_ddiv+0x24c>
 800138a:	e100      	b.n	800158e <__aeabi_ddiv+0x44e>
 800138c:	d100      	bne.n	8001390 <__aeabi_ddiv+0x250>
 800138e:	e0fb      	b.n	8001588 <__aeabi_ddiv+0x448>
 8001390:	2301      	movs	r3, #1
 8001392:	431d      	orrs	r5, r3
 8001394:	4b49      	ldr	r3, [pc, #292]	; (80014bc <__aeabi_ddiv+0x37c>)
 8001396:	445b      	add	r3, fp
 8001398:	2b00      	cmp	r3, #0
 800139a:	dc00      	bgt.n	800139e <__aeabi_ddiv+0x25e>
 800139c:	e0aa      	b.n	80014f4 <__aeabi_ddiv+0x3b4>
 800139e:	076a      	lsls	r2, r5, #29
 80013a0:	d000      	beq.n	80013a4 <__aeabi_ddiv+0x264>
 80013a2:	e13d      	b.n	8001620 <__aeabi_ddiv+0x4e0>
 80013a4:	08e9      	lsrs	r1, r5, #3
 80013a6:	4642      	mov	r2, r8
 80013a8:	01d2      	lsls	r2, r2, #7
 80013aa:	d506      	bpl.n	80013ba <__aeabi_ddiv+0x27a>
 80013ac:	4642      	mov	r2, r8
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <__aeabi_ddiv+0x380>)
 80013b0:	401a      	ands	r2, r3
 80013b2:	2380      	movs	r3, #128	; 0x80
 80013b4:	4690      	mov	r8, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	445b      	add	r3, fp
 80013ba:	4a42      	ldr	r2, [pc, #264]	; (80014c4 <__aeabi_ddiv+0x384>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	dd00      	ble.n	80013c2 <__aeabi_ddiv+0x282>
 80013c0:	e723      	b.n	800120a <__aeabi_ddiv+0xca>
 80013c2:	4642      	mov	r2, r8
 80013c4:	055b      	lsls	r3, r3, #21
 80013c6:	0755      	lsls	r5, r2, #29
 80013c8:	0252      	lsls	r2, r2, #9
 80013ca:	430d      	orrs	r5, r1
 80013cc:	0b12      	lsrs	r2, r2, #12
 80013ce:	0d5b      	lsrs	r3, r3, #21
 80013d0:	e70d      	b.n	80011ee <__aeabi_ddiv+0xae>
 80013d2:	4651      	mov	r1, sl
 80013d4:	4321      	orrs	r1, r4
 80013d6:	d100      	bne.n	80013da <__aeabi_ddiv+0x29a>
 80013d8:	e07c      	b.n	80014d4 <__aeabi_ddiv+0x394>
 80013da:	2c00      	cmp	r4, #0
 80013dc:	d100      	bne.n	80013e0 <__aeabi_ddiv+0x2a0>
 80013de:	e0fb      	b.n	80015d8 <__aeabi_ddiv+0x498>
 80013e0:	0020      	movs	r0, r4
 80013e2:	f001 fa63 	bl	80028ac <__clzsi2>
 80013e6:	0002      	movs	r2, r0
 80013e8:	3a0b      	subs	r2, #11
 80013ea:	231d      	movs	r3, #29
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	4652      	mov	r2, sl
 80013f0:	0001      	movs	r1, r0
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	4653      	mov	r3, sl
 80013f6:	3908      	subs	r1, #8
 80013f8:	408b      	lsls	r3, r1
 80013fa:	408c      	lsls	r4, r1
 80013fc:	0019      	movs	r1, r3
 80013fe:	4314      	orrs	r4, r2
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <__aeabi_ddiv+0x388>)
 8001402:	4458      	add	r0, fp
 8001404:	469b      	mov	fp, r3
 8001406:	4483      	add	fp, r0
 8001408:	2000      	movs	r0, #0
 800140a:	e6d9      	b.n	80011c0 <__aeabi_ddiv+0x80>
 800140c:	0003      	movs	r3, r0
 800140e:	4323      	orrs	r3, r4
 8001410:	4698      	mov	r8, r3
 8001412:	d044      	beq.n	800149e <__aeabi_ddiv+0x35e>
 8001414:	2c00      	cmp	r4, #0
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x2da>
 8001418:	e0cf      	b.n	80015ba <__aeabi_ddiv+0x47a>
 800141a:	0020      	movs	r0, r4
 800141c:	f001 fa46 	bl	80028ac <__clzsi2>
 8001420:	0001      	movs	r1, r0
 8001422:	0002      	movs	r2, r0
 8001424:	390b      	subs	r1, #11
 8001426:	231d      	movs	r3, #29
 8001428:	1a5b      	subs	r3, r3, r1
 800142a:	4649      	mov	r1, r9
 800142c:	0010      	movs	r0, r2
 800142e:	40d9      	lsrs	r1, r3
 8001430:	3808      	subs	r0, #8
 8001432:	4084      	lsls	r4, r0
 8001434:	000b      	movs	r3, r1
 8001436:	464d      	mov	r5, r9
 8001438:	4323      	orrs	r3, r4
 800143a:	4698      	mov	r8, r3
 800143c:	4085      	lsls	r5, r0
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <__aeabi_ddiv+0x38c>)
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	469b      	mov	fp, r3
 8001444:	2300      	movs	r3, #0
 8001446:	4699      	mov	r9, r3
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	e69e      	b.n	800118a <__aeabi_ddiv+0x4a>
 800144c:	0002      	movs	r2, r0
 800144e:	4322      	orrs	r2, r4
 8001450:	4690      	mov	r8, r2
 8001452:	d11d      	bne.n	8001490 <__aeabi_ddiv+0x350>
 8001454:	2208      	movs	r2, #8
 8001456:	469b      	mov	fp, r3
 8001458:	2302      	movs	r3, #2
 800145a:	2500      	movs	r5, #0
 800145c:	4691      	mov	r9, r2
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	e693      	b.n	800118a <__aeabi_ddiv+0x4a>
 8001462:	4651      	mov	r1, sl
 8001464:	4321      	orrs	r1, r4
 8001466:	d109      	bne.n	800147c <__aeabi_ddiv+0x33c>
 8001468:	2302      	movs	r3, #2
 800146a:	464a      	mov	r2, r9
 800146c:	431a      	orrs	r2, r3
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <__aeabi_ddiv+0x390>)
 8001470:	4691      	mov	r9, r2
 8001472:	469c      	mov	ip, r3
 8001474:	2400      	movs	r4, #0
 8001476:	2002      	movs	r0, #2
 8001478:	44e3      	add	fp, ip
 800147a:	e6a1      	b.n	80011c0 <__aeabi_ddiv+0x80>
 800147c:	2303      	movs	r3, #3
 800147e:	464a      	mov	r2, r9
 8001480:	431a      	orrs	r2, r3
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <__aeabi_ddiv+0x390>)
 8001484:	4691      	mov	r9, r2
 8001486:	469c      	mov	ip, r3
 8001488:	4651      	mov	r1, sl
 800148a:	2003      	movs	r0, #3
 800148c:	44e3      	add	fp, ip
 800148e:	e697      	b.n	80011c0 <__aeabi_ddiv+0x80>
 8001490:	220c      	movs	r2, #12
 8001492:	469b      	mov	fp, r3
 8001494:	2303      	movs	r3, #3
 8001496:	46a0      	mov	r8, r4
 8001498:	4691      	mov	r9, r2
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	e675      	b.n	800118a <__aeabi_ddiv+0x4a>
 800149e:	2304      	movs	r3, #4
 80014a0:	4699      	mov	r9, r3
 80014a2:	2300      	movs	r3, #0
 80014a4:	469b      	mov	fp, r3
 80014a6:	3301      	adds	r3, #1
 80014a8:	2500      	movs	r5, #0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	e66d      	b.n	800118a <__aeabi_ddiv+0x4a>
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	000007ff 	.word	0x000007ff
 80014b4:	fffffc01 	.word	0xfffffc01
 80014b8:	0800dd20 	.word	0x0800dd20
 80014bc:	000003ff 	.word	0x000003ff
 80014c0:	feffffff 	.word	0xfeffffff
 80014c4:	000007fe 	.word	0x000007fe
 80014c8:	000003f3 	.word	0x000003f3
 80014cc:	fffffc0d 	.word	0xfffffc0d
 80014d0:	fffff801 	.word	0xfffff801
 80014d4:	464a      	mov	r2, r9
 80014d6:	2301      	movs	r3, #1
 80014d8:	431a      	orrs	r2, r3
 80014da:	4691      	mov	r9, r2
 80014dc:	2400      	movs	r4, #0
 80014de:	2001      	movs	r0, #1
 80014e0:	e66e      	b.n	80011c0 <__aeabi_ddiv+0x80>
 80014e2:	2300      	movs	r3, #0
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	469a      	mov	sl, r3
 80014e8:	2500      	movs	r5, #0
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <__aeabi_ddiv+0x5cc>)
 80014ec:	0312      	lsls	r2, r2, #12
 80014ee:	e67e      	b.n	80011ee <__aeabi_ddiv+0xae>
 80014f0:	2501      	movs	r5, #1
 80014f2:	426d      	negs	r5, r5
 80014f4:	2201      	movs	r2, #1
 80014f6:	1ad2      	subs	r2, r2, r3
 80014f8:	2a38      	cmp	r2, #56	; 0x38
 80014fa:	dd00      	ble.n	80014fe <__aeabi_ddiv+0x3be>
 80014fc:	e674      	b.n	80011e8 <__aeabi_ddiv+0xa8>
 80014fe:	2a1f      	cmp	r2, #31
 8001500:	dc00      	bgt.n	8001504 <__aeabi_ddiv+0x3c4>
 8001502:	e0bd      	b.n	8001680 <__aeabi_ddiv+0x540>
 8001504:	211f      	movs	r1, #31
 8001506:	4249      	negs	r1, r1
 8001508:	1acb      	subs	r3, r1, r3
 800150a:	4641      	mov	r1, r8
 800150c:	40d9      	lsrs	r1, r3
 800150e:	000b      	movs	r3, r1
 8001510:	2a20      	cmp	r2, #32
 8001512:	d004      	beq.n	800151e <__aeabi_ddiv+0x3de>
 8001514:	4641      	mov	r1, r8
 8001516:	4a7e      	ldr	r2, [pc, #504]	; (8001710 <__aeabi_ddiv+0x5d0>)
 8001518:	445a      	add	r2, fp
 800151a:	4091      	lsls	r1, r2
 800151c:	430d      	orrs	r5, r1
 800151e:	0029      	movs	r1, r5
 8001520:	1e4a      	subs	r2, r1, #1
 8001522:	4191      	sbcs	r1, r2
 8001524:	4319      	orrs	r1, r3
 8001526:	2307      	movs	r3, #7
 8001528:	001d      	movs	r5, r3
 800152a:	2200      	movs	r2, #0
 800152c:	400d      	ands	r5, r1
 800152e:	420b      	tst	r3, r1
 8001530:	d100      	bne.n	8001534 <__aeabi_ddiv+0x3f4>
 8001532:	e0d0      	b.n	80016d6 <__aeabi_ddiv+0x596>
 8001534:	220f      	movs	r2, #15
 8001536:	2300      	movs	r3, #0
 8001538:	400a      	ands	r2, r1
 800153a:	2a04      	cmp	r2, #4
 800153c:	d100      	bne.n	8001540 <__aeabi_ddiv+0x400>
 800153e:	e0c7      	b.n	80016d0 <__aeabi_ddiv+0x590>
 8001540:	1d0a      	adds	r2, r1, #4
 8001542:	428a      	cmp	r2, r1
 8001544:	4189      	sbcs	r1, r1
 8001546:	4249      	negs	r1, r1
 8001548:	185b      	adds	r3, r3, r1
 800154a:	0011      	movs	r1, r2
 800154c:	021a      	lsls	r2, r3, #8
 800154e:	d400      	bmi.n	8001552 <__aeabi_ddiv+0x412>
 8001550:	e0be      	b.n	80016d0 <__aeabi_ddiv+0x590>
 8001552:	2301      	movs	r3, #1
 8001554:	2200      	movs	r2, #0
 8001556:	2500      	movs	r5, #0
 8001558:	e649      	b.n	80011ee <__aeabi_ddiv+0xae>
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	4643      	mov	r3, r8
 800155e:	0312      	lsls	r2, r2, #12
 8001560:	4213      	tst	r3, r2
 8001562:	d008      	beq.n	8001576 <__aeabi_ddiv+0x436>
 8001564:	4214      	tst	r4, r2
 8001566:	d106      	bne.n	8001576 <__aeabi_ddiv+0x436>
 8001568:	4322      	orrs	r2, r4
 800156a:	0312      	lsls	r2, r2, #12
 800156c:	46ba      	mov	sl, r7
 800156e:	000d      	movs	r5, r1
 8001570:	4b66      	ldr	r3, [pc, #408]	; (800170c <__aeabi_ddiv+0x5cc>)
 8001572:	0b12      	lsrs	r2, r2, #12
 8001574:	e63b      	b.n	80011ee <__aeabi_ddiv+0xae>
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	4643      	mov	r3, r8
 800157a:	0312      	lsls	r2, r2, #12
 800157c:	431a      	orrs	r2, r3
 800157e:	0312      	lsls	r2, r2, #12
 8001580:	46b2      	mov	sl, r6
 8001582:	4b62      	ldr	r3, [pc, #392]	; (800170c <__aeabi_ddiv+0x5cc>)
 8001584:	0b12      	lsrs	r2, r2, #12
 8001586:	e632      	b.n	80011ee <__aeabi_ddiv+0xae>
 8001588:	2b00      	cmp	r3, #0
 800158a:	d100      	bne.n	800158e <__aeabi_ddiv+0x44e>
 800158c:	e702      	b.n	8001394 <__aeabi_ddiv+0x254>
 800158e:	19a6      	adds	r6, r4, r6
 8001590:	1e6a      	subs	r2, r5, #1
 8001592:	42a6      	cmp	r6, r4
 8001594:	d200      	bcs.n	8001598 <__aeabi_ddiv+0x458>
 8001596:	e089      	b.n	80016ac <__aeabi_ddiv+0x56c>
 8001598:	4286      	cmp	r6, r0
 800159a:	d200      	bcs.n	800159e <__aeabi_ddiv+0x45e>
 800159c:	e09f      	b.n	80016de <__aeabi_ddiv+0x59e>
 800159e:	d100      	bne.n	80015a2 <__aeabi_ddiv+0x462>
 80015a0:	e0af      	b.n	8001702 <__aeabi_ddiv+0x5c2>
 80015a2:	0015      	movs	r5, r2
 80015a4:	e6f4      	b.n	8001390 <__aeabi_ddiv+0x250>
 80015a6:	42a9      	cmp	r1, r5
 80015a8:	d900      	bls.n	80015ac <__aeabi_ddiv+0x46c>
 80015aa:	e63c      	b.n	8001226 <__aeabi_ddiv+0xe6>
 80015ac:	4643      	mov	r3, r8
 80015ae:	07de      	lsls	r6, r3, #31
 80015b0:	0858      	lsrs	r0, r3, #1
 80015b2:	086b      	lsrs	r3, r5, #1
 80015b4:	431e      	orrs	r6, r3
 80015b6:	07ed      	lsls	r5, r5, #31
 80015b8:	e63c      	b.n	8001234 <__aeabi_ddiv+0xf4>
 80015ba:	f001 f977 	bl	80028ac <__clzsi2>
 80015be:	0001      	movs	r1, r0
 80015c0:	0002      	movs	r2, r0
 80015c2:	3115      	adds	r1, #21
 80015c4:	3220      	adds	r2, #32
 80015c6:	291c      	cmp	r1, #28
 80015c8:	dc00      	bgt.n	80015cc <__aeabi_ddiv+0x48c>
 80015ca:	e72c      	b.n	8001426 <__aeabi_ddiv+0x2e6>
 80015cc:	464b      	mov	r3, r9
 80015ce:	3808      	subs	r0, #8
 80015d0:	4083      	lsls	r3, r0
 80015d2:	2500      	movs	r5, #0
 80015d4:	4698      	mov	r8, r3
 80015d6:	e732      	b.n	800143e <__aeabi_ddiv+0x2fe>
 80015d8:	f001 f968 	bl	80028ac <__clzsi2>
 80015dc:	0003      	movs	r3, r0
 80015de:	001a      	movs	r2, r3
 80015e0:	3215      	adds	r2, #21
 80015e2:	3020      	adds	r0, #32
 80015e4:	2a1c      	cmp	r2, #28
 80015e6:	dc00      	bgt.n	80015ea <__aeabi_ddiv+0x4aa>
 80015e8:	e6ff      	b.n	80013ea <__aeabi_ddiv+0x2aa>
 80015ea:	4654      	mov	r4, sl
 80015ec:	3b08      	subs	r3, #8
 80015ee:	2100      	movs	r1, #0
 80015f0:	409c      	lsls	r4, r3
 80015f2:	e705      	b.n	8001400 <__aeabi_ddiv+0x2c0>
 80015f4:	1936      	adds	r6, r6, r4
 80015f6:	3b01      	subs	r3, #1
 80015f8:	42b4      	cmp	r4, r6
 80015fa:	d900      	bls.n	80015fe <__aeabi_ddiv+0x4be>
 80015fc:	e6a6      	b.n	800134c <__aeabi_ddiv+0x20c>
 80015fe:	42b2      	cmp	r2, r6
 8001600:	d800      	bhi.n	8001604 <__aeabi_ddiv+0x4c4>
 8001602:	e6a3      	b.n	800134c <__aeabi_ddiv+0x20c>
 8001604:	1e83      	subs	r3, r0, #2
 8001606:	1936      	adds	r6, r6, r4
 8001608:	e6a0      	b.n	800134c <__aeabi_ddiv+0x20c>
 800160a:	1909      	adds	r1, r1, r4
 800160c:	3d01      	subs	r5, #1
 800160e:	428c      	cmp	r4, r1
 8001610:	d900      	bls.n	8001614 <__aeabi_ddiv+0x4d4>
 8001612:	e68d      	b.n	8001330 <__aeabi_ddiv+0x1f0>
 8001614:	428a      	cmp	r2, r1
 8001616:	d800      	bhi.n	800161a <__aeabi_ddiv+0x4da>
 8001618:	e68a      	b.n	8001330 <__aeabi_ddiv+0x1f0>
 800161a:	1e85      	subs	r5, r0, #2
 800161c:	1909      	adds	r1, r1, r4
 800161e:	e687      	b.n	8001330 <__aeabi_ddiv+0x1f0>
 8001620:	220f      	movs	r2, #15
 8001622:	402a      	ands	r2, r5
 8001624:	2a04      	cmp	r2, #4
 8001626:	d100      	bne.n	800162a <__aeabi_ddiv+0x4ea>
 8001628:	e6bc      	b.n	80013a4 <__aeabi_ddiv+0x264>
 800162a:	1d29      	adds	r1, r5, #4
 800162c:	42a9      	cmp	r1, r5
 800162e:	41ad      	sbcs	r5, r5
 8001630:	426d      	negs	r5, r5
 8001632:	08c9      	lsrs	r1, r1, #3
 8001634:	44a8      	add	r8, r5
 8001636:	e6b6      	b.n	80013a6 <__aeabi_ddiv+0x266>
 8001638:	42af      	cmp	r7, r5
 800163a:	d900      	bls.n	800163e <__aeabi_ddiv+0x4fe>
 800163c:	e662      	b.n	8001304 <__aeabi_ddiv+0x1c4>
 800163e:	4281      	cmp	r1, r0
 8001640:	d804      	bhi.n	800164c <__aeabi_ddiv+0x50c>
 8001642:	d000      	beq.n	8001646 <__aeabi_ddiv+0x506>
 8001644:	e65e      	b.n	8001304 <__aeabi_ddiv+0x1c4>
 8001646:	42ae      	cmp	r6, r5
 8001648:	d800      	bhi.n	800164c <__aeabi_ddiv+0x50c>
 800164a:	e65b      	b.n	8001304 <__aeabi_ddiv+0x1c4>
 800164c:	2302      	movs	r3, #2
 800164e:	425b      	negs	r3, r3
 8001650:	469c      	mov	ip, r3
 8001652:	9b00      	ldr	r3, [sp, #0]
 8001654:	44e0      	add	r8, ip
 8001656:	469c      	mov	ip, r3
 8001658:	4465      	add	r5, ip
 800165a:	429d      	cmp	r5, r3
 800165c:	419b      	sbcs	r3, r3
 800165e:	425b      	negs	r3, r3
 8001660:	191b      	adds	r3, r3, r4
 8001662:	18c0      	adds	r0, r0, r3
 8001664:	e64f      	b.n	8001306 <__aeabi_ddiv+0x1c6>
 8001666:	42b2      	cmp	r2, r6
 8001668:	d800      	bhi.n	800166c <__aeabi_ddiv+0x52c>
 800166a:	e612      	b.n	8001292 <__aeabi_ddiv+0x152>
 800166c:	1e83      	subs	r3, r0, #2
 800166e:	1936      	adds	r6, r6, r4
 8001670:	e60f      	b.n	8001292 <__aeabi_ddiv+0x152>
 8001672:	428a      	cmp	r2, r1
 8001674:	d800      	bhi.n	8001678 <__aeabi_ddiv+0x538>
 8001676:	e5fa      	b.n	800126e <__aeabi_ddiv+0x12e>
 8001678:	1e83      	subs	r3, r0, #2
 800167a:	4698      	mov	r8, r3
 800167c:	1909      	adds	r1, r1, r4
 800167e:	e5f6      	b.n	800126e <__aeabi_ddiv+0x12e>
 8001680:	4b24      	ldr	r3, [pc, #144]	; (8001714 <__aeabi_ddiv+0x5d4>)
 8001682:	0028      	movs	r0, r5
 8001684:	445b      	add	r3, fp
 8001686:	4641      	mov	r1, r8
 8001688:	409d      	lsls	r5, r3
 800168a:	4099      	lsls	r1, r3
 800168c:	40d0      	lsrs	r0, r2
 800168e:	1e6b      	subs	r3, r5, #1
 8001690:	419d      	sbcs	r5, r3
 8001692:	4643      	mov	r3, r8
 8001694:	4301      	orrs	r1, r0
 8001696:	4329      	orrs	r1, r5
 8001698:	40d3      	lsrs	r3, r2
 800169a:	074a      	lsls	r2, r1, #29
 800169c:	d100      	bne.n	80016a0 <__aeabi_ddiv+0x560>
 800169e:	e755      	b.n	800154c <__aeabi_ddiv+0x40c>
 80016a0:	220f      	movs	r2, #15
 80016a2:	400a      	ands	r2, r1
 80016a4:	2a04      	cmp	r2, #4
 80016a6:	d000      	beq.n	80016aa <__aeabi_ddiv+0x56a>
 80016a8:	e74a      	b.n	8001540 <__aeabi_ddiv+0x400>
 80016aa:	e74f      	b.n	800154c <__aeabi_ddiv+0x40c>
 80016ac:	0015      	movs	r5, r2
 80016ae:	4286      	cmp	r6, r0
 80016b0:	d000      	beq.n	80016b4 <__aeabi_ddiv+0x574>
 80016b2:	e66d      	b.n	8001390 <__aeabi_ddiv+0x250>
 80016b4:	9a00      	ldr	r2, [sp, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d000      	beq.n	80016bc <__aeabi_ddiv+0x57c>
 80016ba:	e669      	b.n	8001390 <__aeabi_ddiv+0x250>
 80016bc:	e66a      	b.n	8001394 <__aeabi_ddiv+0x254>
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <__aeabi_ddiv+0x5d8>)
 80016c0:	445b      	add	r3, fp
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	dc00      	bgt.n	80016c8 <__aeabi_ddiv+0x588>
 80016c6:	e713      	b.n	80014f0 <__aeabi_ddiv+0x3b0>
 80016c8:	2501      	movs	r5, #1
 80016ca:	2100      	movs	r1, #0
 80016cc:	44a8      	add	r8, r5
 80016ce:	e66a      	b.n	80013a6 <__aeabi_ddiv+0x266>
 80016d0:	075d      	lsls	r5, r3, #29
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	0b1a      	lsrs	r2, r3, #12
 80016d6:	08c9      	lsrs	r1, r1, #3
 80016d8:	2300      	movs	r3, #0
 80016da:	430d      	orrs	r5, r1
 80016dc:	e587      	b.n	80011ee <__aeabi_ddiv+0xae>
 80016de:	9900      	ldr	r1, [sp, #0]
 80016e0:	3d02      	subs	r5, #2
 80016e2:	004a      	lsls	r2, r1, #1
 80016e4:	428a      	cmp	r2, r1
 80016e6:	41bf      	sbcs	r7, r7
 80016e8:	427f      	negs	r7, r7
 80016ea:	193f      	adds	r7, r7, r4
 80016ec:	19f6      	adds	r6, r6, r7
 80016ee:	9200      	str	r2, [sp, #0]
 80016f0:	e7dd      	b.n	80016ae <__aeabi_ddiv+0x56e>
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	4643      	mov	r3, r8
 80016f6:	0312      	lsls	r2, r2, #12
 80016f8:	431a      	orrs	r2, r3
 80016fa:	0312      	lsls	r2, r2, #12
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <__aeabi_ddiv+0x5cc>)
 80016fe:	0b12      	lsrs	r2, r2, #12
 8001700:	e575      	b.n	80011ee <__aeabi_ddiv+0xae>
 8001702:	9900      	ldr	r1, [sp, #0]
 8001704:	4299      	cmp	r1, r3
 8001706:	d3ea      	bcc.n	80016de <__aeabi_ddiv+0x59e>
 8001708:	0015      	movs	r5, r2
 800170a:	e7d3      	b.n	80016b4 <__aeabi_ddiv+0x574>
 800170c:	000007ff 	.word	0x000007ff
 8001710:	0000043e 	.word	0x0000043e
 8001714:	0000041e 	.word	0x0000041e
 8001718:	000003ff 	.word	0x000003ff

0800171c <__eqdf2>:
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	464e      	mov	r6, r9
 8001720:	4645      	mov	r5, r8
 8001722:	46de      	mov	lr, fp
 8001724:	4657      	mov	r7, sl
 8001726:	4690      	mov	r8, r2
 8001728:	b5e0      	push	{r5, r6, r7, lr}
 800172a:	0017      	movs	r7, r2
 800172c:	031a      	lsls	r2, r3, #12
 800172e:	0b12      	lsrs	r2, r2, #12
 8001730:	0005      	movs	r5, r0
 8001732:	4684      	mov	ip, r0
 8001734:	4819      	ldr	r0, [pc, #100]	; (800179c <__eqdf2+0x80>)
 8001736:	030e      	lsls	r6, r1, #12
 8001738:	004c      	lsls	r4, r1, #1
 800173a:	4691      	mov	r9, r2
 800173c:	005a      	lsls	r2, r3, #1
 800173e:	0fdb      	lsrs	r3, r3, #31
 8001740:	469b      	mov	fp, r3
 8001742:	0b36      	lsrs	r6, r6, #12
 8001744:	0d64      	lsrs	r4, r4, #21
 8001746:	0fc9      	lsrs	r1, r1, #31
 8001748:	0d52      	lsrs	r2, r2, #21
 800174a:	4284      	cmp	r4, r0
 800174c:	d019      	beq.n	8001782 <__eqdf2+0x66>
 800174e:	4282      	cmp	r2, r0
 8001750:	d010      	beq.n	8001774 <__eqdf2+0x58>
 8001752:	2001      	movs	r0, #1
 8001754:	4294      	cmp	r4, r2
 8001756:	d10e      	bne.n	8001776 <__eqdf2+0x5a>
 8001758:	454e      	cmp	r6, r9
 800175a:	d10c      	bne.n	8001776 <__eqdf2+0x5a>
 800175c:	2001      	movs	r0, #1
 800175e:	45c4      	cmp	ip, r8
 8001760:	d109      	bne.n	8001776 <__eqdf2+0x5a>
 8001762:	4559      	cmp	r1, fp
 8001764:	d017      	beq.n	8001796 <__eqdf2+0x7a>
 8001766:	2c00      	cmp	r4, #0
 8001768:	d105      	bne.n	8001776 <__eqdf2+0x5a>
 800176a:	0030      	movs	r0, r6
 800176c:	4328      	orrs	r0, r5
 800176e:	1e43      	subs	r3, r0, #1
 8001770:	4198      	sbcs	r0, r3
 8001772:	e000      	b.n	8001776 <__eqdf2+0x5a>
 8001774:	2001      	movs	r0, #1
 8001776:	bcf0      	pop	{r4, r5, r6, r7}
 8001778:	46bb      	mov	fp, r7
 800177a:	46b2      	mov	sl, r6
 800177c:	46a9      	mov	r9, r5
 800177e:	46a0      	mov	r8, r4
 8001780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001782:	0033      	movs	r3, r6
 8001784:	2001      	movs	r0, #1
 8001786:	432b      	orrs	r3, r5
 8001788:	d1f5      	bne.n	8001776 <__eqdf2+0x5a>
 800178a:	42a2      	cmp	r2, r4
 800178c:	d1f3      	bne.n	8001776 <__eqdf2+0x5a>
 800178e:	464b      	mov	r3, r9
 8001790:	433b      	orrs	r3, r7
 8001792:	d1f0      	bne.n	8001776 <__eqdf2+0x5a>
 8001794:	e7e2      	b.n	800175c <__eqdf2+0x40>
 8001796:	2000      	movs	r0, #0
 8001798:	e7ed      	b.n	8001776 <__eqdf2+0x5a>
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	000007ff 	.word	0x000007ff

080017a0 <__gedf2>:
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	4647      	mov	r7, r8
 80017a4:	46ce      	mov	lr, r9
 80017a6:	0004      	movs	r4, r0
 80017a8:	0018      	movs	r0, r3
 80017aa:	0016      	movs	r6, r2
 80017ac:	031b      	lsls	r3, r3, #12
 80017ae:	0b1b      	lsrs	r3, r3, #12
 80017b0:	4d2d      	ldr	r5, [pc, #180]	; (8001868 <__gedf2+0xc8>)
 80017b2:	004a      	lsls	r2, r1, #1
 80017b4:	4699      	mov	r9, r3
 80017b6:	b580      	push	{r7, lr}
 80017b8:	0043      	lsls	r3, r0, #1
 80017ba:	030f      	lsls	r7, r1, #12
 80017bc:	46a4      	mov	ip, r4
 80017be:	46b0      	mov	r8, r6
 80017c0:	0b3f      	lsrs	r7, r7, #12
 80017c2:	0d52      	lsrs	r2, r2, #21
 80017c4:	0fc9      	lsrs	r1, r1, #31
 80017c6:	0d5b      	lsrs	r3, r3, #21
 80017c8:	0fc0      	lsrs	r0, r0, #31
 80017ca:	42aa      	cmp	r2, r5
 80017cc:	d021      	beq.n	8001812 <__gedf2+0x72>
 80017ce:	42ab      	cmp	r3, r5
 80017d0:	d013      	beq.n	80017fa <__gedf2+0x5a>
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d122      	bne.n	800181c <__gedf2+0x7c>
 80017d6:	433c      	orrs	r4, r7
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <__gedf2+0x42>
 80017dc:	464d      	mov	r5, r9
 80017de:	432e      	orrs	r6, r5
 80017e0:	d022      	beq.n	8001828 <__gedf2+0x88>
 80017e2:	2c00      	cmp	r4, #0
 80017e4:	d010      	beq.n	8001808 <__gedf2+0x68>
 80017e6:	4281      	cmp	r1, r0
 80017e8:	d022      	beq.n	8001830 <__gedf2+0x90>
 80017ea:	2002      	movs	r0, #2
 80017ec:	3901      	subs	r1, #1
 80017ee:	4008      	ands	r0, r1
 80017f0:	3801      	subs	r0, #1
 80017f2:	bcc0      	pop	{r6, r7}
 80017f4:	46b9      	mov	r9, r7
 80017f6:	46b0      	mov	r8, r6
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	464d      	mov	r5, r9
 80017fc:	432e      	orrs	r6, r5
 80017fe:	d129      	bne.n	8001854 <__gedf2+0xb4>
 8001800:	2a00      	cmp	r2, #0
 8001802:	d1f0      	bne.n	80017e6 <__gedf2+0x46>
 8001804:	433c      	orrs	r4, r7
 8001806:	d1ee      	bne.n	80017e6 <__gedf2+0x46>
 8001808:	2800      	cmp	r0, #0
 800180a:	d1f2      	bne.n	80017f2 <__gedf2+0x52>
 800180c:	2001      	movs	r0, #1
 800180e:	4240      	negs	r0, r0
 8001810:	e7ef      	b.n	80017f2 <__gedf2+0x52>
 8001812:	003d      	movs	r5, r7
 8001814:	4325      	orrs	r5, r4
 8001816:	d11d      	bne.n	8001854 <__gedf2+0xb4>
 8001818:	4293      	cmp	r3, r2
 800181a:	d0ee      	beq.n	80017fa <__gedf2+0x5a>
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e2      	bne.n	80017e6 <__gedf2+0x46>
 8001820:	464c      	mov	r4, r9
 8001822:	4326      	orrs	r6, r4
 8001824:	d1df      	bne.n	80017e6 <__gedf2+0x46>
 8001826:	e7e0      	b.n	80017ea <__gedf2+0x4a>
 8001828:	2000      	movs	r0, #0
 800182a:	2c00      	cmp	r4, #0
 800182c:	d0e1      	beq.n	80017f2 <__gedf2+0x52>
 800182e:	e7dc      	b.n	80017ea <__gedf2+0x4a>
 8001830:	429a      	cmp	r2, r3
 8001832:	dc0a      	bgt.n	800184a <__gedf2+0xaa>
 8001834:	dbe8      	blt.n	8001808 <__gedf2+0x68>
 8001836:	454f      	cmp	r7, r9
 8001838:	d8d7      	bhi.n	80017ea <__gedf2+0x4a>
 800183a:	d00e      	beq.n	800185a <__gedf2+0xba>
 800183c:	2000      	movs	r0, #0
 800183e:	454f      	cmp	r7, r9
 8001840:	d2d7      	bcs.n	80017f2 <__gedf2+0x52>
 8001842:	2900      	cmp	r1, #0
 8001844:	d0e2      	beq.n	800180c <__gedf2+0x6c>
 8001846:	0008      	movs	r0, r1
 8001848:	e7d3      	b.n	80017f2 <__gedf2+0x52>
 800184a:	4243      	negs	r3, r0
 800184c:	4158      	adcs	r0, r3
 800184e:	0040      	lsls	r0, r0, #1
 8001850:	3801      	subs	r0, #1
 8001852:	e7ce      	b.n	80017f2 <__gedf2+0x52>
 8001854:	2002      	movs	r0, #2
 8001856:	4240      	negs	r0, r0
 8001858:	e7cb      	b.n	80017f2 <__gedf2+0x52>
 800185a:	45c4      	cmp	ip, r8
 800185c:	d8c5      	bhi.n	80017ea <__gedf2+0x4a>
 800185e:	2000      	movs	r0, #0
 8001860:	45c4      	cmp	ip, r8
 8001862:	d2c6      	bcs.n	80017f2 <__gedf2+0x52>
 8001864:	e7ed      	b.n	8001842 <__gedf2+0xa2>
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	000007ff 	.word	0x000007ff

0800186c <__ledf2>:
 800186c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800186e:	4647      	mov	r7, r8
 8001870:	46ce      	mov	lr, r9
 8001872:	0004      	movs	r4, r0
 8001874:	0018      	movs	r0, r3
 8001876:	0016      	movs	r6, r2
 8001878:	031b      	lsls	r3, r3, #12
 800187a:	0b1b      	lsrs	r3, r3, #12
 800187c:	4d2c      	ldr	r5, [pc, #176]	; (8001930 <__ledf2+0xc4>)
 800187e:	004a      	lsls	r2, r1, #1
 8001880:	4699      	mov	r9, r3
 8001882:	b580      	push	{r7, lr}
 8001884:	0043      	lsls	r3, r0, #1
 8001886:	030f      	lsls	r7, r1, #12
 8001888:	46a4      	mov	ip, r4
 800188a:	46b0      	mov	r8, r6
 800188c:	0b3f      	lsrs	r7, r7, #12
 800188e:	0d52      	lsrs	r2, r2, #21
 8001890:	0fc9      	lsrs	r1, r1, #31
 8001892:	0d5b      	lsrs	r3, r3, #21
 8001894:	0fc0      	lsrs	r0, r0, #31
 8001896:	42aa      	cmp	r2, r5
 8001898:	d00d      	beq.n	80018b6 <__ledf2+0x4a>
 800189a:	42ab      	cmp	r3, r5
 800189c:	d010      	beq.n	80018c0 <__ledf2+0x54>
 800189e:	2a00      	cmp	r2, #0
 80018a0:	d127      	bne.n	80018f2 <__ledf2+0x86>
 80018a2:	433c      	orrs	r4, r7
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d111      	bne.n	80018cc <__ledf2+0x60>
 80018a8:	464d      	mov	r5, r9
 80018aa:	432e      	orrs	r6, r5
 80018ac:	d10e      	bne.n	80018cc <__ledf2+0x60>
 80018ae:	2000      	movs	r0, #0
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	d015      	beq.n	80018e0 <__ledf2+0x74>
 80018b4:	e00e      	b.n	80018d4 <__ledf2+0x68>
 80018b6:	003d      	movs	r5, r7
 80018b8:	4325      	orrs	r5, r4
 80018ba:	d110      	bne.n	80018de <__ledf2+0x72>
 80018bc:	4293      	cmp	r3, r2
 80018be:	d118      	bne.n	80018f2 <__ledf2+0x86>
 80018c0:	464d      	mov	r5, r9
 80018c2:	432e      	orrs	r6, r5
 80018c4:	d10b      	bne.n	80018de <__ledf2+0x72>
 80018c6:	2a00      	cmp	r2, #0
 80018c8:	d102      	bne.n	80018d0 <__ledf2+0x64>
 80018ca:	433c      	orrs	r4, r7
 80018cc:	2c00      	cmp	r4, #0
 80018ce:	d00b      	beq.n	80018e8 <__ledf2+0x7c>
 80018d0:	4281      	cmp	r1, r0
 80018d2:	d014      	beq.n	80018fe <__ledf2+0x92>
 80018d4:	2002      	movs	r0, #2
 80018d6:	3901      	subs	r1, #1
 80018d8:	4008      	ands	r0, r1
 80018da:	3801      	subs	r0, #1
 80018dc:	e000      	b.n	80018e0 <__ledf2+0x74>
 80018de:	2002      	movs	r0, #2
 80018e0:	bcc0      	pop	{r6, r7}
 80018e2:	46b9      	mov	r9, r7
 80018e4:	46b0      	mov	r8, r6
 80018e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e8:	2800      	cmp	r0, #0
 80018ea:	d1f9      	bne.n	80018e0 <__ledf2+0x74>
 80018ec:	2001      	movs	r0, #1
 80018ee:	4240      	negs	r0, r0
 80018f0:	e7f6      	b.n	80018e0 <__ledf2+0x74>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1ec      	bne.n	80018d0 <__ledf2+0x64>
 80018f6:	464c      	mov	r4, r9
 80018f8:	4326      	orrs	r6, r4
 80018fa:	d1e9      	bne.n	80018d0 <__ledf2+0x64>
 80018fc:	e7ea      	b.n	80018d4 <__ledf2+0x68>
 80018fe:	429a      	cmp	r2, r3
 8001900:	dd04      	ble.n	800190c <__ledf2+0xa0>
 8001902:	4243      	negs	r3, r0
 8001904:	4158      	adcs	r0, r3
 8001906:	0040      	lsls	r0, r0, #1
 8001908:	3801      	subs	r0, #1
 800190a:	e7e9      	b.n	80018e0 <__ledf2+0x74>
 800190c:	429a      	cmp	r2, r3
 800190e:	dbeb      	blt.n	80018e8 <__ledf2+0x7c>
 8001910:	454f      	cmp	r7, r9
 8001912:	d8df      	bhi.n	80018d4 <__ledf2+0x68>
 8001914:	d006      	beq.n	8001924 <__ledf2+0xb8>
 8001916:	2000      	movs	r0, #0
 8001918:	454f      	cmp	r7, r9
 800191a:	d2e1      	bcs.n	80018e0 <__ledf2+0x74>
 800191c:	2900      	cmp	r1, #0
 800191e:	d0e5      	beq.n	80018ec <__ledf2+0x80>
 8001920:	0008      	movs	r0, r1
 8001922:	e7dd      	b.n	80018e0 <__ledf2+0x74>
 8001924:	45c4      	cmp	ip, r8
 8001926:	d8d5      	bhi.n	80018d4 <__ledf2+0x68>
 8001928:	2000      	movs	r0, #0
 800192a:	45c4      	cmp	ip, r8
 800192c:	d2d8      	bcs.n	80018e0 <__ledf2+0x74>
 800192e:	e7f5      	b.n	800191c <__ledf2+0xb0>
 8001930:	000007ff 	.word	0x000007ff

08001934 <__aeabi_dmul>:
 8001934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001936:	4645      	mov	r5, r8
 8001938:	46de      	mov	lr, fp
 800193a:	4657      	mov	r7, sl
 800193c:	464e      	mov	r6, r9
 800193e:	b5e0      	push	{r5, r6, r7, lr}
 8001940:	001f      	movs	r7, r3
 8001942:	030b      	lsls	r3, r1, #12
 8001944:	0b1b      	lsrs	r3, r3, #12
 8001946:	469b      	mov	fp, r3
 8001948:	004d      	lsls	r5, r1, #1
 800194a:	0fcb      	lsrs	r3, r1, #31
 800194c:	0004      	movs	r4, r0
 800194e:	4691      	mov	r9, r2
 8001950:	4698      	mov	r8, r3
 8001952:	b087      	sub	sp, #28
 8001954:	0d6d      	lsrs	r5, r5, #21
 8001956:	d100      	bne.n	800195a <__aeabi_dmul+0x26>
 8001958:	e1cd      	b.n	8001cf6 <__aeabi_dmul+0x3c2>
 800195a:	4bce      	ldr	r3, [pc, #824]	; (8001c94 <__aeabi_dmul+0x360>)
 800195c:	429d      	cmp	r5, r3
 800195e:	d100      	bne.n	8001962 <__aeabi_dmul+0x2e>
 8001960:	e1e9      	b.n	8001d36 <__aeabi_dmul+0x402>
 8001962:	465a      	mov	r2, fp
 8001964:	0f43      	lsrs	r3, r0, #29
 8001966:	00d2      	lsls	r2, r2, #3
 8001968:	4313      	orrs	r3, r2
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	0412      	lsls	r2, r2, #16
 800196e:	431a      	orrs	r2, r3
 8001970:	00c3      	lsls	r3, r0, #3
 8001972:	469a      	mov	sl, r3
 8001974:	4bc8      	ldr	r3, [pc, #800]	; (8001c98 <__aeabi_dmul+0x364>)
 8001976:	4693      	mov	fp, r2
 8001978:	469c      	mov	ip, r3
 800197a:	2300      	movs	r3, #0
 800197c:	2600      	movs	r6, #0
 800197e:	4465      	add	r5, ip
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	033c      	lsls	r4, r7, #12
 8001984:	007b      	lsls	r3, r7, #1
 8001986:	4648      	mov	r0, r9
 8001988:	0b24      	lsrs	r4, r4, #12
 800198a:	0d5b      	lsrs	r3, r3, #21
 800198c:	0fff      	lsrs	r7, r7, #31
 800198e:	2b00      	cmp	r3, #0
 8001990:	d100      	bne.n	8001994 <__aeabi_dmul+0x60>
 8001992:	e189      	b.n	8001ca8 <__aeabi_dmul+0x374>
 8001994:	4abf      	ldr	r2, [pc, #764]	; (8001c94 <__aeabi_dmul+0x360>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d019      	beq.n	80019ce <__aeabi_dmul+0x9a>
 800199a:	0f42      	lsrs	r2, r0, #29
 800199c:	00e4      	lsls	r4, r4, #3
 800199e:	4322      	orrs	r2, r4
 80019a0:	2480      	movs	r4, #128	; 0x80
 80019a2:	0424      	lsls	r4, r4, #16
 80019a4:	4314      	orrs	r4, r2
 80019a6:	4abc      	ldr	r2, [pc, #752]	; (8001c98 <__aeabi_dmul+0x364>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	4694      	mov	ip, r2
 80019ac:	4642      	mov	r2, r8
 80019ae:	4463      	add	r3, ip
 80019b0:	195b      	adds	r3, r3, r5
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	9b01      	ldr	r3, [sp, #4]
 80019b6:	407a      	eors	r2, r7
 80019b8:	3301      	adds	r3, #1
 80019ba:	00c0      	lsls	r0, r0, #3
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2e0a      	cmp	r6, #10
 80019c2:	dd1c      	ble.n	80019fe <__aeabi_dmul+0xca>
 80019c4:	003a      	movs	r2, r7
 80019c6:	2e0b      	cmp	r6, #11
 80019c8:	d05e      	beq.n	8001a88 <__aeabi_dmul+0x154>
 80019ca:	4647      	mov	r7, r8
 80019cc:	e056      	b.n	8001a7c <__aeabi_dmul+0x148>
 80019ce:	4649      	mov	r1, r9
 80019d0:	4bb0      	ldr	r3, [pc, #704]	; (8001c94 <__aeabi_dmul+0x360>)
 80019d2:	4321      	orrs	r1, r4
 80019d4:	18eb      	adds	r3, r5, r3
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	2900      	cmp	r1, #0
 80019da:	d12a      	bne.n	8001a32 <__aeabi_dmul+0xfe>
 80019dc:	2080      	movs	r0, #128	; 0x80
 80019de:	2202      	movs	r2, #2
 80019e0:	0100      	lsls	r0, r0, #4
 80019e2:	002b      	movs	r3, r5
 80019e4:	4684      	mov	ip, r0
 80019e6:	4316      	orrs	r6, r2
 80019e8:	4642      	mov	r2, r8
 80019ea:	4463      	add	r3, ip
 80019ec:	407a      	eors	r2, r7
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	2e0a      	cmp	r6, #10
 80019f4:	dd00      	ble.n	80019f8 <__aeabi_dmul+0xc4>
 80019f6:	e231      	b.n	8001e5c <__aeabi_dmul+0x528>
 80019f8:	2000      	movs	r0, #0
 80019fa:	2400      	movs	r4, #0
 80019fc:	2102      	movs	r1, #2
 80019fe:	2e02      	cmp	r6, #2
 8001a00:	dc26      	bgt.n	8001a50 <__aeabi_dmul+0x11c>
 8001a02:	3e01      	subs	r6, #1
 8001a04:	2e01      	cmp	r6, #1
 8001a06:	d852      	bhi.n	8001aae <__aeabi_dmul+0x17a>
 8001a08:	2902      	cmp	r1, #2
 8001a0a:	d04c      	beq.n	8001aa6 <__aeabi_dmul+0x172>
 8001a0c:	2901      	cmp	r1, #1
 8001a0e:	d000      	beq.n	8001a12 <__aeabi_dmul+0xde>
 8001a10:	e118      	b.n	8001c44 <__aeabi_dmul+0x310>
 8001a12:	2300      	movs	r3, #0
 8001a14:	2400      	movs	r4, #0
 8001a16:	2500      	movs	r5, #0
 8001a18:	051b      	lsls	r3, r3, #20
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	07d2      	lsls	r2, r2, #31
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	0028      	movs	r0, r5
 8001a22:	0019      	movs	r1, r3
 8001a24:	b007      	add	sp, #28
 8001a26:	bcf0      	pop	{r4, r5, r6, r7}
 8001a28:	46bb      	mov	fp, r7
 8001a2a:	46b2      	mov	sl, r6
 8001a2c:	46a9      	mov	r9, r5
 8001a2e:	46a0      	mov	r8, r4
 8001a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	2203      	movs	r2, #3
 8001a36:	0109      	lsls	r1, r1, #4
 8001a38:	002b      	movs	r3, r5
 8001a3a:	468c      	mov	ip, r1
 8001a3c:	4316      	orrs	r6, r2
 8001a3e:	4642      	mov	r2, r8
 8001a40:	4463      	add	r3, ip
 8001a42:	407a      	eors	r2, r7
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	9302      	str	r3, [sp, #8]
 8001a48:	2e0a      	cmp	r6, #10
 8001a4a:	dd00      	ble.n	8001a4e <__aeabi_dmul+0x11a>
 8001a4c:	e228      	b.n	8001ea0 <__aeabi_dmul+0x56c>
 8001a4e:	2103      	movs	r1, #3
 8001a50:	2501      	movs	r5, #1
 8001a52:	40b5      	lsls	r5, r6
 8001a54:	46ac      	mov	ip, r5
 8001a56:	26a6      	movs	r6, #166	; 0xa6
 8001a58:	4663      	mov	r3, ip
 8001a5a:	00f6      	lsls	r6, r6, #3
 8001a5c:	4035      	ands	r5, r6
 8001a5e:	4233      	tst	r3, r6
 8001a60:	d10b      	bne.n	8001a7a <__aeabi_dmul+0x146>
 8001a62:	2690      	movs	r6, #144	; 0x90
 8001a64:	00b6      	lsls	r6, r6, #2
 8001a66:	4233      	tst	r3, r6
 8001a68:	d118      	bne.n	8001a9c <__aeabi_dmul+0x168>
 8001a6a:	3eb9      	subs	r6, #185	; 0xb9
 8001a6c:	3eff      	subs	r6, #255	; 0xff
 8001a6e:	421e      	tst	r6, r3
 8001a70:	d01d      	beq.n	8001aae <__aeabi_dmul+0x17a>
 8001a72:	46a3      	mov	fp, r4
 8001a74:	4682      	mov	sl, r0
 8001a76:	9100      	str	r1, [sp, #0]
 8001a78:	e000      	b.n	8001a7c <__aeabi_dmul+0x148>
 8001a7a:	0017      	movs	r7, r2
 8001a7c:	9900      	ldr	r1, [sp, #0]
 8001a7e:	003a      	movs	r2, r7
 8001a80:	2902      	cmp	r1, #2
 8001a82:	d010      	beq.n	8001aa6 <__aeabi_dmul+0x172>
 8001a84:	465c      	mov	r4, fp
 8001a86:	4650      	mov	r0, sl
 8001a88:	2903      	cmp	r1, #3
 8001a8a:	d1bf      	bne.n	8001a0c <__aeabi_dmul+0xd8>
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	031b      	lsls	r3, r3, #12
 8001a90:	431c      	orrs	r4, r3
 8001a92:	0324      	lsls	r4, r4, #12
 8001a94:	0005      	movs	r5, r0
 8001a96:	4b7f      	ldr	r3, [pc, #508]	; (8001c94 <__aeabi_dmul+0x360>)
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	e7bd      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001a9c:	2480      	movs	r4, #128	; 0x80
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4b7c      	ldr	r3, [pc, #496]	; (8001c94 <__aeabi_dmul+0x360>)
 8001aa2:	0324      	lsls	r4, r4, #12
 8001aa4:	e7b8      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001aa6:	2400      	movs	r4, #0
 8001aa8:	2500      	movs	r5, #0
 8001aaa:	4b7a      	ldr	r3, [pc, #488]	; (8001c94 <__aeabi_dmul+0x360>)
 8001aac:	e7b4      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001aae:	4653      	mov	r3, sl
 8001ab0:	041e      	lsls	r6, r3, #16
 8001ab2:	0c36      	lsrs	r6, r6, #16
 8001ab4:	0c1f      	lsrs	r7, r3, #16
 8001ab6:	0033      	movs	r3, r6
 8001ab8:	0c01      	lsrs	r1, r0, #16
 8001aba:	0400      	lsls	r0, r0, #16
 8001abc:	0c00      	lsrs	r0, r0, #16
 8001abe:	4343      	muls	r3, r0
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	437b      	muls	r3, r7
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	0033      	movs	r3, r6
 8001aca:	434b      	muls	r3, r1
 8001acc:	469c      	mov	ip, r3
 8001ace:	4643      	mov	r3, r8
 8001ad0:	000d      	movs	r5, r1
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	469a      	mov	sl, r3
 8001ad6:	437d      	muls	r5, r7
 8001ad8:	44cc      	add	ip, r9
 8001ada:	44d4      	add	ip, sl
 8001adc:	9500      	str	r5, [sp, #0]
 8001ade:	45e1      	cmp	r9, ip
 8001ae0:	d904      	bls.n	8001aec <__aeabi_dmul+0x1b8>
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	025b      	lsls	r3, r3, #9
 8001ae6:	4699      	mov	r9, r3
 8001ae8:	444d      	add	r5, r9
 8001aea:	9500      	str	r5, [sp, #0]
 8001aec:	4663      	mov	r3, ip
 8001aee:	0c1b      	lsrs	r3, r3, #16
 8001af0:	001d      	movs	r5, r3
 8001af2:	4663      	mov	r3, ip
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	469c      	mov	ip, r3
 8001af8:	4643      	mov	r3, r8
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	4698      	mov	r8, r3
 8001b00:	4663      	mov	r3, ip
 8001b02:	4443      	add	r3, r8
 8001b04:	9303      	str	r3, [sp, #12]
 8001b06:	0c23      	lsrs	r3, r4, #16
 8001b08:	4698      	mov	r8, r3
 8001b0a:	0033      	movs	r3, r6
 8001b0c:	0424      	lsls	r4, r4, #16
 8001b0e:	0c24      	lsrs	r4, r4, #16
 8001b10:	4363      	muls	r3, r4
 8001b12:	469c      	mov	ip, r3
 8001b14:	0023      	movs	r3, r4
 8001b16:	437b      	muls	r3, r7
 8001b18:	4699      	mov	r9, r3
 8001b1a:	4643      	mov	r3, r8
 8001b1c:	435e      	muls	r6, r3
 8001b1e:	435f      	muls	r7, r3
 8001b20:	444e      	add	r6, r9
 8001b22:	4663      	mov	r3, ip
 8001b24:	46b2      	mov	sl, r6
 8001b26:	0c1e      	lsrs	r6, r3, #16
 8001b28:	4456      	add	r6, sl
 8001b2a:	45b1      	cmp	r9, r6
 8001b2c:	d903      	bls.n	8001b36 <__aeabi_dmul+0x202>
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	025b      	lsls	r3, r3, #9
 8001b32:	4699      	mov	r9, r3
 8001b34:	444f      	add	r7, r9
 8001b36:	0c33      	lsrs	r3, r6, #16
 8001b38:	4699      	mov	r9, r3
 8001b3a:	003b      	movs	r3, r7
 8001b3c:	444b      	add	r3, r9
 8001b3e:	9305      	str	r3, [sp, #20]
 8001b40:	4663      	mov	r3, ip
 8001b42:	46ac      	mov	ip, r5
 8001b44:	041f      	lsls	r7, r3, #16
 8001b46:	0c3f      	lsrs	r7, r7, #16
 8001b48:	0436      	lsls	r6, r6, #16
 8001b4a:	19f6      	adds	r6, r6, r7
 8001b4c:	44b4      	add	ip, r6
 8001b4e:	4663      	mov	r3, ip
 8001b50:	9304      	str	r3, [sp, #16]
 8001b52:	465b      	mov	r3, fp
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	469c      	mov	ip, r3
 8001b58:	465b      	mov	r3, fp
 8001b5a:	041f      	lsls	r7, r3, #16
 8001b5c:	0c3f      	lsrs	r7, r7, #16
 8001b5e:	003b      	movs	r3, r7
 8001b60:	4343      	muls	r3, r0
 8001b62:	4699      	mov	r9, r3
 8001b64:	4663      	mov	r3, ip
 8001b66:	4343      	muls	r3, r0
 8001b68:	469a      	mov	sl, r3
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	4660      	mov	r0, ip
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	469b      	mov	fp, r3
 8001b72:	4348      	muls	r0, r1
 8001b74:	4379      	muls	r1, r7
 8001b76:	4451      	add	r1, sl
 8001b78:	4459      	add	r1, fp
 8001b7a:	458a      	cmp	sl, r1
 8001b7c:	d903      	bls.n	8001b86 <__aeabi_dmul+0x252>
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	025b      	lsls	r3, r3, #9
 8001b82:	469a      	mov	sl, r3
 8001b84:	4450      	add	r0, sl
 8001b86:	0c0b      	lsrs	r3, r1, #16
 8001b88:	469a      	mov	sl, r3
 8001b8a:	464b      	mov	r3, r9
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	4699      	mov	r9, r3
 8001b92:	003b      	movs	r3, r7
 8001b94:	4363      	muls	r3, r4
 8001b96:	0409      	lsls	r1, r1, #16
 8001b98:	4645      	mov	r5, r8
 8001b9a:	4449      	add	r1, r9
 8001b9c:	4699      	mov	r9, r3
 8001b9e:	4663      	mov	r3, ip
 8001ba0:	435c      	muls	r4, r3
 8001ba2:	436b      	muls	r3, r5
 8001ba4:	469c      	mov	ip, r3
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	0c1b      	lsrs	r3, r3, #16
 8001baa:	4698      	mov	r8, r3
 8001bac:	436f      	muls	r7, r5
 8001bae:	193f      	adds	r7, r7, r4
 8001bb0:	4447      	add	r7, r8
 8001bb2:	4450      	add	r0, sl
 8001bb4:	42bc      	cmp	r4, r7
 8001bb6:	d903      	bls.n	8001bc0 <__aeabi_dmul+0x28c>
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	4698      	mov	r8, r3
 8001bbe:	44c4      	add	ip, r8
 8001bc0:	9b04      	ldr	r3, [sp, #16]
 8001bc2:	9d00      	ldr	r5, [sp, #0]
 8001bc4:	4698      	mov	r8, r3
 8001bc6:	4445      	add	r5, r8
 8001bc8:	42b5      	cmp	r5, r6
 8001bca:	41b6      	sbcs	r6, r6
 8001bcc:	4273      	negs	r3, r6
 8001bce:	4698      	mov	r8, r3
 8001bd0:	464b      	mov	r3, r9
 8001bd2:	041e      	lsls	r6, r3, #16
 8001bd4:	9b05      	ldr	r3, [sp, #20]
 8001bd6:	043c      	lsls	r4, r7, #16
 8001bd8:	4699      	mov	r9, r3
 8001bda:	0c36      	lsrs	r6, r6, #16
 8001bdc:	19a4      	adds	r4, r4, r6
 8001bde:	444c      	add	r4, r9
 8001be0:	46a1      	mov	r9, r4
 8001be2:	4683      	mov	fp, r0
 8001be4:	186e      	adds	r6, r5, r1
 8001be6:	44c1      	add	r9, r8
 8001be8:	428e      	cmp	r6, r1
 8001bea:	4189      	sbcs	r1, r1
 8001bec:	44cb      	add	fp, r9
 8001bee:	465d      	mov	r5, fp
 8001bf0:	4249      	negs	r1, r1
 8001bf2:	186d      	adds	r5, r5, r1
 8001bf4:	429c      	cmp	r4, r3
 8001bf6:	41a4      	sbcs	r4, r4
 8001bf8:	45c1      	cmp	r9, r8
 8001bfa:	419b      	sbcs	r3, r3
 8001bfc:	4583      	cmp	fp, r0
 8001bfe:	4180      	sbcs	r0, r0
 8001c00:	428d      	cmp	r5, r1
 8001c02:	4189      	sbcs	r1, r1
 8001c04:	425b      	negs	r3, r3
 8001c06:	4264      	negs	r4, r4
 8001c08:	431c      	orrs	r4, r3
 8001c0a:	4240      	negs	r0, r0
 8001c0c:	9b03      	ldr	r3, [sp, #12]
 8001c0e:	4249      	negs	r1, r1
 8001c10:	4301      	orrs	r1, r0
 8001c12:	0270      	lsls	r0, r6, #9
 8001c14:	0c3f      	lsrs	r7, r7, #16
 8001c16:	4318      	orrs	r0, r3
 8001c18:	19e4      	adds	r4, r4, r7
 8001c1a:	1e47      	subs	r7, r0, #1
 8001c1c:	41b8      	sbcs	r0, r7
 8001c1e:	1864      	adds	r4, r4, r1
 8001c20:	4464      	add	r4, ip
 8001c22:	0df6      	lsrs	r6, r6, #23
 8001c24:	0261      	lsls	r1, r4, #9
 8001c26:	4330      	orrs	r0, r6
 8001c28:	0dec      	lsrs	r4, r5, #23
 8001c2a:	026e      	lsls	r6, r5, #9
 8001c2c:	430c      	orrs	r4, r1
 8001c2e:	4330      	orrs	r0, r6
 8001c30:	01c9      	lsls	r1, r1, #7
 8001c32:	d400      	bmi.n	8001c36 <__aeabi_dmul+0x302>
 8001c34:	e0f1      	b.n	8001e1a <__aeabi_dmul+0x4e6>
 8001c36:	2101      	movs	r1, #1
 8001c38:	0843      	lsrs	r3, r0, #1
 8001c3a:	4001      	ands	r1, r0
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	07e0      	lsls	r0, r4, #31
 8001c40:	4318      	orrs	r0, r3
 8001c42:	0864      	lsrs	r4, r4, #1
 8001c44:	4915      	ldr	r1, [pc, #84]	; (8001c9c <__aeabi_dmul+0x368>)
 8001c46:	9b02      	ldr	r3, [sp, #8]
 8001c48:	468c      	mov	ip, r1
 8001c4a:	4463      	add	r3, ip
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	dc00      	bgt.n	8001c52 <__aeabi_dmul+0x31e>
 8001c50:	e097      	b.n	8001d82 <__aeabi_dmul+0x44e>
 8001c52:	0741      	lsls	r1, r0, #29
 8001c54:	d009      	beq.n	8001c6a <__aeabi_dmul+0x336>
 8001c56:	210f      	movs	r1, #15
 8001c58:	4001      	ands	r1, r0
 8001c5a:	2904      	cmp	r1, #4
 8001c5c:	d005      	beq.n	8001c6a <__aeabi_dmul+0x336>
 8001c5e:	1d01      	adds	r1, r0, #4
 8001c60:	4281      	cmp	r1, r0
 8001c62:	4180      	sbcs	r0, r0
 8001c64:	4240      	negs	r0, r0
 8001c66:	1824      	adds	r4, r4, r0
 8001c68:	0008      	movs	r0, r1
 8001c6a:	01e1      	lsls	r1, r4, #7
 8001c6c:	d506      	bpl.n	8001c7c <__aeabi_dmul+0x348>
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	00c9      	lsls	r1, r1, #3
 8001c72:	468c      	mov	ip, r1
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <__aeabi_dmul+0x36c>)
 8001c76:	401c      	ands	r4, r3
 8001c78:	9b02      	ldr	r3, [sp, #8]
 8001c7a:	4463      	add	r3, ip
 8001c7c:	4909      	ldr	r1, [pc, #36]	; (8001ca4 <__aeabi_dmul+0x370>)
 8001c7e:	428b      	cmp	r3, r1
 8001c80:	dd00      	ble.n	8001c84 <__aeabi_dmul+0x350>
 8001c82:	e710      	b.n	8001aa6 <__aeabi_dmul+0x172>
 8001c84:	0761      	lsls	r1, r4, #29
 8001c86:	08c5      	lsrs	r5, r0, #3
 8001c88:	0264      	lsls	r4, r4, #9
 8001c8a:	055b      	lsls	r3, r3, #21
 8001c8c:	430d      	orrs	r5, r1
 8001c8e:	0b24      	lsrs	r4, r4, #12
 8001c90:	0d5b      	lsrs	r3, r3, #21
 8001c92:	e6c1      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001c94:	000007ff 	.word	0x000007ff
 8001c98:	fffffc01 	.word	0xfffffc01
 8001c9c:	000003ff 	.word	0x000003ff
 8001ca0:	feffffff 	.word	0xfeffffff
 8001ca4:	000007fe 	.word	0x000007fe
 8001ca8:	464b      	mov	r3, r9
 8001caa:	4323      	orrs	r3, r4
 8001cac:	d059      	beq.n	8001d62 <__aeabi_dmul+0x42e>
 8001cae:	2c00      	cmp	r4, #0
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dmul+0x380>
 8001cb2:	e0a3      	b.n	8001dfc <__aeabi_dmul+0x4c8>
 8001cb4:	0020      	movs	r0, r4
 8001cb6:	f000 fdf9 	bl	80028ac <__clzsi2>
 8001cba:	0001      	movs	r1, r0
 8001cbc:	0003      	movs	r3, r0
 8001cbe:	390b      	subs	r1, #11
 8001cc0:	221d      	movs	r2, #29
 8001cc2:	1a52      	subs	r2, r2, r1
 8001cc4:	4649      	mov	r1, r9
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	40d1      	lsrs	r1, r2
 8001cca:	464a      	mov	r2, r9
 8001ccc:	3808      	subs	r0, #8
 8001cce:	4082      	lsls	r2, r0
 8001cd0:	4084      	lsls	r4, r0
 8001cd2:	0010      	movs	r0, r2
 8001cd4:	430c      	orrs	r4, r1
 8001cd6:	4a74      	ldr	r2, [pc, #464]	; (8001ea8 <__aeabi_dmul+0x574>)
 8001cd8:	1aeb      	subs	r3, r5, r3
 8001cda:	4694      	mov	ip, r2
 8001cdc:	4642      	mov	r2, r8
 8001cde:	4463      	add	r3, ip
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	9b01      	ldr	r3, [sp, #4]
 8001ce4:	407a      	eors	r2, r7
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	2100      	movs	r1, #0
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	2e0a      	cmp	r6, #10
 8001cf0:	dd00      	ble.n	8001cf4 <__aeabi_dmul+0x3c0>
 8001cf2:	e667      	b.n	80019c4 <__aeabi_dmul+0x90>
 8001cf4:	e683      	b.n	80019fe <__aeabi_dmul+0xca>
 8001cf6:	465b      	mov	r3, fp
 8001cf8:	4303      	orrs	r3, r0
 8001cfa:	469a      	mov	sl, r3
 8001cfc:	d02a      	beq.n	8001d54 <__aeabi_dmul+0x420>
 8001cfe:	465b      	mov	r3, fp
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d06d      	beq.n	8001de0 <__aeabi_dmul+0x4ac>
 8001d04:	4658      	mov	r0, fp
 8001d06:	f000 fdd1 	bl	80028ac <__clzsi2>
 8001d0a:	0001      	movs	r1, r0
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	390b      	subs	r1, #11
 8001d10:	221d      	movs	r2, #29
 8001d12:	1a52      	subs	r2, r2, r1
 8001d14:	0021      	movs	r1, r4
 8001d16:	0018      	movs	r0, r3
 8001d18:	465d      	mov	r5, fp
 8001d1a:	40d1      	lsrs	r1, r2
 8001d1c:	3808      	subs	r0, #8
 8001d1e:	4085      	lsls	r5, r0
 8001d20:	000a      	movs	r2, r1
 8001d22:	4084      	lsls	r4, r0
 8001d24:	432a      	orrs	r2, r5
 8001d26:	4693      	mov	fp, r2
 8001d28:	46a2      	mov	sl, r4
 8001d2a:	4d5f      	ldr	r5, [pc, #380]	; (8001ea8 <__aeabi_dmul+0x574>)
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	1aed      	subs	r5, r5, r3
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	e625      	b.n	8001982 <__aeabi_dmul+0x4e>
 8001d36:	465b      	mov	r3, fp
 8001d38:	4303      	orrs	r3, r0
 8001d3a:	469a      	mov	sl, r3
 8001d3c:	d105      	bne.n	8001d4a <__aeabi_dmul+0x416>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	469b      	mov	fp, r3
 8001d42:	3302      	adds	r3, #2
 8001d44:	2608      	movs	r6, #8
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	e61b      	b.n	8001982 <__aeabi_dmul+0x4e>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	4682      	mov	sl, r0
 8001d4e:	260c      	movs	r6, #12
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	e616      	b.n	8001982 <__aeabi_dmul+0x4e>
 8001d54:	2300      	movs	r3, #0
 8001d56:	469b      	mov	fp, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	2604      	movs	r6, #4
 8001d5c:	2500      	movs	r5, #0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	e60f      	b.n	8001982 <__aeabi_dmul+0x4e>
 8001d62:	4642      	mov	r2, r8
 8001d64:	3301      	adds	r3, #1
 8001d66:	9501      	str	r5, [sp, #4]
 8001d68:	431e      	orrs	r6, r3
 8001d6a:	9b01      	ldr	r3, [sp, #4]
 8001d6c:	407a      	eors	r2, r7
 8001d6e:	3301      	adds	r3, #1
 8001d70:	2400      	movs	r4, #0
 8001d72:	2000      	movs	r0, #0
 8001d74:	2101      	movs	r1, #1
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	9302      	str	r3, [sp, #8]
 8001d7a:	2e0a      	cmp	r6, #10
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dmul+0x44c>
 8001d7e:	e621      	b.n	80019c4 <__aeabi_dmul+0x90>
 8001d80:	e63d      	b.n	80019fe <__aeabi_dmul+0xca>
 8001d82:	2101      	movs	r1, #1
 8001d84:	1ac9      	subs	r1, r1, r3
 8001d86:	2938      	cmp	r1, #56	; 0x38
 8001d88:	dd00      	ble.n	8001d8c <__aeabi_dmul+0x458>
 8001d8a:	e642      	b.n	8001a12 <__aeabi_dmul+0xde>
 8001d8c:	291f      	cmp	r1, #31
 8001d8e:	dd47      	ble.n	8001e20 <__aeabi_dmul+0x4ec>
 8001d90:	261f      	movs	r6, #31
 8001d92:	0025      	movs	r5, r4
 8001d94:	4276      	negs	r6, r6
 8001d96:	1af3      	subs	r3, r6, r3
 8001d98:	40dd      	lsrs	r5, r3
 8001d9a:	002b      	movs	r3, r5
 8001d9c:	2920      	cmp	r1, #32
 8001d9e:	d005      	beq.n	8001dac <__aeabi_dmul+0x478>
 8001da0:	4942      	ldr	r1, [pc, #264]	; (8001eac <__aeabi_dmul+0x578>)
 8001da2:	9d02      	ldr	r5, [sp, #8]
 8001da4:	468c      	mov	ip, r1
 8001da6:	4465      	add	r5, ip
 8001da8:	40ac      	lsls	r4, r5
 8001daa:	4320      	orrs	r0, r4
 8001dac:	1e41      	subs	r1, r0, #1
 8001dae:	4188      	sbcs	r0, r1
 8001db0:	4318      	orrs	r0, r3
 8001db2:	2307      	movs	r3, #7
 8001db4:	001d      	movs	r5, r3
 8001db6:	2400      	movs	r4, #0
 8001db8:	4005      	ands	r5, r0
 8001dba:	4203      	tst	r3, r0
 8001dbc:	d04a      	beq.n	8001e54 <__aeabi_dmul+0x520>
 8001dbe:	230f      	movs	r3, #15
 8001dc0:	2400      	movs	r4, #0
 8001dc2:	4003      	ands	r3, r0
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d042      	beq.n	8001e4e <__aeabi_dmul+0x51a>
 8001dc8:	1d03      	adds	r3, r0, #4
 8001dca:	4283      	cmp	r3, r0
 8001dcc:	4180      	sbcs	r0, r0
 8001dce:	4240      	negs	r0, r0
 8001dd0:	1824      	adds	r4, r4, r0
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	0223      	lsls	r3, r4, #8
 8001dd6:	d53a      	bpl.n	8001e4e <__aeabi_dmul+0x51a>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2400      	movs	r4, #0
 8001ddc:	2500      	movs	r5, #0
 8001dde:	e61b      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001de0:	f000 fd64 	bl	80028ac <__clzsi2>
 8001de4:	0001      	movs	r1, r0
 8001de6:	0003      	movs	r3, r0
 8001de8:	3115      	adds	r1, #21
 8001dea:	3320      	adds	r3, #32
 8001dec:	291c      	cmp	r1, #28
 8001dee:	dd8f      	ble.n	8001d10 <__aeabi_dmul+0x3dc>
 8001df0:	3808      	subs	r0, #8
 8001df2:	2200      	movs	r2, #0
 8001df4:	4084      	lsls	r4, r0
 8001df6:	4692      	mov	sl, r2
 8001df8:	46a3      	mov	fp, r4
 8001dfa:	e796      	b.n	8001d2a <__aeabi_dmul+0x3f6>
 8001dfc:	f000 fd56 	bl	80028ac <__clzsi2>
 8001e00:	0001      	movs	r1, r0
 8001e02:	0003      	movs	r3, r0
 8001e04:	3115      	adds	r1, #21
 8001e06:	3320      	adds	r3, #32
 8001e08:	291c      	cmp	r1, #28
 8001e0a:	dc00      	bgt.n	8001e0e <__aeabi_dmul+0x4da>
 8001e0c:	e758      	b.n	8001cc0 <__aeabi_dmul+0x38c>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	464c      	mov	r4, r9
 8001e12:	3a08      	subs	r2, #8
 8001e14:	2000      	movs	r0, #0
 8001e16:	4094      	lsls	r4, r2
 8001e18:	e75d      	b.n	8001cd6 <__aeabi_dmul+0x3a2>
 8001e1a:	9b01      	ldr	r3, [sp, #4]
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	e711      	b.n	8001c44 <__aeabi_dmul+0x310>
 8001e20:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <__aeabi_dmul+0x57c>)
 8001e22:	0026      	movs	r6, r4
 8001e24:	469c      	mov	ip, r3
 8001e26:	0003      	movs	r3, r0
 8001e28:	9d02      	ldr	r5, [sp, #8]
 8001e2a:	40cb      	lsrs	r3, r1
 8001e2c:	4465      	add	r5, ip
 8001e2e:	40ae      	lsls	r6, r5
 8001e30:	431e      	orrs	r6, r3
 8001e32:	0003      	movs	r3, r0
 8001e34:	40ab      	lsls	r3, r5
 8001e36:	1e58      	subs	r0, r3, #1
 8001e38:	4183      	sbcs	r3, r0
 8001e3a:	0030      	movs	r0, r6
 8001e3c:	4318      	orrs	r0, r3
 8001e3e:	40cc      	lsrs	r4, r1
 8001e40:	0743      	lsls	r3, r0, #29
 8001e42:	d0c7      	beq.n	8001dd4 <__aeabi_dmul+0x4a0>
 8001e44:	230f      	movs	r3, #15
 8001e46:	4003      	ands	r3, r0
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d1bd      	bne.n	8001dc8 <__aeabi_dmul+0x494>
 8001e4c:	e7c2      	b.n	8001dd4 <__aeabi_dmul+0x4a0>
 8001e4e:	0765      	lsls	r5, r4, #29
 8001e50:	0264      	lsls	r4, r4, #9
 8001e52:	0b24      	lsrs	r4, r4, #12
 8001e54:	08c0      	lsrs	r0, r0, #3
 8001e56:	2300      	movs	r3, #0
 8001e58:	4305      	orrs	r5, r0
 8001e5a:	e5dd      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001e5c:	2500      	movs	r5, #0
 8001e5e:	2302      	movs	r3, #2
 8001e60:	2e0f      	cmp	r6, #15
 8001e62:	d10c      	bne.n	8001e7e <__aeabi_dmul+0x54a>
 8001e64:	2480      	movs	r4, #128	; 0x80
 8001e66:	465b      	mov	r3, fp
 8001e68:	0324      	lsls	r4, r4, #12
 8001e6a:	4223      	tst	r3, r4
 8001e6c:	d00e      	beq.n	8001e8c <__aeabi_dmul+0x558>
 8001e6e:	4221      	tst	r1, r4
 8001e70:	d10c      	bne.n	8001e8c <__aeabi_dmul+0x558>
 8001e72:	430c      	orrs	r4, r1
 8001e74:	0324      	lsls	r4, r4, #12
 8001e76:	003a      	movs	r2, r7
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <__aeabi_dmul+0x580>)
 8001e7a:	0b24      	lsrs	r4, r4, #12
 8001e7c:	e5cc      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001e7e:	2e0b      	cmp	r6, #11
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dmul+0x550>
 8001e82:	e5a2      	b.n	80019ca <__aeabi_dmul+0x96>
 8001e84:	468b      	mov	fp, r1
 8001e86:	46aa      	mov	sl, r5
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	e5f7      	b.n	8001a7c <__aeabi_dmul+0x148>
 8001e8c:	2480      	movs	r4, #128	; 0x80
 8001e8e:	465b      	mov	r3, fp
 8001e90:	0324      	lsls	r4, r4, #12
 8001e92:	431c      	orrs	r4, r3
 8001e94:	0324      	lsls	r4, r4, #12
 8001e96:	4642      	mov	r2, r8
 8001e98:	4655      	mov	r5, sl
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <__aeabi_dmul+0x580>)
 8001e9c:	0b24      	lsrs	r4, r4, #12
 8001e9e:	e5bb      	b.n	8001a18 <__aeabi_dmul+0xe4>
 8001ea0:	464d      	mov	r5, r9
 8001ea2:	0021      	movs	r1, r4
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e7db      	b.n	8001e60 <__aeabi_dmul+0x52c>
 8001ea8:	fffffc0d 	.word	0xfffffc0d
 8001eac:	0000043e 	.word	0x0000043e
 8001eb0:	0000041e 	.word	0x0000041e
 8001eb4:	000007ff 	.word	0x000007ff

08001eb8 <__aeabi_dsub>:
 8001eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eba:	4657      	mov	r7, sl
 8001ebc:	464e      	mov	r6, r9
 8001ebe:	4645      	mov	r5, r8
 8001ec0:	46de      	mov	lr, fp
 8001ec2:	b5e0      	push	{r5, r6, r7, lr}
 8001ec4:	000d      	movs	r5, r1
 8001ec6:	0004      	movs	r4, r0
 8001ec8:	0019      	movs	r1, r3
 8001eca:	0010      	movs	r0, r2
 8001ecc:	032b      	lsls	r3, r5, #12
 8001ece:	0a5b      	lsrs	r3, r3, #9
 8001ed0:	0f62      	lsrs	r2, r4, #29
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	00e3      	lsls	r3, r4, #3
 8001ed6:	030c      	lsls	r4, r1, #12
 8001ed8:	0a64      	lsrs	r4, r4, #9
 8001eda:	0f47      	lsrs	r7, r0, #29
 8001edc:	4327      	orrs	r7, r4
 8001ede:	4cd0      	ldr	r4, [pc, #832]	; (8002220 <__aeabi_dsub+0x368>)
 8001ee0:	006e      	lsls	r6, r5, #1
 8001ee2:	4691      	mov	r9, r2
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	004a      	lsls	r2, r1, #1
 8001ee8:	00c0      	lsls	r0, r0, #3
 8001eea:	4698      	mov	r8, r3
 8001eec:	46a2      	mov	sl, r4
 8001eee:	0d76      	lsrs	r6, r6, #21
 8001ef0:	0fed      	lsrs	r5, r5, #31
 8001ef2:	0d52      	lsrs	r2, r2, #21
 8001ef4:	0fc9      	lsrs	r1, r1, #31
 8001ef6:	9001      	str	r0, [sp, #4]
 8001ef8:	42a2      	cmp	r2, r4
 8001efa:	d100      	bne.n	8001efe <__aeabi_dsub+0x46>
 8001efc:	e0b9      	b.n	8002072 <__aeabi_dsub+0x1ba>
 8001efe:	2401      	movs	r4, #1
 8001f00:	4061      	eors	r1, r4
 8001f02:	468b      	mov	fp, r1
 8001f04:	428d      	cmp	r5, r1
 8001f06:	d100      	bne.n	8001f0a <__aeabi_dsub+0x52>
 8001f08:	e08d      	b.n	8002026 <__aeabi_dsub+0x16e>
 8001f0a:	1ab4      	subs	r4, r6, r2
 8001f0c:	46a4      	mov	ip, r4
 8001f0e:	2c00      	cmp	r4, #0
 8001f10:	dc00      	bgt.n	8001f14 <__aeabi_dsub+0x5c>
 8001f12:	e0b7      	b.n	8002084 <__aeabi_dsub+0x1cc>
 8001f14:	2a00      	cmp	r2, #0
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x62>
 8001f18:	e0cb      	b.n	80020b2 <__aeabi_dsub+0x1fa>
 8001f1a:	4ac1      	ldr	r2, [pc, #772]	; (8002220 <__aeabi_dsub+0x368>)
 8001f1c:	4296      	cmp	r6, r2
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dsub+0x6a>
 8001f20:	e186      	b.n	8002230 <__aeabi_dsub+0x378>
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	0412      	lsls	r2, r2, #16
 8001f26:	4317      	orrs	r7, r2
 8001f28:	4662      	mov	r2, ip
 8001f2a:	2a38      	cmp	r2, #56	; 0x38
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dsub+0x78>
 8001f2e:	e1a4      	b.n	800227a <__aeabi_dsub+0x3c2>
 8001f30:	2a1f      	cmp	r2, #31
 8001f32:	dd00      	ble.n	8001f36 <__aeabi_dsub+0x7e>
 8001f34:	e21d      	b.n	8002372 <__aeabi_dsub+0x4ba>
 8001f36:	4661      	mov	r1, ip
 8001f38:	2220      	movs	r2, #32
 8001f3a:	003c      	movs	r4, r7
 8001f3c:	1a52      	subs	r2, r2, r1
 8001f3e:	0001      	movs	r1, r0
 8001f40:	4090      	lsls	r0, r2
 8001f42:	4094      	lsls	r4, r2
 8001f44:	1e42      	subs	r2, r0, #1
 8001f46:	4190      	sbcs	r0, r2
 8001f48:	4662      	mov	r2, ip
 8001f4a:	46a0      	mov	r8, r4
 8001f4c:	4664      	mov	r4, ip
 8001f4e:	40d7      	lsrs	r7, r2
 8001f50:	464a      	mov	r2, r9
 8001f52:	40e1      	lsrs	r1, r4
 8001f54:	4644      	mov	r4, r8
 8001f56:	1bd2      	subs	r2, r2, r7
 8001f58:	4691      	mov	r9, r2
 8001f5a:	430c      	orrs	r4, r1
 8001f5c:	4304      	orrs	r4, r0
 8001f5e:	1b1c      	subs	r4, r3, r4
 8001f60:	42a3      	cmp	r3, r4
 8001f62:	4192      	sbcs	r2, r2
 8001f64:	464b      	mov	r3, r9
 8001f66:	4252      	negs	r2, r2
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	469a      	mov	sl, r3
 8001f6c:	4653      	mov	r3, sl
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	d400      	bmi.n	8001f74 <__aeabi_dsub+0xbc>
 8001f72:	e12b      	b.n	80021cc <__aeabi_dsub+0x314>
 8001f74:	4653      	mov	r3, sl
 8001f76:	025a      	lsls	r2, r3, #9
 8001f78:	0a53      	lsrs	r3, r2, #9
 8001f7a:	469a      	mov	sl, r3
 8001f7c:	4653      	mov	r3, sl
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d100      	bne.n	8001f84 <__aeabi_dsub+0xcc>
 8001f82:	e166      	b.n	8002252 <__aeabi_dsub+0x39a>
 8001f84:	4650      	mov	r0, sl
 8001f86:	f000 fc91 	bl	80028ac <__clzsi2>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	2220      	movs	r2, #32
 8001f90:	0020      	movs	r0, r4
 8001f92:	1ad2      	subs	r2, r2, r3
 8001f94:	4651      	mov	r1, sl
 8001f96:	40d0      	lsrs	r0, r2
 8001f98:	4099      	lsls	r1, r3
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	409c      	lsls	r4, r3
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	429e      	cmp	r6, r3
 8001fa2:	dd00      	ble.n	8001fa6 <__aeabi_dsub+0xee>
 8001fa4:	e164      	b.n	8002270 <__aeabi_dsub+0x3b8>
 8001fa6:	1b9b      	subs	r3, r3, r6
 8001fa8:	1c59      	adds	r1, r3, #1
 8001faa:	291f      	cmp	r1, #31
 8001fac:	dd00      	ble.n	8001fb0 <__aeabi_dsub+0xf8>
 8001fae:	e0fe      	b.n	80021ae <__aeabi_dsub+0x2f6>
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	0010      	movs	r0, r2
 8001fb4:	0026      	movs	r6, r4
 8001fb6:	1a5b      	subs	r3, r3, r1
 8001fb8:	409c      	lsls	r4, r3
 8001fba:	4098      	lsls	r0, r3
 8001fbc:	40ce      	lsrs	r6, r1
 8001fbe:	40ca      	lsrs	r2, r1
 8001fc0:	1e63      	subs	r3, r4, #1
 8001fc2:	419c      	sbcs	r4, r3
 8001fc4:	4330      	orrs	r0, r6
 8001fc6:	4692      	mov	sl, r2
 8001fc8:	2600      	movs	r6, #0
 8001fca:	4304      	orrs	r4, r0
 8001fcc:	0763      	lsls	r3, r4, #29
 8001fce:	d009      	beq.n	8001fe4 <__aeabi_dsub+0x12c>
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	4023      	ands	r3, r4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d005      	beq.n	8001fe4 <__aeabi_dsub+0x12c>
 8001fd8:	1d23      	adds	r3, r4, #4
 8001fda:	42a3      	cmp	r3, r4
 8001fdc:	41a4      	sbcs	r4, r4
 8001fde:	4264      	negs	r4, r4
 8001fe0:	44a2      	add	sl, r4
 8001fe2:	001c      	movs	r4, r3
 8001fe4:	4653      	mov	r3, sl
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	d400      	bmi.n	8001fec <__aeabi_dsub+0x134>
 8001fea:	e0f2      	b.n	80021d2 <__aeabi_dsub+0x31a>
 8001fec:	4b8c      	ldr	r3, [pc, #560]	; (8002220 <__aeabi_dsub+0x368>)
 8001fee:	3601      	adds	r6, #1
 8001ff0:	429e      	cmp	r6, r3
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dsub+0x13e>
 8001ff4:	e10f      	b.n	8002216 <__aeabi_dsub+0x35e>
 8001ff6:	4653      	mov	r3, sl
 8001ff8:	498a      	ldr	r1, [pc, #552]	; (8002224 <__aeabi_dsub+0x36c>)
 8001ffa:	08e4      	lsrs	r4, r4, #3
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	0019      	movs	r1, r3
 8002000:	075b      	lsls	r3, r3, #29
 8002002:	4323      	orrs	r3, r4
 8002004:	0572      	lsls	r2, r6, #21
 8002006:	024c      	lsls	r4, r1, #9
 8002008:	0b24      	lsrs	r4, r4, #12
 800200a:	0d52      	lsrs	r2, r2, #21
 800200c:	0512      	lsls	r2, r2, #20
 800200e:	4322      	orrs	r2, r4
 8002010:	07ed      	lsls	r5, r5, #31
 8002012:	432a      	orrs	r2, r5
 8002014:	0018      	movs	r0, r3
 8002016:	0011      	movs	r1, r2
 8002018:	b003      	add	sp, #12
 800201a:	bcf0      	pop	{r4, r5, r6, r7}
 800201c:	46bb      	mov	fp, r7
 800201e:	46b2      	mov	sl, r6
 8002020:	46a9      	mov	r9, r5
 8002022:	46a0      	mov	r8, r4
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002026:	1ab4      	subs	r4, r6, r2
 8002028:	46a4      	mov	ip, r4
 800202a:	2c00      	cmp	r4, #0
 800202c:	dd59      	ble.n	80020e2 <__aeabi_dsub+0x22a>
 800202e:	2a00      	cmp	r2, #0
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x17c>
 8002032:	e0b0      	b.n	8002196 <__aeabi_dsub+0x2de>
 8002034:	4556      	cmp	r6, sl
 8002036:	d100      	bne.n	800203a <__aeabi_dsub+0x182>
 8002038:	e0fa      	b.n	8002230 <__aeabi_dsub+0x378>
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	0412      	lsls	r2, r2, #16
 800203e:	4317      	orrs	r7, r2
 8002040:	4662      	mov	r2, ip
 8002042:	2a38      	cmp	r2, #56	; 0x38
 8002044:	dd00      	ble.n	8002048 <__aeabi_dsub+0x190>
 8002046:	e0d4      	b.n	80021f2 <__aeabi_dsub+0x33a>
 8002048:	2a1f      	cmp	r2, #31
 800204a:	dc00      	bgt.n	800204e <__aeabi_dsub+0x196>
 800204c:	e1c0      	b.n	80023d0 <__aeabi_dsub+0x518>
 800204e:	0039      	movs	r1, r7
 8002050:	3a20      	subs	r2, #32
 8002052:	40d1      	lsrs	r1, r2
 8002054:	4662      	mov	r2, ip
 8002056:	2a20      	cmp	r2, #32
 8002058:	d006      	beq.n	8002068 <__aeabi_dsub+0x1b0>
 800205a:	4664      	mov	r4, ip
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	1b12      	subs	r2, r2, r4
 8002060:	003c      	movs	r4, r7
 8002062:	4094      	lsls	r4, r2
 8002064:	4304      	orrs	r4, r0
 8002066:	9401      	str	r4, [sp, #4]
 8002068:	9c01      	ldr	r4, [sp, #4]
 800206a:	1e62      	subs	r2, r4, #1
 800206c:	4194      	sbcs	r4, r2
 800206e:	430c      	orrs	r4, r1
 8002070:	e0c3      	b.n	80021fa <__aeabi_dsub+0x342>
 8002072:	003c      	movs	r4, r7
 8002074:	4304      	orrs	r4, r0
 8002076:	d02b      	beq.n	80020d0 <__aeabi_dsub+0x218>
 8002078:	468b      	mov	fp, r1
 800207a:	428d      	cmp	r5, r1
 800207c:	d02e      	beq.n	80020dc <__aeabi_dsub+0x224>
 800207e:	4c6a      	ldr	r4, [pc, #424]	; (8002228 <__aeabi_dsub+0x370>)
 8002080:	46a4      	mov	ip, r4
 8002082:	44b4      	add	ip, r6
 8002084:	4664      	mov	r4, ip
 8002086:	2c00      	cmp	r4, #0
 8002088:	d05f      	beq.n	800214a <__aeabi_dsub+0x292>
 800208a:	1b94      	subs	r4, r2, r6
 800208c:	46a4      	mov	ip, r4
 800208e:	2e00      	cmp	r6, #0
 8002090:	d000      	beq.n	8002094 <__aeabi_dsub+0x1dc>
 8002092:	e120      	b.n	80022d6 <__aeabi_dsub+0x41e>
 8002094:	464c      	mov	r4, r9
 8002096:	431c      	orrs	r4, r3
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x1e4>
 800209a:	e1c7      	b.n	800242c <__aeabi_dsub+0x574>
 800209c:	4661      	mov	r1, ip
 800209e:	1e4c      	subs	r4, r1, #1
 80020a0:	2901      	cmp	r1, #1
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x1ee>
 80020a4:	e223      	b.n	80024ee <__aeabi_dsub+0x636>
 80020a6:	4d5e      	ldr	r5, [pc, #376]	; (8002220 <__aeabi_dsub+0x368>)
 80020a8:	45ac      	cmp	ip, r5
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x1f6>
 80020ac:	e1d8      	b.n	8002460 <__aeabi_dsub+0x5a8>
 80020ae:	46a4      	mov	ip, r4
 80020b0:	e11a      	b.n	80022e8 <__aeabi_dsub+0x430>
 80020b2:	003a      	movs	r2, r7
 80020b4:	4302      	orrs	r2, r0
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x202>
 80020b8:	e0e4      	b.n	8002284 <__aeabi_dsub+0x3cc>
 80020ba:	0022      	movs	r2, r4
 80020bc:	3a01      	subs	r2, #1
 80020be:	2c01      	cmp	r4, #1
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dsub+0x20c>
 80020c2:	e1c3      	b.n	800244c <__aeabi_dsub+0x594>
 80020c4:	4956      	ldr	r1, [pc, #344]	; (8002220 <__aeabi_dsub+0x368>)
 80020c6:	428c      	cmp	r4, r1
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x214>
 80020ca:	e0b1      	b.n	8002230 <__aeabi_dsub+0x378>
 80020cc:	4694      	mov	ip, r2
 80020ce:	e72b      	b.n	8001f28 <__aeabi_dsub+0x70>
 80020d0:	2401      	movs	r4, #1
 80020d2:	4061      	eors	r1, r4
 80020d4:	468b      	mov	fp, r1
 80020d6:	428d      	cmp	r5, r1
 80020d8:	d000      	beq.n	80020dc <__aeabi_dsub+0x224>
 80020da:	e716      	b.n	8001f0a <__aeabi_dsub+0x52>
 80020dc:	4952      	ldr	r1, [pc, #328]	; (8002228 <__aeabi_dsub+0x370>)
 80020de:	468c      	mov	ip, r1
 80020e0:	44b4      	add	ip, r6
 80020e2:	4664      	mov	r4, ip
 80020e4:	2c00      	cmp	r4, #0
 80020e6:	d100      	bne.n	80020ea <__aeabi_dsub+0x232>
 80020e8:	e0d3      	b.n	8002292 <__aeabi_dsub+0x3da>
 80020ea:	1b91      	subs	r1, r2, r6
 80020ec:	468c      	mov	ip, r1
 80020ee:	2e00      	cmp	r6, #0
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dsub+0x23c>
 80020f2:	e15e      	b.n	80023b2 <__aeabi_dsub+0x4fa>
 80020f4:	494a      	ldr	r1, [pc, #296]	; (8002220 <__aeabi_dsub+0x368>)
 80020f6:	428a      	cmp	r2, r1
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x244>
 80020fa:	e1be      	b.n	800247a <__aeabi_dsub+0x5c2>
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	464c      	mov	r4, r9
 8002100:	0409      	lsls	r1, r1, #16
 8002102:	430c      	orrs	r4, r1
 8002104:	46a1      	mov	r9, r4
 8002106:	4661      	mov	r1, ip
 8002108:	2938      	cmp	r1, #56	; 0x38
 800210a:	dd00      	ble.n	800210e <__aeabi_dsub+0x256>
 800210c:	e1ba      	b.n	8002484 <__aeabi_dsub+0x5cc>
 800210e:	291f      	cmp	r1, #31
 8002110:	dd00      	ble.n	8002114 <__aeabi_dsub+0x25c>
 8002112:	e227      	b.n	8002564 <__aeabi_dsub+0x6ac>
 8002114:	2420      	movs	r4, #32
 8002116:	1a64      	subs	r4, r4, r1
 8002118:	4649      	mov	r1, r9
 800211a:	40a1      	lsls	r1, r4
 800211c:	001e      	movs	r6, r3
 800211e:	4688      	mov	r8, r1
 8002120:	4661      	mov	r1, ip
 8002122:	40a3      	lsls	r3, r4
 8002124:	40ce      	lsrs	r6, r1
 8002126:	4641      	mov	r1, r8
 8002128:	1e5c      	subs	r4, r3, #1
 800212a:	41a3      	sbcs	r3, r4
 800212c:	4331      	orrs	r1, r6
 800212e:	4319      	orrs	r1, r3
 8002130:	000c      	movs	r4, r1
 8002132:	4663      	mov	r3, ip
 8002134:	4649      	mov	r1, r9
 8002136:	40d9      	lsrs	r1, r3
 8002138:	187f      	adds	r7, r7, r1
 800213a:	1824      	adds	r4, r4, r0
 800213c:	4284      	cmp	r4, r0
 800213e:	419b      	sbcs	r3, r3
 8002140:	425b      	negs	r3, r3
 8002142:	469a      	mov	sl, r3
 8002144:	0016      	movs	r6, r2
 8002146:	44ba      	add	sl, r7
 8002148:	e05d      	b.n	8002206 <__aeabi_dsub+0x34e>
 800214a:	4c38      	ldr	r4, [pc, #224]	; (800222c <__aeabi_dsub+0x374>)
 800214c:	1c72      	adds	r2, r6, #1
 800214e:	4222      	tst	r2, r4
 8002150:	d000      	beq.n	8002154 <__aeabi_dsub+0x29c>
 8002152:	e0df      	b.n	8002314 <__aeabi_dsub+0x45c>
 8002154:	464a      	mov	r2, r9
 8002156:	431a      	orrs	r2, r3
 8002158:	2e00      	cmp	r6, #0
 800215a:	d000      	beq.n	800215e <__aeabi_dsub+0x2a6>
 800215c:	e15c      	b.n	8002418 <__aeabi_dsub+0x560>
 800215e:	2a00      	cmp	r2, #0
 8002160:	d100      	bne.n	8002164 <__aeabi_dsub+0x2ac>
 8002162:	e1cf      	b.n	8002504 <__aeabi_dsub+0x64c>
 8002164:	003a      	movs	r2, r7
 8002166:	4302      	orrs	r2, r0
 8002168:	d100      	bne.n	800216c <__aeabi_dsub+0x2b4>
 800216a:	e17f      	b.n	800246c <__aeabi_dsub+0x5b4>
 800216c:	1a1c      	subs	r4, r3, r0
 800216e:	464a      	mov	r2, r9
 8002170:	42a3      	cmp	r3, r4
 8002172:	4189      	sbcs	r1, r1
 8002174:	1bd2      	subs	r2, r2, r7
 8002176:	4249      	negs	r1, r1
 8002178:	1a52      	subs	r2, r2, r1
 800217a:	4692      	mov	sl, r2
 800217c:	0212      	lsls	r2, r2, #8
 800217e:	d400      	bmi.n	8002182 <__aeabi_dsub+0x2ca>
 8002180:	e20a      	b.n	8002598 <__aeabi_dsub+0x6e0>
 8002182:	1ac4      	subs	r4, r0, r3
 8002184:	42a0      	cmp	r0, r4
 8002186:	4180      	sbcs	r0, r0
 8002188:	464b      	mov	r3, r9
 800218a:	4240      	negs	r0, r0
 800218c:	1aff      	subs	r7, r7, r3
 800218e:	1a3b      	subs	r3, r7, r0
 8002190:	469a      	mov	sl, r3
 8002192:	465d      	mov	r5, fp
 8002194:	e71a      	b.n	8001fcc <__aeabi_dsub+0x114>
 8002196:	003a      	movs	r2, r7
 8002198:	4302      	orrs	r2, r0
 800219a:	d073      	beq.n	8002284 <__aeabi_dsub+0x3cc>
 800219c:	0022      	movs	r2, r4
 800219e:	3a01      	subs	r2, #1
 80021a0:	2c01      	cmp	r4, #1
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x2ee>
 80021a4:	e0cb      	b.n	800233e <__aeabi_dsub+0x486>
 80021a6:	4554      	cmp	r4, sl
 80021a8:	d042      	beq.n	8002230 <__aeabi_dsub+0x378>
 80021aa:	4694      	mov	ip, r2
 80021ac:	e748      	b.n	8002040 <__aeabi_dsub+0x188>
 80021ae:	0010      	movs	r0, r2
 80021b0:	3b1f      	subs	r3, #31
 80021b2:	40d8      	lsrs	r0, r3
 80021b4:	2920      	cmp	r1, #32
 80021b6:	d003      	beq.n	80021c0 <__aeabi_dsub+0x308>
 80021b8:	2340      	movs	r3, #64	; 0x40
 80021ba:	1a5b      	subs	r3, r3, r1
 80021bc:	409a      	lsls	r2, r3
 80021be:	4314      	orrs	r4, r2
 80021c0:	1e63      	subs	r3, r4, #1
 80021c2:	419c      	sbcs	r4, r3
 80021c4:	2300      	movs	r3, #0
 80021c6:	2600      	movs	r6, #0
 80021c8:	469a      	mov	sl, r3
 80021ca:	4304      	orrs	r4, r0
 80021cc:	0763      	lsls	r3, r4, #29
 80021ce:	d000      	beq.n	80021d2 <__aeabi_dsub+0x31a>
 80021d0:	e6fe      	b.n	8001fd0 <__aeabi_dsub+0x118>
 80021d2:	4652      	mov	r2, sl
 80021d4:	08e3      	lsrs	r3, r4, #3
 80021d6:	0752      	lsls	r2, r2, #29
 80021d8:	4313      	orrs	r3, r2
 80021da:	4652      	mov	r2, sl
 80021dc:	46b4      	mov	ip, r6
 80021de:	08d2      	lsrs	r2, r2, #3
 80021e0:	490f      	ldr	r1, [pc, #60]	; (8002220 <__aeabi_dsub+0x368>)
 80021e2:	458c      	cmp	ip, r1
 80021e4:	d02a      	beq.n	800223c <__aeabi_dsub+0x384>
 80021e6:	0312      	lsls	r2, r2, #12
 80021e8:	0b14      	lsrs	r4, r2, #12
 80021ea:	4662      	mov	r2, ip
 80021ec:	0552      	lsls	r2, r2, #21
 80021ee:	0d52      	lsrs	r2, r2, #21
 80021f0:	e70c      	b.n	800200c <__aeabi_dsub+0x154>
 80021f2:	003c      	movs	r4, r7
 80021f4:	4304      	orrs	r4, r0
 80021f6:	1e62      	subs	r2, r4, #1
 80021f8:	4194      	sbcs	r4, r2
 80021fa:	18e4      	adds	r4, r4, r3
 80021fc:	429c      	cmp	r4, r3
 80021fe:	4192      	sbcs	r2, r2
 8002200:	4252      	negs	r2, r2
 8002202:	444a      	add	r2, r9
 8002204:	4692      	mov	sl, r2
 8002206:	4653      	mov	r3, sl
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	d5df      	bpl.n	80021cc <__aeabi_dsub+0x314>
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__aeabi_dsub+0x368>)
 800220e:	3601      	adds	r6, #1
 8002210:	429e      	cmp	r6, r3
 8002212:	d000      	beq.n	8002216 <__aeabi_dsub+0x35e>
 8002214:	e0a0      	b.n	8002358 <__aeabi_dsub+0x4a0>
 8002216:	0032      	movs	r2, r6
 8002218:	2400      	movs	r4, #0
 800221a:	2300      	movs	r3, #0
 800221c:	e6f6      	b.n	800200c <__aeabi_dsub+0x154>
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	000007ff 	.word	0x000007ff
 8002224:	ff7fffff 	.word	0xff7fffff
 8002228:	fffff801 	.word	0xfffff801
 800222c:	000007fe 	.word	0x000007fe
 8002230:	08db      	lsrs	r3, r3, #3
 8002232:	464a      	mov	r2, r9
 8002234:	0752      	lsls	r2, r2, #29
 8002236:	4313      	orrs	r3, r2
 8002238:	464a      	mov	r2, r9
 800223a:	08d2      	lsrs	r2, r2, #3
 800223c:	0019      	movs	r1, r3
 800223e:	4311      	orrs	r1, r2
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x38c>
 8002242:	e1b5      	b.n	80025b0 <__aeabi_dsub+0x6f8>
 8002244:	2480      	movs	r4, #128	; 0x80
 8002246:	0324      	lsls	r4, r4, #12
 8002248:	4314      	orrs	r4, r2
 800224a:	0324      	lsls	r4, r4, #12
 800224c:	4ad5      	ldr	r2, [pc, #852]	; (80025a4 <__aeabi_dsub+0x6ec>)
 800224e:	0b24      	lsrs	r4, r4, #12
 8002250:	e6dc      	b.n	800200c <__aeabi_dsub+0x154>
 8002252:	0020      	movs	r0, r4
 8002254:	f000 fb2a 	bl	80028ac <__clzsi2>
 8002258:	0003      	movs	r3, r0
 800225a:	3318      	adds	r3, #24
 800225c:	2b1f      	cmp	r3, #31
 800225e:	dc00      	bgt.n	8002262 <__aeabi_dsub+0x3aa>
 8002260:	e695      	b.n	8001f8e <__aeabi_dsub+0xd6>
 8002262:	0022      	movs	r2, r4
 8002264:	3808      	subs	r0, #8
 8002266:	4082      	lsls	r2, r0
 8002268:	2400      	movs	r4, #0
 800226a:	429e      	cmp	r6, r3
 800226c:	dc00      	bgt.n	8002270 <__aeabi_dsub+0x3b8>
 800226e:	e69a      	b.n	8001fa6 <__aeabi_dsub+0xee>
 8002270:	1af6      	subs	r6, r6, r3
 8002272:	4bcd      	ldr	r3, [pc, #820]	; (80025a8 <__aeabi_dsub+0x6f0>)
 8002274:	401a      	ands	r2, r3
 8002276:	4692      	mov	sl, r2
 8002278:	e6a8      	b.n	8001fcc <__aeabi_dsub+0x114>
 800227a:	003c      	movs	r4, r7
 800227c:	4304      	orrs	r4, r0
 800227e:	1e62      	subs	r2, r4, #1
 8002280:	4194      	sbcs	r4, r2
 8002282:	e66c      	b.n	8001f5e <__aeabi_dsub+0xa6>
 8002284:	464a      	mov	r2, r9
 8002286:	08db      	lsrs	r3, r3, #3
 8002288:	0752      	lsls	r2, r2, #29
 800228a:	4313      	orrs	r3, r2
 800228c:	464a      	mov	r2, r9
 800228e:	08d2      	lsrs	r2, r2, #3
 8002290:	e7a6      	b.n	80021e0 <__aeabi_dsub+0x328>
 8002292:	4cc6      	ldr	r4, [pc, #792]	; (80025ac <__aeabi_dsub+0x6f4>)
 8002294:	1c72      	adds	r2, r6, #1
 8002296:	4222      	tst	r2, r4
 8002298:	d000      	beq.n	800229c <__aeabi_dsub+0x3e4>
 800229a:	e0ac      	b.n	80023f6 <__aeabi_dsub+0x53e>
 800229c:	464a      	mov	r2, r9
 800229e:	431a      	orrs	r2, r3
 80022a0:	2e00      	cmp	r6, #0
 80022a2:	d000      	beq.n	80022a6 <__aeabi_dsub+0x3ee>
 80022a4:	e105      	b.n	80024b2 <__aeabi_dsub+0x5fa>
 80022a6:	2a00      	cmp	r2, #0
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x3f4>
 80022aa:	e156      	b.n	800255a <__aeabi_dsub+0x6a2>
 80022ac:	003a      	movs	r2, r7
 80022ae:	4302      	orrs	r2, r0
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dsub+0x3fc>
 80022b2:	e0db      	b.n	800246c <__aeabi_dsub+0x5b4>
 80022b4:	181c      	adds	r4, r3, r0
 80022b6:	429c      	cmp	r4, r3
 80022b8:	419b      	sbcs	r3, r3
 80022ba:	444f      	add	r7, r9
 80022bc:	46ba      	mov	sl, r7
 80022be:	425b      	negs	r3, r3
 80022c0:	449a      	add	sl, r3
 80022c2:	4653      	mov	r3, sl
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	d400      	bmi.n	80022ca <__aeabi_dsub+0x412>
 80022c8:	e780      	b.n	80021cc <__aeabi_dsub+0x314>
 80022ca:	4652      	mov	r2, sl
 80022cc:	4bb6      	ldr	r3, [pc, #728]	; (80025a8 <__aeabi_dsub+0x6f0>)
 80022ce:	2601      	movs	r6, #1
 80022d0:	401a      	ands	r2, r3
 80022d2:	4692      	mov	sl, r2
 80022d4:	e77a      	b.n	80021cc <__aeabi_dsub+0x314>
 80022d6:	4cb3      	ldr	r4, [pc, #716]	; (80025a4 <__aeabi_dsub+0x6ec>)
 80022d8:	42a2      	cmp	r2, r4
 80022da:	d100      	bne.n	80022de <__aeabi_dsub+0x426>
 80022dc:	e0c0      	b.n	8002460 <__aeabi_dsub+0x5a8>
 80022de:	2480      	movs	r4, #128	; 0x80
 80022e0:	464d      	mov	r5, r9
 80022e2:	0424      	lsls	r4, r4, #16
 80022e4:	4325      	orrs	r5, r4
 80022e6:	46a9      	mov	r9, r5
 80022e8:	4664      	mov	r4, ip
 80022ea:	2c38      	cmp	r4, #56	; 0x38
 80022ec:	dc53      	bgt.n	8002396 <__aeabi_dsub+0x4de>
 80022ee:	4661      	mov	r1, ip
 80022f0:	2c1f      	cmp	r4, #31
 80022f2:	dd00      	ble.n	80022f6 <__aeabi_dsub+0x43e>
 80022f4:	e0cd      	b.n	8002492 <__aeabi_dsub+0x5da>
 80022f6:	2520      	movs	r5, #32
 80022f8:	001e      	movs	r6, r3
 80022fa:	1b2d      	subs	r5, r5, r4
 80022fc:	464c      	mov	r4, r9
 80022fe:	40ab      	lsls	r3, r5
 8002300:	40ac      	lsls	r4, r5
 8002302:	40ce      	lsrs	r6, r1
 8002304:	1e5d      	subs	r5, r3, #1
 8002306:	41ab      	sbcs	r3, r5
 8002308:	4334      	orrs	r4, r6
 800230a:	4323      	orrs	r3, r4
 800230c:	464c      	mov	r4, r9
 800230e:	40cc      	lsrs	r4, r1
 8002310:	1b3f      	subs	r7, r7, r4
 8002312:	e045      	b.n	80023a0 <__aeabi_dsub+0x4e8>
 8002314:	464a      	mov	r2, r9
 8002316:	1a1c      	subs	r4, r3, r0
 8002318:	1bd1      	subs	r1, r2, r7
 800231a:	42a3      	cmp	r3, r4
 800231c:	4192      	sbcs	r2, r2
 800231e:	4252      	negs	r2, r2
 8002320:	4692      	mov	sl, r2
 8002322:	000a      	movs	r2, r1
 8002324:	4651      	mov	r1, sl
 8002326:	1a52      	subs	r2, r2, r1
 8002328:	4692      	mov	sl, r2
 800232a:	0212      	lsls	r2, r2, #8
 800232c:	d500      	bpl.n	8002330 <__aeabi_dsub+0x478>
 800232e:	e083      	b.n	8002438 <__aeabi_dsub+0x580>
 8002330:	4653      	mov	r3, sl
 8002332:	4323      	orrs	r3, r4
 8002334:	d000      	beq.n	8002338 <__aeabi_dsub+0x480>
 8002336:	e621      	b.n	8001f7c <__aeabi_dsub+0xc4>
 8002338:	2200      	movs	r2, #0
 800233a:	2500      	movs	r5, #0
 800233c:	e753      	b.n	80021e6 <__aeabi_dsub+0x32e>
 800233e:	181c      	adds	r4, r3, r0
 8002340:	429c      	cmp	r4, r3
 8002342:	419b      	sbcs	r3, r3
 8002344:	444f      	add	r7, r9
 8002346:	46ba      	mov	sl, r7
 8002348:	425b      	negs	r3, r3
 800234a:	449a      	add	sl, r3
 800234c:	4653      	mov	r3, sl
 800234e:	2601      	movs	r6, #1
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	d400      	bmi.n	8002356 <__aeabi_dsub+0x49e>
 8002354:	e73a      	b.n	80021cc <__aeabi_dsub+0x314>
 8002356:	2602      	movs	r6, #2
 8002358:	4652      	mov	r2, sl
 800235a:	4b93      	ldr	r3, [pc, #588]	; (80025a8 <__aeabi_dsub+0x6f0>)
 800235c:	2101      	movs	r1, #1
 800235e:	401a      	ands	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	4021      	ands	r1, r4
 8002364:	0862      	lsrs	r2, r4, #1
 8002366:	430a      	orrs	r2, r1
 8002368:	07dc      	lsls	r4, r3, #31
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	469a      	mov	sl, r3
 800236e:	4314      	orrs	r4, r2
 8002370:	e62c      	b.n	8001fcc <__aeabi_dsub+0x114>
 8002372:	0039      	movs	r1, r7
 8002374:	3a20      	subs	r2, #32
 8002376:	40d1      	lsrs	r1, r2
 8002378:	4662      	mov	r2, ip
 800237a:	2a20      	cmp	r2, #32
 800237c:	d006      	beq.n	800238c <__aeabi_dsub+0x4d4>
 800237e:	4664      	mov	r4, ip
 8002380:	2240      	movs	r2, #64	; 0x40
 8002382:	1b12      	subs	r2, r2, r4
 8002384:	003c      	movs	r4, r7
 8002386:	4094      	lsls	r4, r2
 8002388:	4304      	orrs	r4, r0
 800238a:	9401      	str	r4, [sp, #4]
 800238c:	9c01      	ldr	r4, [sp, #4]
 800238e:	1e62      	subs	r2, r4, #1
 8002390:	4194      	sbcs	r4, r2
 8002392:	430c      	orrs	r4, r1
 8002394:	e5e3      	b.n	8001f5e <__aeabi_dsub+0xa6>
 8002396:	4649      	mov	r1, r9
 8002398:	4319      	orrs	r1, r3
 800239a:	000b      	movs	r3, r1
 800239c:	1e5c      	subs	r4, r3, #1
 800239e:	41a3      	sbcs	r3, r4
 80023a0:	1ac4      	subs	r4, r0, r3
 80023a2:	42a0      	cmp	r0, r4
 80023a4:	419b      	sbcs	r3, r3
 80023a6:	425b      	negs	r3, r3
 80023a8:	1afb      	subs	r3, r7, r3
 80023aa:	469a      	mov	sl, r3
 80023ac:	465d      	mov	r5, fp
 80023ae:	0016      	movs	r6, r2
 80023b0:	e5dc      	b.n	8001f6c <__aeabi_dsub+0xb4>
 80023b2:	4649      	mov	r1, r9
 80023b4:	4319      	orrs	r1, r3
 80023b6:	d100      	bne.n	80023ba <__aeabi_dsub+0x502>
 80023b8:	e0ae      	b.n	8002518 <__aeabi_dsub+0x660>
 80023ba:	4661      	mov	r1, ip
 80023bc:	4664      	mov	r4, ip
 80023be:	3901      	subs	r1, #1
 80023c0:	2c01      	cmp	r4, #1
 80023c2:	d100      	bne.n	80023c6 <__aeabi_dsub+0x50e>
 80023c4:	e0e0      	b.n	8002588 <__aeabi_dsub+0x6d0>
 80023c6:	4c77      	ldr	r4, [pc, #476]	; (80025a4 <__aeabi_dsub+0x6ec>)
 80023c8:	45a4      	cmp	ip, r4
 80023ca:	d056      	beq.n	800247a <__aeabi_dsub+0x5c2>
 80023cc:	468c      	mov	ip, r1
 80023ce:	e69a      	b.n	8002106 <__aeabi_dsub+0x24e>
 80023d0:	4661      	mov	r1, ip
 80023d2:	2220      	movs	r2, #32
 80023d4:	003c      	movs	r4, r7
 80023d6:	1a52      	subs	r2, r2, r1
 80023d8:	4094      	lsls	r4, r2
 80023da:	0001      	movs	r1, r0
 80023dc:	4090      	lsls	r0, r2
 80023de:	46a0      	mov	r8, r4
 80023e0:	4664      	mov	r4, ip
 80023e2:	1e42      	subs	r2, r0, #1
 80023e4:	4190      	sbcs	r0, r2
 80023e6:	4662      	mov	r2, ip
 80023e8:	40e1      	lsrs	r1, r4
 80023ea:	4644      	mov	r4, r8
 80023ec:	40d7      	lsrs	r7, r2
 80023ee:	430c      	orrs	r4, r1
 80023f0:	4304      	orrs	r4, r0
 80023f2:	44b9      	add	r9, r7
 80023f4:	e701      	b.n	80021fa <__aeabi_dsub+0x342>
 80023f6:	496b      	ldr	r1, [pc, #428]	; (80025a4 <__aeabi_dsub+0x6ec>)
 80023f8:	428a      	cmp	r2, r1
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0x546>
 80023fc:	e70c      	b.n	8002218 <__aeabi_dsub+0x360>
 80023fe:	1818      	adds	r0, r3, r0
 8002400:	4298      	cmp	r0, r3
 8002402:	419b      	sbcs	r3, r3
 8002404:	444f      	add	r7, r9
 8002406:	425b      	negs	r3, r3
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	07dc      	lsls	r4, r3, #31
 800240c:	0840      	lsrs	r0, r0, #1
 800240e:	085b      	lsrs	r3, r3, #1
 8002410:	469a      	mov	sl, r3
 8002412:	0016      	movs	r6, r2
 8002414:	4304      	orrs	r4, r0
 8002416:	e6d9      	b.n	80021cc <__aeabi_dsub+0x314>
 8002418:	2a00      	cmp	r2, #0
 800241a:	d000      	beq.n	800241e <__aeabi_dsub+0x566>
 800241c:	e081      	b.n	8002522 <__aeabi_dsub+0x66a>
 800241e:	003b      	movs	r3, r7
 8002420:	4303      	orrs	r3, r0
 8002422:	d11d      	bne.n	8002460 <__aeabi_dsub+0x5a8>
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	2500      	movs	r5, #0
 8002428:	0312      	lsls	r2, r2, #12
 800242a:	e70b      	b.n	8002244 <__aeabi_dsub+0x38c>
 800242c:	08c0      	lsrs	r0, r0, #3
 800242e:	077b      	lsls	r3, r7, #29
 8002430:	465d      	mov	r5, fp
 8002432:	4303      	orrs	r3, r0
 8002434:	08fa      	lsrs	r2, r7, #3
 8002436:	e6d3      	b.n	80021e0 <__aeabi_dsub+0x328>
 8002438:	1ac4      	subs	r4, r0, r3
 800243a:	42a0      	cmp	r0, r4
 800243c:	4180      	sbcs	r0, r0
 800243e:	464b      	mov	r3, r9
 8002440:	4240      	negs	r0, r0
 8002442:	1aff      	subs	r7, r7, r3
 8002444:	1a3b      	subs	r3, r7, r0
 8002446:	469a      	mov	sl, r3
 8002448:	465d      	mov	r5, fp
 800244a:	e597      	b.n	8001f7c <__aeabi_dsub+0xc4>
 800244c:	1a1c      	subs	r4, r3, r0
 800244e:	464a      	mov	r2, r9
 8002450:	42a3      	cmp	r3, r4
 8002452:	419b      	sbcs	r3, r3
 8002454:	1bd7      	subs	r7, r2, r7
 8002456:	425b      	negs	r3, r3
 8002458:	1afb      	subs	r3, r7, r3
 800245a:	469a      	mov	sl, r3
 800245c:	2601      	movs	r6, #1
 800245e:	e585      	b.n	8001f6c <__aeabi_dsub+0xb4>
 8002460:	08c0      	lsrs	r0, r0, #3
 8002462:	077b      	lsls	r3, r7, #29
 8002464:	465d      	mov	r5, fp
 8002466:	4303      	orrs	r3, r0
 8002468:	08fa      	lsrs	r2, r7, #3
 800246a:	e6e7      	b.n	800223c <__aeabi_dsub+0x384>
 800246c:	464a      	mov	r2, r9
 800246e:	08db      	lsrs	r3, r3, #3
 8002470:	0752      	lsls	r2, r2, #29
 8002472:	4313      	orrs	r3, r2
 8002474:	464a      	mov	r2, r9
 8002476:	08d2      	lsrs	r2, r2, #3
 8002478:	e6b5      	b.n	80021e6 <__aeabi_dsub+0x32e>
 800247a:	08c0      	lsrs	r0, r0, #3
 800247c:	077b      	lsls	r3, r7, #29
 800247e:	4303      	orrs	r3, r0
 8002480:	08fa      	lsrs	r2, r7, #3
 8002482:	e6db      	b.n	800223c <__aeabi_dsub+0x384>
 8002484:	4649      	mov	r1, r9
 8002486:	4319      	orrs	r1, r3
 8002488:	000b      	movs	r3, r1
 800248a:	1e59      	subs	r1, r3, #1
 800248c:	418b      	sbcs	r3, r1
 800248e:	001c      	movs	r4, r3
 8002490:	e653      	b.n	800213a <__aeabi_dsub+0x282>
 8002492:	464d      	mov	r5, r9
 8002494:	3c20      	subs	r4, #32
 8002496:	40e5      	lsrs	r5, r4
 8002498:	2920      	cmp	r1, #32
 800249a:	d005      	beq.n	80024a8 <__aeabi_dsub+0x5f0>
 800249c:	2440      	movs	r4, #64	; 0x40
 800249e:	1a64      	subs	r4, r4, r1
 80024a0:	4649      	mov	r1, r9
 80024a2:	40a1      	lsls	r1, r4
 80024a4:	430b      	orrs	r3, r1
 80024a6:	4698      	mov	r8, r3
 80024a8:	4643      	mov	r3, r8
 80024aa:	1e5c      	subs	r4, r3, #1
 80024ac:	41a3      	sbcs	r3, r4
 80024ae:	432b      	orrs	r3, r5
 80024b0:	e776      	b.n	80023a0 <__aeabi_dsub+0x4e8>
 80024b2:	2a00      	cmp	r2, #0
 80024b4:	d0e1      	beq.n	800247a <__aeabi_dsub+0x5c2>
 80024b6:	003a      	movs	r2, r7
 80024b8:	08db      	lsrs	r3, r3, #3
 80024ba:	4302      	orrs	r2, r0
 80024bc:	d100      	bne.n	80024c0 <__aeabi_dsub+0x608>
 80024be:	e6b8      	b.n	8002232 <__aeabi_dsub+0x37a>
 80024c0:	464a      	mov	r2, r9
 80024c2:	0752      	lsls	r2, r2, #29
 80024c4:	2480      	movs	r4, #128	; 0x80
 80024c6:	4313      	orrs	r3, r2
 80024c8:	464a      	mov	r2, r9
 80024ca:	0324      	lsls	r4, r4, #12
 80024cc:	08d2      	lsrs	r2, r2, #3
 80024ce:	4222      	tst	r2, r4
 80024d0:	d007      	beq.n	80024e2 <__aeabi_dsub+0x62a>
 80024d2:	08fe      	lsrs	r6, r7, #3
 80024d4:	4226      	tst	r6, r4
 80024d6:	d104      	bne.n	80024e2 <__aeabi_dsub+0x62a>
 80024d8:	465d      	mov	r5, fp
 80024da:	0032      	movs	r2, r6
 80024dc:	08c3      	lsrs	r3, r0, #3
 80024de:	077f      	lsls	r7, r7, #29
 80024e0:	433b      	orrs	r3, r7
 80024e2:	0f59      	lsrs	r1, r3, #29
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	0749      	lsls	r1, r1, #29
 80024e8:	08db      	lsrs	r3, r3, #3
 80024ea:	430b      	orrs	r3, r1
 80024ec:	e6a6      	b.n	800223c <__aeabi_dsub+0x384>
 80024ee:	1ac4      	subs	r4, r0, r3
 80024f0:	42a0      	cmp	r0, r4
 80024f2:	4180      	sbcs	r0, r0
 80024f4:	464b      	mov	r3, r9
 80024f6:	4240      	negs	r0, r0
 80024f8:	1aff      	subs	r7, r7, r3
 80024fa:	1a3b      	subs	r3, r7, r0
 80024fc:	469a      	mov	sl, r3
 80024fe:	465d      	mov	r5, fp
 8002500:	2601      	movs	r6, #1
 8002502:	e533      	b.n	8001f6c <__aeabi_dsub+0xb4>
 8002504:	003b      	movs	r3, r7
 8002506:	4303      	orrs	r3, r0
 8002508:	d100      	bne.n	800250c <__aeabi_dsub+0x654>
 800250a:	e715      	b.n	8002338 <__aeabi_dsub+0x480>
 800250c:	08c0      	lsrs	r0, r0, #3
 800250e:	077b      	lsls	r3, r7, #29
 8002510:	465d      	mov	r5, fp
 8002512:	4303      	orrs	r3, r0
 8002514:	08fa      	lsrs	r2, r7, #3
 8002516:	e666      	b.n	80021e6 <__aeabi_dsub+0x32e>
 8002518:	08c0      	lsrs	r0, r0, #3
 800251a:	077b      	lsls	r3, r7, #29
 800251c:	4303      	orrs	r3, r0
 800251e:	08fa      	lsrs	r2, r7, #3
 8002520:	e65e      	b.n	80021e0 <__aeabi_dsub+0x328>
 8002522:	003a      	movs	r2, r7
 8002524:	08db      	lsrs	r3, r3, #3
 8002526:	4302      	orrs	r2, r0
 8002528:	d100      	bne.n	800252c <__aeabi_dsub+0x674>
 800252a:	e682      	b.n	8002232 <__aeabi_dsub+0x37a>
 800252c:	464a      	mov	r2, r9
 800252e:	0752      	lsls	r2, r2, #29
 8002530:	2480      	movs	r4, #128	; 0x80
 8002532:	4313      	orrs	r3, r2
 8002534:	464a      	mov	r2, r9
 8002536:	0324      	lsls	r4, r4, #12
 8002538:	08d2      	lsrs	r2, r2, #3
 800253a:	4222      	tst	r2, r4
 800253c:	d007      	beq.n	800254e <__aeabi_dsub+0x696>
 800253e:	08fe      	lsrs	r6, r7, #3
 8002540:	4226      	tst	r6, r4
 8002542:	d104      	bne.n	800254e <__aeabi_dsub+0x696>
 8002544:	465d      	mov	r5, fp
 8002546:	0032      	movs	r2, r6
 8002548:	08c3      	lsrs	r3, r0, #3
 800254a:	077f      	lsls	r7, r7, #29
 800254c:	433b      	orrs	r3, r7
 800254e:	0f59      	lsrs	r1, r3, #29
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	08db      	lsrs	r3, r3, #3
 8002554:	0749      	lsls	r1, r1, #29
 8002556:	430b      	orrs	r3, r1
 8002558:	e670      	b.n	800223c <__aeabi_dsub+0x384>
 800255a:	08c0      	lsrs	r0, r0, #3
 800255c:	077b      	lsls	r3, r7, #29
 800255e:	4303      	orrs	r3, r0
 8002560:	08fa      	lsrs	r2, r7, #3
 8002562:	e640      	b.n	80021e6 <__aeabi_dsub+0x32e>
 8002564:	464c      	mov	r4, r9
 8002566:	3920      	subs	r1, #32
 8002568:	40cc      	lsrs	r4, r1
 800256a:	4661      	mov	r1, ip
 800256c:	2920      	cmp	r1, #32
 800256e:	d006      	beq.n	800257e <__aeabi_dsub+0x6c6>
 8002570:	4666      	mov	r6, ip
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	1b89      	subs	r1, r1, r6
 8002576:	464e      	mov	r6, r9
 8002578:	408e      	lsls	r6, r1
 800257a:	4333      	orrs	r3, r6
 800257c:	4698      	mov	r8, r3
 800257e:	4643      	mov	r3, r8
 8002580:	1e59      	subs	r1, r3, #1
 8002582:	418b      	sbcs	r3, r1
 8002584:	431c      	orrs	r4, r3
 8002586:	e5d8      	b.n	800213a <__aeabi_dsub+0x282>
 8002588:	181c      	adds	r4, r3, r0
 800258a:	4284      	cmp	r4, r0
 800258c:	4180      	sbcs	r0, r0
 800258e:	444f      	add	r7, r9
 8002590:	46ba      	mov	sl, r7
 8002592:	4240      	negs	r0, r0
 8002594:	4482      	add	sl, r0
 8002596:	e6d9      	b.n	800234c <__aeabi_dsub+0x494>
 8002598:	4653      	mov	r3, sl
 800259a:	4323      	orrs	r3, r4
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x6e8>
 800259e:	e6cb      	b.n	8002338 <__aeabi_dsub+0x480>
 80025a0:	e614      	b.n	80021cc <__aeabi_dsub+0x314>
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	000007ff 	.word	0x000007ff
 80025a8:	ff7fffff 	.word	0xff7fffff
 80025ac:	000007fe 	.word	0x000007fe
 80025b0:	2300      	movs	r3, #0
 80025b2:	4a01      	ldr	r2, [pc, #4]	; (80025b8 <__aeabi_dsub+0x700>)
 80025b4:	001c      	movs	r4, r3
 80025b6:	e529      	b.n	800200c <__aeabi_dsub+0x154>
 80025b8:	000007ff 	.word	0x000007ff

080025bc <__aeabi_dcmpun>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	0005      	movs	r5, r0
 80025c0:	480c      	ldr	r0, [pc, #48]	; (80025f4 <__aeabi_dcmpun+0x38>)
 80025c2:	031c      	lsls	r4, r3, #12
 80025c4:	0016      	movs	r6, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	030a      	lsls	r2, r1, #12
 80025ca:	0049      	lsls	r1, r1, #1
 80025cc:	0b12      	lsrs	r2, r2, #12
 80025ce:	0d49      	lsrs	r1, r1, #21
 80025d0:	0b24      	lsrs	r4, r4, #12
 80025d2:	0d5b      	lsrs	r3, r3, #21
 80025d4:	4281      	cmp	r1, r0
 80025d6:	d008      	beq.n	80025ea <__aeabi_dcmpun+0x2e>
 80025d8:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <__aeabi_dcmpun+0x38>)
 80025da:	2000      	movs	r0, #0
 80025dc:	4293      	cmp	r3, r2
 80025de:	d103      	bne.n	80025e8 <__aeabi_dcmpun+0x2c>
 80025e0:	0020      	movs	r0, r4
 80025e2:	4330      	orrs	r0, r6
 80025e4:	1e43      	subs	r3, r0, #1
 80025e6:	4198      	sbcs	r0, r3
 80025e8:	bd70      	pop	{r4, r5, r6, pc}
 80025ea:	2001      	movs	r0, #1
 80025ec:	432a      	orrs	r2, r5
 80025ee:	d1fb      	bne.n	80025e8 <__aeabi_dcmpun+0x2c>
 80025f0:	e7f2      	b.n	80025d8 <__aeabi_dcmpun+0x1c>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	000007ff 	.word	0x000007ff

080025f8 <__aeabi_d2iz>:
 80025f8:	000a      	movs	r2, r1
 80025fa:	b530      	push	{r4, r5, lr}
 80025fc:	4c13      	ldr	r4, [pc, #76]	; (800264c <__aeabi_d2iz+0x54>)
 80025fe:	0053      	lsls	r3, r2, #1
 8002600:	0309      	lsls	r1, r1, #12
 8002602:	0005      	movs	r5, r0
 8002604:	0b09      	lsrs	r1, r1, #12
 8002606:	2000      	movs	r0, #0
 8002608:	0d5b      	lsrs	r3, r3, #21
 800260a:	0fd2      	lsrs	r2, r2, #31
 800260c:	42a3      	cmp	r3, r4
 800260e:	dd04      	ble.n	800261a <__aeabi_d2iz+0x22>
 8002610:	480f      	ldr	r0, [pc, #60]	; (8002650 <__aeabi_d2iz+0x58>)
 8002612:	4283      	cmp	r3, r0
 8002614:	dd02      	ble.n	800261c <__aeabi_d2iz+0x24>
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <__aeabi_d2iz+0x5c>)
 8002618:	18d0      	adds	r0, r2, r3
 800261a:	bd30      	pop	{r4, r5, pc}
 800261c:	2080      	movs	r0, #128	; 0x80
 800261e:	0340      	lsls	r0, r0, #13
 8002620:	4301      	orrs	r1, r0
 8002622:	480d      	ldr	r0, [pc, #52]	; (8002658 <__aeabi_d2iz+0x60>)
 8002624:	1ac0      	subs	r0, r0, r3
 8002626:	281f      	cmp	r0, #31
 8002628:	dd08      	ble.n	800263c <__aeabi_d2iz+0x44>
 800262a:	480c      	ldr	r0, [pc, #48]	; (800265c <__aeabi_d2iz+0x64>)
 800262c:	1ac3      	subs	r3, r0, r3
 800262e:	40d9      	lsrs	r1, r3
 8002630:	000b      	movs	r3, r1
 8002632:	4258      	negs	r0, r3
 8002634:	2a00      	cmp	r2, #0
 8002636:	d1f0      	bne.n	800261a <__aeabi_d2iz+0x22>
 8002638:	0018      	movs	r0, r3
 800263a:	e7ee      	b.n	800261a <__aeabi_d2iz+0x22>
 800263c:	4c08      	ldr	r4, [pc, #32]	; (8002660 <__aeabi_d2iz+0x68>)
 800263e:	40c5      	lsrs	r5, r0
 8002640:	46a4      	mov	ip, r4
 8002642:	4463      	add	r3, ip
 8002644:	4099      	lsls	r1, r3
 8002646:	000b      	movs	r3, r1
 8002648:	432b      	orrs	r3, r5
 800264a:	e7f2      	b.n	8002632 <__aeabi_d2iz+0x3a>
 800264c:	000003fe 	.word	0x000003fe
 8002650:	0000041d 	.word	0x0000041d
 8002654:	7fffffff 	.word	0x7fffffff
 8002658:	00000433 	.word	0x00000433
 800265c:	00000413 	.word	0x00000413
 8002660:	fffffbed 	.word	0xfffffbed

08002664 <__aeabi_i2d>:
 8002664:	b570      	push	{r4, r5, r6, lr}
 8002666:	2800      	cmp	r0, #0
 8002668:	d016      	beq.n	8002698 <__aeabi_i2d+0x34>
 800266a:	17c3      	asrs	r3, r0, #31
 800266c:	18c5      	adds	r5, r0, r3
 800266e:	405d      	eors	r5, r3
 8002670:	0fc4      	lsrs	r4, r0, #31
 8002672:	0028      	movs	r0, r5
 8002674:	f000 f91a 	bl	80028ac <__clzsi2>
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <__aeabi_i2d+0x5c>)
 800267a:	1a1b      	subs	r3, r3, r0
 800267c:	280a      	cmp	r0, #10
 800267e:	dc16      	bgt.n	80026ae <__aeabi_i2d+0x4a>
 8002680:	0002      	movs	r2, r0
 8002682:	002e      	movs	r6, r5
 8002684:	3215      	adds	r2, #21
 8002686:	4096      	lsls	r6, r2
 8002688:	220b      	movs	r2, #11
 800268a:	1a12      	subs	r2, r2, r0
 800268c:	40d5      	lsrs	r5, r2
 800268e:	055b      	lsls	r3, r3, #21
 8002690:	032d      	lsls	r5, r5, #12
 8002692:	0b2d      	lsrs	r5, r5, #12
 8002694:	0d5b      	lsrs	r3, r3, #21
 8002696:	e003      	b.n	80026a0 <__aeabi_i2d+0x3c>
 8002698:	2400      	movs	r4, #0
 800269a:	2300      	movs	r3, #0
 800269c:	2500      	movs	r5, #0
 800269e:	2600      	movs	r6, #0
 80026a0:	051b      	lsls	r3, r3, #20
 80026a2:	432b      	orrs	r3, r5
 80026a4:	07e4      	lsls	r4, r4, #31
 80026a6:	4323      	orrs	r3, r4
 80026a8:	0030      	movs	r0, r6
 80026aa:	0019      	movs	r1, r3
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
 80026ae:	380b      	subs	r0, #11
 80026b0:	4085      	lsls	r5, r0
 80026b2:	055b      	lsls	r3, r3, #21
 80026b4:	032d      	lsls	r5, r5, #12
 80026b6:	2600      	movs	r6, #0
 80026b8:	0b2d      	lsrs	r5, r5, #12
 80026ba:	0d5b      	lsrs	r3, r3, #21
 80026bc:	e7f0      	b.n	80026a0 <__aeabi_i2d+0x3c>
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	0000041e 	.word	0x0000041e

080026c4 <__aeabi_ui2d>:
 80026c4:	b510      	push	{r4, lr}
 80026c6:	1e04      	subs	r4, r0, #0
 80026c8:	d010      	beq.n	80026ec <__aeabi_ui2d+0x28>
 80026ca:	f000 f8ef 	bl	80028ac <__clzsi2>
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <__aeabi_ui2d+0x48>)
 80026d0:	1a1b      	subs	r3, r3, r0
 80026d2:	280a      	cmp	r0, #10
 80026d4:	dc11      	bgt.n	80026fa <__aeabi_ui2d+0x36>
 80026d6:	220b      	movs	r2, #11
 80026d8:	0021      	movs	r1, r4
 80026da:	1a12      	subs	r2, r2, r0
 80026dc:	40d1      	lsrs	r1, r2
 80026de:	3015      	adds	r0, #21
 80026e0:	030a      	lsls	r2, r1, #12
 80026e2:	055b      	lsls	r3, r3, #21
 80026e4:	4084      	lsls	r4, r0
 80026e6:	0b12      	lsrs	r2, r2, #12
 80026e8:	0d5b      	lsrs	r3, r3, #21
 80026ea:	e001      	b.n	80026f0 <__aeabi_ui2d+0x2c>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2200      	movs	r2, #0
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0020      	movs	r0, r4
 80026f6:	0019      	movs	r1, r3
 80026f8:	bd10      	pop	{r4, pc}
 80026fa:	0022      	movs	r2, r4
 80026fc:	380b      	subs	r0, #11
 80026fe:	4082      	lsls	r2, r0
 8002700:	055b      	lsls	r3, r3, #21
 8002702:	0312      	lsls	r2, r2, #12
 8002704:	2400      	movs	r4, #0
 8002706:	0b12      	lsrs	r2, r2, #12
 8002708:	0d5b      	lsrs	r3, r3, #21
 800270a:	e7f1      	b.n	80026f0 <__aeabi_ui2d+0x2c>
 800270c:	0000041e 	.word	0x0000041e

08002710 <__aeabi_f2d>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	0242      	lsls	r2, r0, #9
 8002714:	0043      	lsls	r3, r0, #1
 8002716:	0fc4      	lsrs	r4, r0, #31
 8002718:	20fe      	movs	r0, #254	; 0xfe
 800271a:	0e1b      	lsrs	r3, r3, #24
 800271c:	1c59      	adds	r1, r3, #1
 800271e:	0a55      	lsrs	r5, r2, #9
 8002720:	4208      	tst	r0, r1
 8002722:	d00c      	beq.n	800273e <__aeabi_f2d+0x2e>
 8002724:	21e0      	movs	r1, #224	; 0xe0
 8002726:	0089      	lsls	r1, r1, #2
 8002728:	468c      	mov	ip, r1
 800272a:	076d      	lsls	r5, r5, #29
 800272c:	0b12      	lsrs	r2, r2, #12
 800272e:	4463      	add	r3, ip
 8002730:	051b      	lsls	r3, r3, #20
 8002732:	4313      	orrs	r3, r2
 8002734:	07e4      	lsls	r4, r4, #31
 8002736:	4323      	orrs	r3, r4
 8002738:	0028      	movs	r0, r5
 800273a:	0019      	movs	r1, r3
 800273c:	bd70      	pop	{r4, r5, r6, pc}
 800273e:	2b00      	cmp	r3, #0
 8002740:	d114      	bne.n	800276c <__aeabi_f2d+0x5c>
 8002742:	2d00      	cmp	r5, #0
 8002744:	d01b      	beq.n	800277e <__aeabi_f2d+0x6e>
 8002746:	0028      	movs	r0, r5
 8002748:	f000 f8b0 	bl	80028ac <__clzsi2>
 800274c:	280a      	cmp	r0, #10
 800274e:	dc1c      	bgt.n	800278a <__aeabi_f2d+0x7a>
 8002750:	230b      	movs	r3, #11
 8002752:	002a      	movs	r2, r5
 8002754:	1a1b      	subs	r3, r3, r0
 8002756:	40da      	lsrs	r2, r3
 8002758:	0003      	movs	r3, r0
 800275a:	3315      	adds	r3, #21
 800275c:	409d      	lsls	r5, r3
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <__aeabi_f2d+0x88>)
 8002760:	0312      	lsls	r2, r2, #12
 8002762:	1a1b      	subs	r3, r3, r0
 8002764:	055b      	lsls	r3, r3, #21
 8002766:	0b12      	lsrs	r2, r2, #12
 8002768:	0d5b      	lsrs	r3, r3, #21
 800276a:	e7e1      	b.n	8002730 <__aeabi_f2d+0x20>
 800276c:	2d00      	cmp	r5, #0
 800276e:	d009      	beq.n	8002784 <__aeabi_f2d+0x74>
 8002770:	0b13      	lsrs	r3, r2, #12
 8002772:	2280      	movs	r2, #128	; 0x80
 8002774:	0312      	lsls	r2, r2, #12
 8002776:	431a      	orrs	r2, r3
 8002778:	076d      	lsls	r5, r5, #29
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <__aeabi_f2d+0x8c>)
 800277c:	e7d8      	b.n	8002730 <__aeabi_f2d+0x20>
 800277e:	2300      	movs	r3, #0
 8002780:	2200      	movs	r2, #0
 8002782:	e7d5      	b.n	8002730 <__aeabi_f2d+0x20>
 8002784:	2200      	movs	r2, #0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <__aeabi_f2d+0x8c>)
 8002788:	e7d2      	b.n	8002730 <__aeabi_f2d+0x20>
 800278a:	0003      	movs	r3, r0
 800278c:	002a      	movs	r2, r5
 800278e:	3b0b      	subs	r3, #11
 8002790:	409a      	lsls	r2, r3
 8002792:	2500      	movs	r5, #0
 8002794:	e7e3      	b.n	800275e <__aeabi_f2d+0x4e>
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	00000389 	.word	0x00000389
 800279c:	000007ff 	.word	0x000007ff

080027a0 <__aeabi_d2f>:
 80027a0:	0002      	movs	r2, r0
 80027a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a4:	004b      	lsls	r3, r1, #1
 80027a6:	030d      	lsls	r5, r1, #12
 80027a8:	0f40      	lsrs	r0, r0, #29
 80027aa:	0d5b      	lsrs	r3, r3, #21
 80027ac:	0fcc      	lsrs	r4, r1, #31
 80027ae:	0a6d      	lsrs	r5, r5, #9
 80027b0:	493a      	ldr	r1, [pc, #232]	; (800289c <__aeabi_d2f+0xfc>)
 80027b2:	4305      	orrs	r5, r0
 80027b4:	1c58      	adds	r0, r3, #1
 80027b6:	00d7      	lsls	r7, r2, #3
 80027b8:	4208      	tst	r0, r1
 80027ba:	d00a      	beq.n	80027d2 <__aeabi_d2f+0x32>
 80027bc:	4938      	ldr	r1, [pc, #224]	; (80028a0 <__aeabi_d2f+0x100>)
 80027be:	1859      	adds	r1, r3, r1
 80027c0:	29fe      	cmp	r1, #254	; 0xfe
 80027c2:	dd16      	ble.n	80027f2 <__aeabi_d2f+0x52>
 80027c4:	20ff      	movs	r0, #255	; 0xff
 80027c6:	2200      	movs	r2, #0
 80027c8:	05c0      	lsls	r0, r0, #23
 80027ca:	4310      	orrs	r0, r2
 80027cc:	07e4      	lsls	r4, r4, #31
 80027ce:	4320      	orrs	r0, r4
 80027d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <__aeabi_d2f+0x44>
 80027d6:	433d      	orrs	r5, r7
 80027d8:	d026      	beq.n	8002828 <__aeabi_d2f+0x88>
 80027da:	2205      	movs	r2, #5
 80027dc:	0192      	lsls	r2, r2, #6
 80027de:	0a52      	lsrs	r2, r2, #9
 80027e0:	b2d8      	uxtb	r0, r3
 80027e2:	e7f1      	b.n	80027c8 <__aeabi_d2f+0x28>
 80027e4:	432f      	orrs	r7, r5
 80027e6:	d0ed      	beq.n	80027c4 <__aeabi_d2f+0x24>
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	03d2      	lsls	r2, r2, #15
 80027ec:	20ff      	movs	r0, #255	; 0xff
 80027ee:	432a      	orrs	r2, r5
 80027f0:	e7ea      	b.n	80027c8 <__aeabi_d2f+0x28>
 80027f2:	2900      	cmp	r1, #0
 80027f4:	dd1b      	ble.n	800282e <__aeabi_d2f+0x8e>
 80027f6:	0192      	lsls	r2, r2, #6
 80027f8:	1e50      	subs	r0, r2, #1
 80027fa:	4182      	sbcs	r2, r0
 80027fc:	00ed      	lsls	r5, r5, #3
 80027fe:	0f7f      	lsrs	r7, r7, #29
 8002800:	432a      	orrs	r2, r5
 8002802:	433a      	orrs	r2, r7
 8002804:	0753      	lsls	r3, r2, #29
 8002806:	d047      	beq.n	8002898 <__aeabi_d2f+0xf8>
 8002808:	230f      	movs	r3, #15
 800280a:	4013      	ands	r3, r2
 800280c:	2b04      	cmp	r3, #4
 800280e:	d000      	beq.n	8002812 <__aeabi_d2f+0x72>
 8002810:	3204      	adds	r2, #4
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	04db      	lsls	r3, r3, #19
 8002816:	4013      	ands	r3, r2
 8002818:	d03e      	beq.n	8002898 <__aeabi_d2f+0xf8>
 800281a:	1c48      	adds	r0, r1, #1
 800281c:	29fe      	cmp	r1, #254	; 0xfe
 800281e:	d0d1      	beq.n	80027c4 <__aeabi_d2f+0x24>
 8002820:	0192      	lsls	r2, r2, #6
 8002822:	0a52      	lsrs	r2, r2, #9
 8002824:	b2c0      	uxtb	r0, r0
 8002826:	e7cf      	b.n	80027c8 <__aeabi_d2f+0x28>
 8002828:	2000      	movs	r0, #0
 800282a:	2200      	movs	r2, #0
 800282c:	e7cc      	b.n	80027c8 <__aeabi_d2f+0x28>
 800282e:	000a      	movs	r2, r1
 8002830:	3217      	adds	r2, #23
 8002832:	db2f      	blt.n	8002894 <__aeabi_d2f+0xf4>
 8002834:	2680      	movs	r6, #128	; 0x80
 8002836:	0436      	lsls	r6, r6, #16
 8002838:	432e      	orrs	r6, r5
 800283a:	251e      	movs	r5, #30
 800283c:	1a6d      	subs	r5, r5, r1
 800283e:	2d1f      	cmp	r5, #31
 8002840:	dd11      	ble.n	8002866 <__aeabi_d2f+0xc6>
 8002842:	2202      	movs	r2, #2
 8002844:	4252      	negs	r2, r2
 8002846:	1a52      	subs	r2, r2, r1
 8002848:	0031      	movs	r1, r6
 800284a:	40d1      	lsrs	r1, r2
 800284c:	2d20      	cmp	r5, #32
 800284e:	d004      	beq.n	800285a <__aeabi_d2f+0xba>
 8002850:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <__aeabi_d2f+0x104>)
 8002852:	4694      	mov	ip, r2
 8002854:	4463      	add	r3, ip
 8002856:	409e      	lsls	r6, r3
 8002858:	4337      	orrs	r7, r6
 800285a:	003a      	movs	r2, r7
 800285c:	1e53      	subs	r3, r2, #1
 800285e:	419a      	sbcs	r2, r3
 8002860:	430a      	orrs	r2, r1
 8002862:	2100      	movs	r1, #0
 8002864:	e7ce      	b.n	8002804 <__aeabi_d2f+0x64>
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <__aeabi_d2f+0x108>)
 8002868:	0038      	movs	r0, r7
 800286a:	4694      	mov	ip, r2
 800286c:	4463      	add	r3, ip
 800286e:	4098      	lsls	r0, r3
 8002870:	003a      	movs	r2, r7
 8002872:	1e41      	subs	r1, r0, #1
 8002874:	4188      	sbcs	r0, r1
 8002876:	409e      	lsls	r6, r3
 8002878:	40ea      	lsrs	r2, r5
 800287a:	4330      	orrs	r0, r6
 800287c:	4302      	orrs	r2, r0
 800287e:	2100      	movs	r1, #0
 8002880:	0753      	lsls	r3, r2, #29
 8002882:	d1c1      	bne.n	8002808 <__aeabi_d2f+0x68>
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	0013      	movs	r3, r2
 8002888:	04c9      	lsls	r1, r1, #19
 800288a:	2001      	movs	r0, #1
 800288c:	400b      	ands	r3, r1
 800288e:	420a      	tst	r2, r1
 8002890:	d1c6      	bne.n	8002820 <__aeabi_d2f+0x80>
 8002892:	e7a3      	b.n	80027dc <__aeabi_d2f+0x3c>
 8002894:	2300      	movs	r3, #0
 8002896:	e7a0      	b.n	80027da <__aeabi_d2f+0x3a>
 8002898:	000b      	movs	r3, r1
 800289a:	e79f      	b.n	80027dc <__aeabi_d2f+0x3c>
 800289c:	000007fe 	.word	0x000007fe
 80028a0:	fffffc80 	.word	0xfffffc80
 80028a4:	fffffca2 	.word	0xfffffca2
 80028a8:	fffffc82 	.word	0xfffffc82

080028ac <__clzsi2>:
 80028ac:	211c      	movs	r1, #28
 80028ae:	2301      	movs	r3, #1
 80028b0:	041b      	lsls	r3, r3, #16
 80028b2:	4298      	cmp	r0, r3
 80028b4:	d301      	bcc.n	80028ba <__clzsi2+0xe>
 80028b6:	0c00      	lsrs	r0, r0, #16
 80028b8:	3910      	subs	r1, #16
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	4298      	cmp	r0, r3
 80028be:	d301      	bcc.n	80028c4 <__clzsi2+0x18>
 80028c0:	0a00      	lsrs	r0, r0, #8
 80028c2:	3908      	subs	r1, #8
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	4298      	cmp	r0, r3
 80028c8:	d301      	bcc.n	80028ce <__clzsi2+0x22>
 80028ca:	0900      	lsrs	r0, r0, #4
 80028cc:	3904      	subs	r1, #4
 80028ce:	a202      	add	r2, pc, #8	; (adr r2, 80028d8 <__clzsi2+0x2c>)
 80028d0:	5c10      	ldrb	r0, [r2, r0]
 80028d2:	1840      	adds	r0, r0, r1
 80028d4:	4770      	bx	lr
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	02020304 	.word	0x02020304
 80028dc:	01010101 	.word	0x01010101
	...

080028e8 <__clzdi2>:
 80028e8:	b510      	push	{r4, lr}
 80028ea:	2900      	cmp	r1, #0
 80028ec:	d103      	bne.n	80028f6 <__clzdi2+0xe>
 80028ee:	f7ff ffdd 	bl	80028ac <__clzsi2>
 80028f2:	3020      	adds	r0, #32
 80028f4:	e002      	b.n	80028fc <__clzdi2+0x14>
 80028f6:	0008      	movs	r0, r1
 80028f8:	f7ff ffd8 	bl	80028ac <__clzsi2>
 80028fc:	bd10      	pop	{r4, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)

08002900 <SELECT>:
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
 8002904:	23a0      	movs	r3, #160	; 0xa0
 8002906:	05db      	lsls	r3, r3, #23
 8002908:	2200      	movs	r2, #0
 800290a:	2110      	movs	r1, #16
 800290c:	0018      	movs	r0, r3
 800290e:	f002 f80a 	bl	8004926 <HAL_GPIO_WritePin>
 8002912:	2001      	movs	r0, #1
 8002914:	f001 fbb8 	bl	8004088 <HAL_Delay>
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <DESELECT>:
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
 8002922:	23a0      	movs	r3, #160	; 0xa0
 8002924:	05db      	lsls	r3, r3, #23
 8002926:	2201      	movs	r2, #1
 8002928:	2110      	movs	r1, #16
 800292a:	0018      	movs	r0, r3
 800292c:	f001 fffb 	bl	8004926 <HAL_GPIO_WritePin>
 8002930:	2001      	movs	r0, #1
 8002932:	f001 fba9 	bl	8004088 <HAL_Delay>
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <SPI_TxByte>:
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	0002      	movs	r2, r0
 8002944:	1dfb      	adds	r3, r7, #7
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <SPI_TxByte+0x30>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2202      	movs	r2, #2
 8002952:	4013      	ands	r3, r2
 8002954:	2b02      	cmp	r3, #2
 8002956:	d1f8      	bne.n	800294a <SPI_TxByte+0xe>
 8002958:	1df9      	adds	r1, r7, #7
 800295a:	4804      	ldr	r0, [pc, #16]	; (800296c <SPI_TxByte+0x30>)
 800295c:	2364      	movs	r3, #100	; 0x64
 800295e:	2201      	movs	r2, #1
 8002960:	f002 fdf1 	bl	8005546 <HAL_SPI_Transmit>
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000026c 	.word	0x2000026c

08002970 <SPI_TxBuffer>:
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	000a      	movs	r2, r1
 800297a:	1cbb      	adds	r3, r7, #2
 800297c:	801a      	strh	r2, [r3, #0]
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <SPI_TxBuffer+0x34>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2202      	movs	r2, #2
 8002988:	4013      	ands	r3, r2
 800298a:	2b02      	cmp	r3, #2
 800298c:	d1f8      	bne.n	8002980 <SPI_TxBuffer+0x10>
 800298e:	1cbb      	adds	r3, r7, #2
 8002990:	881a      	ldrh	r2, [r3, #0]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4803      	ldr	r0, [pc, #12]	; (80029a4 <SPI_TxBuffer+0x34>)
 8002996:	2364      	movs	r3, #100	; 0x64
 8002998:	f002 fdd5 	bl	8005546 <HAL_SPI_Transmit>
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	b002      	add	sp, #8
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	2000026c 	.word	0x2000026c

080029a8 <SPI_RxByte>:
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	1dfb      	adds	r3, r7, #7
 80029b0:	22ff      	movs	r2, #255	; 0xff
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <SPI_RxByte+0x38>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2202      	movs	r2, #2
 80029be:	4013      	ands	r3, r2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d1f8      	bne.n	80029b6 <SPI_RxByte+0xe>
 80029c4:	1dba      	adds	r2, r7, #6
 80029c6:	1df9      	adds	r1, r7, #7
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <SPI_RxByte+0x38>)
 80029ca:	2364      	movs	r3, #100	; 0x64
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2301      	movs	r3, #1
 80029d0:	f002 ff16 	bl	8005800 <HAL_SPI_TransmitReceive>
 80029d4:	1dbb      	adds	r3, r7, #6
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	2000026c 	.word	0x2000026c

080029e4 <SPI_RxBytePtr>:
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	f7ff ffdc 	bl	80029a8 <SPI_RxByte>
 80029f0:	0003      	movs	r3, r0
 80029f2:	001a      	movs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <SD_ReadyWait>:
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <SD_ReadyWait+0x34>)
 8002a08:	22fa      	movs	r2, #250	; 0xfa
 8002a0a:	0052      	lsls	r2, r2, #1
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	1dfc      	adds	r4, r7, #7
 8002a10:	f7ff ffca 	bl	80029a8 <SPI_RxByte>
 8002a14:	0003      	movs	r3, r0
 8002a16:	7023      	strb	r3, [r4, #0]
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2bff      	cmp	r3, #255	; 0xff
 8002a1e:	d003      	beq.n	8002a28 <SD_ReadyWait+0x28>
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <SD_ReadyWait+0x34>)
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f2      	bne.n	8002a0e <SD_ReadyWait+0xe>
 8002a28:	1dfb      	adds	r3, r7, #7
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b003      	add	sp, #12
 8002a32:	bd90      	pop	{r4, r7, pc}
 8002a34:	2000020a 	.word	0x2000020a

08002a38 <SD_PowerOn>:
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <SD_PowerOn+0x88>)
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	f7ff ff6c 	bl	800291e <DESELECT>
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	e005      	b.n	8002a58 <SD_PowerOn+0x20>
 8002a4c:	20ff      	movs	r0, #255	; 0xff
 8002a4e:	f7ff ff75 	bl	800293c <SPI_TxByte>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	3301      	adds	r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	ddf6      	ble.n	8002a4c <SD_PowerOn+0x14>
 8002a5e:	f7ff ff4f 	bl	8002900 <SELECT>
 8002a62:	003b      	movs	r3, r7
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	003b      	movs	r3, r7
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	705a      	strb	r2, [r3, #1]
 8002a6e:	003b      	movs	r3, r7
 8002a70:	2200      	movs	r2, #0
 8002a72:	709a      	strb	r2, [r3, #2]
 8002a74:	003b      	movs	r3, r7
 8002a76:	2200      	movs	r2, #0
 8002a78:	70da      	strb	r2, [r3, #3]
 8002a7a:	003b      	movs	r3, r7
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	711a      	strb	r2, [r3, #4]
 8002a80:	003b      	movs	r3, r7
 8002a82:	2295      	movs	r2, #149	; 0x95
 8002a84:	715a      	strb	r2, [r3, #5]
 8002a86:	003b      	movs	r3, r7
 8002a88:	2106      	movs	r1, #6
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f7ff ff70 	bl	8002970 <SPI_TxBuffer>
 8002a90:	e002      	b.n	8002a98 <SD_PowerOn+0x60>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	f7ff ff86 	bl	80029a8 <SPI_RxByte>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d002      	beq.n	8002aa8 <SD_PowerOn+0x70>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f4      	bne.n	8002a92 <SD_PowerOn+0x5a>
 8002aa8:	f7ff ff39 	bl	800291e <DESELECT>
 8002aac:	20ff      	movs	r0, #255	; 0xff
 8002aae:	f7ff ff45 	bl	800293c <SPI_TxByte>
 8002ab2:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <SD_PowerOn+0x8c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b004      	add	sp, #16
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	00001fff 	.word	0x00001fff
 8002ac4:	2000020d 	.word	0x2000020d

08002ac8 <SD_PowerOff>:
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <SD_PowerOff+0x10>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	2000020d 	.word	0x2000020d

08002adc <SD_CheckPower>:
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4b02      	ldr	r3, [pc, #8]	; (8002aec <SD_CheckPower+0x10>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	2000020d 	.word	0x2000020d

08002af0 <SD_RxDataBlock>:
 8002af0:	b5b0      	push	{r4, r5, r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <SD_RxDataBlock+0x64>)
 8002afc:	22c8      	movs	r2, #200	; 0xc8
 8002afe:	801a      	strh	r2, [r3, #0]
 8002b00:	250f      	movs	r5, #15
 8002b02:	197c      	adds	r4, r7, r5
 8002b04:	f7ff ff50 	bl	80029a8 <SPI_RxByte>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	7023      	strb	r3, [r4, #0]
 8002b0c:	197b      	adds	r3, r7, r5
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2bff      	cmp	r3, #255	; 0xff
 8002b12:	d103      	bne.n	8002b1c <SD_RxDataBlock+0x2c>
 8002b14:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <SD_RxDataBlock+0x64>)
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f1      	bne.n	8002b00 <SD_RxDataBlock+0x10>
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2bfe      	cmp	r3, #254	; 0xfe
 8002b24:	d001      	beq.n	8002b2a <SD_RxDataBlock+0x3a>
 8002b26:	2300      	movs	r3, #0
 8002b28:	e00f      	b.n	8002b4a <SD_RxDataBlock+0x5a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7ff ff57 	bl	80029e4 <SPI_RxBytePtr>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	603a      	str	r2, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f4      	bne.n	8002b2a <SD_RxDataBlock+0x3a>
 8002b40:	f7ff ff32 	bl	80029a8 <SPI_RxByte>
 8002b44:	f7ff ff30 	bl	80029a8 <SPI_RxByte>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b004      	add	sp, #16
 8002b50:	bdb0      	pop	{r4, r5, r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	20000208 	.word	0x20000208

08002b58 <SD_TxDataBlock>:
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	000a      	movs	r2, r1
 8002b62:	1cfb      	adds	r3, r7, #3
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	230e      	movs	r3, #14
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	f7ff ff47 	bl	8002a00 <SD_ReadyWait>
 8002b72:	0003      	movs	r3, r0
 8002b74:	2bff      	cmp	r3, #255	; 0xff
 8002b76:	d001      	beq.n	8002b7c <SD_TxDataBlock+0x24>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e03c      	b.n	8002bf6 <SD_TxDataBlock+0x9e>
 8002b7c:	1cfb      	adds	r3, r7, #3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff fedb 	bl	800293c <SPI_TxByte>
 8002b86:	1cfb      	adds	r3, r7, #3
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2bfd      	cmp	r3, #253	; 0xfd
 8002b8c:	d029      	beq.n	8002be2 <SD_TxDataBlock+0x8a>
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	009a      	lsls	r2, r3, #2
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0011      	movs	r1, r2
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7ff feea 	bl	8002970 <SPI_TxBuffer>
 8002b9c:	f7ff ff04 	bl	80029a8 <SPI_RxByte>
 8002ba0:	f7ff ff02 	bl	80029a8 <SPI_RxByte>
 8002ba4:	e011      	b.n	8002bca <SD_TxDataBlock+0x72>
 8002ba6:	250f      	movs	r5, #15
 8002ba8:	197c      	adds	r4, r7, r5
 8002baa:	f7ff fefd 	bl	80029a8 <SPI_RxByte>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	7023      	strb	r3, [r4, #0]
 8002bb2:	197b      	adds	r3, r7, r5
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	221f      	movs	r2, #31
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d00b      	beq.n	8002bd6 <SD_TxDataBlock+0x7e>
 8002bbe:	210e      	movs	r1, #14
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	781a      	ldrb	r2, [r3, #0]
 8002bc4:	187b      	adds	r3, r7, r1
 8002bc6:	3201      	adds	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	230e      	movs	r3, #14
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b40      	cmp	r3, #64	; 0x40
 8002bd2:	d9e8      	bls.n	8002ba6 <SD_TxDataBlock+0x4e>
 8002bd4:	e000      	b.n	8002bd8 <SD_TxDataBlock+0x80>
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	46c0      	nop			; (mov r8, r8)
 8002bda:	f7ff fee5 	bl	80029a8 <SPI_RxByte>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d0fb      	beq.n	8002bda <SD_TxDataBlock+0x82>
 8002be2:	230f      	movs	r3, #15
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	221f      	movs	r2, #31
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d101      	bne.n	8002bf4 <SD_TxDataBlock+0x9c>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <SD_TxDataBlock+0x9e>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b004      	add	sp, #16
 8002bfc:	bdb0      	pop	{r4, r5, r7, pc}

08002bfe <SD_SendCmd>:
 8002bfe:	b5b0      	push	{r4, r5, r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	0002      	movs	r2, r0
 8002c06:	6039      	str	r1, [r7, #0]
 8002c08:	1dfb      	adds	r3, r7, #7
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	f7ff fef8 	bl	8002a00 <SD_ReadyWait>
 8002c10:	0003      	movs	r3, r0
 8002c12:	2bff      	cmp	r3, #255	; 0xff
 8002c14:	d001      	beq.n	8002c1a <SD_SendCmd+0x1c>
 8002c16:	23ff      	movs	r3, #255	; 0xff
 8002c18:	e059      	b.n	8002cce <SD_SendCmd+0xd0>
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff fe8c 	bl	800293c <SPI_TxByte>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	0e1b      	lsrs	r3, r3, #24
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7ff fe86 	bl	800293c <SPI_TxByte>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	0c1b      	lsrs	r3, r3, #16
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7ff fe80 	bl	800293c <SPI_TxByte>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff fe7a 	bl	800293c <SPI_TxByte>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff fe75 	bl	800293c <SPI_TxByte>
 8002c52:	1dfb      	adds	r3, r7, #7
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b40      	cmp	r3, #64	; 0x40
 8002c58:	d104      	bne.n	8002c64 <SD_SendCmd+0x66>
 8002c5a:	230f      	movs	r3, #15
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2295      	movs	r2, #149	; 0x95
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e00c      	b.n	8002c7e <SD_SendCmd+0x80>
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b48      	cmp	r3, #72	; 0x48
 8002c6a:	d104      	bne.n	8002c76 <SD_SendCmd+0x78>
 8002c6c:	230f      	movs	r3, #15
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2287      	movs	r2, #135	; 0x87
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e003      	b.n	8002c7e <SD_SendCmd+0x80>
 8002c76:	230f      	movs	r3, #15
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	230f      	movs	r3, #15
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff fe59 	bl	800293c <SPI_TxByte>
 8002c8a:	1dfb      	adds	r3, r7, #7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b4c      	cmp	r3, #76	; 0x4c
 8002c90:	d101      	bne.n	8002c96 <SD_SendCmd+0x98>
 8002c92:	f7ff fe89 	bl	80029a8 <SPI_RxByte>
 8002c96:	230e      	movs	r3, #14
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	220a      	movs	r2, #10
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	250d      	movs	r5, #13
 8002ca0:	197c      	adds	r4, r7, r5
 8002ca2:	f7ff fe81 	bl	80029a8 <SPI_RxByte>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	7023      	strb	r3, [r4, #0]
 8002caa:	197b      	adds	r3, r7, r5
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da09      	bge.n	8002cc8 <SD_SendCmd+0xca>
 8002cb4:	210e      	movs	r1, #14
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	187a      	adds	r2, r7, r1
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	3a01      	subs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1ea      	bne.n	8002c9e <SD_SendCmd+0xa0>
 8002cc8:	230d      	movs	r3, #13
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b004      	add	sp, #16
 8002cd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002cd8 <SD_disk_initialize>:
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	0002      	movs	r2, r0
 8002ce0:	1dfb      	adds	r3, r7, #7
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	1dfb      	adds	r3, r7, #7
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <SD_disk_initialize+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0f2      	b.n	8002ed6 <SD_disk_initialize+0x1fe>
 8002cf0:	4b7b      	ldr	r3, [pc, #492]	; (8002ee0 <SD_disk_initialize+0x208>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <SD_disk_initialize+0x2e>
 8002cfe:	4b78      	ldr	r3, [pc, #480]	; (8002ee0 <SD_disk_initialize+0x208>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e0e7      	b.n	8002ed6 <SD_disk_initialize+0x1fe>
 8002d06:	f7ff fe97 	bl	8002a38 <SD_PowerOn>
 8002d0a:	f7ff fdf9 	bl	8002900 <SELECT>
 8002d0e:	230e      	movs	r3, #14
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	2100      	movs	r1, #0
 8002d18:	2040      	movs	r0, #64	; 0x40
 8002d1a:	f7ff ff70 	bl	8002bfe <SD_SendCmd>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d000      	beq.n	8002d26 <SD_disk_initialize+0x4e>
 8002d24:	e0bc      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
 8002d26:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <SD_disk_initialize+0x20c>)
 8002d28:	22fa      	movs	r2, #250	; 0xfa
 8002d2a:	0092      	lsls	r2, r2, #2
 8002d2c:	801a      	strh	r2, [r3, #0]
 8002d2e:	23d5      	movs	r3, #213	; 0xd5
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	0019      	movs	r1, r3
 8002d34:	2048      	movs	r0, #72	; 0x48
 8002d36:	f7ff ff62 	bl	8002bfe <SD_SendCmd>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d000      	beq.n	8002d42 <SD_disk_initialize+0x6a>
 8002d40:	e06b      	b.n	8002e1a <SD_disk_initialize+0x142>
 8002d42:	230f      	movs	r3, #15
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e00e      	b.n	8002d6a <SD_disk_initialize+0x92>
 8002d4c:	250f      	movs	r5, #15
 8002d4e:	197b      	adds	r3, r7, r5
 8002d50:	781c      	ldrb	r4, [r3, #0]
 8002d52:	f7ff fe29 	bl	80029a8 <SPI_RxByte>
 8002d56:	0003      	movs	r3, r0
 8002d58:	001a      	movs	r2, r3
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	551a      	strb	r2, [r3, r4]
 8002d60:	197b      	adds	r3, r7, r5
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	197b      	adds	r3, r7, r5
 8002d66:	3201      	adds	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
 8002d6a:	230f      	movs	r3, #15
 8002d6c:	18fb      	adds	r3, r7, r3
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d9eb      	bls.n	8002d4c <SD_disk_initialize+0x74>
 8002d74:	2208      	movs	r2, #8
 8002d76:	18bb      	adds	r3, r7, r2
 8002d78:	789b      	ldrb	r3, [r3, #2]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d000      	beq.n	8002d80 <SD_disk_initialize+0xa8>
 8002d7e:	e08f      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
 8002d80:	18bb      	adds	r3, r7, r2
 8002d82:	78db      	ldrb	r3, [r3, #3]
 8002d84:	2baa      	cmp	r3, #170	; 0xaa
 8002d86:	d000      	beq.n	8002d8a <SD_disk_initialize+0xb2>
 8002d88:	e08a      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	2077      	movs	r0, #119	; 0x77
 8002d8e:	f7ff ff36 	bl	8002bfe <SD_SendCmd>
 8002d92:	0003      	movs	r3, r0
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d807      	bhi.n	8002da8 <SD_disk_initialize+0xd0>
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	05db      	lsls	r3, r3, #23
 8002d9c:	0019      	movs	r1, r3
 8002d9e:	2069      	movs	r0, #105	; 0x69
 8002da0:	f7ff ff2d 	bl	8002bfe <SD_SendCmd>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d004      	beq.n	8002db2 <SD_disk_initialize+0xda>
 8002da8:	4b4e      	ldr	r3, [pc, #312]	; (8002ee4 <SD_disk_initialize+0x20c>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ec      	bne.n	8002d8a <SD_disk_initialize+0xb2>
 8002db0:	e000      	b.n	8002db4 <SD_disk_initialize+0xdc>
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <SD_disk_initialize+0x20c>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d100      	bne.n	8002dbe <SD_disk_initialize+0xe6>
 8002dbc:	e070      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	207a      	movs	r0, #122	; 0x7a
 8002dc2:	f7ff ff1c 	bl	8002bfe <SD_SendCmd>
 8002dc6:	1e03      	subs	r3, r0, #0
 8002dc8:	d000      	beq.n	8002dcc <SD_disk_initialize+0xf4>
 8002dca:	e069      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
 8002dcc:	230f      	movs	r3, #15
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e00e      	b.n	8002df4 <SD_disk_initialize+0x11c>
 8002dd6:	250f      	movs	r5, #15
 8002dd8:	197b      	adds	r3, r7, r5
 8002dda:	781c      	ldrb	r4, [r3, #0]
 8002ddc:	f7ff fde4 	bl	80029a8 <SPI_RxByte>
 8002de0:	0003      	movs	r3, r0
 8002de2:	001a      	movs	r2, r3
 8002de4:	2308      	movs	r3, #8
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	551a      	strb	r2, [r3, r4]
 8002dea:	197b      	adds	r3, r7, r5
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	197b      	adds	r3, r7, r5
 8002df0:	3201      	adds	r2, #1
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	230f      	movs	r3, #15
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d9eb      	bls.n	8002dd6 <SD_disk_initialize+0xfe>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	001a      	movs	r2, r3
 8002e06:	2340      	movs	r3, #64	; 0x40
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d001      	beq.n	8002e10 <SD_disk_initialize+0x138>
 8002e0c:	220c      	movs	r2, #12
 8002e0e:	e000      	b.n	8002e12 <SD_disk_initialize+0x13a>
 8002e10:	2204      	movs	r2, #4
 8002e12:	230e      	movs	r3, #14
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e042      	b.n	8002ea0 <SD_disk_initialize+0x1c8>
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	2077      	movs	r0, #119	; 0x77
 8002e1e:	f7ff feee 	bl	8002bfe <SD_SendCmd>
 8002e22:	0003      	movs	r3, r0
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d808      	bhi.n	8002e3a <SD_disk_initialize+0x162>
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2069      	movs	r0, #105	; 0x69
 8002e2c:	f7ff fee7 	bl	8002bfe <SD_SendCmd>
 8002e30:	0003      	movs	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d801      	bhi.n	8002e3a <SD_disk_initialize+0x162>
 8002e36:	2202      	movs	r2, #2
 8002e38:	e000      	b.n	8002e3c <SD_disk_initialize+0x164>
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	230e      	movs	r3, #14
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	230e      	movs	r3, #14
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d10d      	bne.n	8002e68 <SD_disk_initialize+0x190>
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	2077      	movs	r0, #119	; 0x77
 8002e50:	f7ff fed5 	bl	8002bfe <SD_SendCmd>
 8002e54:	0003      	movs	r3, r0
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d80c      	bhi.n	8002e74 <SD_disk_initialize+0x19c>
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2069      	movs	r0, #105	; 0x69
 8002e5e:	f7ff fece 	bl	8002bfe <SD_SendCmd>
 8002e62:	1e03      	subs	r3, r0, #0
 8002e64:	d106      	bne.n	8002e74 <SD_disk_initialize+0x19c>
 8002e66:	e00b      	b.n	8002e80 <SD_disk_initialize+0x1a8>
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2041      	movs	r0, #65	; 0x41
 8002e6c:	f7ff fec7 	bl	8002bfe <SD_SendCmd>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d004      	beq.n	8002e7e <SD_disk_initialize+0x1a6>
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <SD_disk_initialize+0x20c>)
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e2      	bne.n	8002e42 <SD_disk_initialize+0x16a>
 8002e7c:	e000      	b.n	8002e80 <SD_disk_initialize+0x1a8>
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <SD_disk_initialize+0x20c>)
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d007      	beq.n	8002e98 <SD_disk_initialize+0x1c0>
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	2050      	movs	r0, #80	; 0x50
 8002e90:	f7ff feb5 	bl	8002bfe <SD_SendCmd>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d003      	beq.n	8002ea0 <SD_disk_initialize+0x1c8>
 8002e98:	230e      	movs	r3, #14
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <SD_disk_initialize+0x210>)
 8002ea2:	240e      	movs	r4, #14
 8002ea4:	193a      	adds	r2, r7, r4
 8002ea6:	7812      	ldrb	r2, [r2, #0]
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	f7ff fd38 	bl	800291e <DESELECT>
 8002eae:	f7ff fd7b 	bl	80029a8 <SPI_RxByte>
 8002eb2:	193b      	adds	r3, r7, r4
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <SD_disk_initialize+0x1f4>
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <SD_disk_initialize+0x208>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <SD_disk_initialize+0x208>)
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e001      	b.n	8002ed0 <SD_disk_initialize+0x1f8>
 8002ecc:	f7ff fdfc 	bl	8002ac8 <SD_PowerOff>
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <SD_disk_initialize+0x208>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	20000208 	.word	0x20000208
 8002ee8:	2000020c 	.word	0x2000020c

08002eec <SD_disk_status>:
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	0002      	movs	r2, r0
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <SD_disk_status+0x18>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e002      	b.n	8002f0a <SD_disk_status+0x1e>
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <SD_disk_status+0x28>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b002      	add	sp, #8
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	20000000 	.word	0x20000000

08002f18 <SD_disk_read>:
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	210f      	movs	r1, #15
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	1c02      	adds	r2, r0, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <SD_disk_read+0x22>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <SD_disk_read+0x26>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e053      	b.n	8002fe6 <SD_disk_read+0xce>
 8002f3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <SD_disk_read+0xd8>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	001a      	movs	r2, r3
 8002f46:	2301      	movs	r3, #1
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d001      	beq.n	8002f50 <SD_disk_read+0x38>
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e04a      	b.n	8002fe6 <SD_disk_read+0xce>
 8002f50:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <SD_disk_read+0xdc>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	001a      	movs	r2, r3
 8002f56:	2304      	movs	r3, #4
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d102      	bne.n	8002f62 <SD_disk_read+0x4a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	025b      	lsls	r3, r3, #9
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	f7ff fccd 	bl	8002900 <SELECT>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d112      	bne.n	8002f92 <SD_disk_read+0x7a>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0019      	movs	r1, r3
 8002f70:	2051      	movs	r0, #81	; 0x51
 8002f72:	f7ff fe44 	bl	8002bfe <SD_SendCmd>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d12d      	bne.n	8002fd6 <SD_disk_read+0xbe>
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	009a      	lsls	r2, r3, #2
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0011      	movs	r1, r2
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff fdb4 	bl	8002af0 <SD_RxDataBlock>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d024      	beq.n	8002fd6 <SD_disk_read+0xbe>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	e021      	b.n	8002fd6 <SD_disk_read+0xbe>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0019      	movs	r1, r3
 8002f96:	2052      	movs	r0, #82	; 0x52
 8002f98:	f7ff fe31 	bl	8002bfe <SD_SendCmd>
 8002f9c:	1e03      	subs	r3, r0, #0
 8002f9e:	d11a      	bne.n	8002fd6 <SD_disk_read+0xbe>
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	009a      	lsls	r2, r3, #2
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	0011      	movs	r1, r2
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f7ff fda1 	bl	8002af0 <SD_RxDataBlock>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d00c      	beq.n	8002fcc <SD_disk_read+0xb4>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	0092      	lsls	r2, r2, #2
 8002fb8:	4694      	mov	ip, r2
 8002fba:	4463      	add	r3, ip
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1ea      	bne.n	8002fa0 <SD_disk_read+0x88>
 8002fca:	e000      	b.n	8002fce <SD_disk_read+0xb6>
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	2100      	movs	r1, #0
 8002fd0:	204c      	movs	r0, #76	; 0x4c
 8002fd2:	f7ff fe14 	bl	8002bfe <SD_SendCmd>
 8002fd6:	f7ff fca2 	bl	800291e <DESELECT>
 8002fda:	f7ff fce5 	bl	80029a8 <SPI_RxByte>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	1e5a      	subs	r2, r3, #1
 8002fe2:	4193      	sbcs	r3, r2
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b004      	add	sp, #16
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	2000020c 	.word	0x2000020c

08002ff8 <SD_disk_write>:
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	210f      	movs	r1, #15
 8003006:	187b      	adds	r3, r7, r1
 8003008:	1c02      	adds	r2, r0, #0
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	187b      	adds	r3, r7, r1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <SD_disk_write+0x22>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <SD_disk_write+0x26>
 800301a:	2304      	movs	r3, #4
 800301c:	e06b      	b.n	80030f6 <SD_disk_write+0xfe>
 800301e:	4b38      	ldr	r3, [pc, #224]	; (8003100 <SD_disk_write+0x108>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	001a      	movs	r2, r3
 8003026:	2301      	movs	r3, #1
 8003028:	4013      	ands	r3, r2
 800302a:	d001      	beq.n	8003030 <SD_disk_write+0x38>
 800302c:	2303      	movs	r3, #3
 800302e:	e062      	b.n	80030f6 <SD_disk_write+0xfe>
 8003030:	4b33      	ldr	r3, [pc, #204]	; (8003100 <SD_disk_write+0x108>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	001a      	movs	r2, r3
 8003038:	2304      	movs	r3, #4
 800303a:	4013      	ands	r3, r2
 800303c:	d001      	beq.n	8003042 <SD_disk_write+0x4a>
 800303e:	2302      	movs	r3, #2
 8003040:	e059      	b.n	80030f6 <SD_disk_write+0xfe>
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <SD_disk_write+0x10c>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	001a      	movs	r2, r3
 8003048:	2304      	movs	r3, #4
 800304a:	4013      	ands	r3, r2
 800304c:	d102      	bne.n	8003054 <SD_disk_write+0x5c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	025b      	lsls	r3, r3, #9
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	f7ff fc54 	bl	8002900 <SELECT>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d110      	bne.n	8003080 <SD_disk_write+0x88>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	0019      	movs	r1, r3
 8003062:	2058      	movs	r0, #88	; 0x58
 8003064:	f7ff fdcb 	bl	8002bfe <SD_SendCmd>
 8003068:	1e03      	subs	r3, r0, #0
 800306a:	d13c      	bne.n	80030e6 <SD_disk_write+0xee>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	21fe      	movs	r1, #254	; 0xfe
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff fd71 	bl	8002b58 <SD_TxDataBlock>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d035      	beq.n	80030e6 <SD_disk_write+0xee>
 800307a:	2300      	movs	r3, #0
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	e032      	b.n	80030e6 <SD_disk_write+0xee>
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <SD_disk_write+0x10c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	001a      	movs	r2, r3
 8003086:	2302      	movs	r3, #2
 8003088:	4013      	ands	r3, r2
 800308a:	d008      	beq.n	800309e <SD_disk_write+0xa6>
 800308c:	2100      	movs	r1, #0
 800308e:	2077      	movs	r0, #119	; 0x77
 8003090:	f7ff fdb5 	bl	8002bfe <SD_SendCmd>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	0019      	movs	r1, r3
 8003098:	2057      	movs	r0, #87	; 0x57
 800309a:	f7ff fdb0 	bl	8002bfe <SD_SendCmd>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	0019      	movs	r1, r3
 80030a2:	2059      	movs	r0, #89	; 0x59
 80030a4:	f7ff fdab 	bl	8002bfe <SD_SendCmd>
 80030a8:	1e03      	subs	r3, r0, #0
 80030aa:	d11c      	bne.n	80030e6 <SD_disk_write+0xee>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	21fc      	movs	r1, #252	; 0xfc
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff fd51 	bl	8002b58 <SD_TxDataBlock>
 80030b6:	1e03      	subs	r3, r0, #0
 80030b8:	d00c      	beq.n	80030d4 <SD_disk_write+0xdc>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	0092      	lsls	r2, r2, #2
 80030c0:	4694      	mov	ip, r2
 80030c2:	4463      	add	r3, ip
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ec      	bne.n	80030ac <SD_disk_write+0xb4>
 80030d2:	e000      	b.n	80030d6 <SD_disk_write+0xde>
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	21fd      	movs	r1, #253	; 0xfd
 80030d8:	2000      	movs	r0, #0
 80030da:	f7ff fd3d 	bl	8002b58 <SD_TxDataBlock>
 80030de:	1e03      	subs	r3, r0, #0
 80030e0:	d101      	bne.n	80030e6 <SD_disk_write+0xee>
 80030e2:	2301      	movs	r3, #1
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	f7ff fc1a 	bl	800291e <DESELECT>
 80030ea:	f7ff fc5d 	bl	80029a8 <SPI_RxByte>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	1e5a      	subs	r2, r3, #1
 80030f2:	4193      	sbcs	r3, r2
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	0018      	movs	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b004      	add	sp, #16
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	20000000 	.word	0x20000000
 8003104:	2000020c 	.word	0x2000020c

08003108 <SD_disk_ioctl>:
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b08b      	sub	sp, #44	; 0x2c
 800310c:	af00      	add	r7, sp, #0
 800310e:	603a      	str	r2, [r7, #0]
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	1c02      	adds	r2, r0, #0
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	1dbb      	adds	r3, r7, #6
 8003118:	1c0a      	adds	r2, r1, #0
 800311a:	701a      	strb	r2, [r3, #0]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <SD_disk_ioctl+0x24>
 8003128:	2304      	movs	r3, #4
 800312a:	e11b      	b.n	8003364 <SD_disk_ioctl+0x25c>
 800312c:	2327      	movs	r3, #39	; 0x27
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	1dbb      	adds	r3, r7, #6
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d127      	bne.n	800318c <SD_disk_ioctl+0x84>
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d013      	beq.n	800316c <SD_disk_ioctl+0x64>
 8003144:	dc1d      	bgt.n	8003182 <SD_disk_ioctl+0x7a>
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <SD_disk_ioctl+0x48>
 800314a:	2b01      	cmp	r3, #1
 800314c:	d007      	beq.n	800315e <SD_disk_ioctl+0x56>
 800314e:	e018      	b.n	8003182 <SD_disk_ioctl+0x7a>
 8003150:	f7ff fcba 	bl	8002ac8 <SD_PowerOff>
 8003154:	2327      	movs	r3, #39	; 0x27
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
 800315c:	e0ff      	b.n	800335e <SD_disk_ioctl+0x256>
 800315e:	f7ff fc6b 	bl	8002a38 <SD_PowerOn>
 8003162:	2327      	movs	r3, #39	; 0x27
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2200      	movs	r2, #0
 8003168:	701a      	strb	r2, [r3, #0]
 800316a:	e0f8      	b.n	800335e <SD_disk_ioctl+0x256>
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	1c5c      	adds	r4, r3, #1
 8003170:	f7ff fcb4 	bl	8002adc <SD_CheckPower>
 8003174:	0003      	movs	r3, r0
 8003176:	7023      	strb	r3, [r4, #0]
 8003178:	2327      	movs	r3, #39	; 0x27
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e0ed      	b.n	800335e <SD_disk_ioctl+0x256>
 8003182:	2327      	movs	r3, #39	; 0x27
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2204      	movs	r2, #4
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e0e8      	b.n	800335e <SD_disk_ioctl+0x256>
 800318c:	4b77      	ldr	r3, [pc, #476]	; (800336c <SD_disk_ioctl+0x264>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	001a      	movs	r2, r3
 8003194:	2301      	movs	r3, #1
 8003196:	4013      	ands	r3, r2
 8003198:	d001      	beq.n	800319e <SD_disk_ioctl+0x96>
 800319a:	2303      	movs	r3, #3
 800319c:	e0e2      	b.n	8003364 <SD_disk_ioctl+0x25c>
 800319e:	f7ff fbaf 	bl	8002900 <SELECT>
 80031a2:	1dbb      	adds	r3, r7, #6
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b0d      	cmp	r3, #13
 80031a8:	d900      	bls.n	80031ac <SD_disk_ioctl+0xa4>
 80031aa:	e0c8      	b.n	800333e <SD_disk_ioctl+0x236>
 80031ac:	009a      	lsls	r2, r3, #2
 80031ae:	4b70      	ldr	r3, [pc, #448]	; (8003370 <SD_disk_ioctl+0x268>)
 80031b0:	18d3      	adds	r3, r2, r3
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	469f      	mov	pc, r3
 80031b6:	2100      	movs	r1, #0
 80031b8:	2049      	movs	r0, #73	; 0x49
 80031ba:	f7ff fd20 	bl	8002bfe <SD_SendCmd>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d000      	beq.n	80031c4 <SD_disk_ioctl+0xbc>
 80031c2:	e0c1      	b.n	8003348 <SD_disk_ioctl+0x240>
 80031c4:	240c      	movs	r4, #12
 80031c6:	193b      	adds	r3, r7, r4
 80031c8:	2110      	movs	r1, #16
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff fc90 	bl	8002af0 <SD_RxDataBlock>
 80031d0:	1e03      	subs	r3, r0, #0
 80031d2:	d100      	bne.n	80031d6 <SD_disk_ioctl+0xce>
 80031d4:	e0b8      	b.n	8003348 <SD_disk_ioctl+0x240>
 80031d6:	0022      	movs	r2, r4
 80031d8:	18bb      	adds	r3, r7, r2
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d114      	bne.n	800320e <SD_disk_ioctl+0x106>
 80031e4:	0011      	movs	r1, r2
 80031e6:	18bb      	adds	r3, r7, r2
 80031e8:	7a5b      	ldrb	r3, [r3, #9]
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	7a1b      	ldrb	r3, [r3, #8]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	18d3      	adds	r3, r2, r3
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	211e      	movs	r1, #30
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	3201      	adds	r2, #1
 8003200:	801a      	strh	r2, [r3, #0]
 8003202:	187b      	adds	r3, r7, r1
 8003204:	881b      	ldrh	r3, [r3, #0]
 8003206:	029a      	lsls	r2, r3, #10
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	e03a      	b.n	8003284 <SD_disk_ioctl+0x17c>
 800320e:	200c      	movs	r0, #12
 8003210:	183b      	adds	r3, r7, r0
 8003212:	795b      	ldrb	r3, [r3, #5]
 8003214:	220f      	movs	r2, #15
 8003216:	4013      	ands	r3, r2
 8003218:	b2da      	uxtb	r2, r3
 800321a:	183b      	adds	r3, r7, r0
 800321c:	7a9b      	ldrb	r3, [r3, #10]
 800321e:	09db      	lsrs	r3, r3, #7
 8003220:	b2db      	uxtb	r3, r3
 8003222:	18d3      	adds	r3, r2, r3
 8003224:	b2da      	uxtb	r2, r3
 8003226:	183b      	adds	r3, r7, r0
 8003228:	7a5b      	ldrb	r3, [r3, #9]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2106      	movs	r1, #6
 8003230:	400b      	ands	r3, r1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	18d3      	adds	r3, r2, r3
 8003236:	b2da      	uxtb	r2, r3
 8003238:	2426      	movs	r4, #38	; 0x26
 800323a:	193b      	adds	r3, r7, r4
 800323c:	3202      	adds	r2, #2
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	183b      	adds	r3, r7, r0
 8003242:	7a1b      	ldrb	r3, [r3, #8]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	b2db      	uxtb	r3, r3
 8003248:	b29a      	uxth	r2, r3
 800324a:	183b      	adds	r3, r7, r0
 800324c:	79db      	ldrb	r3, [r3, #7]
 800324e:	b29b      	uxth	r3, r3
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	b29b      	uxth	r3, r3
 8003254:	18d3      	adds	r3, r2, r3
 8003256:	b29a      	uxth	r2, r3
 8003258:	183b      	adds	r3, r7, r0
 800325a:	799b      	ldrb	r3, [r3, #6]
 800325c:	029b      	lsls	r3, r3, #10
 800325e:	b299      	uxth	r1, r3
 8003260:	23c0      	movs	r3, #192	; 0xc0
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	400b      	ands	r3, r1
 8003266:	b29b      	uxth	r3, r3
 8003268:	18d3      	adds	r3, r2, r3
 800326a:	b29a      	uxth	r2, r3
 800326c:	211e      	movs	r1, #30
 800326e:	187b      	adds	r3, r7, r1
 8003270:	3201      	adds	r2, #1
 8003272:	801a      	strh	r2, [r3, #0]
 8003274:	187b      	adds	r3, r7, r1
 8003276:	881a      	ldrh	r2, [r3, #0]
 8003278:	193b      	adds	r3, r7, r4
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	3b09      	subs	r3, #9
 800327e:	409a      	lsls	r2, r3
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	2327      	movs	r3, #39	; 0x27
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e05c      	b.n	8003348 <SD_disk_ioctl+0x240>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	0092      	lsls	r2, r2, #2
 8003294:	801a      	strh	r2, [r3, #0]
 8003296:	2327      	movs	r3, #39	; 0x27
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e05a      	b.n	8003356 <SD_disk_ioctl+0x24e>
 80032a0:	f7ff fbae 	bl	8002a00 <SD_ReadyWait>
 80032a4:	0003      	movs	r3, r0
 80032a6:	2bff      	cmp	r3, #255	; 0xff
 80032a8:	d150      	bne.n	800334c <SD_disk_ioctl+0x244>
 80032aa:	2327      	movs	r3, #39	; 0x27
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e04b      	b.n	800334c <SD_disk_ioctl+0x244>
 80032b4:	2100      	movs	r1, #0
 80032b6:	2049      	movs	r0, #73	; 0x49
 80032b8:	f7ff fca1 	bl	8002bfe <SD_SendCmd>
 80032bc:	1e03      	subs	r3, r0, #0
 80032be:	d147      	bne.n	8003350 <SD_disk_ioctl+0x248>
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	2110      	movs	r1, #16
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff fc13 	bl	8002af0 <SD_RxDataBlock>
 80032ca:	1e03      	subs	r3, r0, #0
 80032cc:	d040      	beq.n	8003350 <SD_disk_ioctl+0x248>
 80032ce:	2327      	movs	r3, #39	; 0x27
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	2200      	movs	r2, #0
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	e03b      	b.n	8003350 <SD_disk_ioctl+0x248>
 80032d8:	2100      	movs	r1, #0
 80032da:	204a      	movs	r0, #74	; 0x4a
 80032dc:	f7ff fc8f 	bl	8002bfe <SD_SendCmd>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d137      	bne.n	8003354 <SD_disk_ioctl+0x24c>
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	2110      	movs	r1, #16
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fc01 	bl	8002af0 <SD_RxDataBlock>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d030      	beq.n	8003354 <SD_disk_ioctl+0x24c>
 80032f2:	2327      	movs	r3, #39	; 0x27
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e02b      	b.n	8003354 <SD_disk_ioctl+0x24c>
 80032fc:	2100      	movs	r1, #0
 80032fe:	207a      	movs	r0, #122	; 0x7a
 8003300:	f7ff fc7d 	bl	8002bfe <SD_SendCmd>
 8003304:	1e03      	subs	r3, r0, #0
 8003306:	d11a      	bne.n	800333e <SD_disk_ioctl+0x236>
 8003308:	2326      	movs	r3, #38	; 0x26
 800330a:	18fb      	adds	r3, r7, r3
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e00c      	b.n	800332c <SD_disk_ioctl+0x224>
 8003312:	6a3c      	ldr	r4, [r7, #32]
 8003314:	1c63      	adds	r3, r4, #1
 8003316:	623b      	str	r3, [r7, #32]
 8003318:	f7ff fb46 	bl	80029a8 <SPI_RxByte>
 800331c:	0003      	movs	r3, r0
 800331e:	7023      	strb	r3, [r4, #0]
 8003320:	2126      	movs	r1, #38	; 0x26
 8003322:	187b      	adds	r3, r7, r1
 8003324:	781a      	ldrb	r2, [r3, #0]
 8003326:	187b      	adds	r3, r7, r1
 8003328:	3201      	adds	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	2326      	movs	r3, #38	; 0x26
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d9ed      	bls.n	8003312 <SD_disk_ioctl+0x20a>
 8003336:	2327      	movs	r3, #39	; 0x27
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	2327      	movs	r3, #39	; 0x27
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	2204      	movs	r2, #4
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e006      	b.n	8003356 <SD_disk_ioctl+0x24e>
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	e004      	b.n	8003356 <SD_disk_ioctl+0x24e>
 800334c:	46c0      	nop			; (mov r8, r8)
 800334e:	e002      	b.n	8003356 <SD_disk_ioctl+0x24e>
 8003350:	46c0      	nop			; (mov r8, r8)
 8003352:	e000      	b.n	8003356 <SD_disk_ioctl+0x24e>
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	f7ff fae2 	bl	800291e <DESELECT>
 800335a:	f7ff fb25 	bl	80029a8 <SPI_RxByte>
 800335e:	2327      	movs	r3, #39	; 0x27
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b00b      	add	sp, #44	; 0x2c
 800336a:	bd90      	pop	{r4, r7, pc}
 800336c:	20000000 	.word	0x20000000
 8003370:	0800dd60 	.word	0x0800dd60

08003374 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800337a:	f000 fe15 	bl	8003fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800337e:	f000 f845 	bl	800340c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003382:	f000 f961 	bl	8003648 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003386:	f000 f927 	bl	80035d8 <MX_SPI1_Init>
  MX_FATFS_Init();
 800338a:	f002 fcd9 	bl	8005d40 <MX_FATFS_Init>
  MX_ADC_Init();
 800338e:	f000 f891 	bl	80034b4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  start_time_ms = HAL_GetTick();
 8003392:	f000 fe6f 	bl	8004074 <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <main+0x8c>)
 800339a:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 800339c:	23a0      	movs	r3, #160	; 0xa0
 800339e:	05db      	lsls	r3, r3, #23
 80033a0:	2101      	movs	r1, #1
 80033a2:	0018      	movs	r0, r3
 80033a4:	f001 faa2 	bl	80048ec <HAL_GPIO_ReadPin>
 80033a8:	0003      	movs	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d11f      	bne.n	80033ee <main+0x7a>
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_SET);
 80033ae:	23a0      	movs	r3, #160	; 0xa0
 80033b0:	05db      	lsls	r3, r3, #23
 80033b2:	2201      	movs	r2, #1
 80033b4:	2102      	movs	r1, #2
 80033b6:	0018      	movs	r0, r3
 80033b8:	f001 fab5 	bl	8004926 <HAL_GPIO_WritePin>
	 			  uint32_t current_time_ms = HAL_GetTick();
 80033bc:	f000 fe5a 	bl	8004074 <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	607b      	str	r3, [r7, #4]
	 			  seconds_since_start = (current_time_ms - start_time_ms) / 1000.0f;
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <main+0x8c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	0018      	movs	r0, r3
 80033ce:	f7fd fb0f 	bl	80009f0 <__aeabi_ui2f>
 80033d2:	1c03      	adds	r3, r0, #0
 80033d4:	490b      	ldr	r1, [pc, #44]	; (8003404 <main+0x90>)
 80033d6:	1c18      	adds	r0, r3, #0
 80033d8:	f7fd f9f0 	bl	80007bc <__aeabi_fdiv>
 80033dc:	1c03      	adds	r3, r0, #0
 80033de:	1c1a      	adds	r2, r3, #0
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <main+0x94>)
 80033e2:	601a      	str	r2, [r3, #0]
	 			  readNumber();
 80033e4:	f000 fa5e 	bl	80038a4 <readNumber>
	 			  process_SD_card();
 80033e8:	f000 f9bc 	bl	8003764 <process_SD_card>
 80033ec:	e7d6      	b.n	800339c <main+0x28>
	 		  }
	 		  else
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 80033ee:	23a0      	movs	r3, #160	; 0xa0
 80033f0:	05db      	lsls	r3, r3, #23
 80033f2:	2200      	movs	r2, #0
 80033f4:	2102      	movs	r1, #2
 80033f6:	0018      	movs	r0, r3
 80033f8:	f001 fa95 	bl	8004926 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 80033fc:	e7ce      	b.n	800339c <main+0x28>
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	200002d8 	.word	0x200002d8
 8003404:	447a0000 	.word	0x447a0000
 8003408:	200002d4 	.word	0x200002d4

0800340c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b093      	sub	sp, #76	; 0x4c
 8003410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003412:	2414      	movs	r4, #20
 8003414:	193b      	adds	r3, r7, r4
 8003416:	0018      	movs	r0, r3
 8003418:	2334      	movs	r3, #52	; 0x34
 800341a:	001a      	movs	r2, r3
 800341c:	2100      	movs	r1, #0
 800341e:	f006 ff15 	bl	800a24c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003422:	003b      	movs	r3, r7
 8003424:	0018      	movs	r0, r3
 8003426:	2314      	movs	r3, #20
 8003428:	001a      	movs	r2, r3
 800342a:	2100      	movs	r1, #0
 800342c:	f006 ff0e 	bl	800a24c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <SystemClock_Config+0xa0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1e      	ldr	r2, [pc, #120]	; (80034b0 <SystemClock_Config+0xa4>)
 8003436:	401a      	ands	r2, r3
 8003438:	4b1c      	ldr	r3, [pc, #112]	; (80034ac <SystemClock_Config+0xa0>)
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	0109      	lsls	r1, r1, #4
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003442:	0021      	movs	r1, r4
 8003444:	187b      	adds	r3, r7, r1
 8003446:	2210      	movs	r2, #16
 8003448:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800344a:	187b      	adds	r3, r7, r1
 800344c:	2201      	movs	r2, #1
 800344e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003450:	187b      	adds	r3, r7, r1
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8003456:	187b      	adds	r3, r7, r1
 8003458:	22a0      	movs	r2, #160	; 0xa0
 800345a:	0212      	lsls	r2, r2, #8
 800345c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800345e:	187b      	adds	r3, r7, r1
 8003460:	2200      	movs	r2, #0
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003464:	187b      	adds	r3, r7, r1
 8003466:	0018      	movs	r0, r3
 8003468:	f001 fa7a 	bl	8004960 <HAL_RCC_OscConfig>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d001      	beq.n	8003474 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8003470:	f000 fbc8 	bl	8003c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003474:	003b      	movs	r3, r7
 8003476:	220f      	movs	r2, #15
 8003478:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800347a:	003b      	movs	r3, r7
 800347c:	2200      	movs	r2, #0
 800347e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003480:	003b      	movs	r3, r7
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003486:	003b      	movs	r3, r7
 8003488:	2200      	movs	r2, #0
 800348a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800348c:	003b      	movs	r3, r7
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003492:	003b      	movs	r3, r7
 8003494:	2100      	movs	r1, #0
 8003496:	0018      	movs	r0, r3
 8003498:	f001 fdde 	bl	8005058 <HAL_RCC_ClockConfig>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d001      	beq.n	80034a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80034a0:	f000 fbb0 	bl	8003c04 <Error_Handler>
  }
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b013      	add	sp, #76	; 0x4c
 80034aa:	bd90      	pop	{r4, r7, pc}
 80034ac:	40007000 	.word	0x40007000
 80034b0:	ffffe7ff 	.word	0xffffe7ff

080034b4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034ba:	003b      	movs	r3, r7
 80034bc:	0018      	movs	r0, r3
 80034be:	2308      	movs	r3, #8
 80034c0:	001a      	movs	r2, r3
 80034c2:	2100      	movs	r1, #0
 80034c4:	f006 fec2 	bl	800a24c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80034c8:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034ca:	4a3e      	ldr	r2, [pc, #248]	; (80035c4 <MX_ADC_Init+0x110>)
 80034cc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80034ce:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80034d4:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034d6:	2280      	movs	r2, #128	; 0x80
 80034d8:	0612      	lsls	r2, r2, #24
 80034da:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80034dc:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80034e8:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034ee:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80034f4:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034f6:	2220      	movs	r2, #32
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <MX_ADC_Init+0x10c>)
 80034fe:	2221      	movs	r2, #33	; 0x21
 8003500:	2100      	movs	r1, #0
 8003502:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003504:	4b2e      	ldr	r3, [pc, #184]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003506:	2200      	movs	r2, #0
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <MX_ADC_Init+0x10c>)
 800350c:	22c2      	movs	r2, #194	; 0xc2
 800350e:	32ff      	adds	r2, #255	; 0xff
 8003510:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003512:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003514:	222c      	movs	r2, #44	; 0x2c
 8003516:	2100      	movs	r1, #0
 8003518:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800351a:	4b29      	ldr	r3, [pc, #164]	; (80035c0 <MX_ADC_Init+0x10c>)
 800351c:	2204      	movs	r2, #4
 800351e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003528:	2200      	movs	r2, #0
 800352a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 800352c:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <MX_ADC_Init+0x10c>)
 800352e:	2201      	movs	r2, #1
 8003530:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003532:	4b23      	ldr	r3, [pc, #140]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003534:	2200      	movs	r2, #0
 8003536:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <MX_ADC_Init+0x10c>)
 800353a:	0018      	movs	r0, r3
 800353c:	f000 fdc8 	bl	80040d0 <HAL_ADC_Init>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d001      	beq.n	8003548 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003544:	f000 fb5e 	bl	8003c04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003548:	003b      	movs	r3, r7
 800354a:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <MX_ADC_Init+0x114>)
 800354c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800354e:	003b      	movs	r3, r7
 8003550:	2280      	movs	r2, #128	; 0x80
 8003552:	0152      	lsls	r2, r2, #5
 8003554:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003556:	003a      	movs	r2, r7
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <MX_ADC_Init+0x10c>)
 800355a:	0011      	movs	r1, r2
 800355c:	0018      	movs	r0, r3
 800355e:	f000 ff2b 	bl	80043b8 <HAL_ADC_ConfigChannel>
 8003562:	1e03      	subs	r3, r0, #0
 8003564:	d001      	beq.n	800356a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003566:	f000 fb4d 	bl	8003c04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800356a:	003b      	movs	r3, r7
 800356c:	4a17      	ldr	r2, [pc, #92]	; (80035cc <MX_ADC_Init+0x118>)
 800356e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003570:	003a      	movs	r2, r7
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <MX_ADC_Init+0x10c>)
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f000 ff1e 	bl	80043b8 <HAL_ADC_ConfigChannel>
 800357c:	1e03      	subs	r3, r0, #0
 800357e:	d001      	beq.n	8003584 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003580:	f000 fb40 	bl	8003c04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003584:	003b      	movs	r3, r7
 8003586:	4a12      	ldr	r2, [pc, #72]	; (80035d0 <MX_ADC_Init+0x11c>)
 8003588:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800358a:	003a      	movs	r2, r7
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <MX_ADC_Init+0x10c>)
 800358e:	0011      	movs	r1, r2
 8003590:	0018      	movs	r0, r3
 8003592:	f000 ff11 	bl	80043b8 <HAL_ADC_ConfigChannel>
 8003596:	1e03      	subs	r3, r0, #0
 8003598:	d001      	beq.n	800359e <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800359a:	f000 fb33 	bl	8003c04 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800359e:	003b      	movs	r3, r7
 80035a0:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <MX_ADC_Init+0x120>)
 80035a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80035a4:	003a      	movs	r2, r7
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <MX_ADC_Init+0x10c>)
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 ff04 	bl	80043b8 <HAL_ADC_ConfigChannel>
 80035b0:	1e03      	subs	r3, r0, #0
 80035b2:	d001      	beq.n	80035b8 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80035b4:	f000 fb26 	bl	8003c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000210 	.word	0x20000210
 80035c4:	40012400 	.word	0x40012400
 80035c8:	30001000 	.word	0x30001000
 80035cc:	34002000 	.word	0x34002000
 80035d0:	38004000 	.word	0x38004000
 80035d4:	3c008000 	.word	0x3c008000

080035d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <MX_SPI1_Init+0x68>)
 80035de:	4a19      	ldr	r2, [pc, #100]	; (8003644 <MX_SPI1_Init+0x6c>)
 80035e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035e2:	4b17      	ldr	r3, [pc, #92]	; (8003640 <MX_SPI1_Init+0x68>)
 80035e4:	2282      	movs	r2, #130	; 0x82
 80035e6:	0052      	lsls	r2, r2, #1
 80035e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <MX_SPI1_Init+0x68>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035f0:	4b13      	ldr	r3, [pc, #76]	; (8003640 <MX_SPI1_Init+0x68>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <MX_SPI1_Init+0x68>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <MX_SPI1_Init+0x68>)
 80035fe:	2200      	movs	r2, #0
 8003600:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <MX_SPI1_Init+0x68>)
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <MX_SPI1_Init+0x68>)
 800360c:	2200      	movs	r2, #0
 800360e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <MX_SPI1_Init+0x68>)
 8003612:	2200      	movs	r2, #0
 8003614:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <MX_SPI1_Init+0x68>)
 8003618:	2200      	movs	r2, #0
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <MX_SPI1_Init+0x68>)
 800361e:	2200      	movs	r2, #0
 8003620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <MX_SPI1_Init+0x68>)
 8003624:	2207      	movs	r2, #7
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <MX_SPI1_Init+0x68>)
 800362a:	0018      	movs	r0, r3
 800362c:	f001 ff02 	bl	8005434 <HAL_SPI_Init>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003634:	f000 fae6 	bl	8003c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	2000026c 	.word	0x2000026c
 8003644:	40013000 	.word	0x40013000

08003648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364e:	240c      	movs	r4, #12
 8003650:	193b      	adds	r3, r7, r4
 8003652:	0018      	movs	r0, r3
 8003654:	2314      	movs	r3, #20
 8003656:	001a      	movs	r2, r3
 8003658:	2100      	movs	r1, #0
 800365a:	f006 fdf7 	bl	800a24c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800365e:	4b38      	ldr	r3, [pc, #224]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003662:	4b37      	ldr	r3, [pc, #220]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003664:	2104      	movs	r1, #4
 8003666:	430a      	orrs	r2, r1
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c
 800366a:	4b35      	ldr	r3, [pc, #212]	; (8003740 <MX_GPIO_Init+0xf8>)
 800366c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366e:	2204      	movs	r2, #4
 8003670:	4013      	ands	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003676:	4b32      	ldr	r3, [pc, #200]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367a:	4b31      	ldr	r3, [pc, #196]	; (8003740 <MX_GPIO_Init+0xf8>)
 800367c:	2101      	movs	r1, #1
 800367e:	430a      	orrs	r2, r1
 8003680:	62da      	str	r2, [r3, #44]	; 0x2c
 8003682:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	2201      	movs	r2, #1
 8003688:	4013      	ands	r3, r2
 800368a:	607b      	str	r3, [r7, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800368e:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003692:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <MX_GPIO_Init+0xf8>)
 8003694:	2102      	movs	r1, #2
 8003696:	430a      	orrs	r2, r1
 8003698:	62da      	str	r2, [r3, #44]	; 0x2c
 800369a:	4b29      	ldr	r3, [pc, #164]	; (8003740 <MX_GPIO_Init+0xf8>)
 800369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369e:	2202      	movs	r2, #2
 80036a0:	4013      	ands	r3, r2
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Red_Pin|User_Input_Status_Light_Green_Pin
 80036a6:	4927      	ldr	r1, [pc, #156]	; (8003744 <MX_GPIO_Init+0xfc>)
 80036a8:	23a0      	movs	r3, #160	; 0xa0
 80036aa:	05db      	lsls	r3, r3, #23
 80036ac:	2200      	movs	r2, #0
 80036ae:	0018      	movs	r0, r3
 80036b0:	f001 f939 	bl	8004926 <HAL_GPIO_WritePin>
                          |User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Discrete_Bit_0_Pin Discrete_Bit_1_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_0_Pin|Discrete_Bit_1_Pin;
 80036b4:	193b      	adds	r3, r7, r4
 80036b6:	2203      	movs	r2, #3
 80036b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	2200      	movs	r2, #0
 80036be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c0:	193b      	adds	r3, r7, r4
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c6:	193b      	adds	r3, r7, r4
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <MX_GPIO_Init+0x100>)
 80036ca:	0019      	movs	r1, r3
 80036cc:	0010      	movs	r0, r2
 80036ce:	f000 ff8f 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Input_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Input_Pin;
 80036d2:	193b      	adds	r3, r7, r4
 80036d4:	2201      	movs	r2, #1
 80036d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036d8:	193b      	adds	r3, r7, r4
 80036da:	2200      	movs	r2, #0
 80036dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	193b      	adds	r3, r7, r4
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_CardDetect_Input_GPIO_Port, &GPIO_InitStruct);
 80036e4:	193a      	adds	r2, r7, r4
 80036e6:	23a0      	movs	r3, #160	; 0xa0
 80036e8:	05db      	lsls	r3, r3, #23
 80036ea:	0011      	movs	r1, r2
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 ff7f 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CardDetect_Output_Pin PA4 User_Input_Status_Light_Red_Pin User_Input_Status_Light_Green_Pin
                           User_Input_Status_Light_Blue_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Red_Pin|User_Input_Status_Light_Green_Pin
 80036f2:	193b      	adds	r3, r7, r4
 80036f4:	4a13      	ldr	r2, [pc, #76]	; (8003744 <MX_GPIO_Init+0xfc>)
 80036f6:	601a      	str	r2, [r3, #0]
                          |User_Input_Status_Light_Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f8:	193b      	adds	r3, r7, r4
 80036fa:	2201      	movs	r2, #1
 80036fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	2200      	movs	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003704:	193b      	adds	r3, r7, r4
 8003706:	2200      	movs	r2, #0
 8003708:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370a:	193a      	adds	r2, r7, r4
 800370c:	23a0      	movs	r3, #160	; 0xa0
 800370e:	05db      	lsls	r3, r3, #23
 8003710:	0011      	movs	r1, r2
 8003712:	0018      	movs	r0, r3
 8003714:	f000 ff6c 	bl	80045f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Discrete_Bit_2_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_2_Pin;
 8003718:	193b      	adds	r3, r7, r4
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800371e:	193b      	adds	r3, r7, r4
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	193b      	adds	r3, r7, r4
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Discrete_Bit_2_GPIO_Port, &GPIO_InitStruct);
 800372a:	193b      	adds	r3, r7, r4
 800372c:	4a07      	ldr	r2, [pc, #28]	; (800374c <MX_GPIO_Init+0x104>)
 800372e:	0019      	movs	r1, r3
 8003730:	0010      	movs	r0, r2
 8003732:	f000 ff5d 	bl	80045f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b009      	add	sp, #36	; 0x24
 800373c:	bd90      	pop	{r4, r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	40021000 	.word	0x40021000
 8003744:	00000712 	.word	0x00000712
 8003748:	50000800 	.word	0x50000800
 800374c:	50000400 	.word	0x50000400

08003750 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 8003758:	687b      	ldr	r3, [r7, #4]
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b002      	add	sp, #8
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <process_SD_card>:

void process_SD_card(void)
{
 8003764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003766:	4c42      	ldr	r4, [pc, #264]	; (8003870 <process_SD_card+0x10c>)
 8003768:	44a5      	add	sp, r4
 800376a:	af0c      	add	r7, sp, #48	; 0x30

    // Buffer for storing the complete string to write
    char writeBuffer[50]; // Adjust the size based on your needs

    // Attempt to mount the SD Card
    fres = f_mount(&FatFs, "", 1); // 1=mount now
 800376c:	4d41      	ldr	r5, [pc, #260]	; (8003874 <process_SD_card+0x110>)
 800376e:	2618      	movs	r6, #24
 8003770:	19ab      	adds	r3, r5, r6
 8003772:	19dc      	adds	r4, r3, r7
 8003774:	4940      	ldr	r1, [pc, #256]	; (8003878 <process_SD_card+0x114>)
 8003776:	4b41      	ldr	r3, [pc, #260]	; (800387c <process_SD_card+0x118>)
 8003778:	199b      	adds	r3, r3, r6
 800377a:	19db      	adds	r3, r3, r7
 800377c:	2201      	movs	r2, #1
 800377e:	0018      	movs	r0, r3
 8003780:	f004 fece 	bl	8008520 <f_mount>
 8003784:	0003      	movs	r3, r0
 8003786:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK) return; // Exit if fail to mount
 8003788:	19ab      	adds	r3, r5, r6
 800378a:	19db      	adds	r3, r3, r7
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d169      	bne.n	8003866 <process_SD_card+0x102>

    // Open or create the file and append data
    fres = f_open(&fil, "TestingReadings.csv", FA_WRITE | FA_READ | FA_OPEN_APPEND);
 8003792:	19ab      	adds	r3, r5, r6
 8003794:	19dc      	adds	r4, r3, r7
 8003796:	493a      	ldr	r1, [pc, #232]	; (8003880 <process_SD_card+0x11c>)
 8003798:	2334      	movs	r3, #52	; 0x34
 800379a:	199b      	adds	r3, r3, r6
 800379c:	19db      	adds	r3, r3, r7
 800379e:	2233      	movs	r2, #51	; 0x33
 80037a0:	0018      	movs	r0, r3
 80037a2:	f004 ff09 	bl	80085b8 <f_open>
 80037a6:	0003      	movs	r3, r0
 80037a8:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK) {
 80037aa:	19ab      	adds	r3, r5, r6
 80037ac:	19db      	adds	r3, r3, r7
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d006      	beq.n	80037c2 <process_SD_card+0x5e>
        f_mount(NULL, "", 0); // Dismount the SD card if fail to open
 80037b4:	4b30      	ldr	r3, [pc, #192]	; (8003878 <process_SD_card+0x114>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	0019      	movs	r1, r3
 80037ba:	2000      	movs	r0, #0
 80037bc:	f004 feb0 	bl	8008520 <f_mount>
        return; // Exit if fail to open/create the file
 80037c0:	e052      	b.n	8003868 <process_SD_card+0x104>
    }

    // Prepare the data string
    snprintf(writeBuffer, sizeof(writeBuffer),
 80037c2:	4b30      	ldr	r3, [pc, #192]	; (8003884 <process_SD_card+0x120>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	1c18      	adds	r0, r3, #0
 80037c8:	f7fe ffa2 	bl	8002710 <__aeabi_f2d>
 80037cc:	0004      	movs	r4, r0
 80037ce:	000d      	movs	r5, r1
 80037d0:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <process_SD_card+0x124>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	1c18      	adds	r0, r3, #0
 80037d6:	f7fe ff9b 	bl	8002710 <__aeabi_f2d>
 80037da:	6138      	str	r0, [r7, #16]
 80037dc:	6179      	str	r1, [r7, #20]
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <process_SD_card+0x128>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	1c18      	adds	r0, r3, #0
 80037e4:	f7fe ff94 	bl	8002710 <__aeabi_f2d>
 80037e8:	60b8      	str	r0, [r7, #8]
 80037ea:	60f9      	str	r1, [r7, #12]
 80037ec:	4b28      	ldr	r3, [pc, #160]	; (8003890 <process_SD_card+0x12c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c18      	adds	r0, r3, #0
 80037f2:	f7fe ff8d 	bl	8002710 <__aeabi_f2d>
 80037f6:	6038      	str	r0, [r7, #0]
 80037f8:	6079      	str	r1, [r7, #4]
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <process_SD_card+0x130>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	1c18      	adds	r0, r3, #0
 8003800:	f7fe ff86 	bl	8002710 <__aeabi_f2d>
 8003804:	0002      	movs	r2, r0
 8003806:	000b      	movs	r3, r1
 8003808:	4923      	ldr	r1, [pc, #140]	; (8003898 <process_SD_card+0x134>)
 800380a:	6809      	ldr	r1, [r1, #0]
 800380c:	4e23      	ldr	r6, [pc, #140]	; (800389c <process_SD_card+0x138>)
 800380e:	2018      	movs	r0, #24
 8003810:	1838      	adds	r0, r7, r0
 8003812:	910a      	str	r1, [sp, #40]	; 0x28
 8003814:	9208      	str	r2, [sp, #32]
 8003816:	9309      	str	r3, [sp, #36]	; 0x24
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	9206      	str	r2, [sp, #24]
 800381e:	9307      	str	r3, [sp, #28]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	9204      	str	r2, [sp, #16]
 8003826:	9305      	str	r3, [sp, #20]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	9202      	str	r2, [sp, #8]
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	9400      	str	r4, [sp, #0]
 8003832:	9501      	str	r5, [sp, #4]
 8003834:	0032      	movs	r2, r6
 8003836:	2132      	movs	r1, #50	; 0x32
 8003838:	f006 fc68 	bl	800a10c <sniprintf>
             V_CMOS, // CMOS Voltage
             C_CMOS, // CMOS Current
			 valueToAdjust); // Switch State

    // Write the prepared string to the file
    f_puts(writeBuffer, &fil);
 800383c:	2434      	movs	r4, #52	; 0x34
 800383e:	2518      	movs	r5, #24
 8003840:	1963      	adds	r3, r4, r5
 8003842:	19da      	adds	r2, r3, r7
 8003844:	197b      	adds	r3, r7, r5
 8003846:	0011      	movs	r1, r2
 8003848:	0018      	movs	r0, r3
 800384a:	f005 fb8a 	bl	8008f62 <f_puts>

    // Close the file to ensure data is written to the SD card
    f_close(&fil);
 800384e:	1963      	adds	r3, r4, r5
 8003850:	19db      	adds	r3, r3, r7
 8003852:	0018      	movs	r0, r3
 8003854:	f005 fad9 	bl	8008e0a <f_close>

    // Dismount the SD card
    f_mount(NULL, "", 0);
 8003858:	4b07      	ldr	r3, [pc, #28]	; (8003878 <process_SD_card+0x114>)
 800385a:	2200      	movs	r2, #0
 800385c:	0019      	movs	r1, r3
 800385e:	2000      	movs	r0, #0
 8003860:	f004 fe5e 	bl	8008520 <f_mount>
 8003864:	e000      	b.n	8003868 <process_SD_card+0x104>
    if (fres != FR_OK) return; // Exit if fail to mount
 8003866:	46c0      	nop			; (mov r8, r8)
}
 8003868:	46bd      	mov	sp, r7
 800386a:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <process_SD_card+0x13c>)
 800386c:	449d      	add	sp, r3
 800386e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003870:	ffffdf14 	.word	0xffffdf14
 8003874:	0000209f 	.word	0x0000209f
 8003878:	0800dc20 	.word	0x0800dc20
 800387c:	00001064 	.word	0x00001064
 8003880:	0800dc24 	.word	0x0800dc24
 8003884:	200002d4 	.word	0x200002d4
 8003888:	200002c4 	.word	0x200002c4
 800388c:	200002d0 	.word	0x200002d0
 8003890:	200002c8 	.word	0x200002c8
 8003894:	200002cc 	.word	0x200002cc
 8003898:	200002dc 	.word	0x200002dc
 800389c:	0800dc38 	.word	0x0800dc38
 80038a0:	000020bc 	.word	0x000020bc

080038a4 <readNumber>:
Error_Handler();
}

}

void readNumber() {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 80038a8:	4bd3      	ldr	r3, [pc, #844]	; (8003bf8 <readNumber+0x354>)
 80038aa:	2101      	movs	r1, #1
 80038ac:	0018      	movs	r0, r3
 80038ae:	f001 f81d 	bl	80048ec <HAL_GPIO_ReadPin>
 80038b2:	1e03      	subs	r3, r0, #0
 80038b4:	d12b      	bne.n	800390e <readNumber+0x6a>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 80038b6:	4bd0      	ldr	r3, [pc, #832]	; (8003bf8 <readNumber+0x354>)
 80038b8:	2102      	movs	r1, #2
 80038ba:	0018      	movs	r0, r3
 80038bc:	f001 f816 	bl	80048ec <HAL_GPIO_ReadPin>
 80038c0:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 80038c2:	d124      	bne.n	800390e <readNumber+0x6a>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 80038c4:	4bcd      	ldr	r3, [pc, #820]	; (8003bfc <readNumber+0x358>)
 80038c6:	2101      	movs	r1, #1
 80038c8:	0018      	movs	r0, r3
 80038ca:	f001 f80f 	bl	80048ec <HAL_GPIO_ReadPin>
 80038ce:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 80038d0:	d11d      	bne.n	800390e <readNumber+0x6a>
		HAL_Delay(5);
 80038d2:	2005      	movs	r0, #5
 80038d4:	f000 fbd8 	bl	8004088 <HAL_Delay>
		valueToAdjust = 0;
 80038d8:	4bc9      	ldr	r3, [pc, #804]	; (8003c00 <readNumber+0x35c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
		// Set LED to Off
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 80038de:	2380      	movs	r3, #128	; 0x80
 80038e0:	0059      	lsls	r1, r3, #1
 80038e2:	23a0      	movs	r3, #160	; 0xa0
 80038e4:	05db      	lsls	r3, r3, #23
 80038e6:	2200      	movs	r2, #0
 80038e8:	0018      	movs	r0, r3
 80038ea:	f001 f81c 	bl	8004926 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	0099      	lsls	r1, r3, #2
 80038f2:	23a0      	movs	r3, #160	; 0xa0
 80038f4:	05db      	lsls	r3, r3, #23
 80038f6:	2200      	movs	r2, #0
 80038f8:	0018      	movs	r0, r3
 80038fa:	f001 f814 	bl	8004926 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	00d9      	lsls	r1, r3, #3
 8003902:	23a0      	movs	r3, #160	; 0xa0
 8003904:	05db      	lsls	r3, r3, #23
 8003906:	2200      	movs	r2, #0
 8003908:	0018      	movs	r0, r3
 800390a:	f001 f80c 	bl	8004926 <HAL_GPIO_WritePin>

		}

	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 800390e:	4bba      	ldr	r3, [pc, #744]	; (8003bf8 <readNumber+0x354>)
 8003910:	2101      	movs	r1, #1
 8003912:	0018      	movs	r0, r3
 8003914:	f000 ffea 	bl	80048ec <HAL_GPIO_ReadPin>
 8003918:	0003      	movs	r3, r0
 800391a:	2b01      	cmp	r3, #1
 800391c:	d12b      	bne.n	8003976 <readNumber+0xd2>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 800391e:	4bb6      	ldr	r3, [pc, #728]	; (8003bf8 <readNumber+0x354>)
 8003920:	2102      	movs	r1, #2
 8003922:	0018      	movs	r0, r3
 8003924:	f000 ffe2 	bl	80048ec <HAL_GPIO_ReadPin>
 8003928:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 800392a:	d124      	bne.n	8003976 <readNumber+0xd2>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 800392c:	4bb3      	ldr	r3, [pc, #716]	; (8003bfc <readNumber+0x358>)
 800392e:	2101      	movs	r1, #1
 8003930:	0018      	movs	r0, r3
 8003932:	f000 ffdb 	bl	80048ec <HAL_GPIO_ReadPin>
 8003936:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003938:	d11d      	bne.n	8003976 <readNumber+0xd2>
		HAL_Delay(5);
 800393a:	2005      	movs	r0, #5
 800393c:	f000 fba4 	bl	8004088 <HAL_Delay>
		valueToAdjust = 1;
 8003940:	4baf      	ldr	r3, [pc, #700]	; (8003c00 <readNumber+0x35c>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
		// Set Red
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	0059      	lsls	r1, r3, #1
 800394a:	23a0      	movs	r3, #160	; 0xa0
 800394c:	05db      	lsls	r3, r3, #23
 800394e:	2201      	movs	r2, #1
 8003950:	0018      	movs	r0, r3
 8003952:	f000 ffe8 	bl	8004926 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	0099      	lsls	r1, r3, #2
 800395a:	23a0      	movs	r3, #160	; 0xa0
 800395c:	05db      	lsls	r3, r3, #23
 800395e:	2200      	movs	r2, #0
 8003960:	0018      	movs	r0, r3
 8003962:	f000 ffe0 	bl	8004926 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	00d9      	lsls	r1, r3, #3
 800396a:	23a0      	movs	r3, #160	; 0xa0
 800396c:	05db      	lsls	r3, r3, #23
 800396e:	2200      	movs	r2, #0
 8003970:	0018      	movs	r0, r3
 8003972:	f000 ffd8 	bl	8004926 <HAL_GPIO_WritePin>

	}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003976:	4ba0      	ldr	r3, [pc, #640]	; (8003bf8 <readNumber+0x354>)
 8003978:	2101      	movs	r1, #1
 800397a:	0018      	movs	r0, r3
 800397c:	f000 ffb6 	bl	80048ec <HAL_GPIO_ReadPin>
 8003980:	1e03      	subs	r3, r0, #0
 8003982:	d12c      	bne.n	80039de <readNumber+0x13a>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003984:	4b9c      	ldr	r3, [pc, #624]	; (8003bf8 <readNumber+0x354>)
 8003986:	2102      	movs	r1, #2
 8003988:	0018      	movs	r0, r3
 800398a:	f000 ffaf 	bl	80048ec <HAL_GPIO_ReadPin>
 800398e:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003990:	2b01      	cmp	r3, #1
 8003992:	d124      	bne.n	80039de <readNumber+0x13a>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003994:	4b99      	ldr	r3, [pc, #612]	; (8003bfc <readNumber+0x358>)
 8003996:	2101      	movs	r1, #1
 8003998:	0018      	movs	r0, r3
 800399a:	f000 ffa7 	bl	80048ec <HAL_GPIO_ReadPin>
 800399e:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80039a0:	d11d      	bne.n	80039de <readNumber+0x13a>
		HAL_Delay(5);
 80039a2:	2005      	movs	r0, #5
 80039a4:	f000 fb70 	bl	8004088 <HAL_Delay>
		valueToAdjust = 2;
 80039a8:	4b95      	ldr	r3, [pc, #596]	; (8003c00 <readNumber+0x35c>)
 80039aa:	2202      	movs	r2, #2
 80039ac:	601a      	str	r2, [r3, #0]
		// Set Yellow
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	0059      	lsls	r1, r3, #1
 80039b2:	23a0      	movs	r3, #160	; 0xa0
 80039b4:	05db      	lsls	r3, r3, #23
 80039b6:	2201      	movs	r2, #1
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 ffb4 	bl	8004926 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 80039be:	2380      	movs	r3, #128	; 0x80
 80039c0:	0099      	lsls	r1, r3, #2
 80039c2:	23a0      	movs	r3, #160	; 0xa0
 80039c4:	05db      	lsls	r3, r3, #23
 80039c6:	2201      	movs	r2, #1
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 ffac 	bl	8004926 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	00d9      	lsls	r1, r3, #3
 80039d2:	23a0      	movs	r3, #160	; 0xa0
 80039d4:	05db      	lsls	r3, r3, #23
 80039d6:	2200      	movs	r2, #0
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 ffa4 	bl	8004926 <HAL_GPIO_WritePin>

	}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 80039de:	4b86      	ldr	r3, [pc, #536]	; (8003bf8 <readNumber+0x354>)
 80039e0:	2101      	movs	r1, #1
 80039e2:	0018      	movs	r0, r3
 80039e4:	f000 ff82 	bl	80048ec <HAL_GPIO_ReadPin>
 80039e8:	0003      	movs	r3, r0
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d12c      	bne.n	8003a48 <readNumber+0x1a4>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80039ee:	4b82      	ldr	r3, [pc, #520]	; (8003bf8 <readNumber+0x354>)
 80039f0:	2102      	movs	r1, #2
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 ff7a 	bl	80048ec <HAL_GPIO_ReadPin>
 80039f8:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d124      	bne.n	8003a48 <readNumber+0x1a4>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 80039fe:	4b7f      	ldr	r3, [pc, #508]	; (8003bfc <readNumber+0x358>)
 8003a00:	2101      	movs	r1, #1
 8003a02:	0018      	movs	r0, r3
 8003a04:	f000 ff72 	bl	80048ec <HAL_GPIO_ReadPin>
 8003a08:	1e03      	subs	r3, r0, #0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003a0a:	d11d      	bne.n	8003a48 <readNumber+0x1a4>
			HAL_Delay(5);
 8003a0c:	2005      	movs	r0, #5
 8003a0e:	f000 fb3b 	bl	8004088 <HAL_Delay>
			valueToAdjust = 3;
 8003a12:	4b7b      	ldr	r3, [pc, #492]	; (8003c00 <readNumber+0x35c>)
 8003a14:	2203      	movs	r2, #3
 8003a16:	601a      	str	r2, [r3, #0]
			// Set Green
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	0059      	lsls	r1, r3, #1
 8003a1c:	23a0      	movs	r3, #160	; 0xa0
 8003a1e:	05db      	lsls	r3, r3, #23
 8003a20:	2200      	movs	r2, #0
 8003a22:	0018      	movs	r0, r3
 8003a24:	f000 ff7f 	bl	8004926 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	0099      	lsls	r1, r3, #2
 8003a2c:	23a0      	movs	r3, #160	; 0xa0
 8003a2e:	05db      	lsls	r3, r3, #23
 8003a30:	2201      	movs	r2, #1
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 ff77 	bl	8004926 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	00d9      	lsls	r1, r3, #3
 8003a3c:	23a0      	movs	r3, #160	; 0xa0
 8003a3e:	05db      	lsls	r3, r3, #23
 8003a40:	2200      	movs	r2, #0
 8003a42:	0018      	movs	r0, r3
 8003a44:	f000 ff6f 	bl	8004926 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003a48:	4b6b      	ldr	r3, [pc, #428]	; (8003bf8 <readNumber+0x354>)
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f000 ff4d 	bl	80048ec <HAL_GPIO_ReadPin>
 8003a52:	1e03      	subs	r3, r0, #0
 8003a54:	d12c      	bne.n	8003ab0 <readNumber+0x20c>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003a56:	4b68      	ldr	r3, [pc, #416]	; (8003bf8 <readNumber+0x354>)
 8003a58:	2102      	movs	r1, #2
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 ff46 	bl	80048ec <HAL_GPIO_ReadPin>
 8003a60:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003a62:	d125      	bne.n	8003ab0 <readNumber+0x20c>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8003a64:	4b65      	ldr	r3, [pc, #404]	; (8003bfc <readNumber+0x358>)
 8003a66:	2101      	movs	r1, #1
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 ff3f 	bl	80048ec <HAL_GPIO_ReadPin>
 8003a6e:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d11d      	bne.n	8003ab0 <readNumber+0x20c>
			HAL_Delay(5);
 8003a74:	2005      	movs	r0, #5
 8003a76:	f000 fb07 	bl	8004088 <HAL_Delay>
			valueToAdjust = 4;
 8003a7a:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <readNumber+0x35c>)
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	601a      	str	r2, [r3, #0]
			// Set Cyan
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	0059      	lsls	r1, r3, #1
 8003a84:	23a0      	movs	r3, #160	; 0xa0
 8003a86:	05db      	lsls	r3, r3, #23
 8003a88:	2200      	movs	r2, #0
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f000 ff4b 	bl	8004926 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	0099      	lsls	r1, r3, #2
 8003a94:	23a0      	movs	r3, #160	; 0xa0
 8003a96:	05db      	lsls	r3, r3, #23
 8003a98:	2201      	movs	r2, #1
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f000 ff43 	bl	8004926 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	00d9      	lsls	r1, r3, #3
 8003aa4:	23a0      	movs	r3, #160	; 0xa0
 8003aa6:	05db      	lsls	r3, r3, #23
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f000 ff3b 	bl	8004926 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003ab0:	4b51      	ldr	r3, [pc, #324]	; (8003bf8 <readNumber+0x354>)
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f000 ff19 	bl	80048ec <HAL_GPIO_ReadPin>
 8003aba:	0003      	movs	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d12c      	bne.n	8003b1a <readNumber+0x276>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003ac0:	4b4d      	ldr	r3, [pc, #308]	; (8003bf8 <readNumber+0x354>)
 8003ac2:	2102      	movs	r1, #2
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f000 ff11 	bl	80048ec <HAL_GPIO_ReadPin>
 8003aca:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003acc:	d125      	bne.n	8003b1a <readNumber+0x276>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8003ace:	4b4b      	ldr	r3, [pc, #300]	; (8003bfc <readNumber+0x358>)
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 ff0a 	bl	80048ec <HAL_GPIO_ReadPin>
 8003ad8:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d11d      	bne.n	8003b1a <readNumber+0x276>
			HAL_Delay(5);
 8003ade:	2005      	movs	r0, #5
 8003ae0:	f000 fad2 	bl	8004088 <HAL_Delay>
			valueToAdjust = 5;
 8003ae4:	4b46      	ldr	r3, [pc, #280]	; (8003c00 <readNumber+0x35c>)
 8003ae6:	2205      	movs	r2, #5
 8003ae8:	601a      	str	r2, [r3, #0]
			// Set Blue
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	0059      	lsls	r1, r3, #1
 8003aee:	23a0      	movs	r3, #160	; 0xa0
 8003af0:	05db      	lsls	r3, r3, #23
 8003af2:	2200      	movs	r2, #0
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 ff16 	bl	8004926 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	0099      	lsls	r1, r3, #2
 8003afe:	23a0      	movs	r3, #160	; 0xa0
 8003b00:	05db      	lsls	r3, r3, #23
 8003b02:	2200      	movs	r2, #0
 8003b04:	0018      	movs	r0, r3
 8003b06:	f000 ff0e 	bl	8004926 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	00d9      	lsls	r1, r3, #3
 8003b0e:	23a0      	movs	r3, #160	; 0xa0
 8003b10:	05db      	lsls	r3, r3, #23
 8003b12:	2201      	movs	r2, #1
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 ff06 	bl	8004926 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003b1a:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <readNumber+0x354>)
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f000 fee4 	bl	80048ec <HAL_GPIO_ReadPin>
 8003b24:	1e03      	subs	r3, r0, #0
 8003b26:	d12d      	bne.n	8003b84 <readNumber+0x2e0>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003b28:	4b33      	ldr	r3, [pc, #204]	; (8003bf8 <readNumber+0x354>)
 8003b2a:	2102      	movs	r1, #2
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	f000 fedd 	bl	80048ec <HAL_GPIO_ReadPin>
 8003b32:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d125      	bne.n	8003b84 <readNumber+0x2e0>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8003b38:	4b30      	ldr	r3, [pc, #192]	; (8003bfc <readNumber+0x358>)
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 fed5 	bl	80048ec <HAL_GPIO_ReadPin>
 8003b42:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d11d      	bne.n	8003b84 <readNumber+0x2e0>
			HAL_Delay(5);
 8003b48:	2005      	movs	r0, #5
 8003b4a:	f000 fa9d 	bl	8004088 <HAL_Delay>
			valueToAdjust = 6;
 8003b4e:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <readNumber+0x35c>)
 8003b50:	2206      	movs	r2, #6
 8003b52:	601a      	str	r2, [r3, #0]
			// Set Magenta
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	0059      	lsls	r1, r3, #1
 8003b58:	23a0      	movs	r3, #160	; 0xa0
 8003b5a:	05db      	lsls	r3, r3, #23
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 fee1 	bl	8004926 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	0099      	lsls	r1, r3, #2
 8003b68:	23a0      	movs	r3, #160	; 0xa0
 8003b6a:	05db      	lsls	r3, r3, #23
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 fed9 	bl	8004926 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	00d9      	lsls	r1, r3, #3
 8003b78:	23a0      	movs	r3, #160	; 0xa0
 8003b7a:	05db      	lsls	r3, r3, #23
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f000 fed1 	bl	8004926 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003b84:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <readNumber+0x354>)
 8003b86:	2101      	movs	r1, #1
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 feaf 	bl	80048ec <HAL_GPIO_ReadPin>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d12d      	bne.n	8003bf0 <readNumber+0x34c>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <readNumber+0x354>)
 8003b96:	2102      	movs	r1, #2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 fea7 	bl	80048ec <HAL_GPIO_ReadPin>
 8003b9e:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d125      	bne.n	8003bf0 <readNumber+0x34c>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8003ba4:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <readNumber+0x358>)
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f000 fe9f 	bl	80048ec <HAL_GPIO_ReadPin>
 8003bae:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d11d      	bne.n	8003bf0 <readNumber+0x34c>
			HAL_Delay(5);
 8003bb4:	2005      	movs	r0, #5
 8003bb6:	f000 fa67 	bl	8004088 <HAL_Delay>
			valueToAdjust = 7;
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <readNumber+0x35c>)
 8003bbc:	2207      	movs	r2, #7
 8003bbe:	601a      	str	r2, [r3, #0]
			// Set White
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	0059      	lsls	r1, r3, #1
 8003bc4:	23a0      	movs	r3, #160	; 0xa0
 8003bc6:	05db      	lsls	r3, r3, #23
 8003bc8:	2201      	movs	r2, #1
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 feab 	bl	8004926 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	0099      	lsls	r1, r3, #2
 8003bd4:	23a0      	movs	r3, #160	; 0xa0
 8003bd6:	05db      	lsls	r3, r3, #23
 8003bd8:	2201      	movs	r2, #1
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 fea3 	bl	8004926 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	00d9      	lsls	r1, r3, #3
 8003be4:	23a0      	movs	r3, #160	; 0xa0
 8003be6:	05db      	lsls	r3, r3, #23
 8003be8:	2201      	movs	r2, #1
 8003bea:	0018      	movs	r0, r3
 8003bec:	f000 fe9b 	bl	8004926 <HAL_GPIO_WritePin>

		}
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	50000800 	.word	0x50000800
 8003bfc:	50000400 	.word	0x50000400
 8003c00:	200002dc 	.word	0x200002dc

08003c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c08:	b672      	cpsid	i
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c0c:	e7fe      	b.n	8003c0c <Error_Handler+0x8>
	...

08003c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c14:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <HAL_MspInit+0x24>)
 8003c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_MspInit+0x24>)
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <HAL_MspInit+0x24>)
 8003c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c24:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <HAL_MspInit+0x24>)
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	0549      	lsls	r1, r1, #21
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40021000 	.word	0x40021000

08003c38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c38:	b590      	push	{r4, r7, lr}
 8003c3a:	b089      	sub	sp, #36	; 0x24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c40:	240c      	movs	r4, #12
 8003c42:	193b      	adds	r3, r7, r4
 8003c44:	0018      	movs	r0, r3
 8003c46:	2314      	movs	r3, #20
 8003c48:	001a      	movs	r2, r3
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f006 fafe 	bl	800a24c <memset>
  if(hadc->Instance==ADC1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <HAL_ADC_MspInit+0x70>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d121      	bne.n	8003c9e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <HAL_ADC_MspInit+0x74>)
 8003c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <HAL_ADC_MspInit+0x74>)
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	0089      	lsls	r1, r1, #2
 8003c64:	430a      	orrs	r2, r1
 8003c66:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_ADC_MspInit+0x74>)
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <HAL_ADC_MspInit+0x74>)
 8003c6e:	2104      	movs	r1, #4
 8003c70:	430a      	orrs	r2, r1
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c74:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <HAL_ADC_MspInit+0x74>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	2204      	movs	r2, #4
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = Current_ADC_CMOS_Pin|Voltage_ADC_CMOS_Pin|Current_ADC_18650_Pin|Voltage_ADC_18650_Pin;
 8003c80:	193b      	adds	r3, r7, r4
 8003c82:	223c      	movs	r2, #60	; 0x3c
 8003c84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c86:	193b      	adds	r3, r7, r4
 8003c88:	2203      	movs	r2, #3
 8003c8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	193b      	adds	r3, r7, r4
 8003c8e:	2200      	movs	r2, #0
 8003c90:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c92:	193b      	adds	r3, r7, r4
 8003c94:	4a06      	ldr	r2, [pc, #24]	; (8003cb0 <HAL_ADC_MspInit+0x78>)
 8003c96:	0019      	movs	r1, r3
 8003c98:	0010      	movs	r0, r2
 8003c9a:	f000 fca9 	bl	80045f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b009      	add	sp, #36	; 0x24
 8003ca4:	bd90      	pop	{r4, r7, pc}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	40012400 	.word	0x40012400
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	50000800 	.word	0x50000800

08003cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cbc:	240c      	movs	r4, #12
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	0018      	movs	r0, r3
 8003cc2:	2314      	movs	r3, #20
 8003cc4:	001a      	movs	r2, r3
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f006 fac0 	bl	800a24c <memset>
  if(hspi->Instance==SPI1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a18      	ldr	r2, [pc, #96]	; (8003d34 <HAL_SPI_MspInit+0x80>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d129      	bne.n	8003d2a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cd6:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <HAL_SPI_MspInit+0x84>)
 8003cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cda:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <HAL_SPI_MspInit+0x84>)
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	0149      	lsls	r1, r1, #5
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <HAL_SPI_MspInit+0x84>)
 8003ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_SPI_MspInit+0x84>)
 8003cea:	2101      	movs	r1, #1
 8003cec:	430a      	orrs	r2, r1
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_SPI_MspInit+0x84>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003cfc:	0021      	movs	r1, r4
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	22e0      	movs	r2, #224	; 0xe0
 8003d02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	2202      	movs	r2, #2
 8003d08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	2203      	movs	r2, #3
 8003d14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	2200      	movs	r2, #0
 8003d1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1c:	187a      	adds	r2, r7, r1
 8003d1e:	23a0      	movs	r3, #160	; 0xa0
 8003d20:	05db      	lsls	r3, r3, #23
 8003d22:	0011      	movs	r1, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	f000 fc63 	bl	80045f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b009      	add	sp, #36	; 0x24
 8003d30:	bd90      	pop	{r4, r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	40013000 	.word	0x40013000
 8003d38:	40021000 	.word	0x40021000

08003d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d40:	e7fe      	b.n	8003d40 <NMI_Handler+0x4>

08003d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d46:	e7fe      	b.n	8003d46 <HardFault_Handler+0x4>

08003d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	if(Timer1 > 0)
 8003d58:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <PendSV_Handler+0x34>)
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <PendSV_Handler+0x18>
	  Timer1--;
 8003d60:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <PendSV_Handler+0x34>)
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <PendSV_Handler+0x34>)
 8003d6a:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <PendSV_Handler+0x38>)
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <PendSV_Handler+0x2c>
	  Timer2--;
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <PendSV_Handler+0x38>)
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <PendSV_Handler+0x38>)
 8003d7e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	20000208 	.word	0x20000208
 8003d8c:	2000020a 	.word	0x2000020a

08003d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d94:	f000 f95c 	bl	8004050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <_getpid>:
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	2301      	movs	r3, #1
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <_kill>:
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
 8003db4:	f006 faa4 	bl	800a300 <__errno>
 8003db8:	0003      	movs	r3, r0
 8003dba:	2216      	movs	r2, #22
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	425b      	negs	r3, r3
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b002      	add	sp, #8
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <_exit>:
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	425a      	negs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	0011      	movs	r1, r2
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7ff ffe5 	bl	8003daa <_kill>
 8003de0:	e7fe      	b.n	8003de0 <_exit+0x16>

08003de2 <_read>:
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	e00a      	b.n	8003e0a <_read+0x28>
 8003df4:	e000      	b.n	8003df8 <_read+0x16>
 8003df6:	bf00      	nop
 8003df8:	0001      	movs	r1, r0
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	60ba      	str	r2, [r7, #8]
 8003e00:	b2ca      	uxtb	r2, r1
 8003e02:	701a      	strb	r2, [r3, #0]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3301      	adds	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	dbf0      	blt.n	8003df4 <_read+0x12>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b006      	add	sp, #24
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <_write>:
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	e009      	b.n	8003e42 <_write+0x26>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	60ba      	str	r2, [r7, #8]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7ff fc8a 	bl	8003750 <__io_putchar>
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	dbf1      	blt.n	8003e2e <_write+0x12>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	b006      	add	sp, #24
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_close>:
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	425b      	negs	r3, r3
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b002      	add	sp, #8
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <_fstat>:
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	0192      	lsls	r2, r2, #6
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b002      	add	sp, #8
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <_isatty>:
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	0018      	movs	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b002      	add	sp, #8
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <_lseek>:
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b004      	add	sp, #16
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <_sbrk>:
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <_sbrk+0x5c>)
 8003eb6:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <_sbrk+0x60>)
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <_sbrk+0x64>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <_sbrk+0x22>
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <_sbrk+0x64>)
 8003eca:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <_sbrk+0x68>)
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <_sbrk+0x64>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d207      	bcs.n	8003eec <_sbrk+0x40>
 8003edc:	f006 fa10 	bl	800a300 <__errno>
 8003ee0:	0003      	movs	r3, r0
 8003ee2:	220c      	movs	r2, #12
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	425b      	negs	r3, r3
 8003eea:	e009      	b.n	8003f00 <_sbrk+0x54>
 8003eec:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <_sbrk+0x64>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <_sbrk+0x64>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	18d2      	adds	r2, r2, r3
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <_sbrk+0x64>)
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b006      	add	sp, #24
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20005000 	.word	0x20005000
 8003f0c:	00000400 	.word	0x00000400
 8003f10:	200002e0 	.word	0x200002e0
 8003f14:	20000670 	.word	0x20000670

08003f18 <SystemInit>:
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	46c0      	nop			; (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <Reset_Handler>:
 8003f24:	4813      	ldr	r0, [pc, #76]	; (8003f74 <LoopForever+0x2>)
 8003f26:	4685      	mov	sp, r0
 8003f28:	f7ff fff6 	bl	8003f18 <SystemInit>
 8003f2c:	4812      	ldr	r0, [pc, #72]	; (8003f78 <LoopForever+0x6>)
 8003f2e:	6801      	ldr	r1, [r0, #0]
 8003f30:	0e09      	lsrs	r1, r1, #24
 8003f32:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <LoopForever+0xa>)
 8003f34:	4291      	cmp	r1, r2
 8003f36:	d105      	bne.n	8003f44 <ApplicationStart>
 8003f38:	4811      	ldr	r0, [pc, #68]	; (8003f80 <LoopForever+0xe>)
 8003f3a:	4912      	ldr	r1, [pc, #72]	; (8003f84 <LoopForever+0x12>)
 8003f3c:	6001      	str	r1, [r0, #0]
 8003f3e:	4812      	ldr	r0, [pc, #72]	; (8003f88 <LoopForever+0x16>)
 8003f40:	4912      	ldr	r1, [pc, #72]	; (8003f8c <LoopForever+0x1a>)
 8003f42:	6001      	str	r1, [r0, #0]

08003f44 <ApplicationStart>:
 8003f44:	4812      	ldr	r0, [pc, #72]	; (8003f90 <LoopForever+0x1e>)
 8003f46:	4913      	ldr	r1, [pc, #76]	; (8003f94 <LoopForever+0x22>)
 8003f48:	4a13      	ldr	r2, [pc, #76]	; (8003f98 <LoopForever+0x26>)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e002      	b.n	8003f54 <LoopCopyDataInit>

08003f4e <CopyDataInit>:
 8003f4e:	58d4      	ldr	r4, [r2, r3]
 8003f50:	50c4      	str	r4, [r0, r3]
 8003f52:	3304      	adds	r3, #4

08003f54 <LoopCopyDataInit>:
 8003f54:	18c4      	adds	r4, r0, r3
 8003f56:	428c      	cmp	r4, r1
 8003f58:	d3f9      	bcc.n	8003f4e <CopyDataInit>
 8003f5a:	4a10      	ldr	r2, [pc, #64]	; (8003f9c <LoopForever+0x2a>)
 8003f5c:	4c10      	ldr	r4, [pc, #64]	; (8003fa0 <LoopForever+0x2e>)
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e001      	b.n	8003f66 <LoopFillZerobss>

08003f62 <FillZerobss>:
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	3204      	adds	r2, #4

08003f66 <LoopFillZerobss>:
 8003f66:	42a2      	cmp	r2, r4
 8003f68:	d3fb      	bcc.n	8003f62 <FillZerobss>
 8003f6a:	f006 f9cf 	bl	800a30c <__libc_init_array>
 8003f6e:	f7ff fa01 	bl	8003374 <main>

08003f72 <LoopForever>:
 8003f72:	e7fe      	b.n	8003f72 <LoopForever>
 8003f74:	20005000 	.word	0x20005000
 8003f78:	00000004 	.word	0x00000004
 8003f7c:	0000001f 	.word	0x0000001f
 8003f80:	40021034 	.word	0x40021034
 8003f84:	00000001 	.word	0x00000001
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	00000000 	.word	0x00000000
 8003f90:	20000000 	.word	0x20000000
 8003f94:	200001ec 	.word	0x200001ec
 8003f98:	0800e650 	.word	0x0800e650
 8003f9c:	200001ec 	.word	0x200001ec
 8003fa0:	20000670 	.word	0x20000670

08003fa4 <ADC1_IRQHandler>:
 8003fa4:	e7fe      	b.n	8003fa4 <ADC1_IRQHandler>
	...

08003fa8 <HAL_Init>:
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	1dfb      	adds	r3, r7, #7
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_Init+0x3c>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_Init+0x3c>)
 8003fba:	2140      	movs	r1, #64	; 0x40
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	2003      	movs	r0, #3
 8003fc2:	f000 f811 	bl	8003fe8 <HAL_InitTick>
 8003fc6:	1e03      	subs	r3, r0, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_Init+0x2a>
 8003fca:	1dfb      	adds	r3, r7, #7
 8003fcc:	2201      	movs	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	e001      	b.n	8003fd6 <HAL_Init+0x2e>
 8003fd2:	f7ff fe1d 	bl	8003c10 <HAL_MspInit>
 8003fd6:	1dfb      	adds	r3, r7, #7
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b002      	add	sp, #8
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	40022000 	.word	0x40022000

08003fe8 <HAL_InitTick>:
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <HAL_InitTick+0x5c>)
 8003ff2:	681c      	ldr	r4, [r3, #0]
 8003ff4:	4b14      	ldr	r3, [pc, #80]	; (8004048 <HAL_InitTick+0x60>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	23fa      	movs	r3, #250	; 0xfa
 8003ffc:	0098      	lsls	r0, r3, #2
 8003ffe:	f7fc f89f 	bl	8000140 <__udivsi3>
 8004002:	0003      	movs	r3, r0
 8004004:	0019      	movs	r1, r3
 8004006:	0020      	movs	r0, r4
 8004008:	f7fc f89a 	bl	8000140 <__udivsi3>
 800400c:	0003      	movs	r3, r0
 800400e:	0018      	movs	r0, r3
 8004010:	f000 fae1 	bl	80045d6 <HAL_SYSTICK_Config>
 8004014:	1e03      	subs	r3, r0, #0
 8004016:	d001      	beq.n	800401c <HAL_InitTick+0x34>
 8004018:	2301      	movs	r3, #1
 800401a:	e00f      	b.n	800403c <HAL_InitTick+0x54>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d80b      	bhi.n	800403a <HAL_InitTick+0x52>
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	2301      	movs	r3, #1
 8004026:	425b      	negs	r3, r3
 8004028:	2200      	movs	r2, #0
 800402a:	0018      	movs	r0, r3
 800402c:	f000 fabe 	bl	80045ac <HAL_NVIC_SetPriority>
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <HAL_InitTick+0x64>)
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <HAL_InitTick+0x54>
 800403a:	2301      	movs	r3, #1
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b003      	add	sp, #12
 8004042:	bd90      	pop	{r4, r7, pc}
 8004044:	20000004 	.word	0x20000004
 8004048:	2000000c 	.word	0x2000000c
 800404c:	20000008 	.word	0x20000008

08004050 <HAL_IncTick>:
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
 8004054:	4b05      	ldr	r3, [pc, #20]	; (800406c <HAL_IncTick+0x1c>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	001a      	movs	r2, r3
 800405a:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_IncTick+0x20>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	18d2      	adds	r2, r2, r3
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_IncTick+0x20>)
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	2000000c 	.word	0x2000000c
 8004070:	200002e4 	.word	0x200002e4

08004074 <HAL_GetTick>:
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
 8004078:	4b02      	ldr	r3, [pc, #8]	; (8004084 <HAL_GetTick+0x10>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	200002e4 	.word	0x200002e4

08004088 <HAL_Delay>:
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	f7ff fff0 	bl	8004074 <HAL_GetTick>
 8004094:	0003      	movs	r3, r0
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3301      	adds	r3, #1
 80040a0:	d005      	beq.n	80040ae <HAL_Delay+0x26>
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <HAL_Delay+0x44>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	001a      	movs	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	f7ff ffe0 	bl	8004074 <HAL_GetTick>
 80040b4:	0002      	movs	r2, r0
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d8f7      	bhi.n	80040b0 <HAL_Delay+0x28>
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b004      	add	sp, #16
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	2000000c 	.word	0x2000000c

080040d0 <HAL_ADC_Init>:
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_ADC_Init+0x12>
 80040de:	2301      	movs	r3, #1
 80040e0:	e159      	b.n	8004396 <HAL_ADC_Init+0x2c6>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <HAL_ADC_Init+0x30>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	659a      	str	r2, [r3, #88]	; 0x58
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2250      	movs	r2, #80	; 0x50
 80040f4:	2100      	movs	r1, #0
 80040f6:	5499      	strb	r1, [r3, r2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7ff fd9c 	bl	8003c38 <HAL_ADC_MspInit>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	2210      	movs	r2, #16
 8004106:	4013      	ands	r3, r2
 8004108:	2b10      	cmp	r3, #16
 800410a:	d005      	beq.n	8004118 <HAL_ADC_Init+0x48>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2204      	movs	r2, #4
 8004114:	4013      	ands	r3, r2
 8004116:	d00b      	beq.n	8004130 <HAL_ADC_Init+0x60>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	2210      	movs	r2, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2250      	movs	r2, #80	; 0x50
 8004128:	2100      	movs	r1, #0
 800412a:	5499      	strb	r1, [r3, r2]
 800412c:	2301      	movs	r3, #1
 800412e:	e132      	b.n	8004396 <HAL_ADC_Init+0x2c6>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004134:	4a9a      	ldr	r2, [pc, #616]	; (80043a0 <HAL_ADC_Init+0x2d0>)
 8004136:	4013      	ands	r3, r2
 8004138:	2202      	movs	r2, #2
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2203      	movs	r2, #3
 8004148:	4013      	ands	r3, r2
 800414a:	2b01      	cmp	r3, #1
 800414c:	d108      	bne.n	8004160 <HAL_ADC_Init+0x90>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2201      	movs	r2, #1
 8004156:	4013      	ands	r3, r2
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_ADC_Init+0x90>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <HAL_ADC_Init+0x92>
 8004160:	2300      	movs	r3, #0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d149      	bne.n	80041fa <HAL_ADC_Init+0x12a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	23c0      	movs	r3, #192	; 0xc0
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	429a      	cmp	r2, r3
 8004170:	d00b      	beq.n	800418a <HAL_ADC_Init+0xba>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	05db      	lsls	r3, r3, #23
 800417a:	429a      	cmp	r2, r3
 800417c:	d005      	beq.n	800418a <HAL_ADC_Init+0xba>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	429a      	cmp	r2, r3
 8004188:	d111      	bne.n	80041ae <HAL_ADC_Init+0xde>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0092      	lsls	r2, r2, #2
 8004196:	0892      	lsrs	r2, r2, #2
 8004198:	611a      	str	r2, [r3, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6919      	ldr	r1, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	611a      	str	r2, [r3, #16]
 80041ac:	e014      	b.n	80041d8 <HAL_ADC_Init+0x108>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	0092      	lsls	r2, r2, #2
 80041ba:	0892      	lsrs	r2, r2, #2
 80041bc:	611a      	str	r2, [r3, #16]
 80041be:	4b79      	ldr	r3, [pc, #484]	; (80043a4 <HAL_ADC_Init+0x2d4>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b78      	ldr	r3, [pc, #480]	; (80043a4 <HAL_ADC_Init+0x2d4>)
 80041c4:	4978      	ldr	r1, [pc, #480]	; (80043a8 <HAL_ADC_Init+0x2d8>)
 80041c6:	400a      	ands	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	4b76      	ldr	r3, [pc, #472]	; (80043a4 <HAL_ADC_Init+0x2d4>)
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4b74      	ldr	r3, [pc, #464]	; (80043a4 <HAL_ADC_Init+0x2d4>)
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2118      	movs	r1, #24
 80041e4:	438a      	bics	r2, r1
 80041e6:	60da      	str	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68d9      	ldr	r1, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	4b6a      	ldr	r3, [pc, #424]	; (80043a4 <HAL_ADC_Init+0x2d4>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b69      	ldr	r3, [pc, #420]	; (80043a4 <HAL_ADC_Init+0x2d4>)
 8004200:	496a      	ldr	r1, [pc, #424]	; (80043ac <HAL_ADC_Init+0x2dc>)
 8004202:	400a      	ands	r2, r1
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	4b67      	ldr	r3, [pc, #412]	; (80043a4 <HAL_ADC_Init+0x2d4>)
 8004208:	6819      	ldr	r1, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	065a      	lsls	r2, r3, #25
 8004210:	4b64      	ldr	r3, [pc, #400]	; (80043a4 <HAL_ADC_Init+0x2d4>)
 8004212:	430a      	orrs	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	055b      	lsls	r3, r3, #21
 8004220:	4013      	ands	r3, r2
 8004222:	d108      	bne.n	8004236 <HAL_ADC_Init+0x166>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2180      	movs	r1, #128	; 0x80
 8004230:	0549      	lsls	r1, r1, #21
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	495b      	ldr	r1, [pc, #364]	; (80043b0 <HAL_ADC_Init+0x2e0>)
 8004242:	400a      	ands	r2, r1
 8004244:	60da      	str	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68d9      	ldr	r1, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d101      	bne.n	800425c <HAL_ADC_Init+0x18c>
 8004258:	2304      	movs	r3, #4
 800425a:	e000      	b.n	800425e <HAL_ADC_Init+0x18e>
 800425c:	2300      	movs	r3, #0
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2020      	movs	r0, #32
 8004264:	5c1b      	ldrb	r3, [r3, r0]
 8004266:	035b      	lsls	r3, r3, #13
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	202c      	movs	r0, #44	; 0x2c
 800426e:	5c1b      	ldrb	r3, [r3, r0]
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	039b      	lsls	r3, r3, #14
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	03db      	lsls	r3, r3, #15
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004296:	23c2      	movs	r3, #194	; 0xc2
 8004298:	33ff      	adds	r3, #255	; 0xff
 800429a:	429a      	cmp	r2, r3
 800429c:	d00b      	beq.n	80042b6 <HAL_ADC_Init+0x1e6>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68d9      	ldr	r1, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2221      	movs	r2, #33	; 0x21
 80042ba:	5c9b      	ldrb	r3, [r3, r2]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d11a      	bne.n	80042f6 <HAL_ADC_Init+0x226>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	5c9b      	ldrb	r3, [r3, r2]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <HAL_ADC_Init+0x20e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2180      	movs	r1, #128	; 0x80
 80042d6:	0249      	lsls	r1, r1, #9
 80042d8:	430a      	orrs	r2, r1
 80042da:	60da      	str	r2, [r3, #12]
 80042dc:	e00b      	b.n	80042f6 <HAL_ADC_Init+0x226>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	2220      	movs	r2, #32
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	2201      	movs	r2, #1
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	659a      	str	r2, [r3, #88]	; 0x58
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d11f      	bne.n	800433e <HAL_ADC_Init+0x26e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	492a      	ldr	r1, [pc, #168]	; (80043b4 <HAL_ADC_Init+0x2e4>)
 800430a:	400a      	ands	r2, r1
 800430c:	611a      	str	r2, [r3, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6919      	ldr	r1, [r3, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	611a      	str	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2101      	movs	r1, #1
 8004338:	430a      	orrs	r2, r1
 800433a:	611a      	str	r2, [r3, #16]
 800433c:	e00e      	b.n	800435c <HAL_ADC_Init+0x28c>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	2201      	movs	r2, #1
 8004346:	4013      	ands	r3, r2
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_ADC_Init+0x28c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2101      	movs	r1, #1
 8004358:	438a      	bics	r2, r1
 800435a:	611a      	str	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2107      	movs	r1, #7
 8004368:	438a      	bics	r2, r1
 800436a:	615a      	str	r2, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6959      	ldr	r1, [r3, #20]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	615a      	str	r2, [r3, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	659a      	str	r2, [r3, #88]	; 0x58
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	2203      	movs	r2, #3
 800438a:	4393      	bics	r3, r2
 800438c:	2201      	movs	r2, #1
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
 8004394:	2300      	movs	r3, #0
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b002      	add	sp, #8
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	fffffefd 	.word	0xfffffefd
 80043a4:	40012708 	.word	0x40012708
 80043a8:	ffc3ffff 	.word	0xffc3ffff
 80043ac:	fdffffff 	.word	0xfdffffff
 80043b0:	fffe0219 	.word	0xfffe0219
 80043b4:	fffffc03 	.word	0xfffffc03

080043b8 <HAL_ADC_ConfigChannel>:
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2250      	movs	r2, #80	; 0x50
 80043c6:	5c9b      	ldrb	r3, [r3, r2]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x18>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e050      	b.n	8004472 <HAL_ADC_ConfigChannel+0xba>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2250      	movs	r2, #80	; 0x50
 80043d4:	2101      	movs	r1, #1
 80043d6:	5499      	strb	r1, [r3, r2]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2204      	movs	r2, #4
 80043e0:	4013      	ands	r3, r2
 80043e2:	d00b      	beq.n	80043fc <HAL_ADC_ConfigChannel+0x44>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	2220      	movs	r2, #32
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2250      	movs	r2, #80	; 0x50
 80043f4:	2100      	movs	r1, #0
 80043f6:	5499      	strb	r1, [r3, r2]
 80043f8:	2301      	movs	r3, #1
 80043fa:	e03a      	b.n	8004472 <HAL_ADC_ConfigChannel+0xba>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4a1e      	ldr	r2, [pc, #120]	; (800447c <HAL_ADC_ConfigChannel+0xc4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d018      	beq.n	8004438 <HAL_ADC_ConfigChannel+0x80>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	035b      	lsls	r3, r3, #13
 8004412:	0b5a      	lsrs	r2, r3, #13
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	629a      	str	r2, [r3, #40]	; 0x28
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	029b      	lsls	r3, r3, #10
 8004424:	4013      	ands	r3, r2
 8004426:	d01f      	beq.n	8004468 <HAL_ADC_ConfigChannel+0xb0>
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <HAL_ADC_ConfigChannel+0xc8>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_ADC_ConfigChannel+0xc8>)
 800442e:	2180      	movs	r1, #128	; 0x80
 8004430:	03c9      	lsls	r1, r1, #15
 8004432:	430a      	orrs	r2, r1
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e017      	b.n	8004468 <HAL_ADC_ConfigChannel+0xb0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	035b      	lsls	r3, r3, #13
 8004444:	0b5b      	lsrs	r3, r3, #13
 8004446:	43d9      	mvns	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	400a      	ands	r2, r1
 800444e:	629a      	str	r2, [r3, #40]	; 0x28
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2380      	movs	r3, #128	; 0x80
 8004456:	029b      	lsls	r3, r3, #10
 8004458:	4013      	ands	r3, r2
 800445a:	d005      	beq.n	8004468 <HAL_ADC_ConfigChannel+0xb0>
 800445c:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HAL_ADC_ConfigChannel+0xc8>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <HAL_ADC_ConfigChannel+0xc8>)
 8004462:	4908      	ldr	r1, [pc, #32]	; (8004484 <HAL_ADC_ConfigChannel+0xcc>)
 8004464:	400a      	ands	r2, r1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2250      	movs	r2, #80	; 0x50
 800446c:	2100      	movs	r1, #0
 800446e:	5499      	strb	r1, [r3, r2]
 8004470:	2300      	movs	r3, #0
 8004472:	0018      	movs	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	b002      	add	sp, #8
 8004478:	bd80      	pop	{r7, pc}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	00001001 	.word	0x00001001
 8004480:	40012708 	.word	0x40012708
 8004484:	ffbfffff 	.word	0xffbfffff

08004488 <__NVIC_SetPriority>:
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	0002      	movs	r2, r0
 8004490:	6039      	str	r1, [r7, #0]
 8004492:	1dfb      	adds	r3, r7, #7
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	1dfb      	adds	r3, r7, #7
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b7f      	cmp	r3, #127	; 0x7f
 800449c:	d828      	bhi.n	80044f0 <__NVIC_SetPriority+0x68>
 800449e:	4a2f      	ldr	r2, [pc, #188]	; (800455c <__NVIC_SetPriority+0xd4>)
 80044a0:	1dfb      	adds	r3, r7, #7
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b25b      	sxtb	r3, r3
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	33c0      	adds	r3, #192	; 0xc0
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	589b      	ldr	r3, [r3, r2]
 80044ae:	1dfa      	adds	r2, r7, #7
 80044b0:	7812      	ldrb	r2, [r2, #0]
 80044b2:	0011      	movs	r1, r2
 80044b4:	2203      	movs	r2, #3
 80044b6:	400a      	ands	r2, r1
 80044b8:	00d2      	lsls	r2, r2, #3
 80044ba:	21ff      	movs	r1, #255	; 0xff
 80044bc:	4091      	lsls	r1, r2
 80044be:	000a      	movs	r2, r1
 80044c0:	43d2      	mvns	r2, r2
 80044c2:	401a      	ands	r2, r3
 80044c4:	0011      	movs	r1, r2
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	019b      	lsls	r3, r3, #6
 80044ca:	22ff      	movs	r2, #255	; 0xff
 80044cc:	401a      	ands	r2, r3
 80044ce:	1dfb      	adds	r3, r7, #7
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	0018      	movs	r0, r3
 80044d4:	2303      	movs	r3, #3
 80044d6:	4003      	ands	r3, r0
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	409a      	lsls	r2, r3
 80044dc:	481f      	ldr	r0, [pc, #124]	; (800455c <__NVIC_SetPriority+0xd4>)
 80044de:	1dfb      	adds	r3, r7, #7
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b25b      	sxtb	r3, r3
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	430a      	orrs	r2, r1
 80044e8:	33c0      	adds	r3, #192	; 0xc0
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	501a      	str	r2, [r3, r0]
 80044ee:	e031      	b.n	8004554 <__NVIC_SetPriority+0xcc>
 80044f0:	4a1b      	ldr	r2, [pc, #108]	; (8004560 <__NVIC_SetPriority+0xd8>)
 80044f2:	1dfb      	adds	r3, r7, #7
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	0019      	movs	r1, r3
 80044f8:	230f      	movs	r3, #15
 80044fa:	400b      	ands	r3, r1
 80044fc:	3b08      	subs	r3, #8
 80044fe:	089b      	lsrs	r3, r3, #2
 8004500:	3306      	adds	r3, #6
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	18d3      	adds	r3, r2, r3
 8004506:	3304      	adds	r3, #4
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	1dfa      	adds	r2, r7, #7
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	0011      	movs	r1, r2
 8004510:	2203      	movs	r2, #3
 8004512:	400a      	ands	r2, r1
 8004514:	00d2      	lsls	r2, r2, #3
 8004516:	21ff      	movs	r1, #255	; 0xff
 8004518:	4091      	lsls	r1, r2
 800451a:	000a      	movs	r2, r1
 800451c:	43d2      	mvns	r2, r2
 800451e:	401a      	ands	r2, r3
 8004520:	0011      	movs	r1, r2
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	019b      	lsls	r3, r3, #6
 8004526:	22ff      	movs	r2, #255	; 0xff
 8004528:	401a      	ands	r2, r3
 800452a:	1dfb      	adds	r3, r7, #7
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	0018      	movs	r0, r3
 8004530:	2303      	movs	r3, #3
 8004532:	4003      	ands	r3, r0
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	409a      	lsls	r2, r3
 8004538:	4809      	ldr	r0, [pc, #36]	; (8004560 <__NVIC_SetPriority+0xd8>)
 800453a:	1dfb      	adds	r3, r7, #7
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	001c      	movs	r4, r3
 8004540:	230f      	movs	r3, #15
 8004542:	4023      	ands	r3, r4
 8004544:	3b08      	subs	r3, #8
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	430a      	orrs	r2, r1
 800454a:	3306      	adds	r3, #6
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	18c3      	adds	r3, r0, r3
 8004550:	3304      	adds	r3, #4
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	46bd      	mov	sp, r7
 8004558:	b003      	add	sp, #12
 800455a:	bd90      	pop	{r4, r7, pc}
 800455c:	e000e100 	.word	0xe000e100
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <SysTick_Config>:
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	1e5a      	subs	r2, r3, #1
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	045b      	lsls	r3, r3, #17
 8004574:	429a      	cmp	r2, r3
 8004576:	d301      	bcc.n	800457c <SysTick_Config+0x18>
 8004578:	2301      	movs	r3, #1
 800457a:	e010      	b.n	800459e <SysTick_Config+0x3a>
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <SysTick_Config+0x44>)
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	3a01      	subs	r2, #1
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	2301      	movs	r3, #1
 8004586:	425b      	negs	r3, r3
 8004588:	2103      	movs	r1, #3
 800458a:	0018      	movs	r0, r3
 800458c:	f7ff ff7c 	bl	8004488 <__NVIC_SetPriority>
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <SysTick_Config+0x44>)
 8004592:	2200      	movs	r2, #0
 8004594:	609a      	str	r2, [r3, #8]
 8004596:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <SysTick_Config+0x44>)
 8004598:	2207      	movs	r2, #7
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	2300      	movs	r3, #0
 800459e:	0018      	movs	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b002      	add	sp, #8
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	e000e010 	.word	0xe000e010

080045ac <HAL_NVIC_SetPriority>:
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	210f      	movs	r1, #15
 80045b8:	187b      	adds	r3, r7, r1
 80045ba:	1c02      	adds	r2, r0, #0
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	187b      	adds	r3, r7, r1
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b25b      	sxtb	r3, r3
 80045c6:	0011      	movs	r1, r2
 80045c8:	0018      	movs	r0, r3
 80045ca:	f7ff ff5d 	bl	8004488 <__NVIC_SetPriority>
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b004      	add	sp, #16
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_SYSTICK_Config>:
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b082      	sub	sp, #8
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f7ff ffbf 	bl	8004564 <SysTick_Config>
 80045e6:	0003      	movs	r3, r0
 80045e8:	0018      	movs	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	b002      	add	sp, #8
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_GPIO_Init>:
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	2300      	movs	r3, #0
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	e155      	b.n	80048b4 <HAL_GPIO_Init+0x2c4>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2101      	movs	r1, #1
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4091      	lsls	r1, r2
 8004612:	000a      	movs	r2, r1
 8004614:	4013      	ands	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d100      	bne.n	8004620 <HAL_GPIO_Init+0x30>
 800461e:	e146      	b.n	80048ae <HAL_GPIO_Init+0x2be>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2203      	movs	r2, #3
 8004626:	4013      	ands	r3, r2
 8004628:	2b01      	cmp	r3, #1
 800462a:	d005      	beq.n	8004638 <HAL_GPIO_Init+0x48>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2203      	movs	r2, #3
 8004632:	4013      	ands	r3, r2
 8004634:	2b02      	cmp	r3, #2
 8004636:	d130      	bne.n	800469a <HAL_GPIO_Init+0xaa>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	2203      	movs	r2, #3
 8004644:	409a      	lsls	r2, r3
 8004646:	0013      	movs	r3, r2
 8004648:	43da      	mvns	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	409a      	lsls	r2, r3
 800465a:	0013      	movs	r3, r2
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	2201      	movs	r2, #1
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	409a      	lsls	r2, r3
 8004674:	0013      	movs	r3, r2
 8004676:	43da      	mvns	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	2201      	movs	r2, #1
 8004686:	401a      	ands	r2, r3
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	409a      	lsls	r2, r3
 800468c:	0013      	movs	r3, r2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2203      	movs	r2, #3
 80046a0:	4013      	ands	r3, r2
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d017      	beq.n	80046d6 <HAL_GPIO_Init+0xe6>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	2203      	movs	r2, #3
 80046b2:	409a      	lsls	r2, r3
 80046b4:	0013      	movs	r3, r2
 80046b6:	43da      	mvns	r2, r3
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4013      	ands	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	409a      	lsls	r2, r3
 80046c8:	0013      	movs	r3, r2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2203      	movs	r2, #3
 80046dc:	4013      	ands	r3, r2
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d123      	bne.n	800472a <HAL_GPIO_Init+0x13a>
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	08da      	lsrs	r2, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3208      	adds	r2, #8
 80046ea:	0092      	lsls	r2, r2, #2
 80046ec:	58d3      	ldr	r3, [r2, r3]
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2207      	movs	r2, #7
 80046f4:	4013      	ands	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	220f      	movs	r2, #15
 80046fa:	409a      	lsls	r2, r3
 80046fc:	0013      	movs	r3, r2
 80046fe:	43da      	mvns	r2, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	4013      	ands	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2107      	movs	r1, #7
 800470e:	400b      	ands	r3, r1
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	409a      	lsls	r2, r3
 8004714:	0013      	movs	r3, r2
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	08da      	lsrs	r2, r3, #3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3208      	adds	r2, #8
 8004724:	0092      	lsls	r2, r2, #2
 8004726:	6939      	ldr	r1, [r7, #16]
 8004728:	50d1      	str	r1, [r2, r3]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	2203      	movs	r2, #3
 8004736:	409a      	lsls	r2, r3
 8004738:	0013      	movs	r3, r2
 800473a:	43da      	mvns	r2, r3
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2203      	movs	r2, #3
 8004748:	401a      	ands	r2, r3
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	409a      	lsls	r2, r3
 8004750:	0013      	movs	r3, r2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	4313      	orrs	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	23c0      	movs	r3, #192	; 0xc0
 8004764:	029b      	lsls	r3, r3, #10
 8004766:	4013      	ands	r3, r2
 8004768:	d100      	bne.n	800476c <HAL_GPIO_Init+0x17c>
 800476a:	e0a0      	b.n	80048ae <HAL_GPIO_Init+0x2be>
 800476c:	4b57      	ldr	r3, [pc, #348]	; (80048cc <HAL_GPIO_Init+0x2dc>)
 800476e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004770:	4b56      	ldr	r3, [pc, #344]	; (80048cc <HAL_GPIO_Init+0x2dc>)
 8004772:	2101      	movs	r1, #1
 8004774:	430a      	orrs	r2, r1
 8004776:	635a      	str	r2, [r3, #52]	; 0x34
 8004778:	4a55      	ldr	r2, [pc, #340]	; (80048d0 <HAL_GPIO_Init+0x2e0>)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	089b      	lsrs	r3, r3, #2
 800477e:	3302      	adds	r3, #2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	589b      	ldr	r3, [r3, r2]
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2203      	movs	r2, #3
 800478a:	4013      	ands	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	220f      	movs	r2, #15
 8004790:	409a      	lsls	r2, r3
 8004792:	0013      	movs	r3, r2
 8004794:	43da      	mvns	r2, r3
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4013      	ands	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	23a0      	movs	r3, #160	; 0xa0
 80047a0:	05db      	lsls	r3, r3, #23
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d01f      	beq.n	80047e6 <HAL_GPIO_Init+0x1f6>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a4a      	ldr	r2, [pc, #296]	; (80048d4 <HAL_GPIO_Init+0x2e4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d019      	beq.n	80047e2 <HAL_GPIO_Init+0x1f2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a49      	ldr	r2, [pc, #292]	; (80048d8 <HAL_GPIO_Init+0x2e8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_GPIO_Init+0x1ee>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a48      	ldr	r2, [pc, #288]	; (80048dc <HAL_GPIO_Init+0x2ec>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00d      	beq.n	80047da <HAL_GPIO_Init+0x1ea>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a47      	ldr	r2, [pc, #284]	; (80048e0 <HAL_GPIO_Init+0x2f0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <HAL_GPIO_Init+0x1e6>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a46      	ldr	r2, [pc, #280]	; (80048e4 <HAL_GPIO_Init+0x2f4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_GPIO_Init+0x1e2>
 80047ce:	2305      	movs	r3, #5
 80047d0:	e00a      	b.n	80047e8 <HAL_GPIO_Init+0x1f8>
 80047d2:	2306      	movs	r3, #6
 80047d4:	e008      	b.n	80047e8 <HAL_GPIO_Init+0x1f8>
 80047d6:	2304      	movs	r3, #4
 80047d8:	e006      	b.n	80047e8 <HAL_GPIO_Init+0x1f8>
 80047da:	2303      	movs	r3, #3
 80047dc:	e004      	b.n	80047e8 <HAL_GPIO_Init+0x1f8>
 80047de:	2302      	movs	r3, #2
 80047e0:	e002      	b.n	80047e8 <HAL_GPIO_Init+0x1f8>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <HAL_GPIO_Init+0x1f8>
 80047e6:	2300      	movs	r3, #0
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	2103      	movs	r1, #3
 80047ec:	400a      	ands	r2, r1
 80047ee:	0092      	lsls	r2, r2, #2
 80047f0:	4093      	lsls	r3, r2
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	4935      	ldr	r1, [pc, #212]	; (80048d0 <HAL_GPIO_Init+0x2e0>)
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	3302      	adds	r3, #2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	505a      	str	r2, [r3, r1]
 8004806:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <HAL_GPIO_Init+0x2f8>)
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	43da      	mvns	r2, r3
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4013      	ands	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	035b      	lsls	r3, r3, #13
 800481e:	4013      	ands	r3, r2
 8004820:	d003      	beq.n	800482a <HAL_GPIO_Init+0x23a>
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	4b2f      	ldr	r3, [pc, #188]	; (80048e8 <HAL_GPIO_Init+0x2f8>)
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <HAL_GPIO_Init+0x2f8>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	43da      	mvns	r2, r3
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	039b      	lsls	r3, r3, #14
 8004848:	4013      	ands	r3, r2
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x264>
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4313      	orrs	r3, r2
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <HAL_GPIO_Init+0x2f8>)
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <HAL_GPIO_Init+0x2f8>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	43da      	mvns	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	029b      	lsls	r3, r3, #10
 8004872:	4013      	ands	r3, r2
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x28e>
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	4b1a      	ldr	r3, [pc, #104]	; (80048e8 <HAL_GPIO_Init+0x2f8>)
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	4b18      	ldr	r3, [pc, #96]	; (80048e8 <HAL_GPIO_Init+0x2f8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	43da      	mvns	r2, r3
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4013      	ands	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	2380      	movs	r3, #128	; 0x80
 800489a:	025b      	lsls	r3, r3, #9
 800489c:	4013      	ands	r3, r2
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x2b8>
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <HAL_GPIO_Init+0x2f8>)
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	3301      	adds	r3, #1
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	40da      	lsrs	r2, r3
 80048bc:	1e13      	subs	r3, r2, #0
 80048be:	d000      	beq.n	80048c2 <HAL_GPIO_Init+0x2d2>
 80048c0:	e6a2      	b.n	8004608 <HAL_GPIO_Init+0x18>
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b006      	add	sp, #24
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40010000 	.word	0x40010000
 80048d4:	50000400 	.word	0x50000400
 80048d8:	50000800 	.word	0x50000800
 80048dc:	50000c00 	.word	0x50000c00
 80048e0:	50001000 	.word	0x50001000
 80048e4:	50001c00 	.word	0x50001c00
 80048e8:	40010400 	.word	0x40010400

080048ec <HAL_GPIO_ReadPin>:
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	000a      	movs	r2, r1
 80048f6:	1cbb      	adds	r3, r7, #2
 80048f8:	801a      	strh	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	1cba      	adds	r2, r7, #2
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	4013      	ands	r3, r2
 8004904:	d004      	beq.n	8004910 <HAL_GPIO_ReadPin+0x24>
 8004906:	230f      	movs	r3, #15
 8004908:	18fb      	adds	r3, r7, r3
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e003      	b.n	8004918 <HAL_GPIO_ReadPin+0x2c>
 8004910:	230f      	movs	r3, #15
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
 8004918:	230f      	movs	r3, #15
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b004      	add	sp, #16
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_GPIO_WritePin>:
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	0008      	movs	r0, r1
 8004930:	0011      	movs	r1, r2
 8004932:	1cbb      	adds	r3, r7, #2
 8004934:	1c02      	adds	r2, r0, #0
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	1c7b      	adds	r3, r7, #1
 800493a:	1c0a      	adds	r2, r1, #0
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	1c7b      	adds	r3, r7, #1
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <HAL_GPIO_WritePin+0x2a>
 8004946:	1cbb      	adds	r3, r7, #2
 8004948:	881a      	ldrh	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	619a      	str	r2, [r3, #24]
 800494e:	e003      	b.n	8004958 <HAL_GPIO_WritePin+0x32>
 8004950:	1cbb      	adds	r3, r7, #2
 8004952:	881a      	ldrh	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	629a      	str	r2, [r3, #40]	; 0x28
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_RCC_OscConfig>:
 8004960:	b5b0      	push	{r4, r5, r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <HAL_RCC_OscConfig+0x14>
 800496e:	2301      	movs	r3, #1
 8004970:	f000 fb6c 	bl	800504c <HAL_RCC_OscConfig+0x6ec>
 8004974:	4bc8      	ldr	r3, [pc, #800]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	220c      	movs	r2, #12
 800497a:	4013      	ands	r3, r2
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	4bc6      	ldr	r3, [pc, #792]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	2380      	movs	r3, #128	; 0x80
 8004984:	025b      	lsls	r3, r3, #9
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2201      	movs	r2, #1
 8004990:	4013      	ands	r3, r2
 8004992:	d100      	bne.n	8004996 <HAL_RCC_OscConfig+0x36>
 8004994:	e07d      	b.n	8004a92 <HAL_RCC_OscConfig+0x132>
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d007      	beq.n	80049ac <HAL_RCC_OscConfig+0x4c>
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b0c      	cmp	r3, #12
 80049a0:	d112      	bne.n	80049c8 <HAL_RCC_OscConfig+0x68>
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	025b      	lsls	r3, r3, #9
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d10d      	bne.n	80049c8 <HAL_RCC_OscConfig+0x68>
 80049ac:	4bba      	ldr	r3, [pc, #744]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	029b      	lsls	r3, r3, #10
 80049b4:	4013      	ands	r3, r2
 80049b6:	d100      	bne.n	80049ba <HAL_RCC_OscConfig+0x5a>
 80049b8:	e06a      	b.n	8004a90 <HAL_RCC_OscConfig+0x130>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d166      	bne.n	8004a90 <HAL_RCC_OscConfig+0x130>
 80049c2:	2301      	movs	r3, #1
 80049c4:	f000 fb42 	bl	800504c <HAL_RCC_OscConfig+0x6ec>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	025b      	lsls	r3, r3, #9
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d107      	bne.n	80049e4 <HAL_RCC_OscConfig+0x84>
 80049d4:	4bb0      	ldr	r3, [pc, #704]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	4baf      	ldr	r3, [pc, #700]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 80049da:	2180      	movs	r1, #128	; 0x80
 80049dc:	0249      	lsls	r1, r1, #9
 80049de:	430a      	orrs	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e027      	b.n	8004a34 <HAL_RCC_OscConfig+0xd4>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	23a0      	movs	r3, #160	; 0xa0
 80049ea:	02db      	lsls	r3, r3, #11
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d10e      	bne.n	8004a0e <HAL_RCC_OscConfig+0xae>
 80049f0:	4ba9      	ldr	r3, [pc, #676]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	4ba8      	ldr	r3, [pc, #672]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 80049f6:	2180      	movs	r1, #128	; 0x80
 80049f8:	02c9      	lsls	r1, r1, #11
 80049fa:	430a      	orrs	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	4ba6      	ldr	r3, [pc, #664]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4ba5      	ldr	r3, [pc, #660]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	0249      	lsls	r1, r1, #9
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e012      	b.n	8004a34 <HAL_RCC_OscConfig+0xd4>
 8004a0e:	4ba2      	ldr	r3, [pc, #648]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4ba1      	ldr	r3, [pc, #644]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004a14:	49a1      	ldr	r1, [pc, #644]	; (8004c9c <HAL_RCC_OscConfig+0x33c>)
 8004a16:	400a      	ands	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	4b9f      	ldr	r3, [pc, #636]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	025b      	lsls	r3, r3, #9
 8004a22:	4013      	ands	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4b9b      	ldr	r3, [pc, #620]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	4b9a      	ldr	r3, [pc, #616]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004a2e:	499c      	ldr	r1, [pc, #624]	; (8004ca0 <HAL_RCC_OscConfig+0x340>)
 8004a30:	400a      	ands	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d014      	beq.n	8004a66 <HAL_RCC_OscConfig+0x106>
 8004a3c:	f7ff fb1a 	bl	8004074 <HAL_GetTick>
 8004a40:	0003      	movs	r3, r0
 8004a42:	617b      	str	r3, [r7, #20]
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0xf8>
 8004a46:	f7ff fb15 	bl	8004074 <HAL_GetTick>
 8004a4a:	0002      	movs	r2, r0
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b64      	cmp	r3, #100	; 0x64
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0xf8>
 8004a54:	2303      	movs	r3, #3
 8004a56:	e2f9      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004a58:	4b8f      	ldr	r3, [pc, #572]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	029b      	lsls	r3, r3, #10
 8004a60:	4013      	ands	r3, r2
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0xe6>
 8004a64:	e015      	b.n	8004a92 <HAL_RCC_OscConfig+0x132>
 8004a66:	f7ff fb05 	bl	8004074 <HAL_GetTick>
 8004a6a:	0003      	movs	r3, r0
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x122>
 8004a70:	f7ff fb00 	bl	8004074 <HAL_GetTick>
 8004a74:	0002      	movs	r2, r0
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x122>
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e2e4      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004a82:	4b85      	ldr	r3, [pc, #532]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	2380      	movs	r3, #128	; 0x80
 8004a88:	029b      	lsls	r3, r3, #10
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x110>
 8004a8e:	e000      	b.n	8004a92 <HAL_RCC_OscConfig+0x132>
 8004a90:	46c0      	nop			; (mov r8, r8)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2202      	movs	r2, #2
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d100      	bne.n	8004a9e <HAL_RCC_OscConfig+0x13e>
 8004a9c:	e099      	b.n	8004bd2 <HAL_RCC_OscConfig+0x272>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d009      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x160>
 8004aac:	4b7a      	ldr	r3, [pc, #488]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b79      	ldr	r3, [pc, #484]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004ab2:	2120      	movs	r1, #32
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	2220      	movs	r2, #32
 8004abc:	4393      	bics	r3, r2
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d005      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x172>
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	2b0c      	cmp	r3, #12
 8004aca:	d13e      	bne.n	8004b4a <HAL_RCC_OscConfig+0x1ea>
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d13b      	bne.n	8004b4a <HAL_RCC_OscConfig+0x1ea>
 8004ad2:	4b71      	ldr	r3, [pc, #452]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x186>
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x186>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e2b2      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004ae6:	4b6c      	ldr	r3, [pc, #432]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4a6e      	ldr	r2, [pc, #440]	; (8004ca4 <HAL_RCC_OscConfig+0x344>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	0019      	movs	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	021a      	lsls	r2, r3, #8
 8004af6:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	4b66      	ldr	r3, [pc, #408]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2209      	movs	r2, #9
 8004b02:	4393      	bics	r3, r2
 8004b04:	0019      	movs	r1, r3
 8004b06:	4b64      	ldr	r3, [pc, #400]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	f000 fbeb 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 8004b12:	0001      	movs	r1, r0
 8004b14:	4b60      	ldr	r3, [pc, #384]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	220f      	movs	r2, #15
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	4a62      	ldr	r2, [pc, #392]	; (8004ca8 <HAL_RCC_OscConfig+0x348>)
 8004b20:	5cd3      	ldrb	r3, [r2, r3]
 8004b22:	000a      	movs	r2, r1
 8004b24:	40da      	lsrs	r2, r3
 8004b26:	4b61      	ldr	r3, [pc, #388]	; (8004cac <HAL_RCC_OscConfig+0x34c>)
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	4b61      	ldr	r3, [pc, #388]	; (8004cb0 <HAL_RCC_OscConfig+0x350>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2513      	movs	r5, #19
 8004b30:	197c      	adds	r4, r7, r5
 8004b32:	0018      	movs	r0, r3
 8004b34:	f7ff fa58 	bl	8003fe8 <HAL_InitTick>
 8004b38:	0003      	movs	r3, r0
 8004b3a:	7023      	strb	r3, [r4, #0]
 8004b3c:	197b      	adds	r3, r7, r5
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d046      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x272>
 8004b44:	197b      	adds	r3, r7, r5
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	e280      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d027      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x240>
 8004b50:	4b51      	ldr	r3, [pc, #324]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2209      	movs	r2, #9
 8004b56:	4393      	bics	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	4b4f      	ldr	r3, [pc, #316]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	f7ff fa87 	bl	8004074 <HAL_GetTick>
 8004b66:	0003      	movs	r3, r0
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x21e>
 8004b6c:	f7ff fa82 	bl	8004074 <HAL_GetTick>
 8004b70:	0002      	movs	r2, r0
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x21e>
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e266      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004b7e:	4b46      	ldr	r3, [pc, #280]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2204      	movs	r2, #4
 8004b84:	4013      	ands	r3, r2
 8004b86:	d0f1      	beq.n	8004b6c <HAL_RCC_OscConfig+0x20c>
 8004b88:	4b43      	ldr	r3, [pc, #268]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4a45      	ldr	r2, [pc, #276]	; (8004ca4 <HAL_RCC_OscConfig+0x344>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	0019      	movs	r1, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	021a      	lsls	r2, r3, #8
 8004b98:	4b3f      	ldr	r3, [pc, #252]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	e018      	b.n	8004bd2 <HAL_RCC_OscConfig+0x272>
 8004ba0:	4b3d      	ldr	r3, [pc, #244]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b3c      	ldr	r3, [pc, #240]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	438a      	bics	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f7ff fa62 	bl	8004074 <HAL_GetTick>
 8004bb0:	0003      	movs	r3, r0
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x268>
 8004bb6:	f7ff fa5d 	bl	8004074 <HAL_GetTick>
 8004bba:	0002      	movs	r2, r0
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x268>
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e241      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004bc8:	4b33      	ldr	r3, [pc, #204]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d1f1      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x256>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2210      	movs	r2, #16
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d100      	bne.n	8004bde <HAL_RCC_OscConfig+0x27e>
 8004bdc:	e0a1      	b.n	8004d22 <HAL_RCC_OscConfig+0x3c2>
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d140      	bne.n	8004c66 <HAL_RCC_OscConfig+0x306>
 8004be4:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4013      	ands	r3, r2
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_OscConfig+0x29c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_OscConfig+0x29c>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e227      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004bfc:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	4a2c      	ldr	r2, [pc, #176]	; (8004cb4 <HAL_RCC_OscConfig+0x354>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	0019      	movs	r1, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1a      	ldr	r2, [r3, #32]
 8004c0a:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
 8004c10:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	021b      	lsls	r3, r3, #8
 8004c16:	0a19      	lsrs	r1, r3, #8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	061a      	lsls	r2, r3, #24
 8004c1e:	4b1e      	ldr	r3, [pc, #120]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	0b5b      	lsrs	r3, r3, #13
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	2280      	movs	r2, #128	; 0x80
 8004c2e:	0212      	lsls	r2, r2, #8
 8004c30:	409a      	lsls	r2, r3
 8004c32:	4b19      	ldr	r3, [pc, #100]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	210f      	movs	r1, #15
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	491a      	ldr	r1, [pc, #104]	; (8004ca8 <HAL_RCC_OscConfig+0x348>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	40da      	lsrs	r2, r3
 8004c42:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <HAL_RCC_OscConfig+0x34c>)
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <HAL_RCC_OscConfig+0x350>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2513      	movs	r5, #19
 8004c4c:	197c      	adds	r4, r7, r5
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7ff f9ca 	bl	8003fe8 <HAL_InitTick>
 8004c54:	0003      	movs	r3, r0
 8004c56:	7023      	strb	r3, [r4, #0]
 8004c58:	197b      	adds	r3, r7, r5
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d060      	beq.n	8004d22 <HAL_RCC_OscConfig+0x3c2>
 8004c60:	197b      	adds	r3, r7, r5
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	e1f2      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d03f      	beq.n	8004cee <HAL_RCC_OscConfig+0x38e>
 8004c6e:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_OscConfig+0x338>)
 8004c74:	2180      	movs	r1, #128	; 0x80
 8004c76:	0049      	lsls	r1, r1, #1
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f7ff f9fa 	bl	8004074 <HAL_GetTick>
 8004c80:	0003      	movs	r3, r0
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	e018      	b.n	8004cb8 <HAL_RCC_OscConfig+0x358>
 8004c86:	f7ff f9f5 	bl	8004074 <HAL_GetTick>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d911      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x358>
 8004c94:	2303      	movs	r3, #3
 8004c96:	e1d9      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	fffeffff 	.word	0xfffeffff
 8004ca0:	fffbffff 	.word	0xfffbffff
 8004ca4:	ffffe0ff 	.word	0xffffe0ff
 8004ca8:	0800dd98 	.word	0x0800dd98
 8004cac:	20000004 	.word	0x20000004
 8004cb0:	20000008 	.word	0x20000008
 8004cb4:	ffff1fff 	.word	0xffff1fff
 8004cb8:	4bc9      	ldr	r3, [pc, #804]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d0e0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x326>
 8004cc4:	4bc6      	ldr	r3, [pc, #792]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4ac6      	ldr	r2, [pc, #792]	; (8004fe4 <HAL_RCC_OscConfig+0x684>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	0019      	movs	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1a      	ldr	r2, [r3, #32]
 8004cd2:	4bc3      	ldr	r3, [pc, #780]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	4bc1      	ldr	r3, [pc, #772]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	0a19      	lsrs	r1, r3, #8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	061a      	lsls	r2, r3, #24
 8004ce6:	4bbe      	ldr	r3, [pc, #760]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
 8004cec:	e019      	b.n	8004d22 <HAL_RCC_OscConfig+0x3c2>
 8004cee:	4bbc      	ldr	r3, [pc, #752]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4bbb      	ldr	r3, [pc, #748]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004cf4:	49bc      	ldr	r1, [pc, #752]	; (8004fe8 <HAL_RCC_OscConfig+0x688>)
 8004cf6:	400a      	ands	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	f7ff f9bb 	bl	8004074 <HAL_GetTick>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x3b6>
 8004d04:	f7ff f9b6 	bl	8004074 <HAL_GetTick>
 8004d08:	0002      	movs	r2, r0
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x3b6>
 8004d12:	2303      	movs	r3, #3
 8004d14:	e19a      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004d16:	4bb2      	ldr	r3, [pc, #712]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x3a4>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2208      	movs	r2, #8
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d036      	beq.n	8004d9a <HAL_RCC_OscConfig+0x43a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d019      	beq.n	8004d68 <HAL_RCC_OscConfig+0x408>
 8004d34:	4baa      	ldr	r3, [pc, #680]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d38:	4ba9      	ldr	r3, [pc, #676]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	651a      	str	r2, [r3, #80]	; 0x50
 8004d40:	f7ff f998 	bl	8004074 <HAL_GetTick>
 8004d44:	0003      	movs	r3, r0
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x3fc>
 8004d4a:	f7ff f993 	bl	8004074 <HAL_GetTick>
 8004d4e:	0002      	movs	r2, r0
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x3fc>
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e177      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004d5c:	4ba0      	ldr	r3, [pc, #640]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d60:	2202      	movs	r2, #2
 8004d62:	4013      	ands	r3, r2
 8004d64:	d0f1      	beq.n	8004d4a <HAL_RCC_OscConfig+0x3ea>
 8004d66:	e018      	b.n	8004d9a <HAL_RCC_OscConfig+0x43a>
 8004d68:	4b9d      	ldr	r3, [pc, #628]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d6c:	4b9c      	ldr	r3, [pc, #624]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004d6e:	2101      	movs	r1, #1
 8004d70:	438a      	bics	r2, r1
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50
 8004d74:	f7ff f97e 	bl	8004074 <HAL_GetTick>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x430>
 8004d7e:	f7ff f979 	bl	8004074 <HAL_GetTick>
 8004d82:	0002      	movs	r2, r0
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x430>
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e15d      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004d90:	4b93      	ldr	r3, [pc, #588]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d94:	2202      	movs	r2, #2
 8004d96:	4013      	ands	r3, r2
 8004d98:	d1f1      	bne.n	8004d7e <HAL_RCC_OscConfig+0x41e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	4013      	ands	r3, r2
 8004da2:	d100      	bne.n	8004da6 <HAL_RCC_OscConfig+0x446>
 8004da4:	e0ae      	b.n	8004f04 <HAL_RCC_OscConfig+0x5a4>
 8004da6:	2023      	movs	r0, #35	; 0x23
 8004da8:	183b      	adds	r3, r7, r0
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	4b8c      	ldr	r3, [pc, #560]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	055b      	lsls	r3, r3, #21
 8004db6:	4013      	ands	r3, r2
 8004db8:	d109      	bne.n	8004dce <HAL_RCC_OscConfig+0x46e>
 8004dba:	4b89      	ldr	r3, [pc, #548]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dbe:	4b88      	ldr	r3, [pc, #544]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004dc0:	2180      	movs	r1, #128	; 0x80
 8004dc2:	0549      	lsls	r1, r1, #21
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
 8004dc8:	183b      	adds	r3, r7, r0
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	4b87      	ldr	r3, [pc, #540]	; (8004fec <HAL_RCC_OscConfig+0x68c>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d11a      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4b0>
 8004dda:	4b84      	ldr	r3, [pc, #528]	; (8004fec <HAL_RCC_OscConfig+0x68c>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b83      	ldr	r3, [pc, #524]	; (8004fec <HAL_RCC_OscConfig+0x68c>)
 8004de0:	2180      	movs	r1, #128	; 0x80
 8004de2:	0049      	lsls	r1, r1, #1
 8004de4:	430a      	orrs	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	f7ff f944 	bl	8004074 <HAL_GetTick>
 8004dec:	0003      	movs	r3, r0
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x4a4>
 8004df2:	f7ff f93f 	bl	8004074 <HAL_GetTick>
 8004df6:	0002      	movs	r2, r0
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b64      	cmp	r3, #100	; 0x64
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x4a4>
 8004e00:	2303      	movs	r3, #3
 8004e02:	e123      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004e04:	4b79      	ldr	r3, [pc, #484]	; (8004fec <HAL_RCC_OscConfig+0x68c>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x492>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689a      	ldr	r2, [r3, #8]
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d107      	bne.n	8004e2c <HAL_RCC_OscConfig+0x4cc>
 8004e1c:	4b70      	ldr	r3, [pc, #448]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e20:	4b6f      	ldr	r3, [pc, #444]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e22:	2180      	movs	r1, #128	; 0x80
 8004e24:	0049      	lsls	r1, r1, #1
 8004e26:	430a      	orrs	r2, r1
 8004e28:	651a      	str	r2, [r3, #80]	; 0x50
 8004e2a:	e031      	b.n	8004e90 <HAL_RCC_OscConfig+0x530>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10c      	bne.n	8004e4e <HAL_RCC_OscConfig+0x4ee>
 8004e34:	4b6a      	ldr	r3, [pc, #424]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e38:	4b69      	ldr	r3, [pc, #420]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e3a:	496b      	ldr	r1, [pc, #428]	; (8004fe8 <HAL_RCC_OscConfig+0x688>)
 8004e3c:	400a      	ands	r2, r1
 8004e3e:	651a      	str	r2, [r3, #80]	; 0x50
 8004e40:	4b67      	ldr	r3, [pc, #412]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e44:	4b66      	ldr	r3, [pc, #408]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e46:	496a      	ldr	r1, [pc, #424]	; (8004ff0 <HAL_RCC_OscConfig+0x690>)
 8004e48:	400a      	ands	r2, r1
 8004e4a:	651a      	str	r2, [r3, #80]	; 0x50
 8004e4c:	e020      	b.n	8004e90 <HAL_RCC_OscConfig+0x530>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	23a0      	movs	r3, #160	; 0xa0
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d10e      	bne.n	8004e78 <HAL_RCC_OscConfig+0x518>
 8004e5a:	4b61      	ldr	r3, [pc, #388]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e5e:	4b60      	ldr	r3, [pc, #384]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e60:	2180      	movs	r1, #128	; 0x80
 8004e62:	00c9      	lsls	r1, r1, #3
 8004e64:	430a      	orrs	r2, r1
 8004e66:	651a      	str	r2, [r3, #80]	; 0x50
 8004e68:	4b5d      	ldr	r3, [pc, #372]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e6c:	4b5c      	ldr	r3, [pc, #368]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e6e:	2180      	movs	r1, #128	; 0x80
 8004e70:	0049      	lsls	r1, r1, #1
 8004e72:	430a      	orrs	r2, r1
 8004e74:	651a      	str	r2, [r3, #80]	; 0x50
 8004e76:	e00b      	b.n	8004e90 <HAL_RCC_OscConfig+0x530>
 8004e78:	4b59      	ldr	r3, [pc, #356]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e7c:	4b58      	ldr	r3, [pc, #352]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e7e:	495a      	ldr	r1, [pc, #360]	; (8004fe8 <HAL_RCC_OscConfig+0x688>)
 8004e80:	400a      	ands	r2, r1
 8004e82:	651a      	str	r2, [r3, #80]	; 0x50
 8004e84:	4b56      	ldr	r3, [pc, #344]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e88:	4b55      	ldr	r3, [pc, #340]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004e8a:	4959      	ldr	r1, [pc, #356]	; (8004ff0 <HAL_RCC_OscConfig+0x690>)
 8004e8c:	400a      	ands	r2, r1
 8004e8e:	651a      	str	r2, [r3, #80]	; 0x50
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d015      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x564>
 8004e98:	f7ff f8ec 	bl	8004074 <HAL_GetTick>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e009      	b.n	8004eb6 <HAL_RCC_OscConfig+0x556>
 8004ea2:	f7ff f8e7 	bl	8004074 <HAL_GetTick>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	4a51      	ldr	r2, [pc, #324]	; (8004ff4 <HAL_RCC_OscConfig+0x694>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x556>
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e0ca      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004eb6:	4b4a      	ldr	r3, [pc, #296]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004eb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d0ef      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x542>
 8004ec2:	e014      	b.n	8004eee <HAL_RCC_OscConfig+0x58e>
 8004ec4:	f7ff f8d6 	bl	8004074 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e009      	b.n	8004ee2 <HAL_RCC_OscConfig+0x582>
 8004ece:	f7ff f8d1 	bl	8004074 <HAL_GetTick>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	4a46      	ldr	r2, [pc, #280]	; (8004ff4 <HAL_RCC_OscConfig+0x694>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x582>
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e0b4      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004ee2:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee6:	2380      	movs	r3, #128	; 0x80
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4013      	ands	r3, r2
 8004eec:	d1ef      	bne.n	8004ece <HAL_RCC_OscConfig+0x56e>
 8004eee:	2323      	movs	r3, #35	; 0x23
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d105      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5a4>
 8004ef8:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efc:	4b38      	ldr	r3, [pc, #224]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004efe:	493e      	ldr	r1, [pc, #248]	; (8004ff8 <HAL_RCC_OscConfig+0x698>)
 8004f00:	400a      	ands	r2, r1
 8004f02:	639a      	str	r2, [r3, #56]	; 0x38
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d100      	bne.n	8004f0e <HAL_RCC_OscConfig+0x5ae>
 8004f0c:	e09d      	b.n	800504a <HAL_RCC_OscConfig+0x6ea>
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	d100      	bne.n	8004f16 <HAL_RCC_OscConfig+0x5b6>
 8004f14:	e076      	b.n	8005004 <HAL_RCC_OscConfig+0x6a4>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d145      	bne.n	8004faa <HAL_RCC_OscConfig+0x64a>
 8004f1e:	4b30      	ldr	r3, [pc, #192]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b2f      	ldr	r3, [pc, #188]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004f24:	4935      	ldr	r1, [pc, #212]	; (8004ffc <HAL_RCC_OscConfig+0x69c>)
 8004f26:	400a      	ands	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	f7ff f8a3 	bl	8004074 <HAL_GetTick>
 8004f2e:	0003      	movs	r3, r0
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x5e6>
 8004f34:	f7ff f89e 	bl	8004074 <HAL_GetTick>
 8004f38:	0002      	movs	r2, r0
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x5e6>
 8004f42:	2303      	movs	r3, #3
 8004f44:	e082      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004f46:	4b26      	ldr	r3, [pc, #152]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	049b      	lsls	r3, r3, #18
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x5d4>
 8004f52:	4b23      	ldr	r3, [pc, #140]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <HAL_RCC_OscConfig+0x6a0>)
 8004f58:	4013      	ands	r3, r2
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	4b1c      	ldr	r3, [pc, #112]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	60da      	str	r2, [r3, #12]
 8004f72:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4b1a      	ldr	r3, [pc, #104]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004f78:	2180      	movs	r1, #128	; 0x80
 8004f7a:	0449      	lsls	r1, r1, #17
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f7ff f878 	bl	8004074 <HAL_GetTick>
 8004f84:	0003      	movs	r3, r0
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x63c>
 8004f8a:	f7ff f873 	bl	8004074 <HAL_GetTick>
 8004f8e:	0002      	movs	r2, r0
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x63c>
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e057      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004f9c:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	049b      	lsls	r3, r3, #18
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x62a>
 8004fa8:	e04f      	b.n	800504a <HAL_RCC_OscConfig+0x6ea>
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004fb0:	4912      	ldr	r1, [pc, #72]	; (8004ffc <HAL_RCC_OscConfig+0x69c>)
 8004fb2:	400a      	ands	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	f7ff f85d 	bl	8004074 <HAL_GetTick>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x672>
 8004fc0:	f7ff f858 	bl	8004074 <HAL_GetTick>
 8004fc4:	0002      	movs	r2, r0
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x672>
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e03c      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8004fd2:	4b03      	ldr	r3, [pc, #12]	; (8004fe0 <HAL_RCC_OscConfig+0x680>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	049b      	lsls	r3, r3, #18
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x660>
 8004fde:	e034      	b.n	800504a <HAL_RCC_OscConfig+0x6ea>
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	ffff1fff 	.word	0xffff1fff
 8004fe8:	fffffeff 	.word	0xfffffeff
 8004fec:	40007000 	.word	0x40007000
 8004ff0:	fffffbff 	.word	0xfffffbff
 8004ff4:	00001388 	.word	0x00001388
 8004ff8:	efffffff 	.word	0xefffffff
 8004ffc:	feffffff 	.word	0xfeffffff
 8005000:	ff02ffff 	.word	0xff02ffff
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_RCC_OscConfig+0x6b0>
 800500c:	2301      	movs	r3, #1
 800500e:	e01d      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 8005010:	4b10      	ldr	r3, [pc, #64]	; (8005054 <HAL_RCC_OscConfig+0x6f4>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	025b      	lsls	r3, r3, #9
 800501c:	401a      	ands	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	429a      	cmp	r2, r3
 8005024:	d10f      	bne.n	8005046 <HAL_RCC_OscConfig+0x6e6>
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	23f0      	movs	r3, #240	; 0xf0
 800502a:	039b      	lsls	r3, r3, #14
 800502c:	401a      	ands	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	429a      	cmp	r2, r3
 8005034:	d107      	bne.n	8005046 <HAL_RCC_OscConfig+0x6e6>
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	23c0      	movs	r3, #192	; 0xc0
 800503a:	041b      	lsls	r3, r3, #16
 800503c:	401a      	ands	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	429a      	cmp	r2, r3
 8005044:	d001      	beq.n	800504a <HAL_RCC_OscConfig+0x6ea>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <HAL_RCC_OscConfig+0x6ec>
 800504a:	2300      	movs	r3, #0
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b00a      	add	sp, #40	; 0x28
 8005052:	bdb0      	pop	{r4, r5, r7, pc}
 8005054:	40021000 	.word	0x40021000

08005058 <HAL_RCC_ClockConfig>:
 8005058:	b5b0      	push	{r4, r5, r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <HAL_RCC_ClockConfig+0x14>
 8005068:	2301      	movs	r3, #1
 800506a:	e128      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 800506c:	4b96      	ldr	r3, [pc, #600]	; (80052c8 <HAL_RCC_ClockConfig+0x270>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	4013      	ands	r3, r2
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d91e      	bls.n	80050b8 <HAL_RCC_ClockConfig+0x60>
 800507a:	4b93      	ldr	r3, [pc, #588]	; (80052c8 <HAL_RCC_ClockConfig+0x270>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2201      	movs	r2, #1
 8005080:	4393      	bics	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	4b90      	ldr	r3, [pc, #576]	; (80052c8 <HAL_RCC_ClockConfig+0x270>)
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f7fe fff2 	bl	8004074 <HAL_GetTick>
 8005090:	0003      	movs	r3, r0
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e009      	b.n	80050aa <HAL_RCC_ClockConfig+0x52>
 8005096:	f7fe ffed 	bl	8004074 <HAL_GetTick>
 800509a:	0002      	movs	r2, r0
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	4a8a      	ldr	r2, [pc, #552]	; (80052cc <HAL_RCC_ClockConfig+0x274>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_ClockConfig+0x52>
 80050a6:	2303      	movs	r3, #3
 80050a8:	e109      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 80050aa:	4b87      	ldr	r3, [pc, #540]	; (80052c8 <HAL_RCC_ClockConfig+0x270>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2201      	movs	r2, #1
 80050b0:	4013      	ands	r3, r2
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d1ee      	bne.n	8005096 <HAL_RCC_ClockConfig+0x3e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2202      	movs	r2, #2
 80050be:	4013      	ands	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x7e>
 80050c2:	4b83      	ldr	r3, [pc, #524]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	22f0      	movs	r2, #240	; 0xf0
 80050c8:	4393      	bics	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	4b7f      	ldr	r3, [pc, #508]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 80050d2:	430a      	orrs	r2, r1
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2201      	movs	r2, #1
 80050dc:	4013      	ands	r3, r2
 80050de:	d100      	bne.n	80050e2 <HAL_RCC_ClockConfig+0x8a>
 80050e0:	e089      	b.n	80051f6 <HAL_RCC_ClockConfig+0x19e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xa2>
 80050ea:	4b79      	ldr	r3, [pc, #484]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	029b      	lsls	r3, r3, #10
 80050f2:	4013      	ands	r3, r2
 80050f4:	d120      	bne.n	8005138 <HAL_RCC_ClockConfig+0xe0>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e0e1      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d107      	bne.n	8005112 <HAL_RCC_ClockConfig+0xba>
 8005102:	4b73      	ldr	r3, [pc, #460]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	049b      	lsls	r3, r3, #18
 800510a:	4013      	ands	r3, r2
 800510c:	d114      	bne.n	8005138 <HAL_RCC_ClockConfig+0xe0>
 800510e:	2301      	movs	r3, #1
 8005110:	e0d5      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d106      	bne.n	8005128 <HAL_RCC_ClockConfig+0xd0>
 800511a:	4b6d      	ldr	r3, [pc, #436]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2204      	movs	r2, #4
 8005120:	4013      	ands	r3, r2
 8005122:	d109      	bne.n	8005138 <HAL_RCC_ClockConfig+0xe0>
 8005124:	2301      	movs	r3, #1
 8005126:	e0ca      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 8005128:	4b69      	ldr	r3, [pc, #420]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4013      	ands	r3, r2
 8005132:	d101      	bne.n	8005138 <HAL_RCC_ClockConfig+0xe0>
 8005134:	2301      	movs	r3, #1
 8005136:	e0c2      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 8005138:	4b65      	ldr	r3, [pc, #404]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2203      	movs	r2, #3
 800513e:	4393      	bics	r3, r2
 8005140:	0019      	movs	r1, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	4b62      	ldr	r3, [pc, #392]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 8005148:	430a      	orrs	r2, r1
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	f7fe ff92 	bl	8004074 <HAL_GetTick>
 8005150:	0003      	movs	r3, r0
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d111      	bne.n	8005180 <HAL_RCC_ClockConfig+0x128>
 800515c:	e009      	b.n	8005172 <HAL_RCC_ClockConfig+0x11a>
 800515e:	f7fe ff89 	bl	8004074 <HAL_GetTick>
 8005162:	0002      	movs	r2, r0
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	4a58      	ldr	r2, [pc, #352]	; (80052cc <HAL_RCC_ClockConfig+0x274>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0x11a>
 800516e:	2303      	movs	r3, #3
 8005170:	e0a5      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 8005172:	4b57      	ldr	r3, [pc, #348]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	220c      	movs	r2, #12
 8005178:	4013      	ands	r3, r2
 800517a:	2b08      	cmp	r3, #8
 800517c:	d1ef      	bne.n	800515e <HAL_RCC_ClockConfig+0x106>
 800517e:	e03a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x19e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d111      	bne.n	80051ac <HAL_RCC_ClockConfig+0x154>
 8005188:	e009      	b.n	800519e <HAL_RCC_ClockConfig+0x146>
 800518a:	f7fe ff73 	bl	8004074 <HAL_GetTick>
 800518e:	0002      	movs	r2, r0
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	4a4d      	ldr	r2, [pc, #308]	; (80052cc <HAL_RCC_ClockConfig+0x274>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_ClockConfig+0x146>
 800519a:	2303      	movs	r3, #3
 800519c:	e08f      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 800519e:	4b4c      	ldr	r3, [pc, #304]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	220c      	movs	r2, #12
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b0c      	cmp	r3, #12
 80051a8:	d1ef      	bne.n	800518a <HAL_RCC_ClockConfig+0x132>
 80051aa:	e024      	b.n	80051f6 <HAL_RCC_ClockConfig+0x19e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d11b      	bne.n	80051ec <HAL_RCC_ClockConfig+0x194>
 80051b4:	e009      	b.n	80051ca <HAL_RCC_ClockConfig+0x172>
 80051b6:	f7fe ff5d 	bl	8004074 <HAL_GetTick>
 80051ba:	0002      	movs	r2, r0
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	4a42      	ldr	r2, [pc, #264]	; (80052cc <HAL_RCC_ClockConfig+0x274>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_ClockConfig+0x172>
 80051c6:	2303      	movs	r3, #3
 80051c8:	e079      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 80051ca:	4b41      	ldr	r3, [pc, #260]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	220c      	movs	r2, #12
 80051d0:	4013      	ands	r3, r2
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d1ef      	bne.n	80051b6 <HAL_RCC_ClockConfig+0x15e>
 80051d6:	e00e      	b.n	80051f6 <HAL_RCC_ClockConfig+0x19e>
 80051d8:	f7fe ff4c 	bl	8004074 <HAL_GetTick>
 80051dc:	0002      	movs	r2, r0
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	4a3a      	ldr	r2, [pc, #232]	; (80052cc <HAL_RCC_ClockConfig+0x274>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_ClockConfig+0x194>
 80051e8:	2303      	movs	r3, #3
 80051ea:	e068      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 80051ec:	4b38      	ldr	r3, [pc, #224]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	220c      	movs	r2, #12
 80051f2:	4013      	ands	r3, r2
 80051f4:	d1f0      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x180>
 80051f6:	4b34      	ldr	r3, [pc, #208]	; (80052c8 <HAL_RCC_ClockConfig+0x270>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2201      	movs	r2, #1
 80051fc:	4013      	ands	r3, r2
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d21e      	bcs.n	8005242 <HAL_RCC_ClockConfig+0x1ea>
 8005204:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <HAL_RCC_ClockConfig+0x270>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2201      	movs	r2, #1
 800520a:	4393      	bics	r3, r2
 800520c:	0019      	movs	r1, r3
 800520e:	4b2e      	ldr	r3, [pc, #184]	; (80052c8 <HAL_RCC_ClockConfig+0x270>)
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	f7fe ff2d 	bl	8004074 <HAL_GetTick>
 800521a:	0003      	movs	r3, r0
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	e009      	b.n	8005234 <HAL_RCC_ClockConfig+0x1dc>
 8005220:	f7fe ff28 	bl	8004074 <HAL_GetTick>
 8005224:	0002      	movs	r2, r0
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	4a28      	ldr	r2, [pc, #160]	; (80052cc <HAL_RCC_ClockConfig+0x274>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_ClockConfig+0x1dc>
 8005230:	2303      	movs	r3, #3
 8005232:	e044      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 8005234:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <HAL_RCC_ClockConfig+0x270>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	4013      	ands	r3, r2
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d1ee      	bne.n	8005220 <HAL_RCC_ClockConfig+0x1c8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2204      	movs	r2, #4
 8005248:	4013      	ands	r3, r2
 800524a:	d009      	beq.n	8005260 <HAL_RCC_ClockConfig+0x208>
 800524c:	4b20      	ldr	r3, [pc, #128]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a20      	ldr	r2, [pc, #128]	; (80052d4 <HAL_RCC_ClockConfig+0x27c>)
 8005252:	4013      	ands	r3, r2
 8005254:	0019      	movs	r1, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 800525c:	430a      	orrs	r2, r1
 800525e:	60da      	str	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2208      	movs	r2, #8
 8005266:	4013      	ands	r3, r2
 8005268:	d00a      	beq.n	8005280 <HAL_RCC_ClockConfig+0x228>
 800526a:	4b19      	ldr	r3, [pc, #100]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	4a1a      	ldr	r2, [pc, #104]	; (80052d8 <HAL_RCC_ClockConfig+0x280>)
 8005270:	4013      	ands	r3, r2
 8005272:	0019      	movs	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	00da      	lsls	r2, r3, #3
 800527a:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 800527c:	430a      	orrs	r2, r1
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	f000 f832 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 8005284:	0001      	movs	r1, r0
 8005286:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <HAL_RCC_ClockConfig+0x278>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	220f      	movs	r2, #15
 800528e:	4013      	ands	r3, r2
 8005290:	4a12      	ldr	r2, [pc, #72]	; (80052dc <HAL_RCC_ClockConfig+0x284>)
 8005292:	5cd3      	ldrb	r3, [r2, r3]
 8005294:	000a      	movs	r2, r1
 8005296:	40da      	lsrs	r2, r3
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <HAL_RCC_ClockConfig+0x288>)
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <HAL_RCC_ClockConfig+0x28c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	250b      	movs	r5, #11
 80052a2:	197c      	adds	r4, r7, r5
 80052a4:	0018      	movs	r0, r3
 80052a6:	f7fe fe9f 	bl	8003fe8 <HAL_InitTick>
 80052aa:	0003      	movs	r3, r0
 80052ac:	7023      	strb	r3, [r4, #0]
 80052ae:	197b      	adds	r3, r7, r5
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_RCC_ClockConfig+0x264>
 80052b6:	197b      	adds	r3, r7, r5
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	e000      	b.n	80052be <HAL_RCC_ClockConfig+0x266>
 80052bc:	2300      	movs	r3, #0
 80052be:	0018      	movs	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	b004      	add	sp, #16
 80052c4:	bdb0      	pop	{r4, r5, r7, pc}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	40022000 	.word	0x40022000
 80052cc:	00001388 	.word	0x00001388
 80052d0:	40021000 	.word	0x40021000
 80052d4:	fffff8ff 	.word	0xfffff8ff
 80052d8:	ffffc7ff 	.word	0xffffc7ff
 80052dc:	0800dd98 	.word	0x0800dd98
 80052e0:	20000004 	.word	0x20000004
 80052e4:	20000008 	.word	0x20000008

080052e8 <HAL_RCC_GetSysClockFreq>:
 80052e8:	b5b0      	push	{r4, r5, r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4b4c      	ldr	r3, [pc, #304]	; (8005420 <HAL_RCC_GetSysClockFreq+0x138>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f6:	230c      	movs	r3, #12
 80052f8:	4013      	ands	r3, r2
 80052fa:	2b0c      	cmp	r3, #12
 80052fc:	d014      	beq.n	8005328 <HAL_RCC_GetSysClockFreq+0x40>
 80052fe:	d900      	bls.n	8005302 <HAL_RCC_GetSysClockFreq+0x1a>
 8005300:	e07b      	b.n	80053fa <HAL_RCC_GetSysClockFreq+0x112>
 8005302:	2b04      	cmp	r3, #4
 8005304:	d002      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x24>
 8005306:	2b08      	cmp	r3, #8
 8005308:	d00b      	beq.n	8005322 <HAL_RCC_GetSysClockFreq+0x3a>
 800530a:	e076      	b.n	80053fa <HAL_RCC_GetSysClockFreq+0x112>
 800530c:	4b44      	ldr	r3, [pc, #272]	; (8005420 <HAL_RCC_GetSysClockFreq+0x138>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2210      	movs	r2, #16
 8005312:	4013      	ands	r3, r2
 8005314:	d002      	beq.n	800531c <HAL_RCC_GetSysClockFreq+0x34>
 8005316:	4b43      	ldr	r3, [pc, #268]	; (8005424 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005318:	633b      	str	r3, [r7, #48]	; 0x30
 800531a:	e07c      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x12e>
 800531c:	4b42      	ldr	r3, [pc, #264]	; (8005428 <HAL_RCC_GetSysClockFreq+0x140>)
 800531e:	633b      	str	r3, [r7, #48]	; 0x30
 8005320:	e079      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x12e>
 8005322:	4b42      	ldr	r3, [pc, #264]	; (800542c <HAL_RCC_GetSysClockFreq+0x144>)
 8005324:	633b      	str	r3, [r7, #48]	; 0x30
 8005326:	e076      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x12e>
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	0c9a      	lsrs	r2, r3, #18
 800532c:	230f      	movs	r3, #15
 800532e:	401a      	ands	r2, r3
 8005330:	4b3f      	ldr	r3, [pc, #252]	; (8005430 <HAL_RCC_GetSysClockFreq+0x148>)
 8005332:	5c9b      	ldrb	r3, [r3, r2]
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	0d9a      	lsrs	r2, r3, #22
 800533a:	2303      	movs	r3, #3
 800533c:	4013      	ands	r3, r2
 800533e:	3301      	adds	r3, #1
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
 8005342:	4b37      	ldr	r3, [pc, #220]	; (8005420 <HAL_RCC_GetSysClockFreq+0x138>)
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	025b      	lsls	r3, r3, #9
 800534a:	4013      	ands	r3, r2
 800534c:	d01a      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x9c>
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	4a35      	ldr	r2, [pc, #212]	; (800542c <HAL_RCC_GetSysClockFreq+0x144>)
 8005358:	2300      	movs	r3, #0
 800535a:	69b8      	ldr	r0, [r7, #24]
 800535c:	69f9      	ldr	r1, [r7, #28]
 800535e:	f7fb f8c3 	bl	80004e8 <__aeabi_lmul>
 8005362:	0002      	movs	r2, r0
 8005364:	000b      	movs	r3, r1
 8005366:	0010      	movs	r0, r2
 8005368:	0019      	movs	r1, r3
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	2300      	movs	r3, #0
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f7fb f897 	bl	80004a8 <__aeabi_uldivmod>
 800537a:	0002      	movs	r2, r0
 800537c:	000b      	movs	r3, r1
 800537e:	0013      	movs	r3, r2
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
 8005382:	e037      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x10c>
 8005384:	4b26      	ldr	r3, [pc, #152]	; (8005420 <HAL_RCC_GetSysClockFreq+0x138>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2210      	movs	r2, #16
 800538a:	4013      	ands	r3, r2
 800538c:	d01a      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0xdc>
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4a23      	ldr	r2, [pc, #140]	; (8005424 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005398:	2300      	movs	r3, #0
 800539a:	68b8      	ldr	r0, [r7, #8]
 800539c:	68f9      	ldr	r1, [r7, #12]
 800539e:	f7fb f8a3 	bl	80004e8 <__aeabi_lmul>
 80053a2:	0002      	movs	r2, r0
 80053a4:	000b      	movs	r3, r1
 80053a6:	0010      	movs	r0, r2
 80053a8:	0019      	movs	r1, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	2300      	movs	r3, #0
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f7fb f877 	bl	80004a8 <__aeabi_uldivmod>
 80053ba:	0002      	movs	r2, r0
 80053bc:	000b      	movs	r3, r1
 80053be:	0013      	movs	r3, r2
 80053c0:	637b      	str	r3, [r7, #52]	; 0x34
 80053c2:	e017      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x10c>
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	0018      	movs	r0, r3
 80053c8:	2300      	movs	r3, #0
 80053ca:	0019      	movs	r1, r3
 80053cc:	4a16      	ldr	r2, [pc, #88]	; (8005428 <HAL_RCC_GetSysClockFreq+0x140>)
 80053ce:	2300      	movs	r3, #0
 80053d0:	f7fb f88a 	bl	80004e8 <__aeabi_lmul>
 80053d4:	0002      	movs	r2, r0
 80053d6:	000b      	movs	r3, r1
 80053d8:	0010      	movs	r0, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	001c      	movs	r4, r3
 80053e0:	2300      	movs	r3, #0
 80053e2:	001d      	movs	r5, r3
 80053e4:	0022      	movs	r2, r4
 80053e6:	002b      	movs	r3, r5
 80053e8:	f7fb f85e 	bl	80004a8 <__aeabi_uldivmod>
 80053ec:	0002      	movs	r2, r0
 80053ee:	000b      	movs	r3, r1
 80053f0:	0013      	movs	r3, r2
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
 80053f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30
 80053f8:	e00d      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x12e>
 80053fa:	4b09      	ldr	r3, [pc, #36]	; (8005420 <HAL_RCC_GetSysClockFreq+0x138>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	0b5b      	lsrs	r3, r3, #13
 8005400:	2207      	movs	r2, #7
 8005402:	4013      	ands	r3, r2
 8005404:	623b      	str	r3, [r7, #32]
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	3301      	adds	r3, #1
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	0212      	lsls	r2, r2, #8
 800540e:	409a      	lsls	r2, r3
 8005410:	0013      	movs	r3, r2
 8005412:	633b      	str	r3, [r7, #48]	; 0x30
 8005414:	46c0      	nop			; (mov r8, r8)
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	0018      	movs	r0, r3
 800541a:	46bd      	mov	sp, r7
 800541c:	b00e      	add	sp, #56	; 0x38
 800541e:	bdb0      	pop	{r4, r5, r7, pc}
 8005420:	40021000 	.word	0x40021000
 8005424:	003d0900 	.word	0x003d0900
 8005428:	00f42400 	.word	0x00f42400
 800542c:	007a1200 	.word	0x007a1200
 8005430:	0800dda8 	.word	0x0800dda8

08005434 <HAL_SPI_Init>:
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_SPI_Init+0x12>
 8005442:	2301      	movs	r3, #1
 8005444:	e07b      	b.n	800553e <HAL_SPI_Init+0x10a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <HAL_SPI_Init+0x2e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	2382      	movs	r3, #130	; 0x82
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	429a      	cmp	r2, r3
 8005458:	d009      	beq.n	800546e <HAL_SPI_Init+0x3a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	61da      	str	r2, [r3, #28]
 8005460:	e005      	b.n	800546e <HAL_SPI_Init+0x3a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	611a      	str	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	615a      	str	r2, [r3, #20]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2251      	movs	r2, #81	; 0x51
 8005478:	5c9b      	ldrb	r3, [r3, r2]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_SPI_Init+0x5c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2250      	movs	r2, #80	; 0x50
 8005484:	2100      	movs	r1, #0
 8005486:	5499      	strb	r1, [r3, r2]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	0018      	movs	r0, r3
 800548c:	f7fe fc12 	bl	8003cb4 <HAL_SPI_MspInit>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2251      	movs	r2, #81	; 0x51
 8005494:	2102      	movs	r1, #2
 8005496:	5499      	strb	r1, [r3, r2]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2140      	movs	r1, #64	; 0x40
 80054a4:	438a      	bics	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	2382      	movs	r3, #130	; 0x82
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	401a      	ands	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6899      	ldr	r1, [r3, #8]
 80054b6:	2384      	movs	r3, #132	; 0x84
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	400b      	ands	r3, r1
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68d9      	ldr	r1, [r3, #12]
 80054c2:	2380      	movs	r3, #128	; 0x80
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	400b      	ands	r3, r1
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2102      	movs	r1, #2
 80054d0:	400b      	ands	r3, r1
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	2101      	movs	r1, #1
 80054da:	400b      	ands	r3, r1
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6999      	ldr	r1, [r3, #24]
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	400b      	ands	r3, r1
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	2138      	movs	r1, #56	; 0x38
 80054f0:	400b      	ands	r3, r1
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	2180      	movs	r1, #128	; 0x80
 80054fa:	400b      	ands	r3, r1
 80054fc:	431a      	orrs	r2, r3
 80054fe:	0011      	movs	r1, r2
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	019b      	lsls	r3, r3, #6
 8005508:	401a      	ands	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	0c1b      	lsrs	r3, r3, #16
 8005518:	2204      	movs	r2, #4
 800551a:	4013      	ands	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	2210      	movs	r2, #16
 8005524:	401a      	ands	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2251      	movs	r2, #81	; 0x51
 8005538:	2101      	movs	r1, #1
 800553a:	5499      	strb	r1, [r3, r2]
 800553c:	2300      	movs	r3, #0
 800553e:	0018      	movs	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	b002      	add	sp, #8
 8005544:	bd80      	pop	{r7, pc}

08005546 <HAL_SPI_Transmit>:
 8005546:	b580      	push	{r7, lr}
 8005548:	b088      	sub	sp, #32
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	603b      	str	r3, [r7, #0]
 8005552:	1dbb      	adds	r3, r7, #6
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	231f      	movs	r3, #31
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2250      	movs	r2, #80	; 0x50
 8005562:	5c9b      	ldrb	r3, [r3, r2]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_SPI_Transmit+0x26>
 8005568:	2302      	movs	r3, #2
 800556a:	e145      	b.n	80057f8 <HAL_SPI_Transmit+0x2b2>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2250      	movs	r2, #80	; 0x50
 8005570:	2101      	movs	r1, #1
 8005572:	5499      	strb	r1, [r3, r2]
 8005574:	f7fe fd7e 	bl	8004074 <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	2316      	movs	r3, #22
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	1dba      	adds	r2, r7, #6
 8005582:	8812      	ldrh	r2, [r2, #0]
 8005584:	801a      	strh	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2251      	movs	r2, #81	; 0x51
 800558a:	5c9b      	ldrb	r3, [r3, r2]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b01      	cmp	r3, #1
 8005590:	d004      	beq.n	800559c <HAL_SPI_Transmit+0x56>
 8005592:	231f      	movs	r3, #31
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	2202      	movs	r2, #2
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	e126      	b.n	80057ea <HAL_SPI_Transmit+0x2a4>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_SPI_Transmit+0x64>
 80055a2:	1dbb      	adds	r3, r7, #6
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d104      	bne.n	80055b4 <HAL_SPI_Transmit+0x6e>
 80055aa:	231f      	movs	r3, #31
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	2201      	movs	r2, #1
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	e11a      	b.n	80057ea <HAL_SPI_Transmit+0x2a4>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2251      	movs	r2, #81	; 0x51
 80055b8:	2103      	movs	r1, #3
 80055ba:	5499      	strb	r1, [r3, r2]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	1dba      	adds	r2, r7, #6
 80055cc:	8812      	ldrh	r2, [r2, #0]
 80055ce:	869a      	strh	r2, [r3, #52]	; 0x34
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1dba      	adds	r2, r7, #6
 80055d4:	8812      	ldrh	r2, [r2, #0]
 80055d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	879a      	strh	r2, [r3, #60]	; 0x3c
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	2380      	movs	r3, #128	; 0x80
 80055fc:	021b      	lsls	r3, r3, #8
 80055fe:	429a      	cmp	r2, r3
 8005600:	d110      	bne.n	8005624 <HAL_SPI_Transmit+0xde>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2140      	movs	r1, #64	; 0x40
 800560e:	438a      	bics	r2, r1
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2180      	movs	r1, #128	; 0x80
 800561e:	01c9      	lsls	r1, r1, #7
 8005620:	430a      	orrs	r2, r1
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2240      	movs	r2, #64	; 0x40
 800562c:	4013      	ands	r3, r2
 800562e:	2b40      	cmp	r3, #64	; 0x40
 8005630:	d007      	beq.n	8005642 <HAL_SPI_Transmit+0xfc>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2140      	movs	r1, #64	; 0x40
 800563e:	430a      	orrs	r2, r1
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	429a      	cmp	r2, r3
 800564c:	d152      	bne.n	80056f4 <HAL_SPI_Transmit+0x1ae>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <HAL_SPI_Transmit+0x11a>
 8005656:	2316      	movs	r3, #22
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d143      	bne.n	80056e8 <HAL_SPI_Transmit+0x1a2>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	881a      	ldrh	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60da      	str	r2, [r3, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	1c9a      	adds	r2, r3, #2
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	86da      	strh	r2, [r3, #54]	; 0x36
 8005684:	e030      	b.n	80056e8 <HAL_SPI_Transmit+0x1a2>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2202      	movs	r2, #2
 800568e:	4013      	ands	r3, r2
 8005690:	2b02      	cmp	r3, #2
 8005692:	d112      	bne.n	80056ba <HAL_SPI_Transmit+0x174>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	881a      	ldrh	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	60da      	str	r2, [r3, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a4:	1c9a      	adds	r2, r3, #2
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	3b01      	subs	r3, #1
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80056b8:	e016      	b.n	80056e8 <HAL_SPI_Transmit+0x1a2>
 80056ba:	f7fe fcdb 	bl	8004074 <HAL_GetTick>
 80056be:	0002      	movs	r2, r0
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d802      	bhi.n	80056d0 <HAL_SPI_Transmit+0x18a>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	d102      	bne.n	80056d6 <HAL_SPI_Transmit+0x190>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d108      	bne.n	80056e8 <HAL_SPI_Transmit+0x1a2>
 80056d6:	231f      	movs	r3, #31
 80056d8:	18fb      	adds	r3, r7, r3
 80056da:	2203      	movs	r2, #3
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2251      	movs	r2, #81	; 0x51
 80056e2:	2101      	movs	r1, #1
 80056e4:	5499      	strb	r1, [r3, r2]
 80056e6:	e080      	b.n	80057ea <HAL_SPI_Transmit+0x2a4>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1c9      	bne.n	8005686 <HAL_SPI_Transmit+0x140>
 80056f2:	e053      	b.n	800579c <HAL_SPI_Transmit+0x256>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <HAL_SPI_Transmit+0x1c0>
 80056fc:	2316      	movs	r3, #22
 80056fe:	18fb      	adds	r3, r7, r3
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d145      	bne.n	8005792 <HAL_SPI_Transmit+0x24c>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	7812      	ldrb	r2, [r2, #0]
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	86da      	strh	r2, [r3, #54]	; 0x36
 800572c:	e031      	b.n	8005792 <HAL_SPI_Transmit+0x24c>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	2202      	movs	r2, #2
 8005736:	4013      	ands	r3, r2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d113      	bne.n	8005764 <HAL_SPI_Transmit+0x21e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	86da      	strh	r2, [r3, #54]	; 0x36
 8005762:	e016      	b.n	8005792 <HAL_SPI_Transmit+0x24c>
 8005764:	f7fe fc86 	bl	8004074 <HAL_GetTick>
 8005768:	0002      	movs	r2, r0
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d802      	bhi.n	800577a <HAL_SPI_Transmit+0x234>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	d102      	bne.n	8005780 <HAL_SPI_Transmit+0x23a>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d108      	bne.n	8005792 <HAL_SPI_Transmit+0x24c>
 8005780:	231f      	movs	r3, #31
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	2203      	movs	r2, #3
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2251      	movs	r2, #81	; 0x51
 800578c:	2101      	movs	r1, #1
 800578e:	5499      	strb	r1, [r3, r2]
 8005790:	e02b      	b.n	80057ea <HAL_SPI_Transmit+0x2a4>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1c8      	bne.n	800572e <HAL_SPI_Transmit+0x1e8>
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	0018      	movs	r0, r3
 80057a4:	f000 fa86 	bl	8005cb4 <SPI_EndRxTxTransaction>
 80057a8:	1e03      	subs	r3, r0, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Transmit+0x26c>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <HAL_SPI_Transmit+0x28a>
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <HAL_SPI_Transmit+0x29c>
 80057d8:	231f      	movs	r3, #31
 80057da:	18fb      	adds	r3, r7, r3
 80057dc:	2201      	movs	r2, #1
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	e003      	b.n	80057ea <HAL_SPI_Transmit+0x2a4>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2251      	movs	r2, #81	; 0x51
 80057e6:	2101      	movs	r1, #1
 80057e8:	5499      	strb	r1, [r3, r2]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2250      	movs	r2, #80	; 0x50
 80057ee:	2100      	movs	r1, #0
 80057f0:	5499      	strb	r1, [r3, r2]
 80057f2:	231f      	movs	r3, #31
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	0018      	movs	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	b008      	add	sp, #32
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_SPI_TransmitReceive>:
 8005800:	b580      	push	{r7, lr}
 8005802:	b08c      	sub	sp, #48	; 0x30
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	001a      	movs	r2, r3
 800580e:	1cbb      	adds	r3, r7, #2
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	2301      	movs	r3, #1
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005816:	232b      	movs	r3, #43	; 0x2b
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2250      	movs	r2, #80	; 0x50
 8005822:	5c9b      	ldrb	r3, [r3, r2]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_SPI_TransmitReceive+0x2c>
 8005828:	2302      	movs	r3, #2
 800582a:	e1b0      	b.n	8005b8e <HAL_SPI_TransmitReceive+0x38e>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2250      	movs	r2, #80	; 0x50
 8005830:	2101      	movs	r1, #1
 8005832:	5499      	strb	r1, [r3, r2]
 8005834:	f7fe fc1e 	bl	8004074 <HAL_GetTick>
 8005838:	0003      	movs	r3, r0
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
 800583c:	2023      	movs	r0, #35	; 0x23
 800583e:	183b      	adds	r3, r7, r0
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	2151      	movs	r1, #81	; 0x51
 8005844:	5c52      	ldrb	r2, [r2, r1]
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	231a      	movs	r3, #26
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	1cba      	adds	r2, r7, #2
 8005854:	8812      	ldrh	r2, [r2, #0]
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	183b      	adds	r3, r7, r0
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d011      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x84>
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	2382      	movs	r3, #130	; 0x82
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	429a      	cmp	r2, r3
 8005868:	d107      	bne.n	800587a <HAL_SPI_TransmitReceive+0x7a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <HAL_SPI_TransmitReceive+0x7a>
 8005872:	183b      	adds	r3, r7, r0
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b04      	cmp	r3, #4
 8005878:	d004      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x84>
 800587a:	232b      	movs	r3, #43	; 0x2b
 800587c:	18fb      	adds	r3, r7, r3
 800587e:	2202      	movs	r2, #2
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	e17d      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x380>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d006      	beq.n	8005898 <HAL_SPI_TransmitReceive+0x98>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_SPI_TransmitReceive+0x98>
 8005890:	1cbb      	adds	r3, r7, #2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d104      	bne.n	80058a2 <HAL_SPI_TransmitReceive+0xa2>
 8005898:	232b      	movs	r3, #43	; 0x2b
 800589a:	18fb      	adds	r3, r7, r3
 800589c:	2201      	movs	r2, #1
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	e16e      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x380>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2251      	movs	r2, #81	; 0x51
 80058a6:	5c9b      	ldrb	r3, [r3, r2]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d003      	beq.n	80058b6 <HAL_SPI_TransmitReceive+0xb6>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2251      	movs	r2, #81	; 0x51
 80058b2:	2105      	movs	r1, #5
 80058b4:	5499      	strb	r1, [r3, r2]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	655a      	str	r2, [r3, #84]	; 0x54
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	1cba      	adds	r2, r7, #2
 80058c6:	8812      	ldrh	r2, [r2, #0]
 80058c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	1cba      	adds	r2, r7, #2
 80058ce:	8812      	ldrh	r2, [r2, #0]
 80058d0:	879a      	strh	r2, [r3, #60]	; 0x3c
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	1cba      	adds	r2, r7, #2
 80058dc:	8812      	ldrh	r2, [r2, #0]
 80058de:	86da      	strh	r2, [r3, #54]	; 0x36
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	1cba      	adds	r2, r7, #2
 80058e4:	8812      	ldrh	r2, [r2, #0]
 80058e6:	869a      	strh	r2, [r3, #52]	; 0x34
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	641a      	str	r2, [r3, #64]	; 0x40
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	645a      	str	r2, [r3, #68]	; 0x44
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2240      	movs	r2, #64	; 0x40
 80058fc:	4013      	ands	r3, r2
 80058fe:	2b40      	cmp	r3, #64	; 0x40
 8005900:	d007      	beq.n	8005912 <HAL_SPI_TransmitReceive+0x112>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2140      	movs	r1, #64	; 0x40
 800590e:	430a      	orrs	r2, r1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	429a      	cmp	r2, r3
 800591c:	d000      	beq.n	8005920 <HAL_SPI_TransmitReceive+0x120>
 800591e:	e07f      	b.n	8005a20 <HAL_SPI_TransmitReceive+0x220>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_SPI_TransmitReceive+0x134>
 8005928:	231a      	movs	r3, #26
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d000      	beq.n	8005934 <HAL_SPI_TransmitReceive+0x134>
 8005932:	e06a      	b.n	8005a0a <HAL_SPI_TransmitReceive+0x20a>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	881a      	ldrh	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60da      	str	r2, [r3, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29a      	uxth	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	86da      	strh	r2, [r3, #54]	; 0x36
 8005958:	e057      	b.n	8005a0a <HAL_SPI_TransmitReceive+0x20a>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2202      	movs	r2, #2
 8005962:	4013      	ands	r3, r2
 8005964:	2b02      	cmp	r3, #2
 8005966:	d11b      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x1a0>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d016      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x1a0>
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d113      	bne.n	80059a0 <HAL_SPI_TransmitReceive+0x1a0>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	881a      	ldrh	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60da      	str	r2, [r3, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	1c9a      	adds	r2, r3, #2
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	631a      	str	r2, [r3, #48]	; 0x30
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	86da      	strh	r2, [r3, #54]	; 0x36
 800599c:	2300      	movs	r3, #0
 800599e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2201      	movs	r2, #1
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d119      	bne.n	80059e2 <HAL_SPI_TransmitReceive+0x1e2>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d014      	beq.n	80059e2 <HAL_SPI_TransmitReceive+0x1e2>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68da      	ldr	r2, [r3, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	b292      	uxth	r2, r2
 80059c4:	801a      	strh	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	1c9a      	adds	r2, r3, #2
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059de:	2301      	movs	r3, #1
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e2:	f7fe fb47 	bl	8004074 <HAL_GetTick>
 80059e6:	0002      	movs	r2, r0
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d80b      	bhi.n	8005a0a <HAL_SPI_TransmitReceive+0x20a>
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	3301      	adds	r3, #1
 80059f6:	d008      	beq.n	8005a0a <HAL_SPI_TransmitReceive+0x20a>
 80059f8:	232b      	movs	r3, #43	; 0x2b
 80059fa:	18fb      	adds	r3, r7, r3
 80059fc:	2203      	movs	r2, #3
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2251      	movs	r2, #81	; 0x51
 8005a04:	2101      	movs	r1, #1
 8005a06:	5499      	strb	r1, [r3, r2]
 8005a08:	e0ba      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x380>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1a2      	bne.n	800595a <HAL_SPI_TransmitReceive+0x15a>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d19d      	bne.n	800595a <HAL_SPI_TransmitReceive+0x15a>
 8005a1e:	e083      	b.n	8005b28 <HAL_SPI_TransmitReceive+0x328>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x234>
 8005a28:	231a      	movs	r3, #26
 8005a2a:	18fb      	adds	r3, r7, r3
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d000      	beq.n	8005a34 <HAL_SPI_TransmitReceive+0x234>
 8005a32:	e06f      	b.n	8005b14 <HAL_SPI_TransmitReceive+0x314>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	701a      	strb	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a5a:	e05b      	b.n	8005b14 <HAL_SPI_TransmitReceive+0x314>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2202      	movs	r2, #2
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d11c      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x2a4>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d017      	beq.n	8005aa4 <HAL_SPI_TransmitReceive+0x2a4>
 8005a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d114      	bne.n	8005aa4 <HAL_SPI_TransmitReceive+0x2a4>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	330c      	adds	r3, #12
 8005a84:	7812      	ldrb	r2, [r2, #0]
 8005a86:	701a      	strb	r2, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d119      	bne.n	8005ae6 <HAL_SPI_TransmitReceive+0x2e6>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d014      	beq.n	8005ae6 <HAL_SPI_TransmitReceive+0x2e6>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68da      	ldr	r2, [r3, #12]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae6:	f7fe fac5 	bl	8004074 <HAL_GetTick>
 8005aea:	0002      	movs	r2, r0
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d802      	bhi.n	8005afc <HAL_SPI_TransmitReceive+0x2fc>
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	3301      	adds	r3, #1
 8005afa:	d102      	bne.n	8005b02 <HAL_SPI_TransmitReceive+0x302>
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d108      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x314>
 8005b02:	232b      	movs	r3, #43	; 0x2b
 8005b04:	18fb      	adds	r3, r7, r3
 8005b06:	2203      	movs	r2, #3
 8005b08:	701a      	strb	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2251      	movs	r2, #81	; 0x51
 8005b0e:	2101      	movs	r1, #1
 8005b10:	5499      	strb	r1, [r3, r2]
 8005b12:	e035      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x380>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d19e      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x25c>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d199      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x25c>
 8005b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f000 f8c0 	bl	8005cb4 <SPI_EndRxTxTransaction>
 8005b34:	1e03      	subs	r3, r0, #0
 8005b36:	d007      	beq.n	8005b48 <HAL_SPI_TransmitReceive+0x348>
 8005b38:	232b      	movs	r3, #43	; 0x2b
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	655a      	str	r2, [r3, #84]	; 0x54
 8005b46:	e01b      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x380>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <HAL_SPI_TransmitReceive+0x366>
 8005b50:	2300      	movs	r3, #0
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <HAL_SPI_TransmitReceive+0x378>
 8005b6e:	232b      	movs	r3, #43	; 0x2b
 8005b70:	18fb      	adds	r3, r7, r3
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	e003      	b.n	8005b80 <HAL_SPI_TransmitReceive+0x380>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2251      	movs	r2, #81	; 0x51
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	5499      	strb	r1, [r3, r2]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2250      	movs	r2, #80	; 0x50
 8005b84:	2100      	movs	r1, #0
 8005b86:	5499      	strb	r1, [r3, r2]
 8005b88:	232b      	movs	r3, #43	; 0x2b
 8005b8a:	18fb      	adds	r3, r7, r3
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	0018      	movs	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b00c      	add	sp, #48	; 0x30
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <SPI_WaitFlagStateUntilTimeout>:
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	1dfb      	adds	r3, r7, #7
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	f7fe fa64 	bl	8004074 <HAL_GetTick>
 8005bac:	0002      	movs	r2, r0
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	18d3      	adds	r3, r2, r3
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	f7fe fa5c 	bl	8004074 <HAL_GetTick>
 8005bbc:	0003      	movs	r3, r0
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	4b3a      	ldr	r3, [pc, #232]	; (8005cac <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	015b      	lsls	r3, r3, #5
 8005bc6:	0d1b      	lsrs	r3, r3, #20
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	4353      	muls	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e058      	b.n	8005c82 <SPI_WaitFlagStateUntilTimeout+0xea>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	d055      	beq.n	8005c82 <SPI_WaitFlagStateUntilTimeout+0xea>
 8005bd6:	f7fe fa4d 	bl	8004074 <HAL_GetTick>
 8005bda:	0002      	movs	r2, r0
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d902      	bls.n	8005bec <SPI_WaitFlagStateUntilTimeout+0x54>
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d142      	bne.n	8005c72 <SPI_WaitFlagStateUntilTimeout+0xda>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	21e0      	movs	r1, #224	; 0xe0
 8005bf8:	438a      	bics	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	2382      	movs	r3, #130	; 0x82
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d113      	bne.n	8005c30 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d005      	beq.n	8005c20 <SPI_WaitFlagStateUntilTimeout+0x88>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	2380      	movs	r3, #128	; 0x80
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d107      	bne.n	8005c30 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2140      	movs	r1, #64	; 0x40
 8005c2c:	438a      	bics	r2, r1
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	019b      	lsls	r3, r3, #6
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d110      	bne.n	8005c5e <SPI_WaitFlagStateUntilTimeout+0xc6>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	491a      	ldr	r1, [pc, #104]	; (8005cb0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005c48:	400a      	ands	r2, r1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2180      	movs	r1, #128	; 0x80
 8005c58:	0189      	lsls	r1, r1, #6
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2251      	movs	r2, #81	; 0x51
 8005c62:	2101      	movs	r1, #1
 8005c64:	5499      	strb	r1, [r3, r2]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2250      	movs	r2, #80	; 0x50
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	5499      	strb	r1, [r3, r2]
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e017      	b.n	8005ca2 <SPI_WaitFlagStateUntilTimeout+0x10a>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <SPI_WaitFlagStateUntilTimeout+0xe4>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	425a      	negs	r2, r3
 8005c92:	4153      	adcs	r3, r2
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	001a      	movs	r2, r3
 8005c98:	1dfb      	adds	r3, r7, #7
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d197      	bne.n	8005bd0 <SPI_WaitFlagStateUntilTimeout+0x38>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	b008      	add	sp, #32
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	20000004 	.word	0x20000004
 8005cb0:	ffffdfff 	.word	0xffffdfff

08005cb4 <SPI_EndRxTxTransaction>:
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <SPI_EndRxTxTransaction+0x84>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	491d      	ldr	r1, [pc, #116]	; (8005d3c <SPI_EndRxTxTransaction+0x88>)
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f7fa fa3a 	bl	8000140 <__udivsi3>
 8005ccc:	0003      	movs	r3, r0
 8005cce:	001a      	movs	r2, r3
 8005cd0:	0013      	movs	r3, r2
 8005cd2:	015b      	lsls	r3, r3, #5
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	189b      	adds	r3, r3, r2
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	2382      	movs	r3, #130	; 0x82
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d112      	bne.n	8005d10 <SPI_EndRxTxTransaction+0x5c>
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	0013      	movs	r3, r2
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2180      	movs	r1, #128	; 0x80
 8005cf8:	f7ff ff4e 	bl	8005b98 <SPI_WaitFlagStateUntilTimeout>
 8005cfc:	1e03      	subs	r3, r0, #0
 8005cfe:	d016      	beq.n	8005d2e <SPI_EndRxTxTransaction+0x7a>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d04:	2220      	movs	r2, #32
 8005d06:	431a      	orrs	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	655a      	str	r2, [r3, #84]	; 0x54
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e00f      	b.n	8005d30 <SPI_EndRxTxTransaction+0x7c>
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <SPI_EndRxTxTransaction+0x78>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2280      	movs	r2, #128	; 0x80
 8005d24:	4013      	ands	r3, r2
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d0f2      	beq.n	8005d10 <SPI_EndRxTxTransaction+0x5c>
 8005d2a:	e000      	b.n	8005d2e <SPI_EndRxTxTransaction+0x7a>
 8005d2c:	46c0      	nop			; (mov r8, r8)
 8005d2e:	2300      	movs	r3, #0
 8005d30:	0018      	movs	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b006      	add	sp, #24
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000004 	.word	0x20000004
 8005d3c:	016e3600 	.word	0x016e3600

08005d40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005d44:	4a06      	ldr	r2, [pc, #24]	; (8005d60 <MX_FATFS_Init+0x20>)
 8005d46:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <MX_FATFS_Init+0x24>)
 8005d48:	0011      	movs	r1, r2
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f003 f982 	bl	8009054 <FATFS_LinkDriver>
 8005d50:	0003      	movs	r3, r0
 8005d52:	001a      	movs	r2, r3
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <MX_FATFS_Init+0x28>)
 8005d56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005d58:	46c0      	nop			; (mov r8, r8)
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	200002ec 	.word	0x200002ec
 8005d64:	20000010 	.word	0x20000010
 8005d68:	200002e8 	.word	0x200002e8

08005d6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005d70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005d72:	0018      	movs	r0, r3
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	0002      	movs	r2, r0
 8005d80:	1dfb      	adds	r3, r7, #7
 8005d82:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005d84:	1dfb      	adds	r3, r7, #7
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f7fc ffa5 	bl	8002cd8 <SD_disk_initialize>
 8005d8e:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8005d90:	0018      	movs	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b002      	add	sp, #8
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	0002      	movs	r2, r0
 8005da0:	1dfb      	adds	r3, r7, #7
 8005da2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005da4:	1dfb      	adds	r3, r7, #7
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	0018      	movs	r0, r3
 8005daa:	f7fd f89f 	bl	8002eec <SD_disk_status>
 8005dae:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8005db0:	0018      	movs	r0, r3
 8005db2:	46bd      	mov	sp, r7
 8005db4:	b002      	add	sp, #8
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005db8:	b5b0      	push	{r4, r5, r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
 8005dc2:	603b      	str	r3, [r7, #0]
 8005dc4:	250f      	movs	r5, #15
 8005dc6:	197b      	adds	r3, r7, r5
 8005dc8:	1c02      	adds	r2, r0, #0
 8005dca:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8005dcc:	683c      	ldr	r4, [r7, #0]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	197b      	adds	r3, r7, r5
 8005dd4:	7818      	ldrb	r0, [r3, #0]
 8005dd6:	0023      	movs	r3, r4
 8005dd8:	f7fd f89e 	bl	8002f18 <SD_disk_read>
 8005ddc:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8005dde:	0018      	movs	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b004      	add	sp, #16
 8005de4:	bdb0      	pop	{r4, r5, r7, pc}

08005de6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005de6:	b5b0      	push	{r4, r5, r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
 8005df2:	250f      	movs	r5, #15
 8005df4:	197b      	adds	r3, r7, r5
 8005df6:	1c02      	adds	r2, r0, #0
 8005df8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005dfa:	683c      	ldr	r4, [r7, #0]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	197b      	adds	r3, r7, r5
 8005e02:	7818      	ldrb	r0, [r3, #0]
 8005e04:	0023      	movs	r3, r4
 8005e06:	f7fd f8f7 	bl	8002ff8 <SD_disk_write>
 8005e0a:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b004      	add	sp, #16
 8005e12:	bdb0      	pop	{r4, r5, r7, pc}

08005e14 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	603a      	str	r2, [r7, #0]
 8005e1c:	1dfb      	adds	r3, r7, #7
 8005e1e:	1c02      	adds	r2, r0, #0
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	1dbb      	adds	r3, r7, #6
 8005e24:	1c0a      	adds	r2, r1, #0
 8005e26:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005e28:	683a      	ldr	r2, [r7, #0]
 8005e2a:	1dbb      	adds	r3, r7, #6
 8005e2c:	7819      	ldrb	r1, [r3, #0]
 8005e2e:	1dfb      	adds	r3, r7, #7
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	0018      	movs	r0, r3
 8005e34:	f7fd f968 	bl	8003108 <SD_disk_ioctl>
 8005e38:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b002      	add	sp, #8
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005e44:	b5b0      	push	{r4, r5, r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	0002      	movs	r2, r0
 8005e4c:	1dfb      	adds	r3, r7, #7
 8005e4e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005e50:	1dfb      	adds	r3, r7, #7
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	4a0b      	ldr	r2, [pc, #44]	; (8005e84 <disk_status+0x40>)
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	18d3      	adds	r3, r2, r3
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	1dfa      	adds	r2, r7, #7
 8005e62:	7812      	ldrb	r2, [r2, #0]
 8005e64:	4907      	ldr	r1, [pc, #28]	; (8005e84 <disk_status+0x40>)
 8005e66:	188a      	adds	r2, r1, r2
 8005e68:	7a12      	ldrb	r2, [r2, #8]
 8005e6a:	250f      	movs	r5, #15
 8005e6c:	197c      	adds	r4, r7, r5
 8005e6e:	0010      	movs	r0, r2
 8005e70:	4798      	blx	r3
 8005e72:	0003      	movs	r3, r0
 8005e74:	7023      	strb	r3, [r4, #0]
  return stat;
 8005e76:	197b      	adds	r3, r7, r5
 8005e78:	781b      	ldrb	r3, [r3, #0]
}
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	b004      	add	sp, #16
 8005e80:	bdb0      	pop	{r4, r5, r7, pc}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	20000518 	.word	0x20000518

08005e88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005e88:	b590      	push	{r4, r7, lr}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	0002      	movs	r2, r0
 8005e90:	1dfb      	adds	r3, r7, #7
 8005e92:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8005e94:	200f      	movs	r0, #15
 8005e96:	183b      	adds	r3, r7, r0
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 8005e9c:	1dfb      	adds	r3, r7, #7
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	4a10      	ldr	r2, [pc, #64]	; (8005ee4 <disk_initialize+0x5c>)
 8005ea2:	5cd3      	ldrb	r3, [r2, r3]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d116      	bne.n	8005ed6 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8005ea8:	1dfb      	adds	r3, r7, #7
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	4a0d      	ldr	r2, [pc, #52]	; (8005ee4 <disk_initialize+0x5c>)
 8005eae:	2101      	movs	r1, #1
 8005eb0:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005eb2:	1dfb      	adds	r3, r7, #7
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	4a0b      	ldr	r2, [pc, #44]	; (8005ee4 <disk_initialize+0x5c>)
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	18d3      	adds	r3, r2, r3
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	1dfa      	adds	r2, r7, #7
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	4907      	ldr	r1, [pc, #28]	; (8005ee4 <disk_initialize+0x5c>)
 8005ec8:	188a      	adds	r2, r1, r2
 8005eca:	7a12      	ldrb	r2, [r2, #8]
 8005ecc:	183c      	adds	r4, r7, r0
 8005ece:	0010      	movs	r0, r2
 8005ed0:	4798      	blx	r3
 8005ed2:	0003      	movs	r3, r0
 8005ed4:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8005ed6:	230f      	movs	r3, #15
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	781b      	ldrb	r3, [r3, #0]
}
 8005edc:	0018      	movs	r0, r3
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b005      	add	sp, #20
 8005ee2:	bd90      	pop	{r4, r7, pc}
 8005ee4:	20000518 	.word	0x20000518

08005ee8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	210f      	movs	r1, #15
 8005ef6:	187b      	adds	r3, r7, r1
 8005ef8:	1c02      	adds	r2, r0, #0
 8005efa:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005efc:	187b      	adds	r3, r7, r1
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	4a0c      	ldr	r2, [pc, #48]	; (8005f34 <disk_read+0x4c>)
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	18d3      	adds	r3, r2, r3
 8005f06:	3304      	adds	r3, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689d      	ldr	r5, [r3, #8]
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	4a08      	ldr	r2, [pc, #32]	; (8005f34 <disk_read+0x4c>)
 8005f12:	18d3      	adds	r3, r2, r3
 8005f14:	7a18      	ldrb	r0, [r3, #8]
 8005f16:	2617      	movs	r6, #23
 8005f18:	19bc      	adds	r4, r7, r6
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	47a8      	blx	r5
 8005f22:	0003      	movs	r3, r0
 8005f24:	7023      	strb	r3, [r4, #0]
  return res;
 8005f26:	19bb      	adds	r3, r7, r6
 8005f28:	781b      	ldrb	r3, [r3, #0]
}
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b007      	add	sp, #28
 8005f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	20000518 	.word	0x20000518

08005f38 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	210f      	movs	r1, #15
 8005f46:	187b      	adds	r3, r7, r1
 8005f48:	1c02      	adds	r2, r0, #0
 8005f4a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005f4c:	187b      	adds	r3, r7, r1
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	4a0c      	ldr	r2, [pc, #48]	; (8005f84 <disk_write+0x4c>)
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	18d3      	adds	r3, r2, r3
 8005f56:	3304      	adds	r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68dd      	ldr	r5, [r3, #12]
 8005f5c:	187b      	adds	r3, r7, r1
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	4a08      	ldr	r2, [pc, #32]	; (8005f84 <disk_write+0x4c>)
 8005f62:	18d3      	adds	r3, r2, r3
 8005f64:	7a18      	ldrb	r0, [r3, #8]
 8005f66:	2617      	movs	r6, #23
 8005f68:	19bc      	adds	r4, r7, r6
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	47a8      	blx	r5
 8005f72:	0003      	movs	r3, r0
 8005f74:	7023      	strb	r3, [r4, #0]
  return res;
 8005f76:	19bb      	adds	r3, r7, r6
 8005f78:	781b      	ldrb	r3, [r3, #0]
}
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b007      	add	sp, #28
 8005f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	20000518 	.word	0x20000518

08005f88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	603a      	str	r2, [r7, #0]
 8005f90:	1dfb      	adds	r3, r7, #7
 8005f92:	1c02      	adds	r2, r0, #0
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	1dbb      	adds	r3, r7, #6
 8005f98:	1c0a      	adds	r2, r1, #0
 8005f9a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005f9c:	1dfb      	adds	r3, r7, #7
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	4a0c      	ldr	r2, [pc, #48]	; (8005fd4 <disk_ioctl+0x4c>)
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	18d3      	adds	r3, r2, r3
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	1dfa      	adds	r2, r7, #7
 8005fae:	7812      	ldrb	r2, [r2, #0]
 8005fb0:	4908      	ldr	r1, [pc, #32]	; (8005fd4 <disk_ioctl+0x4c>)
 8005fb2:	188a      	adds	r2, r1, r2
 8005fb4:	7a10      	ldrb	r0, [r2, #8]
 8005fb6:	260f      	movs	r6, #15
 8005fb8:	19bc      	adds	r4, r7, r6
 8005fba:	683d      	ldr	r5, [r7, #0]
 8005fbc:	1dba      	adds	r2, r7, #6
 8005fbe:	7811      	ldrb	r1, [r2, #0]
 8005fc0:	002a      	movs	r2, r5
 8005fc2:	4798      	blx	r3
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	7023      	strb	r3, [r4, #0]
  return res;
 8005fc8:	19bb      	adds	r3, r7, r6
 8005fca:	781b      	ldrb	r3, [r3, #0]
}
 8005fcc:	0018      	movs	r0, r3
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	b005      	add	sp, #20
 8005fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd4:	20000518 	.word	0x20000518

08005fd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	781a      	ldrb	r2, [r3, #0]
 8005fe6:	210e      	movs	r1, #14
 8005fe8:	187b      	adds	r3, r7, r1
 8005fea:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8005fec:	187b      	adds	r3, r7, r1
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	b21a      	sxth	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	b21b      	sxth	r3, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b21a      	sxth	r2, r3
 8005ffe:	187b      	adds	r3, r7, r1
 8006000:	801a      	strh	r2, [r3, #0]
	return rv;
 8006002:	187b      	adds	r3, r7, r1
 8006004:	881b      	ldrh	r3, [r3, #0]
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b004      	add	sp, #16
 800600c:	bd80      	pop	{r7, pc}

0800600e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3303      	adds	r3, #3
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	3202      	adds	r2, #2
 8006026:	7812      	ldrb	r2, [r2, #0]
 8006028:	4313      	orrs	r3, r2
 800602a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	3201      	adds	r2, #1
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	4313      	orrs	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	021b      	lsls	r3, r3, #8
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	4313      	orrs	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
	return rv;
 8006046:	68fb      	ldr	r3, [r7, #12]
}
 8006048:	0018      	movs	r0, r3
 800604a:	46bd      	mov	sp, r7
 800604c:	b004      	add	sp, #16
 800604e:	bd80      	pop	{r7, pc}

08006050 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	000a      	movs	r2, r1
 800605a:	1cbb      	adds	r3, r7, #2
 800605c:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	607a      	str	r2, [r7, #4]
 8006064:	1cba      	adds	r2, r7, #2
 8006066:	8812      	ldrh	r2, [r2, #0]
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	1cbb      	adds	r3, r7, #2
 800606e:	1cba      	adds	r2, r7, #2
 8006070:	8812      	ldrh	r2, [r2, #0]
 8006072:	0a12      	lsrs	r2, r2, #8
 8006074:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	1cba      	adds	r2, r7, #2
 800607e:	8812      	ldrh	r2, [r2, #0]
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
}
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b002      	add	sp, #8
 800608a:	bd80      	pop	{r7, pc}

0800608c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	607a      	str	r2, [r7, #4]
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	0a1b      	lsrs	r3, r3, #8
 80060b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]
}
 80060d8:	46c0      	nop			; (mov r8, r8)
 80060da:	46bd      	mov	sp, r7
 80060dc:	b002      	add	sp, #8
 80060de:	bd80      	pop	{r7, pc}

080060e0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00d      	beq.n	8006116 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	1c53      	adds	r3, r2, #1
 80060fe:	613b      	str	r3, [r7, #16]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	1c59      	adds	r1, r3, #1
 8006104:	6179      	str	r1, [r7, #20]
 8006106:	7812      	ldrb	r2, [r2, #0]
 8006108:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3b01      	subs	r3, #1
 800610e:	607b      	str	r3, [r7, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1f1      	bne.n	80060fa <mem_cpy+0x1a>
	}
}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	46bd      	mov	sp, r7
 800611a:	b006      	add	sp, #24
 800611c:	bd80      	pop	{r7, pc}

0800611e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800611e:	b580      	push	{r7, lr}
 8006120:	b086      	sub	sp, #24
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	617a      	str	r2, [r7, #20]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3b01      	subs	r3, #1
 800613e:	607b      	str	r3, [r7, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f3      	bne.n	800612e <mem_set+0x10>
}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	46c0      	nop			; (mov r8, r8)
 800614a:	46bd      	mov	sp, r7
 800614c:	b006      	add	sp, #24
 800614e:	bd80      	pop	{r7, pc}

08006150 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	61fa      	str	r2, [r7, #28]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	0019      	movs	r1, r3
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	61ba      	str	r2, [r7, #24]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	1acb      	subs	r3, r1, r3
 800617c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3b01      	subs	r3, #1
 8006182:	607b      	str	r3, [r7, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <mem_cmp+0x40>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0eb      	beq.n	8006168 <mem_cmp+0x18>

	return r;
 8006190:	697b      	ldr	r3, [r7, #20]
}
 8006192:	0018      	movs	r0, r3
 8006194:	46bd      	mov	sp, r7
 8006196:	b008      	add	sp, #32
 8006198:	bd80      	pop	{r7, pc}

0800619a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80061a4:	e002      	b.n	80061ac <chk_chr+0x12>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	3301      	adds	r3, #1
 80061aa:	607b      	str	r3, [r7, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <chk_chr+0x26>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	001a      	movs	r2, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	4293      	cmp	r3, r2
 80061be:	d1f2      	bne.n	80061a6 <chk_chr+0xc>
	return *str;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	781b      	ldrb	r3, [r3, #0]
}
 80061c4:	0018      	movs	r0, r3
 80061c6:	46bd      	mov	sp, r7
 80061c8:	b002      	add	sp, #8
 80061ca:	bd80      	pop	{r7, pc}

080061cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	e027      	b.n	8006230 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 80061e0:	4b25      	ldr	r3, [pc, #148]	; (8006278 <chk_lock+0xac>)
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	0112      	lsls	r2, r2, #4
 80061e6:	58d3      	ldr	r3, [r2, r3]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01c      	beq.n	8006226 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80061ec:	4b22      	ldr	r3, [pc, #136]	; (8006278 <chk_lock+0xac>)
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	0112      	lsls	r2, r2, #4
 80061f2:	58d2      	ldr	r2, [r2, r3]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d116      	bne.n	800622a <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 80061fc:	4a1e      	ldr	r2, [pc, #120]	; (8006278 <chk_lock+0xac>)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	18d3      	adds	r3, r2, r3
 8006204:	3304      	adds	r3, #4
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800620c:	429a      	cmp	r2, r3
 800620e:	d10c      	bne.n	800622a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006210:	4a19      	ldr	r2, [pc, #100]	; (8006278 <chk_lock+0xac>)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	18d3      	adds	r3, r2, r3
 8006218:	3308      	adds	r3, #8
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006220:	429a      	cmp	r2, r3
 8006222:	d102      	bne.n	800622a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006224:	e007      	b.n	8006236 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8006226:	2301      	movs	r3, #1
 8006228:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3301      	adds	r3, #1
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d9d4      	bls.n	80061e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d109      	bne.n	8006250 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <chk_lock+0x7c>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b02      	cmp	r3, #2
 8006246:	d101      	bne.n	800624c <chk_lock+0x80>
 8006248:	2300      	movs	r3, #0
 800624a:	e011      	b.n	8006270 <chk_lock+0xa4>
 800624c:	2312      	movs	r3, #18
 800624e:	e00f      	b.n	8006270 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d109      	bne.n	800626a <chk_lock+0x9e>
 8006256:	4a08      	ldr	r2, [pc, #32]	; (8006278 <chk_lock+0xac>)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	18d3      	adds	r3, r2, r3
 800625e:	330c      	adds	r3, #12
 8006260:	881a      	ldrh	r2, [r3, #0]
 8006262:	2380      	movs	r3, #128	; 0x80
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	429a      	cmp	r2, r3
 8006268:	d101      	bne.n	800626e <chk_lock+0xa2>
 800626a:	2310      	movs	r3, #16
 800626c:	e000      	b.n	8006270 <chk_lock+0xa4>
 800626e:	2300      	movs	r3, #0
}
 8006270:	0018      	movs	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	b004      	add	sp, #16
 8006276:	bd80      	pop	{r7, pc}
 8006278:	200002f8 	.word	0x200002f8

0800627c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	e002      	b.n	800628e <enq_lock+0x12>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3301      	adds	r3, #1
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d805      	bhi.n	80062a0 <enq_lock+0x24>
 8006294:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <enq_lock+0x38>)
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	0112      	lsls	r2, r2, #4
 800629a:	58d3      	ldr	r3, [r2, r3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1f3      	bne.n	8006288 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3b02      	subs	r3, #2
 80062a4:	1e5a      	subs	r2, r3, #1
 80062a6:	4193      	sbcs	r3, r2
 80062a8:	b2db      	uxtb	r3, r3
}
 80062aa:	0018      	movs	r0, r3
 80062ac:	46bd      	mov	sp, r7
 80062ae:	b002      	add	sp, #8
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	200002f8 	.word	0x200002f8

080062b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	e01e      	b.n	8006306 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 80062c8:	4b3f      	ldr	r3, [pc, #252]	; (80063c8 <inc_lock+0x110>)
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	0112      	lsls	r2, r2, #4
 80062ce:	58d2      	ldr	r2, [r2, r3]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d113      	bne.n	8006300 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 80062d8:	4a3b      	ldr	r2, [pc, #236]	; (80063c8 <inc_lock+0x110>)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	18d3      	adds	r3, r2, r3
 80062e0:	3304      	adds	r3, #4
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d109      	bne.n	8006300 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 80062ec:	4a36      	ldr	r2, [pc, #216]	; (80063c8 <inc_lock+0x110>)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	18d3      	adds	r3, r2, r3
 80062f4:	3308      	adds	r3, #8
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d006      	beq.n	800630e <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d9dd      	bls.n	80062c8 <inc_lock+0x10>
 800630c:	e000      	b.n	8006310 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 800630e:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d130      	bne.n	8006378 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	e002      	b.n	8006322 <inc_lock+0x6a>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3301      	adds	r3, #1
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d805      	bhi.n	8006334 <inc_lock+0x7c>
 8006328:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <inc_lock+0x110>)
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	0112      	lsls	r2, r2, #4
 800632e:	58d3      	ldr	r3, [r2, r3]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1f3      	bne.n	800631c <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d101      	bne.n	800633e <inc_lock+0x86>
 800633a:	2300      	movs	r3, #0
 800633c:	e03f      	b.n	80063be <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6819      	ldr	r1, [r3, #0]
 8006342:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <inc_lock+0x110>)
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689a      	ldr	r2, [r3, #8]
 800634e:	491e      	ldr	r1, [pc, #120]	; (80063c8 <inc_lock+0x110>)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	18cb      	adds	r3, r1, r3
 8006356:	3304      	adds	r3, #4
 8006358:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695a      	ldr	r2, [r3, #20]
 800635e:	491a      	ldr	r1, [pc, #104]	; (80063c8 <inc_lock+0x110>)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	18cb      	adds	r3, r1, r3
 8006366:	3308      	adds	r3, #8
 8006368:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800636a:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <inc_lock+0x110>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	18d3      	adds	r3, r2, r3
 8006372:	330c      	adds	r3, #12
 8006374:	2200      	movs	r2, #0
 8006376:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d009      	beq.n	8006392 <inc_lock+0xda>
 800637e:	4a12      	ldr	r2, [pc, #72]	; (80063c8 <inc_lock+0x110>)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	18d3      	adds	r3, r2, r3
 8006386:	330c      	adds	r3, #12
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d001      	beq.n	8006392 <inc_lock+0xda>
 800638e:	2300      	movs	r3, #0
 8006390:	e015      	b.n	80063be <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <inc_lock+0xf2>
 8006398:	4a0b      	ldr	r2, [pc, #44]	; (80063c8 <inc_lock+0x110>)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	18d3      	adds	r3, r2, r3
 80063a0:	330c      	adds	r3, #12
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	e001      	b.n	80063ae <inc_lock+0xf6>
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	4906      	ldr	r1, [pc, #24]	; (80063c8 <inc_lock+0x110>)
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	0112      	lsls	r2, r2, #4
 80063b4:	188a      	adds	r2, r1, r2
 80063b6:	320c      	adds	r2, #12
 80063b8:	8013      	strh	r3, [r2, #0]

	return i + 1;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3301      	adds	r3, #1
}
 80063be:	0018      	movs	r0, r3
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b004      	add	sp, #16
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	46c0      	nop			; (mov r8, r8)
 80063c8:	200002f8 	.word	0x200002f8

080063cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	607b      	str	r3, [r7, #4]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d832      	bhi.n	8006446 <dec_lock+0x7a>
		n = Files[i].ctr;
 80063e0:	200e      	movs	r0, #14
 80063e2:	183b      	adds	r3, r7, r0
 80063e4:	491d      	ldr	r1, [pc, #116]	; (800645c <dec_lock+0x90>)
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	0112      	lsls	r2, r2, #4
 80063ea:	188a      	adds	r2, r1, r2
 80063ec:	320c      	adds	r2, #12
 80063ee:	8812      	ldrh	r2, [r2, #0]
 80063f0:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80063f2:	183b      	adds	r3, r7, r0
 80063f4:	881a      	ldrh	r2, [r3, #0]
 80063f6:	2380      	movs	r3, #128	; 0x80
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d102      	bne.n	8006404 <dec_lock+0x38>
 80063fe:	183b      	adds	r3, r7, r0
 8006400:	2200      	movs	r2, #0
 8006402:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006404:	210e      	movs	r1, #14
 8006406:	187b      	adds	r3, r7, r1
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <dec_lock+0x4c>
 800640e:	187b      	adds	r3, r7, r1
 8006410:	881a      	ldrh	r2, [r3, #0]
 8006412:	187b      	adds	r3, r7, r1
 8006414:	3a01      	subs	r2, #1
 8006416:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8006418:	4a10      	ldr	r2, [pc, #64]	; (800645c <dec_lock+0x90>)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	18d3      	adds	r3, r2, r3
 8006420:	330c      	adds	r3, #12
 8006422:	210e      	movs	r1, #14
 8006424:	187a      	adds	r2, r7, r1
 8006426:	8812      	ldrh	r2, [r2, #0]
 8006428:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800642a:	187b      	adds	r3, r7, r1
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <dec_lock+0x70>
 8006432:	4b0a      	ldr	r3, [pc, #40]	; (800645c <dec_lock+0x90>)
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	0112      	lsls	r2, r2, #4
 8006438:	2100      	movs	r1, #0
 800643a:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 800643c:	230d      	movs	r3, #13
 800643e:	18fb      	adds	r3, r7, r3
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
 8006444:	e003      	b.n	800644e <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006446:	230d      	movs	r3, #13
 8006448:	18fb      	adds	r3, r7, r3
 800644a:	2202      	movs	r2, #2
 800644c:	701a      	strb	r2, [r3, #0]
	}
	return res;
 800644e:	230d      	movs	r3, #13
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	781b      	ldrb	r3, [r3, #0]
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	b004      	add	sp, #16
 800645a:	bd80      	pop	{r7, pc}
 800645c:	200002f8 	.word	0x200002f8

08006460 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e00e      	b.n	800648c <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800646e:	4b0b      	ldr	r3, [pc, #44]	; (800649c <clear_lock+0x3c>)
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	0112      	lsls	r2, r2, #4
 8006474:	58d3      	ldr	r3, [r2, r3]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	429a      	cmp	r2, r3
 800647a:	d104      	bne.n	8006486 <clear_lock+0x26>
 800647c:	4b07      	ldr	r3, [pc, #28]	; (800649c <clear_lock+0x3c>)
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	0112      	lsls	r2, r2, #4
 8006482:	2100      	movs	r1, #0
 8006484:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d9ed      	bls.n	800646e <clear_lock+0xe>
	}
}
 8006492:	46c0      	nop			; (mov r8, r8)
 8006494:	46c0      	nop			; (mov r8, r8)
 8006496:	46bd      	mov	sp, r7
 8006498:	b004      	add	sp, #16
 800649a:	bd80      	pop	{r7, pc}
 800649c:	200002f8 	.word	0x200002f8

080064a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80064a8:	240f      	movs	r4, #15
 80064aa:	193b      	adds	r3, r7, r4
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	78db      	ldrb	r3, [r3, #3]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d034      	beq.n	8006522 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	7858      	ldrb	r0, [r3, #1]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3338      	adds	r3, #56	; 0x38
 80064c6:	0019      	movs	r1, r3
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	2301      	movs	r3, #1
 80064cc:	f7ff fd34 	bl	8005f38 <disk_write>
 80064d0:	1e03      	subs	r3, r0, #0
 80064d2:	d003      	beq.n	80064dc <sync_window+0x3c>
			res = FR_DISK_ERR;
 80064d4:	193b      	adds	r3, r7, r4
 80064d6:	2201      	movs	r2, #1
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	e022      	b.n	8006522 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	1ad2      	subs	r2, r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d217      	bcs.n	8006522 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	789b      	ldrb	r3, [r3, #2]
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	e010      	b.n	800651c <sync_window+0x7c>
					wsect += fs->fsize;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	18d3      	adds	r3, r2, r3
 8006502:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	7858      	ldrb	r0, [r3, #1]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3338      	adds	r3, #56	; 0x38
 800650c:	0019      	movs	r1, r3
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	2301      	movs	r3, #1
 8006512:	f7ff fd11 	bl	8005f38 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3b01      	subs	r3, #1
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d8eb      	bhi.n	80064fa <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8006522:	230f      	movs	r3, #15
 8006524:	18fb      	adds	r3, r7, r3
 8006526:	781b      	ldrb	r3, [r3, #0]
}
 8006528:	0018      	movs	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	b007      	add	sp, #28
 800652e:	bd90      	pop	{r4, r7, pc}

08006530 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006530:	b5b0      	push	{r4, r5, r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800653a:	250f      	movs	r5, #15
 800653c:	197b      	adds	r3, r7, r5
 800653e:	2200      	movs	r2, #0
 8006540:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d01f      	beq.n	800658c <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800654c:	197c      	adds	r4, r7, r5
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	0018      	movs	r0, r3
 8006552:	f7ff ffa5 	bl	80064a0 <sync_window>
 8006556:	0003      	movs	r3, r0
 8006558:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800655a:	002c      	movs	r4, r5
 800655c:	193b      	adds	r3, r7, r4
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d113      	bne.n	800658c <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	7858      	ldrb	r0, [r3, #1]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3338      	adds	r3, #56	; 0x38
 800656c:	0019      	movs	r1, r3
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	2301      	movs	r3, #1
 8006572:	f7ff fcb9 	bl	8005ee8 <disk_read>
 8006576:	1e03      	subs	r3, r0, #0
 8006578:	d005      	beq.n	8006586 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800657a:	2301      	movs	r3, #1
 800657c:	425b      	negs	r3, r3
 800657e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006580:	193b      	adds	r3, r7, r4
 8006582:	2201      	movs	r2, #1
 8006584:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800658c:	230f      	movs	r3, #15
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	781b      	ldrb	r3, [r3, #0]
}
 8006592:	0018      	movs	r0, r3
 8006594:	46bd      	mov	sp, r7
 8006596:	b004      	add	sp, #16
 8006598:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800659c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800659c:	b5b0      	push	{r4, r5, r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80065a4:	250f      	movs	r5, #15
 80065a6:	197c      	adds	r4, r7, r5
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	0018      	movs	r0, r3
 80065ac:	f7ff ff78 	bl	80064a0 <sync_window>
 80065b0:	0003      	movs	r3, r0
 80065b2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80065b4:	197b      	adds	r3, r7, r5
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d15e      	bne.n	800667a <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d14d      	bne.n	8006660 <sync_fs+0xc4>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	791b      	ldrb	r3, [r3, #4]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d149      	bne.n	8006660 <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3338      	adds	r3, #56	; 0x38
 80065d0:	0018      	movs	r0, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	899b      	ldrh	r3, [r3, #12]
 80065d6:	001a      	movs	r2, r3
 80065d8:	2100      	movs	r1, #0
 80065da:	f7ff fda0 	bl	800611e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3338      	adds	r3, #56	; 0x38
 80065e2:	33ff      	adds	r3, #255	; 0xff
 80065e4:	33ff      	adds	r3, #255	; 0xff
 80065e6:	4a28      	ldr	r2, [pc, #160]	; (8006688 <sync_fs+0xec>)
 80065e8:	0011      	movs	r1, r2
 80065ea:	0018      	movs	r0, r3
 80065ec:	f7ff fd30 	bl	8006050 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3338      	adds	r3, #56	; 0x38
 80065f4:	4a25      	ldr	r2, [pc, #148]	; (800668c <sync_fs+0xf0>)
 80065f6:	0011      	movs	r1, r2
 80065f8:	0018      	movs	r0, r3
 80065fa:	f7ff fd47 	bl	800608c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3338      	adds	r3, #56	; 0x38
 8006602:	33e5      	adds	r3, #229	; 0xe5
 8006604:	33ff      	adds	r3, #255	; 0xff
 8006606:	4a22      	ldr	r2, [pc, #136]	; (8006690 <sync_fs+0xf4>)
 8006608:	0011      	movs	r1, r2
 800660a:	0018      	movs	r0, r3
 800660c:	f7ff fd3e 	bl	800608c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3338      	adds	r3, #56	; 0x38
 8006614:	33e9      	adds	r3, #233	; 0xe9
 8006616:	33ff      	adds	r3, #255	; 0xff
 8006618:	001a      	movs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	0019      	movs	r1, r3
 8006620:	0010      	movs	r0, r2
 8006622:	f7ff fd33 	bl	800608c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3338      	adds	r3, #56	; 0x38
 800662a:	33ed      	adds	r3, #237	; 0xed
 800662c:	33ff      	adds	r3, #255	; 0xff
 800662e:	001a      	movs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	0019      	movs	r1, r3
 8006636:	0010      	movs	r0, r2
 8006638:	f7ff fd28 	bl	800608c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	7858      	ldrb	r0, [r3, #1]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3338      	adds	r3, #56	; 0x38
 800664e:	0019      	movs	r1, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006654:	2301      	movs	r3, #1
 8006656:	f7ff fc6f 	bl	8005f38 <disk_write>
			fs->fsi_flag = 0;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2200      	movs	r2, #0
 8006666:	2100      	movs	r1, #0
 8006668:	0018      	movs	r0, r3
 800666a:	f7ff fc8d 	bl	8005f88 <disk_ioctl>
 800666e:	1e03      	subs	r3, r0, #0
 8006670:	d003      	beq.n	800667a <sync_fs+0xde>
 8006672:	230f      	movs	r3, #15
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
	}

	return res;
 800667a:	230f      	movs	r3, #15
 800667c:	18fb      	adds	r3, r7, r3
 800667e:	781b      	ldrb	r3, [r3, #0]
}
 8006680:	0018      	movs	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	b004      	add	sp, #16
 8006686:	bdb0      	pop	{r4, r5, r7, pc}
 8006688:	0000aa55 	.word	0x0000aa55
 800668c:	41615252 	.word	0x41615252
 8006690:	61417272 	.word	0x61417272

08006694 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	3b02      	subs	r3, #2
 80066a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	3b02      	subs	r3, #2
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d301      	bcc.n	80066b4 <clust2sect+0x20>
 80066b0:	2300      	movs	r3, #0
 80066b2:	e007      	b.n	80066c4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	895b      	ldrh	r3, [r3, #10]
 80066b8:	001a      	movs	r2, r3
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	435a      	muls	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c2:	18d3      	adds	r3, r2, r3
}
 80066c4:	0018      	movs	r0, r3
 80066c6:	46bd      	mov	sp, r7
 80066c8:	b002      	add	sp, #8
 80066ca:	bd80      	pop	{r7, pc}

080066cc <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80066cc:	b590      	push	{r4, r7, lr}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d904      	bls.n	80066ec <get_fat+0x20>
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d302      	bcc.n	80066f2 <get_fat+0x26>
		val = 1;	/* Internal error */
 80066ec:	2301      	movs	r3, #1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e0c2      	b.n	8006878 <get_fat+0x1ac>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80066f2:	2301      	movs	r3, #1
 80066f4:	425b      	negs	r3, r3
 80066f6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d100      	bne.n	8006702 <get_fat+0x36>
 8006700:	e088      	b.n	8006814 <get_fat+0x148>
 8006702:	dd00      	ble.n	8006706 <get_fat+0x3a>
 8006704:	e0ae      	b.n	8006864 <get_fat+0x198>
 8006706:	2b01      	cmp	r3, #1
 8006708:	d002      	beq.n	8006710 <get_fat+0x44>
 800670a:	2b02      	cmp	r3, #2
 800670c:	d05c      	beq.n	80067c8 <get_fat+0xfc>
 800670e:	e0a9      	b.n	8006864 <get_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	085b      	lsrs	r3, r3, #1
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	18d3      	adds	r3, r2, r3
 800671c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	899b      	ldrh	r3, [r3, #12]
 8006726:	0019      	movs	r1, r3
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7f9 fd09 	bl	8000140 <__udivsi3>
 800672e:	0003      	movs	r3, r0
 8006730:	18e2      	adds	r2, r4, r3
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	0011      	movs	r1, r2
 8006736:	0018      	movs	r0, r3
 8006738:	f7ff fefa 	bl	8006530 <move_window>
 800673c:	1e03      	subs	r3, r0, #0
 800673e:	d000      	beq.n	8006742 <get_fat+0x76>
 8006740:	e093      	b.n	800686a <get_fat+0x19e>
			wc = fs->win[bc++ % SS(fs)];
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	60fa      	str	r2, [r7, #12]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	8992      	ldrh	r2, [r2, #12]
 800674c:	0011      	movs	r1, r2
 800674e:	0018      	movs	r0, r3
 8006750:	f7f9 fd7c 	bl	800024c <__aeabi_uidivmod>
 8006754:	000b      	movs	r3, r1
 8006756:	0019      	movs	r1, r3
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2238      	movs	r2, #56	; 0x38
 800675c:	185b      	adds	r3, r3, r1
 800675e:	189b      	adds	r3, r3, r2
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	899b      	ldrh	r3, [r3, #12]
 800676c:	0019      	movs	r1, r3
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7f9 fce6 	bl	8000140 <__udivsi3>
 8006774:	0003      	movs	r3, r0
 8006776:	18e2      	adds	r2, r4, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	0011      	movs	r1, r2
 800677c:	0018      	movs	r0, r3
 800677e:	f7ff fed7 	bl	8006530 <move_window>
 8006782:	1e03      	subs	r3, r0, #0
 8006784:	d000      	beq.n	8006788 <get_fat+0xbc>
 8006786:	e072      	b.n	800686e <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	899b      	ldrh	r3, [r3, #12]
 800678c:	001a      	movs	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	0011      	movs	r1, r2
 8006792:	0018      	movs	r0, r3
 8006794:	f7f9 fd5a 	bl	800024c <__aeabi_uidivmod>
 8006798:	000b      	movs	r3, r1
 800679a:	0019      	movs	r1, r3
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2238      	movs	r2, #56	; 0x38
 80067a0:	185b      	adds	r3, r3, r1
 80067a2:	189b      	adds	r3, r3, r2
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	021b      	lsls	r3, r3, #8
 80067a8:	001a      	movs	r2, r3
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2201      	movs	r2, #1
 80067b4:	4013      	ands	r3, r2
 80067b6:	d002      	beq.n	80067be <get_fat+0xf2>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	091b      	lsrs	r3, r3, #4
 80067bc:	e002      	b.n	80067c4 <get_fat+0xf8>
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	051b      	lsls	r3, r3, #20
 80067c2:	0d1b      	lsrs	r3, r3, #20
 80067c4:	617b      	str	r3, [r7, #20]
			break;
 80067c6:	e057      	b.n	8006878 <get_fat+0x1ac>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	899b      	ldrh	r3, [r3, #12]
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	0019      	movs	r1, r3
 80067d6:	6838      	ldr	r0, [r7, #0]
 80067d8:	f7f9 fcb2 	bl	8000140 <__udivsi3>
 80067dc:	0003      	movs	r3, r0
 80067de:	18e2      	adds	r2, r4, r3
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	0011      	movs	r1, r2
 80067e4:	0018      	movs	r0, r3
 80067e6:	f7ff fea3 	bl	8006530 <move_window>
 80067ea:	1e03      	subs	r3, r0, #0
 80067ec:	d141      	bne.n	8006872 <get_fat+0x1a6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	3338      	adds	r3, #56	; 0x38
 80067f2:	001c      	movs	r4, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	005a      	lsls	r2, r3, #1
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	899b      	ldrh	r3, [r3, #12]
 80067fc:	0019      	movs	r1, r3
 80067fe:	0010      	movs	r0, r2
 8006800:	f7f9 fd24 	bl	800024c <__aeabi_uidivmod>
 8006804:	000b      	movs	r3, r1
 8006806:	18e3      	adds	r3, r4, r3
 8006808:	0018      	movs	r0, r3
 800680a:	f7ff fbe5 	bl	8005fd8 <ld_word>
 800680e:	0003      	movs	r3, r0
 8006810:	617b      	str	r3, [r7, #20]
			break;
 8006812:	e031      	b.n	8006878 <get_fat+0x1ac>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	899b      	ldrh	r3, [r3, #12]
 800681c:	089b      	lsrs	r3, r3, #2
 800681e:	b29b      	uxth	r3, r3
 8006820:	0019      	movs	r1, r3
 8006822:	6838      	ldr	r0, [r7, #0]
 8006824:	f7f9 fc8c 	bl	8000140 <__udivsi3>
 8006828:	0003      	movs	r3, r0
 800682a:	18e2      	adds	r2, r4, r3
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	0011      	movs	r1, r2
 8006830:	0018      	movs	r0, r3
 8006832:	f7ff fe7d 	bl	8006530 <move_window>
 8006836:	1e03      	subs	r3, r0, #0
 8006838:	d11d      	bne.n	8006876 <get_fat+0x1aa>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	3338      	adds	r3, #56	; 0x38
 800683e:	001c      	movs	r4, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	009a      	lsls	r2, r3, #2
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	899b      	ldrh	r3, [r3, #12]
 8006848:	0019      	movs	r1, r3
 800684a:	0010      	movs	r0, r2
 800684c:	f7f9 fcfe 	bl	800024c <__aeabi_uidivmod>
 8006850:	000b      	movs	r3, r1
 8006852:	18e3      	adds	r3, r4, r3
 8006854:	0018      	movs	r0, r3
 8006856:	f7ff fbda 	bl	800600e <ld_dword>
 800685a:	0003      	movs	r3, r0
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	617b      	str	r3, [r7, #20]
			break;
 8006862:	e009      	b.n	8006878 <get_fat+0x1ac>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e006      	b.n	8006878 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	e004      	b.n	8006878 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	e002      	b.n	8006878 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	e000      	b.n	8006878 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006876:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 8006878:	697b      	ldr	r3, [r7, #20]
}
 800687a:	0018      	movs	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	b007      	add	sp, #28
 8006880:	bd90      	pop	{r4, r7, pc}

08006882 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006882:	b5b0      	push	{r4, r5, r7, lr}
 8006884:	b088      	sub	sp, #32
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800688e:	231f      	movs	r3, #31
 8006890:	18fb      	adds	r3, r7, r3
 8006892:	2202      	movs	r2, #2
 8006894:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d800      	bhi.n	800689e <put_fat+0x1c>
 800689c:	e11a      	b.n	8006ad4 <put_fat+0x252>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d300      	bcc.n	80068aa <put_fat+0x28>
 80068a8:	e114      	b.n	8006ad4 <put_fat+0x252>
		switch (fs->fs_type) {
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d100      	bne.n	80068b4 <put_fat+0x32>
 80068b2:	e0c1      	b.n	8006a38 <put_fat+0x1b6>
 80068b4:	dd00      	ble.n	80068b8 <put_fat+0x36>
 80068b6:	e10d      	b.n	8006ad4 <put_fat+0x252>
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d003      	beq.n	80068c4 <put_fat+0x42>
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d100      	bne.n	80068c2 <put_fat+0x40>
 80068c0:	e08a      	b.n	80069d8 <put_fat+0x156>
 80068c2:	e107      	b.n	8006ad4 <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	18d3      	adds	r3, r2, r3
 80068d0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	899b      	ldrh	r3, [r3, #12]
 80068da:	0019      	movs	r1, r3
 80068dc:	69b8      	ldr	r0, [r7, #24]
 80068de:	f7f9 fc2f 	bl	8000140 <__udivsi3>
 80068e2:	0003      	movs	r3, r0
 80068e4:	18e2      	adds	r2, r4, r3
 80068e6:	251f      	movs	r5, #31
 80068e8:	197c      	adds	r4, r7, r5
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	0011      	movs	r1, r2
 80068ee:	0018      	movs	r0, r3
 80068f0:	f7ff fe1e 	bl	8006530 <move_window>
 80068f4:	0003      	movs	r3, r0
 80068f6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80068f8:	197b      	adds	r3, r7, r5
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d000      	beq.n	8006902 <put_fat+0x80>
 8006900:	e0e1      	b.n	8006ac6 <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3338      	adds	r3, #56	; 0x38
 8006906:	001c      	movs	r4, r3
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	1c5a      	adds	r2, r3, #1
 800690c:	61ba      	str	r2, [r7, #24]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	8992      	ldrh	r2, [r2, #12]
 8006912:	0011      	movs	r1, r2
 8006914:	0018      	movs	r0, r3
 8006916:	f7f9 fc99 	bl	800024c <__aeabi_uidivmod>
 800691a:	000b      	movs	r3, r1
 800691c:	18e3      	adds	r3, r4, r3
 800691e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2201      	movs	r2, #1
 8006924:	4013      	ands	r3, r2
 8006926:	d00d      	beq.n	8006944 <put_fat+0xc2>
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	b25b      	sxtb	r3, r3
 800692e:	220f      	movs	r2, #15
 8006930:	4013      	ands	r3, r2
 8006932:	b25a      	sxtb	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	011b      	lsls	r3, r3, #4
 800693a:	b25b      	sxtb	r3, r3
 800693c:	4313      	orrs	r3, r2
 800693e:	b25b      	sxtb	r3, r3
 8006940:	b2db      	uxtb	r3, r3
 8006942:	e001      	b.n	8006948 <put_fat+0xc6>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	899b      	ldrh	r3, [r3, #12]
 800695a:	0019      	movs	r1, r3
 800695c:	69b8      	ldr	r0, [r7, #24]
 800695e:	f7f9 fbef 	bl	8000140 <__udivsi3>
 8006962:	0003      	movs	r3, r0
 8006964:	18e2      	adds	r2, r4, r3
 8006966:	251f      	movs	r5, #31
 8006968:	197c      	adds	r4, r7, r5
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	0011      	movs	r1, r2
 800696e:	0018      	movs	r0, r3
 8006970:	f7ff fdde 	bl	8006530 <move_window>
 8006974:	0003      	movs	r3, r0
 8006976:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006978:	197b      	adds	r3, r7, r5
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d000      	beq.n	8006982 <put_fat+0x100>
 8006980:	e0a3      	b.n	8006aca <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3338      	adds	r3, #56	; 0x38
 8006986:	001c      	movs	r4, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	899b      	ldrh	r3, [r3, #12]
 800698c:	001a      	movs	r2, r3
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	0011      	movs	r1, r2
 8006992:	0018      	movs	r0, r3
 8006994:	f7f9 fc5a 	bl	800024c <__aeabi_uidivmod>
 8006998:	000b      	movs	r3, r1
 800699a:	18e3      	adds	r3, r4, r3
 800699c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2201      	movs	r2, #1
 80069a2:	4013      	ands	r3, r2
 80069a4:	d003      	beq.n	80069ae <put_fat+0x12c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	091b      	lsrs	r3, r3, #4
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	e00e      	b.n	80069cc <put_fat+0x14a>
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	220f      	movs	r2, #15
 80069b6:	4393      	bics	r3, r2
 80069b8:	b25a      	sxtb	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0a1b      	lsrs	r3, r3, #8
 80069be:	b25b      	sxtb	r3, r3
 80069c0:	210f      	movs	r1, #15
 80069c2:	400b      	ands	r3, r1
 80069c4:	b25b      	sxtb	r3, r3
 80069c6:	4313      	orrs	r3, r2
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2201      	movs	r2, #1
 80069d4:	70da      	strb	r2, [r3, #3]
			break;
 80069d6:	e07d      	b.n	8006ad4 <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	899b      	ldrh	r3, [r3, #12]
 80069e0:	085b      	lsrs	r3, r3, #1
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	0019      	movs	r1, r3
 80069e6:	68b8      	ldr	r0, [r7, #8]
 80069e8:	f7f9 fbaa 	bl	8000140 <__udivsi3>
 80069ec:	0003      	movs	r3, r0
 80069ee:	18e2      	adds	r2, r4, r3
 80069f0:	251f      	movs	r5, #31
 80069f2:	197c      	adds	r4, r7, r5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	0011      	movs	r1, r2
 80069f8:	0018      	movs	r0, r3
 80069fa:	f7ff fd99 	bl	8006530 <move_window>
 80069fe:	0003      	movs	r3, r0
 8006a00:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006a02:	197b      	adds	r3, r7, r5
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d161      	bne.n	8006ace <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3338      	adds	r3, #56	; 0x38
 8006a0e:	001c      	movs	r4, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	005a      	lsls	r2, r3, #1
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	899b      	ldrh	r3, [r3, #12]
 8006a18:	0019      	movs	r1, r3
 8006a1a:	0010      	movs	r0, r2
 8006a1c:	f7f9 fc16 	bl	800024c <__aeabi_uidivmod>
 8006a20:	000b      	movs	r3, r1
 8006a22:	18e3      	adds	r3, r4, r3
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	b292      	uxth	r2, r2
 8006a28:	0011      	movs	r1, r2
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f7ff fb10 	bl	8006050 <st_word>
			fs->wflag = 1;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	70da      	strb	r2, [r3, #3]
			break;
 8006a36:	e04d      	b.n	8006ad4 <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	899b      	ldrh	r3, [r3, #12]
 8006a40:	089b      	lsrs	r3, r3, #2
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	0019      	movs	r1, r3
 8006a46:	68b8      	ldr	r0, [r7, #8]
 8006a48:	f7f9 fb7a 	bl	8000140 <__udivsi3>
 8006a4c:	0003      	movs	r3, r0
 8006a4e:	18e2      	adds	r2, r4, r3
 8006a50:	251f      	movs	r5, #31
 8006a52:	197c      	adds	r4, r7, r5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	0011      	movs	r1, r2
 8006a58:	0018      	movs	r0, r3
 8006a5a:	f7ff fd69 	bl	8006530 <move_window>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006a62:	197b      	adds	r3, r7, r5
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d133      	bne.n	8006ad2 <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	091c      	lsrs	r4, r3, #4
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3338      	adds	r3, #56	; 0x38
 8006a74:	001d      	movs	r5, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	009a      	lsls	r2, r3, #2
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	899b      	ldrh	r3, [r3, #12]
 8006a7e:	0019      	movs	r1, r3
 8006a80:	0010      	movs	r0, r2
 8006a82:	f7f9 fbe3 	bl	800024c <__aeabi_uidivmod>
 8006a86:	000b      	movs	r3, r1
 8006a88:	18eb      	adds	r3, r5, r3
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	f7ff fabf 	bl	800600e <ld_dword>
 8006a90:	0003      	movs	r3, r0
 8006a92:	0f1b      	lsrs	r3, r3, #28
 8006a94:	071b      	lsls	r3, r3, #28
 8006a96:	4323      	orrs	r3, r4
 8006a98:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3338      	adds	r3, #56	; 0x38
 8006a9e:	001c      	movs	r4, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	009a      	lsls	r2, r3, #2
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	899b      	ldrh	r3, [r3, #12]
 8006aa8:	0019      	movs	r1, r3
 8006aaa:	0010      	movs	r0, r2
 8006aac:	f7f9 fbce 	bl	800024c <__aeabi_uidivmod>
 8006ab0:	000b      	movs	r3, r1
 8006ab2:	18e3      	adds	r3, r4, r3
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	0011      	movs	r1, r2
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f7ff fae7 	bl	800608c <st_dword>
			fs->wflag = 1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	70da      	strb	r2, [r3, #3]
			break;
 8006ac4:	e006      	b.n	8006ad4 <put_fat+0x252>
			if (res != FR_OK) break;
 8006ac6:	46c0      	nop			; (mov r8, r8)
 8006ac8:	e004      	b.n	8006ad4 <put_fat+0x252>
			if (res != FR_OK) break;
 8006aca:	46c0      	nop			; (mov r8, r8)
 8006acc:	e002      	b.n	8006ad4 <put_fat+0x252>
			if (res != FR_OK) break;
 8006ace:	46c0      	nop			; (mov r8, r8)
 8006ad0:	e000      	b.n	8006ad4 <put_fat+0x252>
			if (res != FR_OK) break;
 8006ad2:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 8006ad4:	231f      	movs	r3, #31
 8006ad6:	18fb      	adds	r3, r7, r3
 8006ad8:	781b      	ldrb	r3, [r3, #0]
}
 8006ada:	0018      	movs	r0, r3
 8006adc:	46bd      	mov	sp, r7
 8006ade:	b008      	add	sp, #32
 8006ae0:	bdb0      	pop	{r4, r5, r7, pc}

08006ae2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006ae2:	b5b0      	push	{r4, r5, r7, lr}
 8006ae4:	b088      	sub	sp, #32
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006aee:	231f      	movs	r3, #31
 8006af0:	18fb      	adds	r3, r7, r3
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d904      	bls.n	8006b0c <remove_chain+0x2a>
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d301      	bcc.n	8006b10 <remove_chain+0x2e>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e057      	b.n	8006bc0 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d011      	beq.n	8006b3a <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006b16:	251f      	movs	r5, #31
 8006b18:	197c      	adds	r4, r7, r5
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	425a      	negs	r2, r3
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	0018      	movs	r0, r3
 8006b24:	f7ff fead 	bl	8006882 <put_fat>
 8006b28:	0003      	movs	r3, r0
 8006b2a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8006b2c:	197b      	adds	r3, r7, r5
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <remove_chain+0x58>
 8006b34:	197b      	adds	r3, r7, r5
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	e042      	b.n	8006bc0 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	0011      	movs	r1, r2
 8006b40:	0018      	movs	r0, r3
 8006b42:	f7ff fdc3 	bl	80066cc <get_fat>
 8006b46:	0003      	movs	r3, r0
 8006b48:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d035      	beq.n	8006bbc <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d101      	bne.n	8006b5a <remove_chain+0x78>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e032      	b.n	8006bc0 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <remove_chain+0x82>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e02d      	b.n	8006bc0 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006b64:	251f      	movs	r5, #31
 8006b66:	197c      	adds	r4, r7, r5
 8006b68:	68b9      	ldr	r1, [r7, #8]
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	0018      	movs	r0, r3
 8006b70:	f7ff fe87 	bl	8006882 <put_fat>
 8006b74:	0003      	movs	r3, r0
 8006b76:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8006b78:	197b      	adds	r3, r7, r5
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <remove_chain+0xa4>
 8006b80:	197b      	adds	r3, r7, r5
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	e01c      	b.n	8006bc0 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	3b02      	subs	r3, #2
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d20b      	bcs.n	8006bac <remove_chain+0xca>
			fs->free_clst++;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	791b      	ldrb	r3, [r3, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d3bf      	bcc.n	8006b3a <remove_chain+0x58>
 8006bba:	e000      	b.n	8006bbe <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8006bbc:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b008      	add	sp, #32
 8006bc6:	bdb0      	pop	{r4, r5, r7, pc}

08006bc8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006bc8:	b5b0      	push	{r4, r5, r7, lr}
 8006bca:	b088      	sub	sp, #32
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10d      	bne.n	8006bfa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <create_chain+0x2c>
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d31d      	bcc.n	8006c30 <create_chain+0x68>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	61bb      	str	r3, [r7, #24]
 8006bf8:	e01a      	b.n	8006c30 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	0011      	movs	r1, r2
 8006c00:	0018      	movs	r0, r3
 8006c02:	f7ff fd63 	bl	80066cc <get_fat>
 8006c06:	0003      	movs	r3, r0
 8006c08:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d801      	bhi.n	8006c14 <create_chain+0x4c>
 8006c10:	2301      	movs	r3, #1
 8006c12:	e07b      	b.n	8006d0c <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	3301      	adds	r3, #1
 8006c18:	d101      	bne.n	8006c1e <create_chain+0x56>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	e076      	b.n	8006d0c <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d201      	bcs.n	8006c2c <create_chain+0x64>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	e06f      	b.n	8006d0c <create_chain+0x144>
		scl = clst;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	3301      	adds	r3, #1
 8006c38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d307      	bcc.n	8006c54 <create_chain+0x8c>
				ncl = 2;
 8006c44:	2302      	movs	r3, #2
 8006c46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d901      	bls.n	8006c54 <create_chain+0x8c>
 8006c50:	2300      	movs	r3, #0
 8006c52:	e05b      	b.n	8006d0c <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	0011      	movs	r1, r2
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f7ff fd36 	bl	80066cc <get_fat>
 8006c60:	0003      	movs	r3, r0
 8006c62:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00d      	beq.n	8006c86 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d002      	beq.n	8006c76 <create_chain+0xae>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	d101      	bne.n	8006c7a <create_chain+0xb2>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	e048      	b.n	8006d0c <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d1d8      	bne.n	8006c34 <create_chain+0x6c>
 8006c82:	2300      	movs	r3, #0
 8006c84:	e042      	b.n	8006d0c <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8006c86:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006c88:	2517      	movs	r5, #23
 8006c8a:	197c      	adds	r4, r7, r5
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	425a      	negs	r2, r3
 8006c90:	69f9      	ldr	r1, [r7, #28]
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	0018      	movs	r0, r3
 8006c96:	f7ff fdf4 	bl	8006882 <put_fat>
 8006c9a:	0003      	movs	r3, r0
 8006c9c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8006c9e:	197b      	adds	r3, r7, r5
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10b      	bne.n	8006cbe <create_chain+0xf6>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d008      	beq.n	8006cbe <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006cac:	197c      	adds	r4, r7, r5
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f7ff fde4 	bl	8006882 <put_fat>
 8006cba:	0003      	movs	r3, r0
 8006cbc:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006cbe:	2317      	movs	r3, #23
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d116      	bne.n	8006cf6 <create_chain+0x12e>
		fs->last_clst = ncl;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	3b02      	subs	r3, #2
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d804      	bhi.n	8006ce6 <create_chain+0x11e>
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	1e5a      	subs	r2, r3, #1
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	791b      	ldrb	r3, [r3, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	4313      	orrs	r3, r2
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	711a      	strb	r2, [r3, #4]
 8006cf4:	e009      	b.n	8006d0a <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006cf6:	2317      	movs	r3, #23
 8006cf8:	18fb      	adds	r3, r7, r3
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d102      	bne.n	8006d06 <create_chain+0x13e>
 8006d00:	2301      	movs	r3, #1
 8006d02:	425b      	negs	r3, r3
 8006d04:	e000      	b.n	8006d08 <create_chain+0x140>
 8006d06:	2301      	movs	r3, #1
 8006d08:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006d0a:	69fb      	ldr	r3, [r7, #28]
}
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	b008      	add	sp, #32
 8006d12:	bdb0      	pop	{r4, r5, r7, pc}

08006d14 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	3304      	adds	r3, #4
 8006d2a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	899b      	ldrh	r3, [r3, #12]
 8006d30:	0019      	movs	r1, r3
 8006d32:	6838      	ldr	r0, [r7, #0]
 8006d34:	f7f9 fa04 	bl	8000140 <__udivsi3>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	001a      	movs	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	895b      	ldrh	r3, [r3, #10]
 8006d40:	0019      	movs	r1, r3
 8006d42:	0010      	movs	r0, r2
 8006d44:	f7f9 f9fc 	bl	8000140 <__udivsi3>
 8006d48:	0003      	movs	r3, r0
 8006d4a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1d1a      	adds	r2, r3, #4
 8006d50:	613a      	str	r2, [r7, #16]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <clmt_clust+0x4c>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e010      	b.n	8006d82 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d307      	bcc.n	8006d78 <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	3304      	adds	r3, #4
 8006d74:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006d76:	e7e9      	b.n	8006d4c <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 8006d78:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	18d3      	adds	r3, r2, r3
}
 8006d82:	0018      	movs	r0, r3
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b006      	add	sp, #24
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006d8a:	b590      	push	{r4, r7, lr}
 8006d8c:	b087      	sub	sp, #28
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	2380      	movs	r3, #128	; 0x80
 8006d9e:	039b      	lsls	r3, r3, #14
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d203      	bcs.n	8006dac <dir_sdi+0x22>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	221f      	movs	r2, #31
 8006da8:	4013      	ands	r3, r2
 8006daa:	d001      	beq.n	8006db0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006dac:	2302      	movs	r3, #2
 8006dae:	e074      	b.n	8006e9a <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <dir_sdi+0x46>
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d902      	bls.n	8006dd0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10c      	bne.n	8006df0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	8912      	ldrh	r2, [r2, #8]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d301      	bcc.n	8006de6 <dir_sdi+0x5c>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e059      	b.n	8006e9a <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	61da      	str	r2, [r3, #28]
 8006dee:	e02f      	b.n	8006e50 <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	895b      	ldrh	r3, [r3, #10]
 8006df4:	001a      	movs	r2, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	899b      	ldrh	r3, [r3, #12]
 8006dfa:	4353      	muls	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006dfe:	e01a      	b.n	8006e36 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	0011      	movs	r1, r2
 8006e06:	0018      	movs	r0, r3
 8006e08:	f7ff fc60 	bl	80066cc <get_fat>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	3301      	adds	r3, #1
 8006e14:	d101      	bne.n	8006e1a <dir_sdi+0x90>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e03f      	b.n	8006e9a <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d904      	bls.n	8006e2a <dir_sdi+0xa0>
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d301      	bcc.n	8006e2e <dir_sdi+0xa4>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	e035      	b.n	8006e9a <dir_sdi+0x110>
			ofs -= csz;
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d2e0      	bcs.n	8006e00 <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	0011      	movs	r1, r2
 8006e44:	0018      	movs	r0, r3
 8006e46:	f7ff fc25 	bl	8006694 <clust2sect>
 8006e4a:	0002      	movs	r2, r0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <dir_sdi+0xd8>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e01b      	b.n	8006e9a <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	69dc      	ldr	r4, [r3, #28]
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	899b      	ldrh	r3, [r3, #12]
 8006e6a:	0019      	movs	r1, r3
 8006e6c:	6838      	ldr	r0, [r7, #0]
 8006e6e:	f7f9 f967 	bl	8000140 <__udivsi3>
 8006e72:	0003      	movs	r3, r0
 8006e74:	18e2      	adds	r2, r4, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	3338      	adds	r3, #56	; 0x38
 8006e7e:	001c      	movs	r4, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	899b      	ldrh	r3, [r3, #12]
 8006e84:	001a      	movs	r2, r3
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	0011      	movs	r1, r2
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f7f9 f9de 	bl	800024c <__aeabi_uidivmod>
 8006e90:	000b      	movs	r3, r1
 8006e92:	18e2      	adds	r2, r4, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	b007      	add	sp, #28
 8006ea0:	bd90      	pop	{r4, r7, pc}

08006ea2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006ea2:	b590      	push	{r4, r7, lr}
 8006ea4:	b087      	sub	sp, #28
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	3320      	adds	r3, #32
 8006eb8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d004      	beq.n	8006ecc <dir_next+0x2a>
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	2380      	movs	r3, #128	; 0x80
 8006ec6:	039b      	lsls	r3, r3, #14
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d301      	bcc.n	8006ed0 <dir_next+0x2e>
 8006ecc:	2304      	movs	r3, #4
 8006ece:	e0c0      	b.n	8007052 <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	899b      	ldrh	r3, [r3, #12]
 8006ed4:	001a      	movs	r2, r3
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	0011      	movs	r1, r2
 8006eda:	0018      	movs	r0, r3
 8006edc:	f7f9 f9b6 	bl	800024c <__aeabi_uidivmod>
 8006ee0:	1e0b      	subs	r3, r1, #0
 8006ee2:	d000      	beq.n	8006ee6 <dir_next+0x44>
 8006ee4:	e0a2      	b.n	800702c <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	8912      	ldrh	r2, [r2, #8]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d200      	bcs.n	8006f06 <dir_next+0x64>
 8006f04:	e092      	b.n	800702c <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	61da      	str	r2, [r3, #28]
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	e0a0      	b.n	8007052 <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	899b      	ldrh	r3, [r3, #12]
 8006f14:	0019      	movs	r1, r3
 8006f16:	68b8      	ldr	r0, [r7, #8]
 8006f18:	f7f9 f912 	bl	8000140 <__udivsi3>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	001a      	movs	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	895b      	ldrh	r3, [r3, #10]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	4013      	ands	r3, r2
 8006f28:	d000      	beq.n	8006f2c <dir_next+0x8a>
 8006f2a:	e07f      	b.n	800702c <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	0019      	movs	r1, r3
 8006f34:	0010      	movs	r0, r2
 8006f36:	f7ff fbc9 	bl	80066cc <get_fat>
 8006f3a:	0003      	movs	r3, r0
 8006f3c:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d801      	bhi.n	8006f48 <dir_next+0xa6>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e084      	b.n	8007052 <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <dir_next+0xb0>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e07f      	b.n	8007052 <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d35b      	bcc.n	8007014 <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	61da      	str	r2, [r3, #28]
 8006f68:	2304      	movs	r3, #4
 8006f6a:	e072      	b.n	8007052 <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	0019      	movs	r1, r3
 8006f74:	0010      	movs	r0, r2
 8006f76:	f7ff fe27 	bl	8006bc8 <create_chain>
 8006f7a:	0003      	movs	r3, r0
 8006f7c:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d101      	bne.n	8006f88 <dir_next+0xe6>
 8006f84:	2307      	movs	r3, #7
 8006f86:	e064      	b.n	8007052 <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <dir_next+0xf0>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e05f      	b.n	8007052 <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	3301      	adds	r3, #1
 8006f96:	d101      	bne.n	8006f9c <dir_next+0xfa>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e05a      	b.n	8007052 <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f7ff fa7e 	bl	80064a0 <sync_window>
 8006fa4:	1e03      	subs	r3, r0, #0
 8006fa6:	d001      	beq.n	8006fac <dir_next+0x10a>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e052      	b.n	8007052 <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3338      	adds	r3, #56	; 0x38
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	899b      	ldrh	r3, [r3, #12]
 8006fb6:	001a      	movs	r2, r3
 8006fb8:	2100      	movs	r1, #0
 8006fba:	f7ff f8b0 	bl	800611e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	613b      	str	r3, [r7, #16]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	0011      	movs	r1, r2
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f7ff fb63 	bl	8006694 <clust2sect>
 8006fce:	0002      	movs	r2, r0
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	635a      	str	r2, [r3, #52]	; 0x34
 8006fd4:	e012      	b.n	8006ffc <dir_next+0x15a>
						fs->wflag = 1;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f7ff fa5e 	bl	80064a0 <sync_window>
 8006fe4:	1e03      	subs	r3, r0, #0
 8006fe6:	d001      	beq.n	8006fec <dir_next+0x14a>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e032      	b.n	8007052 <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	613b      	str	r3, [r7, #16]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	635a      	str	r2, [r3, #52]	; 0x34
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	895b      	ldrh	r3, [r3, #10]
 8007000:	001a      	movs	r2, r3
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	4293      	cmp	r3, r2
 8007006:	d3e6      	bcc.n	8006fd6 <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	697a      	ldr	r2, [r7, #20]
 8007018:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	0011      	movs	r1, r2
 8007020:	0018      	movs	r0, r3
 8007022:	f7ff fb37 	bl	8006694 <clust2sect>
 8007026:	0002      	movs	r2, r0
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3338      	adds	r3, #56	; 0x38
 8007036:	001c      	movs	r4, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	899b      	ldrh	r3, [r3, #12]
 800703c:	001a      	movs	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	0011      	movs	r1, r2
 8007042:	0018      	movs	r0, r3
 8007044:	f7f9 f902 	bl	800024c <__aeabi_uidivmod>
 8007048:	000b      	movs	r3, r1
 800704a:	18e2      	adds	r2, r4, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	0018      	movs	r0, r3
 8007054:	46bd      	mov	sp, r7
 8007056:	b007      	add	sp, #28
 8007058:	bd90      	pop	{r4, r7, pc}

0800705a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800705a:	b5b0      	push	{r4, r5, r7, lr}
 800705c:	b086      	sub	sp, #24
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800706a:	2517      	movs	r5, #23
 800706c:	197c      	adds	r4, r7, r5
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2100      	movs	r1, #0
 8007072:	0018      	movs	r0, r3
 8007074:	f7ff fe89 	bl	8006d8a <dir_sdi>
 8007078:	0003      	movs	r3, r0
 800707a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800707c:	197b      	adds	r3, r7, r5
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d133      	bne.n	80070ec <dir_alloc+0x92>
		n = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	69da      	ldr	r2, [r3, #28]
 800708c:	2517      	movs	r5, #23
 800708e:	197c      	adds	r4, r7, r5
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	0011      	movs	r1, r2
 8007094:	0018      	movs	r0, r3
 8007096:	f7ff fa4b 	bl	8006530 <move_window>
 800709a:	0003      	movs	r3, r0
 800709c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800709e:	197b      	adds	r3, r7, r5
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d121      	bne.n	80070ea <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	2be5      	cmp	r3, #229	; 0xe5
 80070ae:	d004      	beq.n	80070ba <dir_alloc+0x60>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a1b      	ldr	r3, [r3, #32]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d107      	bne.n	80070ca <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	3301      	adds	r3, #1
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d102      	bne.n	80070ce <dir_alloc+0x74>
 80070c8:	e010      	b.n	80070ec <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80070ca:	2300      	movs	r3, #0
 80070cc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80070ce:	2517      	movs	r5, #23
 80070d0:	197c      	adds	r4, r7, r5
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2101      	movs	r1, #1
 80070d6:	0018      	movs	r0, r3
 80070d8:	f7ff fee3 	bl	8006ea2 <dir_next>
 80070dc:	0003      	movs	r3, r0
 80070de:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80070e0:	197b      	adds	r3, r7, r5
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0cf      	beq.n	8007088 <dir_alloc+0x2e>
 80070e8:	e000      	b.n	80070ec <dir_alloc+0x92>
			if (res != FR_OK) break;
 80070ea:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80070ec:	2217      	movs	r2, #23
 80070ee:	18bb      	adds	r3, r7, r2
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d102      	bne.n	80070fc <dir_alloc+0xa2>
 80070f6:	18bb      	adds	r3, r7, r2
 80070f8:	2207      	movs	r2, #7
 80070fa:	701a      	strb	r2, [r3, #0]
	return res;
 80070fc:	2317      	movs	r3, #23
 80070fe:	18fb      	adds	r3, r7, r3
 8007100:	781b      	ldrb	r3, [r3, #0]
}
 8007102:	0018      	movs	r0, r3
 8007104:	46bd      	mov	sp, r7
 8007106:	b006      	add	sp, #24
 8007108:	bdb0      	pop	{r4, r5, r7, pc}

0800710a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	331a      	adds	r3, #26
 8007118:	0018      	movs	r0, r3
 800711a:	f7fe ff5d 	bl	8005fd8 <ld_word>
 800711e:	0003      	movs	r3, r0
 8007120:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b03      	cmp	r3, #3
 8007128:	d109      	bne.n	800713e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	3314      	adds	r3, #20
 800712e:	0018      	movs	r0, r3
 8007130:	f7fe ff52 	bl	8005fd8 <ld_word>
 8007134:	0003      	movs	r3, r0
 8007136:	041b      	lsls	r3, r3, #16
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800713e:	68fb      	ldr	r3, [r7, #12]
}
 8007140:	0018      	movs	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	b004      	add	sp, #16
 8007146:	bd80      	pop	{r7, pc}

08007148 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	331a      	adds	r3, #26
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	b292      	uxth	r2, r2
 800715c:	0011      	movs	r1, r2
 800715e:	0018      	movs	r0, r3
 8007160:	f7fe ff76 	bl	8006050 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	2b03      	cmp	r3, #3
 800716a:	d109      	bne.n	8007180 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	3314      	adds	r3, #20
 8007170:	001a      	movs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	0c1b      	lsrs	r3, r3, #16
 8007176:	b29b      	uxth	r3, r3
 8007178:	0019      	movs	r1, r3
 800717a:	0010      	movs	r0, r2
 800717c:	f7fe ff68 	bl	8006050 <st_word>
	}
}
 8007180:	46c0      	nop			; (mov r8, r8)
 8007182:	46bd      	mov	sp, r7
 8007184:	b004      	add	sp, #16
 8007186:	bd80      	pop	{r7, pc}

08007188 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007188:	b5b0      	push	{r4, r5, r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	331a      	adds	r3, #26
 8007196:	0018      	movs	r0, r3
 8007198:	f7fe ff1e 	bl	8005fd8 <ld_word>
 800719c:	1e03      	subs	r3, r0, #0
 800719e:	d001      	beq.n	80071a4 <cmp_lfn+0x1c>
 80071a0:	2300      	movs	r3, #0
 80071a2:	e068      	b.n	8007276 <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	001a      	movs	r2, r3
 80071aa:	233f      	movs	r3, #63	; 0x3f
 80071ac:	4013      	ands	r3, r2
 80071ae:	1e5a      	subs	r2, r3, #1
 80071b0:	0013      	movs	r3, r2
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	189b      	adds	r3, r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	189b      	adds	r3, r3, r2
 80071ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80071bc:	230e      	movs	r3, #14
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	2201      	movs	r2, #1
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	e03d      	b.n	8007246 <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80071ca:	4a2d      	ldr	r2, [pc, #180]	; (8007280 <cmp_lfn+0xf8>)
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	18d3      	adds	r3, r2, r3
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	001a      	movs	r2, r3
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	189b      	adds	r3, r3, r2
 80071d8:	250c      	movs	r5, #12
 80071da:	197c      	adds	r4, r7, r5
 80071dc:	0018      	movs	r0, r3
 80071de:	f7fe fefb 	bl	8005fd8 <ld_word>
 80071e2:	0003      	movs	r3, r0
 80071e4:	8023      	strh	r3, [r4, #0]
		if (wc) {
 80071e6:	230e      	movs	r3, #14
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	881b      	ldrh	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01f      	beq.n	8007230 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2bfe      	cmp	r3, #254	; 0xfe
 80071f4:	d813      	bhi.n	800721e <cmp_lfn+0x96>
 80071f6:	197b      	adds	r3, r7, r5
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	0018      	movs	r0, r3
 80071fc:	f001 ff8c 	bl	8009118 <ff_wtoupper>
 8007200:	0003      	movs	r3, r0
 8007202:	001c      	movs	r4, r3
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	617a      	str	r2, [r7, #20]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	18d3      	adds	r3, r2, r3
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	0018      	movs	r0, r3
 8007214:	f001 ff80 	bl	8009118 <ff_wtoupper>
 8007218:	0003      	movs	r3, r0
 800721a:	429c      	cmp	r4, r3
 800721c:	d001      	beq.n	8007222 <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 800721e:	2300      	movs	r3, #0
 8007220:	e029      	b.n	8007276 <cmp_lfn+0xee>
			}
			wc = uc;
 8007222:	230e      	movs	r3, #14
 8007224:	18fb      	adds	r3, r7, r3
 8007226:	220c      	movs	r2, #12
 8007228:	18ba      	adds	r2, r7, r2
 800722a:	8812      	ldrh	r2, [r2, #0]
 800722c:	801a      	strh	r2, [r3, #0]
 800722e:	e007      	b.n	8007240 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007230:	230c      	movs	r3, #12
 8007232:	18fb      	adds	r3, r7, r3
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	4a13      	ldr	r2, [pc, #76]	; (8007284 <cmp_lfn+0xfc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d001      	beq.n	8007240 <cmp_lfn+0xb8>
 800723c:	2300      	movs	r3, #0
 800723e:	e01a      	b.n	8007276 <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	3301      	adds	r3, #1
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b0c      	cmp	r3, #12
 800724a:	d9be      	bls.n	80071ca <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	001a      	movs	r2, r3
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	4013      	ands	r3, r2
 8007256:	d00d      	beq.n	8007274 <cmp_lfn+0xec>
 8007258:	230e      	movs	r3, #14
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d008      	beq.n	8007274 <cmp_lfn+0xec>
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	18d3      	adds	r3, r2, r3
 800726a:	881b      	ldrh	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <cmp_lfn+0xec>
 8007270:	2300      	movs	r3, #0
 8007272:	e000      	b.n	8007276 <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 8007274:	2301      	movs	r3, #1
}
 8007276:	0018      	movs	r0, r3
 8007278:	46bd      	mov	sp, r7
 800727a:	b006      	add	sp, #24
 800727c:	bdb0      	pop	{r4, r5, r7, pc}
 800727e:	46c0      	nop			; (mov r8, r8)
 8007280:	0800de34 	.word	0x0800de34
 8007284:	0000ffff 	.word	0x0000ffff

08007288 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b089      	sub	sp, #36	; 0x24
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	0019      	movs	r1, r3
 8007294:	1dfb      	adds	r3, r7, #7
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	1dbb      	adds	r3, r7, #6
 800729a:	1c0a      	adds	r2, r1, #0
 800729c:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	330d      	adds	r3, #13
 80072a2:	1dba      	adds	r2, r7, #6
 80072a4:	7812      	ldrb	r2, [r2, #0]
 80072a6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	330b      	adds	r3, #11
 80072ac:	220f      	movs	r2, #15
 80072ae:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	330c      	adds	r3, #12
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	331a      	adds	r3, #26
 80072bc:	2100      	movs	r1, #0
 80072be:	0018      	movs	r0, r3
 80072c0:	f7fe fec6 	bl	8006050 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80072c4:	1dfb      	adds	r3, r7, #7
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	1e5a      	subs	r2, r3, #1
 80072ca:	0013      	movs	r3, r2
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	189b      	adds	r3, r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	189b      	adds	r3, r3, r2
 80072d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80072d6:	2316      	movs	r3, #22
 80072d8:	18fb      	adds	r3, r7, r3
 80072da:	2200      	movs	r2, #0
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	2300      	movs	r3, #0
 80072e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80072e2:	2116      	movs	r1, #22
 80072e4:	187b      	adds	r3, r7, r1
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	4a21      	ldr	r2, [pc, #132]	; (8007370 <put_lfn+0xe8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d008      	beq.n	8007300 <put_lfn+0x78>
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	61fa      	str	r2, [r7, #28]
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	18d2      	adds	r2, r2, r3
 80072fa:	187b      	adds	r3, r7, r1
 80072fc:	8812      	ldrh	r2, [r2, #0]
 80072fe:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007300:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <put_lfn+0xec>)
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	18d3      	adds	r3, r2, r3
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	001a      	movs	r2, r3
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	189a      	adds	r2, r3, r2
 800730e:	2416      	movs	r4, #22
 8007310:	193b      	adds	r3, r7, r4
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	0019      	movs	r1, r3
 8007316:	0010      	movs	r0, r2
 8007318:	f7fe fe9a 	bl	8006050 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800731c:	0022      	movs	r2, r4
 800731e:	18bb      	adds	r3, r7, r2
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d103      	bne.n	800732e <put_lfn+0xa6>
 8007326:	18bb      	adds	r3, r7, r2
 8007328:	2201      	movs	r2, #1
 800732a:	4252      	negs	r2, r2
 800732c:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	3301      	adds	r3, #1
 8007332:	61bb      	str	r3, [r7, #24]
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b0c      	cmp	r3, #12
 8007338:	d9d3      	bls.n	80072e2 <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800733a:	2316      	movs	r3, #22
 800733c:	18fb      	adds	r3, r7, r3
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	4a0b      	ldr	r2, [pc, #44]	; (8007370 <put_lfn+0xe8>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d006      	beq.n	8007354 <put_lfn+0xcc>
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	18d3      	adds	r3, r2, r3
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <put_lfn+0xd8>
 8007354:	1dfb      	adds	r3, r7, #7
 8007356:	1dfa      	adds	r2, r7, #7
 8007358:	7812      	ldrb	r2, [r2, #0]
 800735a:	2140      	movs	r1, #64	; 0x40
 800735c:	430a      	orrs	r2, r1
 800735e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	1dfa      	adds	r2, r7, #7
 8007364:	7812      	ldrb	r2, [r2, #0]
 8007366:	701a      	strb	r2, [r3, #0]
}
 8007368:	46c0      	nop			; (mov r8, r8)
 800736a:	46bd      	mov	sp, r7
 800736c:	b009      	add	sp, #36	; 0x24
 800736e:	bd90      	pop	{r4, r7, pc}
 8007370:	0000ffff 	.word	0x0000ffff
 8007374:	0800de34 	.word	0x0800de34

08007378 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08c      	sub	sp, #48	; 0x30
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	220b      	movs	r2, #11
 800738c:	0018      	movs	r0, r3
 800738e:	f7fe fea7 	bl	80060e0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b05      	cmp	r3, #5
 8007396:	d92f      	bls.n	80073f8 <gen_numname+0x80>
		sr = seq;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800739c:	e026      	b.n	80073ec <gen_numname+0x74>
			wc = *lfn++;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	1c9a      	adds	r2, r3, #2
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	2222      	movs	r2, #34	; 0x22
 80073a6:	18ba      	adds	r2, r7, r2
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 80073ac:	2300      	movs	r3, #0
 80073ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80073b0:	e019      	b.n	80073e6 <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	005a      	lsls	r2, r3, #1
 80073b6:	2022      	movs	r0, #34	; 0x22
 80073b8:	183b      	adds	r3, r7, r0
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	2101      	movs	r1, #1
 80073be:	400b      	ands	r3, r1
 80073c0:	18d3      	adds	r3, r2, r3
 80073c2:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80073c4:	183b      	adds	r3, r7, r0
 80073c6:	183a      	adds	r2, r7, r0
 80073c8:	8812      	ldrh	r2, [r2, #0]
 80073ca:	0852      	lsrs	r2, r2, #1
 80073cc:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	2380      	movs	r3, #128	; 0x80
 80073d2:	025b      	lsls	r3, r3, #9
 80073d4:	4013      	ands	r3, r2
 80073d6:	d003      	beq.n	80073e0 <gen_numname+0x68>
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4a30      	ldr	r2, [pc, #192]	; (800749c <gen_numname+0x124>)
 80073dc:	4053      	eors	r3, r2
 80073de:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	3301      	adds	r3, #1
 80073e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e8:	2b0f      	cmp	r3, #15
 80073ea:	d9e2      	bls.n	80073b2 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1d4      	bne.n	800739e <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80073f8:	2307      	movs	r3, #7
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	220f      	movs	r2, #15
 8007402:	4013      	ands	r3, r2
 8007404:	b2da      	uxtb	r2, r3
 8007406:	212f      	movs	r1, #47	; 0x2f
 8007408:	187b      	adds	r3, r7, r1
 800740a:	3230      	adds	r2, #48	; 0x30
 800740c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 800740e:	187b      	adds	r3, r7, r1
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b39      	cmp	r3, #57	; 0x39
 8007414:	d904      	bls.n	8007420 <gen_numname+0xa8>
 8007416:	187b      	adds	r3, r7, r1
 8007418:	187a      	adds	r2, r7, r1
 800741a:	7812      	ldrb	r2, [r2, #0]
 800741c:	3207      	adds	r2, #7
 800741e:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	1e5a      	subs	r2, r3, #1
 8007424:	62ba      	str	r2, [r7, #40]	; 0x28
 8007426:	2014      	movs	r0, #20
 8007428:	183a      	adds	r2, r7, r0
 800742a:	212f      	movs	r1, #47	; 0x2f
 800742c:	1879      	adds	r1, r7, r1
 800742e:	7809      	ldrb	r1, [r1, #0]
 8007430:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	091b      	lsrs	r3, r3, #4
 8007436:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1de      	bne.n	80073fc <gen_numname+0x84>
	ns[i] = '~';
 800743e:	183a      	adds	r2, r7, r0
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	18d3      	adds	r3, r2, r3
 8007444:	227e      	movs	r2, #126	; 0x7e
 8007446:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007448:	2300      	movs	r3, #0
 800744a:	627b      	str	r3, [r7, #36]	; 0x24
 800744c:	e002      	b.n	8007454 <gen_numname+0xdc>
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	3301      	adds	r3, #1
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
 8007454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	429a      	cmp	r2, r3
 800745a:	d205      	bcs.n	8007468 <gen_numname+0xf0>
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	18d3      	adds	r3, r2, r3
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b20      	cmp	r3, #32
 8007466:	d1f2      	bne.n	800744e <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	2b07      	cmp	r3, #7
 800746c:	d806      	bhi.n	800747c <gen_numname+0x104>
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	62ba      	str	r2, [r7, #40]	; 0x28
 8007474:	2214      	movs	r2, #20
 8007476:	18ba      	adds	r2, r7, r2
 8007478:	5cd1      	ldrb	r1, [r2, r3]
 800747a:	e000      	b.n	800747e <gen_numname+0x106>
 800747c:	2120      	movs	r1, #32
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	627a      	str	r2, [r7, #36]	; 0x24
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	18d3      	adds	r3, r2, r3
 8007488:	1c0a      	adds	r2, r1, #0
 800748a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	2b07      	cmp	r3, #7
 8007490:	d9ea      	bls.n	8007468 <gen_numname+0xf0>
}
 8007492:	46c0      	nop			; (mov r8, r8)
 8007494:	46c0      	nop			; (mov r8, r8)
 8007496:	46bd      	mov	sp, r7
 8007498:	b00c      	add	sp, #48	; 0x30
 800749a:	bd80      	pop	{r7, pc}
 800749c:	00011021 	.word	0x00011021

080074a0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80074a8:	230f      	movs	r3, #15
 80074aa:	18fb      	adds	r3, r7, r3
 80074ac:	2200      	movs	r2, #0
 80074ae:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 80074b0:	230b      	movs	r3, #11
 80074b2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80074b4:	200f      	movs	r0, #15
 80074b6:	183b      	adds	r3, r7, r0
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	0852      	lsrs	r2, r2, #1
 80074be:	01db      	lsls	r3, r3, #7
 80074c0:	4313      	orrs	r3, r2
 80074c2:	b2d9      	uxtb	r1, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	607a      	str	r2, [r7, #4]
 80074ca:	781a      	ldrb	r2, [r3, #0]
 80074cc:	183b      	adds	r3, r7, r0
 80074ce:	188a      	adds	r2, r1, r2
 80074d0:	701a      	strb	r2, [r3, #0]
	} while (--n);
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1ea      	bne.n	80074b4 <sum_sfn+0x14>
	return sum;
 80074de:	183b      	adds	r3, r7, r0
 80074e0:	781b      	ldrb	r3, [r3, #0]
}
 80074e2:	0018      	movs	r0, r3
 80074e4:	46bd      	mov	sp, r7
 80074e6:	b004      	add	sp, #16
 80074e8:	bd80      	pop	{r7, pc}

080074ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80074ea:	b5b0      	push	{r4, r5, r7, lr}
 80074ec:	b086      	sub	sp, #24
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80074f8:	2517      	movs	r5, #23
 80074fa:	197c      	adds	r4, r7, r5
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2100      	movs	r1, #0
 8007500:	0018      	movs	r0, r3
 8007502:	f7ff fc42 	bl	8006d8a <dir_sdi>
 8007506:	0003      	movs	r3, r0
 8007508:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800750a:	197b      	adds	r3, r7, r5
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <dir_find+0x2e>
 8007512:	197b      	adds	r3, r7, r5
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	e0df      	b.n	80076d8 <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007518:	2114      	movs	r1, #20
 800751a:	187b      	adds	r3, r7, r1
 800751c:	22ff      	movs	r2, #255	; 0xff
 800751e:	701a      	strb	r2, [r3, #0]
 8007520:	2315      	movs	r3, #21
 8007522:	18fb      	adds	r3, r7, r3
 8007524:	187a      	adds	r2, r7, r1
 8007526:	7812      	ldrb	r2, [r2, #0]
 8007528:	701a      	strb	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	4252      	negs	r2, r2
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	69da      	ldr	r2, [r3, #28]
 8007536:	2517      	movs	r5, #23
 8007538:	197c      	adds	r4, r7, r5
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	0011      	movs	r1, r2
 800753e:	0018      	movs	r0, r3
 8007540:	f7fe fff6 	bl	8006530 <move_window>
 8007544:	0003      	movs	r3, r0
 8007546:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8007548:	0029      	movs	r1, r5
 800754a:	187b      	adds	r3, r7, r1
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d000      	beq.n	8007554 <dir_find+0x6a>
 8007552:	e0b9      	b.n	80076c8 <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a1a      	ldr	r2, [r3, #32]
 8007558:	2016      	movs	r0, #22
 800755a:	183b      	adds	r3, r7, r0
 800755c:	7812      	ldrb	r2, [r2, #0]
 800755e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007560:	183b      	adds	r3, r7, r0
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d103      	bne.n	8007570 <dir_find+0x86>
 8007568:	187b      	adds	r3, r7, r1
 800756a:	2204      	movs	r2, #4
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e0b0      	b.n	80076d2 <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a1b      	ldr	r3, [r3, #32]
 8007574:	330b      	adds	r3, #11
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	200f      	movs	r0, #15
 800757a:	183b      	adds	r3, r7, r0
 800757c:	213f      	movs	r1, #63	; 0x3f
 800757e:	400a      	ands	r2, r1
 8007580:	701a      	strb	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	0001      	movs	r1, r0
 8007586:	187a      	adds	r2, r7, r1
 8007588:	7812      	ldrb	r2, [r2, #0]
 800758a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800758c:	2316      	movs	r3, #22
 800758e:	18fb      	adds	r3, r7, r3
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2be5      	cmp	r3, #229	; 0xe5
 8007594:	d008      	beq.n	80075a8 <dir_find+0xbe>
 8007596:	187b      	adds	r3, r7, r1
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2208      	movs	r2, #8
 800759c:	4013      	ands	r3, r2
 800759e:	d00c      	beq.n	80075ba <dir_find+0xd0>
 80075a0:	187b      	adds	r3, r7, r1
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b0f      	cmp	r3, #15
 80075a6:	d008      	beq.n	80075ba <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80075a8:	2315      	movs	r3, #21
 80075aa:	18fb      	adds	r3, r7, r3
 80075ac:	22ff      	movs	r2, #255	; 0xff
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	4252      	negs	r2, r2
 80075b6:	631a      	str	r2, [r3, #48]	; 0x30
 80075b8:	e077      	b.n	80076aa <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80075ba:	230f      	movs	r3, #15
 80075bc:	18fb      	adds	r3, r7, r3
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b0f      	cmp	r3, #15
 80075c2:	d148      	bne.n	8007656 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	222f      	movs	r2, #47	; 0x2f
 80075c8:	5c9b      	ldrb	r3, [r3, r2]
 80075ca:	001a      	movs	r2, r3
 80075cc:	2340      	movs	r3, #64	; 0x40
 80075ce:	4013      	ands	r3, r2
 80075d0:	d000      	beq.n	80075d4 <dir_find+0xea>
 80075d2:	e06a      	b.n	80076aa <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80075d4:	2116      	movs	r1, #22
 80075d6:	187b      	adds	r3, r7, r1
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2240      	movs	r2, #64	; 0x40
 80075dc:	4013      	ands	r3, r2
 80075de:	d015      	beq.n	800760c <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	2314      	movs	r3, #20
 80075e6:	18fb      	adds	r3, r7, r3
 80075e8:	7b52      	ldrb	r2, [r2, #13]
 80075ea:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80075ec:	187b      	adds	r3, r7, r1
 80075ee:	0008      	movs	r0, r1
 80075f0:	187a      	adds	r2, r7, r1
 80075f2:	7812      	ldrb	r2, [r2, #0]
 80075f4:	2140      	movs	r1, #64	; 0x40
 80075f6:	438a      	bics	r2, r1
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	2315      	movs	r3, #21
 80075fc:	18fb      	adds	r3, r7, r3
 80075fe:	183a      	adds	r2, r7, r0
 8007600:	7812      	ldrb	r2, [r2, #0]
 8007602:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	695a      	ldr	r2, [r3, #20]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800760c:	2316      	movs	r3, #22
 800760e:	18fa      	adds	r2, r7, r3
 8007610:	2415      	movs	r4, #21
 8007612:	193b      	adds	r3, r7, r4
 8007614:	7812      	ldrb	r2, [r2, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d117      	bne.n	800764c <dir_find+0x162>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	330d      	adds	r3, #13
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2214      	movs	r2, #20
 8007626:	18ba      	adds	r2, r7, r2
 8007628:	7812      	ldrb	r2, [r2, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d10e      	bne.n	800764c <dir_find+0x162>
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	691a      	ldr	r2, [r3, #16]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	0019      	movs	r1, r3
 8007638:	0010      	movs	r0, r2
 800763a:	f7ff fda5 	bl	8007188 <cmp_lfn>
 800763e:	1e03      	subs	r3, r0, #0
 8007640:	d004      	beq.n	800764c <dir_find+0x162>
 8007642:	193b      	adds	r3, r7, r4
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	3b01      	subs	r3, #1
 8007648:	b2da      	uxtb	r2, r3
 800764a:	e000      	b.n	800764e <dir_find+0x164>
 800764c:	22ff      	movs	r2, #255	; 0xff
 800764e:	2315      	movs	r3, #21
 8007650:	18fb      	adds	r3, r7, r3
 8007652:	701a      	strb	r2, [r3, #0]
 8007654:	e029      	b.n	80076aa <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007656:	2315      	movs	r3, #21
 8007658:	18fb      	adds	r3, r7, r3
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10b      	bne.n	8007678 <dir_find+0x18e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	0018      	movs	r0, r3
 8007666:	f7ff ff1b 	bl	80074a0 <sum_sfn>
 800766a:	0003      	movs	r3, r0
 800766c:	001a      	movs	r2, r3
 800766e:	2314      	movs	r3, #20
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	4293      	cmp	r3, r2
 8007676:	d029      	beq.n	80076cc <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	222f      	movs	r2, #47	; 0x2f
 800767c:	5c9b      	ldrb	r3, [r3, r2]
 800767e:	001a      	movs	r2, r3
 8007680:	2301      	movs	r3, #1
 8007682:	4013      	ands	r3, r2
 8007684:	d109      	bne.n	800769a <dir_find+0x1b0>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a18      	ldr	r0, [r3, #32]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3324      	adds	r3, #36	; 0x24
 800768e:	220b      	movs	r2, #11
 8007690:	0019      	movs	r1, r3
 8007692:	f7fe fd5d 	bl	8006150 <mem_cmp>
 8007696:	1e03      	subs	r3, r0, #0
 8007698:	d01a      	beq.n	80076d0 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800769a:	2315      	movs	r3, #21
 800769c:	18fb      	adds	r3, r7, r3
 800769e:	22ff      	movs	r2, #255	; 0xff
 80076a0:	701a      	strb	r2, [r3, #0]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	4252      	negs	r2, r2
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80076aa:	2517      	movs	r5, #23
 80076ac:	197c      	adds	r4, r7, r5
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2100      	movs	r1, #0
 80076b2:	0018      	movs	r0, r3
 80076b4:	f7ff fbf5 	bl	8006ea2 <dir_next>
 80076b8:	0003      	movs	r3, r0
 80076ba:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80076bc:	197b      	adds	r3, r7, r5
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d100      	bne.n	80076c6 <dir_find+0x1dc>
 80076c4:	e735      	b.n	8007532 <dir_find+0x48>
 80076c6:	e004      	b.n	80076d2 <dir_find+0x1e8>
		if (res != FR_OK) break;
 80076c8:	46c0      	nop			; (mov r8, r8)
 80076ca:	e002      	b.n	80076d2 <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80076cc:	46c0      	nop			; (mov r8, r8)
 80076ce:	e000      	b.n	80076d2 <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80076d0:	46c0      	nop			; (mov r8, r8)

	return res;
 80076d2:	2317      	movs	r3, #23
 80076d4:	18fb      	adds	r3, r7, r3
 80076d6:	781b      	ldrb	r3, [r3, #0]
}
 80076d8:	0018      	movs	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	b006      	add	sp, #24
 80076de:	bdb0      	pop	{r4, r5, r7, pc}

080076e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80076e0:	b5b0      	push	{r4, r5, r7, lr}
 80076e2:	b08c      	sub	sp, #48	; 0x30
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	222f      	movs	r2, #47	; 0x2f
 80076f2:	5c9b      	ldrb	r3, [r3, r2]
 80076f4:	001a      	movs	r2, r3
 80076f6:	23a0      	movs	r3, #160	; 0xa0
 80076f8:	4013      	ands	r3, r2
 80076fa:	d001      	beq.n	8007700 <dir_register+0x20>
 80076fc:	2306      	movs	r3, #6
 80076fe:	e0fb      	b.n	80078f8 <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007700:	2300      	movs	r3, #0
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
 8007704:	e002      	b.n	800770c <dir_register+0x2c>
 8007706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007708:	3301      	adds	r3, #1
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	18d3      	adds	r3, r2, r3
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f4      	bne.n	8007706 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3324      	adds	r3, #36	; 0x24
 8007720:	0019      	movs	r1, r3
 8007722:	240c      	movs	r4, #12
 8007724:	193b      	adds	r3, r7, r4
 8007726:	220c      	movs	r2, #12
 8007728:	0018      	movs	r0, r3
 800772a:	f7fe fcd9 	bl	80060e0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800772e:	193b      	adds	r3, r7, r4
 8007730:	7adb      	ldrb	r3, [r3, #11]
 8007732:	001a      	movs	r2, r3
 8007734:	2301      	movs	r3, #1
 8007736:	4013      	ands	r3, r2
 8007738:	d037      	beq.n	80077aa <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	222f      	movs	r2, #47	; 0x2f
 800773e:	2140      	movs	r1, #64	; 0x40
 8007740:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 8007742:	2301      	movs	r3, #1
 8007744:	62bb      	str	r3, [r7, #40]	; 0x28
 8007746:	e018      	b.n	800777a <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3324      	adds	r3, #36	; 0x24
 800774c:	0018      	movs	r0, r3
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	691a      	ldr	r2, [r3, #16]
 8007752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007754:	210c      	movs	r1, #12
 8007756:	1879      	adds	r1, r7, r1
 8007758:	f7ff fe0e 	bl	8007378 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800775c:	252f      	movs	r5, #47	; 0x2f
 800775e:	197c      	adds	r4, r7, r5
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	0018      	movs	r0, r3
 8007764:	f7ff fec1 	bl	80074ea <dir_find>
 8007768:	0003      	movs	r3, r0
 800776a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800776c:	197b      	adds	r3, r7, r5
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d106      	bne.n	8007782 <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	3301      	adds	r3, #1
 8007778:	62bb      	str	r3, [r7, #40]	; 0x28
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	2b63      	cmp	r3, #99	; 0x63
 800777e:	d9e3      	bls.n	8007748 <dir_register+0x68>
 8007780:	e000      	b.n	8007784 <dir_register+0xa4>
			if (res != FR_OK) break;
 8007782:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	2b64      	cmp	r3, #100	; 0x64
 8007788:	d101      	bne.n	800778e <dir_register+0xae>
 800778a:	2307      	movs	r3, #7
 800778c:	e0b4      	b.n	80078f8 <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800778e:	222f      	movs	r2, #47	; 0x2f
 8007790:	18bb      	adds	r3, r7, r2
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b04      	cmp	r3, #4
 8007796:	d002      	beq.n	800779e <dir_register+0xbe>
 8007798:	18bb      	adds	r3, r7, r2
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	e0ac      	b.n	80078f8 <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800779e:	230c      	movs	r3, #12
 80077a0:	18fb      	adds	r3, r7, r3
 80077a2:	7ad9      	ldrb	r1, [r3, #11]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	222f      	movs	r2, #47	; 0x2f
 80077a8:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80077aa:	230c      	movs	r3, #12
 80077ac:	18fb      	adds	r3, r7, r3
 80077ae:	7adb      	ldrb	r3, [r3, #11]
 80077b0:	001a      	movs	r2, r3
 80077b2:	2302      	movs	r3, #2
 80077b4:	4013      	ands	r3, r2
 80077b6:	d008      	beq.n	80077ca <dir_register+0xea>
 80077b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ba:	330c      	adds	r3, #12
 80077bc:	210d      	movs	r1, #13
 80077be:	0018      	movs	r0, r3
 80077c0:	f7f8 fcbe 	bl	8000140 <__udivsi3>
 80077c4:	0003      	movs	r3, r0
 80077c6:	3301      	adds	r3, #1
 80077c8:	e000      	b.n	80077cc <dir_register+0xec>
 80077ca:	2301      	movs	r3, #1
 80077cc:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80077ce:	252f      	movs	r5, #47	; 0x2f
 80077d0:	197c      	adds	r4, r7, r5
 80077d2:	6a3a      	ldr	r2, [r7, #32]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	0011      	movs	r1, r2
 80077d8:	0018      	movs	r0, r3
 80077da:	f7ff fc3e 	bl	800705a <dir_alloc>
 80077de:	0003      	movs	r3, r0
 80077e0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80077e2:	0029      	movs	r1, r5
 80077e4:	187b      	adds	r3, r7, r1
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d153      	bne.n	8007894 <dir_register+0x1b4>
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	623b      	str	r3, [r7, #32]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d04d      	beq.n	8007894 <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	695a      	ldr	r2, [r3, #20]
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	015b      	lsls	r3, r3, #5
 8007800:	1ad2      	subs	r2, r2, r3
 8007802:	000d      	movs	r5, r1
 8007804:	187c      	adds	r4, r7, r1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	0011      	movs	r1, r2
 800780a:	0018      	movs	r0, r3
 800780c:	f7ff fabd 	bl	8006d8a <dir_sdi>
 8007810:	0003      	movs	r3, r0
 8007812:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8007814:	197b      	adds	r3, r7, r5
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d13b      	bne.n	8007894 <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3324      	adds	r3, #36	; 0x24
 8007820:	221b      	movs	r2, #27
 8007822:	18bc      	adds	r4, r7, r2
 8007824:	0018      	movs	r0, r3
 8007826:	f7ff fe3b 	bl	80074a0 <sum_sfn>
 800782a:	0003      	movs	r3, r0
 800782c:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	69da      	ldr	r2, [r3, #28]
 8007832:	252f      	movs	r5, #47	; 0x2f
 8007834:	197c      	adds	r4, r7, r5
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	0011      	movs	r1, r2
 800783a:	0018      	movs	r0, r3
 800783c:	f7fe fe78 	bl	8006530 <move_window>
 8007840:	0003      	movs	r3, r0
 8007842:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 8007844:	002c      	movs	r4, r5
 8007846:	193b      	adds	r3, r7, r4
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d121      	bne.n	8007892 <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	6918      	ldr	r0, [r3, #16]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a19      	ldr	r1, [r3, #32]
 8007856:	6a3b      	ldr	r3, [r7, #32]
 8007858:	b2da      	uxtb	r2, r3
 800785a:	231b      	movs	r3, #27
 800785c:	18fb      	adds	r3, r7, r3
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	f7ff fd12 	bl	8007288 <put_lfn>
				fs->wflag = 1;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2201      	movs	r2, #1
 8007868:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800786a:	0025      	movs	r5, r4
 800786c:	193c      	adds	r4, r7, r4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2100      	movs	r1, #0
 8007872:	0018      	movs	r0, r3
 8007874:	f7ff fb15 	bl	8006ea2 <dir_next>
 8007878:	0003      	movs	r3, r0
 800787a:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 800787c:	197b      	adds	r3, r7, r5
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d107      	bne.n	8007894 <dir_register+0x1b4>
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	3b01      	subs	r3, #1
 8007888:	623b      	str	r3, [r7, #32]
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1ce      	bne.n	800782e <dir_register+0x14e>
 8007890:	e000      	b.n	8007894 <dir_register+0x1b4>
				if (res != FR_OK) break;
 8007892:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007894:	252f      	movs	r5, #47	; 0x2f
 8007896:	197b      	adds	r3, r7, r5
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d129      	bne.n	80078f2 <dir_register+0x212>
		res = move_window(fs, dp->sect);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	69da      	ldr	r2, [r3, #28]
 80078a2:	197c      	adds	r4, r7, r5
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	0011      	movs	r1, r2
 80078a8:	0018      	movs	r0, r3
 80078aa:	f7fe fe41 	bl	8006530 <move_window>
 80078ae:	0003      	movs	r3, r0
 80078b0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80078b2:	197b      	adds	r3, r7, r5
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d11b      	bne.n	80078f2 <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	2220      	movs	r2, #32
 80078c0:	2100      	movs	r1, #0
 80078c2:	0018      	movs	r0, r3
 80078c4:	f7fe fc2b 	bl	800611e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a18      	ldr	r0, [r3, #32]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3324      	adds	r3, #36	; 0x24
 80078d0:	220b      	movs	r2, #11
 80078d2:	0019      	movs	r1, r3
 80078d4:	f7fe fc04 	bl	80060e0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	222f      	movs	r2, #47	; 0x2f
 80078dc:	5c9a      	ldrb	r2, [r3, r2]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	330c      	adds	r3, #12
 80078e4:	2118      	movs	r1, #24
 80078e6:	400a      	ands	r2, r1
 80078e8:	b2d2      	uxtb	r2, r2
 80078ea:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	2201      	movs	r2, #1
 80078f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80078f2:	232f      	movs	r3, #47	; 0x2f
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	781b      	ldrb	r3, [r3, #0]
}
 80078f8:	0018      	movs	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b00c      	add	sp, #48	; 0x30
 80078fe:	bdb0      	pop	{r4, r5, r7, pc}

08007900 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007900:	b5b0      	push	{r4, r5, r7, lr}
 8007902:	b08a      	sub	sp, #40	; 0x28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	61ba      	str	r2, [r7, #24]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	18d3      	adds	r3, r2, r3
 800792a:	781a      	ldrb	r2, [r3, #0]
 800792c:	2124      	movs	r1, #36	; 0x24
 800792e:	187b      	adds	r3, r7, r1
 8007930:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 8007932:	000a      	movs	r2, r1
 8007934:	18bb      	adds	r3, r7, r2
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	2b1f      	cmp	r3, #31
 800793a:	d94e      	bls.n	80079da <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800793c:	18bb      	adds	r3, r7, r2
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	2b2f      	cmp	r3, #47	; 0x2f
 8007942:	d007      	beq.n	8007954 <create_name+0x54>
 8007944:	18bb      	adds	r3, r7, r2
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	2b5c      	cmp	r3, #92	; 0x5c
 800794a:	d110      	bne.n	800796e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800794c:	e002      	b.n	8007954 <create_name+0x54>
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	3301      	adds	r3, #1
 8007952:	61bb      	str	r3, [r7, #24]
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	18d3      	adds	r3, r2, r3
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b2f      	cmp	r3, #47	; 0x2f
 800795e:	d0f6      	beq.n	800794e <create_name+0x4e>
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	18d3      	adds	r3, r2, r3
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b5c      	cmp	r3, #92	; 0x5c
 800796a:	d0f0      	beq.n	800794e <create_name+0x4e>
			break;
 800796c:	e036      	b.n	80079dc <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	2bfe      	cmp	r3, #254	; 0xfe
 8007972:	d901      	bls.n	8007978 <create_name+0x78>
 8007974:	2306      	movs	r3, #6
 8007976:	e1c2      	b.n	8007cfe <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007978:	2524      	movs	r5, #36	; 0x24
 800797a:	197b      	adds	r3, r7, r5
 800797c:	197a      	adds	r2, r7, r5
 800797e:	8812      	ldrh	r2, [r2, #0]
 8007980:	21ff      	movs	r1, #255	; 0xff
 8007982:	400a      	ands	r2, r1
 8007984:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007986:	197c      	adds	r4, r7, r5
 8007988:	197b      	adds	r3, r7, r5
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	2101      	movs	r1, #1
 800798e:	0018      	movs	r0, r3
 8007990:	f001 fb70 	bl	8009074 <ff_convert>
 8007994:	0003      	movs	r3, r0
 8007996:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007998:	197b      	adds	r3, r7, r5
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <create_name+0xa4>
 80079a0:	2306      	movs	r3, #6
 80079a2:	e1ac      	b.n	8007cfe <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80079a4:	2224      	movs	r2, #36	; 0x24
 80079a6:	18bb      	adds	r3, r7, r2
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	2b7f      	cmp	r3, #127	; 0x7f
 80079ac:	d80a      	bhi.n	80079c4 <create_name+0xc4>
 80079ae:	18bb      	adds	r3, r7, r2
 80079b0:	881a      	ldrh	r2, [r3, #0]
 80079b2:	4ba7      	ldr	r3, [pc, #668]	; (8007c50 <create_name+0x350>)
 80079b4:	0011      	movs	r1, r2
 80079b6:	0018      	movs	r0, r3
 80079b8:	f7fe fbef 	bl	800619a <chk_chr>
 80079bc:	1e03      	subs	r3, r0, #0
 80079be:	d001      	beq.n	80079c4 <create_name+0xc4>
 80079c0:	2306      	movs	r3, #6
 80079c2:	e19c      	b.n	8007cfe <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	1c5a      	adds	r2, r3, #1
 80079c8:	617a      	str	r2, [r7, #20]
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	18d3      	adds	r3, r2, r3
 80079d0:	2224      	movs	r2, #36	; 0x24
 80079d2:	18ba      	adds	r2, r7, r2
 80079d4:	8812      	ldrh	r2, [r2, #0]
 80079d6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80079d8:	e7a2      	b.n	8007920 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80079da:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	18d2      	adds	r2, r2, r3
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079e6:	2324      	movs	r3, #36	; 0x24
 80079e8:	18fb      	adds	r3, r7, r3
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	2b1f      	cmp	r3, #31
 80079ee:	d801      	bhi.n	80079f4 <create_name+0xf4>
 80079f0:	2204      	movs	r2, #4
 80079f2:	e000      	b.n	80079f6 <create_name+0xf6>
 80079f4:	2200      	movs	r2, #0
 80079f6:	2327      	movs	r3, #39	; 0x27
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079fc:	e016      	b.n	8007a2c <create_name+0x12c>
		w = lfn[di - 1];
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	4a94      	ldr	r2, [pc, #592]	; (8007c54 <create_name+0x354>)
 8007a02:	4694      	mov	ip, r2
 8007a04:	4463      	add	r3, ip
 8007a06:	005b      	lsls	r3, r3, #1
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	18d2      	adds	r2, r2, r3
 8007a0c:	2124      	movs	r1, #36	; 0x24
 8007a0e:	187b      	adds	r3, r7, r1
 8007a10:	8812      	ldrh	r2, [r2, #0]
 8007a12:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8007a14:	000a      	movs	r2, r1
 8007a16:	18bb      	adds	r3, r7, r2
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d003      	beq.n	8007a26 <create_name+0x126>
 8007a1e:	18bb      	adds	r3, r7, r2
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	2b2e      	cmp	r3, #46	; 0x2e
 8007a24:	d106      	bne.n	8007a34 <create_name+0x134>
		di--;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e5      	bne.n	80079fe <create_name+0xfe>
 8007a32:	e000      	b.n	8007a36 <create_name+0x136>
		if (w != ' ' && w != '.') break;
 8007a34:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	18d3      	adds	r3, r2, r3
 8007a3e:	2200      	movs	r2, #0
 8007a40:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <create_name+0x14c>
 8007a48:	2306      	movs	r3, #6
 8007a4a:	e158      	b.n	8007cfe <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3324      	adds	r3, #36	; 0x24
 8007a50:	220b      	movs	r2, #11
 8007a52:	2120      	movs	r1, #32
 8007a54:	0018      	movs	r0, r3
 8007a56:	f7fe fb62 	bl	800611e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	e002      	b.n	8007a66 <create_name+0x166>
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	3301      	adds	r3, #1
 8007a64:	61bb      	str	r3, [r7, #24]
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	18d3      	adds	r3, r2, r3
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d0f5      	beq.n	8007a60 <create_name+0x160>
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	18d3      	adds	r3, r2, r3
 8007a7c:	881b      	ldrh	r3, [r3, #0]
 8007a7e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a80:	d0ee      	beq.n	8007a60 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d00a      	beq.n	8007a9e <create_name+0x19e>
 8007a88:	2227      	movs	r2, #39	; 0x27
 8007a8a:	18bb      	adds	r3, r7, r2
 8007a8c:	18ba      	adds	r2, r7, r2
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	2103      	movs	r1, #3
 8007a92:	430a      	orrs	r2, r1
 8007a94:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a96:	e002      	b.n	8007a9e <create_name+0x19e>
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d009      	beq.n	8007ab8 <create_name+0x1b8>
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	4a6b      	ldr	r2, [pc, #428]	; (8007c54 <create_name+0x354>)
 8007aa8:	4694      	mov	ip, r2
 8007aaa:	4463      	add	r3, ip
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	18d3      	adds	r3, r2, r3
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ab6:	d1ef      	bne.n	8007a98 <create_name+0x198>

	i = b = 0; ni = 8;
 8007ab8:	2326      	movs	r3, #38	; 0x26
 8007aba:	18fb      	adds	r3, r7, r3
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	623b      	str	r3, [r7, #32]
 8007ac4:	2308      	movs	r3, #8
 8007ac6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	61ba      	str	r2, [r7, #24]
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	18d2      	adds	r2, r2, r3
 8007ad4:	2124      	movs	r1, #36	; 0x24
 8007ad6:	187b      	adds	r3, r7, r1
 8007ad8:	8812      	ldrh	r2, [r2, #0]
 8007ada:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 8007adc:	000a      	movs	r2, r1
 8007ade:	18bb      	adds	r3, r7, r2
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d100      	bne.n	8007ae8 <create_name+0x1e8>
 8007ae6:	e0b1      	b.n	8007c4c <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007ae8:	18bb      	adds	r3, r7, r2
 8007aea:	881b      	ldrh	r3, [r3, #0]
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	d007      	beq.n	8007b00 <create_name+0x200>
 8007af0:	18bb      	adds	r3, r7, r2
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	2b2e      	cmp	r3, #46	; 0x2e
 8007af6:	d10b      	bne.n	8007b10 <create_name+0x210>
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d007      	beq.n	8007b10 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8007b00:	2227      	movs	r2, #39	; 0x27
 8007b02:	18bb      	adds	r3, r7, r2
 8007b04:	18ba      	adds	r2, r7, r2
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	2103      	movs	r1, #3
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	e09c      	b.n	8007c4a <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007b10:	6a3a      	ldr	r2, [r7, #32]
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d203      	bcs.n	8007b20 <create_name+0x220>
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d127      	bne.n	8007b70 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	2b0b      	cmp	r3, #11
 8007b24:	d107      	bne.n	8007b36 <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 8007b26:	2227      	movs	r2, #39	; 0x27
 8007b28:	18bb      	adds	r3, r7, r2
 8007b2a:	18ba      	adds	r2, r7, r2
 8007b2c:	7812      	ldrb	r2, [r2, #0]
 8007b2e:	2103      	movs	r1, #3
 8007b30:	430a      	orrs	r2, r1
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	e095      	b.n	8007c62 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d006      	beq.n	8007b4c <create_name+0x24c>
 8007b3e:	2227      	movs	r2, #39	; 0x27
 8007b40:	18bb      	adds	r3, r7, r2
 8007b42:	18ba      	adds	r2, r7, r2
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	2103      	movs	r1, #3
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d900      	bls.n	8007b56 <create_name+0x256>
 8007b54:	e084      	b.n	8007c60 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	2308      	movs	r3, #8
 8007b5c:	623b      	str	r3, [r7, #32]
 8007b5e:	230b      	movs	r3, #11
 8007b60:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007b62:	2226      	movs	r2, #38	; 0x26
 8007b64:	18bb      	adds	r3, r7, r2
 8007b66:	18ba      	adds	r2, r7, r2
 8007b68:	7812      	ldrb	r2, [r2, #0]
 8007b6a:	0092      	lsls	r2, r2, #2
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	e06c      	b.n	8007c4a <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007b70:	2524      	movs	r5, #36	; 0x24
 8007b72:	197b      	adds	r3, r7, r5
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	2b7f      	cmp	r3, #127	; 0x7f
 8007b78:	d91a      	bls.n	8007bb0 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007b7a:	197c      	adds	r4, r7, r5
 8007b7c:	197b      	adds	r3, r7, r5
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	2100      	movs	r1, #0
 8007b82:	0018      	movs	r0, r3
 8007b84:	f001 fa76 	bl	8009074 <ff_convert>
 8007b88:	0003      	movs	r3, r0
 8007b8a:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007b8c:	197b      	adds	r3, r7, r5
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d006      	beq.n	8007ba2 <create_name+0x2a2>
 8007b94:	197b      	adds	r3, r7, r5
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	3b80      	subs	r3, #128	; 0x80
 8007b9a:	4a2f      	ldr	r2, [pc, #188]	; (8007c58 <create_name+0x358>)
 8007b9c:	5cd2      	ldrb	r2, [r2, r3]
 8007b9e:	197b      	adds	r3, r7, r5
 8007ba0:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007ba2:	2227      	movs	r2, #39	; 0x27
 8007ba4:	18bb      	adds	r3, r7, r2
 8007ba6:	18ba      	adds	r2, r7, r2
 8007ba8:	7812      	ldrb	r2, [r2, #0]
 8007baa:	2102      	movs	r1, #2
 8007bac:	430a      	orrs	r2, r1
 8007bae:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007bb0:	2224      	movs	r2, #36	; 0x24
 8007bb2:	18bb      	adds	r3, r7, r2
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d008      	beq.n	8007bcc <create_name+0x2cc>
 8007bba:	18bb      	adds	r3, r7, r2
 8007bbc:	881a      	ldrh	r2, [r3, #0]
 8007bbe:	4b27      	ldr	r3, [pc, #156]	; (8007c5c <create_name+0x35c>)
 8007bc0:	0011      	movs	r1, r2
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f7fe fae9 	bl	800619a <chk_chr>
 8007bc8:	1e03      	subs	r3, r0, #0
 8007bca:	d00b      	beq.n	8007be4 <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007bcc:	2324      	movs	r3, #36	; 0x24
 8007bce:	18fb      	adds	r3, r7, r3
 8007bd0:	225f      	movs	r2, #95	; 0x5f
 8007bd2:	801a      	strh	r2, [r3, #0]
 8007bd4:	2227      	movs	r2, #39	; 0x27
 8007bd6:	18bb      	adds	r3, r7, r2
 8007bd8:	18ba      	adds	r2, r7, r2
 8007bda:	7812      	ldrb	r2, [r2, #0]
 8007bdc:	2103      	movs	r1, #3
 8007bde:	430a      	orrs	r2, r1
 8007be0:	701a      	strb	r2, [r3, #0]
 8007be2:	e025      	b.n	8007c30 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007be4:	2224      	movs	r2, #36	; 0x24
 8007be6:	18bb      	adds	r3, r7, r2
 8007be8:	881b      	ldrh	r3, [r3, #0]
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	d90b      	bls.n	8007c06 <create_name+0x306>
 8007bee:	18bb      	adds	r3, r7, r2
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	2b5a      	cmp	r3, #90	; 0x5a
 8007bf4:	d807      	bhi.n	8007c06 <create_name+0x306>
					b |= 2;
 8007bf6:	2226      	movs	r2, #38	; 0x26
 8007bf8:	18bb      	adds	r3, r7, r2
 8007bfa:	18ba      	adds	r2, r7, r2
 8007bfc:	7812      	ldrb	r2, [r2, #0]
 8007bfe:	2102      	movs	r1, #2
 8007c00:	430a      	orrs	r2, r1
 8007c02:	701a      	strb	r2, [r3, #0]
 8007c04:	e014      	b.n	8007c30 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007c06:	2024      	movs	r0, #36	; 0x24
 8007c08:	183b      	adds	r3, r7, r0
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	2b60      	cmp	r3, #96	; 0x60
 8007c0e:	d90f      	bls.n	8007c30 <create_name+0x330>
 8007c10:	183b      	adds	r3, r7, r0
 8007c12:	881b      	ldrh	r3, [r3, #0]
 8007c14:	2b7a      	cmp	r3, #122	; 0x7a
 8007c16:	d80b      	bhi.n	8007c30 <create_name+0x330>
						b |= 1; w -= 0x20;
 8007c18:	2226      	movs	r2, #38	; 0x26
 8007c1a:	18bb      	adds	r3, r7, r2
 8007c1c:	18ba      	adds	r2, r7, r2
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	2101      	movs	r1, #1
 8007c22:	430a      	orrs	r2, r1
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	183b      	adds	r3, r7, r0
 8007c28:	183a      	adds	r2, r7, r0
 8007c2a:	8812      	ldrh	r2, [r2, #0]
 8007c2c:	3a20      	subs	r2, #32
 8007c2e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	623a      	str	r2, [r7, #32]
 8007c36:	2224      	movs	r2, #36	; 0x24
 8007c38:	18ba      	adds	r2, r7, r2
 8007c3a:	8812      	ldrh	r2, [r2, #0]
 8007c3c:	b2d0      	uxtb	r0, r2
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	2124      	movs	r1, #36	; 0x24
 8007c42:	18d3      	adds	r3, r2, r3
 8007c44:	185b      	adds	r3, r3, r1
 8007c46:	1c02      	adds	r2, r0, #0
 8007c48:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8007c4a:	e73d      	b.n	8007ac8 <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 8007c4c:	46c0      	nop			; (mov r8, r8)
 8007c4e:	e008      	b.n	8007c62 <create_name+0x362>
 8007c50:	0800dc58 	.word	0x0800dc58
 8007c54:	7fffffff 	.word	0x7fffffff
 8007c58:	0800ddb4 	.word	0x0800ddb4
 8007c5c:	0800dc64 	.word	0x0800dc64
			if (si > di) break;			/* No extension */
 8007c60:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2224      	movs	r2, #36	; 0x24
 8007c66:	5c9b      	ldrb	r3, [r3, r2]
 8007c68:	2be5      	cmp	r3, #229	; 0xe5
 8007c6a:	d103      	bne.n	8007c74 <create_name+0x374>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2224      	movs	r2, #36	; 0x24
 8007c70:	2105      	movs	r1, #5
 8007c72:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	2b08      	cmp	r3, #8
 8007c78:	d105      	bne.n	8007c86 <create_name+0x386>
 8007c7a:	2226      	movs	r2, #38	; 0x26
 8007c7c:	18bb      	adds	r3, r7, r2
 8007c7e:	18ba      	adds	r2, r7, r2
 8007c80:	7812      	ldrb	r2, [r2, #0]
 8007c82:	0092      	lsls	r2, r2, #2
 8007c84:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007c86:	2126      	movs	r1, #38	; 0x26
 8007c88:	187b      	adds	r3, r7, r1
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	220c      	movs	r2, #12
 8007c8e:	4013      	ands	r3, r2
 8007c90:	2b0c      	cmp	r3, #12
 8007c92:	d005      	beq.n	8007ca0 <create_name+0x3a0>
 8007c94:	187b      	adds	r3, r7, r1
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2203      	movs	r2, #3
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b03      	cmp	r3, #3
 8007c9e:	d106      	bne.n	8007cae <create_name+0x3ae>
 8007ca0:	2227      	movs	r2, #39	; 0x27
 8007ca2:	18bb      	adds	r3, r7, r2
 8007ca4:	18ba      	adds	r2, r7, r2
 8007ca6:	7812      	ldrb	r2, [r2, #0]
 8007ca8:	2102      	movs	r1, #2
 8007caa:	430a      	orrs	r2, r1
 8007cac:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007cae:	2127      	movs	r1, #39	; 0x27
 8007cb0:	187b      	adds	r3, r7, r1
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	d11a      	bne.n	8007cf0 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007cba:	2326      	movs	r3, #38	; 0x26
 8007cbc:	18fb      	adds	r3, r7, r3
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2203      	movs	r2, #3
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d105      	bne.n	8007cd4 <create_name+0x3d4>
 8007cc8:	187b      	adds	r3, r7, r1
 8007cca:	187a      	adds	r2, r7, r1
 8007ccc:	7812      	ldrb	r2, [r2, #0]
 8007cce:	2110      	movs	r1, #16
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007cd4:	2326      	movs	r3, #38	; 0x26
 8007cd6:	18fb      	adds	r3, r7, r3
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	220c      	movs	r2, #12
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d106      	bne.n	8007cf0 <create_name+0x3f0>
 8007ce2:	2227      	movs	r2, #39	; 0x27
 8007ce4:	18bb      	adds	r3, r7, r2
 8007ce6:	18ba      	adds	r2, r7, r2
 8007ce8:	7812      	ldrb	r2, [r2, #0]
 8007cea:	2108      	movs	r1, #8
 8007cec:	430a      	orrs	r2, r1
 8007cee:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2227      	movs	r2, #39	; 0x27
 8007cf4:	18ba      	adds	r2, r7, r2
 8007cf6:	212f      	movs	r1, #47	; 0x2f
 8007cf8:	7812      	ldrb	r2, [r2, #0]
 8007cfa:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 8007cfc:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007cfe:	0018      	movs	r0, r3
 8007d00:	46bd      	mov	sp, r7
 8007d02:	b00a      	add	sp, #40	; 0x28
 8007d04:	bdb0      	pop	{r4, r5, r7, pc}
 8007d06:	46c0      	nop			; (mov r8, r8)

08007d08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007d08:	b5b0      	push	{r4, r5, r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007d1c:	e002      	b.n	8007d24 <follow_path+0x1c>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b2f      	cmp	r3, #47	; 0x2f
 8007d2a:	d0f8      	beq.n	8007d1e <follow_path+0x16>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b5c      	cmp	r3, #92	; 0x5c
 8007d32:	d0f4      	beq.n	8007d1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2200      	movs	r2, #0
 8007d38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	2b1f      	cmp	r3, #31
 8007d40:	d80d      	bhi.n	8007d5e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	222f      	movs	r2, #47	; 0x2f
 8007d46:	2180      	movs	r1, #128	; 0x80
 8007d48:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8007d4a:	2317      	movs	r3, #23
 8007d4c:	18fc      	adds	r4, r7, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2100      	movs	r1, #0
 8007d52:	0018      	movs	r0, r3
 8007d54:	f7ff f819 	bl	8006d8a <dir_sdi>
 8007d58:	0003      	movs	r3, r0
 8007d5a:	7023      	strb	r3, [r4, #0]
 8007d5c:	e057      	b.n	8007e0e <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d5e:	2517      	movs	r5, #23
 8007d60:	197c      	adds	r4, r7, r5
 8007d62:	003a      	movs	r2, r7
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	0011      	movs	r1, r2
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f7ff fdc9 	bl	8007900 <create_name>
 8007d6e:	0003      	movs	r3, r0
 8007d70:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007d72:	197b      	adds	r3, r7, r5
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d144      	bne.n	8007e04 <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007d7a:	197c      	adds	r4, r7, r5
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	0018      	movs	r0, r3
 8007d80:	f7ff fbb3 	bl	80074ea <dir_find>
 8007d84:	0003      	movs	r3, r0
 8007d86:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8007d88:	200b      	movs	r0, #11
 8007d8a:	183b      	adds	r3, r7, r0
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	212f      	movs	r1, #47	; 0x2f
 8007d90:	5c52      	ldrb	r2, [r2, r1]
 8007d92:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8007d94:	197b      	adds	r3, r7, r5
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00c      	beq.n	8007db6 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007d9c:	197b      	adds	r3, r7, r5
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b04      	cmp	r3, #4
 8007da2:	d131      	bne.n	8007e08 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007da4:	183b      	adds	r3, r7, r0
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	2204      	movs	r2, #4
 8007daa:	4013      	ands	r3, r2
 8007dac:	d12c      	bne.n	8007e08 <follow_path+0x100>
 8007dae:	197b      	adds	r3, r7, r5
 8007db0:	2205      	movs	r2, #5
 8007db2:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8007db4:	e028      	b.n	8007e08 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007db6:	230b      	movs	r3, #11
 8007db8:	18fb      	adds	r3, r7, r3
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	d124      	bne.n	8007e0c <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	799b      	ldrb	r3, [r3, #6]
 8007dc6:	001a      	movs	r2, r3
 8007dc8:	2310      	movs	r3, #16
 8007dca:	4013      	ands	r3, r2
 8007dcc:	d104      	bne.n	8007dd8 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8007dce:	2317      	movs	r3, #23
 8007dd0:	18fb      	adds	r3, r7, r3
 8007dd2:	2205      	movs	r2, #5
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e01a      	b.n	8007e0e <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3338      	adds	r3, #56	; 0x38
 8007ddc:	001c      	movs	r4, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	695a      	ldr	r2, [r3, #20]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	899b      	ldrh	r3, [r3, #12]
 8007de6:	0019      	movs	r1, r3
 8007de8:	0010      	movs	r0, r2
 8007dea:	f7f8 fa2f 	bl	800024c <__aeabi_uidivmod>
 8007dee:	000b      	movs	r3, r1
 8007df0:	18e2      	adds	r2, r4, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	0011      	movs	r1, r2
 8007df6:	0018      	movs	r0, r3
 8007df8:	f7ff f987 	bl	800710a <ld_clust>
 8007dfc:	0002      	movs	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007e02:	e7ac      	b.n	8007d5e <follow_path+0x56>
			if (res != FR_OK) break;
 8007e04:	46c0      	nop			; (mov r8, r8)
 8007e06:	e002      	b.n	8007e0e <follow_path+0x106>
				break;
 8007e08:	46c0      	nop			; (mov r8, r8)
 8007e0a:	e000      	b.n	8007e0e <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007e0c:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 8007e0e:	2317      	movs	r3, #23
 8007e10:	18fb      	adds	r3, r7, r3
 8007e12:	781b      	ldrb	r3, [r3, #0]
}
 8007e14:	0018      	movs	r0, r3
 8007e16:	46bd      	mov	sp, r7
 8007e18:	b006      	add	sp, #24
 8007e1a:	bdb0      	pop	{r4, r5, r7, pc}

08007e1c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007e24:	2301      	movs	r3, #1
 8007e26:	425b      	negs	r3, r3
 8007e28:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d031      	beq.n	8007e96 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	e002      	b.n	8007e40 <get_ldnumber+0x24>
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b1f      	cmp	r3, #31
 8007e46:	d903      	bls.n	8007e50 <get_ldnumber+0x34>
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b3a      	cmp	r3, #58	; 0x3a
 8007e4e:	d1f4      	bne.n	8007e3a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b3a      	cmp	r3, #58	; 0x3a
 8007e56:	d11c      	bne.n	8007e92 <get_ldnumber+0x76>
			tp = *path;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	60fa      	str	r2, [r7, #12]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	3b30      	subs	r3, #48	; 0x30
 8007e68:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d80e      	bhi.n	8007e8e <get_ldnumber+0x72>
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d10a      	bne.n	8007e8e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d107      	bne.n	8007e8e <get_ldnumber+0x72>
					vol = (int)i;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	3301      	adds	r3, #1
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	e002      	b.n	8007e98 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007e92:	2300      	movs	r3, #0
 8007e94:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007e96:	693b      	ldr	r3, [r7, #16]
}
 8007e98:	0018      	movs	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b006      	add	sp, #24
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	70da      	strb	r2, [r3, #3]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	4252      	negs	r2, r2
 8007eb6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f7fe fb36 	bl	8006530 <move_window>
 8007ec4:	1e03      	subs	r3, r0, #0
 8007ec6:	d001      	beq.n	8007ecc <check_fs+0x2c>
 8007ec8:	2304      	movs	r3, #4
 8007eca:	e037      	b.n	8007f3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3338      	adds	r3, #56	; 0x38
 8007ed0:	33ff      	adds	r3, #255	; 0xff
 8007ed2:	33ff      	adds	r3, #255	; 0xff
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f7fe f87f 	bl	8005fd8 <ld_word>
 8007eda:	0003      	movs	r3, r0
 8007edc:	001a      	movs	r2, r3
 8007ede:	4b19      	ldr	r3, [pc, #100]	; (8007f44 <check_fs+0xa4>)
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d001      	beq.n	8007ee8 <check_fs+0x48>
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e029      	b.n	8007f3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2238      	movs	r2, #56	; 0x38
 8007eec:	5c9b      	ldrb	r3, [r3, r2]
 8007eee:	2be9      	cmp	r3, #233	; 0xe9
 8007ef0:	d009      	beq.n	8007f06 <check_fs+0x66>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2238      	movs	r2, #56	; 0x38
 8007ef6:	5c9b      	ldrb	r3, [r3, r2]
 8007ef8:	2beb      	cmp	r3, #235	; 0xeb
 8007efa:	d11e      	bne.n	8007f3a <check_fs+0x9a>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	223a      	movs	r2, #58	; 0x3a
 8007f00:	5c9b      	ldrb	r3, [r3, r2]
 8007f02:	2b90      	cmp	r3, #144	; 0x90
 8007f04:	d119      	bne.n	8007f3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3338      	adds	r3, #56	; 0x38
 8007f0a:	3336      	adds	r3, #54	; 0x36
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f7fe f87e 	bl	800600e <ld_dword>
 8007f12:	0003      	movs	r3, r0
 8007f14:	021b      	lsls	r3, r3, #8
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	4a0b      	ldr	r2, [pc, #44]	; (8007f48 <check_fs+0xa8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d101      	bne.n	8007f22 <check_fs+0x82>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e00c      	b.n	8007f3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3338      	adds	r3, #56	; 0x38
 8007f26:	3352      	adds	r3, #82	; 0x52
 8007f28:	0018      	movs	r0, r3
 8007f2a:	f7fe f870 	bl	800600e <ld_dword>
 8007f2e:	0003      	movs	r3, r0
 8007f30:	4a06      	ldr	r2, [pc, #24]	; (8007f4c <check_fs+0xac>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d101      	bne.n	8007f3a <check_fs+0x9a>
 8007f36:	2300      	movs	r3, #0
 8007f38:	e000      	b.n	8007f3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007f3a:	2302      	movs	r3, #2
}
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b002      	add	sp, #8
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	0000aa55 	.word	0x0000aa55
 8007f48:	00544146 	.word	0x00544146
 8007f4c:	33544146 	.word	0x33544146

08007f50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007f50:	b5b0      	push	{r4, r5, r7, lr}
 8007f52:	b096      	sub	sp, #88	; 0x58
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	1dfb      	adds	r3, r7, #7
 8007f5c:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	0018      	movs	r0, r3
 8007f68:	f7ff ff58 	bl	8007e1c <get_ldnumber>
 8007f6c:	0003      	movs	r3, r0
 8007f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	da01      	bge.n	8007f7a <find_volume+0x2a>
 8007f76:	230b      	movs	r3, #11
 8007f78:	e283      	b.n	8008482 <find_volume+0x532>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007f7a:	4bc2      	ldr	r3, [pc, #776]	; (8008284 <find_volume+0x334>)
 8007f7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f7e:	0092      	lsls	r2, r2, #2
 8007f80:	58d3      	ldr	r3, [r2, r3]
 8007f82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <find_volume+0x3e>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	e279      	b.n	8008482 <find_volume+0x532>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007f94:	1dfb      	adds	r3, r7, #7
 8007f96:	1dfa      	adds	r2, r7, #7
 8007f98:	7812      	ldrb	r2, [r2, #0]
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	438a      	bics	r2, r1
 8007f9e:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01b      	beq.n	8007fe0 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8007fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2537      	movs	r5, #55	; 0x37
 8007fae:	197c      	adds	r4, r7, r5
 8007fb0:	0018      	movs	r0, r3
 8007fb2:	f7fd ff47 	bl	8005e44 <disk_status>
 8007fb6:	0003      	movs	r3, r0
 8007fb8:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007fba:	0029      	movs	r1, r5
 8007fbc:	187b      	adds	r3, r7, r1
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	d10c      	bne.n	8007fe0 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007fc6:	1dfb      	adds	r3, r7, #7
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d006      	beq.n	8007fdc <find_volume+0x8c>
 8007fce:	187b      	adds	r3, r7, r1
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2204      	movs	r2, #4
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	d001      	beq.n	8007fdc <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8007fd8:	230a      	movs	r3, #10
 8007fda:	e252      	b.n	8008482 <find_volume+0x532>
			}
			return FR_OK;				/* The file system object is valid */
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e250      	b.n	8008482 <find_volume+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fec:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	2537      	movs	r5, #55	; 0x37
 8007ff4:	197c      	adds	r4, r7, r5
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f7fd ff46 	bl	8005e88 <disk_initialize>
 8007ffc:	0003      	movs	r3, r0
 8007ffe:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008000:	197b      	adds	r3, r7, r5
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	2201      	movs	r2, #1
 8008006:	4013      	ands	r3, r2
 8008008:	d001      	beq.n	800800e <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800800a:	2303      	movs	r3, #3
 800800c:	e239      	b.n	8008482 <find_volume+0x532>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800800e:	1dfb      	adds	r3, r7, #7
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <find_volume+0xd6>
 8008016:	2337      	movs	r3, #55	; 0x37
 8008018:	18fb      	adds	r3, r7, r3
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2204      	movs	r2, #4
 800801e:	4013      	ands	r3, r2
 8008020:	d001      	beq.n	8008026 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8008022:	230a      	movs	r3, #10
 8008024:	e22d      	b.n	8008482 <find_volume+0x532>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	7858      	ldrb	r0, [r3, #1]
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	330c      	adds	r3, #12
 800802e:	001a      	movs	r2, r3
 8008030:	2102      	movs	r1, #2
 8008032:	f7fd ffa9 	bl	8005f88 <disk_ioctl>
 8008036:	1e03      	subs	r3, r0, #0
 8008038:	d001      	beq.n	800803e <find_volume+0xee>
 800803a:	2301      	movs	r3, #1
 800803c:	e221      	b.n	8008482 <find_volume+0x532>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	899a      	ldrh	r2, [r3, #12]
 8008042:	2380      	movs	r3, #128	; 0x80
 8008044:	015b      	lsls	r3, r3, #5
 8008046:	429a      	cmp	r2, r3
 8008048:	d80d      	bhi.n	8008066 <find_volume+0x116>
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	899a      	ldrh	r2, [r3, #12]
 800804e:	2380      	movs	r3, #128	; 0x80
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	429a      	cmp	r2, r3
 8008054:	d307      	bcc.n	8008066 <find_volume+0x116>
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	899b      	ldrh	r3, [r3, #12]
 800805a:	001a      	movs	r2, r3
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	899b      	ldrh	r3, [r3, #12]
 8008060:	3b01      	subs	r3, #1
 8008062:	4013      	ands	r3, r2
 8008064:	d001      	beq.n	800806a <find_volume+0x11a>
 8008066:	2301      	movs	r3, #1
 8008068:	e20b      	b.n	8008482 <find_volume+0x532>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800806e:	2557      	movs	r5, #87	; 0x57
 8008070:	197c      	adds	r4, r7, r5
 8008072:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	0011      	movs	r1, r2
 8008078:	0018      	movs	r0, r3
 800807a:	f7ff ff11 	bl	8007ea0 <check_fs>
 800807e:	0003      	movs	r3, r0
 8008080:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008082:	197b      	adds	r3, r7, r5
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b02      	cmp	r3, #2
 8008088:	d14b      	bne.n	8008122 <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800808a:	2300      	movs	r3, #0
 800808c:	643b      	str	r3, [r7, #64]	; 0x40
 800808e:	e01d      	b.n	80080cc <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	3338      	adds	r3, #56	; 0x38
 8008094:	001a      	movs	r2, r3
 8008096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008098:	011b      	lsls	r3, r3, #4
 800809a:	33bf      	adds	r3, #191	; 0xbf
 800809c:	33ff      	adds	r3, #255	; 0xff
 800809e:	18d3      	adds	r3, r2, r3
 80080a0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	3304      	adds	r3, #4
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d006      	beq.n	80080ba <find_volume+0x16a>
 80080ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ae:	3308      	adds	r3, #8
 80080b0:	0018      	movs	r0, r3
 80080b2:	f7fd ffac 	bl	800600e <ld_dword>
 80080b6:	0003      	movs	r3, r0
 80080b8:	e000      	b.n	80080bc <find_volume+0x16c>
 80080ba:	2300      	movs	r3, #0
 80080bc:	2214      	movs	r2, #20
 80080be:	18ba      	adds	r2, r7, r2
 80080c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080c2:	0089      	lsls	r1, r1, #2
 80080c4:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80080c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080c8:	3301      	adds	r3, #1
 80080ca:	643b      	str	r3, [r7, #64]	; 0x40
 80080cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d9de      	bls.n	8008090 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80080d2:	2300      	movs	r3, #0
 80080d4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80080d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <find_volume+0x192>
 80080dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080de:	3b01      	subs	r3, #1
 80080e0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80080e2:	2314      	movs	r3, #20
 80080e4:	18fb      	adds	r3, r7, r3
 80080e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080e8:	0092      	lsls	r2, r2, #2
 80080ea:	58d3      	ldr	r3, [r2, r3]
 80080ec:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80080ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d008      	beq.n	8008106 <find_volume+0x1b6>
 80080f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	0011      	movs	r1, r2
 80080fa:	0018      	movs	r0, r3
 80080fc:	f7ff fed0 	bl	8007ea0 <check_fs>
 8008100:	0003      	movs	r3, r0
 8008102:	001a      	movs	r2, r3
 8008104:	e000      	b.n	8008108 <find_volume+0x1b8>
 8008106:	2203      	movs	r2, #3
 8008108:	2157      	movs	r1, #87	; 0x57
 800810a:	187b      	adds	r3, r7, r1
 800810c:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800810e:	187b      	adds	r3, r7, r1
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d905      	bls.n	8008122 <find_volume+0x1d2>
 8008116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008118:	3301      	adds	r3, #1
 800811a:	643b      	str	r3, [r7, #64]	; 0x40
 800811c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800811e:	2b03      	cmp	r3, #3
 8008120:	d9df      	bls.n	80080e2 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008122:	2357      	movs	r3, #87	; 0x57
 8008124:	18fb      	adds	r3, r7, r3
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b04      	cmp	r3, #4
 800812a:	d101      	bne.n	8008130 <find_volume+0x1e0>
 800812c:	2301      	movs	r3, #1
 800812e:	e1a8      	b.n	8008482 <find_volume+0x532>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008130:	2357      	movs	r3, #87	; 0x57
 8008132:	18fb      	adds	r3, r7, r3
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b01      	cmp	r3, #1
 8008138:	d901      	bls.n	800813e <find_volume+0x1ee>
 800813a:	230d      	movs	r3, #13
 800813c:	e1a1      	b.n	8008482 <find_volume+0x532>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	3338      	adds	r3, #56	; 0x38
 8008142:	330b      	adds	r3, #11
 8008144:	0018      	movs	r0, r3
 8008146:	f7fd ff47 	bl	8005fd8 <ld_word>
 800814a:	0003      	movs	r3, r0
 800814c:	001a      	movs	r2, r3
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	899b      	ldrh	r3, [r3, #12]
 8008152:	429a      	cmp	r2, r3
 8008154:	d001      	beq.n	800815a <find_volume+0x20a>
 8008156:	230d      	movs	r3, #13
 8008158:	e193      	b.n	8008482 <find_volume+0x532>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800815a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815c:	3338      	adds	r3, #56	; 0x38
 800815e:	3316      	adds	r3, #22
 8008160:	0018      	movs	r0, r3
 8008162:	f7fd ff39 	bl	8005fd8 <ld_word>
 8008166:	0003      	movs	r3, r0
 8008168:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800816a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816c:	2b00      	cmp	r3, #0
 800816e:	d107      	bne.n	8008180 <find_volume+0x230>
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	3338      	adds	r3, #56	; 0x38
 8008174:	3324      	adds	r3, #36	; 0x24
 8008176:	0018      	movs	r0, r3
 8008178:	f7fd ff49 	bl	800600e <ld_dword>
 800817c:	0003      	movs	r3, r0
 800817e:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008184:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	2248      	movs	r2, #72	; 0x48
 800818a:	5c9a      	ldrb	r2, [r3, r2]
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	789b      	ldrb	r3, [r3, #2]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d005      	beq.n	80081a4 <find_volume+0x254>
 8008198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819a:	789b      	ldrb	r3, [r3, #2]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d001      	beq.n	80081a4 <find_volume+0x254>
 80081a0:	230d      	movs	r3, #13
 80081a2:	e16e      	b.n	8008482 <find_volume+0x532>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80081a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a6:	789b      	ldrb	r3, [r3, #2]
 80081a8:	001a      	movs	r2, r3
 80081aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ac:	4353      	muls	r3, r2
 80081ae:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	2245      	movs	r2, #69	; 0x45
 80081b4:	5c9b      	ldrb	r3, [r3, r2]
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	895b      	ldrh	r3, [r3, #10]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d007      	beq.n	80081d4 <find_volume+0x284>
 80081c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c6:	895b      	ldrh	r3, [r3, #10]
 80081c8:	001a      	movs	r2, r3
 80081ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081cc:	895b      	ldrh	r3, [r3, #10]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	4013      	ands	r3, r2
 80081d2:	d001      	beq.n	80081d8 <find_volume+0x288>
 80081d4:	230d      	movs	r3, #13
 80081d6:	e154      	b.n	8008482 <find_volume+0x532>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	3338      	adds	r3, #56	; 0x38
 80081dc:	3311      	adds	r3, #17
 80081de:	0018      	movs	r0, r3
 80081e0:	f7fd fefa 	bl	8005fd8 <ld_word>
 80081e4:	0003      	movs	r3, r0
 80081e6:	001a      	movs	r2, r3
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	891a      	ldrh	r2, [r3, #8]
 80081f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f2:	899b      	ldrh	r3, [r3, #12]
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	0019      	movs	r1, r3
 80081fa:	0010      	movs	r0, r2
 80081fc:	f7f8 f826 	bl	800024c <__aeabi_uidivmod>
 8008200:	000b      	movs	r3, r1
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <find_volume+0x2bc>
 8008208:	230d      	movs	r3, #13
 800820a:	e13a      	b.n	8008482 <find_volume+0x532>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	3338      	adds	r3, #56	; 0x38
 8008210:	3313      	adds	r3, #19
 8008212:	0018      	movs	r0, r3
 8008214:	f7fd fee0 	bl	8005fd8 <ld_word>
 8008218:	0003      	movs	r3, r0
 800821a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800821c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800821e:	2b00      	cmp	r3, #0
 8008220:	d107      	bne.n	8008232 <find_volume+0x2e2>
 8008222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008224:	3338      	adds	r3, #56	; 0x38
 8008226:	3320      	adds	r3, #32
 8008228:	0018      	movs	r0, r3
 800822a:	f7fd fef0 	bl	800600e <ld_dword>
 800822e:	0003      	movs	r3, r0
 8008230:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	3338      	adds	r3, #56	; 0x38
 8008236:	330e      	adds	r3, #14
 8008238:	252e      	movs	r5, #46	; 0x2e
 800823a:	197c      	adds	r4, r7, r5
 800823c:	0018      	movs	r0, r3
 800823e:	f7fd fecb 	bl	8005fd8 <ld_word>
 8008242:	0003      	movs	r3, r0
 8008244:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008246:	197b      	adds	r3, r7, r5
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <find_volume+0x302>
 800824e:	230d      	movs	r3, #13
 8008250:	e117      	b.n	8008482 <find_volume+0x532>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008252:	232e      	movs	r3, #46	; 0x2e
 8008254:	18fb      	adds	r3, r7, r3
 8008256:	881a      	ldrh	r2, [r3, #0]
 8008258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825a:	18d4      	adds	r4, r2, r3
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	891a      	ldrh	r2, [r3, #8]
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	899b      	ldrh	r3, [r3, #12]
 8008264:	095b      	lsrs	r3, r3, #5
 8008266:	b29b      	uxth	r3, r3
 8008268:	0019      	movs	r1, r3
 800826a:	0010      	movs	r0, r2
 800826c:	f7f7 ff68 	bl	8000140 <__udivsi3>
 8008270:	0003      	movs	r3, r0
 8008272:	b29b      	uxth	r3, r3
 8008274:	18e3      	adds	r3, r4, r3
 8008276:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	429a      	cmp	r2, r3
 800827e:	d203      	bcs.n	8008288 <find_volume+0x338>
 8008280:	230d      	movs	r3, #13
 8008282:	e0fe      	b.n	8008482 <find_volume+0x532>
 8008284:	200002f0 	.word	0x200002f0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	1ad2      	subs	r2, r2, r3
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	895b      	ldrh	r3, [r3, #10]
 8008292:	0019      	movs	r1, r3
 8008294:	0010      	movs	r0, r2
 8008296:	f7f7 ff53 	bl	8000140 <__udivsi3>
 800829a:	0003      	movs	r3, r0
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <find_volume+0x358>
 80082a4:	230d      	movs	r3, #13
 80082a6:	e0ec      	b.n	8008482 <find_volume+0x532>
		fmt = FS_FAT32;
 80082a8:	2157      	movs	r1, #87	; 0x57
 80082aa:	187b      	adds	r3, r7, r1
 80082ac:	2203      	movs	r2, #3
 80082ae:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b2:	4a76      	ldr	r2, [pc, #472]	; (800848c <find_volume+0x53c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d802      	bhi.n	80082be <find_volume+0x36e>
 80082b8:	187b      	adds	r3, r7, r1
 80082ba:	2202      	movs	r2, #2
 80082bc:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	4a73      	ldr	r2, [pc, #460]	; (8008490 <find_volume+0x540>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d803      	bhi.n	80082ce <find_volume+0x37e>
 80082c6:	2357      	movs	r3, #87	; 0x57
 80082c8:	18fb      	adds	r3, r7, r3
 80082ca:	2201      	movs	r2, #1
 80082cc:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	1c9a      	adds	r2, r3, #2
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082da:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80082dc:	232e      	movs	r3, #46	; 0x2e
 80082de:	18fb      	adds	r3, r7, r3
 80082e0:	881a      	ldrh	r2, [r3, #0]
 80082e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e4:	18d2      	adds	r2, r2, r3
 80082e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80082ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	18d2      	adds	r2, r2, r3
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80082f4:	2357      	movs	r3, #87	; 0x57
 80082f6:	18fb      	adds	r3, r7, r3
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d11d      	bne.n	800833a <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	3338      	adds	r3, #56	; 0x38
 8008302:	332a      	adds	r3, #42	; 0x2a
 8008304:	0018      	movs	r0, r3
 8008306:	f7fd fe67 	bl	8005fd8 <ld_word>
 800830a:	1e03      	subs	r3, r0, #0
 800830c:	d001      	beq.n	8008312 <find_volume+0x3c2>
 800830e:	230d      	movs	r3, #13
 8008310:	e0b7      	b.n	8008482 <find_volume+0x532>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	891b      	ldrh	r3, [r3, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <find_volume+0x3ce>
 800831a:	230d      	movs	r3, #13
 800831c:	e0b1      	b.n	8008482 <find_volume+0x532>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	3338      	adds	r3, #56	; 0x38
 8008322:	332c      	adds	r3, #44	; 0x2c
 8008324:	0018      	movs	r0, r3
 8008326:	f7fd fe72 	bl	800600e <ld_dword>
 800832a:	0002      	movs	r2, r0
 800832c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	647b      	str	r3, [r7, #68]	; 0x44
 8008338:	e020      	b.n	800837c <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800833a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833c:	891b      	ldrh	r3, [r3, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <find_volume+0x3f6>
 8008342:	230d      	movs	r3, #13
 8008344:	e09d      	b.n	8008482 <find_volume+0x532>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800834a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834c:	18d2      	adds	r2, r2, r3
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008352:	2357      	movs	r3, #87	; 0x57
 8008354:	18fb      	adds	r3, r7, r3
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d103      	bne.n	8008364 <find_volume+0x414>
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	e00a      	b.n	800837a <find_volume+0x42a>
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	69da      	ldr	r2, [r3, #28]
 8008368:	0013      	movs	r3, r2
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	189b      	adds	r3, r3, r2
 800836e:	085a      	lsrs	r2, r3, #1
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	2101      	movs	r1, #1
 8008376:	400b      	ands	r3, r1
 8008378:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800837a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	6a1c      	ldr	r4, [r3, #32]
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	899b      	ldrh	r3, [r3, #12]
 8008384:	001a      	movs	r2, r3
 8008386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008388:	18d3      	adds	r3, r2, r3
 800838a:	1e5a      	subs	r2, r3, #1
 800838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838e:	899b      	ldrh	r3, [r3, #12]
 8008390:	0019      	movs	r1, r3
 8008392:	0010      	movs	r0, r2
 8008394:	f7f7 fed4 	bl	8000140 <__udivsi3>
 8008398:	0003      	movs	r3, r0
 800839a:	429c      	cmp	r4, r3
 800839c:	d201      	bcs.n	80083a2 <find_volume+0x452>
 800839e:	230d      	movs	r3, #13
 80083a0:	e06f      	b.n	8008482 <find_volume+0x532>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	2201      	movs	r2, #1
 80083a6:	4252      	negs	r2, r2
 80083a8:	619a      	str	r2, [r3, #24]
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	2280      	movs	r2, #128	; 0x80
 80083b6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80083b8:	2357      	movs	r3, #87	; 0x57
 80083ba:	18fb      	adds	r3, r7, r3
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d148      	bne.n	8008454 <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	3338      	adds	r3, #56	; 0x38
 80083c6:	3330      	adds	r3, #48	; 0x30
 80083c8:	0018      	movs	r0, r3
 80083ca:	f7fd fe05 	bl	8005fd8 <ld_word>
 80083ce:	0003      	movs	r3, r0
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d13f      	bne.n	8008454 <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 80083d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083da:	0011      	movs	r1, r2
 80083dc:	0018      	movs	r0, r3
 80083de:	f7fe f8a7 	bl	8006530 <move_window>
 80083e2:	1e03      	subs	r3, r0, #0
 80083e4:	d136      	bne.n	8008454 <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	2200      	movs	r2, #0
 80083ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	3338      	adds	r3, #56	; 0x38
 80083f0:	33ff      	adds	r3, #255	; 0xff
 80083f2:	33ff      	adds	r3, #255	; 0xff
 80083f4:	0018      	movs	r0, r3
 80083f6:	f7fd fdef 	bl	8005fd8 <ld_word>
 80083fa:	0003      	movs	r3, r0
 80083fc:	001a      	movs	r2, r3
 80083fe:	4b25      	ldr	r3, [pc, #148]	; (8008494 <find_volume+0x544>)
 8008400:	429a      	cmp	r2, r3
 8008402:	d127      	bne.n	8008454 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	3338      	adds	r3, #56	; 0x38
 8008408:	0018      	movs	r0, r3
 800840a:	f7fd fe00 	bl	800600e <ld_dword>
 800840e:	0003      	movs	r3, r0
 8008410:	4a21      	ldr	r2, [pc, #132]	; (8008498 <find_volume+0x548>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d11e      	bne.n	8008454 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	3338      	adds	r3, #56	; 0x38
 800841a:	33e5      	adds	r3, #229	; 0xe5
 800841c:	33ff      	adds	r3, #255	; 0xff
 800841e:	0018      	movs	r0, r3
 8008420:	f7fd fdf5 	bl	800600e <ld_dword>
 8008424:	0003      	movs	r3, r0
 8008426:	4a1d      	ldr	r2, [pc, #116]	; (800849c <find_volume+0x54c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d113      	bne.n	8008454 <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	3338      	adds	r3, #56	; 0x38
 8008430:	33e9      	adds	r3, #233	; 0xe9
 8008432:	33ff      	adds	r3, #255	; 0xff
 8008434:	0018      	movs	r0, r3
 8008436:	f7fd fdea 	bl	800600e <ld_dword>
 800843a:	0002      	movs	r2, r0
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	3338      	adds	r3, #56	; 0x38
 8008444:	33ed      	adds	r3, #237	; 0xed
 8008446:	33ff      	adds	r3, #255	; 0xff
 8008448:	0018      	movs	r0, r3
 800844a:	f7fd fde0 	bl	800600e <ld_dword>
 800844e:	0002      	movs	r2, r0
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008456:	2257      	movs	r2, #87	; 0x57
 8008458:	18ba      	adds	r2, r7, r2
 800845a:	7812      	ldrb	r2, [r2, #0]
 800845c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800845e:	4b10      	ldr	r3, [pc, #64]	; (80084a0 <find_volume+0x550>)
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	b29a      	uxth	r2, r3
 8008466:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <find_volume+0x550>)
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <find_volume+0x550>)
 800846c:	881a      	ldrh	r2, [r3, #0]
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	4a0b      	ldr	r2, [pc, #44]	; (80084a4 <find_volume+0x554>)
 8008476:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	0018      	movs	r0, r3
 800847c:	f7fd fff0 	bl	8006460 <clear_lock>
#endif
	return FR_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	0018      	movs	r0, r3
 8008484:	46bd      	mov	sp, r7
 8008486:	b016      	add	sp, #88	; 0x58
 8008488:	bdb0      	pop	{r4, r5, r7, pc}
 800848a:	46c0      	nop			; (mov r8, r8)
 800848c:	0000fff5 	.word	0x0000fff5
 8008490:	00000ff5 	.word	0x00000ff5
 8008494:	0000aa55 	.word	0x0000aa55
 8008498:	41615252 	.word	0x41615252
 800849c:	61417272 	.word	0x61417272
 80084a0:	200002f4 	.word	0x200002f4
 80084a4:	20000318 	.word	0x20000318

080084a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80084a8:	b590      	push	{r4, r7, lr}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80084b2:	240f      	movs	r4, #15
 80084b4:	193b      	adds	r3, r7, r4
 80084b6:	2209      	movs	r2, #9
 80084b8:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01d      	beq.n	80084fc <validate+0x54>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d019      	beq.n	80084fc <validate+0x54>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d014      	beq.n	80084fc <validate+0x54>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	889a      	ldrh	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	88db      	ldrh	r3, [r3, #6]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d10d      	bne.n	80084fc <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	0018      	movs	r0, r3
 80084e8:	f7fd fcac 	bl	8005e44 <disk_status>
 80084ec:	0003      	movs	r3, r0
 80084ee:	001a      	movs	r2, r3
 80084f0:	2301      	movs	r3, #1
 80084f2:	4013      	ands	r3, r2
 80084f4:	d102      	bne.n	80084fc <validate+0x54>
			res = FR_OK;
 80084f6:	193b      	adds	r3, r7, r4
 80084f8:	2200      	movs	r2, #0
 80084fa:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80084fc:	230f      	movs	r3, #15
 80084fe:	18fb      	adds	r3, r7, r3
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <validate+0x64>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	e000      	b.n	800850e <validate+0x66>
 800850c:	2200      	movs	r2, #0
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	601a      	str	r2, [r3, #0]
	return res;
 8008512:	230f      	movs	r3, #15
 8008514:	18fb      	adds	r3, r7, r3
 8008516:	781b      	ldrb	r3, [r3, #0]
}
 8008518:	0018      	movs	r0, r3
 800851a:	46bd      	mov	sp, r7
 800851c:	b005      	add	sp, #20
 800851e:	bd90      	pop	{r4, r7, pc}

08008520 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008520:	b5b0      	push	{r4, r5, r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	1dfb      	adds	r3, r7, #7
 800852c:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008532:	2310      	movs	r3, #16
 8008534:	18fb      	adds	r3, r7, r3
 8008536:	0018      	movs	r0, r3
 8008538:	f7ff fc70 	bl	8007e1c <get_ldnumber>
 800853c:	0003      	movs	r3, r0
 800853e:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	2b00      	cmp	r3, #0
 8008544:	da01      	bge.n	800854a <f_mount+0x2a>
 8008546:	230b      	movs	r3, #11
 8008548:	e030      	b.n	80085ac <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800854a:	4b1a      	ldr	r3, [pc, #104]	; (80085b4 <f_mount+0x94>)
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	0092      	lsls	r2, r2, #2
 8008550:	58d3      	ldr	r3, [r2, r3]
 8008552:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d006      	beq.n	8008568 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	0018      	movs	r0, r3
 800855e:	f7fd ff7f 	bl	8006460 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2200      	movs	r2, #0
 8008566:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d002      	beq.n	8008574 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008574:	68f9      	ldr	r1, [r7, #12]
 8008576:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <f_mount+0x94>)
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	0092      	lsls	r2, r2, #2
 800857c:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d003      	beq.n	800858c <f_mount+0x6c>
 8008584:	1dfb      	adds	r3, r7, #7
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d001      	beq.n	8008590 <f_mount+0x70>
 800858c:	2300      	movs	r3, #0
 800858e:	e00d      	b.n	80085ac <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008590:	2517      	movs	r5, #23
 8008592:	197c      	adds	r4, r7, r5
 8008594:	230c      	movs	r3, #12
 8008596:	18f9      	adds	r1, r7, r3
 8008598:	2308      	movs	r3, #8
 800859a:	18fb      	adds	r3, r7, r3
 800859c:	2200      	movs	r2, #0
 800859e:	0018      	movs	r0, r3
 80085a0:	f7ff fcd6 	bl	8007f50 <find_volume>
 80085a4:	0003      	movs	r3, r0
 80085a6:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80085a8:	197b      	adds	r3, r7, r5
 80085aa:	781b      	ldrb	r3, [r3, #0]
}
 80085ac:	0018      	movs	r0, r3
 80085ae:	46bd      	mov	sp, r7
 80085b0:	b008      	add	sp, #32
 80085b2:	bdb0      	pop	{r4, r5, r7, pc}
 80085b4:	200002f0 	.word	0x200002f0

080085b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80085b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ba:	b09b      	sub	sp, #108	; 0x6c
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	1dfb      	adds	r3, r7, #7
 80085c4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d101      	bne.n	80085d0 <f_open+0x18>
 80085cc:	2309      	movs	r3, #9
 80085ce:	e1f4      	b.n	80089ba <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80085d0:	1dfb      	adds	r3, r7, #7
 80085d2:	1dfa      	adds	r2, r7, #7
 80085d4:	7812      	ldrb	r2, [r2, #0]
 80085d6:	213f      	movs	r1, #63	; 0x3f
 80085d8:	400a      	ands	r2, r1
 80085da:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80085dc:	2567      	movs	r5, #103	; 0x67
 80085de:	197c      	adds	r4, r7, r5
 80085e0:	1dfb      	adds	r3, r7, #7
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	2314      	movs	r3, #20
 80085e6:	18f9      	adds	r1, r7, r3
 80085e8:	2308      	movs	r3, #8
 80085ea:	18fb      	adds	r3, r7, r3
 80085ec:	0018      	movs	r0, r3
 80085ee:	f7ff fcaf 	bl	8007f50 <find_volume>
 80085f2:	0003      	movs	r3, r0
 80085f4:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80085f6:	197b      	adds	r3, r7, r5
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d000      	beq.n	8008600 <f_open+0x48>
 80085fe:	e1d1      	b.n	80089a4 <f_open+0x3ec>
		dj.obj.fs = fs;
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	2618      	movs	r6, #24
 8008604:	19bb      	adds	r3, r7, r6
 8008606:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	197c      	adds	r4, r7, r5
 800860c:	19bb      	adds	r3, r7, r6
 800860e:	0011      	movs	r1, r2
 8008610:	0018      	movs	r0, r3
 8008612:	f7ff fb79 	bl	8007d08 <follow_path>
 8008616:	0003      	movs	r3, r0
 8008618:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800861a:	0029      	movs	r1, r5
 800861c:	197b      	adds	r3, r7, r5
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d11b      	bne.n	800865c <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008624:	19bb      	adds	r3, r7, r6
 8008626:	222f      	movs	r2, #47	; 0x2f
 8008628:	5c9b      	ldrb	r3, [r3, r2]
 800862a:	b25b      	sxtb	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	da03      	bge.n	8008638 <f_open+0x80>
				res = FR_INVALID_NAME;
 8008630:	187b      	adds	r3, r7, r1
 8008632:	2206      	movs	r2, #6
 8008634:	701a      	strb	r2, [r3, #0]
 8008636:	e011      	b.n	800865c <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008638:	1dfb      	adds	r3, r7, #7
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	2201      	movs	r2, #1
 800863e:	4393      	bics	r3, r2
 8008640:	1e5a      	subs	r2, r3, #1
 8008642:	4193      	sbcs	r3, r2
 8008644:	b2db      	uxtb	r3, r3
 8008646:	001a      	movs	r2, r3
 8008648:	2367      	movs	r3, #103	; 0x67
 800864a:	18fc      	adds	r4, r7, r3
 800864c:	2318      	movs	r3, #24
 800864e:	18fb      	adds	r3, r7, r3
 8008650:	0011      	movs	r1, r2
 8008652:	0018      	movs	r0, r3
 8008654:	f7fd fdba 	bl	80061cc <chk_lock>
 8008658:	0003      	movs	r3, r0
 800865a:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800865c:	1dfb      	adds	r3, r7, #7
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	221c      	movs	r2, #28
 8008662:	4013      	ands	r3, r2
 8008664:	d100      	bne.n	8008668 <f_open+0xb0>
 8008666:	e096      	b.n	8008796 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8008668:	2267      	movs	r2, #103	; 0x67
 800866a:	18bb      	adds	r3, r7, r2
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01a      	beq.n	80086a8 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008672:	18bb      	adds	r3, r7, r2
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b04      	cmp	r3, #4
 8008678:	d10f      	bne.n	800869a <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800867a:	f7fd fdff 	bl	800627c <enq_lock>
 800867e:	1e03      	subs	r3, r0, #0
 8008680:	d007      	beq.n	8008692 <f_open+0xda>
 8008682:	2318      	movs	r3, #24
 8008684:	18fb      	adds	r3, r7, r3
 8008686:	0018      	movs	r0, r3
 8008688:	f7ff f82a 	bl	80076e0 <dir_register>
 800868c:	0003      	movs	r3, r0
 800868e:	001a      	movs	r2, r3
 8008690:	e000      	b.n	8008694 <f_open+0xdc>
 8008692:	2212      	movs	r2, #18
 8008694:	2367      	movs	r3, #103	; 0x67
 8008696:	18fb      	adds	r3, r7, r3
 8008698:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800869a:	1dfb      	adds	r3, r7, #7
 800869c:	1dfa      	adds	r2, r7, #7
 800869e:	7812      	ldrb	r2, [r2, #0]
 80086a0:	2108      	movs	r1, #8
 80086a2:	430a      	orrs	r2, r1
 80086a4:	701a      	strb	r2, [r3, #0]
 80086a6:	e014      	b.n	80086d2 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80086a8:	2318      	movs	r3, #24
 80086aa:	18fb      	adds	r3, r7, r3
 80086ac:	799b      	ldrb	r3, [r3, #6]
 80086ae:	001a      	movs	r2, r3
 80086b0:	2311      	movs	r3, #17
 80086b2:	4013      	ands	r3, r2
 80086b4:	d004      	beq.n	80086c0 <f_open+0x108>
					res = FR_DENIED;
 80086b6:	2367      	movs	r3, #103	; 0x67
 80086b8:	18fb      	adds	r3, r7, r3
 80086ba:	2207      	movs	r2, #7
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	e008      	b.n	80086d2 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80086c0:	1dfb      	adds	r3, r7, #7
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2204      	movs	r2, #4
 80086c6:	4013      	ands	r3, r2
 80086c8:	d003      	beq.n	80086d2 <f_open+0x11a>
 80086ca:	2367      	movs	r3, #103	; 0x67
 80086cc:	18fb      	adds	r3, r7, r3
 80086ce:	2208      	movs	r2, #8
 80086d0:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80086d2:	2467      	movs	r4, #103	; 0x67
 80086d4:	193b      	adds	r3, r7, r4
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d000      	beq.n	80086de <f_open+0x126>
 80086dc:	e07b      	b.n	80087d6 <f_open+0x21e>
 80086de:	1dfb      	adds	r3, r7, #7
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2208      	movs	r2, #8
 80086e4:	4013      	ands	r3, r2
 80086e6:	d100      	bne.n	80086ea <f_open+0x132>
 80086e8:	e075      	b.n	80087d6 <f_open+0x21e>
				dw = GET_FATTIME();
 80086ea:	f7fd fb3f 	bl	8005d6c <get_fattime>
 80086ee:	0003      	movs	r3, r0
 80086f0:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80086f2:	2518      	movs	r5, #24
 80086f4:	197b      	adds	r3, r7, r5
 80086f6:	6a1b      	ldr	r3, [r3, #32]
 80086f8:	330e      	adds	r3, #14
 80086fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086fc:	0011      	movs	r1, r2
 80086fe:	0018      	movs	r0, r3
 8008700:	f7fd fcc4 	bl	800608c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008704:	197b      	adds	r3, r7, r5
 8008706:	6a1b      	ldr	r3, [r3, #32]
 8008708:	3316      	adds	r3, #22
 800870a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800870c:	0011      	movs	r1, r2
 800870e:	0018      	movs	r0, r3
 8008710:	f7fd fcbc 	bl	800608c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008714:	197b      	adds	r3, r7, r5
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	330b      	adds	r3, #11
 800871a:	2220      	movs	r2, #32
 800871c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	197b      	adds	r3, r7, r5
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	0019      	movs	r1, r3
 8008726:	0010      	movs	r0, r2
 8008728:	f7fe fcef 	bl	800710a <ld_clust>
 800872c:	0003      	movs	r3, r0
 800872e:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008730:	6978      	ldr	r0, [r7, #20]
 8008732:	197b      	adds	r3, r7, r5
 8008734:	6a1b      	ldr	r3, [r3, #32]
 8008736:	2200      	movs	r2, #0
 8008738:	0019      	movs	r1, r3
 800873a:	f7fe fd05 	bl	8007148 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800873e:	197b      	adds	r3, r7, r5
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	331c      	adds	r3, #28
 8008744:	2100      	movs	r1, #0
 8008746:	0018      	movs	r0, r3
 8008748:	f7fd fca0 	bl	800608c <st_dword>
					fs->wflag = 1;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2201      	movs	r2, #1
 8008750:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008754:	2b00      	cmp	r3, #0
 8008756:	d03e      	beq.n	80087d6 <f_open+0x21e>
						dw = fs->winsect;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800875e:	0026      	movs	r6, r4
 8008760:	193c      	adds	r4, r7, r4
 8008762:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008764:	197b      	adds	r3, r7, r5
 8008766:	2200      	movs	r2, #0
 8008768:	0018      	movs	r0, r3
 800876a:	f7fe f9ba 	bl	8006ae2 <remove_chain>
 800876e:	0003      	movs	r3, r0
 8008770:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 8008772:	19bb      	adds	r3, r7, r6
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d12d      	bne.n	80087d6 <f_open+0x21e>
							res = move_window(fs, dw);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	19bc      	adds	r4, r7, r6
 800877e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008780:	0011      	movs	r1, r2
 8008782:	0018      	movs	r0, r3
 8008784:	f7fd fed4 	bl	8006530 <move_window>
 8008788:	0003      	movs	r3, r0
 800878a:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008790:	3a01      	subs	r2, #1
 8008792:	615a      	str	r2, [r3, #20]
 8008794:	e01f      	b.n	80087d6 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008796:	2167      	movs	r1, #103	; 0x67
 8008798:	187b      	adds	r3, r7, r1
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d11a      	bne.n	80087d6 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80087a0:	2318      	movs	r3, #24
 80087a2:	18fb      	adds	r3, r7, r3
 80087a4:	799b      	ldrb	r3, [r3, #6]
 80087a6:	001a      	movs	r2, r3
 80087a8:	2310      	movs	r3, #16
 80087aa:	4013      	ands	r3, r2
 80087ac:	d003      	beq.n	80087b6 <f_open+0x1fe>
					res = FR_NO_FILE;
 80087ae:	187b      	adds	r3, r7, r1
 80087b0:	2204      	movs	r2, #4
 80087b2:	701a      	strb	r2, [r3, #0]
 80087b4:	e00f      	b.n	80087d6 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80087b6:	1dfb      	adds	r3, r7, #7
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2202      	movs	r2, #2
 80087bc:	4013      	ands	r3, r2
 80087be:	d00a      	beq.n	80087d6 <f_open+0x21e>
 80087c0:	2318      	movs	r3, #24
 80087c2:	18fb      	adds	r3, r7, r3
 80087c4:	799b      	ldrb	r3, [r3, #6]
 80087c6:	001a      	movs	r2, r3
 80087c8:	2301      	movs	r3, #1
 80087ca:	4013      	ands	r3, r2
 80087cc:	d003      	beq.n	80087d6 <f_open+0x21e>
						res = FR_DENIED;
 80087ce:	2367      	movs	r3, #103	; 0x67
 80087d0:	18fb      	adds	r3, r7, r3
 80087d2:	2207      	movs	r2, #7
 80087d4:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 80087d6:	2367      	movs	r3, #103	; 0x67
 80087d8:	18fb      	adds	r3, r7, r3
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d12b      	bne.n	8008838 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80087e0:	1dfb      	adds	r3, r7, #7
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2208      	movs	r2, #8
 80087e6:	4013      	ands	r3, r2
 80087e8:	d005      	beq.n	80087f6 <f_open+0x23e>
				mode |= FA_MODIFIED;
 80087ea:	1dfb      	adds	r3, r7, #7
 80087ec:	1dfa      	adds	r2, r7, #7
 80087ee:	7812      	ldrb	r2, [r2, #0]
 80087f0:	2140      	movs	r1, #64	; 0x40
 80087f2:	430a      	orrs	r2, r1
 80087f4:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80087fe:	2118      	movs	r1, #24
 8008800:	187b      	adds	r3, r7, r1
 8008802:	6a1a      	ldr	r2, [r3, #32]
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008808:	1dfb      	adds	r3, r7, #7
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2201      	movs	r2, #1
 800880e:	4393      	bics	r3, r2
 8008810:	1e5a      	subs	r2, r3, #1
 8008812:	4193      	sbcs	r3, r2
 8008814:	b2db      	uxtb	r3, r3
 8008816:	001a      	movs	r2, r3
 8008818:	187b      	adds	r3, r7, r1
 800881a:	0011      	movs	r1, r2
 800881c:	0018      	movs	r0, r3
 800881e:	f7fd fd4b 	bl	80062b8 <inc_lock>
 8008822:	0002      	movs	r2, r0
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d103      	bne.n	8008838 <f_open+0x280>
 8008830:	2367      	movs	r3, #103	; 0x67
 8008832:	18fb      	adds	r3, r7, r3
 8008834:	2202      	movs	r2, #2
 8008836:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008838:	2367      	movs	r3, #103	; 0x67
 800883a:	18fb      	adds	r3, r7, r3
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d000      	beq.n	8008844 <f_open+0x28c>
 8008842:	e0af      	b.n	80089a4 <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	2418      	movs	r4, #24
 8008848:	193b      	adds	r3, r7, r4
 800884a:	6a1b      	ldr	r3, [r3, #32]
 800884c:	0019      	movs	r1, r3
 800884e:	0010      	movs	r0, r2
 8008850:	f7fe fc5b 	bl	800710a <ld_clust>
 8008854:	0002      	movs	r2, r0
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800885a:	193b      	adds	r3, r7, r4
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	331c      	adds	r3, #28
 8008860:	0018      	movs	r0, r3
 8008862:	f7fd fbd4 	bl	800600e <ld_dword>
 8008866:	0002      	movs	r2, r0
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2200      	movs	r2, #0
 8008870:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	88da      	ldrh	r2, [r3, #6]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	1dfa      	adds	r2, r7, #7
 8008884:	7812      	ldrb	r2, [r2, #0]
 8008886:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	3330      	adds	r3, #48	; 0x30
 800889e:	2280      	movs	r2, #128	; 0x80
 80088a0:	0152      	lsls	r2, r2, #5
 80088a2:	2100      	movs	r1, #0
 80088a4:	0018      	movs	r0, r3
 80088a6:	f7fd fc3a 	bl	800611e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80088aa:	1dfb      	adds	r3, r7, #7
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2220      	movs	r2, #32
 80088b0:	4013      	ands	r3, r2
 80088b2:	d100      	bne.n	80088b6 <f_open+0x2fe>
 80088b4:	e076      	b.n	80089a4 <f_open+0x3ec>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d100      	bne.n	80088c0 <f_open+0x308>
 80088be:	e071      	b.n	80089a4 <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	68da      	ldr	r2, [r3, #12]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	895b      	ldrh	r3, [r3, #10]
 80088cc:	001a      	movs	r2, r3
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	899b      	ldrh	r3, [r3, #12]
 80088d2:	4353      	muls	r3, r2
 80088d4:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088e2:	e019      	b.n	8008918 <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088e8:	0011      	movs	r1, r2
 80088ea:	0018      	movs	r0, r3
 80088ec:	f7fd feee 	bl	80066cc <get_fat>
 80088f0:	0003      	movs	r3, r0
 80088f2:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80088f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d803      	bhi.n	8008902 <f_open+0x34a>
 80088fa:	2367      	movs	r3, #103	; 0x67
 80088fc:	18fb      	adds	r3, r7, r3
 80088fe:	2202      	movs	r2, #2
 8008900:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008904:	3301      	adds	r3, #1
 8008906:	d103      	bne.n	8008910 <f_open+0x358>
 8008908:	2367      	movs	r3, #103	; 0x67
 800890a:	18fb      	adds	r3, r7, r3
 800890c:	2201      	movs	r2, #1
 800890e:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008918:	2367      	movs	r3, #103	; 0x67
 800891a:	18fb      	adds	r3, r7, r3
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d103      	bne.n	800892a <f_open+0x372>
 8008922:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008926:	429a      	cmp	r2, r3
 8008928:	d8dc      	bhi.n	80088e4 <f_open+0x32c>
				}
				fp->clust = clst;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800892e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008930:	2467      	movs	r4, #103	; 0x67
 8008932:	193b      	adds	r3, r7, r4
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d134      	bne.n	80089a4 <f_open+0x3ec>
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	899b      	ldrh	r3, [r3, #12]
 800893e:	001a      	movs	r2, r3
 8008940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008942:	0011      	movs	r1, r2
 8008944:	0018      	movs	r0, r3
 8008946:	f7f7 fc81 	bl	800024c <__aeabi_uidivmod>
 800894a:	1e0b      	subs	r3, r1, #0
 800894c:	d02a      	beq.n	80089a4 <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008952:	0011      	movs	r1, r2
 8008954:	0018      	movs	r0, r3
 8008956:	f7fd fe9d 	bl	8006694 <clust2sect>
 800895a:	0003      	movs	r3, r0
 800895c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800895e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008960:	2b00      	cmp	r3, #0
 8008962:	d103      	bne.n	800896c <f_open+0x3b4>
						res = FR_INT_ERR;
 8008964:	193b      	adds	r3, r7, r4
 8008966:	2202      	movs	r2, #2
 8008968:	701a      	strb	r2, [r3, #0]
 800896a:	e01b      	b.n	80089a4 <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	899b      	ldrh	r3, [r3, #12]
 8008970:	0019      	movs	r1, r3
 8008972:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8008974:	f7f7 fbe4 	bl	8000140 <__udivsi3>
 8008978:	0003      	movs	r3, r0
 800897a:	001a      	movs	r2, r3
 800897c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800897e:	18d2      	adds	r2, r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	7858      	ldrb	r0, [r3, #1]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3330      	adds	r3, #48	; 0x30
 800898c:	0019      	movs	r1, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6a1a      	ldr	r2, [r3, #32]
 8008992:	2301      	movs	r3, #1
 8008994:	f7fd faa8 	bl	8005ee8 <disk_read>
 8008998:	1e03      	subs	r3, r0, #0
 800899a:	d003      	beq.n	80089a4 <f_open+0x3ec>
 800899c:	2367      	movs	r3, #103	; 0x67
 800899e:	18fb      	adds	r3, r7, r3
 80089a0:	2201      	movs	r2, #1
 80089a2:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80089a4:	2367      	movs	r3, #103	; 0x67
 80089a6:	18fb      	adds	r3, r7, r3
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <f_open+0x3fc>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80089b4:	2367      	movs	r3, #103	; 0x67
 80089b6:	18fb      	adds	r3, r7, r3
 80089b8:	781b      	ldrb	r3, [r3, #0]
}
 80089ba:	0018      	movs	r0, r3
 80089bc:	46bd      	mov	sp, r7
 80089be:	b01b      	add	sp, #108	; 0x6c
 80089c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80089c2:	b5b0      	push	{r4, r5, r7, lr}
 80089c4:	b08c      	sub	sp, #48	; 0x30
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	607a      	str	r2, [r7, #4]
 80089ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	252f      	movs	r5, #47	; 0x2f
 80089de:	197c      	adds	r4, r7, r5
 80089e0:	2210      	movs	r2, #16
 80089e2:	18ba      	adds	r2, r7, r2
 80089e4:	0011      	movs	r1, r2
 80089e6:	0018      	movs	r0, r3
 80089e8:	f7ff fd5e 	bl	80084a8 <validate>
 80089ec:	0003      	movs	r3, r0
 80089ee:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80089f0:	197b      	adds	r3, r7, r5
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d107      	bne.n	8008a08 <f_write+0x46>
 80089f8:	197b      	adds	r3, r7, r5
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	7d52      	ldrb	r2, [r2, #21]
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	197b      	adds	r3, r7, r5
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <f_write+0x4e>
 8008a08:	232f      	movs	r3, #47	; 0x2f
 8008a0a:	18fb      	adds	r3, r7, r3
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	e16f      	b.n	8008cf0 <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	7d1b      	ldrb	r3, [r3, #20]
 8008a14:	001a      	movs	r2, r3
 8008a16:	2302      	movs	r3, #2
 8008a18:	4013      	ands	r3, r2
 8008a1a:	d101      	bne.n	8008a20 <f_write+0x5e>
 8008a1c:	2307      	movs	r3, #7
 8008a1e:	e167      	b.n	8008cf0 <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	699a      	ldr	r2, [r3, #24]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	18d2      	adds	r2, r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d300      	bcc.n	8008a32 <f_write+0x70>
 8008a30:	e150      	b.n	8008cd4 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	699b      	ldr	r3, [r3, #24]
 8008a36:	43db      	mvns	r3, r3
 8008a38:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008a3a:	e14b      	b.n	8008cd4 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	699a      	ldr	r2, [r3, #24]
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	899b      	ldrh	r3, [r3, #12]
 8008a44:	0019      	movs	r1, r3
 8008a46:	0010      	movs	r0, r2
 8008a48:	f7f7 fc00 	bl	800024c <__aeabi_uidivmod>
 8008a4c:	1e0b      	subs	r3, r1, #0
 8008a4e:	d000      	beq.n	8008a52 <f_write+0x90>
 8008a50:	e0f4      	b.n	8008c3c <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	699a      	ldr	r2, [r3, #24]
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	899b      	ldrh	r3, [r3, #12]
 8008a5a:	0019      	movs	r1, r3
 8008a5c:	0010      	movs	r0, r2
 8008a5e:	f7f7 fb6f 	bl	8000140 <__udivsi3>
 8008a62:	0003      	movs	r3, r0
 8008a64:	001a      	movs	r2, r3
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	895b      	ldrh	r3, [r3, #10]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d146      	bne.n	8008b04 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10d      	bne.n	8008a9a <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d11e      	bne.n	8008ac8 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	0018      	movs	r0, r3
 8008a90:	f7fe f89a 	bl	8006bc8 <create_chain>
 8008a94:	0003      	movs	r3, r0
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a98:	e016      	b.n	8008ac8 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d009      	beq.n	8008ab6 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	0011      	movs	r1, r2
 8008aaa:	0018      	movs	r0, r3
 8008aac:	f7fe f932 	bl	8006d14 <clmt_clust>
 8008ab0:	0003      	movs	r3, r0
 8008ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ab4:	e008      	b.n	8008ac8 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	0019      	movs	r1, r3
 8008abe:	0010      	movs	r0, r2
 8008ac0:	f7fe f882 	bl	8006bc8 <create_chain>
 8008ac4:	0003      	movs	r3, r0
 8008ac6:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d100      	bne.n	8008ad0 <f_write+0x10e>
 8008ace:	e106      	b.n	8008cde <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d104      	bne.n	8008ae0 <f_write+0x11e>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	755a      	strb	r2, [r3, #21]
 8008adc:	2302      	movs	r3, #2
 8008ade:	e107      	b.n	8008cf0 <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	d104      	bne.n	8008af0 <f_write+0x12e>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	755a      	strb	r2, [r3, #21]
 8008aec:	2301      	movs	r3, #1
 8008aee:	e0ff      	b.n	8008cf0 <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008af4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d102      	bne.n	8008b04 <f_write+0x142>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b02:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	7d1b      	ldrb	r3, [r3, #20]
 8008b08:	b25b      	sxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	da17      	bge.n	8008b3e <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	7858      	ldrb	r0, [r3, #1]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3330      	adds	r3, #48	; 0x30
 8008b16:	0019      	movs	r1, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6a1a      	ldr	r2, [r3, #32]
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	f7fd fa0b 	bl	8005f38 <disk_write>
 8008b22:	1e03      	subs	r3, r0, #0
 8008b24:	d004      	beq.n	8008b30 <f_write+0x16e>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	755a      	strb	r2, [r3, #21]
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e0df      	b.n	8008cf0 <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	7d1b      	ldrb	r3, [r3, #20]
 8008b34:	227f      	movs	r2, #127	; 0x7f
 8008b36:	4013      	ands	r3, r2
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	0019      	movs	r1, r3
 8008b46:	0010      	movs	r0, r2
 8008b48:	f7fd fda4 	bl	8006694 <clust2sect>
 8008b4c:	0003      	movs	r3, r0
 8008b4e:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d104      	bne.n	8008b60 <f_write+0x19e>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2202      	movs	r2, #2
 8008b5a:	755a      	strb	r2, [r3, #21]
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	e0c7      	b.n	8008cf0 <f_write+0x32e>
			sect += csect;
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	18d3      	adds	r3, r2, r3
 8008b66:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	899b      	ldrh	r3, [r3, #12]
 8008b6c:	0019      	movs	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7f7 fae6 	bl	8000140 <__udivsi3>
 8008b74:	0003      	movs	r3, r0
 8008b76:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d040      	beq.n	8008c00 <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b7e:	69ba      	ldr	r2, [r7, #24]
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	18d3      	adds	r3, r2, r3
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	8952      	ldrh	r2, [r2, #10]
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d905      	bls.n	8008b98 <f_write+0x1d6>
					cc = fs->csize - csect;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	895b      	ldrh	r3, [r3, #10]
 8008b90:	001a      	movs	r2, r3
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	7858      	ldrb	r0, [r3, #1]
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	697a      	ldr	r2, [r7, #20]
 8008ba0:	69f9      	ldr	r1, [r7, #28]
 8008ba2:	f7fd f9c9 	bl	8005f38 <disk_write>
 8008ba6:	1e03      	subs	r3, r0, #0
 8008ba8:	d004      	beq.n	8008bb4 <f_write+0x1f2>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2201      	movs	r2, #1
 8008bae:	755a      	strb	r2, [r3, #21]
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e09d      	b.n	8008cf0 <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a1a      	ldr	r2, [r3, #32]
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	6a3a      	ldr	r2, [r7, #32]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d917      	bls.n	8008bf2 <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3330      	adds	r3, #48	; 0x30
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a1a      	ldr	r2, [r3, #32]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	8992      	ldrh	r2, [r2, #12]
 8008bd4:	4353      	muls	r3, r2
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	18d1      	adds	r1, r2, r3
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	899b      	ldrh	r3, [r3, #12]
 8008bde:	001a      	movs	r2, r3
 8008be0:	f7fd fa7e 	bl	80060e0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	7d1b      	ldrb	r3, [r3, #20]
 8008be8:	227f      	movs	r2, #127	; 0x7f
 8008bea:	4013      	ands	r3, r2
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	899b      	ldrh	r3, [r3, #12]
 8008bf6:	001a      	movs	r2, r3
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	4353      	muls	r3, r2
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008bfe:	e04b      	b.n	8008c98 <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d015      	beq.n	8008c36 <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	699a      	ldr	r2, [r3, #24]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d20f      	bcs.n	8008c36 <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	7858      	ldrb	r0, [r3, #1]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3330      	adds	r3, #48	; 0x30
 8008c1e:	0019      	movs	r1, r3
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	2301      	movs	r3, #1
 8008c24:	f7fd f960 	bl	8005ee8 <disk_read>
 8008c28:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8008c2a:	d004      	beq.n	8008c36 <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	755a      	strb	r2, [r3, #21]
 8008c32:	2301      	movs	r3, #1
 8008c34:	e05c      	b.n	8008cf0 <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	697a      	ldr	r2, [r7, #20]
 8008c3a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	899b      	ldrh	r3, [r3, #12]
 8008c40:	001c      	movs	r4, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	699a      	ldr	r2, [r3, #24]
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	899b      	ldrh	r3, [r3, #12]
 8008c4a:	0019      	movs	r1, r3
 8008c4c:	0010      	movs	r0, r2
 8008c4e:	f7f7 fafd 	bl	800024c <__aeabi_uidivmod>
 8008c52:	000b      	movs	r3, r1
 8008c54:	1ae3      	subs	r3, r4, r3
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d901      	bls.n	8008c64 <f_write+0x2a2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3330      	adds	r3, #48	; 0x30
 8008c68:	001c      	movs	r4, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	899b      	ldrh	r3, [r3, #12]
 8008c72:	0019      	movs	r1, r3
 8008c74:	0010      	movs	r0, r2
 8008c76:	f7f7 fae9 	bl	800024c <__aeabi_uidivmod>
 8008c7a:	000b      	movs	r3, r1
 8008c7c:	18e3      	adds	r3, r4, r3
 8008c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c80:	69f9      	ldr	r1, [r7, #28]
 8008c82:	0018      	movs	r0, r3
 8008c84:	f7fd fa2c 	bl	80060e0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	7d1b      	ldrb	r3, [r3, #20]
 8008c8c:	2280      	movs	r2, #128	; 0x80
 8008c8e:	4252      	negs	r2, r2
 8008c90:	4313      	orrs	r3, r2
 8008c92:	b2da      	uxtb	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	18d3      	adds	r3, r2, r3
 8008c9e:	61fb      	str	r3, [r7, #28]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	699a      	ldr	r2, [r3, #24]
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	18d2      	adds	r2, r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	619a      	str	r2, [r3, #24]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	68d9      	ldr	r1, [r3, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	699a      	ldr	r2, [r3, #24]
 8008cb4:	000b      	movs	r3, r1
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d200      	bcs.n	8008cbc <f_write+0x2fa>
 8008cba:	0013      	movs	r3, r2
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	60d3      	str	r3, [r2, #12]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	18d2      	adds	r2, r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	601a      	str	r2, [r3, #0]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d000      	beq.n	8008cdc <f_write+0x31a>
 8008cda:	e6af      	b.n	8008a3c <f_write+0x7a>
 8008cdc:	e000      	b.n	8008ce0 <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cde:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	7d1b      	ldrb	r3, [r3, #20]
 8008ce4:	2240      	movs	r2, #64	; 0x40
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	b00c      	add	sp, #48	; 0x30
 8008cf6:	bdb0      	pop	{r4, r5, r7, pc}

08008cf8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008cf8:	b5b0      	push	{r4, r5, r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2517      	movs	r5, #23
 8008d04:	197c      	adds	r4, r7, r5
 8008d06:	2208      	movs	r2, #8
 8008d08:	18ba      	adds	r2, r7, r2
 8008d0a:	0011      	movs	r1, r2
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f7ff fbcb 	bl	80084a8 <validate>
 8008d12:	0003      	movs	r3, r0
 8008d14:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008d16:	197b      	adds	r3, r7, r5
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d16e      	bne.n	8008dfc <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	7d1b      	ldrb	r3, [r3, #20]
 8008d22:	001a      	movs	r2, r3
 8008d24:	2340      	movs	r3, #64	; 0x40
 8008d26:	4013      	ands	r3, r2
 8008d28:	d068      	beq.n	8008dfc <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	7d1b      	ldrb	r3, [r3, #20]
 8008d2e:	b25b      	sxtb	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	da14      	bge.n	8008d5e <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	7858      	ldrb	r0, [r3, #1]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3330      	adds	r3, #48	; 0x30
 8008d3c:	0019      	movs	r1, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1a      	ldr	r2, [r3, #32]
 8008d42:	2301      	movs	r3, #1
 8008d44:	f7fd f8f8 	bl	8005f38 <disk_write>
 8008d48:	1e03      	subs	r3, r0, #0
 8008d4a:	d001      	beq.n	8008d50 <f_sync+0x58>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e058      	b.n	8008e02 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	7d1b      	ldrb	r3, [r3, #20]
 8008d54:	227f      	movs	r2, #127	; 0x7f
 8008d56:	4013      	ands	r3, r2
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008d5e:	f7fd f805 	bl	8005d6c <get_fattime>
 8008d62:	0003      	movs	r3, r0
 8008d64:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	2517      	movs	r5, #23
 8008d6e:	197c      	adds	r4, r7, r5
 8008d70:	0019      	movs	r1, r3
 8008d72:	0010      	movs	r0, r2
 8008d74:	f7fd fbdc 	bl	8006530 <move_window>
 8008d78:	0003      	movs	r3, r0
 8008d7a:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 8008d7c:	002c      	movs	r4, r5
 8008d7e:	193b      	adds	r3, r7, r4
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d13a      	bne.n	8008dfc <f_sync+0x104>
					dir = fp->dir_ptr;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	330b      	adds	r3, #11
 8008d90:	781a      	ldrb	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	330b      	adds	r3, #11
 8008d96:	2120      	movs	r1, #32
 8008d98:	430a      	orrs	r2, r1
 8008d9a:	b2d2      	uxtb	r2, r2
 8008d9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6818      	ldr	r0, [r3, #0]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	0019      	movs	r1, r3
 8008daa:	f7fe f9cd 	bl	8007148 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	331c      	adds	r3, #28
 8008db2:	001a      	movs	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	0019      	movs	r1, r3
 8008dba:	0010      	movs	r0, r2
 8008dbc:	f7fd f966 	bl	800608c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3316      	adds	r3, #22
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	0011      	movs	r1, r2
 8008dc8:	0018      	movs	r0, r3
 8008dca:	f7fd f95f 	bl	800608c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3312      	adds	r3, #18
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f7fd f93b 	bl	8006050 <st_word>
					fs->wflag = 1;
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	193c      	adds	r4, r7, r4
 8008de4:	0018      	movs	r0, r3
 8008de6:	f7fd fbd9 	bl	800659c <sync_fs>
 8008dea:	0003      	movs	r3, r0
 8008dec:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7d1b      	ldrb	r3, [r3, #20]
 8008df2:	2240      	movs	r2, #64	; 0x40
 8008df4:	4393      	bics	r3, r2
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008dfc:	2317      	movs	r3, #23
 8008dfe:	18fb      	adds	r3, r7, r3
 8008e00:	781b      	ldrb	r3, [r3, #0]
}
 8008e02:	0018      	movs	r0, r3
 8008e04:	46bd      	mov	sp, r7
 8008e06:	b006      	add	sp, #24
 8008e08:	bdb0      	pop	{r4, r5, r7, pc}

08008e0a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008e0a:	b5b0      	push	{r4, r5, r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008e12:	250f      	movs	r5, #15
 8008e14:	197c      	adds	r4, r7, r5
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f7ff ff6d 	bl	8008cf8 <f_sync>
 8008e1e:	0003      	movs	r3, r0
 8008e20:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8008e22:	197b      	adds	r3, r7, r5
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d11c      	bne.n	8008e64 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	197c      	adds	r4, r7, r5
 8008e2e:	2208      	movs	r2, #8
 8008e30:	18ba      	adds	r2, r7, r2
 8008e32:	0011      	movs	r1, r2
 8008e34:	0018      	movs	r0, r3
 8008e36:	f7ff fb37 	bl	80084a8 <validate>
 8008e3a:	0003      	movs	r3, r0
 8008e3c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008e3e:	197b      	adds	r3, r7, r5
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10e      	bne.n	8008e64 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	197c      	adds	r4, r7, r5
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f7fd fabd 	bl	80063cc <dec_lock>
 8008e52:	0003      	movs	r3, r0
 8008e54:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8008e56:	197b      	adds	r3, r7, r5
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d102      	bne.n	8008e64 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008e64:	230f      	movs	r3, #15
 8008e66:	18fb      	adds	r3, r7, r3
 8008e68:	781b      	ldrb	r3, [r3, #0]
}
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	b004      	add	sp, #16
 8008e70:	bdb0      	pop	{r4, r5, r7, pc}

08008e72 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	000a      	movs	r2, r1
 8008e7c:	1cfb      	adds	r3, r7, #3
 8008e7e:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008e80:	1cfb      	adds	r3, r7, #3
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2b0a      	cmp	r3, #10
 8008e86:	d104      	bne.n	8008e92 <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	210d      	movs	r1, #13
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f7ff fff0 	bl	8008e72 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	db26      	blt.n	8008eec <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	60fa      	str	r2, [r7, #12]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	18d3      	adds	r3, r2, r3
 8008ea8:	1cfa      	adds	r2, r7, #3
 8008eaa:	7812      	ldrb	r2, [r2, #0]
 8008eac:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b3c      	cmp	r3, #60	; 0x3c
 8008eb2:	dd12      	ble.n	8008eda <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	330c      	adds	r3, #12
 8008ebc:	0019      	movs	r1, r3
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	2308      	movs	r3, #8
 8008ec2:	18fb      	adds	r3, r7, r3
 8008ec4:	f7ff fd7d 	bl	80089c2 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d101      	bne.n	8008ed4 <putc_bfd+0x62>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	e001      	b.n	8008ed8 <putc_bfd+0x66>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	425b      	negs	r3, r3
 8008ed8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	609a      	str	r2, [r3, #8]
 8008eea:	e000      	b.n	8008eee <putc_bfd+0x7c>
	if (i < 0) return;
 8008eec:	46c0      	nop			; (mov r8, r8)
}
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	b004      	add	sp, #16
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	db15      	blt.n	8008f30 <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6818      	ldr	r0, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	330c      	adds	r3, #12
 8008f0c:	0019      	movs	r1, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	001a      	movs	r2, r3
 8008f14:	230c      	movs	r3, #12
 8008f16:	18fb      	adds	r3, r7, r3
 8008f18:	f7ff fd53 	bl	80089c2 <f_write>
 8008f1c:	1e03      	subs	r3, r0, #0
 8008f1e:	d107      	bne.n	8008f30 <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d102      	bne.n	8008f30 <putc_flush+0x3c>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	e001      	b.n	8008f34 <putc_flush+0x40>
	return EOF;
 8008f30:	2301      	movs	r3, #1
 8008f32:	425b      	negs	r3, r3
}
 8008f34:	0018      	movs	r0, r3
 8008f36:	46bd      	mov	sp, r7
 8008f38:	b004      	add	sp, #16
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	605a      	str	r2, [r3, #4]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685a      	ldr	r2, [r3, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	609a      	str	r2, [r3, #8]
}
 8008f5a:	46c0      	nop			; (mov r8, r8)
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	b002      	add	sp, #8
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b096      	sub	sp, #88	; 0x58
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	230c      	movs	r3, #12
 8008f70:	18fb      	adds	r3, r7, r3
 8008f72:	0011      	movs	r1, r2
 8008f74:	0018      	movs	r0, r3
 8008f76:	f7ff ffe1 	bl	8008f3c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008f7a:	e009      	b.n	8008f90 <f_puts+0x2e>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	607a      	str	r2, [r7, #4]
 8008f82:	781a      	ldrb	r2, [r3, #0]
 8008f84:	230c      	movs	r3, #12
 8008f86:	18fb      	adds	r3, r7, r3
 8008f88:	0011      	movs	r1, r2
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f7ff ff71 	bl	8008e72 <putc_bfd>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1f1      	bne.n	8008f7c <f_puts+0x1a>
	return putc_flush(&pb);
 8008f98:	230c      	movs	r3, #12
 8008f9a:	18fb      	adds	r3, r7, r3
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	f7ff ffa9 	bl	8008ef4 <putc_flush>
 8008fa2:	0003      	movs	r3, r0
}
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	b016      	add	sp, #88	; 0x58
 8008faa:	bd80      	pop	{r7, pc}

08008fac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008fac:	b590      	push	{r4, r7, lr}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	1dfb      	adds	r3, r7, #7
 8008fb8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8008fba:	2417      	movs	r4, #23
 8008fbc:	193b      	adds	r3, r7, r4
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8008fc2:	2016      	movs	r0, #22
 8008fc4:	183b      	adds	r3, r7, r0
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8008fca:	4b21      	ldr	r3, [pc, #132]	; (8009050 <FATFS_LinkDriverEx+0xa4>)
 8008fcc:	7a5b      	ldrb	r3, [r3, #9]
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d136      	bne.n	8009042 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008fd4:	4b1e      	ldr	r3, [pc, #120]	; (8009050 <FATFS_LinkDriverEx+0xa4>)
 8008fd6:	7a5b      	ldrb	r3, [r3, #9]
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	001a      	movs	r2, r3
 8008fdc:	4b1c      	ldr	r3, [pc, #112]	; (8009050 <FATFS_LinkDriverEx+0xa4>)
 8008fde:	2100      	movs	r1, #0
 8008fe0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008fe2:	4b1b      	ldr	r3, [pc, #108]	; (8009050 <FATFS_LinkDriverEx+0xa4>)
 8008fe4:	7a5b      	ldrb	r3, [r3, #9]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	4a19      	ldr	r2, [pc, #100]	; (8009050 <FATFS_LinkDriverEx+0xa4>)
 8008fea:	009b      	lsls	r3, r3, #2
 8008fec:	18d3      	adds	r3, r2, r3
 8008fee:	3304      	adds	r3, #4
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8008ff4:	4b16      	ldr	r3, [pc, #88]	; (8009050 <FATFS_LinkDriverEx+0xa4>)
 8008ff6:	7a5b      	ldrb	r3, [r3, #9]
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	001a      	movs	r2, r3
 8008ffc:	4b14      	ldr	r3, [pc, #80]	; (8009050 <FATFS_LinkDriverEx+0xa4>)
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	1dfa      	adds	r2, r7, #7
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009006:	4b12      	ldr	r3, [pc, #72]	; (8009050 <FATFS_LinkDriverEx+0xa4>)
 8009008:	7a5b      	ldrb	r3, [r3, #9]
 800900a:	b2db      	uxtb	r3, r3
 800900c:	1c5a      	adds	r2, r3, #1
 800900e:	b2d1      	uxtb	r1, r2
 8009010:	4a0f      	ldr	r2, [pc, #60]	; (8009050 <FATFS_LinkDriverEx+0xa4>)
 8009012:	7251      	strb	r1, [r2, #9]
 8009014:	183a      	adds	r2, r7, r0
 8009016:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8009018:	183b      	adds	r3, r7, r0
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	3330      	adds	r3, #48	; 0x30
 800901e:	b2da      	uxtb	r2, r3
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	3301      	adds	r3, #1
 8009028:	223a      	movs	r2, #58	; 0x3a
 800902a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	3302      	adds	r3, #2
 8009030:	222f      	movs	r2, #47	; 0x2f
 8009032:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	3303      	adds	r3, #3
 8009038:	2200      	movs	r2, #0
 800903a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800903c:	193b      	adds	r3, r7, r4
 800903e:	2200      	movs	r2, #0
 8009040:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009042:	2317      	movs	r3, #23
 8009044:	18fb      	adds	r3, r7, r3
 8009046:	781b      	ldrb	r3, [r3, #0]
}
 8009048:	0018      	movs	r0, r3
 800904a:	46bd      	mov	sp, r7
 800904c:	b007      	add	sp, #28
 800904e:	bd90      	pop	{r4, r7, pc}
 8009050:	20000518 	.word	0x20000518

08009054 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	0018      	movs	r0, r3
 8009066:	f7ff ffa1 	bl	8008fac <FATFS_LinkDriverEx>
 800906a:	0003      	movs	r3, r0
}
 800906c:	0018      	movs	r0, r3
 800906e:	46bd      	mov	sp, r7
 8009070:	b002      	add	sp, #8
 8009072:	bd80      	pop	{r7, pc}

08009074 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	0002      	movs	r2, r0
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	1dbb      	adds	r3, r7, #6
 8009080:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009082:	1dbb      	adds	r3, r7, #6
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	2b7f      	cmp	r3, #127	; 0x7f
 8009088:	d805      	bhi.n	8009096 <ff_convert+0x22>
		c = chr;
 800908a:	230e      	movs	r3, #14
 800908c:	18fb      	adds	r3, r7, r3
 800908e:	1dba      	adds	r2, r7, #6
 8009090:	8812      	ldrh	r2, [r2, #0]
 8009092:	801a      	strh	r2, [r3, #0]
 8009094:	e037      	b.n	8009106 <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d010      	beq.n	80090be <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800909c:	1dbb      	adds	r3, r7, #6
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	2bff      	cmp	r3, #255	; 0xff
 80090a2:	d807      	bhi.n	80090b4 <ff_convert+0x40>
 80090a4:	1dbb      	adds	r3, r7, #6
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	3b80      	subs	r3, #128	; 0x80
 80090aa:	001a      	movs	r2, r3
 80090ac:	4b19      	ldr	r3, [pc, #100]	; (8009114 <ff_convert+0xa0>)
 80090ae:	0052      	lsls	r2, r2, #1
 80090b0:	5ad2      	ldrh	r2, [r2, r3]
 80090b2:	e000      	b.n	80090b6 <ff_convert+0x42>
 80090b4:	2200      	movs	r2, #0
 80090b6:	230e      	movs	r3, #14
 80090b8:	18fb      	adds	r3, r7, r3
 80090ba:	801a      	strh	r2, [r3, #0]
 80090bc:	e023      	b.n	8009106 <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80090be:	230e      	movs	r3, #14
 80090c0:	18fb      	adds	r3, r7, r3
 80090c2:	2200      	movs	r2, #0
 80090c4:	801a      	strh	r2, [r3, #0]
 80090c6:	e00e      	b.n	80090e6 <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 80090c8:	210e      	movs	r1, #14
 80090ca:	187b      	adds	r3, r7, r1
 80090cc:	881a      	ldrh	r2, [r3, #0]
 80090ce:	4b11      	ldr	r3, [pc, #68]	; (8009114 <ff_convert+0xa0>)
 80090d0:	0052      	lsls	r2, r2, #1
 80090d2:	5ad3      	ldrh	r3, [r2, r3]
 80090d4:	1dba      	adds	r2, r7, #6
 80090d6:	8812      	ldrh	r2, [r2, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d00a      	beq.n	80090f2 <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 80090dc:	187b      	adds	r3, r7, r1
 80090de:	881a      	ldrh	r2, [r3, #0]
 80090e0:	187b      	adds	r3, r7, r1
 80090e2:	3201      	adds	r2, #1
 80090e4:	801a      	strh	r2, [r3, #0]
 80090e6:	230e      	movs	r3, #14
 80090e8:	18fb      	adds	r3, r7, r3
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	2b7f      	cmp	r3, #127	; 0x7f
 80090ee:	d9eb      	bls.n	80090c8 <ff_convert+0x54>
 80090f0:	e000      	b.n	80090f4 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 80090f2:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 80090f4:	210e      	movs	r1, #14
 80090f6:	187b      	adds	r3, r7, r1
 80090f8:	881b      	ldrh	r3, [r3, #0]
 80090fa:	3380      	adds	r3, #128	; 0x80
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	187b      	adds	r3, r7, r1
 8009100:	21ff      	movs	r1, #255	; 0xff
 8009102:	400a      	ands	r2, r1
 8009104:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 8009106:	230e      	movs	r3, #14
 8009108:	18fb      	adds	r3, r7, r3
 800910a:	881b      	ldrh	r3, [r3, #0]
}
 800910c:	0018      	movs	r0, r3
 800910e:	46bd      	mov	sp, r7
 8009110:	b004      	add	sp, #16
 8009112:	bd80      	pop	{r7, pc}
 8009114:	0800de44 	.word	0x0800de44

08009118 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009118:	b5b0      	push	{r4, r5, r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	0002      	movs	r2, r0
 8009120:	1dbb      	adds	r3, r7, #6
 8009122:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009124:	1dbb      	adds	r3, r7, #6
 8009126:	881a      	ldrh	r2, [r3, #0]
 8009128:	2380      	movs	r3, #128	; 0x80
 800912a:	015b      	lsls	r3, r3, #5
 800912c:	429a      	cmp	r2, r3
 800912e:	d201      	bcs.n	8009134 <ff_wtoupper+0x1c>
 8009130:	4b4d      	ldr	r3, [pc, #308]	; (8009268 <ff_wtoupper+0x150>)
 8009132:	e000      	b.n	8009136 <ff_wtoupper+0x1e>
 8009134:	4b4d      	ldr	r3, [pc, #308]	; (800926c <ff_wtoupper+0x154>)
 8009136:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	1c9a      	adds	r2, r3, #2
 800913c:	617a      	str	r2, [r7, #20]
 800913e:	2412      	movs	r4, #18
 8009140:	193a      	adds	r2, r7, r4
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 8009146:	193b      	adds	r3, r7, r4
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d100      	bne.n	8009150 <ff_wtoupper+0x38>
 800914e:	e084      	b.n	800925a <ff_wtoupper+0x142>
 8009150:	1dba      	adds	r2, r7, #6
 8009152:	193b      	adds	r3, r7, r4
 8009154:	8812      	ldrh	r2, [r2, #0]
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	429a      	cmp	r2, r3
 800915a:	d200      	bcs.n	800915e <ff_wtoupper+0x46>
 800915c:	e07d      	b.n	800925a <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	1c9a      	adds	r2, r3, #2
 8009162:	617a      	str	r2, [r7, #20]
 8009164:	2010      	movs	r0, #16
 8009166:	183a      	adds	r2, r7, r0
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	8013      	strh	r3, [r2, #0]
 800916c:	250e      	movs	r5, #14
 800916e:	197b      	adds	r3, r7, r5
 8009170:	183a      	adds	r2, r7, r0
 8009172:	8812      	ldrh	r2, [r2, #0]
 8009174:	0a12      	lsrs	r2, r2, #8
 8009176:	801a      	strh	r2, [r3, #0]
 8009178:	183b      	adds	r3, r7, r0
 800917a:	183a      	adds	r2, r7, r0
 800917c:	8812      	ldrh	r2, [r2, #0]
 800917e:	21ff      	movs	r1, #255	; 0xff
 8009180:	400a      	ands	r2, r1
 8009182:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 8009184:	1dbb      	adds	r3, r7, #6
 8009186:	881a      	ldrh	r2, [r3, #0]
 8009188:	193b      	adds	r3, r7, r4
 800918a:	8819      	ldrh	r1, [r3, #0]
 800918c:	183b      	adds	r3, r7, r0
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	18cb      	adds	r3, r1, r3
 8009192:	429a      	cmp	r2, r3
 8009194:	da52      	bge.n	800923c <ff_wtoupper+0x124>
			switch (cmd) {
 8009196:	197b      	adds	r3, r7, r5
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	2b08      	cmp	r3, #8
 800919c:	d85c      	bhi.n	8009258 <ff_wtoupper+0x140>
 800919e:	009a      	lsls	r2, r3, #2
 80091a0:	4b33      	ldr	r3, [pc, #204]	; (8009270 <ff_wtoupper+0x158>)
 80091a2:	18d3      	adds	r3, r2, r3
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80091a8:	1dbb      	adds	r3, r7, #6
 80091aa:	881a      	ldrh	r2, [r3, #0]
 80091ac:	2312      	movs	r3, #18
 80091ae:	18fb      	adds	r3, r7, r3
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	18d2      	adds	r2, r2, r3
 80091ba:	1dbb      	adds	r3, r7, #6
 80091bc:	8812      	ldrh	r2, [r2, #0]
 80091be:	801a      	strh	r2, [r3, #0]
 80091c0:	e03b      	b.n	800923a <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80091c2:	1dba      	adds	r2, r7, #6
 80091c4:	2312      	movs	r3, #18
 80091c6:	18fb      	adds	r3, r7, r3
 80091c8:	8812      	ldrh	r2, [r2, #0]
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	2201      	movs	r2, #1
 80091d2:	4013      	ands	r3, r2
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	1dbb      	adds	r3, r7, #6
 80091d8:	1db9      	adds	r1, r7, #6
 80091da:	8809      	ldrh	r1, [r1, #0]
 80091dc:	1a8a      	subs	r2, r1, r2
 80091de:	801a      	strh	r2, [r3, #0]
 80091e0:	e02b      	b.n	800923a <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 80091e2:	1dbb      	adds	r3, r7, #6
 80091e4:	1dba      	adds	r2, r7, #6
 80091e6:	8812      	ldrh	r2, [r2, #0]
 80091e8:	3a10      	subs	r2, #16
 80091ea:	801a      	strh	r2, [r3, #0]
 80091ec:	e025      	b.n	800923a <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80091ee:	1dbb      	adds	r3, r7, #6
 80091f0:	1dba      	adds	r2, r7, #6
 80091f2:	8812      	ldrh	r2, [r2, #0]
 80091f4:	3a20      	subs	r2, #32
 80091f6:	801a      	strh	r2, [r3, #0]
 80091f8:	e01f      	b.n	800923a <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80091fa:	1dbb      	adds	r3, r7, #6
 80091fc:	1dba      	adds	r2, r7, #6
 80091fe:	8812      	ldrh	r2, [r2, #0]
 8009200:	3a30      	subs	r2, #48	; 0x30
 8009202:	801a      	strh	r2, [r3, #0]
 8009204:	e019      	b.n	800923a <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009206:	1dbb      	adds	r3, r7, #6
 8009208:	1dba      	adds	r2, r7, #6
 800920a:	8812      	ldrh	r2, [r2, #0]
 800920c:	3a1a      	subs	r2, #26
 800920e:	801a      	strh	r2, [r3, #0]
 8009210:	e013      	b.n	800923a <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009212:	1dbb      	adds	r3, r7, #6
 8009214:	1dba      	adds	r2, r7, #6
 8009216:	8812      	ldrh	r2, [r2, #0]
 8009218:	3208      	adds	r2, #8
 800921a:	801a      	strh	r2, [r3, #0]
 800921c:	e00d      	b.n	800923a <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 800921e:	1dbb      	adds	r3, r7, #6
 8009220:	1dba      	adds	r2, r7, #6
 8009222:	8812      	ldrh	r2, [r2, #0]
 8009224:	3a50      	subs	r2, #80	; 0x50
 8009226:	801a      	strh	r2, [r3, #0]
 8009228:	e007      	b.n	800923a <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800922a:	1dbb      	adds	r3, r7, #6
 800922c:	1dba      	adds	r2, r7, #6
 800922e:	8812      	ldrh	r2, [r2, #0]
 8009230:	4910      	ldr	r1, [pc, #64]	; (8009274 <ff_wtoupper+0x15c>)
 8009232:	468c      	mov	ip, r1
 8009234:	4462      	add	r2, ip
 8009236:	801a      	strh	r2, [r3, #0]
 8009238:	46c0      	nop			; (mov r8, r8)
			}
			break;
 800923a:	e00d      	b.n	8009258 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 800923c:	230e      	movs	r3, #14
 800923e:	18fb      	adds	r3, r7, r3
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d000      	beq.n	8009248 <ff_wtoupper+0x130>
 8009246:	e777      	b.n	8009138 <ff_wtoupper+0x20>
 8009248:	2310      	movs	r3, #16
 800924a:	18fb      	adds	r3, r7, r3
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	18d3      	adds	r3, r2, r3
 8009254:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009256:	e76f      	b.n	8009138 <ff_wtoupper+0x20>
			break;
 8009258:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 800925a:	1dbb      	adds	r3, r7, #6
 800925c:	881b      	ldrh	r3, [r3, #0]
}
 800925e:	0018      	movs	r0, r3
 8009260:	46bd      	mov	sp, r7
 8009262:	b006      	add	sp, #24
 8009264:	bdb0      	pop	{r4, r5, r7, pc}
 8009266:	46c0      	nop			; (mov r8, r8)
 8009268:	0800df68 	.word	0x0800df68
 800926c:	0800e15c 	.word	0x0800e15c
 8009270:	0800df44 	.word	0x0800df44
 8009274:	ffffe3a0 	.word	0xffffe3a0

08009278 <__cvt>:
 8009278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800927a:	001e      	movs	r6, r3
 800927c:	2300      	movs	r3, #0
 800927e:	0014      	movs	r4, r2
 8009280:	b08b      	sub	sp, #44	; 0x2c
 8009282:	429e      	cmp	r6, r3
 8009284:	da04      	bge.n	8009290 <__cvt+0x18>
 8009286:	2180      	movs	r1, #128	; 0x80
 8009288:	0609      	lsls	r1, r1, #24
 800928a:	1873      	adds	r3, r6, r1
 800928c:	001e      	movs	r6, r3
 800928e:	232d      	movs	r3, #45	; 0x2d
 8009290:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009292:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009294:	7013      	strb	r3, [r2, #0]
 8009296:	2320      	movs	r3, #32
 8009298:	2203      	movs	r2, #3
 800929a:	439f      	bics	r7, r3
 800929c:	2f46      	cmp	r7, #70	; 0x46
 800929e:	d007      	beq.n	80092b0 <__cvt+0x38>
 80092a0:	003b      	movs	r3, r7
 80092a2:	3b45      	subs	r3, #69	; 0x45
 80092a4:	4259      	negs	r1, r3
 80092a6:	414b      	adcs	r3, r1
 80092a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80092aa:	3a01      	subs	r2, #1
 80092ac:	18cb      	adds	r3, r1, r3
 80092ae:	9310      	str	r3, [sp, #64]	; 0x40
 80092b0:	ab09      	add	r3, sp, #36	; 0x24
 80092b2:	9304      	str	r3, [sp, #16]
 80092b4:	ab08      	add	r3, sp, #32
 80092b6:	9303      	str	r3, [sp, #12]
 80092b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80092ba:	9200      	str	r2, [sp, #0]
 80092bc:	9302      	str	r3, [sp, #8]
 80092be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092c0:	0022      	movs	r2, r4
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	0033      	movs	r3, r6
 80092c6:	f001 f8e7 	bl	800a498 <_dtoa_r>
 80092ca:	0005      	movs	r5, r0
 80092cc:	2f47      	cmp	r7, #71	; 0x47
 80092ce:	d102      	bne.n	80092d6 <__cvt+0x5e>
 80092d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092d2:	07db      	lsls	r3, r3, #31
 80092d4:	d528      	bpl.n	8009328 <__cvt+0xb0>
 80092d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092d8:	18eb      	adds	r3, r5, r3
 80092da:	9307      	str	r3, [sp, #28]
 80092dc:	2f46      	cmp	r7, #70	; 0x46
 80092de:	d114      	bne.n	800930a <__cvt+0x92>
 80092e0:	782b      	ldrb	r3, [r5, #0]
 80092e2:	2b30      	cmp	r3, #48	; 0x30
 80092e4:	d10c      	bne.n	8009300 <__cvt+0x88>
 80092e6:	2200      	movs	r2, #0
 80092e8:	2300      	movs	r3, #0
 80092ea:	0020      	movs	r0, r4
 80092ec:	0031      	movs	r1, r6
 80092ee:	f7f7 f8ad 	bl	800044c <__aeabi_dcmpeq>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d104      	bne.n	8009300 <__cvt+0x88>
 80092f6:	2301      	movs	r3, #1
 80092f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092fa:	1a9b      	subs	r3, r3, r2
 80092fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092fe:	6013      	str	r3, [r2, #0]
 8009300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009302:	9a07      	ldr	r2, [sp, #28]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	18d3      	adds	r3, r2, r3
 8009308:	9307      	str	r3, [sp, #28]
 800930a:	2200      	movs	r2, #0
 800930c:	2300      	movs	r3, #0
 800930e:	0020      	movs	r0, r4
 8009310:	0031      	movs	r1, r6
 8009312:	f7f7 f89b 	bl	800044c <__aeabi_dcmpeq>
 8009316:	2800      	cmp	r0, #0
 8009318:	d001      	beq.n	800931e <__cvt+0xa6>
 800931a:	9b07      	ldr	r3, [sp, #28]
 800931c:	9309      	str	r3, [sp, #36]	; 0x24
 800931e:	2230      	movs	r2, #48	; 0x30
 8009320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009322:	9907      	ldr	r1, [sp, #28]
 8009324:	428b      	cmp	r3, r1
 8009326:	d306      	bcc.n	8009336 <__cvt+0xbe>
 8009328:	0028      	movs	r0, r5
 800932a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800932c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800932e:	1b5b      	subs	r3, r3, r5
 8009330:	6013      	str	r3, [r2, #0]
 8009332:	b00b      	add	sp, #44	; 0x2c
 8009334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009336:	1c59      	adds	r1, r3, #1
 8009338:	9109      	str	r1, [sp, #36]	; 0x24
 800933a:	701a      	strb	r2, [r3, #0]
 800933c:	e7f0      	b.n	8009320 <__cvt+0xa8>

0800933e <__exponent>:
 800933e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009340:	1c83      	adds	r3, r0, #2
 8009342:	b087      	sub	sp, #28
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	0005      	movs	r5, r0
 8009348:	000c      	movs	r4, r1
 800934a:	232b      	movs	r3, #43	; 0x2b
 800934c:	7002      	strb	r2, [r0, #0]
 800934e:	2900      	cmp	r1, #0
 8009350:	da01      	bge.n	8009356 <__exponent+0x18>
 8009352:	424c      	negs	r4, r1
 8009354:	3302      	adds	r3, #2
 8009356:	706b      	strb	r3, [r5, #1]
 8009358:	2c09      	cmp	r4, #9
 800935a:	dd2f      	ble.n	80093bc <__exponent+0x7e>
 800935c:	270a      	movs	r7, #10
 800935e:	ab04      	add	r3, sp, #16
 8009360:	1dde      	adds	r6, r3, #7
 8009362:	0020      	movs	r0, r4
 8009364:	0039      	movs	r1, r7
 8009366:	9601      	str	r6, [sp, #4]
 8009368:	f7f7 f85a 	bl	8000420 <__aeabi_idivmod>
 800936c:	3e01      	subs	r6, #1
 800936e:	3130      	adds	r1, #48	; 0x30
 8009370:	0020      	movs	r0, r4
 8009372:	7031      	strb	r1, [r6, #0]
 8009374:	0039      	movs	r1, r7
 8009376:	9402      	str	r4, [sp, #8]
 8009378:	f7f6 ff6c 	bl	8000254 <__divsi3>
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	0004      	movs	r4, r0
 8009380:	2b63      	cmp	r3, #99	; 0x63
 8009382:	dcee      	bgt.n	8009362 <__exponent+0x24>
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	3430      	adds	r4, #48	; 0x30
 8009388:	1e9a      	subs	r2, r3, #2
 800938a:	0013      	movs	r3, r2
 800938c:	9903      	ldr	r1, [sp, #12]
 800938e:	7014      	strb	r4, [r2, #0]
 8009390:	a804      	add	r0, sp, #16
 8009392:	3007      	adds	r0, #7
 8009394:	4298      	cmp	r0, r3
 8009396:	d80c      	bhi.n	80093b2 <__exponent+0x74>
 8009398:	2300      	movs	r3, #0
 800939a:	4282      	cmp	r2, r0
 800939c:	d804      	bhi.n	80093a8 <__exponent+0x6a>
 800939e:	aa04      	add	r2, sp, #16
 80093a0:	3309      	adds	r3, #9
 80093a2:	189b      	adds	r3, r3, r2
 80093a4:	9a01      	ldr	r2, [sp, #4]
 80093a6:	1a9b      	subs	r3, r3, r2
 80093a8:	9a03      	ldr	r2, [sp, #12]
 80093aa:	18d3      	adds	r3, r2, r3
 80093ac:	1b58      	subs	r0, r3, r5
 80093ae:	b007      	add	sp, #28
 80093b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093b2:	7818      	ldrb	r0, [r3, #0]
 80093b4:	3301      	adds	r3, #1
 80093b6:	7008      	strb	r0, [r1, #0]
 80093b8:	3101      	adds	r1, #1
 80093ba:	e7e9      	b.n	8009390 <__exponent+0x52>
 80093bc:	2330      	movs	r3, #48	; 0x30
 80093be:	3430      	adds	r4, #48	; 0x30
 80093c0:	70ab      	strb	r3, [r5, #2]
 80093c2:	70ec      	strb	r4, [r5, #3]
 80093c4:	1d2b      	adds	r3, r5, #4
 80093c6:	e7f1      	b.n	80093ac <__exponent+0x6e>

080093c8 <_printf_float>:
 80093c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093ca:	b095      	sub	sp, #84	; 0x54
 80093cc:	000c      	movs	r4, r1
 80093ce:	9208      	str	r2, [sp, #32]
 80093d0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80093d2:	9309      	str	r3, [sp, #36]	; 0x24
 80093d4:	0007      	movs	r7, r0
 80093d6:	f000 ff41 	bl	800a25c <_localeconv_r>
 80093da:	6803      	ldr	r3, [r0, #0]
 80093dc:	0018      	movs	r0, r3
 80093de:	930c      	str	r3, [sp, #48]	; 0x30
 80093e0:	f7f6 fe92 	bl	8000108 <strlen>
 80093e4:	2300      	movs	r3, #0
 80093e6:	9312      	str	r3, [sp, #72]	; 0x48
 80093e8:	7e23      	ldrb	r3, [r4, #24]
 80093ea:	2207      	movs	r2, #7
 80093ec:	930a      	str	r3, [sp, #40]	; 0x28
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	900d      	str	r0, [sp, #52]	; 0x34
 80093f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80093f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093f6:	682b      	ldr	r3, [r5, #0]
 80093f8:	05c9      	lsls	r1, r1, #23
 80093fa:	d547      	bpl.n	800948c <_printf_float+0xc4>
 80093fc:	189b      	adds	r3, r3, r2
 80093fe:	4393      	bics	r3, r2
 8009400:	001a      	movs	r2, r3
 8009402:	3208      	adds	r2, #8
 8009404:	602a      	str	r2, [r5, #0]
 8009406:	681e      	ldr	r6, [r3, #0]
 8009408:	685d      	ldr	r5, [r3, #4]
 800940a:	0032      	movs	r2, r6
 800940c:	002b      	movs	r3, r5
 800940e:	64a2      	str	r2, [r4, #72]	; 0x48
 8009410:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009412:	2201      	movs	r2, #1
 8009414:	006b      	lsls	r3, r5, #1
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	930e      	str	r3, [sp, #56]	; 0x38
 800941a:	0030      	movs	r0, r6
 800941c:	4bab      	ldr	r3, [pc, #684]	; (80096cc <_printf_float+0x304>)
 800941e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009420:	4252      	negs	r2, r2
 8009422:	f7f9 f8cb 	bl	80025bc <__aeabi_dcmpun>
 8009426:	2800      	cmp	r0, #0
 8009428:	d132      	bne.n	8009490 <_printf_float+0xc8>
 800942a:	2201      	movs	r2, #1
 800942c:	0030      	movs	r0, r6
 800942e:	4ba7      	ldr	r3, [pc, #668]	; (80096cc <_printf_float+0x304>)
 8009430:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009432:	4252      	negs	r2, r2
 8009434:	f7f7 f81a 	bl	800046c <__aeabi_dcmple>
 8009438:	2800      	cmp	r0, #0
 800943a:	d129      	bne.n	8009490 <_printf_float+0xc8>
 800943c:	2200      	movs	r2, #0
 800943e:	2300      	movs	r3, #0
 8009440:	0030      	movs	r0, r6
 8009442:	0029      	movs	r1, r5
 8009444:	f7f7 f808 	bl	8000458 <__aeabi_dcmplt>
 8009448:	2800      	cmp	r0, #0
 800944a:	d003      	beq.n	8009454 <_printf_float+0x8c>
 800944c:	0023      	movs	r3, r4
 800944e:	222d      	movs	r2, #45	; 0x2d
 8009450:	3343      	adds	r3, #67	; 0x43
 8009452:	701a      	strb	r2, [r3, #0]
 8009454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009456:	4d9e      	ldr	r5, [pc, #632]	; (80096d0 <_printf_float+0x308>)
 8009458:	2b47      	cmp	r3, #71	; 0x47
 800945a:	d900      	bls.n	800945e <_printf_float+0x96>
 800945c:	4d9d      	ldr	r5, [pc, #628]	; (80096d4 <_printf_float+0x30c>)
 800945e:	2303      	movs	r3, #3
 8009460:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009462:	6123      	str	r3, [r4, #16]
 8009464:	3301      	adds	r3, #1
 8009466:	439a      	bics	r2, r3
 8009468:	2300      	movs	r3, #0
 800946a:	6022      	str	r2, [r4, #0]
 800946c:	930b      	str	r3, [sp, #44]	; 0x2c
 800946e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009470:	0021      	movs	r1, r4
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	0038      	movs	r0, r7
 8009476:	9b08      	ldr	r3, [sp, #32]
 8009478:	aa13      	add	r2, sp, #76	; 0x4c
 800947a:	f000 f9fb 	bl	8009874 <_printf_common>
 800947e:	3001      	adds	r0, #1
 8009480:	d000      	beq.n	8009484 <_printf_float+0xbc>
 8009482:	e0a3      	b.n	80095cc <_printf_float+0x204>
 8009484:	2001      	movs	r0, #1
 8009486:	4240      	negs	r0, r0
 8009488:	b015      	add	sp, #84	; 0x54
 800948a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800948c:	3307      	adds	r3, #7
 800948e:	e7b6      	b.n	80093fe <_printf_float+0x36>
 8009490:	0032      	movs	r2, r6
 8009492:	002b      	movs	r3, r5
 8009494:	0030      	movs	r0, r6
 8009496:	0029      	movs	r1, r5
 8009498:	f7f9 f890 	bl	80025bc <__aeabi_dcmpun>
 800949c:	2800      	cmp	r0, #0
 800949e:	d00b      	beq.n	80094b8 <_printf_float+0xf0>
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	da03      	bge.n	80094ac <_printf_float+0xe4>
 80094a4:	0023      	movs	r3, r4
 80094a6:	222d      	movs	r2, #45	; 0x2d
 80094a8:	3343      	adds	r3, #67	; 0x43
 80094aa:	701a      	strb	r2, [r3, #0]
 80094ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ae:	4d8a      	ldr	r5, [pc, #552]	; (80096d8 <_printf_float+0x310>)
 80094b0:	2b47      	cmp	r3, #71	; 0x47
 80094b2:	d9d4      	bls.n	800945e <_printf_float+0x96>
 80094b4:	4d89      	ldr	r5, [pc, #548]	; (80096dc <_printf_float+0x314>)
 80094b6:	e7d2      	b.n	800945e <_printf_float+0x96>
 80094b8:	2220      	movs	r2, #32
 80094ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 80094bc:	6863      	ldr	r3, [r4, #4]
 80094be:	4391      	bics	r1, r2
 80094c0:	910e      	str	r1, [sp, #56]	; 0x38
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	d14a      	bne.n	800955c <_printf_float+0x194>
 80094c6:	3307      	adds	r3, #7
 80094c8:	6063      	str	r3, [r4, #4]
 80094ca:	2380      	movs	r3, #128	; 0x80
 80094cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094ce:	00db      	lsls	r3, r3, #3
 80094d0:	4313      	orrs	r3, r2
 80094d2:	2200      	movs	r2, #0
 80094d4:	9206      	str	r2, [sp, #24]
 80094d6:	aa12      	add	r2, sp, #72	; 0x48
 80094d8:	9205      	str	r2, [sp, #20]
 80094da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094dc:	6023      	str	r3, [r4, #0]
 80094de:	9204      	str	r2, [sp, #16]
 80094e0:	aa11      	add	r2, sp, #68	; 0x44
 80094e2:	9203      	str	r2, [sp, #12]
 80094e4:	2223      	movs	r2, #35	; 0x23
 80094e6:	a908      	add	r1, sp, #32
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	6863      	ldr	r3, [r4, #4]
 80094ec:	1852      	adds	r2, r2, r1
 80094ee:	9202      	str	r2, [sp, #8]
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	0032      	movs	r2, r6
 80094f4:	002b      	movs	r3, r5
 80094f6:	0038      	movs	r0, r7
 80094f8:	f7ff febe 	bl	8009278 <__cvt>
 80094fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094fe:	0005      	movs	r5, r0
 8009500:	2b47      	cmp	r3, #71	; 0x47
 8009502:	d109      	bne.n	8009518 <_printf_float+0x150>
 8009504:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009506:	1cda      	adds	r2, r3, #3
 8009508:	db02      	blt.n	8009510 <_printf_float+0x148>
 800950a:	6862      	ldr	r2, [r4, #4]
 800950c:	4293      	cmp	r3, r2
 800950e:	dd49      	ble.n	80095a4 <_printf_float+0x1dc>
 8009510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009512:	3b02      	subs	r3, #2
 8009514:	b2db      	uxtb	r3, r3
 8009516:	930a      	str	r3, [sp, #40]	; 0x28
 8009518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800951a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800951c:	2b65      	cmp	r3, #101	; 0x65
 800951e:	d824      	bhi.n	800956a <_printf_float+0x1a2>
 8009520:	0020      	movs	r0, r4
 8009522:	001a      	movs	r2, r3
 8009524:	3901      	subs	r1, #1
 8009526:	3050      	adds	r0, #80	; 0x50
 8009528:	9111      	str	r1, [sp, #68]	; 0x44
 800952a:	f7ff ff08 	bl	800933e <__exponent>
 800952e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009530:	900b      	str	r0, [sp, #44]	; 0x2c
 8009532:	1813      	adds	r3, r2, r0
 8009534:	6123      	str	r3, [r4, #16]
 8009536:	2a01      	cmp	r2, #1
 8009538:	dc02      	bgt.n	8009540 <_printf_float+0x178>
 800953a:	6822      	ldr	r2, [r4, #0]
 800953c:	07d2      	lsls	r2, r2, #31
 800953e:	d501      	bpl.n	8009544 <_printf_float+0x17c>
 8009540:	3301      	adds	r3, #1
 8009542:	6123      	str	r3, [r4, #16]
 8009544:	2323      	movs	r3, #35	; 0x23
 8009546:	aa08      	add	r2, sp, #32
 8009548:	189b      	adds	r3, r3, r2
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d100      	bne.n	8009552 <_printf_float+0x18a>
 8009550:	e78d      	b.n	800946e <_printf_float+0xa6>
 8009552:	0023      	movs	r3, r4
 8009554:	222d      	movs	r2, #45	; 0x2d
 8009556:	3343      	adds	r3, #67	; 0x43
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	e788      	b.n	800946e <_printf_float+0xa6>
 800955c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800955e:	2a47      	cmp	r2, #71	; 0x47
 8009560:	d1b3      	bne.n	80094ca <_printf_float+0x102>
 8009562:	2b00      	cmp	r3, #0
 8009564:	d1b1      	bne.n	80094ca <_printf_float+0x102>
 8009566:	3301      	adds	r3, #1
 8009568:	e7ae      	b.n	80094c8 <_printf_float+0x100>
 800956a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956c:	2b66      	cmp	r3, #102	; 0x66
 800956e:	d11b      	bne.n	80095a8 <_printf_float+0x1e0>
 8009570:	6863      	ldr	r3, [r4, #4]
 8009572:	2900      	cmp	r1, #0
 8009574:	dd09      	ble.n	800958a <_printf_float+0x1c2>
 8009576:	6121      	str	r1, [r4, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <_printf_float+0x1ba>
 800957c:	6822      	ldr	r2, [r4, #0]
 800957e:	07d2      	lsls	r2, r2, #31
 8009580:	d50b      	bpl.n	800959a <_printf_float+0x1d2>
 8009582:	3301      	adds	r3, #1
 8009584:	185b      	adds	r3, r3, r1
 8009586:	6123      	str	r3, [r4, #16]
 8009588:	e007      	b.n	800959a <_printf_float+0x1d2>
 800958a:	2b00      	cmp	r3, #0
 800958c:	d103      	bne.n	8009596 <_printf_float+0x1ce>
 800958e:	2201      	movs	r2, #1
 8009590:	6821      	ldr	r1, [r4, #0]
 8009592:	4211      	tst	r1, r2
 8009594:	d000      	beq.n	8009598 <_printf_float+0x1d0>
 8009596:	1c9a      	adds	r2, r3, #2
 8009598:	6122      	str	r2, [r4, #16]
 800959a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800959c:	65a3      	str	r3, [r4, #88]	; 0x58
 800959e:	2300      	movs	r3, #0
 80095a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80095a2:	e7cf      	b.n	8009544 <_printf_float+0x17c>
 80095a4:	2367      	movs	r3, #103	; 0x67
 80095a6:	930a      	str	r3, [sp, #40]	; 0x28
 80095a8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80095aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095ac:	4299      	cmp	r1, r3
 80095ae:	db06      	blt.n	80095be <_printf_float+0x1f6>
 80095b0:	6823      	ldr	r3, [r4, #0]
 80095b2:	6121      	str	r1, [r4, #16]
 80095b4:	07db      	lsls	r3, r3, #31
 80095b6:	d5f0      	bpl.n	800959a <_printf_float+0x1d2>
 80095b8:	3101      	adds	r1, #1
 80095ba:	6121      	str	r1, [r4, #16]
 80095bc:	e7ed      	b.n	800959a <_printf_float+0x1d2>
 80095be:	2201      	movs	r2, #1
 80095c0:	2900      	cmp	r1, #0
 80095c2:	dc01      	bgt.n	80095c8 <_printf_float+0x200>
 80095c4:	1892      	adds	r2, r2, r2
 80095c6:	1a52      	subs	r2, r2, r1
 80095c8:	189b      	adds	r3, r3, r2
 80095ca:	e7dc      	b.n	8009586 <_printf_float+0x1be>
 80095cc:	6822      	ldr	r2, [r4, #0]
 80095ce:	0553      	lsls	r3, r2, #21
 80095d0:	d408      	bmi.n	80095e4 <_printf_float+0x21c>
 80095d2:	6923      	ldr	r3, [r4, #16]
 80095d4:	002a      	movs	r2, r5
 80095d6:	0038      	movs	r0, r7
 80095d8:	9908      	ldr	r1, [sp, #32]
 80095da:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095dc:	47a8      	blx	r5
 80095de:	3001      	adds	r0, #1
 80095e0:	d12a      	bne.n	8009638 <_printf_float+0x270>
 80095e2:	e74f      	b.n	8009484 <_printf_float+0xbc>
 80095e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e6:	2b65      	cmp	r3, #101	; 0x65
 80095e8:	d800      	bhi.n	80095ec <_printf_float+0x224>
 80095ea:	e0ec      	b.n	80097c6 <_printf_float+0x3fe>
 80095ec:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80095ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80095f0:	2200      	movs	r2, #0
 80095f2:	2300      	movs	r3, #0
 80095f4:	f7f6 ff2a 	bl	800044c <__aeabi_dcmpeq>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d034      	beq.n	8009666 <_printf_float+0x29e>
 80095fc:	2301      	movs	r3, #1
 80095fe:	0038      	movs	r0, r7
 8009600:	4a37      	ldr	r2, [pc, #220]	; (80096e0 <_printf_float+0x318>)
 8009602:	9908      	ldr	r1, [sp, #32]
 8009604:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009606:	47a8      	blx	r5
 8009608:	3001      	adds	r0, #1
 800960a:	d100      	bne.n	800960e <_printf_float+0x246>
 800960c:	e73a      	b.n	8009484 <_printf_float+0xbc>
 800960e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009610:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009612:	429a      	cmp	r2, r3
 8009614:	db02      	blt.n	800961c <_printf_float+0x254>
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	07db      	lsls	r3, r3, #31
 800961a:	d50d      	bpl.n	8009638 <_printf_float+0x270>
 800961c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800961e:	0038      	movs	r0, r7
 8009620:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009624:	9908      	ldr	r1, [sp, #32]
 8009626:	47a8      	blx	r5
 8009628:	2500      	movs	r5, #0
 800962a:	3001      	adds	r0, #1
 800962c:	d100      	bne.n	8009630 <_printf_float+0x268>
 800962e:	e729      	b.n	8009484 <_printf_float+0xbc>
 8009630:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009632:	3b01      	subs	r3, #1
 8009634:	42ab      	cmp	r3, r5
 8009636:	dc0a      	bgt.n	800964e <_printf_float+0x286>
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	079b      	lsls	r3, r3, #30
 800963c:	d500      	bpl.n	8009640 <_printf_float+0x278>
 800963e:	e116      	b.n	800986e <_printf_float+0x4a6>
 8009640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009642:	68e0      	ldr	r0, [r4, #12]
 8009644:	4298      	cmp	r0, r3
 8009646:	db00      	blt.n	800964a <_printf_float+0x282>
 8009648:	e71e      	b.n	8009488 <_printf_float+0xc0>
 800964a:	0018      	movs	r0, r3
 800964c:	e71c      	b.n	8009488 <_printf_float+0xc0>
 800964e:	0022      	movs	r2, r4
 8009650:	2301      	movs	r3, #1
 8009652:	0038      	movs	r0, r7
 8009654:	9908      	ldr	r1, [sp, #32]
 8009656:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009658:	321a      	adds	r2, #26
 800965a:	47b0      	blx	r6
 800965c:	3001      	adds	r0, #1
 800965e:	d100      	bne.n	8009662 <_printf_float+0x29a>
 8009660:	e710      	b.n	8009484 <_printf_float+0xbc>
 8009662:	3501      	adds	r5, #1
 8009664:	e7e4      	b.n	8009630 <_printf_float+0x268>
 8009666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009668:	2b00      	cmp	r3, #0
 800966a:	dc3b      	bgt.n	80096e4 <_printf_float+0x31c>
 800966c:	2301      	movs	r3, #1
 800966e:	0038      	movs	r0, r7
 8009670:	4a1b      	ldr	r2, [pc, #108]	; (80096e0 <_printf_float+0x318>)
 8009672:	9908      	ldr	r1, [sp, #32]
 8009674:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009676:	47b0      	blx	r6
 8009678:	3001      	adds	r0, #1
 800967a:	d100      	bne.n	800967e <_printf_float+0x2b6>
 800967c:	e702      	b.n	8009484 <_printf_float+0xbc>
 800967e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009680:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009682:	4313      	orrs	r3, r2
 8009684:	d102      	bne.n	800968c <_printf_float+0x2c4>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	07db      	lsls	r3, r3, #31
 800968a:	d5d5      	bpl.n	8009638 <_printf_float+0x270>
 800968c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800968e:	0038      	movs	r0, r7
 8009690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009692:	9908      	ldr	r1, [sp, #32]
 8009694:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009696:	47b0      	blx	r6
 8009698:	2300      	movs	r3, #0
 800969a:	3001      	adds	r0, #1
 800969c:	d100      	bne.n	80096a0 <_printf_float+0x2d8>
 800969e:	e6f1      	b.n	8009484 <_printf_float+0xbc>
 80096a0:	930a      	str	r3, [sp, #40]	; 0x28
 80096a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096a6:	425b      	negs	r3, r3
 80096a8:	4293      	cmp	r3, r2
 80096aa:	dc01      	bgt.n	80096b0 <_printf_float+0x2e8>
 80096ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096ae:	e791      	b.n	80095d4 <_printf_float+0x20c>
 80096b0:	0022      	movs	r2, r4
 80096b2:	2301      	movs	r3, #1
 80096b4:	0038      	movs	r0, r7
 80096b6:	9908      	ldr	r1, [sp, #32]
 80096b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80096ba:	321a      	adds	r2, #26
 80096bc:	47b0      	blx	r6
 80096be:	3001      	adds	r0, #1
 80096c0:	d100      	bne.n	80096c4 <_printf_float+0x2fc>
 80096c2:	e6df      	b.n	8009484 <_printf_float+0xbc>
 80096c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c6:	3301      	adds	r3, #1
 80096c8:	e7ea      	b.n	80096a0 <_printf_float+0x2d8>
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	7fefffff 	.word	0x7fefffff
 80096d0:	0800e218 	.word	0x0800e218
 80096d4:	0800e21c 	.word	0x0800e21c
 80096d8:	0800e220 	.word	0x0800e220
 80096dc:	0800e224 	.word	0x0800e224
 80096e0:	0800e228 	.word	0x0800e228
 80096e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096e8:	920a      	str	r2, [sp, #40]	; 0x28
 80096ea:	429a      	cmp	r2, r3
 80096ec:	dd00      	ble.n	80096f0 <_printf_float+0x328>
 80096ee:	930a      	str	r3, [sp, #40]	; 0x28
 80096f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dc3d      	bgt.n	8009772 <_printf_float+0x3aa>
 80096f6:	2300      	movs	r3, #0
 80096f8:	930e      	str	r3, [sp, #56]	; 0x38
 80096fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096fc:	43db      	mvns	r3, r3
 80096fe:	17db      	asrs	r3, r3, #31
 8009700:	930f      	str	r3, [sp, #60]	; 0x3c
 8009702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009704:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009706:	930b      	str	r3, [sp, #44]	; 0x2c
 8009708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800970a:	4013      	ands	r3, r2
 800970c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009712:	4293      	cmp	r3, r2
 8009714:	dc36      	bgt.n	8009784 <_printf_float+0x3bc>
 8009716:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009718:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800971a:	429a      	cmp	r2, r3
 800971c:	db40      	blt.n	80097a0 <_printf_float+0x3d8>
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	07db      	lsls	r3, r3, #31
 8009722:	d43d      	bmi.n	80097a0 <_printf_float+0x3d8>
 8009724:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8009726:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800972a:	1af3      	subs	r3, r6, r3
 800972c:	1ab6      	subs	r6, r6, r2
 800972e:	429e      	cmp	r6, r3
 8009730:	dd00      	ble.n	8009734 <_printf_float+0x36c>
 8009732:	001e      	movs	r6, r3
 8009734:	2e00      	cmp	r6, #0
 8009736:	dc3c      	bgt.n	80097b2 <_printf_float+0x3ea>
 8009738:	2300      	movs	r3, #0
 800973a:	930a      	str	r3, [sp, #40]	; 0x28
 800973c:	43f3      	mvns	r3, r6
 800973e:	17db      	asrs	r3, r3, #31
 8009740:	930b      	str	r3, [sp, #44]	; 0x2c
 8009742:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800974a:	4032      	ands	r2, r6
 800974c:	1a9b      	subs	r3, r3, r2
 800974e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009750:	4293      	cmp	r3, r2
 8009752:	dc00      	bgt.n	8009756 <_printf_float+0x38e>
 8009754:	e770      	b.n	8009638 <_printf_float+0x270>
 8009756:	0022      	movs	r2, r4
 8009758:	2301      	movs	r3, #1
 800975a:	0038      	movs	r0, r7
 800975c:	9908      	ldr	r1, [sp, #32]
 800975e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009760:	321a      	adds	r2, #26
 8009762:	47a8      	blx	r5
 8009764:	3001      	adds	r0, #1
 8009766:	d100      	bne.n	800976a <_printf_float+0x3a2>
 8009768:	e68c      	b.n	8009484 <_printf_float+0xbc>
 800976a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976c:	3301      	adds	r3, #1
 800976e:	930a      	str	r3, [sp, #40]	; 0x28
 8009770:	e7e7      	b.n	8009742 <_printf_float+0x37a>
 8009772:	002a      	movs	r2, r5
 8009774:	0038      	movs	r0, r7
 8009776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009778:	9908      	ldr	r1, [sp, #32]
 800977a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800977c:	47b0      	blx	r6
 800977e:	3001      	adds	r0, #1
 8009780:	d1b9      	bne.n	80096f6 <_printf_float+0x32e>
 8009782:	e67f      	b.n	8009484 <_printf_float+0xbc>
 8009784:	0022      	movs	r2, r4
 8009786:	2301      	movs	r3, #1
 8009788:	0038      	movs	r0, r7
 800978a:	9908      	ldr	r1, [sp, #32]
 800978c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800978e:	321a      	adds	r2, #26
 8009790:	47b0      	blx	r6
 8009792:	3001      	adds	r0, #1
 8009794:	d100      	bne.n	8009798 <_printf_float+0x3d0>
 8009796:	e675      	b.n	8009484 <_printf_float+0xbc>
 8009798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800979a:	3301      	adds	r3, #1
 800979c:	930e      	str	r3, [sp, #56]	; 0x38
 800979e:	e7b0      	b.n	8009702 <_printf_float+0x33a>
 80097a0:	0038      	movs	r0, r7
 80097a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097a6:	9908      	ldr	r1, [sp, #32]
 80097a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80097aa:	47b0      	blx	r6
 80097ac:	3001      	adds	r0, #1
 80097ae:	d1b9      	bne.n	8009724 <_printf_float+0x35c>
 80097b0:	e668      	b.n	8009484 <_printf_float+0xbc>
 80097b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097b4:	0038      	movs	r0, r7
 80097b6:	18ea      	adds	r2, r5, r3
 80097b8:	9908      	ldr	r1, [sp, #32]
 80097ba:	0033      	movs	r3, r6
 80097bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80097be:	47a8      	blx	r5
 80097c0:	3001      	adds	r0, #1
 80097c2:	d1b9      	bne.n	8009738 <_printf_float+0x370>
 80097c4:	e65e      	b.n	8009484 <_printf_float+0xbc>
 80097c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	dc02      	bgt.n	80097d2 <_printf_float+0x40a>
 80097cc:	2301      	movs	r3, #1
 80097ce:	421a      	tst	r2, r3
 80097d0:	d03a      	beq.n	8009848 <_printf_float+0x480>
 80097d2:	2301      	movs	r3, #1
 80097d4:	002a      	movs	r2, r5
 80097d6:	0038      	movs	r0, r7
 80097d8:	9908      	ldr	r1, [sp, #32]
 80097da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80097dc:	47b0      	blx	r6
 80097de:	3001      	adds	r0, #1
 80097e0:	d100      	bne.n	80097e4 <_printf_float+0x41c>
 80097e2:	e64f      	b.n	8009484 <_printf_float+0xbc>
 80097e4:	0038      	movs	r0, r7
 80097e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097ea:	9908      	ldr	r1, [sp, #32]
 80097ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80097ee:	47b0      	blx	r6
 80097f0:	3001      	adds	r0, #1
 80097f2:	d100      	bne.n	80097f6 <_printf_float+0x42e>
 80097f4:	e646      	b.n	8009484 <_printf_float+0xbc>
 80097f6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80097f8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80097fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097fc:	2200      	movs	r2, #0
 80097fe:	001e      	movs	r6, r3
 8009800:	2300      	movs	r3, #0
 8009802:	f7f6 fe23 	bl	800044c <__aeabi_dcmpeq>
 8009806:	2800      	cmp	r0, #0
 8009808:	d11c      	bne.n	8009844 <_printf_float+0x47c>
 800980a:	0033      	movs	r3, r6
 800980c:	1c6a      	adds	r2, r5, #1
 800980e:	3b01      	subs	r3, #1
 8009810:	0038      	movs	r0, r7
 8009812:	9908      	ldr	r1, [sp, #32]
 8009814:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009816:	47a8      	blx	r5
 8009818:	3001      	adds	r0, #1
 800981a:	d10f      	bne.n	800983c <_printf_float+0x474>
 800981c:	e632      	b.n	8009484 <_printf_float+0xbc>
 800981e:	0022      	movs	r2, r4
 8009820:	2301      	movs	r3, #1
 8009822:	0038      	movs	r0, r7
 8009824:	9908      	ldr	r1, [sp, #32]
 8009826:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009828:	321a      	adds	r2, #26
 800982a:	47b0      	blx	r6
 800982c:	3001      	adds	r0, #1
 800982e:	d100      	bne.n	8009832 <_printf_float+0x46a>
 8009830:	e628      	b.n	8009484 <_printf_float+0xbc>
 8009832:	3501      	adds	r5, #1
 8009834:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009836:	3b01      	subs	r3, #1
 8009838:	42ab      	cmp	r3, r5
 800983a:	dcf0      	bgt.n	800981e <_printf_float+0x456>
 800983c:	0022      	movs	r2, r4
 800983e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009840:	3250      	adds	r2, #80	; 0x50
 8009842:	e6c8      	b.n	80095d6 <_printf_float+0x20e>
 8009844:	2500      	movs	r5, #0
 8009846:	e7f5      	b.n	8009834 <_printf_float+0x46c>
 8009848:	002a      	movs	r2, r5
 800984a:	e7e1      	b.n	8009810 <_printf_float+0x448>
 800984c:	0022      	movs	r2, r4
 800984e:	2301      	movs	r3, #1
 8009850:	0038      	movs	r0, r7
 8009852:	9908      	ldr	r1, [sp, #32]
 8009854:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009856:	3219      	adds	r2, #25
 8009858:	47b0      	blx	r6
 800985a:	3001      	adds	r0, #1
 800985c:	d100      	bne.n	8009860 <_printf_float+0x498>
 800985e:	e611      	b.n	8009484 <_printf_float+0xbc>
 8009860:	3501      	adds	r5, #1
 8009862:	68e3      	ldr	r3, [r4, #12]
 8009864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009866:	1a9b      	subs	r3, r3, r2
 8009868:	42ab      	cmp	r3, r5
 800986a:	dcef      	bgt.n	800984c <_printf_float+0x484>
 800986c:	e6e8      	b.n	8009640 <_printf_float+0x278>
 800986e:	2500      	movs	r5, #0
 8009870:	e7f7      	b.n	8009862 <_printf_float+0x49a>
 8009872:	46c0      	nop			; (mov r8, r8)

08009874 <_printf_common>:
 8009874:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009876:	0016      	movs	r6, r2
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	688a      	ldr	r2, [r1, #8]
 800987c:	690b      	ldr	r3, [r1, #16]
 800987e:	000c      	movs	r4, r1
 8009880:	9000      	str	r0, [sp, #0]
 8009882:	4293      	cmp	r3, r2
 8009884:	da00      	bge.n	8009888 <_printf_common+0x14>
 8009886:	0013      	movs	r3, r2
 8009888:	0022      	movs	r2, r4
 800988a:	6033      	str	r3, [r6, #0]
 800988c:	3243      	adds	r2, #67	; 0x43
 800988e:	7812      	ldrb	r2, [r2, #0]
 8009890:	2a00      	cmp	r2, #0
 8009892:	d001      	beq.n	8009898 <_printf_common+0x24>
 8009894:	3301      	adds	r3, #1
 8009896:	6033      	str	r3, [r6, #0]
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	069b      	lsls	r3, r3, #26
 800989c:	d502      	bpl.n	80098a4 <_printf_common+0x30>
 800989e:	6833      	ldr	r3, [r6, #0]
 80098a0:	3302      	adds	r3, #2
 80098a2:	6033      	str	r3, [r6, #0]
 80098a4:	6822      	ldr	r2, [r4, #0]
 80098a6:	2306      	movs	r3, #6
 80098a8:	0015      	movs	r5, r2
 80098aa:	401d      	ands	r5, r3
 80098ac:	421a      	tst	r2, r3
 80098ae:	d027      	beq.n	8009900 <_printf_common+0x8c>
 80098b0:	0023      	movs	r3, r4
 80098b2:	3343      	adds	r3, #67	; 0x43
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	1e5a      	subs	r2, r3, #1
 80098b8:	4193      	sbcs	r3, r2
 80098ba:	6822      	ldr	r2, [r4, #0]
 80098bc:	0692      	lsls	r2, r2, #26
 80098be:	d430      	bmi.n	8009922 <_printf_common+0xae>
 80098c0:	0022      	movs	r2, r4
 80098c2:	9901      	ldr	r1, [sp, #4]
 80098c4:	9800      	ldr	r0, [sp, #0]
 80098c6:	9d08      	ldr	r5, [sp, #32]
 80098c8:	3243      	adds	r2, #67	; 0x43
 80098ca:	47a8      	blx	r5
 80098cc:	3001      	adds	r0, #1
 80098ce:	d025      	beq.n	800991c <_printf_common+0xa8>
 80098d0:	2206      	movs	r2, #6
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	2500      	movs	r5, #0
 80098d6:	4013      	ands	r3, r2
 80098d8:	2b04      	cmp	r3, #4
 80098da:	d105      	bne.n	80098e8 <_printf_common+0x74>
 80098dc:	6833      	ldr	r3, [r6, #0]
 80098de:	68e5      	ldr	r5, [r4, #12]
 80098e0:	1aed      	subs	r5, r5, r3
 80098e2:	43eb      	mvns	r3, r5
 80098e4:	17db      	asrs	r3, r3, #31
 80098e6:	401d      	ands	r5, r3
 80098e8:	68a3      	ldr	r3, [r4, #8]
 80098ea:	6922      	ldr	r2, [r4, #16]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	dd01      	ble.n	80098f4 <_printf_common+0x80>
 80098f0:	1a9b      	subs	r3, r3, r2
 80098f2:	18ed      	adds	r5, r5, r3
 80098f4:	2600      	movs	r6, #0
 80098f6:	42b5      	cmp	r5, r6
 80098f8:	d120      	bne.n	800993c <_printf_common+0xc8>
 80098fa:	2000      	movs	r0, #0
 80098fc:	e010      	b.n	8009920 <_printf_common+0xac>
 80098fe:	3501      	adds	r5, #1
 8009900:	68e3      	ldr	r3, [r4, #12]
 8009902:	6832      	ldr	r2, [r6, #0]
 8009904:	1a9b      	subs	r3, r3, r2
 8009906:	42ab      	cmp	r3, r5
 8009908:	ddd2      	ble.n	80098b0 <_printf_common+0x3c>
 800990a:	0022      	movs	r2, r4
 800990c:	2301      	movs	r3, #1
 800990e:	9901      	ldr	r1, [sp, #4]
 8009910:	9800      	ldr	r0, [sp, #0]
 8009912:	9f08      	ldr	r7, [sp, #32]
 8009914:	3219      	adds	r2, #25
 8009916:	47b8      	blx	r7
 8009918:	3001      	adds	r0, #1
 800991a:	d1f0      	bne.n	80098fe <_printf_common+0x8a>
 800991c:	2001      	movs	r0, #1
 800991e:	4240      	negs	r0, r0
 8009920:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009922:	2030      	movs	r0, #48	; 0x30
 8009924:	18e1      	adds	r1, r4, r3
 8009926:	3143      	adds	r1, #67	; 0x43
 8009928:	7008      	strb	r0, [r1, #0]
 800992a:	0021      	movs	r1, r4
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	3145      	adds	r1, #69	; 0x45
 8009930:	7809      	ldrb	r1, [r1, #0]
 8009932:	18a2      	adds	r2, r4, r2
 8009934:	3243      	adds	r2, #67	; 0x43
 8009936:	3302      	adds	r3, #2
 8009938:	7011      	strb	r1, [r2, #0]
 800993a:	e7c1      	b.n	80098c0 <_printf_common+0x4c>
 800993c:	0022      	movs	r2, r4
 800993e:	2301      	movs	r3, #1
 8009940:	9901      	ldr	r1, [sp, #4]
 8009942:	9800      	ldr	r0, [sp, #0]
 8009944:	9f08      	ldr	r7, [sp, #32]
 8009946:	321a      	adds	r2, #26
 8009948:	47b8      	blx	r7
 800994a:	3001      	adds	r0, #1
 800994c:	d0e6      	beq.n	800991c <_printf_common+0xa8>
 800994e:	3601      	adds	r6, #1
 8009950:	e7d1      	b.n	80098f6 <_printf_common+0x82>
	...

08009954 <_printf_i>:
 8009954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009956:	b08b      	sub	sp, #44	; 0x2c
 8009958:	9206      	str	r2, [sp, #24]
 800995a:	000a      	movs	r2, r1
 800995c:	3243      	adds	r2, #67	; 0x43
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	9005      	str	r0, [sp, #20]
 8009962:	9204      	str	r2, [sp, #16]
 8009964:	7e0a      	ldrb	r2, [r1, #24]
 8009966:	000c      	movs	r4, r1
 8009968:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800996a:	2a78      	cmp	r2, #120	; 0x78
 800996c:	d809      	bhi.n	8009982 <_printf_i+0x2e>
 800996e:	2a62      	cmp	r2, #98	; 0x62
 8009970:	d80b      	bhi.n	800998a <_printf_i+0x36>
 8009972:	2a00      	cmp	r2, #0
 8009974:	d100      	bne.n	8009978 <_printf_i+0x24>
 8009976:	e0be      	b.n	8009af6 <_printf_i+0x1a2>
 8009978:	497c      	ldr	r1, [pc, #496]	; (8009b6c <_printf_i+0x218>)
 800997a:	9103      	str	r1, [sp, #12]
 800997c:	2a58      	cmp	r2, #88	; 0x58
 800997e:	d100      	bne.n	8009982 <_printf_i+0x2e>
 8009980:	e093      	b.n	8009aaa <_printf_i+0x156>
 8009982:	0026      	movs	r6, r4
 8009984:	3642      	adds	r6, #66	; 0x42
 8009986:	7032      	strb	r2, [r6, #0]
 8009988:	e022      	b.n	80099d0 <_printf_i+0x7c>
 800998a:	0010      	movs	r0, r2
 800998c:	3863      	subs	r0, #99	; 0x63
 800998e:	2815      	cmp	r0, #21
 8009990:	d8f7      	bhi.n	8009982 <_printf_i+0x2e>
 8009992:	f7f6 fbcb 	bl	800012c <__gnu_thumb1_case_shi>
 8009996:	0016      	.short	0x0016
 8009998:	fff6001f 	.word	0xfff6001f
 800999c:	fff6fff6 	.word	0xfff6fff6
 80099a0:	001ffff6 	.word	0x001ffff6
 80099a4:	fff6fff6 	.word	0xfff6fff6
 80099a8:	fff6fff6 	.word	0xfff6fff6
 80099ac:	003600a3 	.word	0x003600a3
 80099b0:	fff60083 	.word	0xfff60083
 80099b4:	00b4fff6 	.word	0x00b4fff6
 80099b8:	0036fff6 	.word	0x0036fff6
 80099bc:	fff6fff6 	.word	0xfff6fff6
 80099c0:	0087      	.short	0x0087
 80099c2:	0026      	movs	r6, r4
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	3642      	adds	r6, #66	; 0x42
 80099c8:	1d11      	adds	r1, r2, #4
 80099ca:	6019      	str	r1, [r3, #0]
 80099cc:	6813      	ldr	r3, [r2, #0]
 80099ce:	7033      	strb	r3, [r6, #0]
 80099d0:	2301      	movs	r3, #1
 80099d2:	e0a2      	b.n	8009b1a <_printf_i+0x1c6>
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	6809      	ldr	r1, [r1, #0]
 80099d8:	1d02      	adds	r2, r0, #4
 80099da:	060d      	lsls	r5, r1, #24
 80099dc:	d50b      	bpl.n	80099f6 <_printf_i+0xa2>
 80099de:	6805      	ldr	r5, [r0, #0]
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	2d00      	cmp	r5, #0
 80099e4:	da03      	bge.n	80099ee <_printf_i+0x9a>
 80099e6:	232d      	movs	r3, #45	; 0x2d
 80099e8:	9a04      	ldr	r2, [sp, #16]
 80099ea:	426d      	negs	r5, r5
 80099ec:	7013      	strb	r3, [r2, #0]
 80099ee:	4b5f      	ldr	r3, [pc, #380]	; (8009b6c <_printf_i+0x218>)
 80099f0:	270a      	movs	r7, #10
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	e01b      	b.n	8009a2e <_printf_i+0xda>
 80099f6:	6805      	ldr	r5, [r0, #0]
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	0649      	lsls	r1, r1, #25
 80099fc:	d5f1      	bpl.n	80099e2 <_printf_i+0x8e>
 80099fe:	b22d      	sxth	r5, r5
 8009a00:	e7ef      	b.n	80099e2 <_printf_i+0x8e>
 8009a02:	680d      	ldr	r5, [r1, #0]
 8009a04:	6819      	ldr	r1, [r3, #0]
 8009a06:	1d08      	adds	r0, r1, #4
 8009a08:	6018      	str	r0, [r3, #0]
 8009a0a:	062e      	lsls	r6, r5, #24
 8009a0c:	d501      	bpl.n	8009a12 <_printf_i+0xbe>
 8009a0e:	680d      	ldr	r5, [r1, #0]
 8009a10:	e003      	b.n	8009a1a <_printf_i+0xc6>
 8009a12:	066d      	lsls	r5, r5, #25
 8009a14:	d5fb      	bpl.n	8009a0e <_printf_i+0xba>
 8009a16:	680d      	ldr	r5, [r1, #0]
 8009a18:	b2ad      	uxth	r5, r5
 8009a1a:	4b54      	ldr	r3, [pc, #336]	; (8009b6c <_printf_i+0x218>)
 8009a1c:	2708      	movs	r7, #8
 8009a1e:	9303      	str	r3, [sp, #12]
 8009a20:	2a6f      	cmp	r2, #111	; 0x6f
 8009a22:	d000      	beq.n	8009a26 <_printf_i+0xd2>
 8009a24:	3702      	adds	r7, #2
 8009a26:	0023      	movs	r3, r4
 8009a28:	2200      	movs	r2, #0
 8009a2a:	3343      	adds	r3, #67	; 0x43
 8009a2c:	701a      	strb	r2, [r3, #0]
 8009a2e:	6863      	ldr	r3, [r4, #4]
 8009a30:	60a3      	str	r3, [r4, #8]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	db03      	blt.n	8009a3e <_printf_i+0xea>
 8009a36:	2104      	movs	r1, #4
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	438a      	bics	r2, r1
 8009a3c:	6022      	str	r2, [r4, #0]
 8009a3e:	2d00      	cmp	r5, #0
 8009a40:	d102      	bne.n	8009a48 <_printf_i+0xf4>
 8009a42:	9e04      	ldr	r6, [sp, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00c      	beq.n	8009a62 <_printf_i+0x10e>
 8009a48:	9e04      	ldr	r6, [sp, #16]
 8009a4a:	0028      	movs	r0, r5
 8009a4c:	0039      	movs	r1, r7
 8009a4e:	f7f6 fbfd 	bl	800024c <__aeabi_uidivmod>
 8009a52:	9b03      	ldr	r3, [sp, #12]
 8009a54:	3e01      	subs	r6, #1
 8009a56:	5c5b      	ldrb	r3, [r3, r1]
 8009a58:	7033      	strb	r3, [r6, #0]
 8009a5a:	002b      	movs	r3, r5
 8009a5c:	0005      	movs	r5, r0
 8009a5e:	429f      	cmp	r7, r3
 8009a60:	d9f3      	bls.n	8009a4a <_printf_i+0xf6>
 8009a62:	2f08      	cmp	r7, #8
 8009a64:	d109      	bne.n	8009a7a <_printf_i+0x126>
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	07db      	lsls	r3, r3, #31
 8009a6a:	d506      	bpl.n	8009a7a <_printf_i+0x126>
 8009a6c:	6862      	ldr	r2, [r4, #4]
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	dc02      	bgt.n	8009a7a <_printf_i+0x126>
 8009a74:	2330      	movs	r3, #48	; 0x30
 8009a76:	3e01      	subs	r6, #1
 8009a78:	7033      	strb	r3, [r6, #0]
 8009a7a:	9b04      	ldr	r3, [sp, #16]
 8009a7c:	1b9b      	subs	r3, r3, r6
 8009a7e:	6123      	str	r3, [r4, #16]
 8009a80:	9b07      	ldr	r3, [sp, #28]
 8009a82:	0021      	movs	r1, r4
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	9805      	ldr	r0, [sp, #20]
 8009a88:	9b06      	ldr	r3, [sp, #24]
 8009a8a:	aa09      	add	r2, sp, #36	; 0x24
 8009a8c:	f7ff fef2 	bl	8009874 <_printf_common>
 8009a90:	3001      	adds	r0, #1
 8009a92:	d147      	bne.n	8009b24 <_printf_i+0x1d0>
 8009a94:	2001      	movs	r0, #1
 8009a96:	4240      	negs	r0, r0
 8009a98:	b00b      	add	sp, #44	; 0x2c
 8009a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	6809      	ldr	r1, [r1, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	6022      	str	r2, [r4, #0]
 8009aa4:	2278      	movs	r2, #120	; 0x78
 8009aa6:	4932      	ldr	r1, [pc, #200]	; (8009b70 <_printf_i+0x21c>)
 8009aa8:	9103      	str	r1, [sp, #12]
 8009aaa:	0021      	movs	r1, r4
 8009aac:	3145      	adds	r1, #69	; 0x45
 8009aae:	700a      	strb	r2, [r1, #0]
 8009ab0:	6819      	ldr	r1, [r3, #0]
 8009ab2:	6822      	ldr	r2, [r4, #0]
 8009ab4:	c920      	ldmia	r1!, {r5}
 8009ab6:	0610      	lsls	r0, r2, #24
 8009ab8:	d402      	bmi.n	8009ac0 <_printf_i+0x16c>
 8009aba:	0650      	lsls	r0, r2, #25
 8009abc:	d500      	bpl.n	8009ac0 <_printf_i+0x16c>
 8009abe:	b2ad      	uxth	r5, r5
 8009ac0:	6019      	str	r1, [r3, #0]
 8009ac2:	07d3      	lsls	r3, r2, #31
 8009ac4:	d502      	bpl.n	8009acc <_printf_i+0x178>
 8009ac6:	2320      	movs	r3, #32
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	2710      	movs	r7, #16
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	d1a9      	bne.n	8009a26 <_printf_i+0xd2>
 8009ad2:	2220      	movs	r2, #32
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	4393      	bics	r3, r2
 8009ad8:	6023      	str	r3, [r4, #0]
 8009ada:	e7a4      	b.n	8009a26 <_printf_i+0xd2>
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	680d      	ldr	r5, [r1, #0]
 8009ae0:	1d10      	adds	r0, r2, #4
 8009ae2:	6949      	ldr	r1, [r1, #20]
 8009ae4:	6018      	str	r0, [r3, #0]
 8009ae6:	6813      	ldr	r3, [r2, #0]
 8009ae8:	062e      	lsls	r6, r5, #24
 8009aea:	d501      	bpl.n	8009af0 <_printf_i+0x19c>
 8009aec:	6019      	str	r1, [r3, #0]
 8009aee:	e002      	b.n	8009af6 <_printf_i+0x1a2>
 8009af0:	066d      	lsls	r5, r5, #25
 8009af2:	d5fb      	bpl.n	8009aec <_printf_i+0x198>
 8009af4:	8019      	strh	r1, [r3, #0]
 8009af6:	2300      	movs	r3, #0
 8009af8:	9e04      	ldr	r6, [sp, #16]
 8009afa:	6123      	str	r3, [r4, #16]
 8009afc:	e7c0      	b.n	8009a80 <_printf_i+0x12c>
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	1d11      	adds	r1, r2, #4
 8009b02:	6019      	str	r1, [r3, #0]
 8009b04:	6816      	ldr	r6, [r2, #0]
 8009b06:	2100      	movs	r1, #0
 8009b08:	0030      	movs	r0, r6
 8009b0a:	6862      	ldr	r2, [r4, #4]
 8009b0c:	f000 fc25 	bl	800a35a <memchr>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d001      	beq.n	8009b18 <_printf_i+0x1c4>
 8009b14:	1b80      	subs	r0, r0, r6
 8009b16:	6060      	str	r0, [r4, #4]
 8009b18:	6863      	ldr	r3, [r4, #4]
 8009b1a:	6123      	str	r3, [r4, #16]
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	9a04      	ldr	r2, [sp, #16]
 8009b20:	7013      	strb	r3, [r2, #0]
 8009b22:	e7ad      	b.n	8009a80 <_printf_i+0x12c>
 8009b24:	0032      	movs	r2, r6
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	9906      	ldr	r1, [sp, #24]
 8009b2a:	9805      	ldr	r0, [sp, #20]
 8009b2c:	9d07      	ldr	r5, [sp, #28]
 8009b2e:	47a8      	blx	r5
 8009b30:	3001      	adds	r0, #1
 8009b32:	d0af      	beq.n	8009a94 <_printf_i+0x140>
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	079b      	lsls	r3, r3, #30
 8009b38:	d415      	bmi.n	8009b66 <_printf_i+0x212>
 8009b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3c:	68e0      	ldr	r0, [r4, #12]
 8009b3e:	4298      	cmp	r0, r3
 8009b40:	daaa      	bge.n	8009a98 <_printf_i+0x144>
 8009b42:	0018      	movs	r0, r3
 8009b44:	e7a8      	b.n	8009a98 <_printf_i+0x144>
 8009b46:	0022      	movs	r2, r4
 8009b48:	2301      	movs	r3, #1
 8009b4a:	9906      	ldr	r1, [sp, #24]
 8009b4c:	9805      	ldr	r0, [sp, #20]
 8009b4e:	9e07      	ldr	r6, [sp, #28]
 8009b50:	3219      	adds	r2, #25
 8009b52:	47b0      	blx	r6
 8009b54:	3001      	adds	r0, #1
 8009b56:	d09d      	beq.n	8009a94 <_printf_i+0x140>
 8009b58:	3501      	adds	r5, #1
 8009b5a:	68e3      	ldr	r3, [r4, #12]
 8009b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	dcf0      	bgt.n	8009b46 <_printf_i+0x1f2>
 8009b64:	e7e9      	b.n	8009b3a <_printf_i+0x1e6>
 8009b66:	2500      	movs	r5, #0
 8009b68:	e7f7      	b.n	8009b5a <_printf_i+0x206>
 8009b6a:	46c0      	nop			; (mov r8, r8)
 8009b6c:	0800e22a 	.word	0x0800e22a
 8009b70:	0800e23b 	.word	0x0800e23b

08009b74 <_scanf_float>:
 8009b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b76:	b08b      	sub	sp, #44	; 0x2c
 8009b78:	0016      	movs	r6, r2
 8009b7a:	9002      	str	r0, [sp, #8]
 8009b7c:	22ae      	movs	r2, #174	; 0xae
 8009b7e:	2000      	movs	r0, #0
 8009b80:	9307      	str	r3, [sp, #28]
 8009b82:	688b      	ldr	r3, [r1, #8]
 8009b84:	000f      	movs	r7, r1
 8009b86:	1e59      	subs	r1, r3, #1
 8009b88:	0052      	lsls	r2, r2, #1
 8009b8a:	9006      	str	r0, [sp, #24]
 8009b8c:	4291      	cmp	r1, r2
 8009b8e:	d905      	bls.n	8009b9c <_scanf_float+0x28>
 8009b90:	3b5e      	subs	r3, #94	; 0x5e
 8009b92:	3bff      	subs	r3, #255	; 0xff
 8009b94:	9306      	str	r3, [sp, #24]
 8009b96:	235e      	movs	r3, #94	; 0x5e
 8009b98:	33ff      	adds	r3, #255	; 0xff
 8009b9a:	60bb      	str	r3, [r7, #8]
 8009b9c:	23f0      	movs	r3, #240	; 0xf0
 8009b9e:	683a      	ldr	r2, [r7, #0]
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	603b      	str	r3, [r7, #0]
 8009ba6:	003b      	movs	r3, r7
 8009ba8:	2400      	movs	r4, #0
 8009baa:	331c      	adds	r3, #28
 8009bac:	001d      	movs	r5, r3
 8009bae:	9304      	str	r3, [sp, #16]
 8009bb0:	9403      	str	r4, [sp, #12]
 8009bb2:	9409      	str	r4, [sp, #36]	; 0x24
 8009bb4:	9408      	str	r4, [sp, #32]
 8009bb6:	9401      	str	r4, [sp, #4]
 8009bb8:	9405      	str	r4, [sp, #20]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	d00a      	beq.n	8009bd6 <_scanf_float+0x62>
 8009bc0:	6833      	ldr	r3, [r6, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	2b4e      	cmp	r3, #78	; 0x4e
 8009bc6:	d844      	bhi.n	8009c52 <_scanf_float+0xde>
 8009bc8:	0018      	movs	r0, r3
 8009bca:	2b40      	cmp	r3, #64	; 0x40
 8009bcc:	d82c      	bhi.n	8009c28 <_scanf_float+0xb4>
 8009bce:	382b      	subs	r0, #43	; 0x2b
 8009bd0:	b2c1      	uxtb	r1, r0
 8009bd2:	290e      	cmp	r1, #14
 8009bd4:	d92a      	bls.n	8009c2c <_scanf_float+0xb8>
 8009bd6:	9b01      	ldr	r3, [sp, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <_scanf_float+0x70>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	4aa3      	ldr	r2, [pc, #652]	; (8009e6c <_scanf_float+0x2f8>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	9b03      	ldr	r3, [sp, #12]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d900      	bls.n	8009bee <_scanf_float+0x7a>
 8009bec:	e0f9      	b.n	8009de2 <_scanf_float+0x26e>
 8009bee:	24be      	movs	r4, #190	; 0xbe
 8009bf0:	0064      	lsls	r4, r4, #1
 8009bf2:	9b04      	ldr	r3, [sp, #16]
 8009bf4:	429d      	cmp	r5, r3
 8009bf6:	d900      	bls.n	8009bfa <_scanf_float+0x86>
 8009bf8:	e0e9      	b.n	8009dce <_scanf_float+0x25a>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	9303      	str	r3, [sp, #12]
 8009bfe:	e183      	b.n	8009f08 <_scanf_float+0x394>
 8009c00:	0018      	movs	r0, r3
 8009c02:	3861      	subs	r0, #97	; 0x61
 8009c04:	280d      	cmp	r0, #13
 8009c06:	d8e6      	bhi.n	8009bd6 <_scanf_float+0x62>
 8009c08:	f7f6 fa90 	bl	800012c <__gnu_thumb1_case_shi>
 8009c0c:	ffe50083 	.word	0xffe50083
 8009c10:	ffe5ffe5 	.word	0xffe5ffe5
 8009c14:	00a200b6 	.word	0x00a200b6
 8009c18:	ffe5ffe5 	.word	0xffe5ffe5
 8009c1c:	ffe50089 	.word	0xffe50089
 8009c20:	ffe5ffe5 	.word	0xffe5ffe5
 8009c24:	0065ffe5 	.word	0x0065ffe5
 8009c28:	3841      	subs	r0, #65	; 0x41
 8009c2a:	e7eb      	b.n	8009c04 <_scanf_float+0x90>
 8009c2c:	280e      	cmp	r0, #14
 8009c2e:	d8d2      	bhi.n	8009bd6 <_scanf_float+0x62>
 8009c30:	f7f6 fa7c 	bl	800012c <__gnu_thumb1_case_shi>
 8009c34:	ffd1004b 	.word	0xffd1004b
 8009c38:	0098004b 	.word	0x0098004b
 8009c3c:	0020ffd1 	.word	0x0020ffd1
 8009c40:	00400040 	.word	0x00400040
 8009c44:	00400040 	.word	0x00400040
 8009c48:	00400040 	.word	0x00400040
 8009c4c:	00400040 	.word	0x00400040
 8009c50:	0040      	.short	0x0040
 8009c52:	2b6e      	cmp	r3, #110	; 0x6e
 8009c54:	d809      	bhi.n	8009c6a <_scanf_float+0xf6>
 8009c56:	2b60      	cmp	r3, #96	; 0x60
 8009c58:	d8d2      	bhi.n	8009c00 <_scanf_float+0x8c>
 8009c5a:	2b54      	cmp	r3, #84	; 0x54
 8009c5c:	d07d      	beq.n	8009d5a <_scanf_float+0x1e6>
 8009c5e:	2b59      	cmp	r3, #89	; 0x59
 8009c60:	d1b9      	bne.n	8009bd6 <_scanf_float+0x62>
 8009c62:	2c07      	cmp	r4, #7
 8009c64:	d1b7      	bne.n	8009bd6 <_scanf_float+0x62>
 8009c66:	2408      	movs	r4, #8
 8009c68:	e02c      	b.n	8009cc4 <_scanf_float+0x150>
 8009c6a:	2b74      	cmp	r3, #116	; 0x74
 8009c6c:	d075      	beq.n	8009d5a <_scanf_float+0x1e6>
 8009c6e:	2b79      	cmp	r3, #121	; 0x79
 8009c70:	d0f7      	beq.n	8009c62 <_scanf_float+0xee>
 8009c72:	e7b0      	b.n	8009bd6 <_scanf_float+0x62>
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	05c8      	lsls	r0, r1, #23
 8009c78:	d51c      	bpl.n	8009cb4 <_scanf_float+0x140>
 8009c7a:	2380      	movs	r3, #128	; 0x80
 8009c7c:	4399      	bics	r1, r3
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	6039      	str	r1, [r7, #0]
 8009c82:	3301      	adds	r3, #1
 8009c84:	9301      	str	r3, [sp, #4]
 8009c86:	9b06      	ldr	r3, [sp, #24]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <_scanf_float+0x120>
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	3201      	adds	r2, #1
 8009c90:	9306      	str	r3, [sp, #24]
 8009c92:	60ba      	str	r2, [r7, #8]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	60bb      	str	r3, [r7, #8]
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	613b      	str	r3, [r7, #16]
 8009ca0:	6873      	ldr	r3, [r6, #4]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	6073      	str	r3, [r6, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	dc00      	bgt.n	8009cac <_scanf_float+0x138>
 8009caa:	e086      	b.n	8009dba <_scanf_float+0x246>
 8009cac:	6833      	ldr	r3, [r6, #0]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	6033      	str	r3, [r6, #0]
 8009cb2:	e782      	b.n	8009bba <_scanf_float+0x46>
 8009cb4:	9a03      	ldr	r2, [sp, #12]
 8009cb6:	1912      	adds	r2, r2, r4
 8009cb8:	2a00      	cmp	r2, #0
 8009cba:	d18c      	bne.n	8009bd6 <_scanf_float+0x62>
 8009cbc:	683a      	ldr	r2, [r7, #0]
 8009cbe:	496c      	ldr	r1, [pc, #432]	; (8009e70 <_scanf_float+0x2fc>)
 8009cc0:	400a      	ands	r2, r1
 8009cc2:	603a      	str	r2, [r7, #0]
 8009cc4:	702b      	strb	r3, [r5, #0]
 8009cc6:	3501      	adds	r5, #1
 8009cc8:	e7e4      	b.n	8009c94 <_scanf_float+0x120>
 8009cca:	2180      	movs	r1, #128	; 0x80
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	420a      	tst	r2, r1
 8009cd0:	d081      	beq.n	8009bd6 <_scanf_float+0x62>
 8009cd2:	438a      	bics	r2, r1
 8009cd4:	e7f5      	b.n	8009cc2 <_scanf_float+0x14e>
 8009cd6:	9a03      	ldr	r2, [sp, #12]
 8009cd8:	2a00      	cmp	r2, #0
 8009cda:	d10f      	bne.n	8009cfc <_scanf_float+0x188>
 8009cdc:	9a01      	ldr	r2, [sp, #4]
 8009cde:	2a00      	cmp	r2, #0
 8009ce0:	d10f      	bne.n	8009d02 <_scanf_float+0x18e>
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	21e0      	movs	r1, #224	; 0xe0
 8009ce6:	0010      	movs	r0, r2
 8009ce8:	00c9      	lsls	r1, r1, #3
 8009cea:	4008      	ands	r0, r1
 8009cec:	4288      	cmp	r0, r1
 8009cee:	d108      	bne.n	8009d02 <_scanf_float+0x18e>
 8009cf0:	4960      	ldr	r1, [pc, #384]	; (8009e74 <_scanf_float+0x300>)
 8009cf2:	400a      	ands	r2, r1
 8009cf4:	603a      	str	r2, [r7, #0]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	9203      	str	r2, [sp, #12]
 8009cfa:	e7e3      	b.n	8009cc4 <_scanf_float+0x150>
 8009cfc:	9a03      	ldr	r2, [sp, #12]
 8009cfe:	2a02      	cmp	r2, #2
 8009d00:	d059      	beq.n	8009db6 <_scanf_float+0x242>
 8009d02:	2c01      	cmp	r4, #1
 8009d04:	d002      	beq.n	8009d0c <_scanf_float+0x198>
 8009d06:	2c04      	cmp	r4, #4
 8009d08:	d000      	beq.n	8009d0c <_scanf_float+0x198>
 8009d0a:	e764      	b.n	8009bd6 <_scanf_float+0x62>
 8009d0c:	3401      	adds	r4, #1
 8009d0e:	b2e4      	uxtb	r4, r4
 8009d10:	e7d8      	b.n	8009cc4 <_scanf_float+0x150>
 8009d12:	9a03      	ldr	r2, [sp, #12]
 8009d14:	2a01      	cmp	r2, #1
 8009d16:	d000      	beq.n	8009d1a <_scanf_float+0x1a6>
 8009d18:	e75d      	b.n	8009bd6 <_scanf_float+0x62>
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	e7ec      	b.n	8009cf8 <_scanf_float+0x184>
 8009d1e:	2c00      	cmp	r4, #0
 8009d20:	d110      	bne.n	8009d44 <_scanf_float+0x1d0>
 8009d22:	9a01      	ldr	r2, [sp, #4]
 8009d24:	2a00      	cmp	r2, #0
 8009d26:	d000      	beq.n	8009d2a <_scanf_float+0x1b6>
 8009d28:	e758      	b.n	8009bdc <_scanf_float+0x68>
 8009d2a:	683a      	ldr	r2, [r7, #0]
 8009d2c:	21e0      	movs	r1, #224	; 0xe0
 8009d2e:	0010      	movs	r0, r2
 8009d30:	00c9      	lsls	r1, r1, #3
 8009d32:	4008      	ands	r0, r1
 8009d34:	4288      	cmp	r0, r1
 8009d36:	d000      	beq.n	8009d3a <_scanf_float+0x1c6>
 8009d38:	e754      	b.n	8009be4 <_scanf_float+0x70>
 8009d3a:	494e      	ldr	r1, [pc, #312]	; (8009e74 <_scanf_float+0x300>)
 8009d3c:	3401      	adds	r4, #1
 8009d3e:	400a      	ands	r2, r1
 8009d40:	603a      	str	r2, [r7, #0]
 8009d42:	e7bf      	b.n	8009cc4 <_scanf_float+0x150>
 8009d44:	21fd      	movs	r1, #253	; 0xfd
 8009d46:	1ee2      	subs	r2, r4, #3
 8009d48:	420a      	tst	r2, r1
 8009d4a:	d000      	beq.n	8009d4e <_scanf_float+0x1da>
 8009d4c:	e743      	b.n	8009bd6 <_scanf_float+0x62>
 8009d4e:	e7dd      	b.n	8009d0c <_scanf_float+0x198>
 8009d50:	2c02      	cmp	r4, #2
 8009d52:	d000      	beq.n	8009d56 <_scanf_float+0x1e2>
 8009d54:	e73f      	b.n	8009bd6 <_scanf_float+0x62>
 8009d56:	2403      	movs	r4, #3
 8009d58:	e7b4      	b.n	8009cc4 <_scanf_float+0x150>
 8009d5a:	2c06      	cmp	r4, #6
 8009d5c:	d000      	beq.n	8009d60 <_scanf_float+0x1ec>
 8009d5e:	e73a      	b.n	8009bd6 <_scanf_float+0x62>
 8009d60:	2407      	movs	r4, #7
 8009d62:	e7af      	b.n	8009cc4 <_scanf_float+0x150>
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	0591      	lsls	r1, r2, #22
 8009d68:	d400      	bmi.n	8009d6c <_scanf_float+0x1f8>
 8009d6a:	e734      	b.n	8009bd6 <_scanf_float+0x62>
 8009d6c:	4942      	ldr	r1, [pc, #264]	; (8009e78 <_scanf_float+0x304>)
 8009d6e:	400a      	ands	r2, r1
 8009d70:	603a      	str	r2, [r7, #0]
 8009d72:	9a01      	ldr	r2, [sp, #4]
 8009d74:	9205      	str	r2, [sp, #20]
 8009d76:	e7a5      	b.n	8009cc4 <_scanf_float+0x150>
 8009d78:	21a0      	movs	r1, #160	; 0xa0
 8009d7a:	2080      	movs	r0, #128	; 0x80
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	00c9      	lsls	r1, r1, #3
 8009d80:	4011      	ands	r1, r2
 8009d82:	00c0      	lsls	r0, r0, #3
 8009d84:	4281      	cmp	r1, r0
 8009d86:	d006      	beq.n	8009d96 <_scanf_float+0x222>
 8009d88:	4202      	tst	r2, r0
 8009d8a:	d100      	bne.n	8009d8e <_scanf_float+0x21a>
 8009d8c:	e723      	b.n	8009bd6 <_scanf_float+0x62>
 8009d8e:	9901      	ldr	r1, [sp, #4]
 8009d90:	2900      	cmp	r1, #0
 8009d92:	d100      	bne.n	8009d96 <_scanf_float+0x222>
 8009d94:	e726      	b.n	8009be4 <_scanf_float+0x70>
 8009d96:	0591      	lsls	r1, r2, #22
 8009d98:	d404      	bmi.n	8009da4 <_scanf_float+0x230>
 8009d9a:	9901      	ldr	r1, [sp, #4]
 8009d9c:	9805      	ldr	r0, [sp, #20]
 8009d9e:	9509      	str	r5, [sp, #36]	; 0x24
 8009da0:	1a09      	subs	r1, r1, r0
 8009da2:	9108      	str	r1, [sp, #32]
 8009da4:	4933      	ldr	r1, [pc, #204]	; (8009e74 <_scanf_float+0x300>)
 8009da6:	400a      	ands	r2, r1
 8009da8:	21c0      	movs	r1, #192	; 0xc0
 8009daa:	0049      	lsls	r1, r1, #1
 8009dac:	430a      	orrs	r2, r1
 8009dae:	603a      	str	r2, [r7, #0]
 8009db0:	2200      	movs	r2, #0
 8009db2:	9201      	str	r2, [sp, #4]
 8009db4:	e786      	b.n	8009cc4 <_scanf_float+0x150>
 8009db6:	2203      	movs	r2, #3
 8009db8:	e79e      	b.n	8009cf8 <_scanf_float+0x184>
 8009dba:	23c0      	movs	r3, #192	; 0xc0
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	0031      	movs	r1, r6
 8009dc0:	58fb      	ldr	r3, [r7, r3]
 8009dc2:	9802      	ldr	r0, [sp, #8]
 8009dc4:	4798      	blx	r3
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d100      	bne.n	8009dcc <_scanf_float+0x258>
 8009dca:	e6f6      	b.n	8009bba <_scanf_float+0x46>
 8009dcc:	e703      	b.n	8009bd6 <_scanf_float+0x62>
 8009dce:	3d01      	subs	r5, #1
 8009dd0:	593b      	ldr	r3, [r7, r4]
 8009dd2:	0032      	movs	r2, r6
 8009dd4:	7829      	ldrb	r1, [r5, #0]
 8009dd6:	9802      	ldr	r0, [sp, #8]
 8009dd8:	4798      	blx	r3
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	613b      	str	r3, [r7, #16]
 8009de0:	e707      	b.n	8009bf2 <_scanf_float+0x7e>
 8009de2:	1e63      	subs	r3, r4, #1
 8009de4:	2b06      	cmp	r3, #6
 8009de6:	d80e      	bhi.n	8009e06 <_scanf_float+0x292>
 8009de8:	9503      	str	r5, [sp, #12]
 8009dea:	2c02      	cmp	r4, #2
 8009dec:	d920      	bls.n	8009e30 <_scanf_float+0x2bc>
 8009dee:	1b63      	subs	r3, r4, r5
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	9306      	str	r3, [sp, #24]
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	9a06      	ldr	r2, [sp, #24]
 8009df8:	189b      	adds	r3, r3, r2
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b03      	cmp	r3, #3
 8009dfe:	d827      	bhi.n	8009e50 <_scanf_float+0x2dc>
 8009e00:	3c03      	subs	r4, #3
 8009e02:	b2e4      	uxtb	r4, r4
 8009e04:	1b2d      	subs	r5, r5, r4
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	05da      	lsls	r2, r3, #23
 8009e0a:	d552      	bpl.n	8009eb2 <_scanf_float+0x33e>
 8009e0c:	055b      	lsls	r3, r3, #21
 8009e0e:	d535      	bpl.n	8009e7c <_scanf_float+0x308>
 8009e10:	24be      	movs	r4, #190	; 0xbe
 8009e12:	0064      	lsls	r4, r4, #1
 8009e14:	9b04      	ldr	r3, [sp, #16]
 8009e16:	429d      	cmp	r5, r3
 8009e18:	d800      	bhi.n	8009e1c <_scanf_float+0x2a8>
 8009e1a:	e6ee      	b.n	8009bfa <_scanf_float+0x86>
 8009e1c:	3d01      	subs	r5, #1
 8009e1e:	593b      	ldr	r3, [r7, r4]
 8009e20:	0032      	movs	r2, r6
 8009e22:	7829      	ldrb	r1, [r5, #0]
 8009e24:	9802      	ldr	r0, [sp, #8]
 8009e26:	4798      	blx	r3
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	613b      	str	r3, [r7, #16]
 8009e2e:	e7f1      	b.n	8009e14 <_scanf_float+0x2a0>
 8009e30:	24be      	movs	r4, #190	; 0xbe
 8009e32:	0064      	lsls	r4, r4, #1
 8009e34:	9b04      	ldr	r3, [sp, #16]
 8009e36:	429d      	cmp	r5, r3
 8009e38:	d800      	bhi.n	8009e3c <_scanf_float+0x2c8>
 8009e3a:	e6de      	b.n	8009bfa <_scanf_float+0x86>
 8009e3c:	3d01      	subs	r5, #1
 8009e3e:	593b      	ldr	r3, [r7, r4]
 8009e40:	0032      	movs	r2, r6
 8009e42:	7829      	ldrb	r1, [r5, #0]
 8009e44:	9802      	ldr	r0, [sp, #8]
 8009e46:	4798      	blx	r3
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	613b      	str	r3, [r7, #16]
 8009e4e:	e7f1      	b.n	8009e34 <_scanf_float+0x2c0>
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	0032      	movs	r2, r6
 8009e54:	3b01      	subs	r3, #1
 8009e56:	7819      	ldrb	r1, [r3, #0]
 8009e58:	9303      	str	r3, [sp, #12]
 8009e5a:	23be      	movs	r3, #190	; 0xbe
 8009e5c:	005b      	lsls	r3, r3, #1
 8009e5e:	58fb      	ldr	r3, [r7, r3]
 8009e60:	9802      	ldr	r0, [sp, #8]
 8009e62:	4798      	blx	r3
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	3b01      	subs	r3, #1
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	e7c3      	b.n	8009df4 <_scanf_float+0x280>
 8009e6c:	fffffeff 	.word	0xfffffeff
 8009e70:	fffffe7f 	.word	0xfffffe7f
 8009e74:	fffff87f 	.word	0xfffff87f
 8009e78:	fffffd7f 	.word	0xfffffd7f
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	1e6c      	subs	r4, r5, #1
 8009e80:	7821      	ldrb	r1, [r4, #0]
 8009e82:	3b01      	subs	r3, #1
 8009e84:	613b      	str	r3, [r7, #16]
 8009e86:	2965      	cmp	r1, #101	; 0x65
 8009e88:	d00c      	beq.n	8009ea4 <_scanf_float+0x330>
 8009e8a:	2945      	cmp	r1, #69	; 0x45
 8009e8c:	d00a      	beq.n	8009ea4 <_scanf_float+0x330>
 8009e8e:	23be      	movs	r3, #190	; 0xbe
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	58fb      	ldr	r3, [r7, r3]
 8009e94:	0032      	movs	r2, r6
 8009e96:	9802      	ldr	r0, [sp, #8]
 8009e98:	4798      	blx	r3
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	1eac      	subs	r4, r5, #2
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	7821      	ldrb	r1, [r4, #0]
 8009ea2:	613b      	str	r3, [r7, #16]
 8009ea4:	23be      	movs	r3, #190	; 0xbe
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	0032      	movs	r2, r6
 8009eaa:	58fb      	ldr	r3, [r7, r3]
 8009eac:	9802      	ldr	r0, [sp, #8]
 8009eae:	4798      	blx	r3
 8009eb0:	0025      	movs	r5, r4
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	2310      	movs	r3, #16
 8009eb6:	0011      	movs	r1, r2
 8009eb8:	4019      	ands	r1, r3
 8009eba:	9103      	str	r1, [sp, #12]
 8009ebc:	421a      	tst	r2, r3
 8009ebe:	d15b      	bne.n	8009f78 <_scanf_float+0x404>
 8009ec0:	22c0      	movs	r2, #192	; 0xc0
 8009ec2:	7029      	strb	r1, [r5, #0]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	00d2      	lsls	r2, r2, #3
 8009ec8:	4013      	ands	r3, r2
 8009eca:	2280      	movs	r2, #128	; 0x80
 8009ecc:	00d2      	lsls	r2, r2, #3
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d11d      	bne.n	8009f0e <_scanf_float+0x39a>
 8009ed2:	9b05      	ldr	r3, [sp, #20]
 8009ed4:	9a01      	ldr	r2, [sp, #4]
 8009ed6:	9901      	ldr	r1, [sp, #4]
 8009ed8:	1a9a      	subs	r2, r3, r2
 8009eda:	428b      	cmp	r3, r1
 8009edc:	d124      	bne.n	8009f28 <_scanf_float+0x3b4>
 8009ede:	2200      	movs	r2, #0
 8009ee0:	9904      	ldr	r1, [sp, #16]
 8009ee2:	9802      	ldr	r0, [sp, #8]
 8009ee4:	f002 fccc 	bl	800c880 <_strtod_r>
 8009ee8:	9b07      	ldr	r3, [sp, #28]
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	0004      	movs	r4, r0
 8009eee:	000d      	movs	r5, r1
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	0791      	lsls	r1, r2, #30
 8009ef4:	d525      	bpl.n	8009f42 <_scanf_float+0x3ce>
 8009ef6:	9907      	ldr	r1, [sp, #28]
 8009ef8:	1d1a      	adds	r2, r3, #4
 8009efa:	600a      	str	r2, [r1, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	601c      	str	r4, [r3, #0]
 8009f00:	605d      	str	r5, [r3, #4]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	9803      	ldr	r0, [sp, #12]
 8009f0a:	b00b      	add	sp, #44	; 0x2c
 8009f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f0e:	9b08      	ldr	r3, [sp, #32]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d0e4      	beq.n	8009ede <_scanf_float+0x36a>
 8009f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f16:	9a03      	ldr	r2, [sp, #12]
 8009f18:	1c59      	adds	r1, r3, #1
 8009f1a:	9802      	ldr	r0, [sp, #8]
 8009f1c:	230a      	movs	r3, #10
 8009f1e:	f002 fd3d 	bl	800c99c <_strtol_r>
 8009f22:	9b08      	ldr	r3, [sp, #32]
 8009f24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f26:	1ac2      	subs	r2, r0, r3
 8009f28:	003b      	movs	r3, r7
 8009f2a:	3370      	adds	r3, #112	; 0x70
 8009f2c:	33ff      	adds	r3, #255	; 0xff
 8009f2e:	429d      	cmp	r5, r3
 8009f30:	d302      	bcc.n	8009f38 <_scanf_float+0x3c4>
 8009f32:	003d      	movs	r5, r7
 8009f34:	356f      	adds	r5, #111	; 0x6f
 8009f36:	35ff      	adds	r5, #255	; 0xff
 8009f38:	0028      	movs	r0, r5
 8009f3a:	4910      	ldr	r1, [pc, #64]	; (8009f7c <_scanf_float+0x408>)
 8009f3c:	f000 f91a 	bl	800a174 <siprintf>
 8009f40:	e7cd      	b.n	8009ede <_scanf_float+0x36a>
 8009f42:	1d19      	adds	r1, r3, #4
 8009f44:	0752      	lsls	r2, r2, #29
 8009f46:	d502      	bpl.n	8009f4e <_scanf_float+0x3da>
 8009f48:	9a07      	ldr	r2, [sp, #28]
 8009f4a:	6011      	str	r1, [r2, #0]
 8009f4c:	e7d6      	b.n	8009efc <_scanf_float+0x388>
 8009f4e:	9a07      	ldr	r2, [sp, #28]
 8009f50:	0020      	movs	r0, r4
 8009f52:	6011      	str	r1, [r2, #0]
 8009f54:	681e      	ldr	r6, [r3, #0]
 8009f56:	0022      	movs	r2, r4
 8009f58:	002b      	movs	r3, r5
 8009f5a:	0029      	movs	r1, r5
 8009f5c:	f7f8 fb2e 	bl	80025bc <__aeabi_dcmpun>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d004      	beq.n	8009f6e <_scanf_float+0x3fa>
 8009f64:	4806      	ldr	r0, [pc, #24]	; (8009f80 <_scanf_float+0x40c>)
 8009f66:	f000 fa03 	bl	800a370 <nanf>
 8009f6a:	6030      	str	r0, [r6, #0]
 8009f6c:	e7c9      	b.n	8009f02 <_scanf_float+0x38e>
 8009f6e:	0020      	movs	r0, r4
 8009f70:	0029      	movs	r1, r5
 8009f72:	f7f8 fc15 	bl	80027a0 <__aeabi_d2f>
 8009f76:	e7f8      	b.n	8009f6a <_scanf_float+0x3f6>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	e63f      	b.n	8009bfc <_scanf_float+0x88>
 8009f7c:	0800e24c 	.word	0x0800e24c
 8009f80:	0800e5dd 	.word	0x0800e5dd

08009f84 <std>:
 8009f84:	2300      	movs	r3, #0
 8009f86:	b510      	push	{r4, lr}
 8009f88:	0004      	movs	r4, r0
 8009f8a:	6003      	str	r3, [r0, #0]
 8009f8c:	6043      	str	r3, [r0, #4]
 8009f8e:	6083      	str	r3, [r0, #8]
 8009f90:	8181      	strh	r1, [r0, #12]
 8009f92:	6643      	str	r3, [r0, #100]	; 0x64
 8009f94:	81c2      	strh	r2, [r0, #14]
 8009f96:	6103      	str	r3, [r0, #16]
 8009f98:	6143      	str	r3, [r0, #20]
 8009f9a:	6183      	str	r3, [r0, #24]
 8009f9c:	0019      	movs	r1, r3
 8009f9e:	2208      	movs	r2, #8
 8009fa0:	305c      	adds	r0, #92	; 0x5c
 8009fa2:	f000 f953 	bl	800a24c <memset>
 8009fa6:	4b0b      	ldr	r3, [pc, #44]	; (8009fd4 <std+0x50>)
 8009fa8:	6224      	str	r4, [r4, #32]
 8009faa:	6263      	str	r3, [r4, #36]	; 0x24
 8009fac:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <std+0x54>)
 8009fae:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fb0:	4b0a      	ldr	r3, [pc, #40]	; (8009fdc <std+0x58>)
 8009fb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fb4:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <std+0x5c>)
 8009fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <std+0x60>)
 8009fba:	429c      	cmp	r4, r3
 8009fbc:	d005      	beq.n	8009fca <std+0x46>
 8009fbe:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <std+0x64>)
 8009fc0:	429c      	cmp	r4, r3
 8009fc2:	d002      	beq.n	8009fca <std+0x46>
 8009fc4:	4b09      	ldr	r3, [pc, #36]	; (8009fec <std+0x68>)
 8009fc6:	429c      	cmp	r4, r3
 8009fc8:	d103      	bne.n	8009fd2 <std+0x4e>
 8009fca:	0020      	movs	r0, r4
 8009fcc:	3058      	adds	r0, #88	; 0x58
 8009fce:	f000 f9c1 	bl	800a354 <__retarget_lock_init_recursive>
 8009fd2:	bd10      	pop	{r4, pc}
 8009fd4:	0800a1b5 	.word	0x0800a1b5
 8009fd8:	0800a1dd 	.word	0x0800a1dd
 8009fdc:	0800a215 	.word	0x0800a215
 8009fe0:	0800a241 	.word	0x0800a241
 8009fe4:	20000524 	.word	0x20000524
 8009fe8:	2000058c 	.word	0x2000058c
 8009fec:	200005f4 	.word	0x200005f4

08009ff0 <stdio_exit_handler>:
 8009ff0:	b510      	push	{r4, lr}
 8009ff2:	4a03      	ldr	r2, [pc, #12]	; (800a000 <stdio_exit_handler+0x10>)
 8009ff4:	4903      	ldr	r1, [pc, #12]	; (800a004 <stdio_exit_handler+0x14>)
 8009ff6:	4804      	ldr	r0, [pc, #16]	; (800a008 <stdio_exit_handler+0x18>)
 8009ff8:	f000 f86c 	bl	800a0d4 <_fwalk_sglue>
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	20000024 	.word	0x20000024
 800a004:	0800cd7d 	.word	0x0800cd7d
 800a008:	20000030 	.word	0x20000030

0800a00c <cleanup_stdio>:
 800a00c:	6841      	ldr	r1, [r0, #4]
 800a00e:	4b0b      	ldr	r3, [pc, #44]	; (800a03c <cleanup_stdio+0x30>)
 800a010:	b510      	push	{r4, lr}
 800a012:	0004      	movs	r4, r0
 800a014:	4299      	cmp	r1, r3
 800a016:	d001      	beq.n	800a01c <cleanup_stdio+0x10>
 800a018:	f002 feb0 	bl	800cd7c <_fflush_r>
 800a01c:	68a1      	ldr	r1, [r4, #8]
 800a01e:	4b08      	ldr	r3, [pc, #32]	; (800a040 <cleanup_stdio+0x34>)
 800a020:	4299      	cmp	r1, r3
 800a022:	d002      	beq.n	800a02a <cleanup_stdio+0x1e>
 800a024:	0020      	movs	r0, r4
 800a026:	f002 fea9 	bl	800cd7c <_fflush_r>
 800a02a:	68e1      	ldr	r1, [r4, #12]
 800a02c:	4b05      	ldr	r3, [pc, #20]	; (800a044 <cleanup_stdio+0x38>)
 800a02e:	4299      	cmp	r1, r3
 800a030:	d002      	beq.n	800a038 <cleanup_stdio+0x2c>
 800a032:	0020      	movs	r0, r4
 800a034:	f002 fea2 	bl	800cd7c <_fflush_r>
 800a038:	bd10      	pop	{r4, pc}
 800a03a:	46c0      	nop			; (mov r8, r8)
 800a03c:	20000524 	.word	0x20000524
 800a040:	2000058c 	.word	0x2000058c
 800a044:	200005f4 	.word	0x200005f4

0800a048 <global_stdio_init.part.0>:
 800a048:	b510      	push	{r4, lr}
 800a04a:	4b09      	ldr	r3, [pc, #36]	; (800a070 <global_stdio_init.part.0+0x28>)
 800a04c:	4a09      	ldr	r2, [pc, #36]	; (800a074 <global_stdio_init.part.0+0x2c>)
 800a04e:	2104      	movs	r1, #4
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	4809      	ldr	r0, [pc, #36]	; (800a078 <global_stdio_init.part.0+0x30>)
 800a054:	2200      	movs	r2, #0
 800a056:	f7ff ff95 	bl	8009f84 <std>
 800a05a:	2201      	movs	r2, #1
 800a05c:	2109      	movs	r1, #9
 800a05e:	4807      	ldr	r0, [pc, #28]	; (800a07c <global_stdio_init.part.0+0x34>)
 800a060:	f7ff ff90 	bl	8009f84 <std>
 800a064:	2202      	movs	r2, #2
 800a066:	2112      	movs	r1, #18
 800a068:	4805      	ldr	r0, [pc, #20]	; (800a080 <global_stdio_init.part.0+0x38>)
 800a06a:	f7ff ff8b 	bl	8009f84 <std>
 800a06e:	bd10      	pop	{r4, pc}
 800a070:	2000065c 	.word	0x2000065c
 800a074:	08009ff1 	.word	0x08009ff1
 800a078:	20000524 	.word	0x20000524
 800a07c:	2000058c 	.word	0x2000058c
 800a080:	200005f4 	.word	0x200005f4

0800a084 <__sfp_lock_acquire>:
 800a084:	b510      	push	{r4, lr}
 800a086:	4802      	ldr	r0, [pc, #8]	; (800a090 <__sfp_lock_acquire+0xc>)
 800a088:	f000 f965 	bl	800a356 <__retarget_lock_acquire_recursive>
 800a08c:	bd10      	pop	{r4, pc}
 800a08e:	46c0      	nop			; (mov r8, r8)
 800a090:	20000665 	.word	0x20000665

0800a094 <__sfp_lock_release>:
 800a094:	b510      	push	{r4, lr}
 800a096:	4802      	ldr	r0, [pc, #8]	; (800a0a0 <__sfp_lock_release+0xc>)
 800a098:	f000 f95e 	bl	800a358 <__retarget_lock_release_recursive>
 800a09c:	bd10      	pop	{r4, pc}
 800a09e:	46c0      	nop			; (mov r8, r8)
 800a0a0:	20000665 	.word	0x20000665

0800a0a4 <__sinit>:
 800a0a4:	b510      	push	{r4, lr}
 800a0a6:	0004      	movs	r4, r0
 800a0a8:	f7ff ffec 	bl	800a084 <__sfp_lock_acquire>
 800a0ac:	6a23      	ldr	r3, [r4, #32]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <__sinit+0x14>
 800a0b2:	f7ff ffef 	bl	800a094 <__sfp_lock_release>
 800a0b6:	bd10      	pop	{r4, pc}
 800a0b8:	4b04      	ldr	r3, [pc, #16]	; (800a0cc <__sinit+0x28>)
 800a0ba:	6223      	str	r3, [r4, #32]
 800a0bc:	4b04      	ldr	r3, [pc, #16]	; (800a0d0 <__sinit+0x2c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1f6      	bne.n	800a0b2 <__sinit+0xe>
 800a0c4:	f7ff ffc0 	bl	800a048 <global_stdio_init.part.0>
 800a0c8:	e7f3      	b.n	800a0b2 <__sinit+0xe>
 800a0ca:	46c0      	nop			; (mov r8, r8)
 800a0cc:	0800a00d 	.word	0x0800a00d
 800a0d0:	2000065c 	.word	0x2000065c

0800a0d4 <_fwalk_sglue>:
 800a0d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0d6:	0014      	movs	r4, r2
 800a0d8:	2600      	movs	r6, #0
 800a0da:	9000      	str	r0, [sp, #0]
 800a0dc:	9101      	str	r1, [sp, #4]
 800a0de:	68a5      	ldr	r5, [r4, #8]
 800a0e0:	6867      	ldr	r7, [r4, #4]
 800a0e2:	3f01      	subs	r7, #1
 800a0e4:	d504      	bpl.n	800a0f0 <_fwalk_sglue+0x1c>
 800a0e6:	6824      	ldr	r4, [r4, #0]
 800a0e8:	2c00      	cmp	r4, #0
 800a0ea:	d1f8      	bne.n	800a0de <_fwalk_sglue+0xa>
 800a0ec:	0030      	movs	r0, r6
 800a0ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a0f0:	89ab      	ldrh	r3, [r5, #12]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d908      	bls.n	800a108 <_fwalk_sglue+0x34>
 800a0f6:	220e      	movs	r2, #14
 800a0f8:	5eab      	ldrsh	r3, [r5, r2]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	d004      	beq.n	800a108 <_fwalk_sglue+0x34>
 800a0fe:	0029      	movs	r1, r5
 800a100:	9800      	ldr	r0, [sp, #0]
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	4798      	blx	r3
 800a106:	4306      	orrs	r6, r0
 800a108:	3568      	adds	r5, #104	; 0x68
 800a10a:	e7ea      	b.n	800a0e2 <_fwalk_sglue+0xe>

0800a10c <sniprintf>:
 800a10c:	b40c      	push	{r2, r3}
 800a10e:	b530      	push	{r4, r5, lr}
 800a110:	4b17      	ldr	r3, [pc, #92]	; (800a170 <sniprintf+0x64>)
 800a112:	000c      	movs	r4, r1
 800a114:	681d      	ldr	r5, [r3, #0]
 800a116:	b09d      	sub	sp, #116	; 0x74
 800a118:	2900      	cmp	r1, #0
 800a11a:	da08      	bge.n	800a12e <sniprintf+0x22>
 800a11c:	238b      	movs	r3, #139	; 0x8b
 800a11e:	2001      	movs	r0, #1
 800a120:	602b      	str	r3, [r5, #0]
 800a122:	4240      	negs	r0, r0
 800a124:	b01d      	add	sp, #116	; 0x74
 800a126:	bc30      	pop	{r4, r5}
 800a128:	bc08      	pop	{r3}
 800a12a:	b002      	add	sp, #8
 800a12c:	4718      	bx	r3
 800a12e:	2382      	movs	r3, #130	; 0x82
 800a130:	466a      	mov	r2, sp
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	8293      	strh	r3, [r2, #20]
 800a136:	2300      	movs	r3, #0
 800a138:	9002      	str	r0, [sp, #8]
 800a13a:	9006      	str	r0, [sp, #24]
 800a13c:	4299      	cmp	r1, r3
 800a13e:	d000      	beq.n	800a142 <sniprintf+0x36>
 800a140:	1e4b      	subs	r3, r1, #1
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	9307      	str	r3, [sp, #28]
 800a146:	2301      	movs	r3, #1
 800a148:	466a      	mov	r2, sp
 800a14a:	425b      	negs	r3, r3
 800a14c:	82d3      	strh	r3, [r2, #22]
 800a14e:	0028      	movs	r0, r5
 800a150:	ab21      	add	r3, sp, #132	; 0x84
 800a152:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a154:	a902      	add	r1, sp, #8
 800a156:	9301      	str	r3, [sp, #4]
 800a158:	f002 fc86 	bl	800ca68 <_svfiprintf_r>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	da01      	bge.n	800a164 <sniprintf+0x58>
 800a160:	238b      	movs	r3, #139	; 0x8b
 800a162:	602b      	str	r3, [r5, #0]
 800a164:	2c00      	cmp	r4, #0
 800a166:	d0dd      	beq.n	800a124 <sniprintf+0x18>
 800a168:	2200      	movs	r2, #0
 800a16a:	9b02      	ldr	r3, [sp, #8]
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	e7d9      	b.n	800a124 <sniprintf+0x18>
 800a170:	2000007c 	.word	0x2000007c

0800a174 <siprintf>:
 800a174:	b40e      	push	{r1, r2, r3}
 800a176:	b500      	push	{lr}
 800a178:	490b      	ldr	r1, [pc, #44]	; (800a1a8 <siprintf+0x34>)
 800a17a:	b09c      	sub	sp, #112	; 0x70
 800a17c:	ab1d      	add	r3, sp, #116	; 0x74
 800a17e:	9002      	str	r0, [sp, #8]
 800a180:	9006      	str	r0, [sp, #24]
 800a182:	9107      	str	r1, [sp, #28]
 800a184:	9104      	str	r1, [sp, #16]
 800a186:	4809      	ldr	r0, [pc, #36]	; (800a1ac <siprintf+0x38>)
 800a188:	4909      	ldr	r1, [pc, #36]	; (800a1b0 <siprintf+0x3c>)
 800a18a:	cb04      	ldmia	r3!, {r2}
 800a18c:	9105      	str	r1, [sp, #20]
 800a18e:	6800      	ldr	r0, [r0, #0]
 800a190:	a902      	add	r1, sp, #8
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	f002 fc68 	bl	800ca68 <_svfiprintf_r>
 800a198:	2200      	movs	r2, #0
 800a19a:	9b02      	ldr	r3, [sp, #8]
 800a19c:	701a      	strb	r2, [r3, #0]
 800a19e:	b01c      	add	sp, #112	; 0x70
 800a1a0:	bc08      	pop	{r3}
 800a1a2:	b003      	add	sp, #12
 800a1a4:	4718      	bx	r3
 800a1a6:	46c0      	nop			; (mov r8, r8)
 800a1a8:	7fffffff 	.word	0x7fffffff
 800a1ac:	2000007c 	.word	0x2000007c
 800a1b0:	ffff0208 	.word	0xffff0208

0800a1b4 <__sread>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	000c      	movs	r4, r1
 800a1b8:	250e      	movs	r5, #14
 800a1ba:	5f49      	ldrsh	r1, [r1, r5]
 800a1bc:	f000 f878 	bl	800a2b0 <_read_r>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	db03      	blt.n	800a1cc <__sread+0x18>
 800a1c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a1c6:	181b      	adds	r3, r3, r0
 800a1c8:	6563      	str	r3, [r4, #84]	; 0x54
 800a1ca:	bd70      	pop	{r4, r5, r6, pc}
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	4a02      	ldr	r2, [pc, #8]	; (800a1d8 <__sread+0x24>)
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	e7f9      	b.n	800a1ca <__sread+0x16>
 800a1d6:	46c0      	nop			; (mov r8, r8)
 800a1d8:	ffffefff 	.word	0xffffefff

0800a1dc <__swrite>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	001f      	movs	r7, r3
 800a1e0:	898b      	ldrh	r3, [r1, #12]
 800a1e2:	0005      	movs	r5, r0
 800a1e4:	000c      	movs	r4, r1
 800a1e6:	0016      	movs	r6, r2
 800a1e8:	05db      	lsls	r3, r3, #23
 800a1ea:	d505      	bpl.n	800a1f8 <__swrite+0x1c>
 800a1ec:	230e      	movs	r3, #14
 800a1ee:	5ec9      	ldrsh	r1, [r1, r3]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	f000 f848 	bl	800a288 <_lseek_r>
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	4a05      	ldr	r2, [pc, #20]	; (800a210 <__swrite+0x34>)
 800a1fc:	0028      	movs	r0, r5
 800a1fe:	4013      	ands	r3, r2
 800a200:	81a3      	strh	r3, [r4, #12]
 800a202:	0032      	movs	r2, r6
 800a204:	230e      	movs	r3, #14
 800a206:	5ee1      	ldrsh	r1, [r4, r3]
 800a208:	003b      	movs	r3, r7
 800a20a:	f000 f865 	bl	800a2d8 <_write_r>
 800a20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a210:	ffffefff 	.word	0xffffefff

0800a214 <__sseek>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	000c      	movs	r4, r1
 800a218:	250e      	movs	r5, #14
 800a21a:	5f49      	ldrsh	r1, [r1, r5]
 800a21c:	f000 f834 	bl	800a288 <_lseek_r>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	1c42      	adds	r2, r0, #1
 800a224:	d103      	bne.n	800a22e <__sseek+0x1a>
 800a226:	4a05      	ldr	r2, [pc, #20]	; (800a23c <__sseek+0x28>)
 800a228:	4013      	ands	r3, r2
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
 800a22e:	2280      	movs	r2, #128	; 0x80
 800a230:	0152      	lsls	r2, r2, #5
 800a232:	4313      	orrs	r3, r2
 800a234:	81a3      	strh	r3, [r4, #12]
 800a236:	6560      	str	r0, [r4, #84]	; 0x54
 800a238:	e7f8      	b.n	800a22c <__sseek+0x18>
 800a23a:	46c0      	nop			; (mov r8, r8)
 800a23c:	ffffefff 	.word	0xffffefff

0800a240 <__sclose>:
 800a240:	b510      	push	{r4, lr}
 800a242:	230e      	movs	r3, #14
 800a244:	5ec9      	ldrsh	r1, [r1, r3]
 800a246:	f000 f80d 	bl	800a264 <_close_r>
 800a24a:	bd10      	pop	{r4, pc}

0800a24c <memset>:
 800a24c:	0003      	movs	r3, r0
 800a24e:	1882      	adds	r2, r0, r2
 800a250:	4293      	cmp	r3, r2
 800a252:	d100      	bne.n	800a256 <memset+0xa>
 800a254:	4770      	bx	lr
 800a256:	7019      	strb	r1, [r3, #0]
 800a258:	3301      	adds	r3, #1
 800a25a:	e7f9      	b.n	800a250 <memset+0x4>

0800a25c <_localeconv_r>:
 800a25c:	4800      	ldr	r0, [pc, #0]	; (800a260 <_localeconv_r+0x4>)
 800a25e:	4770      	bx	lr
 800a260:	20000170 	.word	0x20000170

0800a264 <_close_r>:
 800a264:	2300      	movs	r3, #0
 800a266:	b570      	push	{r4, r5, r6, lr}
 800a268:	4d06      	ldr	r5, [pc, #24]	; (800a284 <_close_r+0x20>)
 800a26a:	0004      	movs	r4, r0
 800a26c:	0008      	movs	r0, r1
 800a26e:	602b      	str	r3, [r5, #0]
 800a270:	f7f9 fdf0 	bl	8003e54 <_close>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d103      	bne.n	800a280 <_close_r+0x1c>
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d000      	beq.n	800a280 <_close_r+0x1c>
 800a27e:	6023      	str	r3, [r4, #0]
 800a280:	bd70      	pop	{r4, r5, r6, pc}
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	20000660 	.word	0x20000660

0800a288 <_lseek_r>:
 800a288:	b570      	push	{r4, r5, r6, lr}
 800a28a:	0004      	movs	r4, r0
 800a28c:	0008      	movs	r0, r1
 800a28e:	0011      	movs	r1, r2
 800a290:	001a      	movs	r2, r3
 800a292:	2300      	movs	r3, #0
 800a294:	4d05      	ldr	r5, [pc, #20]	; (800a2ac <_lseek_r+0x24>)
 800a296:	602b      	str	r3, [r5, #0]
 800a298:	f7f9 fdfd 	bl	8003e96 <_lseek>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	d103      	bne.n	800a2a8 <_lseek_r+0x20>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d000      	beq.n	800a2a8 <_lseek_r+0x20>
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	bd70      	pop	{r4, r5, r6, pc}
 800a2aa:	46c0      	nop			; (mov r8, r8)
 800a2ac:	20000660 	.word	0x20000660

0800a2b0 <_read_r>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	0004      	movs	r4, r0
 800a2b4:	0008      	movs	r0, r1
 800a2b6:	0011      	movs	r1, r2
 800a2b8:	001a      	movs	r2, r3
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4d05      	ldr	r5, [pc, #20]	; (800a2d4 <_read_r+0x24>)
 800a2be:	602b      	str	r3, [r5, #0]
 800a2c0:	f7f9 fd8f 	bl	8003de2 <_read>
 800a2c4:	1c43      	adds	r3, r0, #1
 800a2c6:	d103      	bne.n	800a2d0 <_read_r+0x20>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d000      	beq.n	800a2d0 <_read_r+0x20>
 800a2ce:	6023      	str	r3, [r4, #0]
 800a2d0:	bd70      	pop	{r4, r5, r6, pc}
 800a2d2:	46c0      	nop			; (mov r8, r8)
 800a2d4:	20000660 	.word	0x20000660

0800a2d8 <_write_r>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	0004      	movs	r4, r0
 800a2dc:	0008      	movs	r0, r1
 800a2de:	0011      	movs	r1, r2
 800a2e0:	001a      	movs	r2, r3
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	4d05      	ldr	r5, [pc, #20]	; (800a2fc <_write_r+0x24>)
 800a2e6:	602b      	str	r3, [r5, #0]
 800a2e8:	f7f9 fd98 	bl	8003e1c <_write>
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d103      	bne.n	800a2f8 <_write_r+0x20>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d000      	beq.n	800a2f8 <_write_r+0x20>
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	bd70      	pop	{r4, r5, r6, pc}
 800a2fa:	46c0      	nop			; (mov r8, r8)
 800a2fc:	20000660 	.word	0x20000660

0800a300 <__errno>:
 800a300:	4b01      	ldr	r3, [pc, #4]	; (800a308 <__errno+0x8>)
 800a302:	6818      	ldr	r0, [r3, #0]
 800a304:	4770      	bx	lr
 800a306:	46c0      	nop			; (mov r8, r8)
 800a308:	2000007c 	.word	0x2000007c

0800a30c <__libc_init_array>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	2600      	movs	r6, #0
 800a310:	4c0c      	ldr	r4, [pc, #48]	; (800a344 <__libc_init_array+0x38>)
 800a312:	4d0d      	ldr	r5, [pc, #52]	; (800a348 <__libc_init_array+0x3c>)
 800a314:	1b64      	subs	r4, r4, r5
 800a316:	10a4      	asrs	r4, r4, #2
 800a318:	42a6      	cmp	r6, r4
 800a31a:	d109      	bne.n	800a330 <__libc_init_array+0x24>
 800a31c:	2600      	movs	r6, #0
 800a31e:	f003 fc71 	bl	800dc04 <_init>
 800a322:	4c0a      	ldr	r4, [pc, #40]	; (800a34c <__libc_init_array+0x40>)
 800a324:	4d0a      	ldr	r5, [pc, #40]	; (800a350 <__libc_init_array+0x44>)
 800a326:	1b64      	subs	r4, r4, r5
 800a328:	10a4      	asrs	r4, r4, #2
 800a32a:	42a6      	cmp	r6, r4
 800a32c:	d105      	bne.n	800a33a <__libc_init_array+0x2e>
 800a32e:	bd70      	pop	{r4, r5, r6, pc}
 800a330:	00b3      	lsls	r3, r6, #2
 800a332:	58eb      	ldr	r3, [r5, r3]
 800a334:	4798      	blx	r3
 800a336:	3601      	adds	r6, #1
 800a338:	e7ee      	b.n	800a318 <__libc_init_array+0xc>
 800a33a:	00b3      	lsls	r3, r6, #2
 800a33c:	58eb      	ldr	r3, [r5, r3]
 800a33e:	4798      	blx	r3
 800a340:	3601      	adds	r6, #1
 800a342:	e7f2      	b.n	800a32a <__libc_init_array+0x1e>
 800a344:	0800e648 	.word	0x0800e648
 800a348:	0800e648 	.word	0x0800e648
 800a34c:	0800e64c 	.word	0x0800e64c
 800a350:	0800e648 	.word	0x0800e648

0800a354 <__retarget_lock_init_recursive>:
 800a354:	4770      	bx	lr

0800a356 <__retarget_lock_acquire_recursive>:
 800a356:	4770      	bx	lr

0800a358 <__retarget_lock_release_recursive>:
 800a358:	4770      	bx	lr

0800a35a <memchr>:
 800a35a:	b2c9      	uxtb	r1, r1
 800a35c:	1882      	adds	r2, r0, r2
 800a35e:	4290      	cmp	r0, r2
 800a360:	d101      	bne.n	800a366 <memchr+0xc>
 800a362:	2000      	movs	r0, #0
 800a364:	4770      	bx	lr
 800a366:	7803      	ldrb	r3, [r0, #0]
 800a368:	428b      	cmp	r3, r1
 800a36a:	d0fb      	beq.n	800a364 <memchr+0xa>
 800a36c:	3001      	adds	r0, #1
 800a36e:	e7f6      	b.n	800a35e <memchr+0x4>

0800a370 <nanf>:
 800a370:	4800      	ldr	r0, [pc, #0]	; (800a374 <nanf+0x4>)
 800a372:	4770      	bx	lr
 800a374:	7fc00000 	.word	0x7fc00000

0800a378 <quorem>:
 800a378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a37a:	6902      	ldr	r2, [r0, #16]
 800a37c:	690b      	ldr	r3, [r1, #16]
 800a37e:	b089      	sub	sp, #36	; 0x24
 800a380:	0007      	movs	r7, r0
 800a382:	9104      	str	r1, [sp, #16]
 800a384:	2000      	movs	r0, #0
 800a386:	429a      	cmp	r2, r3
 800a388:	db69      	blt.n	800a45e <quorem+0xe6>
 800a38a:	3b01      	subs	r3, #1
 800a38c:	009c      	lsls	r4, r3, #2
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	000b      	movs	r3, r1
 800a392:	3314      	adds	r3, #20
 800a394:	9306      	str	r3, [sp, #24]
 800a396:	191b      	adds	r3, r3, r4
 800a398:	9305      	str	r3, [sp, #20]
 800a39a:	003b      	movs	r3, r7
 800a39c:	3314      	adds	r3, #20
 800a39e:	9303      	str	r3, [sp, #12]
 800a3a0:	191c      	adds	r4, r3, r4
 800a3a2:	9b05      	ldr	r3, [sp, #20]
 800a3a4:	6826      	ldr	r6, [r4, #0]
 800a3a6:	681d      	ldr	r5, [r3, #0]
 800a3a8:	0030      	movs	r0, r6
 800a3aa:	3501      	adds	r5, #1
 800a3ac:	0029      	movs	r1, r5
 800a3ae:	f7f5 fec7 	bl	8000140 <__udivsi3>
 800a3b2:	9002      	str	r0, [sp, #8]
 800a3b4:	42ae      	cmp	r6, r5
 800a3b6:	d329      	bcc.n	800a40c <quorem+0x94>
 800a3b8:	9b06      	ldr	r3, [sp, #24]
 800a3ba:	2600      	movs	r6, #0
 800a3bc:	469c      	mov	ip, r3
 800a3be:	9d03      	ldr	r5, [sp, #12]
 800a3c0:	9606      	str	r6, [sp, #24]
 800a3c2:	4662      	mov	r2, ip
 800a3c4:	ca08      	ldmia	r2!, {r3}
 800a3c6:	6828      	ldr	r0, [r5, #0]
 800a3c8:	4694      	mov	ip, r2
 800a3ca:	9a02      	ldr	r2, [sp, #8]
 800a3cc:	b299      	uxth	r1, r3
 800a3ce:	4351      	muls	r1, r2
 800a3d0:	0c1b      	lsrs	r3, r3, #16
 800a3d2:	4353      	muls	r3, r2
 800a3d4:	1989      	adds	r1, r1, r6
 800a3d6:	0c0a      	lsrs	r2, r1, #16
 800a3d8:	189b      	adds	r3, r3, r2
 800a3da:	9307      	str	r3, [sp, #28]
 800a3dc:	0c1e      	lsrs	r6, r3, #16
 800a3de:	9b06      	ldr	r3, [sp, #24]
 800a3e0:	b282      	uxth	r2, r0
 800a3e2:	18d2      	adds	r2, r2, r3
 800a3e4:	466b      	mov	r3, sp
 800a3e6:	b289      	uxth	r1, r1
 800a3e8:	8b9b      	ldrh	r3, [r3, #28]
 800a3ea:	1a52      	subs	r2, r2, r1
 800a3ec:	0c01      	lsrs	r1, r0, #16
 800a3ee:	1ac9      	subs	r1, r1, r3
 800a3f0:	1413      	asrs	r3, r2, #16
 800a3f2:	18cb      	adds	r3, r1, r3
 800a3f4:	1419      	asrs	r1, r3, #16
 800a3f6:	b292      	uxth	r2, r2
 800a3f8:	041b      	lsls	r3, r3, #16
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	c508      	stmia	r5!, {r3}
 800a3fe:	9b05      	ldr	r3, [sp, #20]
 800a400:	9106      	str	r1, [sp, #24]
 800a402:	4563      	cmp	r3, ip
 800a404:	d2dd      	bcs.n	800a3c2 <quorem+0x4a>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d030      	beq.n	800a46e <quorem+0xf6>
 800a40c:	0038      	movs	r0, r7
 800a40e:	9904      	ldr	r1, [sp, #16]
 800a410:	f001 fa2a 	bl	800b868 <__mcmp>
 800a414:	2800      	cmp	r0, #0
 800a416:	db21      	blt.n	800a45c <quorem+0xe4>
 800a418:	0038      	movs	r0, r7
 800a41a:	2600      	movs	r6, #0
 800a41c:	9b02      	ldr	r3, [sp, #8]
 800a41e:	9c04      	ldr	r4, [sp, #16]
 800a420:	3301      	adds	r3, #1
 800a422:	9302      	str	r3, [sp, #8]
 800a424:	3014      	adds	r0, #20
 800a426:	3414      	adds	r4, #20
 800a428:	6803      	ldr	r3, [r0, #0]
 800a42a:	cc02      	ldmia	r4!, {r1}
 800a42c:	b29d      	uxth	r5, r3
 800a42e:	19ad      	adds	r5, r5, r6
 800a430:	b28a      	uxth	r2, r1
 800a432:	1aaa      	subs	r2, r5, r2
 800a434:	0c09      	lsrs	r1, r1, #16
 800a436:	0c1b      	lsrs	r3, r3, #16
 800a438:	1a5b      	subs	r3, r3, r1
 800a43a:	1411      	asrs	r1, r2, #16
 800a43c:	185b      	adds	r3, r3, r1
 800a43e:	141e      	asrs	r6, r3, #16
 800a440:	b292      	uxth	r2, r2
 800a442:	041b      	lsls	r3, r3, #16
 800a444:	4313      	orrs	r3, r2
 800a446:	c008      	stmia	r0!, {r3}
 800a448:	9b05      	ldr	r3, [sp, #20]
 800a44a:	42a3      	cmp	r3, r4
 800a44c:	d2ec      	bcs.n	800a428 <quorem+0xb0>
 800a44e:	9b01      	ldr	r3, [sp, #4]
 800a450:	9a03      	ldr	r2, [sp, #12]
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	18d3      	adds	r3, r2, r3
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	2a00      	cmp	r2, #0
 800a45a:	d015      	beq.n	800a488 <quorem+0x110>
 800a45c:	9802      	ldr	r0, [sp, #8]
 800a45e:	b009      	add	sp, #36	; 0x24
 800a460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <quorem+0xfe>
 800a468:	9b01      	ldr	r3, [sp, #4]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	9b03      	ldr	r3, [sp, #12]
 800a470:	3c04      	subs	r4, #4
 800a472:	42a3      	cmp	r3, r4
 800a474:	d3f5      	bcc.n	800a462 <quorem+0xea>
 800a476:	9b01      	ldr	r3, [sp, #4]
 800a478:	613b      	str	r3, [r7, #16]
 800a47a:	e7c7      	b.n	800a40c <quorem+0x94>
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	2a00      	cmp	r2, #0
 800a480:	d106      	bne.n	800a490 <quorem+0x118>
 800a482:	9a01      	ldr	r2, [sp, #4]
 800a484:	3a01      	subs	r2, #1
 800a486:	9201      	str	r2, [sp, #4]
 800a488:	9a03      	ldr	r2, [sp, #12]
 800a48a:	3b04      	subs	r3, #4
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d3f5      	bcc.n	800a47c <quorem+0x104>
 800a490:	9b01      	ldr	r3, [sp, #4]
 800a492:	613b      	str	r3, [r7, #16]
 800a494:	e7e2      	b.n	800a45c <quorem+0xe4>
	...

0800a498 <_dtoa_r>:
 800a498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a49a:	0014      	movs	r4, r2
 800a49c:	001d      	movs	r5, r3
 800a49e:	69c6      	ldr	r6, [r0, #28]
 800a4a0:	b09d      	sub	sp, #116	; 0x74
 800a4a2:	9408      	str	r4, [sp, #32]
 800a4a4:	9509      	str	r5, [sp, #36]	; 0x24
 800a4a6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a4a8:	9004      	str	r0, [sp, #16]
 800a4aa:	2e00      	cmp	r6, #0
 800a4ac:	d10f      	bne.n	800a4ce <_dtoa_r+0x36>
 800a4ae:	2010      	movs	r0, #16
 800a4b0:	f000 fe4a 	bl	800b148 <malloc>
 800a4b4:	9b04      	ldr	r3, [sp, #16]
 800a4b6:	1e02      	subs	r2, r0, #0
 800a4b8:	61d8      	str	r0, [r3, #28]
 800a4ba:	d104      	bne.n	800a4c6 <_dtoa_r+0x2e>
 800a4bc:	21ef      	movs	r1, #239	; 0xef
 800a4be:	4bc6      	ldr	r3, [pc, #792]	; (800a7d8 <_dtoa_r+0x340>)
 800a4c0:	48c6      	ldr	r0, [pc, #792]	; (800a7dc <_dtoa_r+0x344>)
 800a4c2:	f002 fccd 	bl	800ce60 <__assert_func>
 800a4c6:	6046      	str	r6, [r0, #4]
 800a4c8:	6086      	str	r6, [r0, #8]
 800a4ca:	6006      	str	r6, [r0, #0]
 800a4cc:	60c6      	str	r6, [r0, #12]
 800a4ce:	9b04      	ldr	r3, [sp, #16]
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	6819      	ldr	r1, [r3, #0]
 800a4d4:	2900      	cmp	r1, #0
 800a4d6:	d00b      	beq.n	800a4f0 <_dtoa_r+0x58>
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	2301      	movs	r3, #1
 800a4dc:	4093      	lsls	r3, r2
 800a4de:	604a      	str	r2, [r1, #4]
 800a4e0:	608b      	str	r3, [r1, #8]
 800a4e2:	9804      	ldr	r0, [sp, #16]
 800a4e4:	f000 ff32 	bl	800b34c <_Bfree>
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	9b04      	ldr	r3, [sp, #16]
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	2d00      	cmp	r5, #0
 800a4f2:	da1e      	bge.n	800a532 <_dtoa_r+0x9a>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	006b      	lsls	r3, r5, #1
 800a4fa:	085b      	lsrs	r3, r3, #1
 800a4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a4fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a500:	4bb7      	ldr	r3, [pc, #732]	; (800a7e0 <_dtoa_r+0x348>)
 800a502:	4ab7      	ldr	r2, [pc, #732]	; (800a7e0 <_dtoa_r+0x348>)
 800a504:	403b      	ands	r3, r7
 800a506:	4293      	cmp	r3, r2
 800a508:	d116      	bne.n	800a538 <_dtoa_r+0xa0>
 800a50a:	4bb6      	ldr	r3, [pc, #728]	; (800a7e4 <_dtoa_r+0x34c>)
 800a50c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	033b      	lsls	r3, r7, #12
 800a512:	0b1b      	lsrs	r3, r3, #12
 800a514:	4323      	orrs	r3, r4
 800a516:	d101      	bne.n	800a51c <_dtoa_r+0x84>
 800a518:	f000 fdb5 	bl	800b086 <_dtoa_r+0xbee>
 800a51c:	4bb2      	ldr	r3, [pc, #712]	; (800a7e8 <_dtoa_r+0x350>)
 800a51e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a520:	9306      	str	r3, [sp, #24]
 800a522:	2a00      	cmp	r2, #0
 800a524:	d002      	beq.n	800a52c <_dtoa_r+0x94>
 800a526:	4bb1      	ldr	r3, [pc, #708]	; (800a7ec <_dtoa_r+0x354>)
 800a528:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a52a:	6013      	str	r3, [r2, #0]
 800a52c:	9806      	ldr	r0, [sp, #24]
 800a52e:	b01d      	add	sp, #116	; 0x74
 800a530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a532:	2300      	movs	r3, #0
 800a534:	603b      	str	r3, [r7, #0]
 800a536:	e7e2      	b.n	800a4fe <_dtoa_r+0x66>
 800a538:	9a08      	ldr	r2, [sp, #32]
 800a53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53c:	9210      	str	r2, [sp, #64]	; 0x40
 800a53e:	9311      	str	r3, [sp, #68]	; 0x44
 800a540:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a542:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a544:	2200      	movs	r2, #0
 800a546:	2300      	movs	r3, #0
 800a548:	f7f5 ff80 	bl	800044c <__aeabi_dcmpeq>
 800a54c:	1e06      	subs	r6, r0, #0
 800a54e:	d009      	beq.n	800a564 <_dtoa_r+0xcc>
 800a550:	2301      	movs	r3, #1
 800a552:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	4ba6      	ldr	r3, [pc, #664]	; (800a7f0 <_dtoa_r+0x358>)
 800a558:	9306      	str	r3, [sp, #24]
 800a55a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0e5      	beq.n	800a52c <_dtoa_r+0x94>
 800a560:	4ba4      	ldr	r3, [pc, #656]	; (800a7f4 <_dtoa_r+0x35c>)
 800a562:	e7e1      	b.n	800a528 <_dtoa_r+0x90>
 800a564:	ab1a      	add	r3, sp, #104	; 0x68
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	ab1b      	add	r3, sp, #108	; 0x6c
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	9804      	ldr	r0, [sp, #16]
 800a56e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a572:	f001 fa95 	bl	800baa0 <__d2b>
 800a576:	007a      	lsls	r2, r7, #1
 800a578:	9005      	str	r0, [sp, #20]
 800a57a:	0d52      	lsrs	r2, r2, #21
 800a57c:	d100      	bne.n	800a580 <_dtoa_r+0xe8>
 800a57e:	e07b      	b.n	800a678 <_dtoa_r+0x1e0>
 800a580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a582:	9617      	str	r6, [sp, #92]	; 0x5c
 800a584:	0319      	lsls	r1, r3, #12
 800a586:	4b9c      	ldr	r3, [pc, #624]	; (800a7f8 <_dtoa_r+0x360>)
 800a588:	0b09      	lsrs	r1, r1, #12
 800a58a:	430b      	orrs	r3, r1
 800a58c:	499b      	ldr	r1, [pc, #620]	; (800a7fc <_dtoa_r+0x364>)
 800a58e:	1857      	adds	r7, r2, r1
 800a590:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a592:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a594:	0019      	movs	r1, r3
 800a596:	2200      	movs	r2, #0
 800a598:	4b99      	ldr	r3, [pc, #612]	; (800a800 <_dtoa_r+0x368>)
 800a59a:	f7f7 fc8d 	bl	8001eb8 <__aeabi_dsub>
 800a59e:	4a99      	ldr	r2, [pc, #612]	; (800a804 <_dtoa_r+0x36c>)
 800a5a0:	4b99      	ldr	r3, [pc, #612]	; (800a808 <_dtoa_r+0x370>)
 800a5a2:	f7f7 f9c7 	bl	8001934 <__aeabi_dmul>
 800a5a6:	4a99      	ldr	r2, [pc, #612]	; (800a80c <_dtoa_r+0x374>)
 800a5a8:	4b99      	ldr	r3, [pc, #612]	; (800a810 <_dtoa_r+0x378>)
 800a5aa:	f7f6 fa69 	bl	8000a80 <__aeabi_dadd>
 800a5ae:	0004      	movs	r4, r0
 800a5b0:	0038      	movs	r0, r7
 800a5b2:	000d      	movs	r5, r1
 800a5b4:	f7f8 f856 	bl	8002664 <__aeabi_i2d>
 800a5b8:	4a96      	ldr	r2, [pc, #600]	; (800a814 <_dtoa_r+0x37c>)
 800a5ba:	4b97      	ldr	r3, [pc, #604]	; (800a818 <_dtoa_r+0x380>)
 800a5bc:	f7f7 f9ba 	bl	8001934 <__aeabi_dmul>
 800a5c0:	0002      	movs	r2, r0
 800a5c2:	000b      	movs	r3, r1
 800a5c4:	0020      	movs	r0, r4
 800a5c6:	0029      	movs	r1, r5
 800a5c8:	f7f6 fa5a 	bl	8000a80 <__aeabi_dadd>
 800a5cc:	0004      	movs	r4, r0
 800a5ce:	000d      	movs	r5, r1
 800a5d0:	f7f8 f812 	bl	80025f8 <__aeabi_d2iz>
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	9003      	str	r0, [sp, #12]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	0020      	movs	r0, r4
 800a5dc:	0029      	movs	r1, r5
 800a5de:	f7f5 ff3b 	bl	8000458 <__aeabi_dcmplt>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	d00b      	beq.n	800a5fe <_dtoa_r+0x166>
 800a5e6:	9803      	ldr	r0, [sp, #12]
 800a5e8:	f7f8 f83c 	bl	8002664 <__aeabi_i2d>
 800a5ec:	002b      	movs	r3, r5
 800a5ee:	0022      	movs	r2, r4
 800a5f0:	f7f5 ff2c 	bl	800044c <__aeabi_dcmpeq>
 800a5f4:	4243      	negs	r3, r0
 800a5f6:	4158      	adcs	r0, r3
 800a5f8:	9b03      	ldr	r3, [sp, #12]
 800a5fa:	1a1b      	subs	r3, r3, r0
 800a5fc:	9303      	str	r3, [sp, #12]
 800a5fe:	2301      	movs	r3, #1
 800a600:	9316      	str	r3, [sp, #88]	; 0x58
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	2b16      	cmp	r3, #22
 800a606:	d810      	bhi.n	800a62a <_dtoa_r+0x192>
 800a608:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a60a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a60c:	9a03      	ldr	r2, [sp, #12]
 800a60e:	4b83      	ldr	r3, [pc, #524]	; (800a81c <_dtoa_r+0x384>)
 800a610:	00d2      	lsls	r2, r2, #3
 800a612:	189b      	adds	r3, r3, r2
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f7f5 ff1e 	bl	8000458 <__aeabi_dcmplt>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d047      	beq.n	800a6b0 <_dtoa_r+0x218>
 800a620:	9b03      	ldr	r3, [sp, #12]
 800a622:	3b01      	subs	r3, #1
 800a624:	9303      	str	r3, [sp, #12]
 800a626:	2300      	movs	r3, #0
 800a628:	9316      	str	r3, [sp, #88]	; 0x58
 800a62a:	2200      	movs	r2, #0
 800a62c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a62e:	920a      	str	r2, [sp, #40]	; 0x28
 800a630:	1bdb      	subs	r3, r3, r7
 800a632:	1e5a      	subs	r2, r3, #1
 800a634:	d53e      	bpl.n	800a6b4 <_dtoa_r+0x21c>
 800a636:	2201      	movs	r2, #1
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	930a      	str	r3, [sp, #40]	; 0x28
 800a63c:	2300      	movs	r3, #0
 800a63e:	930c      	str	r3, [sp, #48]	; 0x30
 800a640:	9b03      	ldr	r3, [sp, #12]
 800a642:	2b00      	cmp	r3, #0
 800a644:	db38      	blt.n	800a6b8 <_dtoa_r+0x220>
 800a646:	9a03      	ldr	r2, [sp, #12]
 800a648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a64a:	4694      	mov	ip, r2
 800a64c:	4463      	add	r3, ip
 800a64e:	930c      	str	r3, [sp, #48]	; 0x30
 800a650:	2300      	movs	r3, #0
 800a652:	9213      	str	r2, [sp, #76]	; 0x4c
 800a654:	930d      	str	r3, [sp, #52]	; 0x34
 800a656:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a658:	2401      	movs	r4, #1
 800a65a:	2b09      	cmp	r3, #9
 800a65c:	d867      	bhi.n	800a72e <_dtoa_r+0x296>
 800a65e:	2b05      	cmp	r3, #5
 800a660:	dd02      	ble.n	800a668 <_dtoa_r+0x1d0>
 800a662:	2400      	movs	r4, #0
 800a664:	3b04      	subs	r3, #4
 800a666:	9322      	str	r3, [sp, #136]	; 0x88
 800a668:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a66a:	1e98      	subs	r0, r3, #2
 800a66c:	2803      	cmp	r0, #3
 800a66e:	d867      	bhi.n	800a740 <_dtoa_r+0x2a8>
 800a670:	f7f5 fd52 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a674:	5b383a2b 	.word	0x5b383a2b
 800a678:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a67a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a67c:	18f6      	adds	r6, r6, r3
 800a67e:	4b68      	ldr	r3, [pc, #416]	; (800a820 <_dtoa_r+0x388>)
 800a680:	18f2      	adds	r2, r6, r3
 800a682:	2a20      	cmp	r2, #32
 800a684:	dd0f      	ble.n	800a6a6 <_dtoa_r+0x20e>
 800a686:	2340      	movs	r3, #64	; 0x40
 800a688:	1a9b      	subs	r3, r3, r2
 800a68a:	409f      	lsls	r7, r3
 800a68c:	4b65      	ldr	r3, [pc, #404]	; (800a824 <_dtoa_r+0x38c>)
 800a68e:	0038      	movs	r0, r7
 800a690:	18f3      	adds	r3, r6, r3
 800a692:	40dc      	lsrs	r4, r3
 800a694:	4320      	orrs	r0, r4
 800a696:	f7f8 f815 	bl	80026c4 <__aeabi_ui2d>
 800a69a:	2201      	movs	r2, #1
 800a69c:	4b62      	ldr	r3, [pc, #392]	; (800a828 <_dtoa_r+0x390>)
 800a69e:	1e77      	subs	r7, r6, #1
 800a6a0:	18cb      	adds	r3, r1, r3
 800a6a2:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6a4:	e776      	b.n	800a594 <_dtoa_r+0xfc>
 800a6a6:	2320      	movs	r3, #32
 800a6a8:	0020      	movs	r0, r4
 800a6aa:	1a9b      	subs	r3, r3, r2
 800a6ac:	4098      	lsls	r0, r3
 800a6ae:	e7f2      	b.n	800a696 <_dtoa_r+0x1fe>
 800a6b0:	9016      	str	r0, [sp, #88]	; 0x58
 800a6b2:	e7ba      	b.n	800a62a <_dtoa_r+0x192>
 800a6b4:	920c      	str	r2, [sp, #48]	; 0x30
 800a6b6:	e7c3      	b.n	800a640 <_dtoa_r+0x1a8>
 800a6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ba:	9a03      	ldr	r2, [sp, #12]
 800a6bc:	1a9b      	subs	r3, r3, r2
 800a6be:	930a      	str	r3, [sp, #40]	; 0x28
 800a6c0:	4253      	negs	r3, r2
 800a6c2:	930d      	str	r3, [sp, #52]	; 0x34
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6c8:	e7c5      	b.n	800a656 <_dtoa_r+0x1be>
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6d2:	9307      	str	r3, [sp, #28]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dc13      	bgt.n	800a700 <_dtoa_r+0x268>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	001a      	movs	r2, r3
 800a6dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6de:	9307      	str	r3, [sp, #28]
 800a6e0:	9223      	str	r2, [sp, #140]	; 0x8c
 800a6e2:	e00d      	b.n	800a700 <_dtoa_r+0x268>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e7f1      	b.n	800a6cc <_dtoa_r+0x234>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a6ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6ee:	4694      	mov	ip, r2
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	4463      	add	r3, ip
 800a6f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	9307      	str	r3, [sp, #28]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	dc00      	bgt.n	800a700 <_dtoa_r+0x268>
 800a6fe:	2301      	movs	r3, #1
 800a700:	9a04      	ldr	r2, [sp, #16]
 800a702:	2100      	movs	r1, #0
 800a704:	69d0      	ldr	r0, [r2, #28]
 800a706:	2204      	movs	r2, #4
 800a708:	0015      	movs	r5, r2
 800a70a:	3514      	adds	r5, #20
 800a70c:	429d      	cmp	r5, r3
 800a70e:	d91b      	bls.n	800a748 <_dtoa_r+0x2b0>
 800a710:	6041      	str	r1, [r0, #4]
 800a712:	9804      	ldr	r0, [sp, #16]
 800a714:	f000 fdd6 	bl	800b2c4 <_Balloc>
 800a718:	9006      	str	r0, [sp, #24]
 800a71a:	2800      	cmp	r0, #0
 800a71c:	d117      	bne.n	800a74e <_dtoa_r+0x2b6>
 800a71e:	21b0      	movs	r1, #176	; 0xb0
 800a720:	4b42      	ldr	r3, [pc, #264]	; (800a82c <_dtoa_r+0x394>)
 800a722:	482e      	ldr	r0, [pc, #184]	; (800a7dc <_dtoa_r+0x344>)
 800a724:	9a06      	ldr	r2, [sp, #24]
 800a726:	31ff      	adds	r1, #255	; 0xff
 800a728:	e6cb      	b.n	800a4c2 <_dtoa_r+0x2a>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e7dd      	b.n	800a6ea <_dtoa_r+0x252>
 800a72e:	2300      	movs	r3, #0
 800a730:	940f      	str	r4, [sp, #60]	; 0x3c
 800a732:	9322      	str	r3, [sp, #136]	; 0x88
 800a734:	3b01      	subs	r3, #1
 800a736:	930b      	str	r3, [sp, #44]	; 0x2c
 800a738:	9307      	str	r3, [sp, #28]
 800a73a:	2200      	movs	r2, #0
 800a73c:	3313      	adds	r3, #19
 800a73e:	e7cf      	b.n	800a6e0 <_dtoa_r+0x248>
 800a740:	2301      	movs	r3, #1
 800a742:	930f      	str	r3, [sp, #60]	; 0x3c
 800a744:	3b02      	subs	r3, #2
 800a746:	e7f6      	b.n	800a736 <_dtoa_r+0x29e>
 800a748:	3101      	adds	r1, #1
 800a74a:	0052      	lsls	r2, r2, #1
 800a74c:	e7dc      	b.n	800a708 <_dtoa_r+0x270>
 800a74e:	9b04      	ldr	r3, [sp, #16]
 800a750:	9a06      	ldr	r2, [sp, #24]
 800a752:	69db      	ldr	r3, [r3, #28]
 800a754:	601a      	str	r2, [r3, #0]
 800a756:	9b07      	ldr	r3, [sp, #28]
 800a758:	2b0e      	cmp	r3, #14
 800a75a:	d900      	bls.n	800a75e <_dtoa_r+0x2c6>
 800a75c:	e0e5      	b.n	800a92a <_dtoa_r+0x492>
 800a75e:	2c00      	cmp	r4, #0
 800a760:	d100      	bne.n	800a764 <_dtoa_r+0x2cc>
 800a762:	e0e2      	b.n	800a92a <_dtoa_r+0x492>
 800a764:	9b03      	ldr	r3, [sp, #12]
 800a766:	2b00      	cmp	r3, #0
 800a768:	dd64      	ble.n	800a834 <_dtoa_r+0x39c>
 800a76a:	210f      	movs	r1, #15
 800a76c:	9a03      	ldr	r2, [sp, #12]
 800a76e:	4b2b      	ldr	r3, [pc, #172]	; (800a81c <_dtoa_r+0x384>)
 800a770:	400a      	ands	r2, r1
 800a772:	00d2      	lsls	r2, r2, #3
 800a774:	189b      	adds	r3, r3, r2
 800a776:	681e      	ldr	r6, [r3, #0]
 800a778:	685f      	ldr	r7, [r3, #4]
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	2402      	movs	r4, #2
 800a77e:	111d      	asrs	r5, r3, #4
 800a780:	05db      	lsls	r3, r3, #23
 800a782:	d50a      	bpl.n	800a79a <_dtoa_r+0x302>
 800a784:	4b2a      	ldr	r3, [pc, #168]	; (800a830 <_dtoa_r+0x398>)
 800a786:	400d      	ands	r5, r1
 800a788:	6a1a      	ldr	r2, [r3, #32]
 800a78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a78e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a790:	f7f6 fcd6 	bl	8001140 <__aeabi_ddiv>
 800a794:	9008      	str	r0, [sp, #32]
 800a796:	9109      	str	r1, [sp, #36]	; 0x24
 800a798:	3401      	adds	r4, #1
 800a79a:	4b25      	ldr	r3, [pc, #148]	; (800a830 <_dtoa_r+0x398>)
 800a79c:	930e      	str	r3, [sp, #56]	; 0x38
 800a79e:	2d00      	cmp	r5, #0
 800a7a0:	d108      	bne.n	800a7b4 <_dtoa_r+0x31c>
 800a7a2:	9808      	ldr	r0, [sp, #32]
 800a7a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7a6:	0032      	movs	r2, r6
 800a7a8:	003b      	movs	r3, r7
 800a7aa:	f7f6 fcc9 	bl	8001140 <__aeabi_ddiv>
 800a7ae:	9008      	str	r0, [sp, #32]
 800a7b0:	9109      	str	r1, [sp, #36]	; 0x24
 800a7b2:	e05a      	b.n	800a86a <_dtoa_r+0x3d2>
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	421d      	tst	r5, r3
 800a7b8:	d009      	beq.n	800a7ce <_dtoa_r+0x336>
 800a7ba:	18e4      	adds	r4, r4, r3
 800a7bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7be:	0030      	movs	r0, r6
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	0039      	movs	r1, r7
 800a7c6:	f7f7 f8b5 	bl	8001934 <__aeabi_dmul>
 800a7ca:	0006      	movs	r6, r0
 800a7cc:	000f      	movs	r7, r1
 800a7ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7d0:	106d      	asrs	r5, r5, #1
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	e7e2      	b.n	800a79c <_dtoa_r+0x304>
 800a7d6:	46c0      	nop			; (mov r8, r8)
 800a7d8:	0800e25e 	.word	0x0800e25e
 800a7dc:	0800e275 	.word	0x0800e275
 800a7e0:	7ff00000 	.word	0x7ff00000
 800a7e4:	0000270f 	.word	0x0000270f
 800a7e8:	0800e25a 	.word	0x0800e25a
 800a7ec:	0800e25d 	.word	0x0800e25d
 800a7f0:	0800e228 	.word	0x0800e228
 800a7f4:	0800e229 	.word	0x0800e229
 800a7f8:	3ff00000 	.word	0x3ff00000
 800a7fc:	fffffc01 	.word	0xfffffc01
 800a800:	3ff80000 	.word	0x3ff80000
 800a804:	636f4361 	.word	0x636f4361
 800a808:	3fd287a7 	.word	0x3fd287a7
 800a80c:	8b60c8b3 	.word	0x8b60c8b3
 800a810:	3fc68a28 	.word	0x3fc68a28
 800a814:	509f79fb 	.word	0x509f79fb
 800a818:	3fd34413 	.word	0x3fd34413
 800a81c:	0800e360 	.word	0x0800e360
 800a820:	00000432 	.word	0x00000432
 800a824:	00000412 	.word	0x00000412
 800a828:	fe100000 	.word	0xfe100000
 800a82c:	0800e2cd 	.word	0x0800e2cd
 800a830:	0800e338 	.word	0x0800e338
 800a834:	9b03      	ldr	r3, [sp, #12]
 800a836:	2402      	movs	r4, #2
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d016      	beq.n	800a86a <_dtoa_r+0x3d2>
 800a83c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a83e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a840:	220f      	movs	r2, #15
 800a842:	425d      	negs	r5, r3
 800a844:	402a      	ands	r2, r5
 800a846:	4bdd      	ldr	r3, [pc, #884]	; (800abbc <_dtoa_r+0x724>)
 800a848:	00d2      	lsls	r2, r2, #3
 800a84a:	189b      	adds	r3, r3, r2
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	f7f7 f870 	bl	8001934 <__aeabi_dmul>
 800a854:	2701      	movs	r7, #1
 800a856:	2300      	movs	r3, #0
 800a858:	9008      	str	r0, [sp, #32]
 800a85a:	9109      	str	r1, [sp, #36]	; 0x24
 800a85c:	4ed8      	ldr	r6, [pc, #864]	; (800abc0 <_dtoa_r+0x728>)
 800a85e:	112d      	asrs	r5, r5, #4
 800a860:	2d00      	cmp	r5, #0
 800a862:	d000      	beq.n	800a866 <_dtoa_r+0x3ce>
 800a864:	e091      	b.n	800a98a <_dtoa_r+0x4f2>
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1a1      	bne.n	800a7ae <_dtoa_r+0x316>
 800a86a:	9e08      	ldr	r6, [sp, #32]
 800a86c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a86e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a870:	2b00      	cmp	r3, #0
 800a872:	d100      	bne.n	800a876 <_dtoa_r+0x3de>
 800a874:	e094      	b.n	800a9a0 <_dtoa_r+0x508>
 800a876:	2200      	movs	r2, #0
 800a878:	0030      	movs	r0, r6
 800a87a:	0039      	movs	r1, r7
 800a87c:	4bd1      	ldr	r3, [pc, #836]	; (800abc4 <_dtoa_r+0x72c>)
 800a87e:	f7f5 fdeb 	bl	8000458 <__aeabi_dcmplt>
 800a882:	2800      	cmp	r0, #0
 800a884:	d100      	bne.n	800a888 <_dtoa_r+0x3f0>
 800a886:	e08b      	b.n	800a9a0 <_dtoa_r+0x508>
 800a888:	9b07      	ldr	r3, [sp, #28]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d100      	bne.n	800a890 <_dtoa_r+0x3f8>
 800a88e:	e087      	b.n	800a9a0 <_dtoa_r+0x508>
 800a890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a892:	2b00      	cmp	r3, #0
 800a894:	dd45      	ble.n	800a922 <_dtoa_r+0x48a>
 800a896:	9b03      	ldr	r3, [sp, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	3b01      	subs	r3, #1
 800a89c:	930e      	str	r3, [sp, #56]	; 0x38
 800a89e:	0030      	movs	r0, r6
 800a8a0:	4bc9      	ldr	r3, [pc, #804]	; (800abc8 <_dtoa_r+0x730>)
 800a8a2:	0039      	movs	r1, r7
 800a8a4:	f7f7 f846 	bl	8001934 <__aeabi_dmul>
 800a8a8:	9008      	str	r0, [sp, #32]
 800a8aa:	9109      	str	r1, [sp, #36]	; 0x24
 800a8ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ae:	3401      	adds	r4, #1
 800a8b0:	0020      	movs	r0, r4
 800a8b2:	9e08      	ldr	r6, [sp, #32]
 800a8b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a8b6:	9312      	str	r3, [sp, #72]	; 0x48
 800a8b8:	f7f7 fed4 	bl	8002664 <__aeabi_i2d>
 800a8bc:	0032      	movs	r2, r6
 800a8be:	003b      	movs	r3, r7
 800a8c0:	f7f7 f838 	bl	8001934 <__aeabi_dmul>
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	4bc1      	ldr	r3, [pc, #772]	; (800abcc <_dtoa_r+0x734>)
 800a8c8:	f7f6 f8da 	bl	8000a80 <__aeabi_dadd>
 800a8cc:	4ac0      	ldr	r2, [pc, #768]	; (800abd0 <_dtoa_r+0x738>)
 800a8ce:	9014      	str	r0, [sp, #80]	; 0x50
 800a8d0:	9115      	str	r1, [sp, #84]	; 0x54
 800a8d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a8d6:	4694      	mov	ip, r2
 800a8d8:	9308      	str	r3, [sp, #32]
 800a8da:	9409      	str	r4, [sp, #36]	; 0x24
 800a8dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8de:	4463      	add	r3, ip
 800a8e0:	9318      	str	r3, [sp, #96]	; 0x60
 800a8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d15e      	bne.n	800a9a8 <_dtoa_r+0x510>
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	4bb9      	ldr	r3, [pc, #740]	; (800abd4 <_dtoa_r+0x73c>)
 800a8ee:	0030      	movs	r0, r6
 800a8f0:	0039      	movs	r1, r7
 800a8f2:	f7f7 fae1 	bl	8001eb8 <__aeabi_dsub>
 800a8f6:	9a08      	ldr	r2, [sp, #32]
 800a8f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a8fa:	0004      	movs	r4, r0
 800a8fc:	000d      	movs	r5, r1
 800a8fe:	f7f5 fdbf 	bl	8000480 <__aeabi_dcmpgt>
 800a902:	2800      	cmp	r0, #0
 800a904:	d000      	beq.n	800a908 <_dtoa_r+0x470>
 800a906:	e2b3      	b.n	800ae70 <_dtoa_r+0x9d8>
 800a908:	48b3      	ldr	r0, [pc, #716]	; (800abd8 <_dtoa_r+0x740>)
 800a90a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a90c:	4684      	mov	ip, r0
 800a90e:	4461      	add	r1, ip
 800a910:	000b      	movs	r3, r1
 800a912:	0020      	movs	r0, r4
 800a914:	0029      	movs	r1, r5
 800a916:	9a08      	ldr	r2, [sp, #32]
 800a918:	f7f5 fd9e 	bl	8000458 <__aeabi_dcmplt>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d000      	beq.n	800a922 <_dtoa_r+0x48a>
 800a920:	e2a3      	b.n	800ae6a <_dtoa_r+0x9d2>
 800a922:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a924:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a926:	9308      	str	r3, [sp, #32]
 800a928:	9409      	str	r4, [sp, #36]	; 0x24
 800a92a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	da00      	bge.n	800a932 <_dtoa_r+0x49a>
 800a930:	e179      	b.n	800ac26 <_dtoa_r+0x78e>
 800a932:	9a03      	ldr	r2, [sp, #12]
 800a934:	2a0e      	cmp	r2, #14
 800a936:	dd00      	ble.n	800a93a <_dtoa_r+0x4a2>
 800a938:	e175      	b.n	800ac26 <_dtoa_r+0x78e>
 800a93a:	4ba0      	ldr	r3, [pc, #640]	; (800abbc <_dtoa_r+0x724>)
 800a93c:	00d2      	lsls	r2, r2, #3
 800a93e:	189b      	adds	r3, r3, r2
 800a940:	681e      	ldr	r6, [r3, #0]
 800a942:	685f      	ldr	r7, [r3, #4]
 800a944:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a946:	2b00      	cmp	r3, #0
 800a948:	db00      	blt.n	800a94c <_dtoa_r+0x4b4>
 800a94a:	e0e5      	b.n	800ab18 <_dtoa_r+0x680>
 800a94c:	9b07      	ldr	r3, [sp, #28]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	dd00      	ble.n	800a954 <_dtoa_r+0x4bc>
 800a952:	e0e1      	b.n	800ab18 <_dtoa_r+0x680>
 800a954:	d000      	beq.n	800a958 <_dtoa_r+0x4c0>
 800a956:	e288      	b.n	800ae6a <_dtoa_r+0x9d2>
 800a958:	2200      	movs	r2, #0
 800a95a:	0030      	movs	r0, r6
 800a95c:	0039      	movs	r1, r7
 800a95e:	4b9d      	ldr	r3, [pc, #628]	; (800abd4 <_dtoa_r+0x73c>)
 800a960:	f7f6 ffe8 	bl	8001934 <__aeabi_dmul>
 800a964:	9a08      	ldr	r2, [sp, #32]
 800a966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a968:	f7f5 fd94 	bl	8000494 <__aeabi_dcmpge>
 800a96c:	9e07      	ldr	r6, [sp, #28]
 800a96e:	0037      	movs	r7, r6
 800a970:	2800      	cmp	r0, #0
 800a972:	d000      	beq.n	800a976 <_dtoa_r+0x4de>
 800a974:	e25f      	b.n	800ae36 <_dtoa_r+0x99e>
 800a976:	9b06      	ldr	r3, [sp, #24]
 800a978:	9a06      	ldr	r2, [sp, #24]
 800a97a:	3301      	adds	r3, #1
 800a97c:	9308      	str	r3, [sp, #32]
 800a97e:	2331      	movs	r3, #49	; 0x31
 800a980:	7013      	strb	r3, [r2, #0]
 800a982:	9b03      	ldr	r3, [sp, #12]
 800a984:	3301      	adds	r3, #1
 800a986:	9303      	str	r3, [sp, #12]
 800a988:	e25a      	b.n	800ae40 <_dtoa_r+0x9a8>
 800a98a:	423d      	tst	r5, r7
 800a98c:	d005      	beq.n	800a99a <_dtoa_r+0x502>
 800a98e:	6832      	ldr	r2, [r6, #0]
 800a990:	6873      	ldr	r3, [r6, #4]
 800a992:	f7f6 ffcf 	bl	8001934 <__aeabi_dmul>
 800a996:	003b      	movs	r3, r7
 800a998:	3401      	adds	r4, #1
 800a99a:	106d      	asrs	r5, r5, #1
 800a99c:	3608      	adds	r6, #8
 800a99e:	e75f      	b.n	800a860 <_dtoa_r+0x3c8>
 800a9a0:	9b03      	ldr	r3, [sp, #12]
 800a9a2:	930e      	str	r3, [sp, #56]	; 0x38
 800a9a4:	9b07      	ldr	r3, [sp, #28]
 800a9a6:	e783      	b.n	800a8b0 <_dtoa_r+0x418>
 800a9a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9aa:	4b84      	ldr	r3, [pc, #528]	; (800abbc <_dtoa_r+0x724>)
 800a9ac:	3a01      	subs	r2, #1
 800a9ae:	00d2      	lsls	r2, r2, #3
 800a9b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9b2:	189b      	adds	r3, r3, r2
 800a9b4:	9c08      	ldr	r4, [sp, #32]
 800a9b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	2900      	cmp	r1, #0
 800a9be:	d051      	beq.n	800aa64 <_dtoa_r+0x5cc>
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	4986      	ldr	r1, [pc, #536]	; (800abdc <_dtoa_r+0x744>)
 800a9c4:	f7f6 fbbc 	bl	8001140 <__aeabi_ddiv>
 800a9c8:	0022      	movs	r2, r4
 800a9ca:	002b      	movs	r3, r5
 800a9cc:	f7f7 fa74 	bl	8001eb8 <__aeabi_dsub>
 800a9d0:	9a06      	ldr	r2, [sp, #24]
 800a9d2:	0004      	movs	r4, r0
 800a9d4:	4694      	mov	ip, r2
 800a9d6:	000d      	movs	r5, r1
 800a9d8:	9b06      	ldr	r3, [sp, #24]
 800a9da:	9314      	str	r3, [sp, #80]	; 0x50
 800a9dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9de:	4463      	add	r3, ip
 800a9e0:	9318      	str	r3, [sp, #96]	; 0x60
 800a9e2:	0039      	movs	r1, r7
 800a9e4:	0030      	movs	r0, r6
 800a9e6:	f7f7 fe07 	bl	80025f8 <__aeabi_d2iz>
 800a9ea:	9012      	str	r0, [sp, #72]	; 0x48
 800a9ec:	f7f7 fe3a 	bl	8002664 <__aeabi_i2d>
 800a9f0:	0002      	movs	r2, r0
 800a9f2:	000b      	movs	r3, r1
 800a9f4:	0030      	movs	r0, r6
 800a9f6:	0039      	movs	r1, r7
 800a9f8:	f7f7 fa5e 	bl	8001eb8 <__aeabi_dsub>
 800a9fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa00:	3301      	adds	r3, #1
 800aa02:	9308      	str	r3, [sp, #32]
 800aa04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa06:	0006      	movs	r6, r0
 800aa08:	3330      	adds	r3, #48	; 0x30
 800aa0a:	7013      	strb	r3, [r2, #0]
 800aa0c:	0022      	movs	r2, r4
 800aa0e:	002b      	movs	r3, r5
 800aa10:	000f      	movs	r7, r1
 800aa12:	f7f5 fd21 	bl	8000458 <__aeabi_dcmplt>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d174      	bne.n	800ab04 <_dtoa_r+0x66c>
 800aa1a:	0032      	movs	r2, r6
 800aa1c:	003b      	movs	r3, r7
 800aa1e:	2000      	movs	r0, #0
 800aa20:	4968      	ldr	r1, [pc, #416]	; (800abc4 <_dtoa_r+0x72c>)
 800aa22:	f7f7 fa49 	bl	8001eb8 <__aeabi_dsub>
 800aa26:	0022      	movs	r2, r4
 800aa28:	002b      	movs	r3, r5
 800aa2a:	f7f5 fd15 	bl	8000458 <__aeabi_dcmplt>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d000      	beq.n	800aa34 <_dtoa_r+0x59c>
 800aa32:	e0d7      	b.n	800abe4 <_dtoa_r+0x74c>
 800aa34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800aa36:	9a08      	ldr	r2, [sp, #32]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d100      	bne.n	800aa3e <_dtoa_r+0x5a6>
 800aa3c:	e771      	b.n	800a922 <_dtoa_r+0x48a>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	0020      	movs	r0, r4
 800aa42:	0029      	movs	r1, r5
 800aa44:	4b60      	ldr	r3, [pc, #384]	; (800abc8 <_dtoa_r+0x730>)
 800aa46:	f7f6 ff75 	bl	8001934 <__aeabi_dmul>
 800aa4a:	4b5f      	ldr	r3, [pc, #380]	; (800abc8 <_dtoa_r+0x730>)
 800aa4c:	0004      	movs	r4, r0
 800aa4e:	000d      	movs	r5, r1
 800aa50:	0030      	movs	r0, r6
 800aa52:	0039      	movs	r1, r7
 800aa54:	2200      	movs	r2, #0
 800aa56:	f7f6 ff6d 	bl	8001934 <__aeabi_dmul>
 800aa5a:	9b08      	ldr	r3, [sp, #32]
 800aa5c:	0006      	movs	r6, r0
 800aa5e:	000f      	movs	r7, r1
 800aa60:	9314      	str	r3, [sp, #80]	; 0x50
 800aa62:	e7be      	b.n	800a9e2 <_dtoa_r+0x54a>
 800aa64:	0020      	movs	r0, r4
 800aa66:	0029      	movs	r1, r5
 800aa68:	f7f6 ff64 	bl	8001934 <__aeabi_dmul>
 800aa6c:	9a06      	ldr	r2, [sp, #24]
 800aa6e:	9b06      	ldr	r3, [sp, #24]
 800aa70:	4694      	mov	ip, r2
 800aa72:	9308      	str	r3, [sp, #32]
 800aa74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa76:	9014      	str	r0, [sp, #80]	; 0x50
 800aa78:	9115      	str	r1, [sp, #84]	; 0x54
 800aa7a:	4463      	add	r3, ip
 800aa7c:	9319      	str	r3, [sp, #100]	; 0x64
 800aa7e:	0030      	movs	r0, r6
 800aa80:	0039      	movs	r1, r7
 800aa82:	f7f7 fdb9 	bl	80025f8 <__aeabi_d2iz>
 800aa86:	9018      	str	r0, [sp, #96]	; 0x60
 800aa88:	f7f7 fdec 	bl	8002664 <__aeabi_i2d>
 800aa8c:	0002      	movs	r2, r0
 800aa8e:	000b      	movs	r3, r1
 800aa90:	0030      	movs	r0, r6
 800aa92:	0039      	movs	r1, r7
 800aa94:	f7f7 fa10 	bl	8001eb8 <__aeabi_dsub>
 800aa98:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800aa9a:	9b08      	ldr	r3, [sp, #32]
 800aa9c:	3630      	adds	r6, #48	; 0x30
 800aa9e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aaa0:	701e      	strb	r6, [r3, #0]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	0004      	movs	r4, r0
 800aaa6:	000d      	movs	r5, r1
 800aaa8:	9308      	str	r3, [sp, #32]
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d12d      	bne.n	800ab0a <_dtoa_r+0x672>
 800aaae:	9814      	ldr	r0, [sp, #80]	; 0x50
 800aab0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800aab2:	9a06      	ldr	r2, [sp, #24]
 800aab4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aab6:	4694      	mov	ip, r2
 800aab8:	4463      	add	r3, ip
 800aaba:	2200      	movs	r2, #0
 800aabc:	9308      	str	r3, [sp, #32]
 800aabe:	4b47      	ldr	r3, [pc, #284]	; (800abdc <_dtoa_r+0x744>)
 800aac0:	f7f5 ffde 	bl	8000a80 <__aeabi_dadd>
 800aac4:	0002      	movs	r2, r0
 800aac6:	000b      	movs	r3, r1
 800aac8:	0020      	movs	r0, r4
 800aaca:	0029      	movs	r1, r5
 800aacc:	f7f5 fcd8 	bl	8000480 <__aeabi_dcmpgt>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d000      	beq.n	800aad6 <_dtoa_r+0x63e>
 800aad4:	e086      	b.n	800abe4 <_dtoa_r+0x74c>
 800aad6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aada:	2000      	movs	r0, #0
 800aadc:	493f      	ldr	r1, [pc, #252]	; (800abdc <_dtoa_r+0x744>)
 800aade:	f7f7 f9eb 	bl	8001eb8 <__aeabi_dsub>
 800aae2:	0002      	movs	r2, r0
 800aae4:	000b      	movs	r3, r1
 800aae6:	0020      	movs	r0, r4
 800aae8:	0029      	movs	r1, r5
 800aaea:	f7f5 fcb5 	bl	8000458 <__aeabi_dcmplt>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d100      	bne.n	800aaf4 <_dtoa_r+0x65c>
 800aaf2:	e716      	b.n	800a922 <_dtoa_r+0x48a>
 800aaf4:	9b08      	ldr	r3, [sp, #32]
 800aaf6:	001a      	movs	r2, r3
 800aaf8:	3a01      	subs	r2, #1
 800aafa:	9208      	str	r2, [sp, #32]
 800aafc:	7812      	ldrb	r2, [r2, #0]
 800aafe:	2a30      	cmp	r2, #48	; 0x30
 800ab00:	d0f8      	beq.n	800aaf4 <_dtoa_r+0x65c>
 800ab02:	9308      	str	r3, [sp, #32]
 800ab04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab06:	9303      	str	r3, [sp, #12]
 800ab08:	e046      	b.n	800ab98 <_dtoa_r+0x700>
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	4b2e      	ldr	r3, [pc, #184]	; (800abc8 <_dtoa_r+0x730>)
 800ab0e:	f7f6 ff11 	bl	8001934 <__aeabi_dmul>
 800ab12:	0006      	movs	r6, r0
 800ab14:	000f      	movs	r7, r1
 800ab16:	e7b2      	b.n	800aa7e <_dtoa_r+0x5e6>
 800ab18:	9b06      	ldr	r3, [sp, #24]
 800ab1a:	9a06      	ldr	r2, [sp, #24]
 800ab1c:	930a      	str	r3, [sp, #40]	; 0x28
 800ab1e:	9b07      	ldr	r3, [sp, #28]
 800ab20:	9c08      	ldr	r4, [sp, #32]
 800ab22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab24:	3b01      	subs	r3, #1
 800ab26:	189b      	adds	r3, r3, r2
 800ab28:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab2a:	0032      	movs	r2, r6
 800ab2c:	003b      	movs	r3, r7
 800ab2e:	0020      	movs	r0, r4
 800ab30:	0029      	movs	r1, r5
 800ab32:	f7f6 fb05 	bl	8001140 <__aeabi_ddiv>
 800ab36:	f7f7 fd5f 	bl	80025f8 <__aeabi_d2iz>
 800ab3a:	9007      	str	r0, [sp, #28]
 800ab3c:	f7f7 fd92 	bl	8002664 <__aeabi_i2d>
 800ab40:	0032      	movs	r2, r6
 800ab42:	003b      	movs	r3, r7
 800ab44:	f7f6 fef6 	bl	8001934 <__aeabi_dmul>
 800ab48:	0002      	movs	r2, r0
 800ab4a:	000b      	movs	r3, r1
 800ab4c:	0020      	movs	r0, r4
 800ab4e:	0029      	movs	r1, r5
 800ab50:	f7f7 f9b2 	bl	8001eb8 <__aeabi_dsub>
 800ab54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab56:	001a      	movs	r2, r3
 800ab58:	3201      	adds	r2, #1
 800ab5a:	920a      	str	r2, [sp, #40]	; 0x28
 800ab5c:	9208      	str	r2, [sp, #32]
 800ab5e:	9a07      	ldr	r2, [sp, #28]
 800ab60:	3230      	adds	r2, #48	; 0x30
 800ab62:	701a      	strb	r2, [r3, #0]
 800ab64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d14f      	bne.n	800ac0a <_dtoa_r+0x772>
 800ab6a:	0002      	movs	r2, r0
 800ab6c:	000b      	movs	r3, r1
 800ab6e:	f7f5 ff87 	bl	8000a80 <__aeabi_dadd>
 800ab72:	0032      	movs	r2, r6
 800ab74:	003b      	movs	r3, r7
 800ab76:	0004      	movs	r4, r0
 800ab78:	000d      	movs	r5, r1
 800ab7a:	f7f5 fc81 	bl	8000480 <__aeabi_dcmpgt>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d12e      	bne.n	800abe0 <_dtoa_r+0x748>
 800ab82:	0032      	movs	r2, r6
 800ab84:	003b      	movs	r3, r7
 800ab86:	0020      	movs	r0, r4
 800ab88:	0029      	movs	r1, r5
 800ab8a:	f7f5 fc5f 	bl	800044c <__aeabi_dcmpeq>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d002      	beq.n	800ab98 <_dtoa_r+0x700>
 800ab92:	9b07      	ldr	r3, [sp, #28]
 800ab94:	07de      	lsls	r6, r3, #31
 800ab96:	d423      	bmi.n	800abe0 <_dtoa_r+0x748>
 800ab98:	9905      	ldr	r1, [sp, #20]
 800ab9a:	9804      	ldr	r0, [sp, #16]
 800ab9c:	f000 fbd6 	bl	800b34c <_Bfree>
 800aba0:	2300      	movs	r3, #0
 800aba2:	9a08      	ldr	r2, [sp, #32]
 800aba4:	7013      	strb	r3, [r2, #0]
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abaa:	3301      	adds	r3, #1
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d100      	bne.n	800abb6 <_dtoa_r+0x71e>
 800abb4:	e4ba      	b.n	800a52c <_dtoa_r+0x94>
 800abb6:	9a08      	ldr	r2, [sp, #32]
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	e4b7      	b.n	800a52c <_dtoa_r+0x94>
 800abbc:	0800e360 	.word	0x0800e360
 800abc0:	0800e338 	.word	0x0800e338
 800abc4:	3ff00000 	.word	0x3ff00000
 800abc8:	40240000 	.word	0x40240000
 800abcc:	401c0000 	.word	0x401c0000
 800abd0:	fcc00000 	.word	0xfcc00000
 800abd4:	40140000 	.word	0x40140000
 800abd8:	7cc00000 	.word	0x7cc00000
 800abdc:	3fe00000 	.word	0x3fe00000
 800abe0:	9b03      	ldr	r3, [sp, #12]
 800abe2:	930e      	str	r3, [sp, #56]	; 0x38
 800abe4:	9b08      	ldr	r3, [sp, #32]
 800abe6:	9308      	str	r3, [sp, #32]
 800abe8:	3b01      	subs	r3, #1
 800abea:	781a      	ldrb	r2, [r3, #0]
 800abec:	2a39      	cmp	r2, #57	; 0x39
 800abee:	d108      	bne.n	800ac02 <_dtoa_r+0x76a>
 800abf0:	9a06      	ldr	r2, [sp, #24]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d1f7      	bne.n	800abe6 <_dtoa_r+0x74e>
 800abf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abf8:	9906      	ldr	r1, [sp, #24]
 800abfa:	3201      	adds	r2, #1
 800abfc:	920e      	str	r2, [sp, #56]	; 0x38
 800abfe:	2230      	movs	r2, #48	; 0x30
 800ac00:	700a      	strb	r2, [r1, #0]
 800ac02:	781a      	ldrb	r2, [r3, #0]
 800ac04:	3201      	adds	r2, #1
 800ac06:	701a      	strb	r2, [r3, #0]
 800ac08:	e77c      	b.n	800ab04 <_dtoa_r+0x66c>
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	4ba9      	ldr	r3, [pc, #676]	; (800aeb4 <_dtoa_r+0xa1c>)
 800ac0e:	f7f6 fe91 	bl	8001934 <__aeabi_dmul>
 800ac12:	2200      	movs	r2, #0
 800ac14:	2300      	movs	r3, #0
 800ac16:	0004      	movs	r4, r0
 800ac18:	000d      	movs	r5, r1
 800ac1a:	f7f5 fc17 	bl	800044c <__aeabi_dcmpeq>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d100      	bne.n	800ac24 <_dtoa_r+0x78c>
 800ac22:	e782      	b.n	800ab2a <_dtoa_r+0x692>
 800ac24:	e7b8      	b.n	800ab98 <_dtoa_r+0x700>
 800ac26:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800ac28:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ac2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ac2c:	2f00      	cmp	r7, #0
 800ac2e:	d012      	beq.n	800ac56 <_dtoa_r+0x7be>
 800ac30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ac32:	2a01      	cmp	r2, #1
 800ac34:	dc6e      	bgt.n	800ad14 <_dtoa_r+0x87c>
 800ac36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ac38:	2a00      	cmp	r2, #0
 800ac3a:	d065      	beq.n	800ad08 <_dtoa_r+0x870>
 800ac3c:	4a9e      	ldr	r2, [pc, #632]	; (800aeb8 <_dtoa_r+0xa20>)
 800ac3e:	189b      	adds	r3, r3, r2
 800ac40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac42:	2101      	movs	r1, #1
 800ac44:	18d2      	adds	r2, r2, r3
 800ac46:	920a      	str	r2, [sp, #40]	; 0x28
 800ac48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac4a:	9804      	ldr	r0, [sp, #16]
 800ac4c:	18d3      	adds	r3, r2, r3
 800ac4e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac50:	f000 fc78 	bl	800b544 <__i2b>
 800ac54:	0007      	movs	r7, r0
 800ac56:	2c00      	cmp	r4, #0
 800ac58:	d00e      	beq.n	800ac78 <_dtoa_r+0x7e0>
 800ac5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	dd0b      	ble.n	800ac78 <_dtoa_r+0x7e0>
 800ac60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac62:	0023      	movs	r3, r4
 800ac64:	4294      	cmp	r4, r2
 800ac66:	dd00      	ble.n	800ac6a <_dtoa_r+0x7d2>
 800ac68:	0013      	movs	r3, r2
 800ac6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac6c:	1ae4      	subs	r4, r4, r3
 800ac6e:	1ad2      	subs	r2, r2, r3
 800ac70:	920a      	str	r2, [sp, #40]	; 0x28
 800ac72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac74:	1ad3      	subs	r3, r2, r3
 800ac76:	930c      	str	r3, [sp, #48]	; 0x30
 800ac78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d01e      	beq.n	800acbc <_dtoa_r+0x824>
 800ac7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d05c      	beq.n	800ad3e <_dtoa_r+0x8a6>
 800ac84:	2d00      	cmp	r5, #0
 800ac86:	dd10      	ble.n	800acaa <_dtoa_r+0x812>
 800ac88:	0039      	movs	r1, r7
 800ac8a:	002a      	movs	r2, r5
 800ac8c:	9804      	ldr	r0, [sp, #16]
 800ac8e:	f000 fd21 	bl	800b6d4 <__pow5mult>
 800ac92:	9a05      	ldr	r2, [sp, #20]
 800ac94:	0001      	movs	r1, r0
 800ac96:	0007      	movs	r7, r0
 800ac98:	9804      	ldr	r0, [sp, #16]
 800ac9a:	f000 fc6b 	bl	800b574 <__multiply>
 800ac9e:	0006      	movs	r6, r0
 800aca0:	9905      	ldr	r1, [sp, #20]
 800aca2:	9804      	ldr	r0, [sp, #16]
 800aca4:	f000 fb52 	bl	800b34c <_Bfree>
 800aca8:	9605      	str	r6, [sp, #20]
 800acaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acac:	1b5a      	subs	r2, r3, r5
 800acae:	42ab      	cmp	r3, r5
 800acb0:	d004      	beq.n	800acbc <_dtoa_r+0x824>
 800acb2:	9905      	ldr	r1, [sp, #20]
 800acb4:	9804      	ldr	r0, [sp, #16]
 800acb6:	f000 fd0d 	bl	800b6d4 <__pow5mult>
 800acba:	9005      	str	r0, [sp, #20]
 800acbc:	2101      	movs	r1, #1
 800acbe:	9804      	ldr	r0, [sp, #16]
 800acc0:	f000 fc40 	bl	800b544 <__i2b>
 800acc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acc6:	0006      	movs	r6, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	dd3a      	ble.n	800ad42 <_dtoa_r+0x8aa>
 800accc:	001a      	movs	r2, r3
 800acce:	0001      	movs	r1, r0
 800acd0:	9804      	ldr	r0, [sp, #16]
 800acd2:	f000 fcff 	bl	800b6d4 <__pow5mult>
 800acd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800acd8:	0006      	movs	r6, r0
 800acda:	2500      	movs	r5, #0
 800acdc:	2b01      	cmp	r3, #1
 800acde:	dc38      	bgt.n	800ad52 <_dtoa_r+0x8ba>
 800ace0:	2500      	movs	r5, #0
 800ace2:	9b08      	ldr	r3, [sp, #32]
 800ace4:	42ab      	cmp	r3, r5
 800ace6:	d130      	bne.n	800ad4a <_dtoa_r+0x8b2>
 800ace8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acea:	031b      	lsls	r3, r3, #12
 800acec:	42ab      	cmp	r3, r5
 800acee:	d12c      	bne.n	800ad4a <_dtoa_r+0x8b2>
 800acf0:	4b72      	ldr	r3, [pc, #456]	; (800aebc <_dtoa_r+0xa24>)
 800acf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acf4:	4213      	tst	r3, r2
 800acf6:	d028      	beq.n	800ad4a <_dtoa_r+0x8b2>
 800acf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acfa:	3501      	adds	r5, #1
 800acfc:	3301      	adds	r3, #1
 800acfe:	930a      	str	r3, [sp, #40]	; 0x28
 800ad00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad02:	3301      	adds	r3, #1
 800ad04:	930c      	str	r3, [sp, #48]	; 0x30
 800ad06:	e020      	b.n	800ad4a <_dtoa_r+0x8b2>
 800ad08:	2336      	movs	r3, #54	; 0x36
 800ad0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad0c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ad0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad10:	1a9b      	subs	r3, r3, r2
 800ad12:	e795      	b.n	800ac40 <_dtoa_r+0x7a8>
 800ad14:	9b07      	ldr	r3, [sp, #28]
 800ad16:	1e5d      	subs	r5, r3, #1
 800ad18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad1a:	42ab      	cmp	r3, r5
 800ad1c:	db07      	blt.n	800ad2e <_dtoa_r+0x896>
 800ad1e:	1b5d      	subs	r5, r3, r5
 800ad20:	9b07      	ldr	r3, [sp, #28]
 800ad22:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	da8b      	bge.n	800ac40 <_dtoa_r+0x7a8>
 800ad28:	1ae4      	subs	r4, r4, r3
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e788      	b.n	800ac40 <_dtoa_r+0x7a8>
 800ad2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad32:	1aeb      	subs	r3, r5, r3
 800ad34:	18d3      	adds	r3, r2, r3
 800ad36:	950d      	str	r5, [sp, #52]	; 0x34
 800ad38:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad3a:	2500      	movs	r5, #0
 800ad3c:	e7f0      	b.n	800ad20 <_dtoa_r+0x888>
 800ad3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad40:	e7b7      	b.n	800acb2 <_dtoa_r+0x81a>
 800ad42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad44:	2500      	movs	r5, #0
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	ddca      	ble.n	800ace0 <_dtoa_r+0x848>
 800ad4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad4c:	2001      	movs	r0, #1
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d008      	beq.n	800ad64 <_dtoa_r+0x8cc>
 800ad52:	6933      	ldr	r3, [r6, #16]
 800ad54:	3303      	adds	r3, #3
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	18f3      	adds	r3, r6, r3
 800ad5a:	6858      	ldr	r0, [r3, #4]
 800ad5c:	f000 fbaa 	bl	800b4b4 <__hi0bits>
 800ad60:	2320      	movs	r3, #32
 800ad62:	1a18      	subs	r0, r3, r0
 800ad64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad66:	1818      	adds	r0, r3, r0
 800ad68:	0002      	movs	r2, r0
 800ad6a:	231f      	movs	r3, #31
 800ad6c:	401a      	ands	r2, r3
 800ad6e:	4218      	tst	r0, r3
 800ad70:	d047      	beq.n	800ae02 <_dtoa_r+0x96a>
 800ad72:	3301      	adds	r3, #1
 800ad74:	1a9b      	subs	r3, r3, r2
 800ad76:	2b04      	cmp	r3, #4
 800ad78:	dd3f      	ble.n	800adfa <_dtoa_r+0x962>
 800ad7a:	231c      	movs	r3, #28
 800ad7c:	1a9b      	subs	r3, r3, r2
 800ad7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad80:	18e4      	adds	r4, r4, r3
 800ad82:	18d2      	adds	r2, r2, r3
 800ad84:	920a      	str	r2, [sp, #40]	; 0x28
 800ad86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad88:	18d3      	adds	r3, r2, r3
 800ad8a:	930c      	str	r3, [sp, #48]	; 0x30
 800ad8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	dd05      	ble.n	800ad9e <_dtoa_r+0x906>
 800ad92:	001a      	movs	r2, r3
 800ad94:	9905      	ldr	r1, [sp, #20]
 800ad96:	9804      	ldr	r0, [sp, #16]
 800ad98:	f000 fcf8 	bl	800b78c <__lshift>
 800ad9c:	9005      	str	r0, [sp, #20]
 800ad9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dd05      	ble.n	800adb0 <_dtoa_r+0x918>
 800ada4:	0031      	movs	r1, r6
 800ada6:	001a      	movs	r2, r3
 800ada8:	9804      	ldr	r0, [sp, #16]
 800adaa:	f000 fcef 	bl	800b78c <__lshift>
 800adae:	0006      	movs	r6, r0
 800adb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d027      	beq.n	800ae06 <_dtoa_r+0x96e>
 800adb6:	0031      	movs	r1, r6
 800adb8:	9805      	ldr	r0, [sp, #20]
 800adba:	f000 fd55 	bl	800b868 <__mcmp>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	da21      	bge.n	800ae06 <_dtoa_r+0x96e>
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	220a      	movs	r2, #10
 800adc6:	3b01      	subs	r3, #1
 800adc8:	9303      	str	r3, [sp, #12]
 800adca:	9905      	ldr	r1, [sp, #20]
 800adcc:	2300      	movs	r3, #0
 800adce:	9804      	ldr	r0, [sp, #16]
 800add0:	f000 fae0 	bl	800b394 <__multadd>
 800add4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800add6:	9005      	str	r0, [sp, #20]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d100      	bne.n	800adde <_dtoa_r+0x946>
 800addc:	e15d      	b.n	800b09a <_dtoa_r+0xc02>
 800adde:	2300      	movs	r3, #0
 800ade0:	0039      	movs	r1, r7
 800ade2:	220a      	movs	r2, #10
 800ade4:	9804      	ldr	r0, [sp, #16]
 800ade6:	f000 fad5 	bl	800b394 <__multadd>
 800adea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adec:	0007      	movs	r7, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	dc49      	bgt.n	800ae86 <_dtoa_r+0x9ee>
 800adf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	dc0e      	bgt.n	800ae16 <_dtoa_r+0x97e>
 800adf8:	e045      	b.n	800ae86 <_dtoa_r+0x9ee>
 800adfa:	2b04      	cmp	r3, #4
 800adfc:	d0c6      	beq.n	800ad8c <_dtoa_r+0x8f4>
 800adfe:	331c      	adds	r3, #28
 800ae00:	e7bd      	b.n	800ad7e <_dtoa_r+0x8e6>
 800ae02:	0013      	movs	r3, r2
 800ae04:	e7fb      	b.n	800adfe <_dtoa_r+0x966>
 800ae06:	9b07      	ldr	r3, [sp, #28]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dc36      	bgt.n	800ae7a <_dtoa_r+0x9e2>
 800ae0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	dd33      	ble.n	800ae7a <_dtoa_r+0x9e2>
 800ae12:	9b07      	ldr	r3, [sp, #28]
 800ae14:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10c      	bne.n	800ae36 <_dtoa_r+0x99e>
 800ae1c:	0031      	movs	r1, r6
 800ae1e:	2205      	movs	r2, #5
 800ae20:	9804      	ldr	r0, [sp, #16]
 800ae22:	f000 fab7 	bl	800b394 <__multadd>
 800ae26:	0006      	movs	r6, r0
 800ae28:	0001      	movs	r1, r0
 800ae2a:	9805      	ldr	r0, [sp, #20]
 800ae2c:	f000 fd1c 	bl	800b868 <__mcmp>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	dd00      	ble.n	800ae36 <_dtoa_r+0x99e>
 800ae34:	e59f      	b.n	800a976 <_dtoa_r+0x4de>
 800ae36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae38:	43db      	mvns	r3, r3
 800ae3a:	9303      	str	r3, [sp, #12]
 800ae3c:	9b06      	ldr	r3, [sp, #24]
 800ae3e:	9308      	str	r3, [sp, #32]
 800ae40:	2500      	movs	r5, #0
 800ae42:	0031      	movs	r1, r6
 800ae44:	9804      	ldr	r0, [sp, #16]
 800ae46:	f000 fa81 	bl	800b34c <_Bfree>
 800ae4a:	2f00      	cmp	r7, #0
 800ae4c:	d100      	bne.n	800ae50 <_dtoa_r+0x9b8>
 800ae4e:	e6a3      	b.n	800ab98 <_dtoa_r+0x700>
 800ae50:	2d00      	cmp	r5, #0
 800ae52:	d005      	beq.n	800ae60 <_dtoa_r+0x9c8>
 800ae54:	42bd      	cmp	r5, r7
 800ae56:	d003      	beq.n	800ae60 <_dtoa_r+0x9c8>
 800ae58:	0029      	movs	r1, r5
 800ae5a:	9804      	ldr	r0, [sp, #16]
 800ae5c:	f000 fa76 	bl	800b34c <_Bfree>
 800ae60:	0039      	movs	r1, r7
 800ae62:	9804      	ldr	r0, [sp, #16]
 800ae64:	f000 fa72 	bl	800b34c <_Bfree>
 800ae68:	e696      	b.n	800ab98 <_dtoa_r+0x700>
 800ae6a:	2600      	movs	r6, #0
 800ae6c:	0037      	movs	r7, r6
 800ae6e:	e7e2      	b.n	800ae36 <_dtoa_r+0x99e>
 800ae70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae72:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ae74:	9303      	str	r3, [sp, #12]
 800ae76:	0037      	movs	r7, r6
 800ae78:	e57d      	b.n	800a976 <_dtoa_r+0x4de>
 800ae7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d100      	bne.n	800ae82 <_dtoa_r+0x9ea>
 800ae80:	e0c3      	b.n	800b00a <_dtoa_r+0xb72>
 800ae82:	9b07      	ldr	r3, [sp, #28]
 800ae84:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae86:	2c00      	cmp	r4, #0
 800ae88:	dd05      	ble.n	800ae96 <_dtoa_r+0x9fe>
 800ae8a:	0039      	movs	r1, r7
 800ae8c:	0022      	movs	r2, r4
 800ae8e:	9804      	ldr	r0, [sp, #16]
 800ae90:	f000 fc7c 	bl	800b78c <__lshift>
 800ae94:	0007      	movs	r7, r0
 800ae96:	0038      	movs	r0, r7
 800ae98:	2d00      	cmp	r5, #0
 800ae9a:	d024      	beq.n	800aee6 <_dtoa_r+0xa4e>
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	9804      	ldr	r0, [sp, #16]
 800aea0:	f000 fa10 	bl	800b2c4 <_Balloc>
 800aea4:	1e04      	subs	r4, r0, #0
 800aea6:	d111      	bne.n	800aecc <_dtoa_r+0xa34>
 800aea8:	0022      	movs	r2, r4
 800aeaa:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <_dtoa_r+0xa28>)
 800aeac:	4805      	ldr	r0, [pc, #20]	; (800aec4 <_dtoa_r+0xa2c>)
 800aeae:	4906      	ldr	r1, [pc, #24]	; (800aec8 <_dtoa_r+0xa30>)
 800aeb0:	f7ff fb07 	bl	800a4c2 <_dtoa_r+0x2a>
 800aeb4:	40240000 	.word	0x40240000
 800aeb8:	00000433 	.word	0x00000433
 800aebc:	7ff00000 	.word	0x7ff00000
 800aec0:	0800e2cd 	.word	0x0800e2cd
 800aec4:	0800e275 	.word	0x0800e275
 800aec8:	000002ef 	.word	0x000002ef
 800aecc:	0039      	movs	r1, r7
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	310c      	adds	r1, #12
 800aed2:	3202      	adds	r2, #2
 800aed4:	0092      	lsls	r2, r2, #2
 800aed6:	300c      	adds	r0, #12
 800aed8:	f001 ffb2 	bl	800ce40 <memcpy>
 800aedc:	2201      	movs	r2, #1
 800aede:	0021      	movs	r1, r4
 800aee0:	9804      	ldr	r0, [sp, #16]
 800aee2:	f000 fc53 	bl	800b78c <__lshift>
 800aee6:	9b06      	ldr	r3, [sp, #24]
 800aee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aeea:	9307      	str	r3, [sp, #28]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	189b      	adds	r3, r3, r2
 800aef0:	2201      	movs	r2, #1
 800aef2:	003d      	movs	r5, r7
 800aef4:	0007      	movs	r7, r0
 800aef6:	930e      	str	r3, [sp, #56]	; 0x38
 800aef8:	9b08      	ldr	r3, [sp, #32]
 800aefa:	4013      	ands	r3, r2
 800aefc:	930d      	str	r3, [sp, #52]	; 0x34
 800aefe:	0031      	movs	r1, r6
 800af00:	9805      	ldr	r0, [sp, #20]
 800af02:	f7ff fa39 	bl	800a378 <quorem>
 800af06:	0029      	movs	r1, r5
 800af08:	0004      	movs	r4, r0
 800af0a:	900b      	str	r0, [sp, #44]	; 0x2c
 800af0c:	9805      	ldr	r0, [sp, #20]
 800af0e:	f000 fcab 	bl	800b868 <__mcmp>
 800af12:	003a      	movs	r2, r7
 800af14:	900c      	str	r0, [sp, #48]	; 0x30
 800af16:	0031      	movs	r1, r6
 800af18:	9804      	ldr	r0, [sp, #16]
 800af1a:	f000 fcc1 	bl	800b8a0 <__mdiff>
 800af1e:	2201      	movs	r2, #1
 800af20:	68c3      	ldr	r3, [r0, #12]
 800af22:	3430      	adds	r4, #48	; 0x30
 800af24:	9008      	str	r0, [sp, #32]
 800af26:	920a      	str	r2, [sp, #40]	; 0x28
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d104      	bne.n	800af36 <_dtoa_r+0xa9e>
 800af2c:	0001      	movs	r1, r0
 800af2e:	9805      	ldr	r0, [sp, #20]
 800af30:	f000 fc9a 	bl	800b868 <__mcmp>
 800af34:	900a      	str	r0, [sp, #40]	; 0x28
 800af36:	9908      	ldr	r1, [sp, #32]
 800af38:	9804      	ldr	r0, [sp, #16]
 800af3a:	f000 fa07 	bl	800b34c <_Bfree>
 800af3e:	9b07      	ldr	r3, [sp, #28]
 800af40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af42:	3301      	adds	r3, #1
 800af44:	9308      	str	r3, [sp, #32]
 800af46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af48:	4313      	orrs	r3, r2
 800af4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af4c:	4313      	orrs	r3, r2
 800af4e:	d109      	bne.n	800af64 <_dtoa_r+0xacc>
 800af50:	2c39      	cmp	r4, #57	; 0x39
 800af52:	d022      	beq.n	800af9a <_dtoa_r+0xb02>
 800af54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af56:	2b00      	cmp	r3, #0
 800af58:	dd01      	ble.n	800af5e <_dtoa_r+0xac6>
 800af5a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800af5c:	3431      	adds	r4, #49	; 0x31
 800af5e:	9b07      	ldr	r3, [sp, #28]
 800af60:	701c      	strb	r4, [r3, #0]
 800af62:	e76e      	b.n	800ae42 <_dtoa_r+0x9aa>
 800af64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af66:	2b00      	cmp	r3, #0
 800af68:	db04      	blt.n	800af74 <_dtoa_r+0xadc>
 800af6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af6c:	4313      	orrs	r3, r2
 800af6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af70:	4313      	orrs	r3, r2
 800af72:	d11e      	bne.n	800afb2 <_dtoa_r+0xb1a>
 800af74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af76:	2b00      	cmp	r3, #0
 800af78:	ddf1      	ble.n	800af5e <_dtoa_r+0xac6>
 800af7a:	9905      	ldr	r1, [sp, #20]
 800af7c:	2201      	movs	r2, #1
 800af7e:	9804      	ldr	r0, [sp, #16]
 800af80:	f000 fc04 	bl	800b78c <__lshift>
 800af84:	0031      	movs	r1, r6
 800af86:	9005      	str	r0, [sp, #20]
 800af88:	f000 fc6e 	bl	800b868 <__mcmp>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	dc02      	bgt.n	800af96 <_dtoa_r+0xafe>
 800af90:	d1e5      	bne.n	800af5e <_dtoa_r+0xac6>
 800af92:	07e3      	lsls	r3, r4, #31
 800af94:	d5e3      	bpl.n	800af5e <_dtoa_r+0xac6>
 800af96:	2c39      	cmp	r4, #57	; 0x39
 800af98:	d1df      	bne.n	800af5a <_dtoa_r+0xac2>
 800af9a:	2339      	movs	r3, #57	; 0x39
 800af9c:	9a07      	ldr	r2, [sp, #28]
 800af9e:	7013      	strb	r3, [r2, #0]
 800afa0:	9b08      	ldr	r3, [sp, #32]
 800afa2:	9308      	str	r3, [sp, #32]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	781a      	ldrb	r2, [r3, #0]
 800afa8:	2a39      	cmp	r2, #57	; 0x39
 800afaa:	d063      	beq.n	800b074 <_dtoa_r+0xbdc>
 800afac:	3201      	adds	r2, #1
 800afae:	701a      	strb	r2, [r3, #0]
 800afb0:	e747      	b.n	800ae42 <_dtoa_r+0x9aa>
 800afb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	dd03      	ble.n	800afc0 <_dtoa_r+0xb28>
 800afb8:	2c39      	cmp	r4, #57	; 0x39
 800afba:	d0ee      	beq.n	800af9a <_dtoa_r+0xb02>
 800afbc:	3401      	adds	r4, #1
 800afbe:	e7ce      	b.n	800af5e <_dtoa_r+0xac6>
 800afc0:	9b07      	ldr	r3, [sp, #28]
 800afc2:	9a07      	ldr	r2, [sp, #28]
 800afc4:	701c      	strb	r4, [r3, #0]
 800afc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afc8:	4293      	cmp	r3, r2
 800afca:	d03e      	beq.n	800b04a <_dtoa_r+0xbb2>
 800afcc:	2300      	movs	r3, #0
 800afce:	220a      	movs	r2, #10
 800afd0:	9905      	ldr	r1, [sp, #20]
 800afd2:	9804      	ldr	r0, [sp, #16]
 800afd4:	f000 f9de 	bl	800b394 <__multadd>
 800afd8:	2300      	movs	r3, #0
 800afda:	9005      	str	r0, [sp, #20]
 800afdc:	220a      	movs	r2, #10
 800afde:	0029      	movs	r1, r5
 800afe0:	9804      	ldr	r0, [sp, #16]
 800afe2:	42bd      	cmp	r5, r7
 800afe4:	d106      	bne.n	800aff4 <_dtoa_r+0xb5c>
 800afe6:	f000 f9d5 	bl	800b394 <__multadd>
 800afea:	0005      	movs	r5, r0
 800afec:	0007      	movs	r7, r0
 800afee:	9b08      	ldr	r3, [sp, #32]
 800aff0:	9307      	str	r3, [sp, #28]
 800aff2:	e784      	b.n	800aefe <_dtoa_r+0xa66>
 800aff4:	f000 f9ce 	bl	800b394 <__multadd>
 800aff8:	0039      	movs	r1, r7
 800affa:	0005      	movs	r5, r0
 800affc:	2300      	movs	r3, #0
 800affe:	220a      	movs	r2, #10
 800b000:	9804      	ldr	r0, [sp, #16]
 800b002:	f000 f9c7 	bl	800b394 <__multadd>
 800b006:	0007      	movs	r7, r0
 800b008:	e7f1      	b.n	800afee <_dtoa_r+0xb56>
 800b00a:	9b07      	ldr	r3, [sp, #28]
 800b00c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b00e:	2500      	movs	r5, #0
 800b010:	0031      	movs	r1, r6
 800b012:	9805      	ldr	r0, [sp, #20]
 800b014:	f7ff f9b0 	bl	800a378 <quorem>
 800b018:	9b06      	ldr	r3, [sp, #24]
 800b01a:	3030      	adds	r0, #48	; 0x30
 800b01c:	5558      	strb	r0, [r3, r5]
 800b01e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b020:	3501      	adds	r5, #1
 800b022:	0004      	movs	r4, r0
 800b024:	42ab      	cmp	r3, r5
 800b026:	dd07      	ble.n	800b038 <_dtoa_r+0xba0>
 800b028:	2300      	movs	r3, #0
 800b02a:	220a      	movs	r2, #10
 800b02c:	9905      	ldr	r1, [sp, #20]
 800b02e:	9804      	ldr	r0, [sp, #16]
 800b030:	f000 f9b0 	bl	800b394 <__multadd>
 800b034:	9005      	str	r0, [sp, #20]
 800b036:	e7eb      	b.n	800b010 <_dtoa_r+0xb78>
 800b038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b03a:	2301      	movs	r3, #1
 800b03c:	2a00      	cmp	r2, #0
 800b03e:	dd00      	ble.n	800b042 <_dtoa_r+0xbaa>
 800b040:	0013      	movs	r3, r2
 800b042:	2500      	movs	r5, #0
 800b044:	9a06      	ldr	r2, [sp, #24]
 800b046:	18d3      	adds	r3, r2, r3
 800b048:	9308      	str	r3, [sp, #32]
 800b04a:	9905      	ldr	r1, [sp, #20]
 800b04c:	2201      	movs	r2, #1
 800b04e:	9804      	ldr	r0, [sp, #16]
 800b050:	f000 fb9c 	bl	800b78c <__lshift>
 800b054:	0031      	movs	r1, r6
 800b056:	9005      	str	r0, [sp, #20]
 800b058:	f000 fc06 	bl	800b868 <__mcmp>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	dc9f      	bgt.n	800afa0 <_dtoa_r+0xb08>
 800b060:	d101      	bne.n	800b066 <_dtoa_r+0xbce>
 800b062:	07e4      	lsls	r4, r4, #31
 800b064:	d49c      	bmi.n	800afa0 <_dtoa_r+0xb08>
 800b066:	9b08      	ldr	r3, [sp, #32]
 800b068:	9308      	str	r3, [sp, #32]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	781a      	ldrb	r2, [r3, #0]
 800b06e:	2a30      	cmp	r2, #48	; 0x30
 800b070:	d0fa      	beq.n	800b068 <_dtoa_r+0xbd0>
 800b072:	e6e6      	b.n	800ae42 <_dtoa_r+0x9aa>
 800b074:	9a06      	ldr	r2, [sp, #24]
 800b076:	429a      	cmp	r2, r3
 800b078:	d193      	bne.n	800afa2 <_dtoa_r+0xb0a>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	3301      	adds	r3, #1
 800b07e:	9303      	str	r3, [sp, #12]
 800b080:	2331      	movs	r3, #49	; 0x31
 800b082:	7013      	strb	r3, [r2, #0]
 800b084:	e6dd      	b.n	800ae42 <_dtoa_r+0x9aa>
 800b086:	4b09      	ldr	r3, [pc, #36]	; (800b0ac <_dtoa_r+0xc14>)
 800b088:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b08a:	9306      	str	r3, [sp, #24]
 800b08c:	4b08      	ldr	r3, [pc, #32]	; (800b0b0 <_dtoa_r+0xc18>)
 800b08e:	2a00      	cmp	r2, #0
 800b090:	d001      	beq.n	800b096 <_dtoa_r+0xbfe>
 800b092:	f7ff fa49 	bl	800a528 <_dtoa_r+0x90>
 800b096:	f7ff fa49 	bl	800a52c <_dtoa_r+0x94>
 800b09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dcb6      	bgt.n	800b00e <_dtoa_r+0xb76>
 800b0a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	dd00      	ble.n	800b0a8 <_dtoa_r+0xc10>
 800b0a6:	e6b6      	b.n	800ae16 <_dtoa_r+0x97e>
 800b0a8:	e7b1      	b.n	800b00e <_dtoa_r+0xb76>
 800b0aa:	46c0      	nop			; (mov r8, r8)
 800b0ac:	0800e251 	.word	0x0800e251
 800b0b0:	0800e259 	.word	0x0800e259

0800b0b4 <_free_r>:
 800b0b4:	b570      	push	{r4, r5, r6, lr}
 800b0b6:	0005      	movs	r5, r0
 800b0b8:	2900      	cmp	r1, #0
 800b0ba:	d010      	beq.n	800b0de <_free_r+0x2a>
 800b0bc:	1f0c      	subs	r4, r1, #4
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	da00      	bge.n	800b0c6 <_free_r+0x12>
 800b0c4:	18e4      	adds	r4, r4, r3
 800b0c6:	0028      	movs	r0, r5
 800b0c8:	f000 f8ec 	bl	800b2a4 <__malloc_lock>
 800b0cc:	4a1d      	ldr	r2, [pc, #116]	; (800b144 <_free_r+0x90>)
 800b0ce:	6813      	ldr	r3, [r2, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d105      	bne.n	800b0e0 <_free_r+0x2c>
 800b0d4:	6063      	str	r3, [r4, #4]
 800b0d6:	6014      	str	r4, [r2, #0]
 800b0d8:	0028      	movs	r0, r5
 800b0da:	f000 f8eb 	bl	800b2b4 <__malloc_unlock>
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	d908      	bls.n	800b0f6 <_free_r+0x42>
 800b0e4:	6820      	ldr	r0, [r4, #0]
 800b0e6:	1821      	adds	r1, r4, r0
 800b0e8:	428b      	cmp	r3, r1
 800b0ea:	d1f3      	bne.n	800b0d4 <_free_r+0x20>
 800b0ec:	6819      	ldr	r1, [r3, #0]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	1809      	adds	r1, r1, r0
 800b0f2:	6021      	str	r1, [r4, #0]
 800b0f4:	e7ee      	b.n	800b0d4 <_free_r+0x20>
 800b0f6:	001a      	movs	r2, r3
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <_free_r+0x4e>
 800b0fe:	42a3      	cmp	r3, r4
 800b100:	d9f9      	bls.n	800b0f6 <_free_r+0x42>
 800b102:	6811      	ldr	r1, [r2, #0]
 800b104:	1850      	adds	r0, r2, r1
 800b106:	42a0      	cmp	r0, r4
 800b108:	d10b      	bne.n	800b122 <_free_r+0x6e>
 800b10a:	6820      	ldr	r0, [r4, #0]
 800b10c:	1809      	adds	r1, r1, r0
 800b10e:	1850      	adds	r0, r2, r1
 800b110:	6011      	str	r1, [r2, #0]
 800b112:	4283      	cmp	r3, r0
 800b114:	d1e0      	bne.n	800b0d8 <_free_r+0x24>
 800b116:	6818      	ldr	r0, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	1841      	adds	r1, r0, r1
 800b11c:	6011      	str	r1, [r2, #0]
 800b11e:	6053      	str	r3, [r2, #4]
 800b120:	e7da      	b.n	800b0d8 <_free_r+0x24>
 800b122:	42a0      	cmp	r0, r4
 800b124:	d902      	bls.n	800b12c <_free_r+0x78>
 800b126:	230c      	movs	r3, #12
 800b128:	602b      	str	r3, [r5, #0]
 800b12a:	e7d5      	b.n	800b0d8 <_free_r+0x24>
 800b12c:	6820      	ldr	r0, [r4, #0]
 800b12e:	1821      	adds	r1, r4, r0
 800b130:	428b      	cmp	r3, r1
 800b132:	d103      	bne.n	800b13c <_free_r+0x88>
 800b134:	6819      	ldr	r1, [r3, #0]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	1809      	adds	r1, r1, r0
 800b13a:	6021      	str	r1, [r4, #0]
 800b13c:	6063      	str	r3, [r4, #4]
 800b13e:	6054      	str	r4, [r2, #4]
 800b140:	e7ca      	b.n	800b0d8 <_free_r+0x24>
 800b142:	46c0      	nop			; (mov r8, r8)
 800b144:	20000668 	.word	0x20000668

0800b148 <malloc>:
 800b148:	b510      	push	{r4, lr}
 800b14a:	4b03      	ldr	r3, [pc, #12]	; (800b158 <malloc+0x10>)
 800b14c:	0001      	movs	r1, r0
 800b14e:	6818      	ldr	r0, [r3, #0]
 800b150:	f000 f826 	bl	800b1a0 <_malloc_r>
 800b154:	bd10      	pop	{r4, pc}
 800b156:	46c0      	nop			; (mov r8, r8)
 800b158:	2000007c 	.word	0x2000007c

0800b15c <sbrk_aligned>:
 800b15c:	b570      	push	{r4, r5, r6, lr}
 800b15e:	4e0f      	ldr	r6, [pc, #60]	; (800b19c <sbrk_aligned+0x40>)
 800b160:	000d      	movs	r5, r1
 800b162:	6831      	ldr	r1, [r6, #0]
 800b164:	0004      	movs	r4, r0
 800b166:	2900      	cmp	r1, #0
 800b168:	d102      	bne.n	800b170 <sbrk_aligned+0x14>
 800b16a:	f001 fe57 	bl	800ce1c <_sbrk_r>
 800b16e:	6030      	str	r0, [r6, #0]
 800b170:	0029      	movs	r1, r5
 800b172:	0020      	movs	r0, r4
 800b174:	f001 fe52 	bl	800ce1c <_sbrk_r>
 800b178:	1c43      	adds	r3, r0, #1
 800b17a:	d00a      	beq.n	800b192 <sbrk_aligned+0x36>
 800b17c:	2303      	movs	r3, #3
 800b17e:	1cc5      	adds	r5, r0, #3
 800b180:	439d      	bics	r5, r3
 800b182:	42a8      	cmp	r0, r5
 800b184:	d007      	beq.n	800b196 <sbrk_aligned+0x3a>
 800b186:	1a29      	subs	r1, r5, r0
 800b188:	0020      	movs	r0, r4
 800b18a:	f001 fe47 	bl	800ce1c <_sbrk_r>
 800b18e:	3001      	adds	r0, #1
 800b190:	d101      	bne.n	800b196 <sbrk_aligned+0x3a>
 800b192:	2501      	movs	r5, #1
 800b194:	426d      	negs	r5, r5
 800b196:	0028      	movs	r0, r5
 800b198:	bd70      	pop	{r4, r5, r6, pc}
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	2000066c 	.word	0x2000066c

0800b1a0 <_malloc_r>:
 800b1a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1a2:	2203      	movs	r2, #3
 800b1a4:	1ccb      	adds	r3, r1, #3
 800b1a6:	4393      	bics	r3, r2
 800b1a8:	3308      	adds	r3, #8
 800b1aa:	0006      	movs	r6, r0
 800b1ac:	001f      	movs	r7, r3
 800b1ae:	2b0c      	cmp	r3, #12
 800b1b0:	d238      	bcs.n	800b224 <_malloc_r+0x84>
 800b1b2:	270c      	movs	r7, #12
 800b1b4:	42b9      	cmp	r1, r7
 800b1b6:	d837      	bhi.n	800b228 <_malloc_r+0x88>
 800b1b8:	0030      	movs	r0, r6
 800b1ba:	f000 f873 	bl	800b2a4 <__malloc_lock>
 800b1be:	4b38      	ldr	r3, [pc, #224]	; (800b2a0 <_malloc_r+0x100>)
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	001c      	movs	r4, r3
 800b1c6:	2c00      	cmp	r4, #0
 800b1c8:	d133      	bne.n	800b232 <_malloc_r+0x92>
 800b1ca:	0039      	movs	r1, r7
 800b1cc:	0030      	movs	r0, r6
 800b1ce:	f7ff ffc5 	bl	800b15c <sbrk_aligned>
 800b1d2:	0004      	movs	r4, r0
 800b1d4:	1c43      	adds	r3, r0, #1
 800b1d6:	d15e      	bne.n	800b296 <_malloc_r+0xf6>
 800b1d8:	9b00      	ldr	r3, [sp, #0]
 800b1da:	681c      	ldr	r4, [r3, #0]
 800b1dc:	0025      	movs	r5, r4
 800b1de:	2d00      	cmp	r5, #0
 800b1e0:	d14e      	bne.n	800b280 <_malloc_r+0xe0>
 800b1e2:	2c00      	cmp	r4, #0
 800b1e4:	d051      	beq.n	800b28a <_malloc_r+0xea>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	0029      	movs	r1, r5
 800b1ea:	18e3      	adds	r3, r4, r3
 800b1ec:	0030      	movs	r0, r6
 800b1ee:	9301      	str	r3, [sp, #4]
 800b1f0:	f001 fe14 	bl	800ce1c <_sbrk_r>
 800b1f4:	9b01      	ldr	r3, [sp, #4]
 800b1f6:	4283      	cmp	r3, r0
 800b1f8:	d147      	bne.n	800b28a <_malloc_r+0xea>
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	0030      	movs	r0, r6
 800b1fe:	1aff      	subs	r7, r7, r3
 800b200:	0039      	movs	r1, r7
 800b202:	f7ff ffab 	bl	800b15c <sbrk_aligned>
 800b206:	3001      	adds	r0, #1
 800b208:	d03f      	beq.n	800b28a <_malloc_r+0xea>
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	19db      	adds	r3, r3, r7
 800b20e:	6023      	str	r3, [r4, #0]
 800b210:	9b00      	ldr	r3, [sp, #0]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d040      	beq.n	800b29a <_malloc_r+0xfa>
 800b218:	685a      	ldr	r2, [r3, #4]
 800b21a:	42a2      	cmp	r2, r4
 800b21c:	d133      	bne.n	800b286 <_malloc_r+0xe6>
 800b21e:	2200      	movs	r2, #0
 800b220:	605a      	str	r2, [r3, #4]
 800b222:	e014      	b.n	800b24e <_malloc_r+0xae>
 800b224:	2b00      	cmp	r3, #0
 800b226:	dac5      	bge.n	800b1b4 <_malloc_r+0x14>
 800b228:	230c      	movs	r3, #12
 800b22a:	2500      	movs	r5, #0
 800b22c:	6033      	str	r3, [r6, #0]
 800b22e:	0028      	movs	r0, r5
 800b230:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b232:	6821      	ldr	r1, [r4, #0]
 800b234:	1bc9      	subs	r1, r1, r7
 800b236:	d420      	bmi.n	800b27a <_malloc_r+0xda>
 800b238:	290b      	cmp	r1, #11
 800b23a:	d918      	bls.n	800b26e <_malloc_r+0xce>
 800b23c:	19e2      	adds	r2, r4, r7
 800b23e:	6027      	str	r7, [r4, #0]
 800b240:	42a3      	cmp	r3, r4
 800b242:	d112      	bne.n	800b26a <_malloc_r+0xca>
 800b244:	9b00      	ldr	r3, [sp, #0]
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	6863      	ldr	r3, [r4, #4]
 800b24a:	6011      	str	r1, [r2, #0]
 800b24c:	6053      	str	r3, [r2, #4]
 800b24e:	0030      	movs	r0, r6
 800b250:	0025      	movs	r5, r4
 800b252:	f000 f82f 	bl	800b2b4 <__malloc_unlock>
 800b256:	2207      	movs	r2, #7
 800b258:	350b      	adds	r5, #11
 800b25a:	1d23      	adds	r3, r4, #4
 800b25c:	4395      	bics	r5, r2
 800b25e:	1aea      	subs	r2, r5, r3
 800b260:	429d      	cmp	r5, r3
 800b262:	d0e4      	beq.n	800b22e <_malloc_r+0x8e>
 800b264:	1b5b      	subs	r3, r3, r5
 800b266:	50a3      	str	r3, [r4, r2]
 800b268:	e7e1      	b.n	800b22e <_malloc_r+0x8e>
 800b26a:	605a      	str	r2, [r3, #4]
 800b26c:	e7ec      	b.n	800b248 <_malloc_r+0xa8>
 800b26e:	6862      	ldr	r2, [r4, #4]
 800b270:	42a3      	cmp	r3, r4
 800b272:	d1d5      	bne.n	800b220 <_malloc_r+0x80>
 800b274:	9b00      	ldr	r3, [sp, #0]
 800b276:	601a      	str	r2, [r3, #0]
 800b278:	e7e9      	b.n	800b24e <_malloc_r+0xae>
 800b27a:	0023      	movs	r3, r4
 800b27c:	6864      	ldr	r4, [r4, #4]
 800b27e:	e7a2      	b.n	800b1c6 <_malloc_r+0x26>
 800b280:	002c      	movs	r4, r5
 800b282:	686d      	ldr	r5, [r5, #4]
 800b284:	e7ab      	b.n	800b1de <_malloc_r+0x3e>
 800b286:	0013      	movs	r3, r2
 800b288:	e7c4      	b.n	800b214 <_malloc_r+0x74>
 800b28a:	230c      	movs	r3, #12
 800b28c:	0030      	movs	r0, r6
 800b28e:	6033      	str	r3, [r6, #0]
 800b290:	f000 f810 	bl	800b2b4 <__malloc_unlock>
 800b294:	e7cb      	b.n	800b22e <_malloc_r+0x8e>
 800b296:	6027      	str	r7, [r4, #0]
 800b298:	e7d9      	b.n	800b24e <_malloc_r+0xae>
 800b29a:	605b      	str	r3, [r3, #4]
 800b29c:	deff      	udf	#255	; 0xff
 800b29e:	46c0      	nop			; (mov r8, r8)
 800b2a0:	20000668 	.word	0x20000668

0800b2a4 <__malloc_lock>:
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	4802      	ldr	r0, [pc, #8]	; (800b2b0 <__malloc_lock+0xc>)
 800b2a8:	f7ff f855 	bl	800a356 <__retarget_lock_acquire_recursive>
 800b2ac:	bd10      	pop	{r4, pc}
 800b2ae:	46c0      	nop			; (mov r8, r8)
 800b2b0:	20000664 	.word	0x20000664

0800b2b4 <__malloc_unlock>:
 800b2b4:	b510      	push	{r4, lr}
 800b2b6:	4802      	ldr	r0, [pc, #8]	; (800b2c0 <__malloc_unlock+0xc>)
 800b2b8:	f7ff f84e 	bl	800a358 <__retarget_lock_release_recursive>
 800b2bc:	bd10      	pop	{r4, pc}
 800b2be:	46c0      	nop			; (mov r8, r8)
 800b2c0:	20000664 	.word	0x20000664

0800b2c4 <_Balloc>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	69c5      	ldr	r5, [r0, #28]
 800b2c8:	0006      	movs	r6, r0
 800b2ca:	000c      	movs	r4, r1
 800b2cc:	2d00      	cmp	r5, #0
 800b2ce:	d10e      	bne.n	800b2ee <_Balloc+0x2a>
 800b2d0:	2010      	movs	r0, #16
 800b2d2:	f7ff ff39 	bl	800b148 <malloc>
 800b2d6:	1e02      	subs	r2, r0, #0
 800b2d8:	61f0      	str	r0, [r6, #28]
 800b2da:	d104      	bne.n	800b2e6 <_Balloc+0x22>
 800b2dc:	216b      	movs	r1, #107	; 0x6b
 800b2de:	4b19      	ldr	r3, [pc, #100]	; (800b344 <_Balloc+0x80>)
 800b2e0:	4819      	ldr	r0, [pc, #100]	; (800b348 <_Balloc+0x84>)
 800b2e2:	f001 fdbd 	bl	800ce60 <__assert_func>
 800b2e6:	6045      	str	r5, [r0, #4]
 800b2e8:	6085      	str	r5, [r0, #8]
 800b2ea:	6005      	str	r5, [r0, #0]
 800b2ec:	60c5      	str	r5, [r0, #12]
 800b2ee:	69f5      	ldr	r5, [r6, #28]
 800b2f0:	68eb      	ldr	r3, [r5, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d013      	beq.n	800b31e <_Balloc+0x5a>
 800b2f6:	69f3      	ldr	r3, [r6, #28]
 800b2f8:	00a2      	lsls	r2, r4, #2
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	189b      	adds	r3, r3, r2
 800b2fe:	6818      	ldr	r0, [r3, #0]
 800b300:	2800      	cmp	r0, #0
 800b302:	d118      	bne.n	800b336 <_Balloc+0x72>
 800b304:	2101      	movs	r1, #1
 800b306:	000d      	movs	r5, r1
 800b308:	40a5      	lsls	r5, r4
 800b30a:	1d6a      	adds	r2, r5, #5
 800b30c:	0030      	movs	r0, r6
 800b30e:	0092      	lsls	r2, r2, #2
 800b310:	f001 fdc4 	bl	800ce9c <_calloc_r>
 800b314:	2800      	cmp	r0, #0
 800b316:	d00c      	beq.n	800b332 <_Balloc+0x6e>
 800b318:	6044      	str	r4, [r0, #4]
 800b31a:	6085      	str	r5, [r0, #8]
 800b31c:	e00d      	b.n	800b33a <_Balloc+0x76>
 800b31e:	2221      	movs	r2, #33	; 0x21
 800b320:	2104      	movs	r1, #4
 800b322:	0030      	movs	r0, r6
 800b324:	f001 fdba 	bl	800ce9c <_calloc_r>
 800b328:	69f3      	ldr	r3, [r6, #28]
 800b32a:	60e8      	str	r0, [r5, #12]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1e1      	bne.n	800b2f6 <_Balloc+0x32>
 800b332:	2000      	movs	r0, #0
 800b334:	bd70      	pop	{r4, r5, r6, pc}
 800b336:	6802      	ldr	r2, [r0, #0]
 800b338:	601a      	str	r2, [r3, #0]
 800b33a:	2300      	movs	r3, #0
 800b33c:	6103      	str	r3, [r0, #16]
 800b33e:	60c3      	str	r3, [r0, #12]
 800b340:	e7f8      	b.n	800b334 <_Balloc+0x70>
 800b342:	46c0      	nop			; (mov r8, r8)
 800b344:	0800e25e 	.word	0x0800e25e
 800b348:	0800e2de 	.word	0x0800e2de

0800b34c <_Bfree>:
 800b34c:	b570      	push	{r4, r5, r6, lr}
 800b34e:	69c6      	ldr	r6, [r0, #28]
 800b350:	0005      	movs	r5, r0
 800b352:	000c      	movs	r4, r1
 800b354:	2e00      	cmp	r6, #0
 800b356:	d10e      	bne.n	800b376 <_Bfree+0x2a>
 800b358:	2010      	movs	r0, #16
 800b35a:	f7ff fef5 	bl	800b148 <malloc>
 800b35e:	1e02      	subs	r2, r0, #0
 800b360:	61e8      	str	r0, [r5, #28]
 800b362:	d104      	bne.n	800b36e <_Bfree+0x22>
 800b364:	218f      	movs	r1, #143	; 0x8f
 800b366:	4b09      	ldr	r3, [pc, #36]	; (800b38c <_Bfree+0x40>)
 800b368:	4809      	ldr	r0, [pc, #36]	; (800b390 <_Bfree+0x44>)
 800b36a:	f001 fd79 	bl	800ce60 <__assert_func>
 800b36e:	6046      	str	r6, [r0, #4]
 800b370:	6086      	str	r6, [r0, #8]
 800b372:	6006      	str	r6, [r0, #0]
 800b374:	60c6      	str	r6, [r0, #12]
 800b376:	2c00      	cmp	r4, #0
 800b378:	d007      	beq.n	800b38a <_Bfree+0x3e>
 800b37a:	69eb      	ldr	r3, [r5, #28]
 800b37c:	6862      	ldr	r2, [r4, #4]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	0092      	lsls	r2, r2, #2
 800b382:	189b      	adds	r3, r3, r2
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	6022      	str	r2, [r4, #0]
 800b388:	601c      	str	r4, [r3, #0]
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	0800e25e 	.word	0x0800e25e
 800b390:	0800e2de 	.word	0x0800e2de

0800b394 <__multadd>:
 800b394:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b396:	000e      	movs	r6, r1
 800b398:	9001      	str	r0, [sp, #4]
 800b39a:	000c      	movs	r4, r1
 800b39c:	001d      	movs	r5, r3
 800b39e:	2000      	movs	r0, #0
 800b3a0:	690f      	ldr	r7, [r1, #16]
 800b3a2:	3614      	adds	r6, #20
 800b3a4:	6833      	ldr	r3, [r6, #0]
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	b299      	uxth	r1, r3
 800b3aa:	4351      	muls	r1, r2
 800b3ac:	0c1b      	lsrs	r3, r3, #16
 800b3ae:	4353      	muls	r3, r2
 800b3b0:	1949      	adds	r1, r1, r5
 800b3b2:	0c0d      	lsrs	r5, r1, #16
 800b3b4:	195b      	adds	r3, r3, r5
 800b3b6:	0c1d      	lsrs	r5, r3, #16
 800b3b8:	b289      	uxth	r1, r1
 800b3ba:	041b      	lsls	r3, r3, #16
 800b3bc:	185b      	adds	r3, r3, r1
 800b3be:	c608      	stmia	r6!, {r3}
 800b3c0:	4287      	cmp	r7, r0
 800b3c2:	dcef      	bgt.n	800b3a4 <__multadd+0x10>
 800b3c4:	2d00      	cmp	r5, #0
 800b3c6:	d022      	beq.n	800b40e <__multadd+0x7a>
 800b3c8:	68a3      	ldr	r3, [r4, #8]
 800b3ca:	42bb      	cmp	r3, r7
 800b3cc:	dc19      	bgt.n	800b402 <__multadd+0x6e>
 800b3ce:	6861      	ldr	r1, [r4, #4]
 800b3d0:	9801      	ldr	r0, [sp, #4]
 800b3d2:	3101      	adds	r1, #1
 800b3d4:	f7ff ff76 	bl	800b2c4 <_Balloc>
 800b3d8:	1e06      	subs	r6, r0, #0
 800b3da:	d105      	bne.n	800b3e8 <__multadd+0x54>
 800b3dc:	0032      	movs	r2, r6
 800b3de:	21ba      	movs	r1, #186	; 0xba
 800b3e0:	4b0c      	ldr	r3, [pc, #48]	; (800b414 <__multadd+0x80>)
 800b3e2:	480d      	ldr	r0, [pc, #52]	; (800b418 <__multadd+0x84>)
 800b3e4:	f001 fd3c 	bl	800ce60 <__assert_func>
 800b3e8:	0021      	movs	r1, r4
 800b3ea:	6922      	ldr	r2, [r4, #16]
 800b3ec:	310c      	adds	r1, #12
 800b3ee:	3202      	adds	r2, #2
 800b3f0:	0092      	lsls	r2, r2, #2
 800b3f2:	300c      	adds	r0, #12
 800b3f4:	f001 fd24 	bl	800ce40 <memcpy>
 800b3f8:	0021      	movs	r1, r4
 800b3fa:	9801      	ldr	r0, [sp, #4]
 800b3fc:	f7ff ffa6 	bl	800b34c <_Bfree>
 800b400:	0034      	movs	r4, r6
 800b402:	1d3b      	adds	r3, r7, #4
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	18e3      	adds	r3, r4, r3
 800b408:	605d      	str	r5, [r3, #4]
 800b40a:	1c7b      	adds	r3, r7, #1
 800b40c:	6123      	str	r3, [r4, #16]
 800b40e:	0020      	movs	r0, r4
 800b410:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	0800e2cd 	.word	0x0800e2cd
 800b418:	0800e2de 	.word	0x0800e2de

0800b41c <__s2b>:
 800b41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b41e:	0006      	movs	r6, r0
 800b420:	0018      	movs	r0, r3
 800b422:	000c      	movs	r4, r1
 800b424:	3008      	adds	r0, #8
 800b426:	2109      	movs	r1, #9
 800b428:	9301      	str	r3, [sp, #4]
 800b42a:	0015      	movs	r5, r2
 800b42c:	f7f4 ff12 	bl	8000254 <__divsi3>
 800b430:	2301      	movs	r3, #1
 800b432:	2100      	movs	r1, #0
 800b434:	4283      	cmp	r3, r0
 800b436:	db0a      	blt.n	800b44e <__s2b+0x32>
 800b438:	0030      	movs	r0, r6
 800b43a:	f7ff ff43 	bl	800b2c4 <_Balloc>
 800b43e:	1e01      	subs	r1, r0, #0
 800b440:	d108      	bne.n	800b454 <__s2b+0x38>
 800b442:	000a      	movs	r2, r1
 800b444:	4b19      	ldr	r3, [pc, #100]	; (800b4ac <__s2b+0x90>)
 800b446:	481a      	ldr	r0, [pc, #104]	; (800b4b0 <__s2b+0x94>)
 800b448:	31d3      	adds	r1, #211	; 0xd3
 800b44a:	f001 fd09 	bl	800ce60 <__assert_func>
 800b44e:	005b      	lsls	r3, r3, #1
 800b450:	3101      	adds	r1, #1
 800b452:	e7ef      	b.n	800b434 <__s2b+0x18>
 800b454:	9b08      	ldr	r3, [sp, #32]
 800b456:	6143      	str	r3, [r0, #20]
 800b458:	2301      	movs	r3, #1
 800b45a:	6103      	str	r3, [r0, #16]
 800b45c:	2d09      	cmp	r5, #9
 800b45e:	dd18      	ble.n	800b492 <__s2b+0x76>
 800b460:	0023      	movs	r3, r4
 800b462:	3309      	adds	r3, #9
 800b464:	001f      	movs	r7, r3
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	1964      	adds	r4, r4, r5
 800b46a:	783b      	ldrb	r3, [r7, #0]
 800b46c:	220a      	movs	r2, #10
 800b46e:	0030      	movs	r0, r6
 800b470:	3b30      	subs	r3, #48	; 0x30
 800b472:	f7ff ff8f 	bl	800b394 <__multadd>
 800b476:	3701      	adds	r7, #1
 800b478:	0001      	movs	r1, r0
 800b47a:	42a7      	cmp	r7, r4
 800b47c:	d1f5      	bne.n	800b46a <__s2b+0x4e>
 800b47e:	002c      	movs	r4, r5
 800b480:	9b00      	ldr	r3, [sp, #0]
 800b482:	3c08      	subs	r4, #8
 800b484:	191c      	adds	r4, r3, r4
 800b486:	002f      	movs	r7, r5
 800b488:	9b01      	ldr	r3, [sp, #4]
 800b48a:	429f      	cmp	r7, r3
 800b48c:	db04      	blt.n	800b498 <__s2b+0x7c>
 800b48e:	0008      	movs	r0, r1
 800b490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b492:	2509      	movs	r5, #9
 800b494:	340a      	adds	r4, #10
 800b496:	e7f6      	b.n	800b486 <__s2b+0x6a>
 800b498:	1b63      	subs	r3, r4, r5
 800b49a:	5ddb      	ldrb	r3, [r3, r7]
 800b49c:	220a      	movs	r2, #10
 800b49e:	0030      	movs	r0, r6
 800b4a0:	3b30      	subs	r3, #48	; 0x30
 800b4a2:	f7ff ff77 	bl	800b394 <__multadd>
 800b4a6:	3701      	adds	r7, #1
 800b4a8:	0001      	movs	r1, r0
 800b4aa:	e7ed      	b.n	800b488 <__s2b+0x6c>
 800b4ac:	0800e2cd 	.word	0x0800e2cd
 800b4b0:	0800e2de 	.word	0x0800e2de

0800b4b4 <__hi0bits>:
 800b4b4:	0003      	movs	r3, r0
 800b4b6:	0c02      	lsrs	r2, r0, #16
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	4282      	cmp	r2, r0
 800b4bc:	d101      	bne.n	800b4c2 <__hi0bits+0xe>
 800b4be:	041b      	lsls	r3, r3, #16
 800b4c0:	3010      	adds	r0, #16
 800b4c2:	0e1a      	lsrs	r2, r3, #24
 800b4c4:	d101      	bne.n	800b4ca <__hi0bits+0x16>
 800b4c6:	3008      	adds	r0, #8
 800b4c8:	021b      	lsls	r3, r3, #8
 800b4ca:	0f1a      	lsrs	r2, r3, #28
 800b4cc:	d101      	bne.n	800b4d2 <__hi0bits+0x1e>
 800b4ce:	3004      	adds	r0, #4
 800b4d0:	011b      	lsls	r3, r3, #4
 800b4d2:	0f9a      	lsrs	r2, r3, #30
 800b4d4:	d101      	bne.n	800b4da <__hi0bits+0x26>
 800b4d6:	3002      	adds	r0, #2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	db03      	blt.n	800b4e6 <__hi0bits+0x32>
 800b4de:	3001      	adds	r0, #1
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	d400      	bmi.n	800b4e6 <__hi0bits+0x32>
 800b4e4:	2020      	movs	r0, #32
 800b4e6:	4770      	bx	lr

0800b4e8 <__lo0bits>:
 800b4e8:	6803      	ldr	r3, [r0, #0]
 800b4ea:	0001      	movs	r1, r0
 800b4ec:	2207      	movs	r2, #7
 800b4ee:	0018      	movs	r0, r3
 800b4f0:	4010      	ands	r0, r2
 800b4f2:	4213      	tst	r3, r2
 800b4f4:	d00d      	beq.n	800b512 <__lo0bits+0x2a>
 800b4f6:	3a06      	subs	r2, #6
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	4213      	tst	r3, r2
 800b4fc:	d105      	bne.n	800b50a <__lo0bits+0x22>
 800b4fe:	3002      	adds	r0, #2
 800b500:	4203      	tst	r3, r0
 800b502:	d003      	beq.n	800b50c <__lo0bits+0x24>
 800b504:	40d3      	lsrs	r3, r2
 800b506:	0010      	movs	r0, r2
 800b508:	600b      	str	r3, [r1, #0]
 800b50a:	4770      	bx	lr
 800b50c:	089b      	lsrs	r3, r3, #2
 800b50e:	600b      	str	r3, [r1, #0]
 800b510:	e7fb      	b.n	800b50a <__lo0bits+0x22>
 800b512:	b29a      	uxth	r2, r3
 800b514:	2a00      	cmp	r2, #0
 800b516:	d101      	bne.n	800b51c <__lo0bits+0x34>
 800b518:	2010      	movs	r0, #16
 800b51a:	0c1b      	lsrs	r3, r3, #16
 800b51c:	b2da      	uxtb	r2, r3
 800b51e:	2a00      	cmp	r2, #0
 800b520:	d101      	bne.n	800b526 <__lo0bits+0x3e>
 800b522:	3008      	adds	r0, #8
 800b524:	0a1b      	lsrs	r3, r3, #8
 800b526:	071a      	lsls	r2, r3, #28
 800b528:	d101      	bne.n	800b52e <__lo0bits+0x46>
 800b52a:	3004      	adds	r0, #4
 800b52c:	091b      	lsrs	r3, r3, #4
 800b52e:	079a      	lsls	r2, r3, #30
 800b530:	d101      	bne.n	800b536 <__lo0bits+0x4e>
 800b532:	3002      	adds	r0, #2
 800b534:	089b      	lsrs	r3, r3, #2
 800b536:	07da      	lsls	r2, r3, #31
 800b538:	d4e9      	bmi.n	800b50e <__lo0bits+0x26>
 800b53a:	3001      	adds	r0, #1
 800b53c:	085b      	lsrs	r3, r3, #1
 800b53e:	d1e6      	bne.n	800b50e <__lo0bits+0x26>
 800b540:	2020      	movs	r0, #32
 800b542:	e7e2      	b.n	800b50a <__lo0bits+0x22>

0800b544 <__i2b>:
 800b544:	b510      	push	{r4, lr}
 800b546:	000c      	movs	r4, r1
 800b548:	2101      	movs	r1, #1
 800b54a:	f7ff febb 	bl	800b2c4 <_Balloc>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d107      	bne.n	800b562 <__i2b+0x1e>
 800b552:	2146      	movs	r1, #70	; 0x46
 800b554:	4c05      	ldr	r4, [pc, #20]	; (800b56c <__i2b+0x28>)
 800b556:	0002      	movs	r2, r0
 800b558:	4b05      	ldr	r3, [pc, #20]	; (800b570 <__i2b+0x2c>)
 800b55a:	0020      	movs	r0, r4
 800b55c:	31ff      	adds	r1, #255	; 0xff
 800b55e:	f001 fc7f 	bl	800ce60 <__assert_func>
 800b562:	2301      	movs	r3, #1
 800b564:	6144      	str	r4, [r0, #20]
 800b566:	6103      	str	r3, [r0, #16]
 800b568:	bd10      	pop	{r4, pc}
 800b56a:	46c0      	nop			; (mov r8, r8)
 800b56c:	0800e2de 	.word	0x0800e2de
 800b570:	0800e2cd 	.word	0x0800e2cd

0800b574 <__multiply>:
 800b574:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b576:	0015      	movs	r5, r2
 800b578:	690a      	ldr	r2, [r1, #16]
 800b57a:	692b      	ldr	r3, [r5, #16]
 800b57c:	000c      	movs	r4, r1
 800b57e:	b08b      	sub	sp, #44	; 0x2c
 800b580:	429a      	cmp	r2, r3
 800b582:	da01      	bge.n	800b588 <__multiply+0x14>
 800b584:	002c      	movs	r4, r5
 800b586:	000d      	movs	r5, r1
 800b588:	6927      	ldr	r7, [r4, #16]
 800b58a:	692e      	ldr	r6, [r5, #16]
 800b58c:	6861      	ldr	r1, [r4, #4]
 800b58e:	19bb      	adds	r3, r7, r6
 800b590:	9303      	str	r3, [sp, #12]
 800b592:	68a3      	ldr	r3, [r4, #8]
 800b594:	19ba      	adds	r2, r7, r6
 800b596:	4293      	cmp	r3, r2
 800b598:	da00      	bge.n	800b59c <__multiply+0x28>
 800b59a:	3101      	adds	r1, #1
 800b59c:	f7ff fe92 	bl	800b2c4 <_Balloc>
 800b5a0:	9002      	str	r0, [sp, #8]
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d106      	bne.n	800b5b4 <__multiply+0x40>
 800b5a6:	21b1      	movs	r1, #177	; 0xb1
 800b5a8:	4b48      	ldr	r3, [pc, #288]	; (800b6cc <__multiply+0x158>)
 800b5aa:	4849      	ldr	r0, [pc, #292]	; (800b6d0 <__multiply+0x15c>)
 800b5ac:	9a02      	ldr	r2, [sp, #8]
 800b5ae:	0049      	lsls	r1, r1, #1
 800b5b0:	f001 fc56 	bl	800ce60 <__assert_func>
 800b5b4:	9b02      	ldr	r3, [sp, #8]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	3314      	adds	r3, #20
 800b5ba:	469c      	mov	ip, r3
 800b5bc:	19bb      	adds	r3, r7, r6
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4463      	add	r3, ip
 800b5c2:	9304      	str	r3, [sp, #16]
 800b5c4:	4663      	mov	r3, ip
 800b5c6:	9904      	ldr	r1, [sp, #16]
 800b5c8:	428b      	cmp	r3, r1
 800b5ca:	d32a      	bcc.n	800b622 <__multiply+0xae>
 800b5cc:	0023      	movs	r3, r4
 800b5ce:	00bf      	lsls	r7, r7, #2
 800b5d0:	3314      	adds	r3, #20
 800b5d2:	3514      	adds	r5, #20
 800b5d4:	9308      	str	r3, [sp, #32]
 800b5d6:	00b6      	lsls	r6, r6, #2
 800b5d8:	19db      	adds	r3, r3, r7
 800b5da:	9305      	str	r3, [sp, #20]
 800b5dc:	19ab      	adds	r3, r5, r6
 800b5de:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e0:	2304      	movs	r3, #4
 800b5e2:	9306      	str	r3, [sp, #24]
 800b5e4:	0023      	movs	r3, r4
 800b5e6:	9a05      	ldr	r2, [sp, #20]
 800b5e8:	3315      	adds	r3, #21
 800b5ea:	9501      	str	r5, [sp, #4]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d305      	bcc.n	800b5fc <__multiply+0x88>
 800b5f0:	1b13      	subs	r3, r2, r4
 800b5f2:	3b15      	subs	r3, #21
 800b5f4:	089b      	lsrs	r3, r3, #2
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	9306      	str	r3, [sp, #24]
 800b5fc:	9b01      	ldr	r3, [sp, #4]
 800b5fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b600:	4293      	cmp	r3, r2
 800b602:	d310      	bcc.n	800b626 <__multiply+0xb2>
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	dd05      	ble.n	800b616 <__multiply+0xa2>
 800b60a:	9b04      	ldr	r3, [sp, #16]
 800b60c:	3b04      	subs	r3, #4
 800b60e:	9304      	str	r3, [sp, #16]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d056      	beq.n	800b6c4 <__multiply+0x150>
 800b616:	9b02      	ldr	r3, [sp, #8]
 800b618:	9a03      	ldr	r2, [sp, #12]
 800b61a:	0018      	movs	r0, r3
 800b61c:	611a      	str	r2, [r3, #16]
 800b61e:	b00b      	add	sp, #44	; 0x2c
 800b620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b622:	c304      	stmia	r3!, {r2}
 800b624:	e7cf      	b.n	800b5c6 <__multiply+0x52>
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	b280      	uxth	r0, r0
 800b62c:	2800      	cmp	r0, #0
 800b62e:	d01e      	beq.n	800b66e <__multiply+0xfa>
 800b630:	4667      	mov	r7, ip
 800b632:	2500      	movs	r5, #0
 800b634:	9e08      	ldr	r6, [sp, #32]
 800b636:	ce02      	ldmia	r6!, {r1}
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	9307      	str	r3, [sp, #28]
 800b63c:	b28b      	uxth	r3, r1
 800b63e:	4343      	muls	r3, r0
 800b640:	001a      	movs	r2, r3
 800b642:	466b      	mov	r3, sp
 800b644:	8b9b      	ldrh	r3, [r3, #28]
 800b646:	18d3      	adds	r3, r2, r3
 800b648:	195b      	adds	r3, r3, r5
 800b64a:	0c0d      	lsrs	r5, r1, #16
 800b64c:	4345      	muls	r5, r0
 800b64e:	9a07      	ldr	r2, [sp, #28]
 800b650:	0c11      	lsrs	r1, r2, #16
 800b652:	1869      	adds	r1, r5, r1
 800b654:	0c1a      	lsrs	r2, r3, #16
 800b656:	188a      	adds	r2, r1, r2
 800b658:	b29b      	uxth	r3, r3
 800b65a:	0c15      	lsrs	r5, r2, #16
 800b65c:	0412      	lsls	r2, r2, #16
 800b65e:	431a      	orrs	r2, r3
 800b660:	9b05      	ldr	r3, [sp, #20]
 800b662:	c704      	stmia	r7!, {r2}
 800b664:	42b3      	cmp	r3, r6
 800b666:	d8e6      	bhi.n	800b636 <__multiply+0xc2>
 800b668:	4663      	mov	r3, ip
 800b66a:	9a06      	ldr	r2, [sp, #24]
 800b66c:	509d      	str	r5, [r3, r2]
 800b66e:	9b01      	ldr	r3, [sp, #4]
 800b670:	6818      	ldr	r0, [r3, #0]
 800b672:	0c00      	lsrs	r0, r0, #16
 800b674:	d020      	beq.n	800b6b8 <__multiply+0x144>
 800b676:	4663      	mov	r3, ip
 800b678:	0025      	movs	r5, r4
 800b67a:	4661      	mov	r1, ip
 800b67c:	2700      	movs	r7, #0
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3514      	adds	r5, #20
 800b682:	682a      	ldr	r2, [r5, #0]
 800b684:	680e      	ldr	r6, [r1, #0]
 800b686:	b292      	uxth	r2, r2
 800b688:	4342      	muls	r2, r0
 800b68a:	0c36      	lsrs	r6, r6, #16
 800b68c:	1992      	adds	r2, r2, r6
 800b68e:	19d2      	adds	r2, r2, r7
 800b690:	0416      	lsls	r6, r2, #16
 800b692:	b29b      	uxth	r3, r3
 800b694:	431e      	orrs	r6, r3
 800b696:	600e      	str	r6, [r1, #0]
 800b698:	cd40      	ldmia	r5!, {r6}
 800b69a:	684b      	ldr	r3, [r1, #4]
 800b69c:	0c36      	lsrs	r6, r6, #16
 800b69e:	4346      	muls	r6, r0
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	0c12      	lsrs	r2, r2, #16
 800b6a4:	18f3      	adds	r3, r6, r3
 800b6a6:	189b      	adds	r3, r3, r2
 800b6a8:	9a05      	ldr	r2, [sp, #20]
 800b6aa:	0c1f      	lsrs	r7, r3, #16
 800b6ac:	3104      	adds	r1, #4
 800b6ae:	42aa      	cmp	r2, r5
 800b6b0:	d8e7      	bhi.n	800b682 <__multiply+0x10e>
 800b6b2:	4662      	mov	r2, ip
 800b6b4:	9906      	ldr	r1, [sp, #24]
 800b6b6:	5053      	str	r3, [r2, r1]
 800b6b8:	9b01      	ldr	r3, [sp, #4]
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	2304      	movs	r3, #4
 800b6c0:	449c      	add	ip, r3
 800b6c2:	e79b      	b.n	800b5fc <__multiply+0x88>
 800b6c4:	9b03      	ldr	r3, [sp, #12]
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	e79b      	b.n	800b604 <__multiply+0x90>
 800b6cc:	0800e2cd 	.word	0x0800e2cd
 800b6d0:	0800e2de 	.word	0x0800e2de

0800b6d4 <__pow5mult>:
 800b6d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	0015      	movs	r5, r2
 800b6da:	0007      	movs	r7, r0
 800b6dc:	000e      	movs	r6, r1
 800b6de:	401a      	ands	r2, r3
 800b6e0:	421d      	tst	r5, r3
 800b6e2:	d008      	beq.n	800b6f6 <__pow5mult+0x22>
 800b6e4:	4925      	ldr	r1, [pc, #148]	; (800b77c <__pow5mult+0xa8>)
 800b6e6:	3a01      	subs	r2, #1
 800b6e8:	0092      	lsls	r2, r2, #2
 800b6ea:	5852      	ldr	r2, [r2, r1]
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	0031      	movs	r1, r6
 800b6f0:	f7ff fe50 	bl	800b394 <__multadd>
 800b6f4:	0006      	movs	r6, r0
 800b6f6:	10ad      	asrs	r5, r5, #2
 800b6f8:	d03d      	beq.n	800b776 <__pow5mult+0xa2>
 800b6fa:	69fc      	ldr	r4, [r7, #28]
 800b6fc:	2c00      	cmp	r4, #0
 800b6fe:	d10f      	bne.n	800b720 <__pow5mult+0x4c>
 800b700:	2010      	movs	r0, #16
 800b702:	f7ff fd21 	bl	800b148 <malloc>
 800b706:	1e02      	subs	r2, r0, #0
 800b708:	61f8      	str	r0, [r7, #28]
 800b70a:	d105      	bne.n	800b718 <__pow5mult+0x44>
 800b70c:	21b4      	movs	r1, #180	; 0xb4
 800b70e:	4b1c      	ldr	r3, [pc, #112]	; (800b780 <__pow5mult+0xac>)
 800b710:	481c      	ldr	r0, [pc, #112]	; (800b784 <__pow5mult+0xb0>)
 800b712:	31ff      	adds	r1, #255	; 0xff
 800b714:	f001 fba4 	bl	800ce60 <__assert_func>
 800b718:	6044      	str	r4, [r0, #4]
 800b71a:	6084      	str	r4, [r0, #8]
 800b71c:	6004      	str	r4, [r0, #0]
 800b71e:	60c4      	str	r4, [r0, #12]
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	689c      	ldr	r4, [r3, #8]
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	2c00      	cmp	r4, #0
 800b728:	d108      	bne.n	800b73c <__pow5mult+0x68>
 800b72a:	0038      	movs	r0, r7
 800b72c:	4916      	ldr	r1, [pc, #88]	; (800b788 <__pow5mult+0xb4>)
 800b72e:	f7ff ff09 	bl	800b544 <__i2b>
 800b732:	9b01      	ldr	r3, [sp, #4]
 800b734:	0004      	movs	r4, r0
 800b736:	6098      	str	r0, [r3, #8]
 800b738:	2300      	movs	r3, #0
 800b73a:	6003      	str	r3, [r0, #0]
 800b73c:	2301      	movs	r3, #1
 800b73e:	421d      	tst	r5, r3
 800b740:	d00a      	beq.n	800b758 <__pow5mult+0x84>
 800b742:	0031      	movs	r1, r6
 800b744:	0022      	movs	r2, r4
 800b746:	0038      	movs	r0, r7
 800b748:	f7ff ff14 	bl	800b574 <__multiply>
 800b74c:	0031      	movs	r1, r6
 800b74e:	9001      	str	r0, [sp, #4]
 800b750:	0038      	movs	r0, r7
 800b752:	f7ff fdfb 	bl	800b34c <_Bfree>
 800b756:	9e01      	ldr	r6, [sp, #4]
 800b758:	106d      	asrs	r5, r5, #1
 800b75a:	d00c      	beq.n	800b776 <__pow5mult+0xa2>
 800b75c:	6820      	ldr	r0, [r4, #0]
 800b75e:	2800      	cmp	r0, #0
 800b760:	d107      	bne.n	800b772 <__pow5mult+0x9e>
 800b762:	0022      	movs	r2, r4
 800b764:	0021      	movs	r1, r4
 800b766:	0038      	movs	r0, r7
 800b768:	f7ff ff04 	bl	800b574 <__multiply>
 800b76c:	2300      	movs	r3, #0
 800b76e:	6020      	str	r0, [r4, #0]
 800b770:	6003      	str	r3, [r0, #0]
 800b772:	0004      	movs	r4, r0
 800b774:	e7e2      	b.n	800b73c <__pow5mult+0x68>
 800b776:	0030      	movs	r0, r6
 800b778:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b77a:	46c0      	nop			; (mov r8, r8)
 800b77c:	0800e428 	.word	0x0800e428
 800b780:	0800e25e 	.word	0x0800e25e
 800b784:	0800e2de 	.word	0x0800e2de
 800b788:	00000271 	.word	0x00000271

0800b78c <__lshift>:
 800b78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b78e:	000c      	movs	r4, r1
 800b790:	0017      	movs	r7, r2
 800b792:	6923      	ldr	r3, [r4, #16]
 800b794:	1155      	asrs	r5, r2, #5
 800b796:	b087      	sub	sp, #28
 800b798:	18eb      	adds	r3, r5, r3
 800b79a:	9302      	str	r3, [sp, #8]
 800b79c:	3301      	adds	r3, #1
 800b79e:	9301      	str	r3, [sp, #4]
 800b7a0:	6849      	ldr	r1, [r1, #4]
 800b7a2:	68a3      	ldr	r3, [r4, #8]
 800b7a4:	9004      	str	r0, [sp, #16]
 800b7a6:	9a01      	ldr	r2, [sp, #4]
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	db10      	blt.n	800b7ce <__lshift+0x42>
 800b7ac:	9804      	ldr	r0, [sp, #16]
 800b7ae:	f7ff fd89 	bl	800b2c4 <_Balloc>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	0002      	movs	r2, r0
 800b7b6:	0006      	movs	r6, r0
 800b7b8:	0019      	movs	r1, r3
 800b7ba:	3214      	adds	r2, #20
 800b7bc:	4298      	cmp	r0, r3
 800b7be:	d10c      	bne.n	800b7da <__lshift+0x4e>
 800b7c0:	31df      	adds	r1, #223	; 0xdf
 800b7c2:	0032      	movs	r2, r6
 800b7c4:	4b26      	ldr	r3, [pc, #152]	; (800b860 <__lshift+0xd4>)
 800b7c6:	4827      	ldr	r0, [pc, #156]	; (800b864 <__lshift+0xd8>)
 800b7c8:	31ff      	adds	r1, #255	; 0xff
 800b7ca:	f001 fb49 	bl	800ce60 <__assert_func>
 800b7ce:	3101      	adds	r1, #1
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	e7e8      	b.n	800b7a6 <__lshift+0x1a>
 800b7d4:	0098      	lsls	r0, r3, #2
 800b7d6:	5011      	str	r1, [r2, r0]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	42ab      	cmp	r3, r5
 800b7dc:	dbfa      	blt.n	800b7d4 <__lshift+0x48>
 800b7de:	43eb      	mvns	r3, r5
 800b7e0:	17db      	asrs	r3, r3, #31
 800b7e2:	401d      	ands	r5, r3
 800b7e4:	211f      	movs	r1, #31
 800b7e6:	0023      	movs	r3, r4
 800b7e8:	0038      	movs	r0, r7
 800b7ea:	00ad      	lsls	r5, r5, #2
 800b7ec:	1955      	adds	r5, r2, r5
 800b7ee:	6922      	ldr	r2, [r4, #16]
 800b7f0:	3314      	adds	r3, #20
 800b7f2:	0092      	lsls	r2, r2, #2
 800b7f4:	4008      	ands	r0, r1
 800b7f6:	4684      	mov	ip, r0
 800b7f8:	189a      	adds	r2, r3, r2
 800b7fa:	420f      	tst	r7, r1
 800b7fc:	d02a      	beq.n	800b854 <__lshift+0xc8>
 800b7fe:	3101      	adds	r1, #1
 800b800:	1a09      	subs	r1, r1, r0
 800b802:	9105      	str	r1, [sp, #20]
 800b804:	2100      	movs	r1, #0
 800b806:	9503      	str	r5, [sp, #12]
 800b808:	4667      	mov	r7, ip
 800b80a:	6818      	ldr	r0, [r3, #0]
 800b80c:	40b8      	lsls	r0, r7
 800b80e:	4308      	orrs	r0, r1
 800b810:	9903      	ldr	r1, [sp, #12]
 800b812:	c101      	stmia	r1!, {r0}
 800b814:	9103      	str	r1, [sp, #12]
 800b816:	9805      	ldr	r0, [sp, #20]
 800b818:	cb02      	ldmia	r3!, {r1}
 800b81a:	40c1      	lsrs	r1, r0
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d8f3      	bhi.n	800b808 <__lshift+0x7c>
 800b820:	0020      	movs	r0, r4
 800b822:	3015      	adds	r0, #21
 800b824:	2304      	movs	r3, #4
 800b826:	4282      	cmp	r2, r0
 800b828:	d304      	bcc.n	800b834 <__lshift+0xa8>
 800b82a:	1b13      	subs	r3, r2, r4
 800b82c:	3b15      	subs	r3, #21
 800b82e:	089b      	lsrs	r3, r3, #2
 800b830:	3301      	adds	r3, #1
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	50e9      	str	r1, [r5, r3]
 800b836:	2900      	cmp	r1, #0
 800b838:	d002      	beq.n	800b840 <__lshift+0xb4>
 800b83a:	9b02      	ldr	r3, [sp, #8]
 800b83c:	3302      	adds	r3, #2
 800b83e:	9301      	str	r3, [sp, #4]
 800b840:	9b01      	ldr	r3, [sp, #4]
 800b842:	9804      	ldr	r0, [sp, #16]
 800b844:	3b01      	subs	r3, #1
 800b846:	0021      	movs	r1, r4
 800b848:	6133      	str	r3, [r6, #16]
 800b84a:	f7ff fd7f 	bl	800b34c <_Bfree>
 800b84e:	0030      	movs	r0, r6
 800b850:	b007      	add	sp, #28
 800b852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b854:	cb02      	ldmia	r3!, {r1}
 800b856:	c502      	stmia	r5!, {r1}
 800b858:	429a      	cmp	r2, r3
 800b85a:	d8fb      	bhi.n	800b854 <__lshift+0xc8>
 800b85c:	e7f0      	b.n	800b840 <__lshift+0xb4>
 800b85e:	46c0      	nop			; (mov r8, r8)
 800b860:	0800e2cd 	.word	0x0800e2cd
 800b864:	0800e2de 	.word	0x0800e2de

0800b868 <__mcmp>:
 800b868:	b530      	push	{r4, r5, lr}
 800b86a:	690b      	ldr	r3, [r1, #16]
 800b86c:	6904      	ldr	r4, [r0, #16]
 800b86e:	0002      	movs	r2, r0
 800b870:	1ae0      	subs	r0, r4, r3
 800b872:	429c      	cmp	r4, r3
 800b874:	d10e      	bne.n	800b894 <__mcmp+0x2c>
 800b876:	3214      	adds	r2, #20
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	3114      	adds	r1, #20
 800b87c:	0014      	movs	r4, r2
 800b87e:	18c9      	adds	r1, r1, r3
 800b880:	18d2      	adds	r2, r2, r3
 800b882:	3a04      	subs	r2, #4
 800b884:	3904      	subs	r1, #4
 800b886:	6815      	ldr	r5, [r2, #0]
 800b888:	680b      	ldr	r3, [r1, #0]
 800b88a:	429d      	cmp	r5, r3
 800b88c:	d003      	beq.n	800b896 <__mcmp+0x2e>
 800b88e:	2001      	movs	r0, #1
 800b890:	429d      	cmp	r5, r3
 800b892:	d303      	bcc.n	800b89c <__mcmp+0x34>
 800b894:	bd30      	pop	{r4, r5, pc}
 800b896:	4294      	cmp	r4, r2
 800b898:	d3f3      	bcc.n	800b882 <__mcmp+0x1a>
 800b89a:	e7fb      	b.n	800b894 <__mcmp+0x2c>
 800b89c:	4240      	negs	r0, r0
 800b89e:	e7f9      	b.n	800b894 <__mcmp+0x2c>

0800b8a0 <__mdiff>:
 800b8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8a2:	000e      	movs	r6, r1
 800b8a4:	0007      	movs	r7, r0
 800b8a6:	0011      	movs	r1, r2
 800b8a8:	0030      	movs	r0, r6
 800b8aa:	b087      	sub	sp, #28
 800b8ac:	0014      	movs	r4, r2
 800b8ae:	f7ff ffdb 	bl	800b868 <__mcmp>
 800b8b2:	1e05      	subs	r5, r0, #0
 800b8b4:	d110      	bne.n	800b8d8 <__mdiff+0x38>
 800b8b6:	0001      	movs	r1, r0
 800b8b8:	0038      	movs	r0, r7
 800b8ba:	f7ff fd03 	bl	800b2c4 <_Balloc>
 800b8be:	1e02      	subs	r2, r0, #0
 800b8c0:	d104      	bne.n	800b8cc <__mdiff+0x2c>
 800b8c2:	4b3f      	ldr	r3, [pc, #252]	; (800b9c0 <__mdiff+0x120>)
 800b8c4:	483f      	ldr	r0, [pc, #252]	; (800b9c4 <__mdiff+0x124>)
 800b8c6:	4940      	ldr	r1, [pc, #256]	; (800b9c8 <__mdiff+0x128>)
 800b8c8:	f001 faca 	bl	800ce60 <__assert_func>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	6145      	str	r5, [r0, #20]
 800b8d0:	6103      	str	r3, [r0, #16]
 800b8d2:	0010      	movs	r0, r2
 800b8d4:	b007      	add	sp, #28
 800b8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8d8:	2301      	movs	r3, #1
 800b8da:	9301      	str	r3, [sp, #4]
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	db04      	blt.n	800b8ea <__mdiff+0x4a>
 800b8e0:	0023      	movs	r3, r4
 800b8e2:	0034      	movs	r4, r6
 800b8e4:	001e      	movs	r6, r3
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	9301      	str	r3, [sp, #4]
 800b8ea:	0038      	movs	r0, r7
 800b8ec:	6861      	ldr	r1, [r4, #4]
 800b8ee:	f7ff fce9 	bl	800b2c4 <_Balloc>
 800b8f2:	1e02      	subs	r2, r0, #0
 800b8f4:	d103      	bne.n	800b8fe <__mdiff+0x5e>
 800b8f6:	4b32      	ldr	r3, [pc, #200]	; (800b9c0 <__mdiff+0x120>)
 800b8f8:	4832      	ldr	r0, [pc, #200]	; (800b9c4 <__mdiff+0x124>)
 800b8fa:	4934      	ldr	r1, [pc, #208]	; (800b9cc <__mdiff+0x12c>)
 800b8fc:	e7e4      	b.n	800b8c8 <__mdiff+0x28>
 800b8fe:	9b01      	ldr	r3, [sp, #4]
 800b900:	2700      	movs	r7, #0
 800b902:	60c3      	str	r3, [r0, #12]
 800b904:	6920      	ldr	r0, [r4, #16]
 800b906:	3414      	adds	r4, #20
 800b908:	0083      	lsls	r3, r0, #2
 800b90a:	18e3      	adds	r3, r4, r3
 800b90c:	0021      	movs	r1, r4
 800b90e:	9401      	str	r4, [sp, #4]
 800b910:	0034      	movs	r4, r6
 800b912:	9302      	str	r3, [sp, #8]
 800b914:	6933      	ldr	r3, [r6, #16]
 800b916:	3414      	adds	r4, #20
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	18e3      	adds	r3, r4, r3
 800b91c:	9303      	str	r3, [sp, #12]
 800b91e:	0013      	movs	r3, r2
 800b920:	3314      	adds	r3, #20
 800b922:	469c      	mov	ip, r3
 800b924:	9305      	str	r3, [sp, #20]
 800b926:	9104      	str	r1, [sp, #16]
 800b928:	9b04      	ldr	r3, [sp, #16]
 800b92a:	cc02      	ldmia	r4!, {r1}
 800b92c:	cb20      	ldmia	r3!, {r5}
 800b92e:	9304      	str	r3, [sp, #16]
 800b930:	b2ab      	uxth	r3, r5
 800b932:	19df      	adds	r7, r3, r7
 800b934:	b28b      	uxth	r3, r1
 800b936:	1afb      	subs	r3, r7, r3
 800b938:	0c09      	lsrs	r1, r1, #16
 800b93a:	0c2d      	lsrs	r5, r5, #16
 800b93c:	1a6d      	subs	r5, r5, r1
 800b93e:	1419      	asrs	r1, r3, #16
 800b940:	1869      	adds	r1, r5, r1
 800b942:	b29b      	uxth	r3, r3
 800b944:	140f      	asrs	r7, r1, #16
 800b946:	0409      	lsls	r1, r1, #16
 800b948:	4319      	orrs	r1, r3
 800b94a:	4663      	mov	r3, ip
 800b94c:	c302      	stmia	r3!, {r1}
 800b94e:	469c      	mov	ip, r3
 800b950:	9b03      	ldr	r3, [sp, #12]
 800b952:	42a3      	cmp	r3, r4
 800b954:	d8e8      	bhi.n	800b928 <__mdiff+0x88>
 800b956:	0031      	movs	r1, r6
 800b958:	9c03      	ldr	r4, [sp, #12]
 800b95a:	3115      	adds	r1, #21
 800b95c:	2304      	movs	r3, #4
 800b95e:	428c      	cmp	r4, r1
 800b960:	d304      	bcc.n	800b96c <__mdiff+0xcc>
 800b962:	1ba3      	subs	r3, r4, r6
 800b964:	3b15      	subs	r3, #21
 800b966:	089b      	lsrs	r3, r3, #2
 800b968:	3301      	adds	r3, #1
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	9901      	ldr	r1, [sp, #4]
 800b96e:	18cd      	adds	r5, r1, r3
 800b970:	9905      	ldr	r1, [sp, #20]
 800b972:	002e      	movs	r6, r5
 800b974:	18cb      	adds	r3, r1, r3
 800b976:	469c      	mov	ip, r3
 800b978:	9902      	ldr	r1, [sp, #8]
 800b97a:	428e      	cmp	r6, r1
 800b97c:	d310      	bcc.n	800b9a0 <__mdiff+0x100>
 800b97e:	9e02      	ldr	r6, [sp, #8]
 800b980:	1ee9      	subs	r1, r5, #3
 800b982:	2400      	movs	r4, #0
 800b984:	428e      	cmp	r6, r1
 800b986:	d304      	bcc.n	800b992 <__mdiff+0xf2>
 800b988:	0031      	movs	r1, r6
 800b98a:	3103      	adds	r1, #3
 800b98c:	1b49      	subs	r1, r1, r5
 800b98e:	0889      	lsrs	r1, r1, #2
 800b990:	008c      	lsls	r4, r1, #2
 800b992:	191b      	adds	r3, r3, r4
 800b994:	3b04      	subs	r3, #4
 800b996:	6819      	ldr	r1, [r3, #0]
 800b998:	2900      	cmp	r1, #0
 800b99a:	d00f      	beq.n	800b9bc <__mdiff+0x11c>
 800b99c:	6110      	str	r0, [r2, #16]
 800b99e:	e798      	b.n	800b8d2 <__mdiff+0x32>
 800b9a0:	ce02      	ldmia	r6!, {r1}
 800b9a2:	b28c      	uxth	r4, r1
 800b9a4:	19e4      	adds	r4, r4, r7
 800b9a6:	0c0f      	lsrs	r7, r1, #16
 800b9a8:	1421      	asrs	r1, r4, #16
 800b9aa:	1879      	adds	r1, r7, r1
 800b9ac:	b2a4      	uxth	r4, r4
 800b9ae:	140f      	asrs	r7, r1, #16
 800b9b0:	0409      	lsls	r1, r1, #16
 800b9b2:	4321      	orrs	r1, r4
 800b9b4:	4664      	mov	r4, ip
 800b9b6:	c402      	stmia	r4!, {r1}
 800b9b8:	46a4      	mov	ip, r4
 800b9ba:	e7dd      	b.n	800b978 <__mdiff+0xd8>
 800b9bc:	3801      	subs	r0, #1
 800b9be:	e7e9      	b.n	800b994 <__mdiff+0xf4>
 800b9c0:	0800e2cd 	.word	0x0800e2cd
 800b9c4:	0800e2de 	.word	0x0800e2de
 800b9c8:	00000237 	.word	0x00000237
 800b9cc:	00000245 	.word	0x00000245

0800b9d0 <__ulp>:
 800b9d0:	2000      	movs	r0, #0
 800b9d2:	4b0b      	ldr	r3, [pc, #44]	; (800ba00 <__ulp+0x30>)
 800b9d4:	4019      	ands	r1, r3
 800b9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ba04 <__ulp+0x34>)
 800b9d8:	18c9      	adds	r1, r1, r3
 800b9da:	4281      	cmp	r1, r0
 800b9dc:	dc06      	bgt.n	800b9ec <__ulp+0x1c>
 800b9de:	4249      	negs	r1, r1
 800b9e0:	150b      	asrs	r3, r1, #20
 800b9e2:	2b13      	cmp	r3, #19
 800b9e4:	dc03      	bgt.n	800b9ee <__ulp+0x1e>
 800b9e6:	2180      	movs	r1, #128	; 0x80
 800b9e8:	0309      	lsls	r1, r1, #12
 800b9ea:	4119      	asrs	r1, r3
 800b9ec:	4770      	bx	lr
 800b9ee:	3b14      	subs	r3, #20
 800b9f0:	2001      	movs	r0, #1
 800b9f2:	2b1e      	cmp	r3, #30
 800b9f4:	dc02      	bgt.n	800b9fc <__ulp+0x2c>
 800b9f6:	2080      	movs	r0, #128	; 0x80
 800b9f8:	0600      	lsls	r0, r0, #24
 800b9fa:	40d8      	lsrs	r0, r3
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	e7f5      	b.n	800b9ec <__ulp+0x1c>
 800ba00:	7ff00000 	.word	0x7ff00000
 800ba04:	fcc00000 	.word	0xfcc00000

0800ba08 <__b2d>:
 800ba08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba0a:	0006      	movs	r6, r0
 800ba0c:	6903      	ldr	r3, [r0, #16]
 800ba0e:	3614      	adds	r6, #20
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	18f3      	adds	r3, r6, r3
 800ba14:	1f1d      	subs	r5, r3, #4
 800ba16:	682c      	ldr	r4, [r5, #0]
 800ba18:	000f      	movs	r7, r1
 800ba1a:	0020      	movs	r0, r4
 800ba1c:	9301      	str	r3, [sp, #4]
 800ba1e:	f7ff fd49 	bl	800b4b4 <__hi0bits>
 800ba22:	2220      	movs	r2, #32
 800ba24:	1a12      	subs	r2, r2, r0
 800ba26:	603a      	str	r2, [r7, #0]
 800ba28:	0003      	movs	r3, r0
 800ba2a:	4a1c      	ldr	r2, [pc, #112]	; (800ba9c <__b2d+0x94>)
 800ba2c:	280a      	cmp	r0, #10
 800ba2e:	dc15      	bgt.n	800ba5c <__b2d+0x54>
 800ba30:	210b      	movs	r1, #11
 800ba32:	0027      	movs	r7, r4
 800ba34:	1a09      	subs	r1, r1, r0
 800ba36:	40cf      	lsrs	r7, r1
 800ba38:	433a      	orrs	r2, r7
 800ba3a:	468c      	mov	ip, r1
 800ba3c:	0011      	movs	r1, r2
 800ba3e:	2200      	movs	r2, #0
 800ba40:	42ae      	cmp	r6, r5
 800ba42:	d202      	bcs.n	800ba4a <__b2d+0x42>
 800ba44:	9a01      	ldr	r2, [sp, #4]
 800ba46:	3a08      	subs	r2, #8
 800ba48:	6812      	ldr	r2, [r2, #0]
 800ba4a:	3315      	adds	r3, #21
 800ba4c:	409c      	lsls	r4, r3
 800ba4e:	4663      	mov	r3, ip
 800ba50:	0027      	movs	r7, r4
 800ba52:	40da      	lsrs	r2, r3
 800ba54:	4317      	orrs	r7, r2
 800ba56:	0038      	movs	r0, r7
 800ba58:	b003      	add	sp, #12
 800ba5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba5c:	2700      	movs	r7, #0
 800ba5e:	42ae      	cmp	r6, r5
 800ba60:	d202      	bcs.n	800ba68 <__b2d+0x60>
 800ba62:	9d01      	ldr	r5, [sp, #4]
 800ba64:	3d08      	subs	r5, #8
 800ba66:	682f      	ldr	r7, [r5, #0]
 800ba68:	210b      	movs	r1, #11
 800ba6a:	4249      	negs	r1, r1
 800ba6c:	468c      	mov	ip, r1
 800ba6e:	449c      	add	ip, r3
 800ba70:	2b0b      	cmp	r3, #11
 800ba72:	d010      	beq.n	800ba96 <__b2d+0x8e>
 800ba74:	4661      	mov	r1, ip
 800ba76:	2320      	movs	r3, #32
 800ba78:	408c      	lsls	r4, r1
 800ba7a:	1a5b      	subs	r3, r3, r1
 800ba7c:	0039      	movs	r1, r7
 800ba7e:	40d9      	lsrs	r1, r3
 800ba80:	430c      	orrs	r4, r1
 800ba82:	4322      	orrs	r2, r4
 800ba84:	0011      	movs	r1, r2
 800ba86:	2200      	movs	r2, #0
 800ba88:	42b5      	cmp	r5, r6
 800ba8a:	d901      	bls.n	800ba90 <__b2d+0x88>
 800ba8c:	3d04      	subs	r5, #4
 800ba8e:	682a      	ldr	r2, [r5, #0]
 800ba90:	4664      	mov	r4, ip
 800ba92:	40a7      	lsls	r7, r4
 800ba94:	e7dd      	b.n	800ba52 <__b2d+0x4a>
 800ba96:	4322      	orrs	r2, r4
 800ba98:	0011      	movs	r1, r2
 800ba9a:	e7dc      	b.n	800ba56 <__b2d+0x4e>
 800ba9c:	3ff00000 	.word	0x3ff00000

0800baa0 <__d2b>:
 800baa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baa2:	2101      	movs	r1, #1
 800baa4:	0014      	movs	r4, r2
 800baa6:	001d      	movs	r5, r3
 800baa8:	9f08      	ldr	r7, [sp, #32]
 800baaa:	f7ff fc0b 	bl	800b2c4 <_Balloc>
 800baae:	1e06      	subs	r6, r0, #0
 800bab0:	d105      	bne.n	800babe <__d2b+0x1e>
 800bab2:	0032      	movs	r2, r6
 800bab4:	4b24      	ldr	r3, [pc, #144]	; (800bb48 <__d2b+0xa8>)
 800bab6:	4825      	ldr	r0, [pc, #148]	; (800bb4c <__d2b+0xac>)
 800bab8:	4925      	ldr	r1, [pc, #148]	; (800bb50 <__d2b+0xb0>)
 800baba:	f001 f9d1 	bl	800ce60 <__assert_func>
 800babe:	032b      	lsls	r3, r5, #12
 800bac0:	006d      	lsls	r5, r5, #1
 800bac2:	0b1b      	lsrs	r3, r3, #12
 800bac4:	0d6d      	lsrs	r5, r5, #21
 800bac6:	d125      	bne.n	800bb14 <__d2b+0x74>
 800bac8:	9301      	str	r3, [sp, #4]
 800baca:	2c00      	cmp	r4, #0
 800bacc:	d028      	beq.n	800bb20 <__d2b+0x80>
 800bace:	4668      	mov	r0, sp
 800bad0:	9400      	str	r4, [sp, #0]
 800bad2:	f7ff fd09 	bl	800b4e8 <__lo0bits>
 800bad6:	9b01      	ldr	r3, [sp, #4]
 800bad8:	9900      	ldr	r1, [sp, #0]
 800bada:	2800      	cmp	r0, #0
 800badc:	d01e      	beq.n	800bb1c <__d2b+0x7c>
 800bade:	2220      	movs	r2, #32
 800bae0:	001c      	movs	r4, r3
 800bae2:	1a12      	subs	r2, r2, r0
 800bae4:	4094      	lsls	r4, r2
 800bae6:	0022      	movs	r2, r4
 800bae8:	40c3      	lsrs	r3, r0
 800baea:	430a      	orrs	r2, r1
 800baec:	6172      	str	r2, [r6, #20]
 800baee:	9301      	str	r3, [sp, #4]
 800baf0:	9c01      	ldr	r4, [sp, #4]
 800baf2:	61b4      	str	r4, [r6, #24]
 800baf4:	1e63      	subs	r3, r4, #1
 800baf6:	419c      	sbcs	r4, r3
 800baf8:	3401      	adds	r4, #1
 800bafa:	6134      	str	r4, [r6, #16]
 800bafc:	2d00      	cmp	r5, #0
 800bafe:	d017      	beq.n	800bb30 <__d2b+0x90>
 800bb00:	2435      	movs	r4, #53	; 0x35
 800bb02:	4b14      	ldr	r3, [pc, #80]	; (800bb54 <__d2b+0xb4>)
 800bb04:	18ed      	adds	r5, r5, r3
 800bb06:	182d      	adds	r5, r5, r0
 800bb08:	603d      	str	r5, [r7, #0]
 800bb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0c:	1a24      	subs	r4, r4, r0
 800bb0e:	601c      	str	r4, [r3, #0]
 800bb10:	0030      	movs	r0, r6
 800bb12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb14:	2280      	movs	r2, #128	; 0x80
 800bb16:	0352      	lsls	r2, r2, #13
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	e7d5      	b.n	800bac8 <__d2b+0x28>
 800bb1c:	6171      	str	r1, [r6, #20]
 800bb1e:	e7e7      	b.n	800baf0 <__d2b+0x50>
 800bb20:	a801      	add	r0, sp, #4
 800bb22:	f7ff fce1 	bl	800b4e8 <__lo0bits>
 800bb26:	9b01      	ldr	r3, [sp, #4]
 800bb28:	2401      	movs	r4, #1
 800bb2a:	6173      	str	r3, [r6, #20]
 800bb2c:	3020      	adds	r0, #32
 800bb2e:	e7e4      	b.n	800bafa <__d2b+0x5a>
 800bb30:	4b09      	ldr	r3, [pc, #36]	; (800bb58 <__d2b+0xb8>)
 800bb32:	18c0      	adds	r0, r0, r3
 800bb34:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <__d2b+0xbc>)
 800bb36:	6038      	str	r0, [r7, #0]
 800bb38:	18e3      	adds	r3, r4, r3
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	18f3      	adds	r3, r6, r3
 800bb3e:	6958      	ldr	r0, [r3, #20]
 800bb40:	f7ff fcb8 	bl	800b4b4 <__hi0bits>
 800bb44:	0164      	lsls	r4, r4, #5
 800bb46:	e7e0      	b.n	800bb0a <__d2b+0x6a>
 800bb48:	0800e2cd 	.word	0x0800e2cd
 800bb4c:	0800e2de 	.word	0x0800e2de
 800bb50:	0000030f 	.word	0x0000030f
 800bb54:	fffffbcd 	.word	0xfffffbcd
 800bb58:	fffffbce 	.word	0xfffffbce
 800bb5c:	3fffffff 	.word	0x3fffffff

0800bb60 <__ratio>:
 800bb60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb62:	b087      	sub	sp, #28
 800bb64:	000f      	movs	r7, r1
 800bb66:	a904      	add	r1, sp, #16
 800bb68:	0006      	movs	r6, r0
 800bb6a:	f7ff ff4d 	bl	800ba08 <__b2d>
 800bb6e:	9000      	str	r0, [sp, #0]
 800bb70:	9101      	str	r1, [sp, #4]
 800bb72:	9c00      	ldr	r4, [sp, #0]
 800bb74:	9d01      	ldr	r5, [sp, #4]
 800bb76:	0038      	movs	r0, r7
 800bb78:	a905      	add	r1, sp, #20
 800bb7a:	f7ff ff45 	bl	800ba08 <__b2d>
 800bb7e:	9002      	str	r0, [sp, #8]
 800bb80:	9103      	str	r1, [sp, #12]
 800bb82:	9a02      	ldr	r2, [sp, #8]
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	6930      	ldr	r0, [r6, #16]
 800bb88:	6939      	ldr	r1, [r7, #16]
 800bb8a:	9e04      	ldr	r6, [sp, #16]
 800bb8c:	1a40      	subs	r0, r0, r1
 800bb8e:	9905      	ldr	r1, [sp, #20]
 800bb90:	0140      	lsls	r0, r0, #5
 800bb92:	1a71      	subs	r1, r6, r1
 800bb94:	1841      	adds	r1, r0, r1
 800bb96:	0508      	lsls	r0, r1, #20
 800bb98:	2900      	cmp	r1, #0
 800bb9a:	dd07      	ble.n	800bbac <__ratio+0x4c>
 800bb9c:	9901      	ldr	r1, [sp, #4]
 800bb9e:	1845      	adds	r5, r0, r1
 800bba0:	0020      	movs	r0, r4
 800bba2:	0029      	movs	r1, r5
 800bba4:	f7f5 facc 	bl	8001140 <__aeabi_ddiv>
 800bba8:	b007      	add	sp, #28
 800bbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbac:	9903      	ldr	r1, [sp, #12]
 800bbae:	1a0b      	subs	r3, r1, r0
 800bbb0:	e7f6      	b.n	800bba0 <__ratio+0x40>

0800bbb2 <__copybits>:
 800bbb2:	b570      	push	{r4, r5, r6, lr}
 800bbb4:	0014      	movs	r4, r2
 800bbb6:	0005      	movs	r5, r0
 800bbb8:	3901      	subs	r1, #1
 800bbba:	6913      	ldr	r3, [r2, #16]
 800bbbc:	1149      	asrs	r1, r1, #5
 800bbbe:	3101      	adds	r1, #1
 800bbc0:	0089      	lsls	r1, r1, #2
 800bbc2:	3414      	adds	r4, #20
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	1841      	adds	r1, r0, r1
 800bbc8:	18e3      	adds	r3, r4, r3
 800bbca:	42a3      	cmp	r3, r4
 800bbcc:	d80d      	bhi.n	800bbea <__copybits+0x38>
 800bbce:	0014      	movs	r4, r2
 800bbd0:	3411      	adds	r4, #17
 800bbd2:	2500      	movs	r5, #0
 800bbd4:	429c      	cmp	r4, r3
 800bbd6:	d803      	bhi.n	800bbe0 <__copybits+0x2e>
 800bbd8:	1a9b      	subs	r3, r3, r2
 800bbda:	3b11      	subs	r3, #17
 800bbdc:	089b      	lsrs	r3, r3, #2
 800bbde:	009d      	lsls	r5, r3, #2
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	1940      	adds	r0, r0, r5
 800bbe4:	4281      	cmp	r1, r0
 800bbe6:	d803      	bhi.n	800bbf0 <__copybits+0x3e>
 800bbe8:	bd70      	pop	{r4, r5, r6, pc}
 800bbea:	cc40      	ldmia	r4!, {r6}
 800bbec:	c540      	stmia	r5!, {r6}
 800bbee:	e7ec      	b.n	800bbca <__copybits+0x18>
 800bbf0:	c008      	stmia	r0!, {r3}
 800bbf2:	e7f7      	b.n	800bbe4 <__copybits+0x32>

0800bbf4 <__any_on>:
 800bbf4:	0002      	movs	r2, r0
 800bbf6:	6900      	ldr	r0, [r0, #16]
 800bbf8:	b510      	push	{r4, lr}
 800bbfa:	3214      	adds	r2, #20
 800bbfc:	114b      	asrs	r3, r1, #5
 800bbfe:	4298      	cmp	r0, r3
 800bc00:	db13      	blt.n	800bc2a <__any_on+0x36>
 800bc02:	dd0c      	ble.n	800bc1e <__any_on+0x2a>
 800bc04:	241f      	movs	r4, #31
 800bc06:	0008      	movs	r0, r1
 800bc08:	4020      	ands	r0, r4
 800bc0a:	4221      	tst	r1, r4
 800bc0c:	d007      	beq.n	800bc1e <__any_on+0x2a>
 800bc0e:	0099      	lsls	r1, r3, #2
 800bc10:	588c      	ldr	r4, [r1, r2]
 800bc12:	0021      	movs	r1, r4
 800bc14:	40c1      	lsrs	r1, r0
 800bc16:	4081      	lsls	r1, r0
 800bc18:	2001      	movs	r0, #1
 800bc1a:	428c      	cmp	r4, r1
 800bc1c:	d104      	bne.n	800bc28 <__any_on+0x34>
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	18d3      	adds	r3, r2, r3
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d803      	bhi.n	800bc2e <__any_on+0x3a>
 800bc26:	2000      	movs	r0, #0
 800bc28:	bd10      	pop	{r4, pc}
 800bc2a:	0003      	movs	r3, r0
 800bc2c:	e7f7      	b.n	800bc1e <__any_on+0x2a>
 800bc2e:	3b04      	subs	r3, #4
 800bc30:	6819      	ldr	r1, [r3, #0]
 800bc32:	2900      	cmp	r1, #0
 800bc34:	d0f5      	beq.n	800bc22 <__any_on+0x2e>
 800bc36:	2001      	movs	r0, #1
 800bc38:	e7f6      	b.n	800bc28 <__any_on+0x34>
	...

0800bc3c <sulp>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	0016      	movs	r6, r2
 800bc40:	000d      	movs	r5, r1
 800bc42:	f7ff fec5 	bl	800b9d0 <__ulp>
 800bc46:	2e00      	cmp	r6, #0
 800bc48:	d00d      	beq.n	800bc66 <sulp+0x2a>
 800bc4a:	236b      	movs	r3, #107	; 0x6b
 800bc4c:	006a      	lsls	r2, r5, #1
 800bc4e:	0d52      	lsrs	r2, r2, #21
 800bc50:	1a9b      	subs	r3, r3, r2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	dd07      	ble.n	800bc66 <sulp+0x2a>
 800bc56:	2400      	movs	r4, #0
 800bc58:	4a03      	ldr	r2, [pc, #12]	; (800bc68 <sulp+0x2c>)
 800bc5a:	051b      	lsls	r3, r3, #20
 800bc5c:	189d      	adds	r5, r3, r2
 800bc5e:	002b      	movs	r3, r5
 800bc60:	0022      	movs	r2, r4
 800bc62:	f7f5 fe67 	bl	8001934 <__aeabi_dmul>
 800bc66:	bd70      	pop	{r4, r5, r6, pc}
 800bc68:	3ff00000 	.word	0x3ff00000

0800bc6c <_strtod_l>:
 800bc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc6e:	b0a1      	sub	sp, #132	; 0x84
 800bc70:	9219      	str	r2, [sp, #100]	; 0x64
 800bc72:	2200      	movs	r2, #0
 800bc74:	2600      	movs	r6, #0
 800bc76:	2700      	movs	r7, #0
 800bc78:	9004      	str	r0, [sp, #16]
 800bc7a:	9107      	str	r1, [sp, #28]
 800bc7c:	921c      	str	r2, [sp, #112]	; 0x70
 800bc7e:	911b      	str	r1, [sp, #108]	; 0x6c
 800bc80:	780a      	ldrb	r2, [r1, #0]
 800bc82:	2a2b      	cmp	r2, #43	; 0x2b
 800bc84:	d055      	beq.n	800bd32 <_strtod_l+0xc6>
 800bc86:	d841      	bhi.n	800bd0c <_strtod_l+0xa0>
 800bc88:	2a0d      	cmp	r2, #13
 800bc8a:	d83b      	bhi.n	800bd04 <_strtod_l+0x98>
 800bc8c:	2a08      	cmp	r2, #8
 800bc8e:	d83b      	bhi.n	800bd08 <_strtod_l+0x9c>
 800bc90:	2a00      	cmp	r2, #0
 800bc92:	d044      	beq.n	800bd1e <_strtod_l+0xb2>
 800bc94:	2200      	movs	r2, #0
 800bc96:	920f      	str	r2, [sp, #60]	; 0x3c
 800bc98:	2100      	movs	r1, #0
 800bc9a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bc9c:	9109      	str	r1, [sp, #36]	; 0x24
 800bc9e:	782a      	ldrb	r2, [r5, #0]
 800bca0:	2a30      	cmp	r2, #48	; 0x30
 800bca2:	d000      	beq.n	800bca6 <_strtod_l+0x3a>
 800bca4:	e085      	b.n	800bdb2 <_strtod_l+0x146>
 800bca6:	786a      	ldrb	r2, [r5, #1]
 800bca8:	3120      	adds	r1, #32
 800bcaa:	438a      	bics	r2, r1
 800bcac:	2a58      	cmp	r2, #88	; 0x58
 800bcae:	d000      	beq.n	800bcb2 <_strtod_l+0x46>
 800bcb0:	e075      	b.n	800bd9e <_strtod_l+0x132>
 800bcb2:	9302      	str	r3, [sp, #8]
 800bcb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcb6:	4a97      	ldr	r2, [pc, #604]	; (800bf14 <_strtod_l+0x2a8>)
 800bcb8:	9301      	str	r3, [sp, #4]
 800bcba:	ab1c      	add	r3, sp, #112	; 0x70
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	9804      	ldr	r0, [sp, #16]
 800bcc0:	ab1d      	add	r3, sp, #116	; 0x74
 800bcc2:	a91b      	add	r1, sp, #108	; 0x6c
 800bcc4:	f001 f982 	bl	800cfcc <__gethex>
 800bcc8:	230f      	movs	r3, #15
 800bcca:	0002      	movs	r2, r0
 800bccc:	401a      	ands	r2, r3
 800bcce:	0004      	movs	r4, r0
 800bcd0:	9205      	str	r2, [sp, #20]
 800bcd2:	4218      	tst	r0, r3
 800bcd4:	d005      	beq.n	800bce2 <_strtod_l+0x76>
 800bcd6:	2a06      	cmp	r2, #6
 800bcd8:	d12d      	bne.n	800bd36 <_strtod_l+0xca>
 800bcda:	1c6b      	adds	r3, r5, #1
 800bcdc:	931b      	str	r3, [sp, #108]	; 0x6c
 800bcde:	2300      	movs	r3, #0
 800bce0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bce2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <_strtod_l+0x82>
 800bce8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01b      	beq.n	800bd2c <_strtod_l+0xc0>
 800bcf4:	2380      	movs	r3, #128	; 0x80
 800bcf6:	0032      	movs	r2, r6
 800bcf8:	061b      	lsls	r3, r3, #24
 800bcfa:	18fb      	adds	r3, r7, r3
 800bcfc:	0010      	movs	r0, r2
 800bcfe:	0019      	movs	r1, r3
 800bd00:	b021      	add	sp, #132	; 0x84
 800bd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd04:	2a20      	cmp	r2, #32
 800bd06:	d1c5      	bne.n	800bc94 <_strtod_l+0x28>
 800bd08:	3101      	adds	r1, #1
 800bd0a:	e7b8      	b.n	800bc7e <_strtod_l+0x12>
 800bd0c:	2a2d      	cmp	r2, #45	; 0x2d
 800bd0e:	d1c1      	bne.n	800bc94 <_strtod_l+0x28>
 800bd10:	3a2c      	subs	r2, #44	; 0x2c
 800bd12:	920f      	str	r2, [sp, #60]	; 0x3c
 800bd14:	1c4a      	adds	r2, r1, #1
 800bd16:	921b      	str	r2, [sp, #108]	; 0x6c
 800bd18:	784a      	ldrb	r2, [r1, #1]
 800bd1a:	2a00      	cmp	r2, #0
 800bd1c:	d1bc      	bne.n	800bc98 <_strtod_l+0x2c>
 800bd1e:	9b07      	ldr	r3, [sp, #28]
 800bd20:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd22:	2300      	movs	r3, #0
 800bd24:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1dd      	bne.n	800bce8 <_strtod_l+0x7c>
 800bd2c:	0032      	movs	r2, r6
 800bd2e:	003b      	movs	r3, r7
 800bd30:	e7e4      	b.n	800bcfc <_strtod_l+0x90>
 800bd32:	2200      	movs	r2, #0
 800bd34:	e7ed      	b.n	800bd12 <_strtod_l+0xa6>
 800bd36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bd38:	2a00      	cmp	r2, #0
 800bd3a:	d007      	beq.n	800bd4c <_strtod_l+0xe0>
 800bd3c:	2135      	movs	r1, #53	; 0x35
 800bd3e:	a81e      	add	r0, sp, #120	; 0x78
 800bd40:	f7ff ff37 	bl	800bbb2 <__copybits>
 800bd44:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bd46:	9804      	ldr	r0, [sp, #16]
 800bd48:	f7ff fb00 	bl	800b34c <_Bfree>
 800bd4c:	9805      	ldr	r0, [sp, #20]
 800bd4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bd50:	3801      	subs	r0, #1
 800bd52:	2804      	cmp	r0, #4
 800bd54:	d806      	bhi.n	800bd64 <_strtod_l+0xf8>
 800bd56:	f7f4 f9df 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bd5a:	0312      	.short	0x0312
 800bd5c:	1e1c      	.short	0x1e1c
 800bd5e:	12          	.byte	0x12
 800bd5f:	00          	.byte	0x00
 800bd60:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800bd62:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800bd64:	05e4      	lsls	r4, r4, #23
 800bd66:	d502      	bpl.n	800bd6e <_strtod_l+0x102>
 800bd68:	2380      	movs	r3, #128	; 0x80
 800bd6a:	061b      	lsls	r3, r3, #24
 800bd6c:	431f      	orrs	r7, r3
 800bd6e:	4b6a      	ldr	r3, [pc, #424]	; (800bf18 <_strtod_l+0x2ac>)
 800bd70:	423b      	tst	r3, r7
 800bd72:	d1b6      	bne.n	800bce2 <_strtod_l+0x76>
 800bd74:	f7fe fac4 	bl	800a300 <__errno>
 800bd78:	2322      	movs	r3, #34	; 0x22
 800bd7a:	6003      	str	r3, [r0, #0]
 800bd7c:	e7b1      	b.n	800bce2 <_strtod_l+0x76>
 800bd7e:	4967      	ldr	r1, [pc, #412]	; (800bf1c <_strtod_l+0x2b0>)
 800bd80:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bd82:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800bd84:	400a      	ands	r2, r1
 800bd86:	4966      	ldr	r1, [pc, #408]	; (800bf20 <_strtod_l+0x2b4>)
 800bd88:	185b      	adds	r3, r3, r1
 800bd8a:	051b      	lsls	r3, r3, #20
 800bd8c:	431a      	orrs	r2, r3
 800bd8e:	0017      	movs	r7, r2
 800bd90:	e7e8      	b.n	800bd64 <_strtod_l+0xf8>
 800bd92:	4f61      	ldr	r7, [pc, #388]	; (800bf18 <_strtod_l+0x2ac>)
 800bd94:	e7e6      	b.n	800bd64 <_strtod_l+0xf8>
 800bd96:	2601      	movs	r6, #1
 800bd98:	4f62      	ldr	r7, [pc, #392]	; (800bf24 <_strtod_l+0x2b8>)
 800bd9a:	4276      	negs	r6, r6
 800bd9c:	e7e2      	b.n	800bd64 <_strtod_l+0xf8>
 800bd9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bda0:	1c5a      	adds	r2, r3, #1
 800bda2:	921b      	str	r2, [sp, #108]	; 0x6c
 800bda4:	785b      	ldrb	r3, [r3, #1]
 800bda6:	2b30      	cmp	r3, #48	; 0x30
 800bda8:	d0f9      	beq.n	800bd9e <_strtod_l+0x132>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d099      	beq.n	800bce2 <_strtod_l+0x76>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb2:	2500      	movs	r5, #0
 800bdb4:	220a      	movs	r2, #10
 800bdb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdb8:	950d      	str	r5, [sp, #52]	; 0x34
 800bdba:	9310      	str	r3, [sp, #64]	; 0x40
 800bdbc:	9508      	str	r5, [sp, #32]
 800bdbe:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bdc0:	7804      	ldrb	r4, [r0, #0]
 800bdc2:	0023      	movs	r3, r4
 800bdc4:	3b30      	subs	r3, #48	; 0x30
 800bdc6:	b2d9      	uxtb	r1, r3
 800bdc8:	2909      	cmp	r1, #9
 800bdca:	d927      	bls.n	800be1c <_strtod_l+0x1b0>
 800bdcc:	2201      	movs	r2, #1
 800bdce:	4956      	ldr	r1, [pc, #344]	; (800bf28 <_strtod_l+0x2bc>)
 800bdd0:	f001 f812 	bl	800cdf8 <strncmp>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d031      	beq.n	800be3c <_strtod_l+0x1d0>
 800bdd8:	2000      	movs	r0, #0
 800bdda:	0023      	movs	r3, r4
 800bddc:	4684      	mov	ip, r0
 800bdde:	9a08      	ldr	r2, [sp, #32]
 800bde0:	900c      	str	r0, [sp, #48]	; 0x30
 800bde2:	9205      	str	r2, [sp, #20]
 800bde4:	2220      	movs	r2, #32
 800bde6:	0019      	movs	r1, r3
 800bde8:	4391      	bics	r1, r2
 800bdea:	000a      	movs	r2, r1
 800bdec:	2100      	movs	r1, #0
 800bdee:	9106      	str	r1, [sp, #24]
 800bdf0:	2a45      	cmp	r2, #69	; 0x45
 800bdf2:	d000      	beq.n	800bdf6 <_strtod_l+0x18a>
 800bdf4:	e0c2      	b.n	800bf7c <_strtod_l+0x310>
 800bdf6:	9b05      	ldr	r3, [sp, #20]
 800bdf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdfa:	4303      	orrs	r3, r0
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	428b      	cmp	r3, r1
 800be00:	d08d      	beq.n	800bd1e <_strtod_l+0xb2>
 800be02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be04:	9307      	str	r3, [sp, #28]
 800be06:	3301      	adds	r3, #1
 800be08:	931b      	str	r3, [sp, #108]	; 0x6c
 800be0a:	9b07      	ldr	r3, [sp, #28]
 800be0c:	785b      	ldrb	r3, [r3, #1]
 800be0e:	2b2b      	cmp	r3, #43	; 0x2b
 800be10:	d071      	beq.n	800bef6 <_strtod_l+0x28a>
 800be12:	000c      	movs	r4, r1
 800be14:	2b2d      	cmp	r3, #45	; 0x2d
 800be16:	d174      	bne.n	800bf02 <_strtod_l+0x296>
 800be18:	2401      	movs	r4, #1
 800be1a:	e06d      	b.n	800bef8 <_strtod_l+0x28c>
 800be1c:	9908      	ldr	r1, [sp, #32]
 800be1e:	2908      	cmp	r1, #8
 800be20:	dc09      	bgt.n	800be36 <_strtod_l+0x1ca>
 800be22:	990d      	ldr	r1, [sp, #52]	; 0x34
 800be24:	4351      	muls	r1, r2
 800be26:	185b      	adds	r3, r3, r1
 800be28:	930d      	str	r3, [sp, #52]	; 0x34
 800be2a:	9b08      	ldr	r3, [sp, #32]
 800be2c:	3001      	adds	r0, #1
 800be2e:	3301      	adds	r3, #1
 800be30:	9308      	str	r3, [sp, #32]
 800be32:	901b      	str	r0, [sp, #108]	; 0x6c
 800be34:	e7c3      	b.n	800bdbe <_strtod_l+0x152>
 800be36:	4355      	muls	r5, r2
 800be38:	195d      	adds	r5, r3, r5
 800be3a:	e7f6      	b.n	800be2a <_strtod_l+0x1be>
 800be3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	921b      	str	r2, [sp, #108]	; 0x6c
 800be42:	9a08      	ldr	r2, [sp, #32]
 800be44:	785b      	ldrb	r3, [r3, #1]
 800be46:	2a00      	cmp	r2, #0
 800be48:	d03a      	beq.n	800bec0 <_strtod_l+0x254>
 800be4a:	900c      	str	r0, [sp, #48]	; 0x30
 800be4c:	9205      	str	r2, [sp, #20]
 800be4e:	001a      	movs	r2, r3
 800be50:	3a30      	subs	r2, #48	; 0x30
 800be52:	2a09      	cmp	r2, #9
 800be54:	d912      	bls.n	800be7c <_strtod_l+0x210>
 800be56:	2201      	movs	r2, #1
 800be58:	4694      	mov	ip, r2
 800be5a:	e7c3      	b.n	800bde4 <_strtod_l+0x178>
 800be5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be5e:	3001      	adds	r0, #1
 800be60:	1c5a      	adds	r2, r3, #1
 800be62:	921b      	str	r2, [sp, #108]	; 0x6c
 800be64:	785b      	ldrb	r3, [r3, #1]
 800be66:	2b30      	cmp	r3, #48	; 0x30
 800be68:	d0f8      	beq.n	800be5c <_strtod_l+0x1f0>
 800be6a:	001a      	movs	r2, r3
 800be6c:	3a31      	subs	r2, #49	; 0x31
 800be6e:	2a08      	cmp	r2, #8
 800be70:	d83c      	bhi.n	800beec <_strtod_l+0x280>
 800be72:	900c      	str	r0, [sp, #48]	; 0x30
 800be74:	2000      	movs	r0, #0
 800be76:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800be78:	9005      	str	r0, [sp, #20]
 800be7a:	9210      	str	r2, [sp, #64]	; 0x40
 800be7c:	001a      	movs	r2, r3
 800be7e:	1c41      	adds	r1, r0, #1
 800be80:	3a30      	subs	r2, #48	; 0x30
 800be82:	2b30      	cmp	r3, #48	; 0x30
 800be84:	d016      	beq.n	800beb4 <_strtod_l+0x248>
 800be86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be88:	185b      	adds	r3, r3, r1
 800be8a:	930c      	str	r3, [sp, #48]	; 0x30
 800be8c:	9b05      	ldr	r3, [sp, #20]
 800be8e:	210a      	movs	r1, #10
 800be90:	469c      	mov	ip, r3
 800be92:	4484      	add	ip, r0
 800be94:	4563      	cmp	r3, ip
 800be96:	d115      	bne.n	800bec4 <_strtod_l+0x258>
 800be98:	9905      	ldr	r1, [sp, #20]
 800be9a:	9b05      	ldr	r3, [sp, #20]
 800be9c:	3101      	adds	r1, #1
 800be9e:	1809      	adds	r1, r1, r0
 800bea0:	181b      	adds	r3, r3, r0
 800bea2:	9105      	str	r1, [sp, #20]
 800bea4:	2b08      	cmp	r3, #8
 800bea6:	dc19      	bgt.n	800bedc <_strtod_l+0x270>
 800bea8:	230a      	movs	r3, #10
 800beaa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800beac:	434b      	muls	r3, r1
 800beae:	2100      	movs	r1, #0
 800beb0:	18d3      	adds	r3, r2, r3
 800beb2:	930d      	str	r3, [sp, #52]	; 0x34
 800beb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800beb6:	0008      	movs	r0, r1
 800beb8:	1c5a      	adds	r2, r3, #1
 800beba:	921b      	str	r2, [sp, #108]	; 0x6c
 800bebc:	785b      	ldrb	r3, [r3, #1]
 800bebe:	e7c6      	b.n	800be4e <_strtod_l+0x1e2>
 800bec0:	9808      	ldr	r0, [sp, #32]
 800bec2:	e7d0      	b.n	800be66 <_strtod_l+0x1fa>
 800bec4:	1c5c      	adds	r4, r3, #1
 800bec6:	2b08      	cmp	r3, #8
 800bec8:	dc04      	bgt.n	800bed4 <_strtod_l+0x268>
 800beca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800becc:	434b      	muls	r3, r1
 800bece:	930d      	str	r3, [sp, #52]	; 0x34
 800bed0:	0023      	movs	r3, r4
 800bed2:	e7df      	b.n	800be94 <_strtod_l+0x228>
 800bed4:	2c10      	cmp	r4, #16
 800bed6:	dcfb      	bgt.n	800bed0 <_strtod_l+0x264>
 800bed8:	434d      	muls	r5, r1
 800beda:	e7f9      	b.n	800bed0 <_strtod_l+0x264>
 800bedc:	9b05      	ldr	r3, [sp, #20]
 800bede:	2100      	movs	r1, #0
 800bee0:	2b10      	cmp	r3, #16
 800bee2:	dce7      	bgt.n	800beb4 <_strtod_l+0x248>
 800bee4:	230a      	movs	r3, #10
 800bee6:	435d      	muls	r5, r3
 800bee8:	1955      	adds	r5, r2, r5
 800beea:	e7e3      	b.n	800beb4 <_strtod_l+0x248>
 800beec:	2200      	movs	r2, #0
 800beee:	920c      	str	r2, [sp, #48]	; 0x30
 800bef0:	9205      	str	r2, [sp, #20]
 800bef2:	3201      	adds	r2, #1
 800bef4:	e7b0      	b.n	800be58 <_strtod_l+0x1ec>
 800bef6:	2400      	movs	r4, #0
 800bef8:	9b07      	ldr	r3, [sp, #28]
 800befa:	3302      	adds	r3, #2
 800befc:	931b      	str	r3, [sp, #108]	; 0x6c
 800befe:	9b07      	ldr	r3, [sp, #28]
 800bf00:	789b      	ldrb	r3, [r3, #2]
 800bf02:	001a      	movs	r2, r3
 800bf04:	3a30      	subs	r2, #48	; 0x30
 800bf06:	2a09      	cmp	r2, #9
 800bf08:	d914      	bls.n	800bf34 <_strtod_l+0x2c8>
 800bf0a:	9a07      	ldr	r2, [sp, #28]
 800bf0c:	921b      	str	r2, [sp, #108]	; 0x6c
 800bf0e:	2200      	movs	r2, #0
 800bf10:	e033      	b.n	800bf7a <_strtod_l+0x30e>
 800bf12:	46c0      	nop			; (mov r8, r8)
 800bf14:	0800e438 	.word	0x0800e438
 800bf18:	7ff00000 	.word	0x7ff00000
 800bf1c:	ffefffff 	.word	0xffefffff
 800bf20:	00000433 	.word	0x00000433
 800bf24:	7fffffff 	.word	0x7fffffff
 800bf28:	0800e434 	.word	0x0800e434
 800bf2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	921b      	str	r2, [sp, #108]	; 0x6c
 800bf32:	785b      	ldrb	r3, [r3, #1]
 800bf34:	2b30      	cmp	r3, #48	; 0x30
 800bf36:	d0f9      	beq.n	800bf2c <_strtod_l+0x2c0>
 800bf38:	2200      	movs	r2, #0
 800bf3a:	9206      	str	r2, [sp, #24]
 800bf3c:	001a      	movs	r2, r3
 800bf3e:	3a31      	subs	r2, #49	; 0x31
 800bf40:	2a08      	cmp	r2, #8
 800bf42:	d81b      	bhi.n	800bf7c <_strtod_l+0x310>
 800bf44:	3b30      	subs	r3, #48	; 0x30
 800bf46:	930e      	str	r3, [sp, #56]	; 0x38
 800bf48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf4a:	9306      	str	r3, [sp, #24]
 800bf4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf4e:	1c59      	adds	r1, r3, #1
 800bf50:	911b      	str	r1, [sp, #108]	; 0x6c
 800bf52:	785b      	ldrb	r3, [r3, #1]
 800bf54:	001a      	movs	r2, r3
 800bf56:	3a30      	subs	r2, #48	; 0x30
 800bf58:	2a09      	cmp	r2, #9
 800bf5a:	d93a      	bls.n	800bfd2 <_strtod_l+0x366>
 800bf5c:	9a06      	ldr	r2, [sp, #24]
 800bf5e:	1a8a      	subs	r2, r1, r2
 800bf60:	49b2      	ldr	r1, [pc, #712]	; (800c22c <_strtod_l+0x5c0>)
 800bf62:	9106      	str	r1, [sp, #24]
 800bf64:	2a08      	cmp	r2, #8
 800bf66:	dc04      	bgt.n	800bf72 <_strtod_l+0x306>
 800bf68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf6a:	9206      	str	r2, [sp, #24]
 800bf6c:	428a      	cmp	r2, r1
 800bf6e:	dd00      	ble.n	800bf72 <_strtod_l+0x306>
 800bf70:	9106      	str	r1, [sp, #24]
 800bf72:	2c00      	cmp	r4, #0
 800bf74:	d002      	beq.n	800bf7c <_strtod_l+0x310>
 800bf76:	9a06      	ldr	r2, [sp, #24]
 800bf78:	4252      	negs	r2, r2
 800bf7a:	9206      	str	r2, [sp, #24]
 800bf7c:	9a05      	ldr	r2, [sp, #20]
 800bf7e:	2a00      	cmp	r2, #0
 800bf80:	d14d      	bne.n	800c01e <_strtod_l+0x3b2>
 800bf82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf84:	4310      	orrs	r0, r2
 800bf86:	d000      	beq.n	800bf8a <_strtod_l+0x31e>
 800bf88:	e6ab      	b.n	800bce2 <_strtod_l+0x76>
 800bf8a:	4662      	mov	r2, ip
 800bf8c:	2a00      	cmp	r2, #0
 800bf8e:	d000      	beq.n	800bf92 <_strtod_l+0x326>
 800bf90:	e6c5      	b.n	800bd1e <_strtod_l+0xb2>
 800bf92:	2b69      	cmp	r3, #105	; 0x69
 800bf94:	d027      	beq.n	800bfe6 <_strtod_l+0x37a>
 800bf96:	dc23      	bgt.n	800bfe0 <_strtod_l+0x374>
 800bf98:	2b49      	cmp	r3, #73	; 0x49
 800bf9a:	d024      	beq.n	800bfe6 <_strtod_l+0x37a>
 800bf9c:	2b4e      	cmp	r3, #78	; 0x4e
 800bf9e:	d000      	beq.n	800bfa2 <_strtod_l+0x336>
 800bfa0:	e6bd      	b.n	800bd1e <_strtod_l+0xb2>
 800bfa2:	49a3      	ldr	r1, [pc, #652]	; (800c230 <_strtod_l+0x5c4>)
 800bfa4:	a81b      	add	r0, sp, #108	; 0x6c
 800bfa6:	f001 fa47 	bl	800d438 <__match>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d100      	bne.n	800bfb0 <_strtod_l+0x344>
 800bfae:	e6b6      	b.n	800bd1e <_strtod_l+0xb2>
 800bfb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b28      	cmp	r3, #40	; 0x28
 800bfb6:	d12c      	bne.n	800c012 <_strtod_l+0x3a6>
 800bfb8:	499e      	ldr	r1, [pc, #632]	; (800c234 <_strtod_l+0x5c8>)
 800bfba:	aa1e      	add	r2, sp, #120	; 0x78
 800bfbc:	a81b      	add	r0, sp, #108	; 0x6c
 800bfbe:	f001 fa4f 	bl	800d460 <__hexnan>
 800bfc2:	2805      	cmp	r0, #5
 800bfc4:	d125      	bne.n	800c012 <_strtod_l+0x3a6>
 800bfc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bfc8:	4a9b      	ldr	r2, [pc, #620]	; (800c238 <_strtod_l+0x5cc>)
 800bfca:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800bfcc:	431a      	orrs	r2, r3
 800bfce:	0017      	movs	r7, r2
 800bfd0:	e687      	b.n	800bce2 <_strtod_l+0x76>
 800bfd2:	220a      	movs	r2, #10
 800bfd4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bfd6:	434a      	muls	r2, r1
 800bfd8:	18d2      	adds	r2, r2, r3
 800bfda:	3a30      	subs	r2, #48	; 0x30
 800bfdc:	920e      	str	r2, [sp, #56]	; 0x38
 800bfde:	e7b5      	b.n	800bf4c <_strtod_l+0x2e0>
 800bfe0:	2b6e      	cmp	r3, #110	; 0x6e
 800bfe2:	d0de      	beq.n	800bfa2 <_strtod_l+0x336>
 800bfe4:	e69b      	b.n	800bd1e <_strtod_l+0xb2>
 800bfe6:	4995      	ldr	r1, [pc, #596]	; (800c23c <_strtod_l+0x5d0>)
 800bfe8:	a81b      	add	r0, sp, #108	; 0x6c
 800bfea:	f001 fa25 	bl	800d438 <__match>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d100      	bne.n	800bff4 <_strtod_l+0x388>
 800bff2:	e694      	b.n	800bd1e <_strtod_l+0xb2>
 800bff4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bff6:	4992      	ldr	r1, [pc, #584]	; (800c240 <_strtod_l+0x5d4>)
 800bff8:	3b01      	subs	r3, #1
 800bffa:	a81b      	add	r0, sp, #108	; 0x6c
 800bffc:	931b      	str	r3, [sp, #108]	; 0x6c
 800bffe:	f001 fa1b 	bl	800d438 <__match>
 800c002:	2800      	cmp	r0, #0
 800c004:	d102      	bne.n	800c00c <_strtod_l+0x3a0>
 800c006:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c008:	3301      	adds	r3, #1
 800c00a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c00c:	2600      	movs	r6, #0
 800c00e:	4f8a      	ldr	r7, [pc, #552]	; (800c238 <_strtod_l+0x5cc>)
 800c010:	e667      	b.n	800bce2 <_strtod_l+0x76>
 800c012:	488c      	ldr	r0, [pc, #560]	; (800c244 <_strtod_l+0x5d8>)
 800c014:	f000 ff1e 	bl	800ce54 <nan>
 800c018:	0006      	movs	r6, r0
 800c01a:	000f      	movs	r7, r1
 800c01c:	e661      	b.n	800bce2 <_strtod_l+0x76>
 800c01e:	9b06      	ldr	r3, [sp, #24]
 800c020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c022:	1a9b      	subs	r3, r3, r2
 800c024:	9309      	str	r3, [sp, #36]	; 0x24
 800c026:	9b08      	ldr	r3, [sp, #32]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d101      	bne.n	800c030 <_strtod_l+0x3c4>
 800c02c:	9b05      	ldr	r3, [sp, #20]
 800c02e:	9308      	str	r3, [sp, #32]
 800c030:	9c05      	ldr	r4, [sp, #20]
 800c032:	2c10      	cmp	r4, #16
 800c034:	dd00      	ble.n	800c038 <_strtod_l+0x3cc>
 800c036:	2410      	movs	r4, #16
 800c038:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c03a:	f7f6 fb43 	bl	80026c4 <__aeabi_ui2d>
 800c03e:	9b05      	ldr	r3, [sp, #20]
 800c040:	0006      	movs	r6, r0
 800c042:	000f      	movs	r7, r1
 800c044:	2b09      	cmp	r3, #9
 800c046:	dd15      	ble.n	800c074 <_strtod_l+0x408>
 800c048:	0022      	movs	r2, r4
 800c04a:	4b7f      	ldr	r3, [pc, #508]	; (800c248 <_strtod_l+0x5dc>)
 800c04c:	3a09      	subs	r2, #9
 800c04e:	00d2      	lsls	r2, r2, #3
 800c050:	189b      	adds	r3, r3, r2
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f7f5 fc6d 	bl	8001934 <__aeabi_dmul>
 800c05a:	0006      	movs	r6, r0
 800c05c:	0028      	movs	r0, r5
 800c05e:	000f      	movs	r7, r1
 800c060:	f7f6 fb30 	bl	80026c4 <__aeabi_ui2d>
 800c064:	0002      	movs	r2, r0
 800c066:	000b      	movs	r3, r1
 800c068:	0030      	movs	r0, r6
 800c06a:	0039      	movs	r1, r7
 800c06c:	f7f4 fd08 	bl	8000a80 <__aeabi_dadd>
 800c070:	0006      	movs	r6, r0
 800c072:	000f      	movs	r7, r1
 800c074:	9b05      	ldr	r3, [sp, #20]
 800c076:	2b0f      	cmp	r3, #15
 800c078:	dc39      	bgt.n	800c0ee <_strtod_l+0x482>
 800c07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d100      	bne.n	800c082 <_strtod_l+0x416>
 800c080:	e62f      	b.n	800bce2 <_strtod_l+0x76>
 800c082:	dd24      	ble.n	800c0ce <_strtod_l+0x462>
 800c084:	2b16      	cmp	r3, #22
 800c086:	dc09      	bgt.n	800c09c <_strtod_l+0x430>
 800c088:	496f      	ldr	r1, [pc, #444]	; (800c248 <_strtod_l+0x5dc>)
 800c08a:	00db      	lsls	r3, r3, #3
 800c08c:	18c9      	adds	r1, r1, r3
 800c08e:	0032      	movs	r2, r6
 800c090:	6808      	ldr	r0, [r1, #0]
 800c092:	6849      	ldr	r1, [r1, #4]
 800c094:	003b      	movs	r3, r7
 800c096:	f7f5 fc4d 	bl	8001934 <__aeabi_dmul>
 800c09a:	e7bd      	b.n	800c018 <_strtod_l+0x3ac>
 800c09c:	2325      	movs	r3, #37	; 0x25
 800c09e:	9a05      	ldr	r2, [sp, #20]
 800c0a0:	1a9b      	subs	r3, r3, r2
 800c0a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	db22      	blt.n	800c0ee <_strtod_l+0x482>
 800c0a8:	240f      	movs	r4, #15
 800c0aa:	9b05      	ldr	r3, [sp, #20]
 800c0ac:	4d66      	ldr	r5, [pc, #408]	; (800c248 <_strtod_l+0x5dc>)
 800c0ae:	1ae4      	subs	r4, r4, r3
 800c0b0:	00e1      	lsls	r1, r4, #3
 800c0b2:	1869      	adds	r1, r5, r1
 800c0b4:	0032      	movs	r2, r6
 800c0b6:	6808      	ldr	r0, [r1, #0]
 800c0b8:	6849      	ldr	r1, [r1, #4]
 800c0ba:	003b      	movs	r3, r7
 800c0bc:	f7f5 fc3a 	bl	8001934 <__aeabi_dmul>
 800c0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0c2:	1b1c      	subs	r4, r3, r4
 800c0c4:	00e4      	lsls	r4, r4, #3
 800c0c6:	192d      	adds	r5, r5, r4
 800c0c8:	682a      	ldr	r2, [r5, #0]
 800c0ca:	686b      	ldr	r3, [r5, #4]
 800c0cc:	e7e3      	b.n	800c096 <_strtod_l+0x42a>
 800c0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d0:	3316      	adds	r3, #22
 800c0d2:	db0c      	blt.n	800c0ee <_strtod_l+0x482>
 800c0d4:	9906      	ldr	r1, [sp, #24]
 800c0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0d8:	4b5b      	ldr	r3, [pc, #364]	; (800c248 <_strtod_l+0x5dc>)
 800c0da:	1a52      	subs	r2, r2, r1
 800c0dc:	00d2      	lsls	r2, r2, #3
 800c0de:	189b      	adds	r3, r3, r2
 800c0e0:	0030      	movs	r0, r6
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	0039      	movs	r1, r7
 800c0e8:	f7f5 f82a 	bl	8001140 <__aeabi_ddiv>
 800c0ec:	e794      	b.n	800c018 <_strtod_l+0x3ac>
 800c0ee:	9b05      	ldr	r3, [sp, #20]
 800c0f0:	1b1c      	subs	r4, r3, r4
 800c0f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f4:	18e4      	adds	r4, r4, r3
 800c0f6:	2c00      	cmp	r4, #0
 800c0f8:	dd72      	ble.n	800c1e0 <_strtod_l+0x574>
 800c0fa:	220f      	movs	r2, #15
 800c0fc:	0023      	movs	r3, r4
 800c0fe:	4013      	ands	r3, r2
 800c100:	4214      	tst	r4, r2
 800c102:	d00a      	beq.n	800c11a <_strtod_l+0x4ae>
 800c104:	4950      	ldr	r1, [pc, #320]	; (800c248 <_strtod_l+0x5dc>)
 800c106:	00db      	lsls	r3, r3, #3
 800c108:	18c9      	adds	r1, r1, r3
 800c10a:	0032      	movs	r2, r6
 800c10c:	6808      	ldr	r0, [r1, #0]
 800c10e:	6849      	ldr	r1, [r1, #4]
 800c110:	003b      	movs	r3, r7
 800c112:	f7f5 fc0f 	bl	8001934 <__aeabi_dmul>
 800c116:	0006      	movs	r6, r0
 800c118:	000f      	movs	r7, r1
 800c11a:	230f      	movs	r3, #15
 800c11c:	439c      	bics	r4, r3
 800c11e:	d04a      	beq.n	800c1b6 <_strtod_l+0x54a>
 800c120:	3326      	adds	r3, #38	; 0x26
 800c122:	33ff      	adds	r3, #255	; 0xff
 800c124:	429c      	cmp	r4, r3
 800c126:	dd22      	ble.n	800c16e <_strtod_l+0x502>
 800c128:	2300      	movs	r3, #0
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	9306      	str	r3, [sp, #24]
 800c12e:	930d      	str	r3, [sp, #52]	; 0x34
 800c130:	9308      	str	r3, [sp, #32]
 800c132:	2322      	movs	r3, #34	; 0x22
 800c134:	2600      	movs	r6, #0
 800c136:	9a04      	ldr	r2, [sp, #16]
 800c138:	4f3f      	ldr	r7, [pc, #252]	; (800c238 <_strtod_l+0x5cc>)
 800c13a:	6013      	str	r3, [r2, #0]
 800c13c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c13e:	42b3      	cmp	r3, r6
 800c140:	d100      	bne.n	800c144 <_strtod_l+0x4d8>
 800c142:	e5ce      	b.n	800bce2 <_strtod_l+0x76>
 800c144:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c146:	9804      	ldr	r0, [sp, #16]
 800c148:	f7ff f900 	bl	800b34c <_Bfree>
 800c14c:	9908      	ldr	r1, [sp, #32]
 800c14e:	9804      	ldr	r0, [sp, #16]
 800c150:	f7ff f8fc 	bl	800b34c <_Bfree>
 800c154:	9906      	ldr	r1, [sp, #24]
 800c156:	9804      	ldr	r0, [sp, #16]
 800c158:	f7ff f8f8 	bl	800b34c <_Bfree>
 800c15c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c15e:	9804      	ldr	r0, [sp, #16]
 800c160:	f7ff f8f4 	bl	800b34c <_Bfree>
 800c164:	9905      	ldr	r1, [sp, #20]
 800c166:	9804      	ldr	r0, [sp, #16]
 800c168:	f7ff f8f0 	bl	800b34c <_Bfree>
 800c16c:	e5b9      	b.n	800bce2 <_strtod_l+0x76>
 800c16e:	2300      	movs	r3, #0
 800c170:	0030      	movs	r0, r6
 800c172:	0039      	movs	r1, r7
 800c174:	4d35      	ldr	r5, [pc, #212]	; (800c24c <_strtod_l+0x5e0>)
 800c176:	1124      	asrs	r4, r4, #4
 800c178:	9307      	str	r3, [sp, #28]
 800c17a:	2c01      	cmp	r4, #1
 800c17c:	dc1e      	bgt.n	800c1bc <_strtod_l+0x550>
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d001      	beq.n	800c186 <_strtod_l+0x51a>
 800c182:	0006      	movs	r6, r0
 800c184:	000f      	movs	r7, r1
 800c186:	4b32      	ldr	r3, [pc, #200]	; (800c250 <_strtod_l+0x5e4>)
 800c188:	9a07      	ldr	r2, [sp, #28]
 800c18a:	18ff      	adds	r7, r7, r3
 800c18c:	4b2f      	ldr	r3, [pc, #188]	; (800c24c <_strtod_l+0x5e0>)
 800c18e:	00d2      	lsls	r2, r2, #3
 800c190:	189d      	adds	r5, r3, r2
 800c192:	6828      	ldr	r0, [r5, #0]
 800c194:	6869      	ldr	r1, [r5, #4]
 800c196:	0032      	movs	r2, r6
 800c198:	003b      	movs	r3, r7
 800c19a:	f7f5 fbcb 	bl	8001934 <__aeabi_dmul>
 800c19e:	4b26      	ldr	r3, [pc, #152]	; (800c238 <_strtod_l+0x5cc>)
 800c1a0:	4a2c      	ldr	r2, [pc, #176]	; (800c254 <_strtod_l+0x5e8>)
 800c1a2:	0006      	movs	r6, r0
 800c1a4:	400b      	ands	r3, r1
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d8be      	bhi.n	800c128 <_strtod_l+0x4bc>
 800c1aa:	4a2b      	ldr	r2, [pc, #172]	; (800c258 <_strtod_l+0x5ec>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d913      	bls.n	800c1d8 <_strtod_l+0x56c>
 800c1b0:	2601      	movs	r6, #1
 800c1b2:	4f2a      	ldr	r7, [pc, #168]	; (800c25c <_strtod_l+0x5f0>)
 800c1b4:	4276      	negs	r6, r6
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	9307      	str	r3, [sp, #28]
 800c1ba:	e088      	b.n	800c2ce <_strtod_l+0x662>
 800c1bc:	2201      	movs	r2, #1
 800c1be:	4214      	tst	r4, r2
 800c1c0:	d004      	beq.n	800c1cc <_strtod_l+0x560>
 800c1c2:	682a      	ldr	r2, [r5, #0]
 800c1c4:	686b      	ldr	r3, [r5, #4]
 800c1c6:	f7f5 fbb5 	bl	8001934 <__aeabi_dmul>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	9a07      	ldr	r2, [sp, #28]
 800c1ce:	1064      	asrs	r4, r4, #1
 800c1d0:	3201      	adds	r2, #1
 800c1d2:	9207      	str	r2, [sp, #28]
 800c1d4:	3508      	adds	r5, #8
 800c1d6:	e7d0      	b.n	800c17a <_strtod_l+0x50e>
 800c1d8:	23d4      	movs	r3, #212	; 0xd4
 800c1da:	049b      	lsls	r3, r3, #18
 800c1dc:	18cf      	adds	r7, r1, r3
 800c1de:	e7ea      	b.n	800c1b6 <_strtod_l+0x54a>
 800c1e0:	2c00      	cmp	r4, #0
 800c1e2:	d0e8      	beq.n	800c1b6 <_strtod_l+0x54a>
 800c1e4:	4264      	negs	r4, r4
 800c1e6:	230f      	movs	r3, #15
 800c1e8:	0022      	movs	r2, r4
 800c1ea:	401a      	ands	r2, r3
 800c1ec:	421c      	tst	r4, r3
 800c1ee:	d00a      	beq.n	800c206 <_strtod_l+0x59a>
 800c1f0:	4b15      	ldr	r3, [pc, #84]	; (800c248 <_strtod_l+0x5dc>)
 800c1f2:	00d2      	lsls	r2, r2, #3
 800c1f4:	189b      	adds	r3, r3, r2
 800c1f6:	0030      	movs	r0, r6
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	0039      	movs	r1, r7
 800c1fe:	f7f4 ff9f 	bl	8001140 <__aeabi_ddiv>
 800c202:	0006      	movs	r6, r0
 800c204:	000f      	movs	r7, r1
 800c206:	1124      	asrs	r4, r4, #4
 800c208:	d0d5      	beq.n	800c1b6 <_strtod_l+0x54a>
 800c20a:	2c1f      	cmp	r4, #31
 800c20c:	dd28      	ble.n	800c260 <_strtod_l+0x5f4>
 800c20e:	2300      	movs	r3, #0
 800c210:	9305      	str	r3, [sp, #20]
 800c212:	9306      	str	r3, [sp, #24]
 800c214:	930d      	str	r3, [sp, #52]	; 0x34
 800c216:	9308      	str	r3, [sp, #32]
 800c218:	2322      	movs	r3, #34	; 0x22
 800c21a:	9a04      	ldr	r2, [sp, #16]
 800c21c:	2600      	movs	r6, #0
 800c21e:	6013      	str	r3, [r2, #0]
 800c220:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c222:	2700      	movs	r7, #0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d18d      	bne.n	800c144 <_strtod_l+0x4d8>
 800c228:	e55b      	b.n	800bce2 <_strtod_l+0x76>
 800c22a:	46c0      	nop			; (mov r8, r8)
 800c22c:	00004e1f 	.word	0x00004e1f
 800c230:	0800e225 	.word	0x0800e225
 800c234:	0800e44c 	.word	0x0800e44c
 800c238:	7ff00000 	.word	0x7ff00000
 800c23c:	0800e21d 	.word	0x0800e21d
 800c240:	0800e254 	.word	0x0800e254
 800c244:	0800e5dd 	.word	0x0800e5dd
 800c248:	0800e360 	.word	0x0800e360
 800c24c:	0800e338 	.word	0x0800e338
 800c250:	fcb00000 	.word	0xfcb00000
 800c254:	7ca00000 	.word	0x7ca00000
 800c258:	7c900000 	.word	0x7c900000
 800c25c:	7fefffff 	.word	0x7fefffff
 800c260:	2310      	movs	r3, #16
 800c262:	0022      	movs	r2, r4
 800c264:	401a      	ands	r2, r3
 800c266:	9207      	str	r2, [sp, #28]
 800c268:	421c      	tst	r4, r3
 800c26a:	d001      	beq.n	800c270 <_strtod_l+0x604>
 800c26c:	335a      	adds	r3, #90	; 0x5a
 800c26e:	9307      	str	r3, [sp, #28]
 800c270:	0030      	movs	r0, r6
 800c272:	0039      	movs	r1, r7
 800c274:	2300      	movs	r3, #0
 800c276:	4dc4      	ldr	r5, [pc, #784]	; (800c588 <_strtod_l+0x91c>)
 800c278:	2201      	movs	r2, #1
 800c27a:	4214      	tst	r4, r2
 800c27c:	d004      	beq.n	800c288 <_strtod_l+0x61c>
 800c27e:	682a      	ldr	r2, [r5, #0]
 800c280:	686b      	ldr	r3, [r5, #4]
 800c282:	f7f5 fb57 	bl	8001934 <__aeabi_dmul>
 800c286:	2301      	movs	r3, #1
 800c288:	1064      	asrs	r4, r4, #1
 800c28a:	3508      	adds	r5, #8
 800c28c:	2c00      	cmp	r4, #0
 800c28e:	d1f3      	bne.n	800c278 <_strtod_l+0x60c>
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <_strtod_l+0x62c>
 800c294:	0006      	movs	r6, r0
 800c296:	000f      	movs	r7, r1
 800c298:	9b07      	ldr	r3, [sp, #28]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00f      	beq.n	800c2be <_strtod_l+0x652>
 800c29e:	236b      	movs	r3, #107	; 0x6b
 800c2a0:	007a      	lsls	r2, r7, #1
 800c2a2:	0d52      	lsrs	r2, r2, #21
 800c2a4:	0039      	movs	r1, r7
 800c2a6:	1a9b      	subs	r3, r3, r2
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	dd08      	ble.n	800c2be <_strtod_l+0x652>
 800c2ac:	2b1f      	cmp	r3, #31
 800c2ae:	dc00      	bgt.n	800c2b2 <_strtod_l+0x646>
 800c2b0:	e121      	b.n	800c4f6 <_strtod_l+0x88a>
 800c2b2:	2600      	movs	r6, #0
 800c2b4:	2b34      	cmp	r3, #52	; 0x34
 800c2b6:	dc00      	bgt.n	800c2ba <_strtod_l+0x64e>
 800c2b8:	e116      	b.n	800c4e8 <_strtod_l+0x87c>
 800c2ba:	27dc      	movs	r7, #220	; 0xdc
 800c2bc:	04bf      	lsls	r7, r7, #18
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	0030      	movs	r0, r6
 800c2c4:	0039      	movs	r1, r7
 800c2c6:	f7f4 f8c1 	bl	800044c <__aeabi_dcmpeq>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	d19f      	bne.n	800c20e <_strtod_l+0x5a2>
 800c2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2d0:	9a08      	ldr	r2, [sp, #32]
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c2d6:	9b05      	ldr	r3, [sp, #20]
 800c2d8:	9804      	ldr	r0, [sp, #16]
 800c2da:	f7ff f89f 	bl	800b41c <__s2b>
 800c2de:	900d      	str	r0, [sp, #52]	; 0x34
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d100      	bne.n	800c2e6 <_strtod_l+0x67a>
 800c2e4:	e720      	b.n	800c128 <_strtod_l+0x4bc>
 800c2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e8:	9906      	ldr	r1, [sp, #24]
 800c2ea:	17da      	asrs	r2, r3, #31
 800c2ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2ee:	1a5b      	subs	r3, r3, r1
 800c2f0:	401a      	ands	r2, r3
 800c2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f4:	9215      	str	r2, [sp, #84]	; 0x54
 800c2f6:	43db      	mvns	r3, r3
 800c2f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2fa:	17db      	asrs	r3, r3, #31
 800c2fc:	401a      	ands	r2, r3
 800c2fe:	2300      	movs	r3, #0
 800c300:	9218      	str	r2, [sp, #96]	; 0x60
 800c302:	9305      	str	r3, [sp, #20]
 800c304:	9306      	str	r3, [sp, #24]
 800c306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c308:	9804      	ldr	r0, [sp, #16]
 800c30a:	6859      	ldr	r1, [r3, #4]
 800c30c:	f7fe ffda 	bl	800b2c4 <_Balloc>
 800c310:	9008      	str	r0, [sp, #32]
 800c312:	2800      	cmp	r0, #0
 800c314:	d100      	bne.n	800c318 <_strtod_l+0x6ac>
 800c316:	e70c      	b.n	800c132 <_strtod_l+0x4c6>
 800c318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c31a:	300c      	adds	r0, #12
 800c31c:	0019      	movs	r1, r3
 800c31e:	691a      	ldr	r2, [r3, #16]
 800c320:	310c      	adds	r1, #12
 800c322:	3202      	adds	r2, #2
 800c324:	0092      	lsls	r2, r2, #2
 800c326:	f000 fd8b 	bl	800ce40 <memcpy>
 800c32a:	ab1e      	add	r3, sp, #120	; 0x78
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	ab1d      	add	r3, sp, #116	; 0x74
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	0032      	movs	r2, r6
 800c334:	003b      	movs	r3, r7
 800c336:	9804      	ldr	r0, [sp, #16]
 800c338:	9610      	str	r6, [sp, #64]	; 0x40
 800c33a:	9711      	str	r7, [sp, #68]	; 0x44
 800c33c:	f7ff fbb0 	bl	800baa0 <__d2b>
 800c340:	901c      	str	r0, [sp, #112]	; 0x70
 800c342:	2800      	cmp	r0, #0
 800c344:	d100      	bne.n	800c348 <_strtod_l+0x6dc>
 800c346:	e6f4      	b.n	800c132 <_strtod_l+0x4c6>
 800c348:	2101      	movs	r1, #1
 800c34a:	9804      	ldr	r0, [sp, #16]
 800c34c:	f7ff f8fa 	bl	800b544 <__i2b>
 800c350:	9006      	str	r0, [sp, #24]
 800c352:	2800      	cmp	r0, #0
 800c354:	d100      	bne.n	800c358 <_strtod_l+0x6ec>
 800c356:	e6ec      	b.n	800c132 <_strtod_l+0x4c6>
 800c358:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c35a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c35c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c35e:	1ad4      	subs	r4, r2, r3
 800c360:	2b00      	cmp	r3, #0
 800c362:	db01      	blt.n	800c368 <_strtod_l+0x6fc>
 800c364:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c366:	195d      	adds	r5, r3, r5
 800c368:	9907      	ldr	r1, [sp, #28]
 800c36a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c36c:	1a5b      	subs	r3, r3, r1
 800c36e:	2136      	movs	r1, #54	; 0x36
 800c370:	189b      	adds	r3, r3, r2
 800c372:	1a8a      	subs	r2, r1, r2
 800c374:	4985      	ldr	r1, [pc, #532]	; (800c58c <_strtod_l+0x920>)
 800c376:	2001      	movs	r0, #1
 800c378:	468c      	mov	ip, r1
 800c37a:	2100      	movs	r1, #0
 800c37c:	3b01      	subs	r3, #1
 800c37e:	9114      	str	r1, [sp, #80]	; 0x50
 800c380:	9012      	str	r0, [sp, #72]	; 0x48
 800c382:	4563      	cmp	r3, ip
 800c384:	da07      	bge.n	800c396 <_strtod_l+0x72a>
 800c386:	4661      	mov	r1, ip
 800c388:	1ac9      	subs	r1, r1, r3
 800c38a:	1a52      	subs	r2, r2, r1
 800c38c:	291f      	cmp	r1, #31
 800c38e:	dd00      	ble.n	800c392 <_strtod_l+0x726>
 800c390:	e0b6      	b.n	800c500 <_strtod_l+0x894>
 800c392:	4088      	lsls	r0, r1
 800c394:	9012      	str	r0, [sp, #72]	; 0x48
 800c396:	18ab      	adds	r3, r5, r2
 800c398:	930c      	str	r3, [sp, #48]	; 0x30
 800c39a:	18a4      	adds	r4, r4, r2
 800c39c:	9b07      	ldr	r3, [sp, #28]
 800c39e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3a0:	191c      	adds	r4, r3, r4
 800c3a2:	002b      	movs	r3, r5
 800c3a4:	4295      	cmp	r5, r2
 800c3a6:	dd00      	ble.n	800c3aa <_strtod_l+0x73e>
 800c3a8:	0013      	movs	r3, r2
 800c3aa:	42a3      	cmp	r3, r4
 800c3ac:	dd00      	ble.n	800c3b0 <_strtod_l+0x744>
 800c3ae:	0023      	movs	r3, r4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	dd04      	ble.n	800c3be <_strtod_l+0x752>
 800c3b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3b6:	1ae4      	subs	r4, r4, r3
 800c3b8:	1ad2      	subs	r2, r2, r3
 800c3ba:	920c      	str	r2, [sp, #48]	; 0x30
 800c3bc:	1aed      	subs	r5, r5, r3
 800c3be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	dd17      	ble.n	800c3f4 <_strtod_l+0x788>
 800c3c4:	001a      	movs	r2, r3
 800c3c6:	9906      	ldr	r1, [sp, #24]
 800c3c8:	9804      	ldr	r0, [sp, #16]
 800c3ca:	f7ff f983 	bl	800b6d4 <__pow5mult>
 800c3ce:	9006      	str	r0, [sp, #24]
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d100      	bne.n	800c3d6 <_strtod_l+0x76a>
 800c3d4:	e6ad      	b.n	800c132 <_strtod_l+0x4c6>
 800c3d6:	0001      	movs	r1, r0
 800c3d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c3da:	9804      	ldr	r0, [sp, #16]
 800c3dc:	f7ff f8ca 	bl	800b574 <__multiply>
 800c3e0:	900e      	str	r0, [sp, #56]	; 0x38
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d100      	bne.n	800c3e8 <_strtod_l+0x77c>
 800c3e6:	e6a4      	b.n	800c132 <_strtod_l+0x4c6>
 800c3e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c3ea:	9804      	ldr	r0, [sp, #16]
 800c3ec:	f7fe ffae 	bl	800b34c <_Bfree>
 800c3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3f2:	931c      	str	r3, [sp, #112]	; 0x70
 800c3f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	dd00      	ble.n	800c3fc <_strtod_l+0x790>
 800c3fa:	e087      	b.n	800c50c <_strtod_l+0x8a0>
 800c3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dd08      	ble.n	800c414 <_strtod_l+0x7a8>
 800c402:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c404:	9908      	ldr	r1, [sp, #32]
 800c406:	9804      	ldr	r0, [sp, #16]
 800c408:	f7ff f964 	bl	800b6d4 <__pow5mult>
 800c40c:	9008      	str	r0, [sp, #32]
 800c40e:	2800      	cmp	r0, #0
 800c410:	d100      	bne.n	800c414 <_strtod_l+0x7a8>
 800c412:	e68e      	b.n	800c132 <_strtod_l+0x4c6>
 800c414:	2c00      	cmp	r4, #0
 800c416:	dd08      	ble.n	800c42a <_strtod_l+0x7be>
 800c418:	0022      	movs	r2, r4
 800c41a:	9908      	ldr	r1, [sp, #32]
 800c41c:	9804      	ldr	r0, [sp, #16]
 800c41e:	f7ff f9b5 	bl	800b78c <__lshift>
 800c422:	9008      	str	r0, [sp, #32]
 800c424:	2800      	cmp	r0, #0
 800c426:	d100      	bne.n	800c42a <_strtod_l+0x7be>
 800c428:	e683      	b.n	800c132 <_strtod_l+0x4c6>
 800c42a:	2d00      	cmp	r5, #0
 800c42c:	dd08      	ble.n	800c440 <_strtod_l+0x7d4>
 800c42e:	002a      	movs	r2, r5
 800c430:	9906      	ldr	r1, [sp, #24]
 800c432:	9804      	ldr	r0, [sp, #16]
 800c434:	f7ff f9aa 	bl	800b78c <__lshift>
 800c438:	9006      	str	r0, [sp, #24]
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d100      	bne.n	800c440 <_strtod_l+0x7d4>
 800c43e:	e678      	b.n	800c132 <_strtod_l+0x4c6>
 800c440:	9a08      	ldr	r2, [sp, #32]
 800c442:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c444:	9804      	ldr	r0, [sp, #16]
 800c446:	f7ff fa2b 	bl	800b8a0 <__mdiff>
 800c44a:	9005      	str	r0, [sp, #20]
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d100      	bne.n	800c452 <_strtod_l+0x7e6>
 800c450:	e66f      	b.n	800c132 <_strtod_l+0x4c6>
 800c452:	2200      	movs	r2, #0
 800c454:	68c3      	ldr	r3, [r0, #12]
 800c456:	9906      	ldr	r1, [sp, #24]
 800c458:	60c2      	str	r2, [r0, #12]
 800c45a:	930c      	str	r3, [sp, #48]	; 0x30
 800c45c:	f7ff fa04 	bl	800b868 <__mcmp>
 800c460:	2800      	cmp	r0, #0
 800c462:	da5d      	bge.n	800c520 <_strtod_l+0x8b4>
 800c464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c466:	4333      	orrs	r3, r6
 800c468:	d000      	beq.n	800c46c <_strtod_l+0x800>
 800c46a:	e088      	b.n	800c57e <_strtod_l+0x912>
 800c46c:	033b      	lsls	r3, r7, #12
 800c46e:	d000      	beq.n	800c472 <_strtod_l+0x806>
 800c470:	e085      	b.n	800c57e <_strtod_l+0x912>
 800c472:	22d6      	movs	r2, #214	; 0xd6
 800c474:	4b46      	ldr	r3, [pc, #280]	; (800c590 <_strtod_l+0x924>)
 800c476:	04d2      	lsls	r2, r2, #19
 800c478:	403b      	ands	r3, r7
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d97f      	bls.n	800c57e <_strtod_l+0x912>
 800c47e:	9b05      	ldr	r3, [sp, #20]
 800c480:	695b      	ldr	r3, [r3, #20]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d103      	bne.n	800c48e <_strtod_l+0x822>
 800c486:	9b05      	ldr	r3, [sp, #20]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	dd77      	ble.n	800c57e <_strtod_l+0x912>
 800c48e:	9905      	ldr	r1, [sp, #20]
 800c490:	2201      	movs	r2, #1
 800c492:	9804      	ldr	r0, [sp, #16]
 800c494:	f7ff f97a 	bl	800b78c <__lshift>
 800c498:	9906      	ldr	r1, [sp, #24]
 800c49a:	9005      	str	r0, [sp, #20]
 800c49c:	f7ff f9e4 	bl	800b868 <__mcmp>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	dd6c      	ble.n	800c57e <_strtod_l+0x912>
 800c4a4:	9907      	ldr	r1, [sp, #28]
 800c4a6:	003b      	movs	r3, r7
 800c4a8:	4a39      	ldr	r2, [pc, #228]	; (800c590 <_strtod_l+0x924>)
 800c4aa:	2900      	cmp	r1, #0
 800c4ac:	d100      	bne.n	800c4b0 <_strtod_l+0x844>
 800c4ae:	e094      	b.n	800c5da <_strtod_l+0x96e>
 800c4b0:	0011      	movs	r1, r2
 800c4b2:	20d6      	movs	r0, #214	; 0xd6
 800c4b4:	4039      	ands	r1, r7
 800c4b6:	04c0      	lsls	r0, r0, #19
 800c4b8:	4281      	cmp	r1, r0
 800c4ba:	dd00      	ble.n	800c4be <_strtod_l+0x852>
 800c4bc:	e08d      	b.n	800c5da <_strtod_l+0x96e>
 800c4be:	23dc      	movs	r3, #220	; 0xdc
 800c4c0:	049b      	lsls	r3, r3, #18
 800c4c2:	4299      	cmp	r1, r3
 800c4c4:	dc00      	bgt.n	800c4c8 <_strtod_l+0x85c>
 800c4c6:	e6a7      	b.n	800c218 <_strtod_l+0x5ac>
 800c4c8:	0030      	movs	r0, r6
 800c4ca:	0039      	movs	r1, r7
 800c4cc:	4b31      	ldr	r3, [pc, #196]	; (800c594 <_strtod_l+0x928>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f7f5 fa30 	bl	8001934 <__aeabi_dmul>
 800c4d4:	4b2e      	ldr	r3, [pc, #184]	; (800c590 <_strtod_l+0x924>)
 800c4d6:	0006      	movs	r6, r0
 800c4d8:	000f      	movs	r7, r1
 800c4da:	420b      	tst	r3, r1
 800c4dc:	d000      	beq.n	800c4e0 <_strtod_l+0x874>
 800c4de:	e631      	b.n	800c144 <_strtod_l+0x4d8>
 800c4e0:	2322      	movs	r3, #34	; 0x22
 800c4e2:	9a04      	ldr	r2, [sp, #16]
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	e62d      	b.n	800c144 <_strtod_l+0x4d8>
 800c4e8:	234b      	movs	r3, #75	; 0x4b
 800c4ea:	1a9a      	subs	r2, r3, r2
 800c4ec:	3b4c      	subs	r3, #76	; 0x4c
 800c4ee:	4093      	lsls	r3, r2
 800c4f0:	4019      	ands	r1, r3
 800c4f2:	000f      	movs	r7, r1
 800c4f4:	e6e3      	b.n	800c2be <_strtod_l+0x652>
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	4252      	negs	r2, r2
 800c4fa:	409a      	lsls	r2, r3
 800c4fc:	4016      	ands	r6, r2
 800c4fe:	e6de      	b.n	800c2be <_strtod_l+0x652>
 800c500:	4925      	ldr	r1, [pc, #148]	; (800c598 <_strtod_l+0x92c>)
 800c502:	1acb      	subs	r3, r1, r3
 800c504:	0001      	movs	r1, r0
 800c506:	4099      	lsls	r1, r3
 800c508:	9114      	str	r1, [sp, #80]	; 0x50
 800c50a:	e743      	b.n	800c394 <_strtod_l+0x728>
 800c50c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c50e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c510:	9804      	ldr	r0, [sp, #16]
 800c512:	f7ff f93b 	bl	800b78c <__lshift>
 800c516:	901c      	str	r0, [sp, #112]	; 0x70
 800c518:	2800      	cmp	r0, #0
 800c51a:	d000      	beq.n	800c51e <_strtod_l+0x8b2>
 800c51c:	e76e      	b.n	800c3fc <_strtod_l+0x790>
 800c51e:	e608      	b.n	800c132 <_strtod_l+0x4c6>
 800c520:	970e      	str	r7, [sp, #56]	; 0x38
 800c522:	2800      	cmp	r0, #0
 800c524:	d177      	bne.n	800c616 <_strtod_l+0x9aa>
 800c526:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c528:	033b      	lsls	r3, r7, #12
 800c52a:	0b1b      	lsrs	r3, r3, #12
 800c52c:	2a00      	cmp	r2, #0
 800c52e:	d039      	beq.n	800c5a4 <_strtod_l+0x938>
 800c530:	4a1a      	ldr	r2, [pc, #104]	; (800c59c <_strtod_l+0x930>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d139      	bne.n	800c5aa <_strtod_l+0x93e>
 800c536:	2101      	movs	r1, #1
 800c538:	9b07      	ldr	r3, [sp, #28]
 800c53a:	4249      	negs	r1, r1
 800c53c:	0032      	movs	r2, r6
 800c53e:	0008      	movs	r0, r1
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00b      	beq.n	800c55c <_strtod_l+0x8f0>
 800c544:	24d4      	movs	r4, #212	; 0xd4
 800c546:	4b12      	ldr	r3, [pc, #72]	; (800c590 <_strtod_l+0x924>)
 800c548:	0008      	movs	r0, r1
 800c54a:	403b      	ands	r3, r7
 800c54c:	04e4      	lsls	r4, r4, #19
 800c54e:	42a3      	cmp	r3, r4
 800c550:	d804      	bhi.n	800c55c <_strtod_l+0x8f0>
 800c552:	306c      	adds	r0, #108	; 0x6c
 800c554:	0d1b      	lsrs	r3, r3, #20
 800c556:	1ac3      	subs	r3, r0, r3
 800c558:	4099      	lsls	r1, r3
 800c55a:	0008      	movs	r0, r1
 800c55c:	4282      	cmp	r2, r0
 800c55e:	d124      	bne.n	800c5aa <_strtod_l+0x93e>
 800c560:	4b0f      	ldr	r3, [pc, #60]	; (800c5a0 <_strtod_l+0x934>)
 800c562:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c564:	4299      	cmp	r1, r3
 800c566:	d102      	bne.n	800c56e <_strtod_l+0x902>
 800c568:	3201      	adds	r2, #1
 800c56a:	d100      	bne.n	800c56e <_strtod_l+0x902>
 800c56c:	e5e1      	b.n	800c132 <_strtod_l+0x4c6>
 800c56e:	4b08      	ldr	r3, [pc, #32]	; (800c590 <_strtod_l+0x924>)
 800c570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c572:	2600      	movs	r6, #0
 800c574:	401a      	ands	r2, r3
 800c576:	0013      	movs	r3, r2
 800c578:	2280      	movs	r2, #128	; 0x80
 800c57a:	0352      	lsls	r2, r2, #13
 800c57c:	189f      	adds	r7, r3, r2
 800c57e:	9b07      	ldr	r3, [sp, #28]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1a1      	bne.n	800c4c8 <_strtod_l+0x85c>
 800c584:	e5de      	b.n	800c144 <_strtod_l+0x4d8>
 800c586:	46c0      	nop			; (mov r8, r8)
 800c588:	0800e460 	.word	0x0800e460
 800c58c:	fffffc02 	.word	0xfffffc02
 800c590:	7ff00000 	.word	0x7ff00000
 800c594:	39500000 	.word	0x39500000
 800c598:	fffffbe2 	.word	0xfffffbe2
 800c59c:	000fffff 	.word	0x000fffff
 800c5a0:	7fefffff 	.word	0x7fefffff
 800c5a4:	4333      	orrs	r3, r6
 800c5a6:	d100      	bne.n	800c5aa <_strtod_l+0x93e>
 800c5a8:	e77c      	b.n	800c4a4 <_strtod_l+0x838>
 800c5aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d01d      	beq.n	800c5ec <_strtod_l+0x980>
 800c5b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5b4:	4213      	tst	r3, r2
 800c5b6:	d0e2      	beq.n	800c57e <_strtod_l+0x912>
 800c5b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5ba:	0030      	movs	r0, r6
 800c5bc:	0039      	movs	r1, r7
 800c5be:	9a07      	ldr	r2, [sp, #28]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d017      	beq.n	800c5f4 <_strtod_l+0x988>
 800c5c4:	f7ff fb3a 	bl	800bc3c <sulp>
 800c5c8:	0002      	movs	r2, r0
 800c5ca:	000b      	movs	r3, r1
 800c5cc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c5ce:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c5d0:	f7f4 fa56 	bl	8000a80 <__aeabi_dadd>
 800c5d4:	0006      	movs	r6, r0
 800c5d6:	000f      	movs	r7, r1
 800c5d8:	e7d1      	b.n	800c57e <_strtod_l+0x912>
 800c5da:	2601      	movs	r6, #1
 800c5dc:	4013      	ands	r3, r2
 800c5de:	4a98      	ldr	r2, [pc, #608]	; (800c840 <_strtod_l+0xbd4>)
 800c5e0:	4276      	negs	r6, r6
 800c5e2:	189b      	adds	r3, r3, r2
 800c5e4:	4a97      	ldr	r2, [pc, #604]	; (800c844 <_strtod_l+0xbd8>)
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	0017      	movs	r7, r2
 800c5ea:	e7c8      	b.n	800c57e <_strtod_l+0x912>
 800c5ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5ee:	4233      	tst	r3, r6
 800c5f0:	d0c5      	beq.n	800c57e <_strtod_l+0x912>
 800c5f2:	e7e1      	b.n	800c5b8 <_strtod_l+0x94c>
 800c5f4:	f7ff fb22 	bl	800bc3c <sulp>
 800c5f8:	0002      	movs	r2, r0
 800c5fa:	000b      	movs	r3, r1
 800c5fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c5fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c600:	f7f5 fc5a 	bl	8001eb8 <__aeabi_dsub>
 800c604:	2200      	movs	r2, #0
 800c606:	2300      	movs	r3, #0
 800c608:	0006      	movs	r6, r0
 800c60a:	000f      	movs	r7, r1
 800c60c:	f7f3 ff1e 	bl	800044c <__aeabi_dcmpeq>
 800c610:	2800      	cmp	r0, #0
 800c612:	d0b4      	beq.n	800c57e <_strtod_l+0x912>
 800c614:	e600      	b.n	800c218 <_strtod_l+0x5ac>
 800c616:	9906      	ldr	r1, [sp, #24]
 800c618:	9805      	ldr	r0, [sp, #20]
 800c61a:	f7ff faa1 	bl	800bb60 <__ratio>
 800c61e:	2380      	movs	r3, #128	; 0x80
 800c620:	2200      	movs	r2, #0
 800c622:	05db      	lsls	r3, r3, #23
 800c624:	0004      	movs	r4, r0
 800c626:	000d      	movs	r5, r1
 800c628:	f7f3 ff20 	bl	800046c <__aeabi_dcmple>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	d06d      	beq.n	800c70c <_strtod_l+0xaa0>
 800c630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c632:	2b00      	cmp	r3, #0
 800c634:	d000      	beq.n	800c638 <_strtod_l+0x9cc>
 800c636:	e07e      	b.n	800c736 <_strtod_l+0xaca>
 800c638:	2e00      	cmp	r6, #0
 800c63a:	d158      	bne.n	800c6ee <_strtod_l+0xa82>
 800c63c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c63e:	031b      	lsls	r3, r3, #12
 800c640:	d000      	beq.n	800c644 <_strtod_l+0x9d8>
 800c642:	e07f      	b.n	800c744 <_strtod_l+0xad8>
 800c644:	2200      	movs	r2, #0
 800c646:	0020      	movs	r0, r4
 800c648:	0029      	movs	r1, r5
 800c64a:	4b7f      	ldr	r3, [pc, #508]	; (800c848 <_strtod_l+0xbdc>)
 800c64c:	f7f3 ff04 	bl	8000458 <__aeabi_dcmplt>
 800c650:	2800      	cmp	r0, #0
 800c652:	d158      	bne.n	800c706 <_strtod_l+0xa9a>
 800c654:	0020      	movs	r0, r4
 800c656:	0029      	movs	r1, r5
 800c658:	2200      	movs	r2, #0
 800c65a:	4b7c      	ldr	r3, [pc, #496]	; (800c84c <_strtod_l+0xbe0>)
 800c65c:	f7f5 f96a 	bl	8001934 <__aeabi_dmul>
 800c660:	0004      	movs	r4, r0
 800c662:	000d      	movs	r5, r1
 800c664:	2380      	movs	r3, #128	; 0x80
 800c666:	061b      	lsls	r3, r3, #24
 800c668:	940a      	str	r4, [sp, #40]	; 0x28
 800c66a:	18eb      	adds	r3, r5, r3
 800c66c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c66e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c672:	9212      	str	r2, [sp, #72]	; 0x48
 800c674:	9313      	str	r3, [sp, #76]	; 0x4c
 800c676:	4a76      	ldr	r2, [pc, #472]	; (800c850 <_strtod_l+0xbe4>)
 800c678:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c67a:	4013      	ands	r3, r2
 800c67c:	9314      	str	r3, [sp, #80]	; 0x50
 800c67e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c680:	4b74      	ldr	r3, [pc, #464]	; (800c854 <_strtod_l+0xbe8>)
 800c682:	429a      	cmp	r2, r3
 800c684:	d000      	beq.n	800c688 <_strtod_l+0xa1c>
 800c686:	e091      	b.n	800c7ac <_strtod_l+0xb40>
 800c688:	4a73      	ldr	r2, [pc, #460]	; (800c858 <_strtod_l+0xbec>)
 800c68a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c68c:	4694      	mov	ip, r2
 800c68e:	4463      	add	r3, ip
 800c690:	001f      	movs	r7, r3
 800c692:	0030      	movs	r0, r6
 800c694:	0019      	movs	r1, r3
 800c696:	f7ff f99b 	bl	800b9d0 <__ulp>
 800c69a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c69c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c69e:	f7f5 f949 	bl	8001934 <__aeabi_dmul>
 800c6a2:	0032      	movs	r2, r6
 800c6a4:	003b      	movs	r3, r7
 800c6a6:	f7f4 f9eb 	bl	8000a80 <__aeabi_dadd>
 800c6aa:	4a69      	ldr	r2, [pc, #420]	; (800c850 <_strtod_l+0xbe4>)
 800c6ac:	4b6b      	ldr	r3, [pc, #428]	; (800c85c <_strtod_l+0xbf0>)
 800c6ae:	0006      	movs	r6, r0
 800c6b0:	400a      	ands	r2, r1
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d949      	bls.n	800c74a <_strtod_l+0xade>
 800c6b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c6b8:	4b69      	ldr	r3, [pc, #420]	; (800c860 <_strtod_l+0xbf4>)
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d103      	bne.n	800c6c6 <_strtod_l+0xa5a>
 800c6be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	d100      	bne.n	800c6c6 <_strtod_l+0xa5a>
 800c6c4:	e535      	b.n	800c132 <_strtod_l+0x4c6>
 800c6c6:	2601      	movs	r6, #1
 800c6c8:	4f65      	ldr	r7, [pc, #404]	; (800c860 <_strtod_l+0xbf4>)
 800c6ca:	4276      	negs	r6, r6
 800c6cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6ce:	9804      	ldr	r0, [sp, #16]
 800c6d0:	f7fe fe3c 	bl	800b34c <_Bfree>
 800c6d4:	9908      	ldr	r1, [sp, #32]
 800c6d6:	9804      	ldr	r0, [sp, #16]
 800c6d8:	f7fe fe38 	bl	800b34c <_Bfree>
 800c6dc:	9906      	ldr	r1, [sp, #24]
 800c6de:	9804      	ldr	r0, [sp, #16]
 800c6e0:	f7fe fe34 	bl	800b34c <_Bfree>
 800c6e4:	9905      	ldr	r1, [sp, #20]
 800c6e6:	9804      	ldr	r0, [sp, #16]
 800c6e8:	f7fe fe30 	bl	800b34c <_Bfree>
 800c6ec:	e60b      	b.n	800c306 <_strtod_l+0x69a>
 800c6ee:	2e01      	cmp	r6, #1
 800c6f0:	d103      	bne.n	800c6fa <_strtod_l+0xa8e>
 800c6f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d100      	bne.n	800c6fa <_strtod_l+0xa8e>
 800c6f8:	e58e      	b.n	800c218 <_strtod_l+0x5ac>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	4c59      	ldr	r4, [pc, #356]	; (800c864 <_strtod_l+0xbf8>)
 800c6fe:	930a      	str	r3, [sp, #40]	; 0x28
 800c700:	940b      	str	r4, [sp, #44]	; 0x2c
 800c702:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c704:	e01c      	b.n	800c740 <_strtod_l+0xad4>
 800c706:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c708:	4d50      	ldr	r5, [pc, #320]	; (800c84c <_strtod_l+0xbe0>)
 800c70a:	e7ab      	b.n	800c664 <_strtod_l+0x9f8>
 800c70c:	2200      	movs	r2, #0
 800c70e:	0020      	movs	r0, r4
 800c710:	0029      	movs	r1, r5
 800c712:	4b4e      	ldr	r3, [pc, #312]	; (800c84c <_strtod_l+0xbe0>)
 800c714:	f7f5 f90e 	bl	8001934 <__aeabi_dmul>
 800c718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c71a:	0004      	movs	r4, r0
 800c71c:	000b      	movs	r3, r1
 800c71e:	000d      	movs	r5, r1
 800c720:	2a00      	cmp	r2, #0
 800c722:	d104      	bne.n	800c72e <_strtod_l+0xac2>
 800c724:	2280      	movs	r2, #128	; 0x80
 800c726:	0612      	lsls	r2, r2, #24
 800c728:	900a      	str	r0, [sp, #40]	; 0x28
 800c72a:	188b      	adds	r3, r1, r2
 800c72c:	e79e      	b.n	800c66c <_strtod_l+0xa00>
 800c72e:	0002      	movs	r2, r0
 800c730:	920a      	str	r2, [sp, #40]	; 0x28
 800c732:	930b      	str	r3, [sp, #44]	; 0x2c
 800c734:	e79b      	b.n	800c66e <_strtod_l+0xa02>
 800c736:	2300      	movs	r3, #0
 800c738:	4c43      	ldr	r4, [pc, #268]	; (800c848 <_strtod_l+0xbdc>)
 800c73a:	930a      	str	r3, [sp, #40]	; 0x28
 800c73c:	940b      	str	r4, [sp, #44]	; 0x2c
 800c73e:	2400      	movs	r4, #0
 800c740:	4d41      	ldr	r5, [pc, #260]	; (800c848 <_strtod_l+0xbdc>)
 800c742:	e794      	b.n	800c66e <_strtod_l+0xa02>
 800c744:	2300      	movs	r3, #0
 800c746:	4c47      	ldr	r4, [pc, #284]	; (800c864 <_strtod_l+0xbf8>)
 800c748:	e7f7      	b.n	800c73a <_strtod_l+0xace>
 800c74a:	23d4      	movs	r3, #212	; 0xd4
 800c74c:	049b      	lsls	r3, r3, #18
 800c74e:	18cf      	adds	r7, r1, r3
 800c750:	9b07      	ldr	r3, [sp, #28]
 800c752:	970e      	str	r7, [sp, #56]	; 0x38
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1b9      	bne.n	800c6cc <_strtod_l+0xa60>
 800c758:	4b3d      	ldr	r3, [pc, #244]	; (800c850 <_strtod_l+0xbe4>)
 800c75a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c75c:	403b      	ands	r3, r7
 800c75e:	429a      	cmp	r2, r3
 800c760:	d1b4      	bne.n	800c6cc <_strtod_l+0xa60>
 800c762:	0020      	movs	r0, r4
 800c764:	0029      	movs	r1, r5
 800c766:	f7f3 ff0b 	bl	8000580 <__aeabi_d2lz>
 800c76a:	f7f3 ff45 	bl	80005f8 <__aeabi_l2d>
 800c76e:	0002      	movs	r2, r0
 800c770:	000b      	movs	r3, r1
 800c772:	0020      	movs	r0, r4
 800c774:	0029      	movs	r1, r5
 800c776:	f7f5 fb9f 	bl	8001eb8 <__aeabi_dsub>
 800c77a:	033b      	lsls	r3, r7, #12
 800c77c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c77e:	0b1b      	lsrs	r3, r3, #12
 800c780:	4333      	orrs	r3, r6
 800c782:	4313      	orrs	r3, r2
 800c784:	0004      	movs	r4, r0
 800c786:	000d      	movs	r5, r1
 800c788:	4a37      	ldr	r2, [pc, #220]	; (800c868 <_strtod_l+0xbfc>)
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d054      	beq.n	800c838 <_strtod_l+0xbcc>
 800c78e:	4b37      	ldr	r3, [pc, #220]	; (800c86c <_strtod_l+0xc00>)
 800c790:	f7f3 fe62 	bl	8000458 <__aeabi_dcmplt>
 800c794:	2800      	cmp	r0, #0
 800c796:	d000      	beq.n	800c79a <_strtod_l+0xb2e>
 800c798:	e4d4      	b.n	800c144 <_strtod_l+0x4d8>
 800c79a:	0020      	movs	r0, r4
 800c79c:	0029      	movs	r1, r5
 800c79e:	4a34      	ldr	r2, [pc, #208]	; (800c870 <_strtod_l+0xc04>)
 800c7a0:	4b2a      	ldr	r3, [pc, #168]	; (800c84c <_strtod_l+0xbe0>)
 800c7a2:	f7f3 fe6d 	bl	8000480 <__aeabi_dcmpgt>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d090      	beq.n	800c6cc <_strtod_l+0xa60>
 800c7aa:	e4cb      	b.n	800c144 <_strtod_l+0x4d8>
 800c7ac:	9b07      	ldr	r3, [sp, #28]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d02b      	beq.n	800c80a <_strtod_l+0xb9e>
 800c7b2:	23d4      	movs	r3, #212	; 0xd4
 800c7b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c7b6:	04db      	lsls	r3, r3, #19
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d826      	bhi.n	800c80a <_strtod_l+0xb9e>
 800c7bc:	0020      	movs	r0, r4
 800c7be:	0029      	movs	r1, r5
 800c7c0:	4a2c      	ldr	r2, [pc, #176]	; (800c874 <_strtod_l+0xc08>)
 800c7c2:	4b2d      	ldr	r3, [pc, #180]	; (800c878 <_strtod_l+0xc0c>)
 800c7c4:	f7f3 fe52 	bl	800046c <__aeabi_dcmple>
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d017      	beq.n	800c7fc <_strtod_l+0xb90>
 800c7cc:	0020      	movs	r0, r4
 800c7ce:	0029      	movs	r1, r5
 800c7d0:	f7f3 feb8 	bl	8000544 <__aeabi_d2uiz>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	d100      	bne.n	800c7da <_strtod_l+0xb6e>
 800c7d8:	3001      	adds	r0, #1
 800c7da:	f7f5 ff73 	bl	80026c4 <__aeabi_ui2d>
 800c7de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7e0:	0004      	movs	r4, r0
 800c7e2:	000b      	movs	r3, r1
 800c7e4:	000d      	movs	r5, r1
 800c7e6:	2a00      	cmp	r2, #0
 800c7e8:	d122      	bne.n	800c830 <_strtod_l+0xbc4>
 800c7ea:	2280      	movs	r2, #128	; 0x80
 800c7ec:	0612      	lsls	r2, r2, #24
 800c7ee:	188b      	adds	r3, r1, r2
 800c7f0:	9016      	str	r0, [sp, #88]	; 0x58
 800c7f2:	9317      	str	r3, [sp, #92]	; 0x5c
 800c7f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c7f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7f8:	9212      	str	r2, [sp, #72]	; 0x48
 800c7fa:	9313      	str	r3, [sp, #76]	; 0x4c
 800c7fc:	22d6      	movs	r2, #214	; 0xd6
 800c7fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c800:	04d2      	lsls	r2, r2, #19
 800c802:	189b      	adds	r3, r3, r2
 800c804:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c806:	1a9b      	subs	r3, r3, r2
 800c808:	9313      	str	r3, [sp, #76]	; 0x4c
 800c80a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c80c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c80e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800c810:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800c812:	f7ff f8dd 	bl	800b9d0 <__ulp>
 800c816:	0002      	movs	r2, r0
 800c818:	000b      	movs	r3, r1
 800c81a:	0030      	movs	r0, r6
 800c81c:	0039      	movs	r1, r7
 800c81e:	f7f5 f889 	bl	8001934 <__aeabi_dmul>
 800c822:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c824:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c826:	f7f4 f92b 	bl	8000a80 <__aeabi_dadd>
 800c82a:	0006      	movs	r6, r0
 800c82c:	000f      	movs	r7, r1
 800c82e:	e78f      	b.n	800c750 <_strtod_l+0xae4>
 800c830:	0002      	movs	r2, r0
 800c832:	9216      	str	r2, [sp, #88]	; 0x58
 800c834:	9317      	str	r3, [sp, #92]	; 0x5c
 800c836:	e7dd      	b.n	800c7f4 <_strtod_l+0xb88>
 800c838:	4b10      	ldr	r3, [pc, #64]	; (800c87c <_strtod_l+0xc10>)
 800c83a:	f7f3 fe0d 	bl	8000458 <__aeabi_dcmplt>
 800c83e:	e7b2      	b.n	800c7a6 <_strtod_l+0xb3a>
 800c840:	fff00000 	.word	0xfff00000
 800c844:	000fffff 	.word	0x000fffff
 800c848:	3ff00000 	.word	0x3ff00000
 800c84c:	3fe00000 	.word	0x3fe00000
 800c850:	7ff00000 	.word	0x7ff00000
 800c854:	7fe00000 	.word	0x7fe00000
 800c858:	fcb00000 	.word	0xfcb00000
 800c85c:	7c9fffff 	.word	0x7c9fffff
 800c860:	7fefffff 	.word	0x7fefffff
 800c864:	bff00000 	.word	0xbff00000
 800c868:	94a03595 	.word	0x94a03595
 800c86c:	3fdfffff 	.word	0x3fdfffff
 800c870:	35afe535 	.word	0x35afe535
 800c874:	ffc00000 	.word	0xffc00000
 800c878:	41dfffff 	.word	0x41dfffff
 800c87c:	3fcfffff 	.word	0x3fcfffff

0800c880 <_strtod_r>:
 800c880:	b510      	push	{r4, lr}
 800c882:	4b02      	ldr	r3, [pc, #8]	; (800c88c <_strtod_r+0xc>)
 800c884:	f7ff f9f2 	bl	800bc6c <_strtod_l>
 800c888:	bd10      	pop	{r4, pc}
 800c88a:	46c0      	nop			; (mov r8, r8)
 800c88c:	20000080 	.word	0x20000080

0800c890 <_strtol_l.constprop.0>:
 800c890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c892:	b087      	sub	sp, #28
 800c894:	001e      	movs	r6, r3
 800c896:	9005      	str	r0, [sp, #20]
 800c898:	9101      	str	r1, [sp, #4]
 800c89a:	9202      	str	r2, [sp, #8]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d048      	beq.n	800c932 <_strtol_l.constprop.0+0xa2>
 800c8a0:	000b      	movs	r3, r1
 800c8a2:	2e24      	cmp	r6, #36	; 0x24
 800c8a4:	d845      	bhi.n	800c932 <_strtol_l.constprop.0+0xa2>
 800c8a6:	4a3b      	ldr	r2, [pc, #236]	; (800c994 <_strtol_l.constprop.0+0x104>)
 800c8a8:	2108      	movs	r1, #8
 800c8aa:	4694      	mov	ip, r2
 800c8ac:	001a      	movs	r2, r3
 800c8ae:	4660      	mov	r0, ip
 800c8b0:	7814      	ldrb	r4, [r2, #0]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	5d00      	ldrb	r0, [r0, r4]
 800c8b6:	001d      	movs	r5, r3
 800c8b8:	0007      	movs	r7, r0
 800c8ba:	400f      	ands	r7, r1
 800c8bc:	4208      	tst	r0, r1
 800c8be:	d1f5      	bne.n	800c8ac <_strtol_l.constprop.0+0x1c>
 800c8c0:	2c2d      	cmp	r4, #45	; 0x2d
 800c8c2:	d13d      	bne.n	800c940 <_strtol_l.constprop.0+0xb0>
 800c8c4:	2701      	movs	r7, #1
 800c8c6:	781c      	ldrb	r4, [r3, #0]
 800c8c8:	1c95      	adds	r5, r2, #2
 800c8ca:	2e00      	cmp	r6, #0
 800c8cc:	d05e      	beq.n	800c98c <_strtol_l.constprop.0+0xfc>
 800c8ce:	2e10      	cmp	r6, #16
 800c8d0:	d109      	bne.n	800c8e6 <_strtol_l.constprop.0+0x56>
 800c8d2:	2c30      	cmp	r4, #48	; 0x30
 800c8d4:	d107      	bne.n	800c8e6 <_strtol_l.constprop.0+0x56>
 800c8d6:	2220      	movs	r2, #32
 800c8d8:	782b      	ldrb	r3, [r5, #0]
 800c8da:	4393      	bics	r3, r2
 800c8dc:	2b58      	cmp	r3, #88	; 0x58
 800c8de:	d150      	bne.n	800c982 <_strtol_l.constprop.0+0xf2>
 800c8e0:	2610      	movs	r6, #16
 800c8e2:	786c      	ldrb	r4, [r5, #1]
 800c8e4:	3502      	adds	r5, #2
 800c8e6:	4b2c      	ldr	r3, [pc, #176]	; (800c998 <_strtol_l.constprop.0+0x108>)
 800c8e8:	0031      	movs	r1, r6
 800c8ea:	18fb      	adds	r3, r7, r3
 800c8ec:	0018      	movs	r0, r3
 800c8ee:	9303      	str	r3, [sp, #12]
 800c8f0:	f7f3 fcac 	bl	800024c <__aeabi_uidivmod>
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	9104      	str	r1, [sp, #16]
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	4684      	mov	ip, r0
 800c8fc:	0010      	movs	r0, r2
 800c8fe:	4249      	negs	r1, r1
 800c900:	0023      	movs	r3, r4
 800c902:	3b30      	subs	r3, #48	; 0x30
 800c904:	2b09      	cmp	r3, #9
 800c906:	d903      	bls.n	800c910 <_strtol_l.constprop.0+0x80>
 800c908:	3b11      	subs	r3, #17
 800c90a:	2b19      	cmp	r3, #25
 800c90c:	d81d      	bhi.n	800c94a <_strtol_l.constprop.0+0xba>
 800c90e:	330a      	adds	r3, #10
 800c910:	429e      	cmp	r6, r3
 800c912:	dd1e      	ble.n	800c952 <_strtol_l.constprop.0+0xc2>
 800c914:	1c54      	adds	r4, r2, #1
 800c916:	d009      	beq.n	800c92c <_strtol_l.constprop.0+0x9c>
 800c918:	000a      	movs	r2, r1
 800c91a:	4584      	cmp	ip, r0
 800c91c:	d306      	bcc.n	800c92c <_strtol_l.constprop.0+0x9c>
 800c91e:	d102      	bne.n	800c926 <_strtol_l.constprop.0+0x96>
 800c920:	9c04      	ldr	r4, [sp, #16]
 800c922:	429c      	cmp	r4, r3
 800c924:	db02      	blt.n	800c92c <_strtol_l.constprop.0+0x9c>
 800c926:	2201      	movs	r2, #1
 800c928:	4370      	muls	r0, r6
 800c92a:	1818      	adds	r0, r3, r0
 800c92c:	782c      	ldrb	r4, [r5, #0]
 800c92e:	3501      	adds	r5, #1
 800c930:	e7e6      	b.n	800c900 <_strtol_l.constprop.0+0x70>
 800c932:	f7fd fce5 	bl	800a300 <__errno>
 800c936:	2316      	movs	r3, #22
 800c938:	6003      	str	r3, [r0, #0]
 800c93a:	2000      	movs	r0, #0
 800c93c:	b007      	add	sp, #28
 800c93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c940:	2c2b      	cmp	r4, #43	; 0x2b
 800c942:	d1c2      	bne.n	800c8ca <_strtol_l.constprop.0+0x3a>
 800c944:	781c      	ldrb	r4, [r3, #0]
 800c946:	1c95      	adds	r5, r2, #2
 800c948:	e7bf      	b.n	800c8ca <_strtol_l.constprop.0+0x3a>
 800c94a:	0023      	movs	r3, r4
 800c94c:	3b61      	subs	r3, #97	; 0x61
 800c94e:	2b19      	cmp	r3, #25
 800c950:	d9dd      	bls.n	800c90e <_strtol_l.constprop.0+0x7e>
 800c952:	1c53      	adds	r3, r2, #1
 800c954:	d109      	bne.n	800c96a <_strtol_l.constprop.0+0xda>
 800c956:	2322      	movs	r3, #34	; 0x22
 800c958:	9a05      	ldr	r2, [sp, #20]
 800c95a:	9803      	ldr	r0, [sp, #12]
 800c95c:	6013      	str	r3, [r2, #0]
 800c95e:	9b02      	ldr	r3, [sp, #8]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d0eb      	beq.n	800c93c <_strtol_l.constprop.0+0xac>
 800c964:	1e6b      	subs	r3, r5, #1
 800c966:	9301      	str	r3, [sp, #4]
 800c968:	e007      	b.n	800c97a <_strtol_l.constprop.0+0xea>
 800c96a:	2f00      	cmp	r7, #0
 800c96c:	d000      	beq.n	800c970 <_strtol_l.constprop.0+0xe0>
 800c96e:	4240      	negs	r0, r0
 800c970:	9b02      	ldr	r3, [sp, #8]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0e2      	beq.n	800c93c <_strtol_l.constprop.0+0xac>
 800c976:	2a00      	cmp	r2, #0
 800c978:	d1f4      	bne.n	800c964 <_strtol_l.constprop.0+0xd4>
 800c97a:	9b02      	ldr	r3, [sp, #8]
 800c97c:	9a01      	ldr	r2, [sp, #4]
 800c97e:	601a      	str	r2, [r3, #0]
 800c980:	e7dc      	b.n	800c93c <_strtol_l.constprop.0+0xac>
 800c982:	2430      	movs	r4, #48	; 0x30
 800c984:	2e00      	cmp	r6, #0
 800c986:	d1ae      	bne.n	800c8e6 <_strtol_l.constprop.0+0x56>
 800c988:	3608      	adds	r6, #8
 800c98a:	e7ac      	b.n	800c8e6 <_strtol_l.constprop.0+0x56>
 800c98c:	2c30      	cmp	r4, #48	; 0x30
 800c98e:	d0a2      	beq.n	800c8d6 <_strtol_l.constprop.0+0x46>
 800c990:	260a      	movs	r6, #10
 800c992:	e7a8      	b.n	800c8e6 <_strtol_l.constprop.0+0x56>
 800c994:	0800e489 	.word	0x0800e489
 800c998:	7fffffff 	.word	0x7fffffff

0800c99c <_strtol_r>:
 800c99c:	b510      	push	{r4, lr}
 800c99e:	f7ff ff77 	bl	800c890 <_strtol_l.constprop.0>
 800c9a2:	bd10      	pop	{r4, pc}

0800c9a4 <__ssputs_r>:
 800c9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	9301      	str	r3, [sp, #4]
 800c9aa:	9203      	str	r2, [sp, #12]
 800c9ac:	688e      	ldr	r6, [r1, #8]
 800c9ae:	9a01      	ldr	r2, [sp, #4]
 800c9b0:	0007      	movs	r7, r0
 800c9b2:	000c      	movs	r4, r1
 800c9b4:	680b      	ldr	r3, [r1, #0]
 800c9b6:	4296      	cmp	r6, r2
 800c9b8:	d831      	bhi.n	800ca1e <__ssputs_r+0x7a>
 800c9ba:	898a      	ldrh	r2, [r1, #12]
 800c9bc:	2190      	movs	r1, #144	; 0x90
 800c9be:	00c9      	lsls	r1, r1, #3
 800c9c0:	420a      	tst	r2, r1
 800c9c2:	d029      	beq.n	800ca18 <__ssputs_r+0x74>
 800c9c4:	2003      	movs	r0, #3
 800c9c6:	6921      	ldr	r1, [r4, #16]
 800c9c8:	1a5b      	subs	r3, r3, r1
 800c9ca:	9302      	str	r3, [sp, #8]
 800c9cc:	6963      	ldr	r3, [r4, #20]
 800c9ce:	4343      	muls	r3, r0
 800c9d0:	0fdd      	lsrs	r5, r3, #31
 800c9d2:	18ed      	adds	r5, r5, r3
 800c9d4:	9b01      	ldr	r3, [sp, #4]
 800c9d6:	9802      	ldr	r0, [sp, #8]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	181b      	adds	r3, r3, r0
 800c9dc:	106d      	asrs	r5, r5, #1
 800c9de:	42ab      	cmp	r3, r5
 800c9e0:	d900      	bls.n	800c9e4 <__ssputs_r+0x40>
 800c9e2:	001d      	movs	r5, r3
 800c9e4:	0552      	lsls	r2, r2, #21
 800c9e6:	d529      	bpl.n	800ca3c <__ssputs_r+0x98>
 800c9e8:	0029      	movs	r1, r5
 800c9ea:	0038      	movs	r0, r7
 800c9ec:	f7fe fbd8 	bl	800b1a0 <_malloc_r>
 800c9f0:	1e06      	subs	r6, r0, #0
 800c9f2:	d02d      	beq.n	800ca50 <__ssputs_r+0xac>
 800c9f4:	9a02      	ldr	r2, [sp, #8]
 800c9f6:	6921      	ldr	r1, [r4, #16]
 800c9f8:	f000 fa22 	bl	800ce40 <memcpy>
 800c9fc:	89a2      	ldrh	r2, [r4, #12]
 800c9fe:	4b19      	ldr	r3, [pc, #100]	; (800ca64 <__ssputs_r+0xc0>)
 800ca00:	401a      	ands	r2, r3
 800ca02:	2380      	movs	r3, #128	; 0x80
 800ca04:	4313      	orrs	r3, r2
 800ca06:	81a3      	strh	r3, [r4, #12]
 800ca08:	9b02      	ldr	r3, [sp, #8]
 800ca0a:	6126      	str	r6, [r4, #16]
 800ca0c:	18f6      	adds	r6, r6, r3
 800ca0e:	6026      	str	r6, [r4, #0]
 800ca10:	6165      	str	r5, [r4, #20]
 800ca12:	9e01      	ldr	r6, [sp, #4]
 800ca14:	1aed      	subs	r5, r5, r3
 800ca16:	60a5      	str	r5, [r4, #8]
 800ca18:	9b01      	ldr	r3, [sp, #4]
 800ca1a:	429e      	cmp	r6, r3
 800ca1c:	d900      	bls.n	800ca20 <__ssputs_r+0x7c>
 800ca1e:	9e01      	ldr	r6, [sp, #4]
 800ca20:	0032      	movs	r2, r6
 800ca22:	9903      	ldr	r1, [sp, #12]
 800ca24:	6820      	ldr	r0, [r4, #0]
 800ca26:	f000 f9d4 	bl	800cdd2 <memmove>
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	68a3      	ldr	r3, [r4, #8]
 800ca2e:	1b9b      	subs	r3, r3, r6
 800ca30:	60a3      	str	r3, [r4, #8]
 800ca32:	6823      	ldr	r3, [r4, #0]
 800ca34:	199b      	adds	r3, r3, r6
 800ca36:	6023      	str	r3, [r4, #0]
 800ca38:	b005      	add	sp, #20
 800ca3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca3c:	002a      	movs	r2, r5
 800ca3e:	0038      	movs	r0, r7
 800ca40:	f000 fdc8 	bl	800d5d4 <_realloc_r>
 800ca44:	1e06      	subs	r6, r0, #0
 800ca46:	d1df      	bne.n	800ca08 <__ssputs_r+0x64>
 800ca48:	0038      	movs	r0, r7
 800ca4a:	6921      	ldr	r1, [r4, #16]
 800ca4c:	f7fe fb32 	bl	800b0b4 <_free_r>
 800ca50:	230c      	movs	r3, #12
 800ca52:	2001      	movs	r0, #1
 800ca54:	603b      	str	r3, [r7, #0]
 800ca56:	89a2      	ldrh	r2, [r4, #12]
 800ca58:	3334      	adds	r3, #52	; 0x34
 800ca5a:	4313      	orrs	r3, r2
 800ca5c:	81a3      	strh	r3, [r4, #12]
 800ca5e:	4240      	negs	r0, r0
 800ca60:	e7ea      	b.n	800ca38 <__ssputs_r+0x94>
 800ca62:	46c0      	nop			; (mov r8, r8)
 800ca64:	fffffb7f 	.word	0xfffffb7f

0800ca68 <_svfiprintf_r>:
 800ca68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca6a:	b0a1      	sub	sp, #132	; 0x84
 800ca6c:	9003      	str	r0, [sp, #12]
 800ca6e:	001d      	movs	r5, r3
 800ca70:	898b      	ldrh	r3, [r1, #12]
 800ca72:	000f      	movs	r7, r1
 800ca74:	0016      	movs	r6, r2
 800ca76:	061b      	lsls	r3, r3, #24
 800ca78:	d511      	bpl.n	800ca9e <_svfiprintf_r+0x36>
 800ca7a:	690b      	ldr	r3, [r1, #16]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10e      	bne.n	800ca9e <_svfiprintf_r+0x36>
 800ca80:	2140      	movs	r1, #64	; 0x40
 800ca82:	f7fe fb8d 	bl	800b1a0 <_malloc_r>
 800ca86:	6038      	str	r0, [r7, #0]
 800ca88:	6138      	str	r0, [r7, #16]
 800ca8a:	2800      	cmp	r0, #0
 800ca8c:	d105      	bne.n	800ca9a <_svfiprintf_r+0x32>
 800ca8e:	230c      	movs	r3, #12
 800ca90:	9a03      	ldr	r2, [sp, #12]
 800ca92:	3801      	subs	r0, #1
 800ca94:	6013      	str	r3, [r2, #0]
 800ca96:	b021      	add	sp, #132	; 0x84
 800ca98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca9a:	2340      	movs	r3, #64	; 0x40
 800ca9c:	617b      	str	r3, [r7, #20]
 800ca9e:	2300      	movs	r3, #0
 800caa0:	ac08      	add	r4, sp, #32
 800caa2:	6163      	str	r3, [r4, #20]
 800caa4:	3320      	adds	r3, #32
 800caa6:	7663      	strb	r3, [r4, #25]
 800caa8:	3310      	adds	r3, #16
 800caaa:	76a3      	strb	r3, [r4, #26]
 800caac:	9507      	str	r5, [sp, #28]
 800caae:	0035      	movs	r5, r6
 800cab0:	782b      	ldrb	r3, [r5, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d001      	beq.n	800caba <_svfiprintf_r+0x52>
 800cab6:	2b25      	cmp	r3, #37	; 0x25
 800cab8:	d148      	bne.n	800cb4c <_svfiprintf_r+0xe4>
 800caba:	1bab      	subs	r3, r5, r6
 800cabc:	9305      	str	r3, [sp, #20]
 800cabe:	42b5      	cmp	r5, r6
 800cac0:	d00b      	beq.n	800cada <_svfiprintf_r+0x72>
 800cac2:	0032      	movs	r2, r6
 800cac4:	0039      	movs	r1, r7
 800cac6:	9803      	ldr	r0, [sp, #12]
 800cac8:	f7ff ff6c 	bl	800c9a4 <__ssputs_r>
 800cacc:	3001      	adds	r0, #1
 800cace:	d100      	bne.n	800cad2 <_svfiprintf_r+0x6a>
 800cad0:	e0af      	b.n	800cc32 <_svfiprintf_r+0x1ca>
 800cad2:	6963      	ldr	r3, [r4, #20]
 800cad4:	9a05      	ldr	r2, [sp, #20]
 800cad6:	189b      	adds	r3, r3, r2
 800cad8:	6163      	str	r3, [r4, #20]
 800cada:	782b      	ldrb	r3, [r5, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d100      	bne.n	800cae2 <_svfiprintf_r+0x7a>
 800cae0:	e0a7      	b.n	800cc32 <_svfiprintf_r+0x1ca>
 800cae2:	2201      	movs	r2, #1
 800cae4:	2300      	movs	r3, #0
 800cae6:	4252      	negs	r2, r2
 800cae8:	6062      	str	r2, [r4, #4]
 800caea:	a904      	add	r1, sp, #16
 800caec:	3254      	adds	r2, #84	; 0x54
 800caee:	1852      	adds	r2, r2, r1
 800caf0:	1c6e      	adds	r6, r5, #1
 800caf2:	6023      	str	r3, [r4, #0]
 800caf4:	60e3      	str	r3, [r4, #12]
 800caf6:	60a3      	str	r3, [r4, #8]
 800caf8:	7013      	strb	r3, [r2, #0]
 800cafa:	65a3      	str	r3, [r4, #88]	; 0x58
 800cafc:	4b55      	ldr	r3, [pc, #340]	; (800cc54 <_svfiprintf_r+0x1ec>)
 800cafe:	2205      	movs	r2, #5
 800cb00:	0018      	movs	r0, r3
 800cb02:	7831      	ldrb	r1, [r6, #0]
 800cb04:	9305      	str	r3, [sp, #20]
 800cb06:	f7fd fc28 	bl	800a35a <memchr>
 800cb0a:	1c75      	adds	r5, r6, #1
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d11f      	bne.n	800cb50 <_svfiprintf_r+0xe8>
 800cb10:	6822      	ldr	r2, [r4, #0]
 800cb12:	06d3      	lsls	r3, r2, #27
 800cb14:	d504      	bpl.n	800cb20 <_svfiprintf_r+0xb8>
 800cb16:	2353      	movs	r3, #83	; 0x53
 800cb18:	a904      	add	r1, sp, #16
 800cb1a:	185b      	adds	r3, r3, r1
 800cb1c:	2120      	movs	r1, #32
 800cb1e:	7019      	strb	r1, [r3, #0]
 800cb20:	0713      	lsls	r3, r2, #28
 800cb22:	d504      	bpl.n	800cb2e <_svfiprintf_r+0xc6>
 800cb24:	2353      	movs	r3, #83	; 0x53
 800cb26:	a904      	add	r1, sp, #16
 800cb28:	185b      	adds	r3, r3, r1
 800cb2a:	212b      	movs	r1, #43	; 0x2b
 800cb2c:	7019      	strb	r1, [r3, #0]
 800cb2e:	7833      	ldrb	r3, [r6, #0]
 800cb30:	2b2a      	cmp	r3, #42	; 0x2a
 800cb32:	d016      	beq.n	800cb62 <_svfiprintf_r+0xfa>
 800cb34:	0035      	movs	r5, r6
 800cb36:	2100      	movs	r1, #0
 800cb38:	200a      	movs	r0, #10
 800cb3a:	68e3      	ldr	r3, [r4, #12]
 800cb3c:	782a      	ldrb	r2, [r5, #0]
 800cb3e:	1c6e      	adds	r6, r5, #1
 800cb40:	3a30      	subs	r2, #48	; 0x30
 800cb42:	2a09      	cmp	r2, #9
 800cb44:	d94e      	bls.n	800cbe4 <_svfiprintf_r+0x17c>
 800cb46:	2900      	cmp	r1, #0
 800cb48:	d111      	bne.n	800cb6e <_svfiprintf_r+0x106>
 800cb4a:	e017      	b.n	800cb7c <_svfiprintf_r+0x114>
 800cb4c:	3501      	adds	r5, #1
 800cb4e:	e7af      	b.n	800cab0 <_svfiprintf_r+0x48>
 800cb50:	9b05      	ldr	r3, [sp, #20]
 800cb52:	6822      	ldr	r2, [r4, #0]
 800cb54:	1ac0      	subs	r0, r0, r3
 800cb56:	2301      	movs	r3, #1
 800cb58:	4083      	lsls	r3, r0
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	002e      	movs	r6, r5
 800cb5e:	6023      	str	r3, [r4, #0]
 800cb60:	e7cc      	b.n	800cafc <_svfiprintf_r+0x94>
 800cb62:	9b07      	ldr	r3, [sp, #28]
 800cb64:	1d19      	adds	r1, r3, #4
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	9107      	str	r1, [sp, #28]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	db01      	blt.n	800cb72 <_svfiprintf_r+0x10a>
 800cb6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb70:	e004      	b.n	800cb7c <_svfiprintf_r+0x114>
 800cb72:	425b      	negs	r3, r3
 800cb74:	60e3      	str	r3, [r4, #12]
 800cb76:	2302      	movs	r3, #2
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	6023      	str	r3, [r4, #0]
 800cb7c:	782b      	ldrb	r3, [r5, #0]
 800cb7e:	2b2e      	cmp	r3, #46	; 0x2e
 800cb80:	d10a      	bne.n	800cb98 <_svfiprintf_r+0x130>
 800cb82:	786b      	ldrb	r3, [r5, #1]
 800cb84:	2b2a      	cmp	r3, #42	; 0x2a
 800cb86:	d135      	bne.n	800cbf4 <_svfiprintf_r+0x18c>
 800cb88:	9b07      	ldr	r3, [sp, #28]
 800cb8a:	3502      	adds	r5, #2
 800cb8c:	1d1a      	adds	r2, r3, #4
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	9207      	str	r2, [sp, #28]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	db2b      	blt.n	800cbee <_svfiprintf_r+0x186>
 800cb96:	9309      	str	r3, [sp, #36]	; 0x24
 800cb98:	4e2f      	ldr	r6, [pc, #188]	; (800cc58 <_svfiprintf_r+0x1f0>)
 800cb9a:	2203      	movs	r2, #3
 800cb9c:	0030      	movs	r0, r6
 800cb9e:	7829      	ldrb	r1, [r5, #0]
 800cba0:	f7fd fbdb 	bl	800a35a <memchr>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d006      	beq.n	800cbb6 <_svfiprintf_r+0x14e>
 800cba8:	2340      	movs	r3, #64	; 0x40
 800cbaa:	1b80      	subs	r0, r0, r6
 800cbac:	4083      	lsls	r3, r0
 800cbae:	6822      	ldr	r2, [r4, #0]
 800cbb0:	3501      	adds	r5, #1
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	7829      	ldrb	r1, [r5, #0]
 800cbb8:	2206      	movs	r2, #6
 800cbba:	4828      	ldr	r0, [pc, #160]	; (800cc5c <_svfiprintf_r+0x1f4>)
 800cbbc:	1c6e      	adds	r6, r5, #1
 800cbbe:	7621      	strb	r1, [r4, #24]
 800cbc0:	f7fd fbcb 	bl	800a35a <memchr>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d03c      	beq.n	800cc42 <_svfiprintf_r+0x1da>
 800cbc8:	4b25      	ldr	r3, [pc, #148]	; (800cc60 <_svfiprintf_r+0x1f8>)
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d125      	bne.n	800cc1a <_svfiprintf_r+0x1b2>
 800cbce:	2207      	movs	r2, #7
 800cbd0:	9b07      	ldr	r3, [sp, #28]
 800cbd2:	3307      	adds	r3, #7
 800cbd4:	4393      	bics	r3, r2
 800cbd6:	3308      	adds	r3, #8
 800cbd8:	9307      	str	r3, [sp, #28]
 800cbda:	6963      	ldr	r3, [r4, #20]
 800cbdc:	9a04      	ldr	r2, [sp, #16]
 800cbde:	189b      	adds	r3, r3, r2
 800cbe0:	6163      	str	r3, [r4, #20]
 800cbe2:	e764      	b.n	800caae <_svfiprintf_r+0x46>
 800cbe4:	4343      	muls	r3, r0
 800cbe6:	0035      	movs	r5, r6
 800cbe8:	2101      	movs	r1, #1
 800cbea:	189b      	adds	r3, r3, r2
 800cbec:	e7a6      	b.n	800cb3c <_svfiprintf_r+0xd4>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	425b      	negs	r3, r3
 800cbf2:	e7d0      	b.n	800cb96 <_svfiprintf_r+0x12e>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	200a      	movs	r0, #10
 800cbf8:	001a      	movs	r2, r3
 800cbfa:	3501      	adds	r5, #1
 800cbfc:	6063      	str	r3, [r4, #4]
 800cbfe:	7829      	ldrb	r1, [r5, #0]
 800cc00:	1c6e      	adds	r6, r5, #1
 800cc02:	3930      	subs	r1, #48	; 0x30
 800cc04:	2909      	cmp	r1, #9
 800cc06:	d903      	bls.n	800cc10 <_svfiprintf_r+0x1a8>
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d0c5      	beq.n	800cb98 <_svfiprintf_r+0x130>
 800cc0c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc0e:	e7c3      	b.n	800cb98 <_svfiprintf_r+0x130>
 800cc10:	4342      	muls	r2, r0
 800cc12:	0035      	movs	r5, r6
 800cc14:	2301      	movs	r3, #1
 800cc16:	1852      	adds	r2, r2, r1
 800cc18:	e7f1      	b.n	800cbfe <_svfiprintf_r+0x196>
 800cc1a:	aa07      	add	r2, sp, #28
 800cc1c:	9200      	str	r2, [sp, #0]
 800cc1e:	0021      	movs	r1, r4
 800cc20:	003a      	movs	r2, r7
 800cc22:	4b10      	ldr	r3, [pc, #64]	; (800cc64 <_svfiprintf_r+0x1fc>)
 800cc24:	9803      	ldr	r0, [sp, #12]
 800cc26:	f7fc fbcf 	bl	80093c8 <_printf_float>
 800cc2a:	9004      	str	r0, [sp, #16]
 800cc2c:	9b04      	ldr	r3, [sp, #16]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	d1d3      	bne.n	800cbda <_svfiprintf_r+0x172>
 800cc32:	89bb      	ldrh	r3, [r7, #12]
 800cc34:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cc36:	065b      	lsls	r3, r3, #25
 800cc38:	d400      	bmi.n	800cc3c <_svfiprintf_r+0x1d4>
 800cc3a:	e72c      	b.n	800ca96 <_svfiprintf_r+0x2e>
 800cc3c:	2001      	movs	r0, #1
 800cc3e:	4240      	negs	r0, r0
 800cc40:	e729      	b.n	800ca96 <_svfiprintf_r+0x2e>
 800cc42:	aa07      	add	r2, sp, #28
 800cc44:	9200      	str	r2, [sp, #0]
 800cc46:	0021      	movs	r1, r4
 800cc48:	003a      	movs	r2, r7
 800cc4a:	4b06      	ldr	r3, [pc, #24]	; (800cc64 <_svfiprintf_r+0x1fc>)
 800cc4c:	9803      	ldr	r0, [sp, #12]
 800cc4e:	f7fc fe81 	bl	8009954 <_printf_i>
 800cc52:	e7ea      	b.n	800cc2a <_svfiprintf_r+0x1c2>
 800cc54:	0800e589 	.word	0x0800e589
 800cc58:	0800e58f 	.word	0x0800e58f
 800cc5c:	0800e593 	.word	0x0800e593
 800cc60:	080093c9 	.word	0x080093c9
 800cc64:	0800c9a5 	.word	0x0800c9a5

0800cc68 <__sflush_r>:
 800cc68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc6a:	898b      	ldrh	r3, [r1, #12]
 800cc6c:	0005      	movs	r5, r0
 800cc6e:	000c      	movs	r4, r1
 800cc70:	071a      	lsls	r2, r3, #28
 800cc72:	d45c      	bmi.n	800cd2e <__sflush_r+0xc6>
 800cc74:	684a      	ldr	r2, [r1, #4]
 800cc76:	2a00      	cmp	r2, #0
 800cc78:	dc04      	bgt.n	800cc84 <__sflush_r+0x1c>
 800cc7a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800cc7c:	2a00      	cmp	r2, #0
 800cc7e:	dc01      	bgt.n	800cc84 <__sflush_r+0x1c>
 800cc80:	2000      	movs	r0, #0
 800cc82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc84:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800cc86:	2f00      	cmp	r7, #0
 800cc88:	d0fa      	beq.n	800cc80 <__sflush_r+0x18>
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	2080      	movs	r0, #128	; 0x80
 800cc8e:	682e      	ldr	r6, [r5, #0]
 800cc90:	602a      	str	r2, [r5, #0]
 800cc92:	001a      	movs	r2, r3
 800cc94:	0140      	lsls	r0, r0, #5
 800cc96:	6a21      	ldr	r1, [r4, #32]
 800cc98:	4002      	ands	r2, r0
 800cc9a:	4203      	tst	r3, r0
 800cc9c:	d034      	beq.n	800cd08 <__sflush_r+0xa0>
 800cc9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	075b      	lsls	r3, r3, #29
 800cca4:	d506      	bpl.n	800ccb4 <__sflush_r+0x4c>
 800cca6:	6863      	ldr	r3, [r4, #4]
 800cca8:	1ac0      	subs	r0, r0, r3
 800ccaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d001      	beq.n	800ccb4 <__sflush_r+0x4c>
 800ccb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccb2:	1ac0      	subs	r0, r0, r3
 800ccb4:	0002      	movs	r2, r0
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	0028      	movs	r0, r5
 800ccba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ccbc:	6a21      	ldr	r1, [r4, #32]
 800ccbe:	47b8      	blx	r7
 800ccc0:	89a2      	ldrh	r2, [r4, #12]
 800ccc2:	1c43      	adds	r3, r0, #1
 800ccc4:	d106      	bne.n	800ccd4 <__sflush_r+0x6c>
 800ccc6:	6829      	ldr	r1, [r5, #0]
 800ccc8:	291d      	cmp	r1, #29
 800ccca:	d82c      	bhi.n	800cd26 <__sflush_r+0xbe>
 800cccc:	4b2a      	ldr	r3, [pc, #168]	; (800cd78 <__sflush_r+0x110>)
 800ccce:	410b      	asrs	r3, r1
 800ccd0:	07db      	lsls	r3, r3, #31
 800ccd2:	d428      	bmi.n	800cd26 <__sflush_r+0xbe>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	6063      	str	r3, [r4, #4]
 800ccd8:	6923      	ldr	r3, [r4, #16]
 800ccda:	6023      	str	r3, [r4, #0]
 800ccdc:	04d2      	lsls	r2, r2, #19
 800ccde:	d505      	bpl.n	800ccec <__sflush_r+0x84>
 800cce0:	1c43      	adds	r3, r0, #1
 800cce2:	d102      	bne.n	800ccea <__sflush_r+0x82>
 800cce4:	682b      	ldr	r3, [r5, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d100      	bne.n	800ccec <__sflush_r+0x84>
 800ccea:	6560      	str	r0, [r4, #84]	; 0x54
 800ccec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccee:	602e      	str	r6, [r5, #0]
 800ccf0:	2900      	cmp	r1, #0
 800ccf2:	d0c5      	beq.n	800cc80 <__sflush_r+0x18>
 800ccf4:	0023      	movs	r3, r4
 800ccf6:	3344      	adds	r3, #68	; 0x44
 800ccf8:	4299      	cmp	r1, r3
 800ccfa:	d002      	beq.n	800cd02 <__sflush_r+0x9a>
 800ccfc:	0028      	movs	r0, r5
 800ccfe:	f7fe f9d9 	bl	800b0b4 <_free_r>
 800cd02:	2000      	movs	r0, #0
 800cd04:	6360      	str	r0, [r4, #52]	; 0x34
 800cd06:	e7bc      	b.n	800cc82 <__sflush_r+0x1a>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	0028      	movs	r0, r5
 800cd0c:	47b8      	blx	r7
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	d1c6      	bne.n	800cca0 <__sflush_r+0x38>
 800cd12:	682b      	ldr	r3, [r5, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d0c3      	beq.n	800cca0 <__sflush_r+0x38>
 800cd18:	2b1d      	cmp	r3, #29
 800cd1a:	d001      	beq.n	800cd20 <__sflush_r+0xb8>
 800cd1c:	2b16      	cmp	r3, #22
 800cd1e:	d101      	bne.n	800cd24 <__sflush_r+0xbc>
 800cd20:	602e      	str	r6, [r5, #0]
 800cd22:	e7ad      	b.n	800cc80 <__sflush_r+0x18>
 800cd24:	89a2      	ldrh	r2, [r4, #12]
 800cd26:	2340      	movs	r3, #64	; 0x40
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	81a3      	strh	r3, [r4, #12]
 800cd2c:	e7a9      	b.n	800cc82 <__sflush_r+0x1a>
 800cd2e:	690e      	ldr	r6, [r1, #16]
 800cd30:	2e00      	cmp	r6, #0
 800cd32:	d0a5      	beq.n	800cc80 <__sflush_r+0x18>
 800cd34:	680f      	ldr	r7, [r1, #0]
 800cd36:	600e      	str	r6, [r1, #0]
 800cd38:	1bba      	subs	r2, r7, r6
 800cd3a:	9201      	str	r2, [sp, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	079b      	lsls	r3, r3, #30
 800cd40:	d100      	bne.n	800cd44 <__sflush_r+0xdc>
 800cd42:	694a      	ldr	r2, [r1, #20]
 800cd44:	60a2      	str	r2, [r4, #8]
 800cd46:	9b01      	ldr	r3, [sp, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	dd99      	ble.n	800cc80 <__sflush_r+0x18>
 800cd4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cd4e:	0032      	movs	r2, r6
 800cd50:	001f      	movs	r7, r3
 800cd52:	0028      	movs	r0, r5
 800cd54:	9b01      	ldr	r3, [sp, #4]
 800cd56:	6a21      	ldr	r1, [r4, #32]
 800cd58:	47b8      	blx	r7
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	dc06      	bgt.n	800cd6c <__sflush_r+0x104>
 800cd5e:	2340      	movs	r3, #64	; 0x40
 800cd60:	2001      	movs	r0, #1
 800cd62:	89a2      	ldrh	r2, [r4, #12]
 800cd64:	4240      	negs	r0, r0
 800cd66:	4313      	orrs	r3, r2
 800cd68:	81a3      	strh	r3, [r4, #12]
 800cd6a:	e78a      	b.n	800cc82 <__sflush_r+0x1a>
 800cd6c:	9b01      	ldr	r3, [sp, #4]
 800cd6e:	1836      	adds	r6, r6, r0
 800cd70:	1a1b      	subs	r3, r3, r0
 800cd72:	9301      	str	r3, [sp, #4]
 800cd74:	e7e7      	b.n	800cd46 <__sflush_r+0xde>
 800cd76:	46c0      	nop			; (mov r8, r8)
 800cd78:	dfbffffe 	.word	0xdfbffffe

0800cd7c <_fflush_r>:
 800cd7c:	690b      	ldr	r3, [r1, #16]
 800cd7e:	b570      	push	{r4, r5, r6, lr}
 800cd80:	0005      	movs	r5, r0
 800cd82:	000c      	movs	r4, r1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d102      	bne.n	800cd8e <_fflush_r+0x12>
 800cd88:	2500      	movs	r5, #0
 800cd8a:	0028      	movs	r0, r5
 800cd8c:	bd70      	pop	{r4, r5, r6, pc}
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d004      	beq.n	800cd9c <_fflush_r+0x20>
 800cd92:	6a03      	ldr	r3, [r0, #32]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d101      	bne.n	800cd9c <_fflush_r+0x20>
 800cd98:	f7fd f984 	bl	800a0a4 <__sinit>
 800cd9c:	220c      	movs	r2, #12
 800cd9e:	5ea3      	ldrsh	r3, [r4, r2]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d0f1      	beq.n	800cd88 <_fflush_r+0xc>
 800cda4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cda6:	07d2      	lsls	r2, r2, #31
 800cda8:	d404      	bmi.n	800cdb4 <_fflush_r+0x38>
 800cdaa:	059b      	lsls	r3, r3, #22
 800cdac:	d402      	bmi.n	800cdb4 <_fflush_r+0x38>
 800cdae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdb0:	f7fd fad1 	bl	800a356 <__retarget_lock_acquire_recursive>
 800cdb4:	0028      	movs	r0, r5
 800cdb6:	0021      	movs	r1, r4
 800cdb8:	f7ff ff56 	bl	800cc68 <__sflush_r>
 800cdbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdbe:	0005      	movs	r5, r0
 800cdc0:	07db      	lsls	r3, r3, #31
 800cdc2:	d4e2      	bmi.n	800cd8a <_fflush_r+0xe>
 800cdc4:	89a3      	ldrh	r3, [r4, #12]
 800cdc6:	059b      	lsls	r3, r3, #22
 800cdc8:	d4df      	bmi.n	800cd8a <_fflush_r+0xe>
 800cdca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdcc:	f7fd fac4 	bl	800a358 <__retarget_lock_release_recursive>
 800cdd0:	e7db      	b.n	800cd8a <_fflush_r+0xe>

0800cdd2 <memmove>:
 800cdd2:	b510      	push	{r4, lr}
 800cdd4:	4288      	cmp	r0, r1
 800cdd6:	d902      	bls.n	800cdde <memmove+0xc>
 800cdd8:	188b      	adds	r3, r1, r2
 800cdda:	4298      	cmp	r0, r3
 800cddc:	d303      	bcc.n	800cde6 <memmove+0x14>
 800cdde:	2300      	movs	r3, #0
 800cde0:	e007      	b.n	800cdf2 <memmove+0x20>
 800cde2:	5c8b      	ldrb	r3, [r1, r2]
 800cde4:	5483      	strb	r3, [r0, r2]
 800cde6:	3a01      	subs	r2, #1
 800cde8:	d2fb      	bcs.n	800cde2 <memmove+0x10>
 800cdea:	bd10      	pop	{r4, pc}
 800cdec:	5ccc      	ldrb	r4, [r1, r3]
 800cdee:	54c4      	strb	r4, [r0, r3]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d1fa      	bne.n	800cdec <memmove+0x1a>
 800cdf6:	e7f8      	b.n	800cdea <memmove+0x18>

0800cdf8 <strncmp>:
 800cdf8:	b530      	push	{r4, r5, lr}
 800cdfa:	0005      	movs	r5, r0
 800cdfc:	1e10      	subs	r0, r2, #0
 800cdfe:	d00b      	beq.n	800ce18 <strncmp+0x20>
 800ce00:	2400      	movs	r4, #0
 800ce02:	3a01      	subs	r2, #1
 800ce04:	5d2b      	ldrb	r3, [r5, r4]
 800ce06:	5d08      	ldrb	r0, [r1, r4]
 800ce08:	4283      	cmp	r3, r0
 800ce0a:	d104      	bne.n	800ce16 <strncmp+0x1e>
 800ce0c:	42a2      	cmp	r2, r4
 800ce0e:	d002      	beq.n	800ce16 <strncmp+0x1e>
 800ce10:	3401      	adds	r4, #1
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1f6      	bne.n	800ce04 <strncmp+0xc>
 800ce16:	1a18      	subs	r0, r3, r0
 800ce18:	bd30      	pop	{r4, r5, pc}
	...

0800ce1c <_sbrk_r>:
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	b570      	push	{r4, r5, r6, lr}
 800ce20:	4d06      	ldr	r5, [pc, #24]	; (800ce3c <_sbrk_r+0x20>)
 800ce22:	0004      	movs	r4, r0
 800ce24:	0008      	movs	r0, r1
 800ce26:	602b      	str	r3, [r5, #0]
 800ce28:	f7f7 f840 	bl	8003eac <_sbrk>
 800ce2c:	1c43      	adds	r3, r0, #1
 800ce2e:	d103      	bne.n	800ce38 <_sbrk_r+0x1c>
 800ce30:	682b      	ldr	r3, [r5, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d000      	beq.n	800ce38 <_sbrk_r+0x1c>
 800ce36:	6023      	str	r3, [r4, #0]
 800ce38:	bd70      	pop	{r4, r5, r6, pc}
 800ce3a:	46c0      	nop			; (mov r8, r8)
 800ce3c:	20000660 	.word	0x20000660

0800ce40 <memcpy>:
 800ce40:	2300      	movs	r3, #0
 800ce42:	b510      	push	{r4, lr}
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d100      	bne.n	800ce4a <memcpy+0xa>
 800ce48:	bd10      	pop	{r4, pc}
 800ce4a:	5ccc      	ldrb	r4, [r1, r3]
 800ce4c:	54c4      	strb	r4, [r0, r3]
 800ce4e:	3301      	adds	r3, #1
 800ce50:	e7f8      	b.n	800ce44 <memcpy+0x4>
	...

0800ce54 <nan>:
 800ce54:	2000      	movs	r0, #0
 800ce56:	4901      	ldr	r1, [pc, #4]	; (800ce5c <nan+0x8>)
 800ce58:	4770      	bx	lr
 800ce5a:	46c0      	nop			; (mov r8, r8)
 800ce5c:	7ff80000 	.word	0x7ff80000

0800ce60 <__assert_func>:
 800ce60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ce62:	0014      	movs	r4, r2
 800ce64:	001a      	movs	r2, r3
 800ce66:	4b09      	ldr	r3, [pc, #36]	; (800ce8c <__assert_func+0x2c>)
 800ce68:	0005      	movs	r5, r0
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	000e      	movs	r6, r1
 800ce6e:	68d8      	ldr	r0, [r3, #12]
 800ce70:	4b07      	ldr	r3, [pc, #28]	; (800ce90 <__assert_func+0x30>)
 800ce72:	2c00      	cmp	r4, #0
 800ce74:	d101      	bne.n	800ce7a <__assert_func+0x1a>
 800ce76:	4b07      	ldr	r3, [pc, #28]	; (800ce94 <__assert_func+0x34>)
 800ce78:	001c      	movs	r4, r3
 800ce7a:	4907      	ldr	r1, [pc, #28]	; (800ce98 <__assert_func+0x38>)
 800ce7c:	9301      	str	r3, [sp, #4]
 800ce7e:	9402      	str	r4, [sp, #8]
 800ce80:	002b      	movs	r3, r5
 800ce82:	9600      	str	r6, [sp, #0]
 800ce84:	f000 fbe2 	bl	800d64c <fiprintf>
 800ce88:	f000 fbf0 	bl	800d66c <abort>
 800ce8c:	2000007c 	.word	0x2000007c
 800ce90:	0800e5a2 	.word	0x0800e5a2
 800ce94:	0800e5dd 	.word	0x0800e5dd
 800ce98:	0800e5af 	.word	0x0800e5af

0800ce9c <_calloc_r>:
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	0c0b      	lsrs	r3, r1, #16
 800cea0:	0c15      	lsrs	r5, r2, #16
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d11e      	bne.n	800cee4 <_calloc_r+0x48>
 800cea6:	2d00      	cmp	r5, #0
 800cea8:	d10c      	bne.n	800cec4 <_calloc_r+0x28>
 800ceaa:	b289      	uxth	r1, r1
 800ceac:	b294      	uxth	r4, r2
 800ceae:	434c      	muls	r4, r1
 800ceb0:	0021      	movs	r1, r4
 800ceb2:	f7fe f975 	bl	800b1a0 <_malloc_r>
 800ceb6:	1e05      	subs	r5, r0, #0
 800ceb8:	d01b      	beq.n	800cef2 <_calloc_r+0x56>
 800ceba:	0022      	movs	r2, r4
 800cebc:	2100      	movs	r1, #0
 800cebe:	f7fd f9c5 	bl	800a24c <memset>
 800cec2:	e016      	b.n	800cef2 <_calloc_r+0x56>
 800cec4:	1c2b      	adds	r3, r5, #0
 800cec6:	1c0c      	adds	r4, r1, #0
 800cec8:	b289      	uxth	r1, r1
 800ceca:	b292      	uxth	r2, r2
 800cecc:	434a      	muls	r2, r1
 800cece:	b2a1      	uxth	r1, r4
 800ced0:	b29c      	uxth	r4, r3
 800ced2:	434c      	muls	r4, r1
 800ced4:	0c13      	lsrs	r3, r2, #16
 800ced6:	18e4      	adds	r4, r4, r3
 800ced8:	0c23      	lsrs	r3, r4, #16
 800ceda:	d107      	bne.n	800ceec <_calloc_r+0x50>
 800cedc:	0424      	lsls	r4, r4, #16
 800cede:	b292      	uxth	r2, r2
 800cee0:	4314      	orrs	r4, r2
 800cee2:	e7e5      	b.n	800ceb0 <_calloc_r+0x14>
 800cee4:	2d00      	cmp	r5, #0
 800cee6:	d101      	bne.n	800ceec <_calloc_r+0x50>
 800cee8:	1c14      	adds	r4, r2, #0
 800ceea:	e7ed      	b.n	800cec8 <_calloc_r+0x2c>
 800ceec:	230c      	movs	r3, #12
 800ceee:	2500      	movs	r5, #0
 800cef0:	6003      	str	r3, [r0, #0]
 800cef2:	0028      	movs	r0, r5
 800cef4:	bd70      	pop	{r4, r5, r6, pc}

0800cef6 <rshift>:
 800cef6:	0002      	movs	r2, r0
 800cef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cefa:	6904      	ldr	r4, [r0, #16]
 800cefc:	114b      	asrs	r3, r1, #5
 800cefe:	b085      	sub	sp, #20
 800cf00:	3214      	adds	r2, #20
 800cf02:	9302      	str	r3, [sp, #8]
 800cf04:	114d      	asrs	r5, r1, #5
 800cf06:	0013      	movs	r3, r2
 800cf08:	42ac      	cmp	r4, r5
 800cf0a:	dd32      	ble.n	800cf72 <rshift+0x7c>
 800cf0c:	261f      	movs	r6, #31
 800cf0e:	000f      	movs	r7, r1
 800cf10:	114b      	asrs	r3, r1, #5
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	00a5      	lsls	r5, r4, #2
 800cf16:	18d3      	adds	r3, r2, r3
 800cf18:	4037      	ands	r7, r6
 800cf1a:	1955      	adds	r5, r2, r5
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	9701      	str	r7, [sp, #4]
 800cf20:	4231      	tst	r1, r6
 800cf22:	d10d      	bne.n	800cf40 <rshift+0x4a>
 800cf24:	0016      	movs	r6, r2
 800cf26:	0019      	movs	r1, r3
 800cf28:	428d      	cmp	r5, r1
 800cf2a:	d836      	bhi.n	800cf9a <rshift+0xa4>
 800cf2c:	9900      	ldr	r1, [sp, #0]
 800cf2e:	2300      	movs	r3, #0
 800cf30:	3903      	subs	r1, #3
 800cf32:	428d      	cmp	r5, r1
 800cf34:	d302      	bcc.n	800cf3c <rshift+0x46>
 800cf36:	9b02      	ldr	r3, [sp, #8]
 800cf38:	1ae4      	subs	r4, r4, r3
 800cf3a:	00a3      	lsls	r3, r4, #2
 800cf3c:	18d3      	adds	r3, r2, r3
 800cf3e:	e018      	b.n	800cf72 <rshift+0x7c>
 800cf40:	2120      	movs	r1, #32
 800cf42:	9e01      	ldr	r6, [sp, #4]
 800cf44:	9f01      	ldr	r7, [sp, #4]
 800cf46:	1b89      	subs	r1, r1, r6
 800cf48:	9e00      	ldr	r6, [sp, #0]
 800cf4a:	9103      	str	r1, [sp, #12]
 800cf4c:	ce02      	ldmia	r6!, {r1}
 800cf4e:	4694      	mov	ip, r2
 800cf50:	40f9      	lsrs	r1, r7
 800cf52:	42b5      	cmp	r5, r6
 800cf54:	d816      	bhi.n	800cf84 <rshift+0x8e>
 800cf56:	9e00      	ldr	r6, [sp, #0]
 800cf58:	2300      	movs	r3, #0
 800cf5a:	3601      	adds	r6, #1
 800cf5c:	42b5      	cmp	r5, r6
 800cf5e:	d303      	bcc.n	800cf68 <rshift+0x72>
 800cf60:	9b02      	ldr	r3, [sp, #8]
 800cf62:	1ae3      	subs	r3, r4, r3
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	3b04      	subs	r3, #4
 800cf68:	18d3      	adds	r3, r2, r3
 800cf6a:	6019      	str	r1, [r3, #0]
 800cf6c:	2900      	cmp	r1, #0
 800cf6e:	d000      	beq.n	800cf72 <rshift+0x7c>
 800cf70:	3304      	adds	r3, #4
 800cf72:	1a99      	subs	r1, r3, r2
 800cf74:	1089      	asrs	r1, r1, #2
 800cf76:	6101      	str	r1, [r0, #16]
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d101      	bne.n	800cf80 <rshift+0x8a>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	6143      	str	r3, [r0, #20]
 800cf80:	b005      	add	sp, #20
 800cf82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf84:	6837      	ldr	r7, [r6, #0]
 800cf86:	9b03      	ldr	r3, [sp, #12]
 800cf88:	409f      	lsls	r7, r3
 800cf8a:	430f      	orrs	r7, r1
 800cf8c:	4661      	mov	r1, ip
 800cf8e:	c180      	stmia	r1!, {r7}
 800cf90:	468c      	mov	ip, r1
 800cf92:	9b01      	ldr	r3, [sp, #4]
 800cf94:	ce02      	ldmia	r6!, {r1}
 800cf96:	40d9      	lsrs	r1, r3
 800cf98:	e7db      	b.n	800cf52 <rshift+0x5c>
 800cf9a:	c980      	ldmia	r1!, {r7}
 800cf9c:	c680      	stmia	r6!, {r7}
 800cf9e:	e7c3      	b.n	800cf28 <rshift+0x32>

0800cfa0 <__hexdig_fun>:
 800cfa0:	0002      	movs	r2, r0
 800cfa2:	3a30      	subs	r2, #48	; 0x30
 800cfa4:	0003      	movs	r3, r0
 800cfa6:	2a09      	cmp	r2, #9
 800cfa8:	d802      	bhi.n	800cfb0 <__hexdig_fun+0x10>
 800cfaa:	3b20      	subs	r3, #32
 800cfac:	b2d8      	uxtb	r0, r3
 800cfae:	4770      	bx	lr
 800cfb0:	0002      	movs	r2, r0
 800cfb2:	3a61      	subs	r2, #97	; 0x61
 800cfb4:	2a05      	cmp	r2, #5
 800cfb6:	d801      	bhi.n	800cfbc <__hexdig_fun+0x1c>
 800cfb8:	3b47      	subs	r3, #71	; 0x47
 800cfba:	e7f7      	b.n	800cfac <__hexdig_fun+0xc>
 800cfbc:	001a      	movs	r2, r3
 800cfbe:	3a41      	subs	r2, #65	; 0x41
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	2a05      	cmp	r2, #5
 800cfc4:	d8f3      	bhi.n	800cfae <__hexdig_fun+0xe>
 800cfc6:	3b27      	subs	r3, #39	; 0x27
 800cfc8:	e7f0      	b.n	800cfac <__hexdig_fun+0xc>
	...

0800cfcc <__gethex>:
 800cfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfce:	b089      	sub	sp, #36	; 0x24
 800cfd0:	9307      	str	r3, [sp, #28]
 800cfd2:	2302      	movs	r3, #2
 800cfd4:	9201      	str	r2, [sp, #4]
 800cfd6:	680a      	ldr	r2, [r1, #0]
 800cfd8:	425b      	negs	r3, r3
 800cfda:	9003      	str	r0, [sp, #12]
 800cfdc:	9106      	str	r1, [sp, #24]
 800cfde:	1c96      	adds	r6, r2, #2
 800cfe0:	1a9b      	subs	r3, r3, r2
 800cfe2:	199a      	adds	r2, r3, r6
 800cfe4:	9600      	str	r6, [sp, #0]
 800cfe6:	9205      	str	r2, [sp, #20]
 800cfe8:	9a00      	ldr	r2, [sp, #0]
 800cfea:	3601      	adds	r6, #1
 800cfec:	7810      	ldrb	r0, [r2, #0]
 800cfee:	2830      	cmp	r0, #48	; 0x30
 800cff0:	d0f7      	beq.n	800cfe2 <__gethex+0x16>
 800cff2:	f7ff ffd5 	bl	800cfa0 <__hexdig_fun>
 800cff6:	2300      	movs	r3, #0
 800cff8:	001d      	movs	r5, r3
 800cffa:	9302      	str	r3, [sp, #8]
 800cffc:	4298      	cmp	r0, r3
 800cffe:	d11d      	bne.n	800d03c <__gethex+0x70>
 800d000:	2201      	movs	r2, #1
 800d002:	49a6      	ldr	r1, [pc, #664]	; (800d29c <__gethex+0x2d0>)
 800d004:	9800      	ldr	r0, [sp, #0]
 800d006:	f7ff fef7 	bl	800cdf8 <strncmp>
 800d00a:	0007      	movs	r7, r0
 800d00c:	42a8      	cmp	r0, r5
 800d00e:	d169      	bne.n	800d0e4 <__gethex+0x118>
 800d010:	9b00      	ldr	r3, [sp, #0]
 800d012:	0034      	movs	r4, r6
 800d014:	7858      	ldrb	r0, [r3, #1]
 800d016:	f7ff ffc3 	bl	800cfa0 <__hexdig_fun>
 800d01a:	2301      	movs	r3, #1
 800d01c:	9302      	str	r3, [sp, #8]
 800d01e:	42a8      	cmp	r0, r5
 800d020:	d02f      	beq.n	800d082 <__gethex+0xb6>
 800d022:	9600      	str	r6, [sp, #0]
 800d024:	9b00      	ldr	r3, [sp, #0]
 800d026:	7818      	ldrb	r0, [r3, #0]
 800d028:	2830      	cmp	r0, #48	; 0x30
 800d02a:	d009      	beq.n	800d040 <__gethex+0x74>
 800d02c:	f7ff ffb8 	bl	800cfa0 <__hexdig_fun>
 800d030:	4242      	negs	r2, r0
 800d032:	4142      	adcs	r2, r0
 800d034:	2301      	movs	r3, #1
 800d036:	0035      	movs	r5, r6
 800d038:	9202      	str	r2, [sp, #8]
 800d03a:	9305      	str	r3, [sp, #20]
 800d03c:	9c00      	ldr	r4, [sp, #0]
 800d03e:	e004      	b.n	800d04a <__gethex+0x7e>
 800d040:	9b00      	ldr	r3, [sp, #0]
 800d042:	3301      	adds	r3, #1
 800d044:	9300      	str	r3, [sp, #0]
 800d046:	e7ed      	b.n	800d024 <__gethex+0x58>
 800d048:	3401      	adds	r4, #1
 800d04a:	7820      	ldrb	r0, [r4, #0]
 800d04c:	f7ff ffa8 	bl	800cfa0 <__hexdig_fun>
 800d050:	1e07      	subs	r7, r0, #0
 800d052:	d1f9      	bne.n	800d048 <__gethex+0x7c>
 800d054:	2201      	movs	r2, #1
 800d056:	0020      	movs	r0, r4
 800d058:	4990      	ldr	r1, [pc, #576]	; (800d29c <__gethex+0x2d0>)
 800d05a:	f7ff fecd 	bl	800cdf8 <strncmp>
 800d05e:	2800      	cmp	r0, #0
 800d060:	d10d      	bne.n	800d07e <__gethex+0xb2>
 800d062:	2d00      	cmp	r5, #0
 800d064:	d106      	bne.n	800d074 <__gethex+0xa8>
 800d066:	3401      	adds	r4, #1
 800d068:	0025      	movs	r5, r4
 800d06a:	7820      	ldrb	r0, [r4, #0]
 800d06c:	f7ff ff98 	bl	800cfa0 <__hexdig_fun>
 800d070:	2800      	cmp	r0, #0
 800d072:	d102      	bne.n	800d07a <__gethex+0xae>
 800d074:	1b2d      	subs	r5, r5, r4
 800d076:	00af      	lsls	r7, r5, #2
 800d078:	e003      	b.n	800d082 <__gethex+0xb6>
 800d07a:	3401      	adds	r4, #1
 800d07c:	e7f5      	b.n	800d06a <__gethex+0x9e>
 800d07e:	2d00      	cmp	r5, #0
 800d080:	d1f8      	bne.n	800d074 <__gethex+0xa8>
 800d082:	2220      	movs	r2, #32
 800d084:	7823      	ldrb	r3, [r4, #0]
 800d086:	0026      	movs	r6, r4
 800d088:	4393      	bics	r3, r2
 800d08a:	2b50      	cmp	r3, #80	; 0x50
 800d08c:	d11d      	bne.n	800d0ca <__gethex+0xfe>
 800d08e:	7863      	ldrb	r3, [r4, #1]
 800d090:	2b2b      	cmp	r3, #43	; 0x2b
 800d092:	d02c      	beq.n	800d0ee <__gethex+0x122>
 800d094:	2b2d      	cmp	r3, #45	; 0x2d
 800d096:	d02e      	beq.n	800d0f6 <__gethex+0x12a>
 800d098:	2300      	movs	r3, #0
 800d09a:	1c66      	adds	r6, r4, #1
 800d09c:	9304      	str	r3, [sp, #16]
 800d09e:	7830      	ldrb	r0, [r6, #0]
 800d0a0:	f7ff ff7e 	bl	800cfa0 <__hexdig_fun>
 800d0a4:	1e43      	subs	r3, r0, #1
 800d0a6:	b2db      	uxtb	r3, r3
 800d0a8:	2b18      	cmp	r3, #24
 800d0aa:	d82b      	bhi.n	800d104 <__gethex+0x138>
 800d0ac:	3810      	subs	r0, #16
 800d0ae:	0005      	movs	r5, r0
 800d0b0:	7870      	ldrb	r0, [r6, #1]
 800d0b2:	f7ff ff75 	bl	800cfa0 <__hexdig_fun>
 800d0b6:	1e43      	subs	r3, r0, #1
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	3601      	adds	r6, #1
 800d0bc:	2b18      	cmp	r3, #24
 800d0be:	d91c      	bls.n	800d0fa <__gethex+0x12e>
 800d0c0:	9b04      	ldr	r3, [sp, #16]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d000      	beq.n	800d0c8 <__gethex+0xfc>
 800d0c6:	426d      	negs	r5, r5
 800d0c8:	197f      	adds	r7, r7, r5
 800d0ca:	9b06      	ldr	r3, [sp, #24]
 800d0cc:	601e      	str	r6, [r3, #0]
 800d0ce:	9b02      	ldr	r3, [sp, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d019      	beq.n	800d108 <__gethex+0x13c>
 800d0d4:	2600      	movs	r6, #0
 800d0d6:	9b05      	ldr	r3, [sp, #20]
 800d0d8:	42b3      	cmp	r3, r6
 800d0da:	d100      	bne.n	800d0de <__gethex+0x112>
 800d0dc:	3606      	adds	r6, #6
 800d0de:	0030      	movs	r0, r6
 800d0e0:	b009      	add	sp, #36	; 0x24
 800d0e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	2700      	movs	r7, #0
 800d0e8:	9c00      	ldr	r4, [sp, #0]
 800d0ea:	9302      	str	r3, [sp, #8]
 800d0ec:	e7c9      	b.n	800d082 <__gethex+0xb6>
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	9304      	str	r3, [sp, #16]
 800d0f2:	1ca6      	adds	r6, r4, #2
 800d0f4:	e7d3      	b.n	800d09e <__gethex+0xd2>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	e7fa      	b.n	800d0f0 <__gethex+0x124>
 800d0fa:	230a      	movs	r3, #10
 800d0fc:	435d      	muls	r5, r3
 800d0fe:	182d      	adds	r5, r5, r0
 800d100:	3d10      	subs	r5, #16
 800d102:	e7d5      	b.n	800d0b0 <__gethex+0xe4>
 800d104:	0026      	movs	r6, r4
 800d106:	e7e0      	b.n	800d0ca <__gethex+0xfe>
 800d108:	9b00      	ldr	r3, [sp, #0]
 800d10a:	9902      	ldr	r1, [sp, #8]
 800d10c:	1ae3      	subs	r3, r4, r3
 800d10e:	3b01      	subs	r3, #1
 800d110:	2b07      	cmp	r3, #7
 800d112:	dc0a      	bgt.n	800d12a <__gethex+0x15e>
 800d114:	9803      	ldr	r0, [sp, #12]
 800d116:	f7fe f8d5 	bl	800b2c4 <_Balloc>
 800d11a:	1e05      	subs	r5, r0, #0
 800d11c:	d108      	bne.n	800d130 <__gethex+0x164>
 800d11e:	002a      	movs	r2, r5
 800d120:	21e4      	movs	r1, #228	; 0xe4
 800d122:	4b5f      	ldr	r3, [pc, #380]	; (800d2a0 <__gethex+0x2d4>)
 800d124:	485f      	ldr	r0, [pc, #380]	; (800d2a4 <__gethex+0x2d8>)
 800d126:	f7ff fe9b 	bl	800ce60 <__assert_func>
 800d12a:	3101      	adds	r1, #1
 800d12c:	105b      	asrs	r3, r3, #1
 800d12e:	e7ef      	b.n	800d110 <__gethex+0x144>
 800d130:	0003      	movs	r3, r0
 800d132:	3314      	adds	r3, #20
 800d134:	9302      	str	r3, [sp, #8]
 800d136:	9305      	str	r3, [sp, #20]
 800d138:	2300      	movs	r3, #0
 800d13a:	001e      	movs	r6, r3
 800d13c:	9304      	str	r3, [sp, #16]
 800d13e:	9b00      	ldr	r3, [sp, #0]
 800d140:	42a3      	cmp	r3, r4
 800d142:	d33f      	bcc.n	800d1c4 <__gethex+0x1f8>
 800d144:	9c05      	ldr	r4, [sp, #20]
 800d146:	9b02      	ldr	r3, [sp, #8]
 800d148:	c440      	stmia	r4!, {r6}
 800d14a:	1ae4      	subs	r4, r4, r3
 800d14c:	10a4      	asrs	r4, r4, #2
 800d14e:	0030      	movs	r0, r6
 800d150:	612c      	str	r4, [r5, #16]
 800d152:	f7fe f9af 	bl	800b4b4 <__hi0bits>
 800d156:	9b01      	ldr	r3, [sp, #4]
 800d158:	0164      	lsls	r4, r4, #5
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	1a26      	subs	r6, r4, r0
 800d15e:	9300      	str	r3, [sp, #0]
 800d160:	429e      	cmp	r6, r3
 800d162:	dd51      	ble.n	800d208 <__gethex+0x23c>
 800d164:	1af6      	subs	r6, r6, r3
 800d166:	0031      	movs	r1, r6
 800d168:	0028      	movs	r0, r5
 800d16a:	f7fe fd43 	bl	800bbf4 <__any_on>
 800d16e:	1e04      	subs	r4, r0, #0
 800d170:	d016      	beq.n	800d1a0 <__gethex+0x1d4>
 800d172:	2401      	movs	r4, #1
 800d174:	231f      	movs	r3, #31
 800d176:	0020      	movs	r0, r4
 800d178:	1e72      	subs	r2, r6, #1
 800d17a:	4013      	ands	r3, r2
 800d17c:	4098      	lsls	r0, r3
 800d17e:	0003      	movs	r3, r0
 800d180:	1151      	asrs	r1, r2, #5
 800d182:	9802      	ldr	r0, [sp, #8]
 800d184:	0089      	lsls	r1, r1, #2
 800d186:	5809      	ldr	r1, [r1, r0]
 800d188:	4219      	tst	r1, r3
 800d18a:	d009      	beq.n	800d1a0 <__gethex+0x1d4>
 800d18c:	42a2      	cmp	r2, r4
 800d18e:	dd06      	ble.n	800d19e <__gethex+0x1d2>
 800d190:	0028      	movs	r0, r5
 800d192:	1eb1      	subs	r1, r6, #2
 800d194:	f7fe fd2e 	bl	800bbf4 <__any_on>
 800d198:	3402      	adds	r4, #2
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d100      	bne.n	800d1a0 <__gethex+0x1d4>
 800d19e:	2402      	movs	r4, #2
 800d1a0:	0031      	movs	r1, r6
 800d1a2:	0028      	movs	r0, r5
 800d1a4:	f7ff fea7 	bl	800cef6 <rshift>
 800d1a8:	19bf      	adds	r7, r7, r6
 800d1aa:	9b01      	ldr	r3, [sp, #4]
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	42bb      	cmp	r3, r7
 800d1b0:	da3a      	bge.n	800d228 <__gethex+0x25c>
 800d1b2:	0029      	movs	r1, r5
 800d1b4:	9803      	ldr	r0, [sp, #12]
 800d1b6:	f7fe f8c9 	bl	800b34c <_Bfree>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1be:	26a3      	movs	r6, #163	; 0xa3
 800d1c0:	6013      	str	r3, [r2, #0]
 800d1c2:	e78c      	b.n	800d0de <__gethex+0x112>
 800d1c4:	3c01      	subs	r4, #1
 800d1c6:	7823      	ldrb	r3, [r4, #0]
 800d1c8:	2b2e      	cmp	r3, #46	; 0x2e
 800d1ca:	d012      	beq.n	800d1f2 <__gethex+0x226>
 800d1cc:	9b04      	ldr	r3, [sp, #16]
 800d1ce:	2b20      	cmp	r3, #32
 800d1d0:	d104      	bne.n	800d1dc <__gethex+0x210>
 800d1d2:	9b05      	ldr	r3, [sp, #20]
 800d1d4:	c340      	stmia	r3!, {r6}
 800d1d6:	2600      	movs	r6, #0
 800d1d8:	9305      	str	r3, [sp, #20]
 800d1da:	9604      	str	r6, [sp, #16]
 800d1dc:	7820      	ldrb	r0, [r4, #0]
 800d1de:	f7ff fedf 	bl	800cfa0 <__hexdig_fun>
 800d1e2:	230f      	movs	r3, #15
 800d1e4:	4018      	ands	r0, r3
 800d1e6:	9b04      	ldr	r3, [sp, #16]
 800d1e8:	4098      	lsls	r0, r3
 800d1ea:	3304      	adds	r3, #4
 800d1ec:	4306      	orrs	r6, r0
 800d1ee:	9304      	str	r3, [sp, #16]
 800d1f0:	e7a5      	b.n	800d13e <__gethex+0x172>
 800d1f2:	9b00      	ldr	r3, [sp, #0]
 800d1f4:	42a3      	cmp	r3, r4
 800d1f6:	d8e9      	bhi.n	800d1cc <__gethex+0x200>
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	0020      	movs	r0, r4
 800d1fc:	4927      	ldr	r1, [pc, #156]	; (800d29c <__gethex+0x2d0>)
 800d1fe:	f7ff fdfb 	bl	800cdf8 <strncmp>
 800d202:	2800      	cmp	r0, #0
 800d204:	d1e2      	bne.n	800d1cc <__gethex+0x200>
 800d206:	e79a      	b.n	800d13e <__gethex+0x172>
 800d208:	9b00      	ldr	r3, [sp, #0]
 800d20a:	2400      	movs	r4, #0
 800d20c:	429e      	cmp	r6, r3
 800d20e:	dacc      	bge.n	800d1aa <__gethex+0x1de>
 800d210:	1b9e      	subs	r6, r3, r6
 800d212:	0029      	movs	r1, r5
 800d214:	0032      	movs	r2, r6
 800d216:	9803      	ldr	r0, [sp, #12]
 800d218:	f7fe fab8 	bl	800b78c <__lshift>
 800d21c:	0003      	movs	r3, r0
 800d21e:	3314      	adds	r3, #20
 800d220:	0005      	movs	r5, r0
 800d222:	1bbf      	subs	r7, r7, r6
 800d224:	9302      	str	r3, [sp, #8]
 800d226:	e7c0      	b.n	800d1aa <__gethex+0x1de>
 800d228:	9b01      	ldr	r3, [sp, #4]
 800d22a:	685e      	ldr	r6, [r3, #4]
 800d22c:	42be      	cmp	r6, r7
 800d22e:	dd70      	ble.n	800d312 <__gethex+0x346>
 800d230:	9b00      	ldr	r3, [sp, #0]
 800d232:	1bf6      	subs	r6, r6, r7
 800d234:	42b3      	cmp	r3, r6
 800d236:	dc37      	bgt.n	800d2a8 <__gethex+0x2dc>
 800d238:	9b01      	ldr	r3, [sp, #4]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	2b02      	cmp	r3, #2
 800d23e:	d024      	beq.n	800d28a <__gethex+0x2be>
 800d240:	2b03      	cmp	r3, #3
 800d242:	d026      	beq.n	800d292 <__gethex+0x2c6>
 800d244:	2b01      	cmp	r3, #1
 800d246:	d117      	bne.n	800d278 <__gethex+0x2ac>
 800d248:	9b00      	ldr	r3, [sp, #0]
 800d24a:	42b3      	cmp	r3, r6
 800d24c:	d114      	bne.n	800d278 <__gethex+0x2ac>
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d10b      	bne.n	800d26a <__gethex+0x29e>
 800d252:	9b01      	ldr	r3, [sp, #4]
 800d254:	9a07      	ldr	r2, [sp, #28]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	2662      	movs	r6, #98	; 0x62
 800d25a:	6013      	str	r3, [r2, #0]
 800d25c:	2301      	movs	r3, #1
 800d25e:	9a02      	ldr	r2, [sp, #8]
 800d260:	612b      	str	r3, [r5, #16]
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d266:	601d      	str	r5, [r3, #0]
 800d268:	e739      	b.n	800d0de <__gethex+0x112>
 800d26a:	9900      	ldr	r1, [sp, #0]
 800d26c:	0028      	movs	r0, r5
 800d26e:	3901      	subs	r1, #1
 800d270:	f7fe fcc0 	bl	800bbf4 <__any_on>
 800d274:	2800      	cmp	r0, #0
 800d276:	d1ec      	bne.n	800d252 <__gethex+0x286>
 800d278:	0029      	movs	r1, r5
 800d27a:	9803      	ldr	r0, [sp, #12]
 800d27c:	f7fe f866 	bl	800b34c <_Bfree>
 800d280:	2300      	movs	r3, #0
 800d282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d284:	2650      	movs	r6, #80	; 0x50
 800d286:	6013      	str	r3, [r2, #0]
 800d288:	e729      	b.n	800d0de <__gethex+0x112>
 800d28a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1f3      	bne.n	800d278 <__gethex+0x2ac>
 800d290:	e7df      	b.n	800d252 <__gethex+0x286>
 800d292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d294:	2b00      	cmp	r3, #0
 800d296:	d1dc      	bne.n	800d252 <__gethex+0x286>
 800d298:	e7ee      	b.n	800d278 <__gethex+0x2ac>
 800d29a:	46c0      	nop			; (mov r8, r8)
 800d29c:	0800e434 	.word	0x0800e434
 800d2a0:	0800e2cd 	.word	0x0800e2cd
 800d2a4:	0800e5de 	.word	0x0800e5de
 800d2a8:	1e77      	subs	r7, r6, #1
 800d2aa:	2c00      	cmp	r4, #0
 800d2ac:	d12f      	bne.n	800d30e <__gethex+0x342>
 800d2ae:	2f00      	cmp	r7, #0
 800d2b0:	d004      	beq.n	800d2bc <__gethex+0x2f0>
 800d2b2:	0039      	movs	r1, r7
 800d2b4:	0028      	movs	r0, r5
 800d2b6:	f7fe fc9d 	bl	800bbf4 <__any_on>
 800d2ba:	0004      	movs	r4, r0
 800d2bc:	231f      	movs	r3, #31
 800d2be:	117a      	asrs	r2, r7, #5
 800d2c0:	401f      	ands	r7, r3
 800d2c2:	3b1e      	subs	r3, #30
 800d2c4:	40bb      	lsls	r3, r7
 800d2c6:	9902      	ldr	r1, [sp, #8]
 800d2c8:	0092      	lsls	r2, r2, #2
 800d2ca:	5852      	ldr	r2, [r2, r1]
 800d2cc:	421a      	tst	r2, r3
 800d2ce:	d001      	beq.n	800d2d4 <__gethex+0x308>
 800d2d0:	2302      	movs	r3, #2
 800d2d2:	431c      	orrs	r4, r3
 800d2d4:	9b00      	ldr	r3, [sp, #0]
 800d2d6:	0031      	movs	r1, r6
 800d2d8:	1b9b      	subs	r3, r3, r6
 800d2da:	2602      	movs	r6, #2
 800d2dc:	0028      	movs	r0, r5
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	f7ff fe09 	bl	800cef6 <rshift>
 800d2e4:	9b01      	ldr	r3, [sp, #4]
 800d2e6:	685f      	ldr	r7, [r3, #4]
 800d2e8:	2c00      	cmp	r4, #0
 800d2ea:	d041      	beq.n	800d370 <__gethex+0x3a4>
 800d2ec:	9b01      	ldr	r3, [sp, #4]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	2b02      	cmp	r3, #2
 800d2f2:	d010      	beq.n	800d316 <__gethex+0x34a>
 800d2f4:	2b03      	cmp	r3, #3
 800d2f6:	d012      	beq.n	800d31e <__gethex+0x352>
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d106      	bne.n	800d30a <__gethex+0x33e>
 800d2fc:	07a2      	lsls	r2, r4, #30
 800d2fe:	d504      	bpl.n	800d30a <__gethex+0x33e>
 800d300:	9a02      	ldr	r2, [sp, #8]
 800d302:	6812      	ldr	r2, [r2, #0]
 800d304:	4314      	orrs	r4, r2
 800d306:	421c      	tst	r4, r3
 800d308:	d10c      	bne.n	800d324 <__gethex+0x358>
 800d30a:	2310      	movs	r3, #16
 800d30c:	e02f      	b.n	800d36e <__gethex+0x3a2>
 800d30e:	2401      	movs	r4, #1
 800d310:	e7d4      	b.n	800d2bc <__gethex+0x2f0>
 800d312:	2601      	movs	r6, #1
 800d314:	e7e8      	b.n	800d2e8 <__gethex+0x31c>
 800d316:	2301      	movs	r3, #1
 800d318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d31a:	1a9b      	subs	r3, r3, r2
 800d31c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d31e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d320:	2b00      	cmp	r3, #0
 800d322:	d0f2      	beq.n	800d30a <__gethex+0x33e>
 800d324:	692b      	ldr	r3, [r5, #16]
 800d326:	2000      	movs	r0, #0
 800d328:	9302      	str	r3, [sp, #8]
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	9304      	str	r3, [sp, #16]
 800d32e:	002b      	movs	r3, r5
 800d330:	9a04      	ldr	r2, [sp, #16]
 800d332:	3314      	adds	r3, #20
 800d334:	1899      	adds	r1, r3, r2
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	1c54      	adds	r4, r2, #1
 800d33a:	d01e      	beq.n	800d37a <__gethex+0x3ae>
 800d33c:	3201      	adds	r2, #1
 800d33e:	601a      	str	r2, [r3, #0]
 800d340:	002b      	movs	r3, r5
 800d342:	3314      	adds	r3, #20
 800d344:	2e02      	cmp	r6, #2
 800d346:	d141      	bne.n	800d3cc <__gethex+0x400>
 800d348:	9a01      	ldr	r2, [sp, #4]
 800d34a:	9900      	ldr	r1, [sp, #0]
 800d34c:	6812      	ldr	r2, [r2, #0]
 800d34e:	3a01      	subs	r2, #1
 800d350:	428a      	cmp	r2, r1
 800d352:	d10b      	bne.n	800d36c <__gethex+0x3a0>
 800d354:	221f      	movs	r2, #31
 800d356:	9800      	ldr	r0, [sp, #0]
 800d358:	1149      	asrs	r1, r1, #5
 800d35a:	4002      	ands	r2, r0
 800d35c:	2001      	movs	r0, #1
 800d35e:	0004      	movs	r4, r0
 800d360:	4094      	lsls	r4, r2
 800d362:	0089      	lsls	r1, r1, #2
 800d364:	58cb      	ldr	r3, [r1, r3]
 800d366:	4223      	tst	r3, r4
 800d368:	d000      	beq.n	800d36c <__gethex+0x3a0>
 800d36a:	2601      	movs	r6, #1
 800d36c:	2320      	movs	r3, #32
 800d36e:	431e      	orrs	r6, r3
 800d370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d372:	601d      	str	r5, [r3, #0]
 800d374:	9b07      	ldr	r3, [sp, #28]
 800d376:	601f      	str	r7, [r3, #0]
 800d378:	e6b1      	b.n	800d0de <__gethex+0x112>
 800d37a:	c301      	stmia	r3!, {r0}
 800d37c:	4299      	cmp	r1, r3
 800d37e:	d8da      	bhi.n	800d336 <__gethex+0x36a>
 800d380:	68ab      	ldr	r3, [r5, #8]
 800d382:	9a02      	ldr	r2, [sp, #8]
 800d384:	429a      	cmp	r2, r3
 800d386:	db18      	blt.n	800d3ba <__gethex+0x3ee>
 800d388:	6869      	ldr	r1, [r5, #4]
 800d38a:	9803      	ldr	r0, [sp, #12]
 800d38c:	3101      	adds	r1, #1
 800d38e:	f7fd ff99 	bl	800b2c4 <_Balloc>
 800d392:	1e04      	subs	r4, r0, #0
 800d394:	d104      	bne.n	800d3a0 <__gethex+0x3d4>
 800d396:	0022      	movs	r2, r4
 800d398:	2184      	movs	r1, #132	; 0x84
 800d39a:	4b1c      	ldr	r3, [pc, #112]	; (800d40c <__gethex+0x440>)
 800d39c:	481c      	ldr	r0, [pc, #112]	; (800d410 <__gethex+0x444>)
 800d39e:	e6c2      	b.n	800d126 <__gethex+0x15a>
 800d3a0:	0029      	movs	r1, r5
 800d3a2:	692a      	ldr	r2, [r5, #16]
 800d3a4:	310c      	adds	r1, #12
 800d3a6:	3202      	adds	r2, #2
 800d3a8:	0092      	lsls	r2, r2, #2
 800d3aa:	300c      	adds	r0, #12
 800d3ac:	f7ff fd48 	bl	800ce40 <memcpy>
 800d3b0:	0029      	movs	r1, r5
 800d3b2:	9803      	ldr	r0, [sp, #12]
 800d3b4:	f7fd ffca 	bl	800b34c <_Bfree>
 800d3b8:	0025      	movs	r5, r4
 800d3ba:	692b      	ldr	r3, [r5, #16]
 800d3bc:	1c5a      	adds	r2, r3, #1
 800d3be:	612a      	str	r2, [r5, #16]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	3304      	adds	r3, #4
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	18eb      	adds	r3, r5, r3
 800d3c8:	605a      	str	r2, [r3, #4]
 800d3ca:	e7b9      	b.n	800d340 <__gethex+0x374>
 800d3cc:	692a      	ldr	r2, [r5, #16]
 800d3ce:	9902      	ldr	r1, [sp, #8]
 800d3d0:	428a      	cmp	r2, r1
 800d3d2:	dd09      	ble.n	800d3e8 <__gethex+0x41c>
 800d3d4:	2101      	movs	r1, #1
 800d3d6:	0028      	movs	r0, r5
 800d3d8:	f7ff fd8d 	bl	800cef6 <rshift>
 800d3dc:	9b01      	ldr	r3, [sp, #4]
 800d3de:	3701      	adds	r7, #1
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	42bb      	cmp	r3, r7
 800d3e4:	dac1      	bge.n	800d36a <__gethex+0x39e>
 800d3e6:	e6e4      	b.n	800d1b2 <__gethex+0x1e6>
 800d3e8:	221f      	movs	r2, #31
 800d3ea:	9c00      	ldr	r4, [sp, #0]
 800d3ec:	9900      	ldr	r1, [sp, #0]
 800d3ee:	2601      	movs	r6, #1
 800d3f0:	4014      	ands	r4, r2
 800d3f2:	4211      	tst	r1, r2
 800d3f4:	d0ba      	beq.n	800d36c <__gethex+0x3a0>
 800d3f6:	9a04      	ldr	r2, [sp, #16]
 800d3f8:	189b      	adds	r3, r3, r2
 800d3fa:	3b04      	subs	r3, #4
 800d3fc:	6818      	ldr	r0, [r3, #0]
 800d3fe:	f7fe f859 	bl	800b4b4 <__hi0bits>
 800d402:	2320      	movs	r3, #32
 800d404:	1b1b      	subs	r3, r3, r4
 800d406:	4298      	cmp	r0, r3
 800d408:	dbe4      	blt.n	800d3d4 <__gethex+0x408>
 800d40a:	e7af      	b.n	800d36c <__gethex+0x3a0>
 800d40c:	0800e2cd 	.word	0x0800e2cd
 800d410:	0800e5de 	.word	0x0800e5de

0800d414 <L_shift>:
 800d414:	2308      	movs	r3, #8
 800d416:	b570      	push	{r4, r5, r6, lr}
 800d418:	2520      	movs	r5, #32
 800d41a:	1a9a      	subs	r2, r3, r2
 800d41c:	0092      	lsls	r2, r2, #2
 800d41e:	1aad      	subs	r5, r5, r2
 800d420:	6843      	ldr	r3, [r0, #4]
 800d422:	6804      	ldr	r4, [r0, #0]
 800d424:	001e      	movs	r6, r3
 800d426:	40ae      	lsls	r6, r5
 800d428:	40d3      	lsrs	r3, r2
 800d42a:	4334      	orrs	r4, r6
 800d42c:	6004      	str	r4, [r0, #0]
 800d42e:	6043      	str	r3, [r0, #4]
 800d430:	3004      	adds	r0, #4
 800d432:	4288      	cmp	r0, r1
 800d434:	d3f4      	bcc.n	800d420 <L_shift+0xc>
 800d436:	bd70      	pop	{r4, r5, r6, pc}

0800d438 <__match>:
 800d438:	b530      	push	{r4, r5, lr}
 800d43a:	6803      	ldr	r3, [r0, #0]
 800d43c:	780c      	ldrb	r4, [r1, #0]
 800d43e:	3301      	adds	r3, #1
 800d440:	2c00      	cmp	r4, #0
 800d442:	d102      	bne.n	800d44a <__match+0x12>
 800d444:	6003      	str	r3, [r0, #0]
 800d446:	2001      	movs	r0, #1
 800d448:	bd30      	pop	{r4, r5, pc}
 800d44a:	781a      	ldrb	r2, [r3, #0]
 800d44c:	0015      	movs	r5, r2
 800d44e:	3d41      	subs	r5, #65	; 0x41
 800d450:	2d19      	cmp	r5, #25
 800d452:	d800      	bhi.n	800d456 <__match+0x1e>
 800d454:	3220      	adds	r2, #32
 800d456:	3101      	adds	r1, #1
 800d458:	42a2      	cmp	r2, r4
 800d45a:	d0ef      	beq.n	800d43c <__match+0x4>
 800d45c:	2000      	movs	r0, #0
 800d45e:	e7f3      	b.n	800d448 <__match+0x10>

0800d460 <__hexnan>:
 800d460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d462:	680b      	ldr	r3, [r1, #0]
 800d464:	b08b      	sub	sp, #44	; 0x2c
 800d466:	9201      	str	r2, [sp, #4]
 800d468:	9901      	ldr	r1, [sp, #4]
 800d46a:	115a      	asrs	r2, r3, #5
 800d46c:	0092      	lsls	r2, r2, #2
 800d46e:	188a      	adds	r2, r1, r2
 800d470:	9202      	str	r2, [sp, #8]
 800d472:	0019      	movs	r1, r3
 800d474:	221f      	movs	r2, #31
 800d476:	4011      	ands	r1, r2
 800d478:	9008      	str	r0, [sp, #32]
 800d47a:	9106      	str	r1, [sp, #24]
 800d47c:	4213      	tst	r3, r2
 800d47e:	d002      	beq.n	800d486 <__hexnan+0x26>
 800d480:	9b02      	ldr	r3, [sp, #8]
 800d482:	3304      	adds	r3, #4
 800d484:	9302      	str	r3, [sp, #8]
 800d486:	9b02      	ldr	r3, [sp, #8]
 800d488:	2500      	movs	r5, #0
 800d48a:	1f1f      	subs	r7, r3, #4
 800d48c:	003e      	movs	r6, r7
 800d48e:	003c      	movs	r4, r7
 800d490:	9b08      	ldr	r3, [sp, #32]
 800d492:	603d      	str	r5, [r7, #0]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	9507      	str	r5, [sp, #28]
 800d498:	9305      	str	r3, [sp, #20]
 800d49a:	9503      	str	r5, [sp, #12]
 800d49c:	9b05      	ldr	r3, [sp, #20]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a2:	9b05      	ldr	r3, [sp, #20]
 800d4a4:	785b      	ldrb	r3, [r3, #1]
 800d4a6:	9304      	str	r3, [sp, #16]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d028      	beq.n	800d4fe <__hexnan+0x9e>
 800d4ac:	9804      	ldr	r0, [sp, #16]
 800d4ae:	f7ff fd77 	bl	800cfa0 <__hexdig_fun>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	d154      	bne.n	800d560 <__hexnan+0x100>
 800d4b6:	9b04      	ldr	r3, [sp, #16]
 800d4b8:	2b20      	cmp	r3, #32
 800d4ba:	d819      	bhi.n	800d4f0 <__hexnan+0x90>
 800d4bc:	9b03      	ldr	r3, [sp, #12]
 800d4be:	9a07      	ldr	r2, [sp, #28]
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	dd12      	ble.n	800d4ea <__hexnan+0x8a>
 800d4c4:	42b4      	cmp	r4, r6
 800d4c6:	d206      	bcs.n	800d4d6 <__hexnan+0x76>
 800d4c8:	2d07      	cmp	r5, #7
 800d4ca:	dc04      	bgt.n	800d4d6 <__hexnan+0x76>
 800d4cc:	002a      	movs	r2, r5
 800d4ce:	0031      	movs	r1, r6
 800d4d0:	0020      	movs	r0, r4
 800d4d2:	f7ff ff9f 	bl	800d414 <L_shift>
 800d4d6:	9b01      	ldr	r3, [sp, #4]
 800d4d8:	2508      	movs	r5, #8
 800d4da:	429c      	cmp	r4, r3
 800d4dc:	d905      	bls.n	800d4ea <__hexnan+0x8a>
 800d4de:	1f26      	subs	r6, r4, #4
 800d4e0:	2500      	movs	r5, #0
 800d4e2:	0034      	movs	r4, r6
 800d4e4:	9b03      	ldr	r3, [sp, #12]
 800d4e6:	6035      	str	r5, [r6, #0]
 800d4e8:	9307      	str	r3, [sp, #28]
 800d4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4ec:	9305      	str	r3, [sp, #20]
 800d4ee:	e7d5      	b.n	800d49c <__hexnan+0x3c>
 800d4f0:	9b04      	ldr	r3, [sp, #16]
 800d4f2:	2b29      	cmp	r3, #41	; 0x29
 800d4f4:	d159      	bne.n	800d5aa <__hexnan+0x14a>
 800d4f6:	9b05      	ldr	r3, [sp, #20]
 800d4f8:	9a08      	ldr	r2, [sp, #32]
 800d4fa:	3302      	adds	r3, #2
 800d4fc:	6013      	str	r3, [r2, #0]
 800d4fe:	9b03      	ldr	r3, [sp, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d052      	beq.n	800d5aa <__hexnan+0x14a>
 800d504:	42b4      	cmp	r4, r6
 800d506:	d206      	bcs.n	800d516 <__hexnan+0xb6>
 800d508:	2d07      	cmp	r5, #7
 800d50a:	dc04      	bgt.n	800d516 <__hexnan+0xb6>
 800d50c:	002a      	movs	r2, r5
 800d50e:	0031      	movs	r1, r6
 800d510:	0020      	movs	r0, r4
 800d512:	f7ff ff7f 	bl	800d414 <L_shift>
 800d516:	9b01      	ldr	r3, [sp, #4]
 800d518:	429c      	cmp	r4, r3
 800d51a:	d935      	bls.n	800d588 <__hexnan+0x128>
 800d51c:	001a      	movs	r2, r3
 800d51e:	0023      	movs	r3, r4
 800d520:	cb02      	ldmia	r3!, {r1}
 800d522:	c202      	stmia	r2!, {r1}
 800d524:	429f      	cmp	r7, r3
 800d526:	d2fb      	bcs.n	800d520 <__hexnan+0xc0>
 800d528:	9b02      	ldr	r3, [sp, #8]
 800d52a:	1c62      	adds	r2, r4, #1
 800d52c:	1ed9      	subs	r1, r3, #3
 800d52e:	2304      	movs	r3, #4
 800d530:	4291      	cmp	r1, r2
 800d532:	d305      	bcc.n	800d540 <__hexnan+0xe0>
 800d534:	9b02      	ldr	r3, [sp, #8]
 800d536:	3b04      	subs	r3, #4
 800d538:	1b1b      	subs	r3, r3, r4
 800d53a:	089b      	lsrs	r3, r3, #2
 800d53c:	3301      	adds	r3, #1
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	9a01      	ldr	r2, [sp, #4]
 800d542:	18d3      	adds	r3, r2, r3
 800d544:	2200      	movs	r2, #0
 800d546:	c304      	stmia	r3!, {r2}
 800d548:	429f      	cmp	r7, r3
 800d54a:	d2fc      	bcs.n	800d546 <__hexnan+0xe6>
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d104      	bne.n	800d55c <__hexnan+0xfc>
 800d552:	9b01      	ldr	r3, [sp, #4]
 800d554:	429f      	cmp	r7, r3
 800d556:	d126      	bne.n	800d5a6 <__hexnan+0x146>
 800d558:	2301      	movs	r3, #1
 800d55a:	603b      	str	r3, [r7, #0]
 800d55c:	2005      	movs	r0, #5
 800d55e:	e025      	b.n	800d5ac <__hexnan+0x14c>
 800d560:	9b03      	ldr	r3, [sp, #12]
 800d562:	3501      	adds	r5, #1
 800d564:	3301      	adds	r3, #1
 800d566:	9303      	str	r3, [sp, #12]
 800d568:	2d08      	cmp	r5, #8
 800d56a:	dd06      	ble.n	800d57a <__hexnan+0x11a>
 800d56c:	9b01      	ldr	r3, [sp, #4]
 800d56e:	429c      	cmp	r4, r3
 800d570:	d9bb      	bls.n	800d4ea <__hexnan+0x8a>
 800d572:	2300      	movs	r3, #0
 800d574:	2501      	movs	r5, #1
 800d576:	3c04      	subs	r4, #4
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	220f      	movs	r2, #15
 800d57c:	6823      	ldr	r3, [r4, #0]
 800d57e:	4010      	ands	r0, r2
 800d580:	011b      	lsls	r3, r3, #4
 800d582:	4303      	orrs	r3, r0
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	e7b0      	b.n	800d4ea <__hexnan+0x8a>
 800d588:	9b06      	ldr	r3, [sp, #24]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0de      	beq.n	800d54c <__hexnan+0xec>
 800d58e:	2320      	movs	r3, #32
 800d590:	9a06      	ldr	r2, [sp, #24]
 800d592:	9902      	ldr	r1, [sp, #8]
 800d594:	1a9b      	subs	r3, r3, r2
 800d596:	2201      	movs	r2, #1
 800d598:	4252      	negs	r2, r2
 800d59a:	40da      	lsrs	r2, r3
 800d59c:	3904      	subs	r1, #4
 800d59e:	680b      	ldr	r3, [r1, #0]
 800d5a0:	4013      	ands	r3, r2
 800d5a2:	600b      	str	r3, [r1, #0]
 800d5a4:	e7d2      	b.n	800d54c <__hexnan+0xec>
 800d5a6:	3f04      	subs	r7, #4
 800d5a8:	e7d0      	b.n	800d54c <__hexnan+0xec>
 800d5aa:	2004      	movs	r0, #4
 800d5ac:	b00b      	add	sp, #44	; 0x2c
 800d5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d5b0 <__ascii_mbtowc>:
 800d5b0:	b082      	sub	sp, #8
 800d5b2:	2900      	cmp	r1, #0
 800d5b4:	d100      	bne.n	800d5b8 <__ascii_mbtowc+0x8>
 800d5b6:	a901      	add	r1, sp, #4
 800d5b8:	1e10      	subs	r0, r2, #0
 800d5ba:	d006      	beq.n	800d5ca <__ascii_mbtowc+0x1a>
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d006      	beq.n	800d5ce <__ascii_mbtowc+0x1e>
 800d5c0:	7813      	ldrb	r3, [r2, #0]
 800d5c2:	600b      	str	r3, [r1, #0]
 800d5c4:	7810      	ldrb	r0, [r2, #0]
 800d5c6:	1e43      	subs	r3, r0, #1
 800d5c8:	4198      	sbcs	r0, r3
 800d5ca:	b002      	add	sp, #8
 800d5cc:	4770      	bx	lr
 800d5ce:	2002      	movs	r0, #2
 800d5d0:	4240      	negs	r0, r0
 800d5d2:	e7fa      	b.n	800d5ca <__ascii_mbtowc+0x1a>

0800d5d4 <_realloc_r>:
 800d5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5d6:	0007      	movs	r7, r0
 800d5d8:	000e      	movs	r6, r1
 800d5da:	0014      	movs	r4, r2
 800d5dc:	2900      	cmp	r1, #0
 800d5de:	d105      	bne.n	800d5ec <_realloc_r+0x18>
 800d5e0:	0011      	movs	r1, r2
 800d5e2:	f7fd fddd 	bl	800b1a0 <_malloc_r>
 800d5e6:	0005      	movs	r5, r0
 800d5e8:	0028      	movs	r0, r5
 800d5ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5ec:	2a00      	cmp	r2, #0
 800d5ee:	d103      	bne.n	800d5f8 <_realloc_r+0x24>
 800d5f0:	f7fd fd60 	bl	800b0b4 <_free_r>
 800d5f4:	0025      	movs	r5, r4
 800d5f6:	e7f7      	b.n	800d5e8 <_realloc_r+0x14>
 800d5f8:	f000 f83f 	bl	800d67a <_malloc_usable_size_r>
 800d5fc:	9001      	str	r0, [sp, #4]
 800d5fe:	4284      	cmp	r4, r0
 800d600:	d803      	bhi.n	800d60a <_realloc_r+0x36>
 800d602:	0035      	movs	r5, r6
 800d604:	0843      	lsrs	r3, r0, #1
 800d606:	42a3      	cmp	r3, r4
 800d608:	d3ee      	bcc.n	800d5e8 <_realloc_r+0x14>
 800d60a:	0021      	movs	r1, r4
 800d60c:	0038      	movs	r0, r7
 800d60e:	f7fd fdc7 	bl	800b1a0 <_malloc_r>
 800d612:	1e05      	subs	r5, r0, #0
 800d614:	d0e8      	beq.n	800d5e8 <_realloc_r+0x14>
 800d616:	9b01      	ldr	r3, [sp, #4]
 800d618:	0022      	movs	r2, r4
 800d61a:	429c      	cmp	r4, r3
 800d61c:	d900      	bls.n	800d620 <_realloc_r+0x4c>
 800d61e:	001a      	movs	r2, r3
 800d620:	0031      	movs	r1, r6
 800d622:	0028      	movs	r0, r5
 800d624:	f7ff fc0c 	bl	800ce40 <memcpy>
 800d628:	0031      	movs	r1, r6
 800d62a:	0038      	movs	r0, r7
 800d62c:	f7fd fd42 	bl	800b0b4 <_free_r>
 800d630:	e7da      	b.n	800d5e8 <_realloc_r+0x14>

0800d632 <__ascii_wctomb>:
 800d632:	0003      	movs	r3, r0
 800d634:	1e08      	subs	r0, r1, #0
 800d636:	d005      	beq.n	800d644 <__ascii_wctomb+0x12>
 800d638:	2aff      	cmp	r2, #255	; 0xff
 800d63a:	d904      	bls.n	800d646 <__ascii_wctomb+0x14>
 800d63c:	228a      	movs	r2, #138	; 0x8a
 800d63e:	2001      	movs	r0, #1
 800d640:	601a      	str	r2, [r3, #0]
 800d642:	4240      	negs	r0, r0
 800d644:	4770      	bx	lr
 800d646:	2001      	movs	r0, #1
 800d648:	700a      	strb	r2, [r1, #0]
 800d64a:	e7fb      	b.n	800d644 <__ascii_wctomb+0x12>

0800d64c <fiprintf>:
 800d64c:	b40e      	push	{r1, r2, r3}
 800d64e:	b517      	push	{r0, r1, r2, r4, lr}
 800d650:	4c05      	ldr	r4, [pc, #20]	; (800d668 <fiprintf+0x1c>)
 800d652:	ab05      	add	r3, sp, #20
 800d654:	cb04      	ldmia	r3!, {r2}
 800d656:	0001      	movs	r1, r0
 800d658:	6820      	ldr	r0, [r4, #0]
 800d65a:	9301      	str	r3, [sp, #4]
 800d65c:	f000 f83c 	bl	800d6d8 <_vfiprintf_r>
 800d660:	bc1e      	pop	{r1, r2, r3, r4}
 800d662:	bc08      	pop	{r3}
 800d664:	b003      	add	sp, #12
 800d666:	4718      	bx	r3
 800d668:	2000007c 	.word	0x2000007c

0800d66c <abort>:
 800d66c:	2006      	movs	r0, #6
 800d66e:	b510      	push	{r4, lr}
 800d670:	f000 fa1e 	bl	800dab0 <raise>
 800d674:	2001      	movs	r0, #1
 800d676:	f7f6 fba8 	bl	8003dca <_exit>

0800d67a <_malloc_usable_size_r>:
 800d67a:	1f0b      	subs	r3, r1, #4
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	1f18      	subs	r0, r3, #4
 800d680:	2b00      	cmp	r3, #0
 800d682:	da01      	bge.n	800d688 <_malloc_usable_size_r+0xe>
 800d684:	580b      	ldr	r3, [r1, r0]
 800d686:	18c0      	adds	r0, r0, r3
 800d688:	4770      	bx	lr

0800d68a <__sfputc_r>:
 800d68a:	6893      	ldr	r3, [r2, #8]
 800d68c:	b510      	push	{r4, lr}
 800d68e:	3b01      	subs	r3, #1
 800d690:	6093      	str	r3, [r2, #8]
 800d692:	2b00      	cmp	r3, #0
 800d694:	da04      	bge.n	800d6a0 <__sfputc_r+0x16>
 800d696:	6994      	ldr	r4, [r2, #24]
 800d698:	42a3      	cmp	r3, r4
 800d69a:	db07      	blt.n	800d6ac <__sfputc_r+0x22>
 800d69c:	290a      	cmp	r1, #10
 800d69e:	d005      	beq.n	800d6ac <__sfputc_r+0x22>
 800d6a0:	6813      	ldr	r3, [r2, #0]
 800d6a2:	1c58      	adds	r0, r3, #1
 800d6a4:	6010      	str	r0, [r2, #0]
 800d6a6:	7019      	strb	r1, [r3, #0]
 800d6a8:	0008      	movs	r0, r1
 800d6aa:	bd10      	pop	{r4, pc}
 800d6ac:	f000 f930 	bl	800d910 <__swbuf_r>
 800d6b0:	0001      	movs	r1, r0
 800d6b2:	e7f9      	b.n	800d6a8 <__sfputc_r+0x1e>

0800d6b4 <__sfputs_r>:
 800d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b6:	0006      	movs	r6, r0
 800d6b8:	000f      	movs	r7, r1
 800d6ba:	0014      	movs	r4, r2
 800d6bc:	18d5      	adds	r5, r2, r3
 800d6be:	42ac      	cmp	r4, r5
 800d6c0:	d101      	bne.n	800d6c6 <__sfputs_r+0x12>
 800d6c2:	2000      	movs	r0, #0
 800d6c4:	e007      	b.n	800d6d6 <__sfputs_r+0x22>
 800d6c6:	7821      	ldrb	r1, [r4, #0]
 800d6c8:	003a      	movs	r2, r7
 800d6ca:	0030      	movs	r0, r6
 800d6cc:	f7ff ffdd 	bl	800d68a <__sfputc_r>
 800d6d0:	3401      	adds	r4, #1
 800d6d2:	1c43      	adds	r3, r0, #1
 800d6d4:	d1f3      	bne.n	800d6be <__sfputs_r+0xa>
 800d6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d6d8 <_vfiprintf_r>:
 800d6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6da:	b0a1      	sub	sp, #132	; 0x84
 800d6dc:	000f      	movs	r7, r1
 800d6de:	0015      	movs	r5, r2
 800d6e0:	001e      	movs	r6, r3
 800d6e2:	9003      	str	r0, [sp, #12]
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d004      	beq.n	800d6f2 <_vfiprintf_r+0x1a>
 800d6e8:	6a03      	ldr	r3, [r0, #32]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d101      	bne.n	800d6f2 <_vfiprintf_r+0x1a>
 800d6ee:	f7fc fcd9 	bl	800a0a4 <__sinit>
 800d6f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6f4:	07db      	lsls	r3, r3, #31
 800d6f6:	d405      	bmi.n	800d704 <_vfiprintf_r+0x2c>
 800d6f8:	89bb      	ldrh	r3, [r7, #12]
 800d6fa:	059b      	lsls	r3, r3, #22
 800d6fc:	d402      	bmi.n	800d704 <_vfiprintf_r+0x2c>
 800d6fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d700:	f7fc fe29 	bl	800a356 <__retarget_lock_acquire_recursive>
 800d704:	89bb      	ldrh	r3, [r7, #12]
 800d706:	071b      	lsls	r3, r3, #28
 800d708:	d502      	bpl.n	800d710 <_vfiprintf_r+0x38>
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d113      	bne.n	800d738 <_vfiprintf_r+0x60>
 800d710:	0039      	movs	r1, r7
 800d712:	9803      	ldr	r0, [sp, #12]
 800d714:	f000 f93e 	bl	800d994 <__swsetup_r>
 800d718:	2800      	cmp	r0, #0
 800d71a:	d00d      	beq.n	800d738 <_vfiprintf_r+0x60>
 800d71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d71e:	07db      	lsls	r3, r3, #31
 800d720:	d503      	bpl.n	800d72a <_vfiprintf_r+0x52>
 800d722:	2001      	movs	r0, #1
 800d724:	4240      	negs	r0, r0
 800d726:	b021      	add	sp, #132	; 0x84
 800d728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d72a:	89bb      	ldrh	r3, [r7, #12]
 800d72c:	059b      	lsls	r3, r3, #22
 800d72e:	d4f8      	bmi.n	800d722 <_vfiprintf_r+0x4a>
 800d730:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d732:	f7fc fe11 	bl	800a358 <__retarget_lock_release_recursive>
 800d736:	e7f4      	b.n	800d722 <_vfiprintf_r+0x4a>
 800d738:	2300      	movs	r3, #0
 800d73a:	ac08      	add	r4, sp, #32
 800d73c:	6163      	str	r3, [r4, #20]
 800d73e:	3320      	adds	r3, #32
 800d740:	7663      	strb	r3, [r4, #25]
 800d742:	3310      	adds	r3, #16
 800d744:	76a3      	strb	r3, [r4, #26]
 800d746:	9607      	str	r6, [sp, #28]
 800d748:	002e      	movs	r6, r5
 800d74a:	7833      	ldrb	r3, [r6, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d001      	beq.n	800d754 <_vfiprintf_r+0x7c>
 800d750:	2b25      	cmp	r3, #37	; 0x25
 800d752:	d148      	bne.n	800d7e6 <_vfiprintf_r+0x10e>
 800d754:	1b73      	subs	r3, r6, r5
 800d756:	9305      	str	r3, [sp, #20]
 800d758:	42ae      	cmp	r6, r5
 800d75a:	d00b      	beq.n	800d774 <_vfiprintf_r+0x9c>
 800d75c:	002a      	movs	r2, r5
 800d75e:	0039      	movs	r1, r7
 800d760:	9803      	ldr	r0, [sp, #12]
 800d762:	f7ff ffa7 	bl	800d6b4 <__sfputs_r>
 800d766:	3001      	adds	r0, #1
 800d768:	d100      	bne.n	800d76c <_vfiprintf_r+0x94>
 800d76a:	e0af      	b.n	800d8cc <_vfiprintf_r+0x1f4>
 800d76c:	6963      	ldr	r3, [r4, #20]
 800d76e:	9a05      	ldr	r2, [sp, #20]
 800d770:	189b      	adds	r3, r3, r2
 800d772:	6163      	str	r3, [r4, #20]
 800d774:	7833      	ldrb	r3, [r6, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d100      	bne.n	800d77c <_vfiprintf_r+0xa4>
 800d77a:	e0a7      	b.n	800d8cc <_vfiprintf_r+0x1f4>
 800d77c:	2201      	movs	r2, #1
 800d77e:	2300      	movs	r3, #0
 800d780:	4252      	negs	r2, r2
 800d782:	6062      	str	r2, [r4, #4]
 800d784:	a904      	add	r1, sp, #16
 800d786:	3254      	adds	r2, #84	; 0x54
 800d788:	1852      	adds	r2, r2, r1
 800d78a:	1c75      	adds	r5, r6, #1
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	60e3      	str	r3, [r4, #12]
 800d790:	60a3      	str	r3, [r4, #8]
 800d792:	7013      	strb	r3, [r2, #0]
 800d794:	65a3      	str	r3, [r4, #88]	; 0x58
 800d796:	4b59      	ldr	r3, [pc, #356]	; (800d8fc <_vfiprintf_r+0x224>)
 800d798:	2205      	movs	r2, #5
 800d79a:	0018      	movs	r0, r3
 800d79c:	7829      	ldrb	r1, [r5, #0]
 800d79e:	9305      	str	r3, [sp, #20]
 800d7a0:	f7fc fddb 	bl	800a35a <memchr>
 800d7a4:	1c6e      	adds	r6, r5, #1
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d11f      	bne.n	800d7ea <_vfiprintf_r+0x112>
 800d7aa:	6822      	ldr	r2, [r4, #0]
 800d7ac:	06d3      	lsls	r3, r2, #27
 800d7ae:	d504      	bpl.n	800d7ba <_vfiprintf_r+0xe2>
 800d7b0:	2353      	movs	r3, #83	; 0x53
 800d7b2:	a904      	add	r1, sp, #16
 800d7b4:	185b      	adds	r3, r3, r1
 800d7b6:	2120      	movs	r1, #32
 800d7b8:	7019      	strb	r1, [r3, #0]
 800d7ba:	0713      	lsls	r3, r2, #28
 800d7bc:	d504      	bpl.n	800d7c8 <_vfiprintf_r+0xf0>
 800d7be:	2353      	movs	r3, #83	; 0x53
 800d7c0:	a904      	add	r1, sp, #16
 800d7c2:	185b      	adds	r3, r3, r1
 800d7c4:	212b      	movs	r1, #43	; 0x2b
 800d7c6:	7019      	strb	r1, [r3, #0]
 800d7c8:	782b      	ldrb	r3, [r5, #0]
 800d7ca:	2b2a      	cmp	r3, #42	; 0x2a
 800d7cc:	d016      	beq.n	800d7fc <_vfiprintf_r+0x124>
 800d7ce:	002e      	movs	r6, r5
 800d7d0:	2100      	movs	r1, #0
 800d7d2:	200a      	movs	r0, #10
 800d7d4:	68e3      	ldr	r3, [r4, #12]
 800d7d6:	7832      	ldrb	r2, [r6, #0]
 800d7d8:	1c75      	adds	r5, r6, #1
 800d7da:	3a30      	subs	r2, #48	; 0x30
 800d7dc:	2a09      	cmp	r2, #9
 800d7de:	d94e      	bls.n	800d87e <_vfiprintf_r+0x1a6>
 800d7e0:	2900      	cmp	r1, #0
 800d7e2:	d111      	bne.n	800d808 <_vfiprintf_r+0x130>
 800d7e4:	e017      	b.n	800d816 <_vfiprintf_r+0x13e>
 800d7e6:	3601      	adds	r6, #1
 800d7e8:	e7af      	b.n	800d74a <_vfiprintf_r+0x72>
 800d7ea:	9b05      	ldr	r3, [sp, #20]
 800d7ec:	6822      	ldr	r2, [r4, #0]
 800d7ee:	1ac0      	subs	r0, r0, r3
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	4083      	lsls	r3, r0
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	0035      	movs	r5, r6
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	e7cc      	b.n	800d796 <_vfiprintf_r+0xbe>
 800d7fc:	9b07      	ldr	r3, [sp, #28]
 800d7fe:	1d19      	adds	r1, r3, #4
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	9107      	str	r1, [sp, #28]
 800d804:	2b00      	cmp	r3, #0
 800d806:	db01      	blt.n	800d80c <_vfiprintf_r+0x134>
 800d808:	930b      	str	r3, [sp, #44]	; 0x2c
 800d80a:	e004      	b.n	800d816 <_vfiprintf_r+0x13e>
 800d80c:	425b      	negs	r3, r3
 800d80e:	60e3      	str	r3, [r4, #12]
 800d810:	2302      	movs	r3, #2
 800d812:	4313      	orrs	r3, r2
 800d814:	6023      	str	r3, [r4, #0]
 800d816:	7833      	ldrb	r3, [r6, #0]
 800d818:	2b2e      	cmp	r3, #46	; 0x2e
 800d81a:	d10a      	bne.n	800d832 <_vfiprintf_r+0x15a>
 800d81c:	7873      	ldrb	r3, [r6, #1]
 800d81e:	2b2a      	cmp	r3, #42	; 0x2a
 800d820:	d135      	bne.n	800d88e <_vfiprintf_r+0x1b6>
 800d822:	9b07      	ldr	r3, [sp, #28]
 800d824:	3602      	adds	r6, #2
 800d826:	1d1a      	adds	r2, r3, #4
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	9207      	str	r2, [sp, #28]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	db2b      	blt.n	800d888 <_vfiprintf_r+0x1b0>
 800d830:	9309      	str	r3, [sp, #36]	; 0x24
 800d832:	4d33      	ldr	r5, [pc, #204]	; (800d900 <_vfiprintf_r+0x228>)
 800d834:	2203      	movs	r2, #3
 800d836:	0028      	movs	r0, r5
 800d838:	7831      	ldrb	r1, [r6, #0]
 800d83a:	f7fc fd8e 	bl	800a35a <memchr>
 800d83e:	2800      	cmp	r0, #0
 800d840:	d006      	beq.n	800d850 <_vfiprintf_r+0x178>
 800d842:	2340      	movs	r3, #64	; 0x40
 800d844:	1b40      	subs	r0, r0, r5
 800d846:	4083      	lsls	r3, r0
 800d848:	6822      	ldr	r2, [r4, #0]
 800d84a:	3601      	adds	r6, #1
 800d84c:	4313      	orrs	r3, r2
 800d84e:	6023      	str	r3, [r4, #0]
 800d850:	7831      	ldrb	r1, [r6, #0]
 800d852:	2206      	movs	r2, #6
 800d854:	482b      	ldr	r0, [pc, #172]	; (800d904 <_vfiprintf_r+0x22c>)
 800d856:	1c75      	adds	r5, r6, #1
 800d858:	7621      	strb	r1, [r4, #24]
 800d85a:	f7fc fd7e 	bl	800a35a <memchr>
 800d85e:	2800      	cmp	r0, #0
 800d860:	d043      	beq.n	800d8ea <_vfiprintf_r+0x212>
 800d862:	4b29      	ldr	r3, [pc, #164]	; (800d908 <_vfiprintf_r+0x230>)
 800d864:	2b00      	cmp	r3, #0
 800d866:	d125      	bne.n	800d8b4 <_vfiprintf_r+0x1dc>
 800d868:	2207      	movs	r2, #7
 800d86a:	9b07      	ldr	r3, [sp, #28]
 800d86c:	3307      	adds	r3, #7
 800d86e:	4393      	bics	r3, r2
 800d870:	3308      	adds	r3, #8
 800d872:	9307      	str	r3, [sp, #28]
 800d874:	6963      	ldr	r3, [r4, #20]
 800d876:	9a04      	ldr	r2, [sp, #16]
 800d878:	189b      	adds	r3, r3, r2
 800d87a:	6163      	str	r3, [r4, #20]
 800d87c:	e764      	b.n	800d748 <_vfiprintf_r+0x70>
 800d87e:	4343      	muls	r3, r0
 800d880:	002e      	movs	r6, r5
 800d882:	2101      	movs	r1, #1
 800d884:	189b      	adds	r3, r3, r2
 800d886:	e7a6      	b.n	800d7d6 <_vfiprintf_r+0xfe>
 800d888:	2301      	movs	r3, #1
 800d88a:	425b      	negs	r3, r3
 800d88c:	e7d0      	b.n	800d830 <_vfiprintf_r+0x158>
 800d88e:	2300      	movs	r3, #0
 800d890:	200a      	movs	r0, #10
 800d892:	001a      	movs	r2, r3
 800d894:	3601      	adds	r6, #1
 800d896:	6063      	str	r3, [r4, #4]
 800d898:	7831      	ldrb	r1, [r6, #0]
 800d89a:	1c75      	adds	r5, r6, #1
 800d89c:	3930      	subs	r1, #48	; 0x30
 800d89e:	2909      	cmp	r1, #9
 800d8a0:	d903      	bls.n	800d8aa <_vfiprintf_r+0x1d2>
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d0c5      	beq.n	800d832 <_vfiprintf_r+0x15a>
 800d8a6:	9209      	str	r2, [sp, #36]	; 0x24
 800d8a8:	e7c3      	b.n	800d832 <_vfiprintf_r+0x15a>
 800d8aa:	4342      	muls	r2, r0
 800d8ac:	002e      	movs	r6, r5
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	1852      	adds	r2, r2, r1
 800d8b2:	e7f1      	b.n	800d898 <_vfiprintf_r+0x1c0>
 800d8b4:	aa07      	add	r2, sp, #28
 800d8b6:	9200      	str	r2, [sp, #0]
 800d8b8:	0021      	movs	r1, r4
 800d8ba:	003a      	movs	r2, r7
 800d8bc:	4b13      	ldr	r3, [pc, #76]	; (800d90c <_vfiprintf_r+0x234>)
 800d8be:	9803      	ldr	r0, [sp, #12]
 800d8c0:	f7fb fd82 	bl	80093c8 <_printf_float>
 800d8c4:	9004      	str	r0, [sp, #16]
 800d8c6:	9b04      	ldr	r3, [sp, #16]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	d1d3      	bne.n	800d874 <_vfiprintf_r+0x19c>
 800d8cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8ce:	07db      	lsls	r3, r3, #31
 800d8d0:	d405      	bmi.n	800d8de <_vfiprintf_r+0x206>
 800d8d2:	89bb      	ldrh	r3, [r7, #12]
 800d8d4:	059b      	lsls	r3, r3, #22
 800d8d6:	d402      	bmi.n	800d8de <_vfiprintf_r+0x206>
 800d8d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d8da:	f7fc fd3d 	bl	800a358 <__retarget_lock_release_recursive>
 800d8de:	89bb      	ldrh	r3, [r7, #12]
 800d8e0:	065b      	lsls	r3, r3, #25
 800d8e2:	d500      	bpl.n	800d8e6 <_vfiprintf_r+0x20e>
 800d8e4:	e71d      	b.n	800d722 <_vfiprintf_r+0x4a>
 800d8e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d8e8:	e71d      	b.n	800d726 <_vfiprintf_r+0x4e>
 800d8ea:	aa07      	add	r2, sp, #28
 800d8ec:	9200      	str	r2, [sp, #0]
 800d8ee:	0021      	movs	r1, r4
 800d8f0:	003a      	movs	r2, r7
 800d8f2:	4b06      	ldr	r3, [pc, #24]	; (800d90c <_vfiprintf_r+0x234>)
 800d8f4:	9803      	ldr	r0, [sp, #12]
 800d8f6:	f7fc f82d 	bl	8009954 <_printf_i>
 800d8fa:	e7e3      	b.n	800d8c4 <_vfiprintf_r+0x1ec>
 800d8fc:	0800e589 	.word	0x0800e589
 800d900:	0800e58f 	.word	0x0800e58f
 800d904:	0800e593 	.word	0x0800e593
 800d908:	080093c9 	.word	0x080093c9
 800d90c:	0800d6b5 	.word	0x0800d6b5

0800d910 <__swbuf_r>:
 800d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d912:	0006      	movs	r6, r0
 800d914:	000d      	movs	r5, r1
 800d916:	0014      	movs	r4, r2
 800d918:	2800      	cmp	r0, #0
 800d91a:	d004      	beq.n	800d926 <__swbuf_r+0x16>
 800d91c:	6a03      	ldr	r3, [r0, #32]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <__swbuf_r+0x16>
 800d922:	f7fc fbbf 	bl	800a0a4 <__sinit>
 800d926:	69a3      	ldr	r3, [r4, #24]
 800d928:	60a3      	str	r3, [r4, #8]
 800d92a:	89a3      	ldrh	r3, [r4, #12]
 800d92c:	071b      	lsls	r3, r3, #28
 800d92e:	d528      	bpl.n	800d982 <__swbuf_r+0x72>
 800d930:	6923      	ldr	r3, [r4, #16]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d025      	beq.n	800d982 <__swbuf_r+0x72>
 800d936:	6923      	ldr	r3, [r4, #16]
 800d938:	6820      	ldr	r0, [r4, #0]
 800d93a:	b2ef      	uxtb	r7, r5
 800d93c:	1ac0      	subs	r0, r0, r3
 800d93e:	6963      	ldr	r3, [r4, #20]
 800d940:	b2ed      	uxtb	r5, r5
 800d942:	4283      	cmp	r3, r0
 800d944:	dc05      	bgt.n	800d952 <__swbuf_r+0x42>
 800d946:	0021      	movs	r1, r4
 800d948:	0030      	movs	r0, r6
 800d94a:	f7ff fa17 	bl	800cd7c <_fflush_r>
 800d94e:	2800      	cmp	r0, #0
 800d950:	d11d      	bne.n	800d98e <__swbuf_r+0x7e>
 800d952:	68a3      	ldr	r3, [r4, #8]
 800d954:	3001      	adds	r0, #1
 800d956:	3b01      	subs	r3, #1
 800d958:	60a3      	str	r3, [r4, #8]
 800d95a:	6823      	ldr	r3, [r4, #0]
 800d95c:	1c5a      	adds	r2, r3, #1
 800d95e:	6022      	str	r2, [r4, #0]
 800d960:	701f      	strb	r7, [r3, #0]
 800d962:	6963      	ldr	r3, [r4, #20]
 800d964:	4283      	cmp	r3, r0
 800d966:	d004      	beq.n	800d972 <__swbuf_r+0x62>
 800d968:	89a3      	ldrh	r3, [r4, #12]
 800d96a:	07db      	lsls	r3, r3, #31
 800d96c:	d507      	bpl.n	800d97e <__swbuf_r+0x6e>
 800d96e:	2d0a      	cmp	r5, #10
 800d970:	d105      	bne.n	800d97e <__swbuf_r+0x6e>
 800d972:	0021      	movs	r1, r4
 800d974:	0030      	movs	r0, r6
 800d976:	f7ff fa01 	bl	800cd7c <_fflush_r>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d107      	bne.n	800d98e <__swbuf_r+0x7e>
 800d97e:	0028      	movs	r0, r5
 800d980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d982:	0021      	movs	r1, r4
 800d984:	0030      	movs	r0, r6
 800d986:	f000 f805 	bl	800d994 <__swsetup_r>
 800d98a:	2800      	cmp	r0, #0
 800d98c:	d0d3      	beq.n	800d936 <__swbuf_r+0x26>
 800d98e:	2501      	movs	r5, #1
 800d990:	426d      	negs	r5, r5
 800d992:	e7f4      	b.n	800d97e <__swbuf_r+0x6e>

0800d994 <__swsetup_r>:
 800d994:	4b30      	ldr	r3, [pc, #192]	; (800da58 <__swsetup_r+0xc4>)
 800d996:	b570      	push	{r4, r5, r6, lr}
 800d998:	0005      	movs	r5, r0
 800d99a:	6818      	ldr	r0, [r3, #0]
 800d99c:	000c      	movs	r4, r1
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d004      	beq.n	800d9ac <__swsetup_r+0x18>
 800d9a2:	6a03      	ldr	r3, [r0, #32]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d101      	bne.n	800d9ac <__swsetup_r+0x18>
 800d9a8:	f7fc fb7c 	bl	800a0a4 <__sinit>
 800d9ac:	230c      	movs	r3, #12
 800d9ae:	5ee2      	ldrsh	r2, [r4, r3]
 800d9b0:	b293      	uxth	r3, r2
 800d9b2:	0711      	lsls	r1, r2, #28
 800d9b4:	d423      	bmi.n	800d9fe <__swsetup_r+0x6a>
 800d9b6:	06d9      	lsls	r1, r3, #27
 800d9b8:	d407      	bmi.n	800d9ca <__swsetup_r+0x36>
 800d9ba:	2309      	movs	r3, #9
 800d9bc:	2001      	movs	r0, #1
 800d9be:	602b      	str	r3, [r5, #0]
 800d9c0:	3337      	adds	r3, #55	; 0x37
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	81a3      	strh	r3, [r4, #12]
 800d9c6:	4240      	negs	r0, r0
 800d9c8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ca:	075b      	lsls	r3, r3, #29
 800d9cc:	d513      	bpl.n	800d9f6 <__swsetup_r+0x62>
 800d9ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9d0:	2900      	cmp	r1, #0
 800d9d2:	d008      	beq.n	800d9e6 <__swsetup_r+0x52>
 800d9d4:	0023      	movs	r3, r4
 800d9d6:	3344      	adds	r3, #68	; 0x44
 800d9d8:	4299      	cmp	r1, r3
 800d9da:	d002      	beq.n	800d9e2 <__swsetup_r+0x4e>
 800d9dc:	0028      	movs	r0, r5
 800d9de:	f7fd fb69 	bl	800b0b4 <_free_r>
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	6363      	str	r3, [r4, #52]	; 0x34
 800d9e6:	2224      	movs	r2, #36	; 0x24
 800d9e8:	89a3      	ldrh	r3, [r4, #12]
 800d9ea:	4393      	bics	r3, r2
 800d9ec:	81a3      	strh	r3, [r4, #12]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	6063      	str	r3, [r4, #4]
 800d9f2:	6923      	ldr	r3, [r4, #16]
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	2308      	movs	r3, #8
 800d9f8:	89a2      	ldrh	r2, [r4, #12]
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	81a3      	strh	r3, [r4, #12]
 800d9fe:	6923      	ldr	r3, [r4, #16]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10b      	bne.n	800da1c <__swsetup_r+0x88>
 800da04:	21a0      	movs	r1, #160	; 0xa0
 800da06:	2280      	movs	r2, #128	; 0x80
 800da08:	89a3      	ldrh	r3, [r4, #12]
 800da0a:	0089      	lsls	r1, r1, #2
 800da0c:	0092      	lsls	r2, r2, #2
 800da0e:	400b      	ands	r3, r1
 800da10:	4293      	cmp	r3, r2
 800da12:	d003      	beq.n	800da1c <__swsetup_r+0x88>
 800da14:	0021      	movs	r1, r4
 800da16:	0028      	movs	r0, r5
 800da18:	f000 f892 	bl	800db40 <__smakebuf_r>
 800da1c:	220c      	movs	r2, #12
 800da1e:	5ea3      	ldrsh	r3, [r4, r2]
 800da20:	2001      	movs	r0, #1
 800da22:	001a      	movs	r2, r3
 800da24:	b299      	uxth	r1, r3
 800da26:	4002      	ands	r2, r0
 800da28:	4203      	tst	r3, r0
 800da2a:	d00f      	beq.n	800da4c <__swsetup_r+0xb8>
 800da2c:	2200      	movs	r2, #0
 800da2e:	60a2      	str	r2, [r4, #8]
 800da30:	6962      	ldr	r2, [r4, #20]
 800da32:	4252      	negs	r2, r2
 800da34:	61a2      	str	r2, [r4, #24]
 800da36:	2000      	movs	r0, #0
 800da38:	6922      	ldr	r2, [r4, #16]
 800da3a:	4282      	cmp	r2, r0
 800da3c:	d1c4      	bne.n	800d9c8 <__swsetup_r+0x34>
 800da3e:	0609      	lsls	r1, r1, #24
 800da40:	d5c2      	bpl.n	800d9c8 <__swsetup_r+0x34>
 800da42:	2240      	movs	r2, #64	; 0x40
 800da44:	4313      	orrs	r3, r2
 800da46:	81a3      	strh	r3, [r4, #12]
 800da48:	3801      	subs	r0, #1
 800da4a:	e7bd      	b.n	800d9c8 <__swsetup_r+0x34>
 800da4c:	0788      	lsls	r0, r1, #30
 800da4e:	d400      	bmi.n	800da52 <__swsetup_r+0xbe>
 800da50:	6962      	ldr	r2, [r4, #20]
 800da52:	60a2      	str	r2, [r4, #8]
 800da54:	e7ef      	b.n	800da36 <__swsetup_r+0xa2>
 800da56:	46c0      	nop			; (mov r8, r8)
 800da58:	2000007c 	.word	0x2000007c

0800da5c <_raise_r>:
 800da5c:	b570      	push	{r4, r5, r6, lr}
 800da5e:	0004      	movs	r4, r0
 800da60:	000d      	movs	r5, r1
 800da62:	291f      	cmp	r1, #31
 800da64:	d904      	bls.n	800da70 <_raise_r+0x14>
 800da66:	2316      	movs	r3, #22
 800da68:	6003      	str	r3, [r0, #0]
 800da6a:	2001      	movs	r0, #1
 800da6c:	4240      	negs	r0, r0
 800da6e:	bd70      	pop	{r4, r5, r6, pc}
 800da70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800da72:	2b00      	cmp	r3, #0
 800da74:	d004      	beq.n	800da80 <_raise_r+0x24>
 800da76:	008a      	lsls	r2, r1, #2
 800da78:	189b      	adds	r3, r3, r2
 800da7a:	681a      	ldr	r2, [r3, #0]
 800da7c:	2a00      	cmp	r2, #0
 800da7e:	d108      	bne.n	800da92 <_raise_r+0x36>
 800da80:	0020      	movs	r0, r4
 800da82:	f000 f831 	bl	800dae8 <_getpid_r>
 800da86:	002a      	movs	r2, r5
 800da88:	0001      	movs	r1, r0
 800da8a:	0020      	movs	r0, r4
 800da8c:	f000 f81a 	bl	800dac4 <_kill_r>
 800da90:	e7ed      	b.n	800da6e <_raise_r+0x12>
 800da92:	2000      	movs	r0, #0
 800da94:	2a01      	cmp	r2, #1
 800da96:	d0ea      	beq.n	800da6e <_raise_r+0x12>
 800da98:	1c51      	adds	r1, r2, #1
 800da9a:	d103      	bne.n	800daa4 <_raise_r+0x48>
 800da9c:	2316      	movs	r3, #22
 800da9e:	3001      	adds	r0, #1
 800daa0:	6023      	str	r3, [r4, #0]
 800daa2:	e7e4      	b.n	800da6e <_raise_r+0x12>
 800daa4:	2400      	movs	r4, #0
 800daa6:	0028      	movs	r0, r5
 800daa8:	601c      	str	r4, [r3, #0]
 800daaa:	4790      	blx	r2
 800daac:	0020      	movs	r0, r4
 800daae:	e7de      	b.n	800da6e <_raise_r+0x12>

0800dab0 <raise>:
 800dab0:	b510      	push	{r4, lr}
 800dab2:	4b03      	ldr	r3, [pc, #12]	; (800dac0 <raise+0x10>)
 800dab4:	0001      	movs	r1, r0
 800dab6:	6818      	ldr	r0, [r3, #0]
 800dab8:	f7ff ffd0 	bl	800da5c <_raise_r>
 800dabc:	bd10      	pop	{r4, pc}
 800dabe:	46c0      	nop			; (mov r8, r8)
 800dac0:	2000007c 	.word	0x2000007c

0800dac4 <_kill_r>:
 800dac4:	2300      	movs	r3, #0
 800dac6:	b570      	push	{r4, r5, r6, lr}
 800dac8:	4d06      	ldr	r5, [pc, #24]	; (800dae4 <_kill_r+0x20>)
 800daca:	0004      	movs	r4, r0
 800dacc:	0008      	movs	r0, r1
 800dace:	0011      	movs	r1, r2
 800dad0:	602b      	str	r3, [r5, #0]
 800dad2:	f7f6 f96a 	bl	8003daa <_kill>
 800dad6:	1c43      	adds	r3, r0, #1
 800dad8:	d103      	bne.n	800dae2 <_kill_r+0x1e>
 800dada:	682b      	ldr	r3, [r5, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d000      	beq.n	800dae2 <_kill_r+0x1e>
 800dae0:	6023      	str	r3, [r4, #0]
 800dae2:	bd70      	pop	{r4, r5, r6, pc}
 800dae4:	20000660 	.word	0x20000660

0800dae8 <_getpid_r>:
 800dae8:	b510      	push	{r4, lr}
 800daea:	f7f6 f958 	bl	8003d9e <_getpid>
 800daee:	bd10      	pop	{r4, pc}

0800daf0 <__swhatbuf_r>:
 800daf0:	b570      	push	{r4, r5, r6, lr}
 800daf2:	000e      	movs	r6, r1
 800daf4:	001d      	movs	r5, r3
 800daf6:	230e      	movs	r3, #14
 800daf8:	5ec9      	ldrsh	r1, [r1, r3]
 800dafa:	0014      	movs	r4, r2
 800dafc:	b096      	sub	sp, #88	; 0x58
 800dafe:	2900      	cmp	r1, #0
 800db00:	da0c      	bge.n	800db1c <__swhatbuf_r+0x2c>
 800db02:	89b2      	ldrh	r2, [r6, #12]
 800db04:	2380      	movs	r3, #128	; 0x80
 800db06:	0011      	movs	r1, r2
 800db08:	4019      	ands	r1, r3
 800db0a:	421a      	tst	r2, r3
 800db0c:	d013      	beq.n	800db36 <__swhatbuf_r+0x46>
 800db0e:	2100      	movs	r1, #0
 800db10:	3b40      	subs	r3, #64	; 0x40
 800db12:	2000      	movs	r0, #0
 800db14:	6029      	str	r1, [r5, #0]
 800db16:	6023      	str	r3, [r4, #0]
 800db18:	b016      	add	sp, #88	; 0x58
 800db1a:	bd70      	pop	{r4, r5, r6, pc}
 800db1c:	466a      	mov	r2, sp
 800db1e:	f000 f84d 	bl	800dbbc <_fstat_r>
 800db22:	2800      	cmp	r0, #0
 800db24:	dbed      	blt.n	800db02 <__swhatbuf_r+0x12>
 800db26:	23f0      	movs	r3, #240	; 0xf0
 800db28:	9901      	ldr	r1, [sp, #4]
 800db2a:	021b      	lsls	r3, r3, #8
 800db2c:	4019      	ands	r1, r3
 800db2e:	4b03      	ldr	r3, [pc, #12]	; (800db3c <__swhatbuf_r+0x4c>)
 800db30:	18c9      	adds	r1, r1, r3
 800db32:	424b      	negs	r3, r1
 800db34:	4159      	adcs	r1, r3
 800db36:	2380      	movs	r3, #128	; 0x80
 800db38:	00db      	lsls	r3, r3, #3
 800db3a:	e7ea      	b.n	800db12 <__swhatbuf_r+0x22>
 800db3c:	ffffe000 	.word	0xffffe000

0800db40 <__smakebuf_r>:
 800db40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db42:	2602      	movs	r6, #2
 800db44:	898b      	ldrh	r3, [r1, #12]
 800db46:	0005      	movs	r5, r0
 800db48:	000c      	movs	r4, r1
 800db4a:	4233      	tst	r3, r6
 800db4c:	d006      	beq.n	800db5c <__smakebuf_r+0x1c>
 800db4e:	0023      	movs	r3, r4
 800db50:	3347      	adds	r3, #71	; 0x47
 800db52:	6023      	str	r3, [r4, #0]
 800db54:	6123      	str	r3, [r4, #16]
 800db56:	2301      	movs	r3, #1
 800db58:	6163      	str	r3, [r4, #20]
 800db5a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800db5c:	466a      	mov	r2, sp
 800db5e:	ab01      	add	r3, sp, #4
 800db60:	f7ff ffc6 	bl	800daf0 <__swhatbuf_r>
 800db64:	9900      	ldr	r1, [sp, #0]
 800db66:	0007      	movs	r7, r0
 800db68:	0028      	movs	r0, r5
 800db6a:	f7fd fb19 	bl	800b1a0 <_malloc_r>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d108      	bne.n	800db84 <__smakebuf_r+0x44>
 800db72:	220c      	movs	r2, #12
 800db74:	5ea3      	ldrsh	r3, [r4, r2]
 800db76:	059a      	lsls	r2, r3, #22
 800db78:	d4ef      	bmi.n	800db5a <__smakebuf_r+0x1a>
 800db7a:	2203      	movs	r2, #3
 800db7c:	4393      	bics	r3, r2
 800db7e:	431e      	orrs	r6, r3
 800db80:	81a6      	strh	r6, [r4, #12]
 800db82:	e7e4      	b.n	800db4e <__smakebuf_r+0xe>
 800db84:	2380      	movs	r3, #128	; 0x80
 800db86:	89a2      	ldrh	r2, [r4, #12]
 800db88:	6020      	str	r0, [r4, #0]
 800db8a:	4313      	orrs	r3, r2
 800db8c:	81a3      	strh	r3, [r4, #12]
 800db8e:	9b00      	ldr	r3, [sp, #0]
 800db90:	6120      	str	r0, [r4, #16]
 800db92:	6163      	str	r3, [r4, #20]
 800db94:	9b01      	ldr	r3, [sp, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00c      	beq.n	800dbb4 <__smakebuf_r+0x74>
 800db9a:	0028      	movs	r0, r5
 800db9c:	230e      	movs	r3, #14
 800db9e:	5ee1      	ldrsh	r1, [r4, r3]
 800dba0:	f000 f81e 	bl	800dbe0 <_isatty_r>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d005      	beq.n	800dbb4 <__smakebuf_r+0x74>
 800dba8:	2303      	movs	r3, #3
 800dbaa:	89a2      	ldrh	r2, [r4, #12]
 800dbac:	439a      	bics	r2, r3
 800dbae:	3b02      	subs	r3, #2
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	81a3      	strh	r3, [r4, #12]
 800dbb4:	89a3      	ldrh	r3, [r4, #12]
 800dbb6:	433b      	orrs	r3, r7
 800dbb8:	81a3      	strh	r3, [r4, #12]
 800dbba:	e7ce      	b.n	800db5a <__smakebuf_r+0x1a>

0800dbbc <_fstat_r>:
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	b570      	push	{r4, r5, r6, lr}
 800dbc0:	4d06      	ldr	r5, [pc, #24]	; (800dbdc <_fstat_r+0x20>)
 800dbc2:	0004      	movs	r4, r0
 800dbc4:	0008      	movs	r0, r1
 800dbc6:	0011      	movs	r1, r2
 800dbc8:	602b      	str	r3, [r5, #0]
 800dbca:	f7f6 f94d 	bl	8003e68 <_fstat>
 800dbce:	1c43      	adds	r3, r0, #1
 800dbd0:	d103      	bne.n	800dbda <_fstat_r+0x1e>
 800dbd2:	682b      	ldr	r3, [r5, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d000      	beq.n	800dbda <_fstat_r+0x1e>
 800dbd8:	6023      	str	r3, [r4, #0]
 800dbda:	bd70      	pop	{r4, r5, r6, pc}
 800dbdc:	20000660 	.word	0x20000660

0800dbe0 <_isatty_r>:
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	b570      	push	{r4, r5, r6, lr}
 800dbe4:	4d06      	ldr	r5, [pc, #24]	; (800dc00 <_isatty_r+0x20>)
 800dbe6:	0004      	movs	r4, r0
 800dbe8:	0008      	movs	r0, r1
 800dbea:	602b      	str	r3, [r5, #0]
 800dbec:	f7f6 f94a 	bl	8003e84 <_isatty>
 800dbf0:	1c43      	adds	r3, r0, #1
 800dbf2:	d103      	bne.n	800dbfc <_isatty_r+0x1c>
 800dbf4:	682b      	ldr	r3, [r5, #0]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d000      	beq.n	800dbfc <_isatty_r+0x1c>
 800dbfa:	6023      	str	r3, [r4, #0]
 800dbfc:	bd70      	pop	{r4, r5, r6, pc}
 800dbfe:	46c0      	nop			; (mov r8, r8)
 800dc00:	20000660 	.word	0x20000660

0800dc04 <_init>:
 800dc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc06:	46c0      	nop			; (mov r8, r8)
 800dc08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc0a:	bc08      	pop	{r3}
 800dc0c:	469e      	mov	lr, r3
 800dc0e:	4770      	bx	lr

0800dc10 <_fini>:
 800dc10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc12:	46c0      	nop			; (mov r8, r8)
 800dc14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc16:	bc08      	pop	{r3}
 800dc18:	469e      	mov	lr, r3
 800dc1a:	4770      	bx	lr
