
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005748  08006db4  08006db4  00016db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4fc  0800c4fc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c4fc  0800c4fc  0001c4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c504  0800c504  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c504  0800c504  0001c504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c508  0800c508  0001c508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800c50c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  2000005c  0800c568  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000624  0800c568  00020624  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007f9b  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c37  00000000  00000000  00028062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  00029ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000663  00000000  00000000  0002a520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011120  00000000  00000000  0002ab83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d099  00000000  00000000  0003bca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000625c9  00000000  00000000  00048d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002664  00000000  00000000  000ab308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000ad96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d9c 	.word	0x08006d9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006d9c 	.word	0x08006d9c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0008      	movs	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 fc73 	bl	8000cfc <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fbff 	bl	8000c24 <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fc65 	bl	8000cfc <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fc5b 	bl	8000cfc <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fc0b 	bl	8000c70 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fc01 	bl	8000c70 <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_uldivmod>:
 800047c:	2b00      	cmp	r3, #0
 800047e:	d111      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000480:	2a00      	cmp	r2, #0
 8000482:	d10f      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000484:	2900      	cmp	r1, #0
 8000486:	d100      	bne.n	800048a <__aeabi_uldivmod+0xe>
 8000488:	2800      	cmp	r0, #0
 800048a:	d002      	beq.n	8000492 <__aeabi_uldivmod+0x16>
 800048c:	2100      	movs	r1, #0
 800048e:	43c9      	mvns	r1, r1
 8000490:	0008      	movs	r0, r1
 8000492:	b407      	push	{r0, r1, r2}
 8000494:	4802      	ldr	r0, [pc, #8]	; (80004a0 <__aeabi_uldivmod+0x24>)
 8000496:	a102      	add	r1, pc, #8	; (adr r1, 80004a0 <__aeabi_uldivmod+0x24>)
 8000498:	1840      	adds	r0, r0, r1
 800049a:	9002      	str	r0, [sp, #8]
 800049c:	bd03      	pop	{r0, r1, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	ffffff65 	.word	0xffffff65
 80004a4:	b403      	push	{r0, r1}
 80004a6:	4668      	mov	r0, sp
 80004a8:	b501      	push	{r0, lr}
 80004aa:	9802      	ldr	r0, [sp, #8]
 80004ac:	f000 f834 	bl	8000518 <__udivmoddi4>
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	469e      	mov	lr, r3
 80004b4:	b002      	add	sp, #8
 80004b6:	bc0c      	pop	{r2, r3}
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_lmul>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	46ce      	mov	lr, r9
 80004c0:	4699      	mov	r9, r3
 80004c2:	0c03      	lsrs	r3, r0, #16
 80004c4:	469c      	mov	ip, r3
 80004c6:	0413      	lsls	r3, r2, #16
 80004c8:	4647      	mov	r7, r8
 80004ca:	0c1b      	lsrs	r3, r3, #16
 80004cc:	001d      	movs	r5, r3
 80004ce:	000e      	movs	r6, r1
 80004d0:	4661      	mov	r1, ip
 80004d2:	0404      	lsls	r4, r0, #16
 80004d4:	0c24      	lsrs	r4, r4, #16
 80004d6:	b580      	push	{r7, lr}
 80004d8:	0007      	movs	r7, r0
 80004da:	0c10      	lsrs	r0, r2, #16
 80004dc:	434b      	muls	r3, r1
 80004de:	4365      	muls	r5, r4
 80004e0:	4341      	muls	r1, r0
 80004e2:	4360      	muls	r0, r4
 80004e4:	0c2c      	lsrs	r4, r5, #16
 80004e6:	18c0      	adds	r0, r0, r3
 80004e8:	1820      	adds	r0, r4, r0
 80004ea:	468c      	mov	ip, r1
 80004ec:	4283      	cmp	r3, r0
 80004ee:	d903      	bls.n	80004f8 <__aeabi_lmul+0x3c>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	025b      	lsls	r3, r3, #9
 80004f4:	4698      	mov	r8, r3
 80004f6:	44c4      	add	ip, r8
 80004f8:	4649      	mov	r1, r9
 80004fa:	4379      	muls	r1, r7
 80004fc:	4356      	muls	r6, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	042d      	lsls	r5, r5, #16
 8000502:	0c2d      	lsrs	r5, r5, #16
 8000504:	1989      	adds	r1, r1, r6
 8000506:	4463      	add	r3, ip
 8000508:	0400      	lsls	r0, r0, #16
 800050a:	1940      	adds	r0, r0, r5
 800050c:	18c9      	adds	r1, r1, r3
 800050e:	bcc0      	pop	{r6, r7}
 8000510:	46b9      	mov	r9, r7
 8000512:	46b0      	mov	r8, r6
 8000514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__udivmoddi4>:
 8000518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051a:	4657      	mov	r7, sl
 800051c:	464e      	mov	r6, r9
 800051e:	4645      	mov	r5, r8
 8000520:	46de      	mov	lr, fp
 8000522:	b5e0      	push	{r5, r6, r7, lr}
 8000524:	0004      	movs	r4, r0
 8000526:	000d      	movs	r5, r1
 8000528:	4692      	mov	sl, r2
 800052a:	4699      	mov	r9, r3
 800052c:	b083      	sub	sp, #12
 800052e:	428b      	cmp	r3, r1
 8000530:	d830      	bhi.n	8000594 <__udivmoddi4+0x7c>
 8000532:	d02d      	beq.n	8000590 <__udivmoddi4+0x78>
 8000534:	4649      	mov	r1, r9
 8000536:	4650      	mov	r0, sl
 8000538:	f001 fb7c 	bl	8001c34 <__clzdi2>
 800053c:	0029      	movs	r1, r5
 800053e:	0006      	movs	r6, r0
 8000540:	0020      	movs	r0, r4
 8000542:	f001 fb77 	bl	8001c34 <__clzdi2>
 8000546:	1a33      	subs	r3, r6, r0
 8000548:	4698      	mov	r8, r3
 800054a:	3b20      	subs	r3, #32
 800054c:	d434      	bmi.n	80005b8 <__udivmoddi4+0xa0>
 800054e:	469b      	mov	fp, r3
 8000550:	4653      	mov	r3, sl
 8000552:	465a      	mov	r2, fp
 8000554:	4093      	lsls	r3, r2
 8000556:	4642      	mov	r2, r8
 8000558:	001f      	movs	r7, r3
 800055a:	4653      	mov	r3, sl
 800055c:	4093      	lsls	r3, r2
 800055e:	001e      	movs	r6, r3
 8000560:	42af      	cmp	r7, r5
 8000562:	d83b      	bhi.n	80005dc <__udivmoddi4+0xc4>
 8000564:	42af      	cmp	r7, r5
 8000566:	d100      	bne.n	800056a <__udivmoddi4+0x52>
 8000568:	e079      	b.n	800065e <__udivmoddi4+0x146>
 800056a:	465b      	mov	r3, fp
 800056c:	1ba4      	subs	r4, r4, r6
 800056e:	41bd      	sbcs	r5, r7
 8000570:	2b00      	cmp	r3, #0
 8000572:	da00      	bge.n	8000576 <__udivmoddi4+0x5e>
 8000574:	e076      	b.n	8000664 <__udivmoddi4+0x14c>
 8000576:	2200      	movs	r2, #0
 8000578:	2300      	movs	r3, #0
 800057a:	9200      	str	r2, [sp, #0]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	465a      	mov	r2, fp
 8000582:	4093      	lsls	r3, r2
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2301      	movs	r3, #1
 8000588:	4642      	mov	r2, r8
 800058a:	4093      	lsls	r3, r2
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	e029      	b.n	80005e4 <__udivmoddi4+0xcc>
 8000590:	4282      	cmp	r2, r0
 8000592:	d9cf      	bls.n	8000534 <__udivmoddi4+0x1c>
 8000594:	2200      	movs	r2, #0
 8000596:	2300      	movs	r3, #0
 8000598:	9200      	str	r2, [sp, #0]
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <__udivmoddi4+0x8e>
 80005a2:	601c      	str	r4, [r3, #0]
 80005a4:	605d      	str	r5, [r3, #4]
 80005a6:	9800      	ldr	r0, [sp, #0]
 80005a8:	9901      	ldr	r1, [sp, #4]
 80005aa:	b003      	add	sp, #12
 80005ac:	bcf0      	pop	{r4, r5, r6, r7}
 80005ae:	46bb      	mov	fp, r7
 80005b0:	46b2      	mov	sl, r6
 80005b2:	46a9      	mov	r9, r5
 80005b4:	46a0      	mov	r8, r4
 80005b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b8:	4642      	mov	r2, r8
 80005ba:	469b      	mov	fp, r3
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	4652      	mov	r2, sl
 80005c2:	40da      	lsrs	r2, r3
 80005c4:	4641      	mov	r1, r8
 80005c6:	0013      	movs	r3, r2
 80005c8:	464a      	mov	r2, r9
 80005ca:	408a      	lsls	r2, r1
 80005cc:	0017      	movs	r7, r2
 80005ce:	4642      	mov	r2, r8
 80005d0:	431f      	orrs	r7, r3
 80005d2:	4653      	mov	r3, sl
 80005d4:	4093      	lsls	r3, r2
 80005d6:	001e      	movs	r6, r3
 80005d8:	42af      	cmp	r7, r5
 80005da:	d9c3      	bls.n	8000564 <__udivmoddi4+0x4c>
 80005dc:	2200      	movs	r2, #0
 80005de:	2300      	movs	r3, #0
 80005e0:	9200      	str	r2, [sp, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	4643      	mov	r3, r8
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0d8      	beq.n	800059c <__udivmoddi4+0x84>
 80005ea:	07fb      	lsls	r3, r7, #31
 80005ec:	0872      	lsrs	r2, r6, #1
 80005ee:	431a      	orrs	r2, r3
 80005f0:	4646      	mov	r6, r8
 80005f2:	087b      	lsrs	r3, r7, #1
 80005f4:	e00e      	b.n	8000614 <__udivmoddi4+0xfc>
 80005f6:	42ab      	cmp	r3, r5
 80005f8:	d101      	bne.n	80005fe <__udivmoddi4+0xe6>
 80005fa:	42a2      	cmp	r2, r4
 80005fc:	d80c      	bhi.n	8000618 <__udivmoddi4+0x100>
 80005fe:	1aa4      	subs	r4, r4, r2
 8000600:	419d      	sbcs	r5, r3
 8000602:	2001      	movs	r0, #1
 8000604:	1924      	adds	r4, r4, r4
 8000606:	416d      	adcs	r5, r5
 8000608:	2100      	movs	r1, #0
 800060a:	3e01      	subs	r6, #1
 800060c:	1824      	adds	r4, r4, r0
 800060e:	414d      	adcs	r5, r1
 8000610:	2e00      	cmp	r6, #0
 8000612:	d006      	beq.n	8000622 <__udivmoddi4+0x10a>
 8000614:	42ab      	cmp	r3, r5
 8000616:	d9ee      	bls.n	80005f6 <__udivmoddi4+0xde>
 8000618:	3e01      	subs	r6, #1
 800061a:	1924      	adds	r4, r4, r4
 800061c:	416d      	adcs	r5, r5
 800061e:	2e00      	cmp	r6, #0
 8000620:	d1f8      	bne.n	8000614 <__udivmoddi4+0xfc>
 8000622:	9800      	ldr	r0, [sp, #0]
 8000624:	9901      	ldr	r1, [sp, #4]
 8000626:	465b      	mov	r3, fp
 8000628:	1900      	adds	r0, r0, r4
 800062a:	4169      	adcs	r1, r5
 800062c:	2b00      	cmp	r3, #0
 800062e:	db24      	blt.n	800067a <__udivmoddi4+0x162>
 8000630:	002b      	movs	r3, r5
 8000632:	465a      	mov	r2, fp
 8000634:	4644      	mov	r4, r8
 8000636:	40d3      	lsrs	r3, r2
 8000638:	002a      	movs	r2, r5
 800063a:	40e2      	lsrs	r2, r4
 800063c:	001c      	movs	r4, r3
 800063e:	465b      	mov	r3, fp
 8000640:	0015      	movs	r5, r2
 8000642:	2b00      	cmp	r3, #0
 8000644:	db2a      	blt.n	800069c <__udivmoddi4+0x184>
 8000646:	0026      	movs	r6, r4
 8000648:	409e      	lsls	r6, r3
 800064a:	0033      	movs	r3, r6
 800064c:	0026      	movs	r6, r4
 800064e:	4647      	mov	r7, r8
 8000650:	40be      	lsls	r6, r7
 8000652:	0032      	movs	r2, r6
 8000654:	1a80      	subs	r0, r0, r2
 8000656:	4199      	sbcs	r1, r3
 8000658:	9000      	str	r0, [sp, #0]
 800065a:	9101      	str	r1, [sp, #4]
 800065c:	e79e      	b.n	800059c <__udivmoddi4+0x84>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d8bc      	bhi.n	80005dc <__udivmoddi4+0xc4>
 8000662:	e782      	b.n	800056a <__udivmoddi4+0x52>
 8000664:	4642      	mov	r2, r8
 8000666:	2320      	movs	r3, #32
 8000668:	2100      	movs	r1, #0
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	2200      	movs	r2, #0
 800066e:	9100      	str	r1, [sp, #0]
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	2201      	movs	r2, #1
 8000674:	40da      	lsrs	r2, r3
 8000676:	9201      	str	r2, [sp, #4]
 8000678:	e785      	b.n	8000586 <__udivmoddi4+0x6e>
 800067a:	4642      	mov	r2, r8
 800067c:	2320      	movs	r3, #32
 800067e:	1a9b      	subs	r3, r3, r2
 8000680:	002a      	movs	r2, r5
 8000682:	4646      	mov	r6, r8
 8000684:	409a      	lsls	r2, r3
 8000686:	0023      	movs	r3, r4
 8000688:	40f3      	lsrs	r3, r6
 800068a:	4644      	mov	r4, r8
 800068c:	4313      	orrs	r3, r2
 800068e:	002a      	movs	r2, r5
 8000690:	40e2      	lsrs	r2, r4
 8000692:	001c      	movs	r4, r3
 8000694:	465b      	mov	r3, fp
 8000696:	0015      	movs	r5, r2
 8000698:	2b00      	cmp	r3, #0
 800069a:	dad4      	bge.n	8000646 <__udivmoddi4+0x12e>
 800069c:	4642      	mov	r2, r8
 800069e:	002f      	movs	r7, r5
 80006a0:	2320      	movs	r3, #32
 80006a2:	0026      	movs	r6, r4
 80006a4:	4097      	lsls	r7, r2
 80006a6:	1a9b      	subs	r3, r3, r2
 80006a8:	40de      	lsrs	r6, r3
 80006aa:	003b      	movs	r3, r7
 80006ac:	4333      	orrs	r3, r6
 80006ae:	e7cd      	b.n	800064c <__udivmoddi4+0x134>

080006b0 <__aeabi_fadd>:
 80006b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b2:	4647      	mov	r7, r8
 80006b4:	46ce      	mov	lr, r9
 80006b6:	024a      	lsls	r2, r1, #9
 80006b8:	0243      	lsls	r3, r0, #9
 80006ba:	0045      	lsls	r5, r0, #1
 80006bc:	0fc4      	lsrs	r4, r0, #31
 80006be:	0a50      	lsrs	r0, r2, #9
 80006c0:	4680      	mov	r8, r0
 80006c2:	0048      	lsls	r0, r1, #1
 80006c4:	0a5b      	lsrs	r3, r3, #9
 80006c6:	0e00      	lsrs	r0, r0, #24
 80006c8:	0992      	lsrs	r2, r2, #6
 80006ca:	4694      	mov	ip, r2
 80006cc:	b580      	push	{r7, lr}
 80006ce:	001e      	movs	r6, r3
 80006d0:	4681      	mov	r9, r0
 80006d2:	0002      	movs	r2, r0
 80006d4:	0e2d      	lsrs	r5, r5, #24
 80006d6:	00df      	lsls	r7, r3, #3
 80006d8:	0fc9      	lsrs	r1, r1, #31
 80006da:	428c      	cmp	r4, r1
 80006dc:	d024      	beq.n	8000728 <__aeabi_fadd+0x78>
 80006de:	1a28      	subs	r0, r5, r0
 80006e0:	2800      	cmp	r0, #0
 80006e2:	dd0e      	ble.n	8000702 <__aeabi_fadd+0x52>
 80006e4:	2a00      	cmp	r2, #0
 80006e6:	d13e      	bne.n	8000766 <__aeabi_fadd+0xb6>
 80006e8:	4662      	mov	r2, ip
 80006ea:	2a00      	cmp	r2, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_fadd+0x40>
 80006ee:	e0fd      	b.n	80008ec <__aeabi_fadd+0x23c>
 80006f0:	1e42      	subs	r2, r0, #1
 80006f2:	2801      	cmp	r0, #1
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fadd+0x48>
 80006f6:	e137      	b.n	8000968 <__aeabi_fadd+0x2b8>
 80006f8:	28ff      	cmp	r0, #255	; 0xff
 80006fa:	d100      	bne.n	80006fe <__aeabi_fadd+0x4e>
 80006fc:	e0a9      	b.n	8000852 <__aeabi_fadd+0x1a2>
 80006fe:	0010      	movs	r0, r2
 8000700:	e039      	b.n	8000776 <__aeabi_fadd+0xc6>
 8000702:	2800      	cmp	r0, #0
 8000704:	d063      	beq.n	80007ce <__aeabi_fadd+0x11e>
 8000706:	464b      	mov	r3, r9
 8000708:	1b52      	subs	r2, r2, r5
 800070a:	2d00      	cmp	r5, #0
 800070c:	d000      	beq.n	8000710 <__aeabi_fadd+0x60>
 800070e:	e0e0      	b.n	80008d2 <__aeabi_fadd+0x222>
 8000710:	2f00      	cmp	r7, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x66>
 8000714:	e0ce      	b.n	80008b4 <__aeabi_fadd+0x204>
 8000716:	1e53      	subs	r3, r2, #1
 8000718:	2a01      	cmp	r2, #1
 800071a:	d100      	bne.n	800071e <__aeabi_fadd+0x6e>
 800071c:	e155      	b.n	80009ca <__aeabi_fadd+0x31a>
 800071e:	2aff      	cmp	r2, #255	; 0xff
 8000720:	d100      	bne.n	8000724 <__aeabi_fadd+0x74>
 8000722:	e094      	b.n	800084e <__aeabi_fadd+0x19e>
 8000724:	001a      	movs	r2, r3
 8000726:	e0d9      	b.n	80008dc <__aeabi_fadd+0x22c>
 8000728:	1a2a      	subs	r2, r5, r0
 800072a:	2a00      	cmp	r2, #0
 800072c:	dc00      	bgt.n	8000730 <__aeabi_fadd+0x80>
 800072e:	e099      	b.n	8000864 <__aeabi_fadd+0x1b4>
 8000730:	2800      	cmp	r0, #0
 8000732:	d062      	beq.n	80007fa <__aeabi_fadd+0x14a>
 8000734:	2dff      	cmp	r5, #255	; 0xff
 8000736:	d100      	bne.n	800073a <__aeabi_fadd+0x8a>
 8000738:	e08b      	b.n	8000852 <__aeabi_fadd+0x1a2>
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	4661      	mov	r1, ip
 800073e:	04db      	lsls	r3, r3, #19
 8000740:	4319      	orrs	r1, r3
 8000742:	468c      	mov	ip, r1
 8000744:	2a1b      	cmp	r2, #27
 8000746:	dc00      	bgt.n	800074a <__aeabi_fadd+0x9a>
 8000748:	e0d2      	b.n	80008f0 <__aeabi_fadd+0x240>
 800074a:	2301      	movs	r3, #1
 800074c:	19db      	adds	r3, r3, r7
 800074e:	015a      	lsls	r2, r3, #5
 8000750:	d56a      	bpl.n	8000828 <__aeabi_fadd+0x178>
 8000752:	3501      	adds	r5, #1
 8000754:	2dff      	cmp	r5, #255	; 0xff
 8000756:	d05b      	beq.n	8000810 <__aeabi_fadd+0x160>
 8000758:	2201      	movs	r2, #1
 800075a:	49a3      	ldr	r1, [pc, #652]	; (80009e8 <__aeabi_fadd+0x338>)
 800075c:	401a      	ands	r2, r3
 800075e:	085b      	lsrs	r3, r3, #1
 8000760:	400b      	ands	r3, r1
 8000762:	4313      	orrs	r3, r2
 8000764:	e01c      	b.n	80007a0 <__aeabi_fadd+0xf0>
 8000766:	2dff      	cmp	r5, #255	; 0xff
 8000768:	d100      	bne.n	800076c <__aeabi_fadd+0xbc>
 800076a:	e072      	b.n	8000852 <__aeabi_fadd+0x1a2>
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	4662      	mov	r2, ip
 8000770:	04db      	lsls	r3, r3, #19
 8000772:	431a      	orrs	r2, r3
 8000774:	4694      	mov	ip, r2
 8000776:	281b      	cmp	r0, #27
 8000778:	dc00      	bgt.n	800077c <__aeabi_fadd+0xcc>
 800077a:	e090      	b.n	800089e <__aeabi_fadd+0x1ee>
 800077c:	2301      	movs	r3, #1
 800077e:	1afb      	subs	r3, r7, r3
 8000780:	015a      	lsls	r2, r3, #5
 8000782:	d551      	bpl.n	8000828 <__aeabi_fadd+0x178>
 8000784:	019b      	lsls	r3, r3, #6
 8000786:	099e      	lsrs	r6, r3, #6
 8000788:	0030      	movs	r0, r6
 800078a:	f001 fa35 	bl	8001bf8 <__clzsi2>
 800078e:	0033      	movs	r3, r6
 8000790:	3805      	subs	r0, #5
 8000792:	4083      	lsls	r3, r0
 8000794:	4285      	cmp	r5, r0
 8000796:	dc00      	bgt.n	800079a <__aeabi_fadd+0xea>
 8000798:	e075      	b.n	8000886 <__aeabi_fadd+0x1d6>
 800079a:	4a94      	ldr	r2, [pc, #592]	; (80009ec <__aeabi_fadd+0x33c>)
 800079c:	1a2d      	subs	r5, r5, r0
 800079e:	4013      	ands	r3, r2
 80007a0:	075a      	lsls	r2, r3, #29
 80007a2:	d004      	beq.n	80007ae <__aeabi_fadd+0xfe>
 80007a4:	220f      	movs	r2, #15
 80007a6:	401a      	ands	r2, r3
 80007a8:	2a04      	cmp	r2, #4
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0xfe>
 80007ac:	3304      	adds	r3, #4
 80007ae:	015a      	lsls	r2, r3, #5
 80007b0:	d53c      	bpl.n	800082c <__aeabi_fadd+0x17c>
 80007b2:	1c68      	adds	r0, r5, #1
 80007b4:	2dfe      	cmp	r5, #254	; 0xfe
 80007b6:	d02b      	beq.n	8000810 <__aeabi_fadd+0x160>
 80007b8:	019b      	lsls	r3, r3, #6
 80007ba:	0a5e      	lsrs	r6, r3, #9
 80007bc:	b2c0      	uxtb	r0, r0
 80007be:	05c0      	lsls	r0, r0, #23
 80007c0:	4330      	orrs	r0, r6
 80007c2:	07e4      	lsls	r4, r4, #31
 80007c4:	4320      	orrs	r0, r4
 80007c6:	bcc0      	pop	{r6, r7}
 80007c8:	46b9      	mov	r9, r7
 80007ca:	46b0      	mov	r8, r6
 80007cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ce:	20fe      	movs	r0, #254	; 0xfe
 80007d0:	1c6a      	adds	r2, r5, #1
 80007d2:	4210      	tst	r0, r2
 80007d4:	d172      	bne.n	80008bc <__aeabi_fadd+0x20c>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d000      	beq.n	80007dc <__aeabi_fadd+0x12c>
 80007da:	e0ae      	b.n	800093a <__aeabi_fadd+0x28a>
 80007dc:	2f00      	cmp	r7, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0x132>
 80007e0:	e0ec      	b.n	80009bc <__aeabi_fadd+0x30c>
 80007e2:	4663      	mov	r3, ip
 80007e4:	2000      	movs	r0, #0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0e9      	beq.n	80007be <__aeabi_fadd+0x10e>
 80007ea:	1afb      	subs	r3, r7, r3
 80007ec:	015a      	lsls	r2, r3, #5
 80007ee:	d400      	bmi.n	80007f2 <__aeabi_fadd+0x142>
 80007f0:	e0f3      	b.n	80009da <__aeabi_fadd+0x32a>
 80007f2:	4663      	mov	r3, ip
 80007f4:	000c      	movs	r4, r1
 80007f6:	1bdb      	subs	r3, r3, r7
 80007f8:	e7d2      	b.n	80007a0 <__aeabi_fadd+0xf0>
 80007fa:	4661      	mov	r1, ip
 80007fc:	2900      	cmp	r1, #0
 80007fe:	d05b      	beq.n	80008b8 <__aeabi_fadd+0x208>
 8000800:	1e51      	subs	r1, r2, #1
 8000802:	2a01      	cmp	r2, #1
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x158>
 8000806:	e0a7      	b.n	8000958 <__aeabi_fadd+0x2a8>
 8000808:	2aff      	cmp	r2, #255	; 0xff
 800080a:	d022      	beq.n	8000852 <__aeabi_fadd+0x1a2>
 800080c:	000a      	movs	r2, r1
 800080e:	e799      	b.n	8000744 <__aeabi_fadd+0x94>
 8000810:	20ff      	movs	r0, #255	; 0xff
 8000812:	2600      	movs	r6, #0
 8000814:	e7d3      	b.n	80007be <__aeabi_fadd+0x10e>
 8000816:	21fe      	movs	r1, #254	; 0xfe
 8000818:	1c6a      	adds	r2, r5, #1
 800081a:	4211      	tst	r1, r2
 800081c:	d073      	beq.n	8000906 <__aeabi_fadd+0x256>
 800081e:	2aff      	cmp	r2, #255	; 0xff
 8000820:	d0f6      	beq.n	8000810 <__aeabi_fadd+0x160>
 8000822:	0015      	movs	r5, r2
 8000824:	4467      	add	r7, ip
 8000826:	087b      	lsrs	r3, r7, #1
 8000828:	075a      	lsls	r2, r3, #29
 800082a:	d1bb      	bne.n	80007a4 <__aeabi_fadd+0xf4>
 800082c:	08db      	lsrs	r3, r3, #3
 800082e:	2dff      	cmp	r5, #255	; 0xff
 8000830:	d00f      	beq.n	8000852 <__aeabi_fadd+0x1a2>
 8000832:	025b      	lsls	r3, r3, #9
 8000834:	0a5e      	lsrs	r6, r3, #9
 8000836:	b2e8      	uxtb	r0, r5
 8000838:	e7c1      	b.n	80007be <__aeabi_fadd+0x10e>
 800083a:	4662      	mov	r2, ip
 800083c:	2a00      	cmp	r2, #0
 800083e:	d008      	beq.n	8000852 <__aeabi_fadd+0x1a2>
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	03d2      	lsls	r2, r2, #15
 8000844:	4213      	tst	r3, r2
 8000846:	d004      	beq.n	8000852 <__aeabi_fadd+0x1a2>
 8000848:	4640      	mov	r0, r8
 800084a:	4210      	tst	r0, r2
 800084c:	d101      	bne.n	8000852 <__aeabi_fadd+0x1a2>
 800084e:	000c      	movs	r4, r1
 8000850:	4643      	mov	r3, r8
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0dc      	beq.n	8000810 <__aeabi_fadd+0x160>
 8000856:	2680      	movs	r6, #128	; 0x80
 8000858:	03f6      	lsls	r6, r6, #15
 800085a:	431e      	orrs	r6, r3
 800085c:	0276      	lsls	r6, r6, #9
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	0a76      	lsrs	r6, r6, #9
 8000862:	e7ac      	b.n	80007be <__aeabi_fadd+0x10e>
 8000864:	2a00      	cmp	r2, #0
 8000866:	d0d6      	beq.n	8000816 <__aeabi_fadd+0x166>
 8000868:	1b42      	subs	r2, r0, r5
 800086a:	2d00      	cmp	r5, #0
 800086c:	d05c      	beq.n	8000928 <__aeabi_fadd+0x278>
 800086e:	28ff      	cmp	r0, #255	; 0xff
 8000870:	d0ee      	beq.n	8000850 <__aeabi_fadd+0x1a0>
 8000872:	2380      	movs	r3, #128	; 0x80
 8000874:	04db      	lsls	r3, r3, #19
 8000876:	431f      	orrs	r7, r3
 8000878:	2a1b      	cmp	r2, #27
 800087a:	dc00      	bgt.n	800087e <__aeabi_fadd+0x1ce>
 800087c:	e082      	b.n	8000984 <__aeabi_fadd+0x2d4>
 800087e:	2301      	movs	r3, #1
 8000880:	464d      	mov	r5, r9
 8000882:	4463      	add	r3, ip
 8000884:	e763      	b.n	800074e <__aeabi_fadd+0x9e>
 8000886:	2220      	movs	r2, #32
 8000888:	1b40      	subs	r0, r0, r5
 800088a:	3001      	adds	r0, #1
 800088c:	1a12      	subs	r2, r2, r0
 800088e:	0019      	movs	r1, r3
 8000890:	4093      	lsls	r3, r2
 8000892:	40c1      	lsrs	r1, r0
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	4193      	sbcs	r3, r2
 8000898:	2500      	movs	r5, #0
 800089a:	430b      	orrs	r3, r1
 800089c:	e780      	b.n	80007a0 <__aeabi_fadd+0xf0>
 800089e:	2320      	movs	r3, #32
 80008a0:	4661      	mov	r1, ip
 80008a2:	1a1b      	subs	r3, r3, r0
 80008a4:	4099      	lsls	r1, r3
 80008a6:	4662      	mov	r2, ip
 80008a8:	000b      	movs	r3, r1
 80008aa:	40c2      	lsrs	r2, r0
 80008ac:	1e59      	subs	r1, r3, #1
 80008ae:	418b      	sbcs	r3, r1
 80008b0:	4313      	orrs	r3, r2
 80008b2:	e764      	b.n	800077e <__aeabi_fadd+0xce>
 80008b4:	000c      	movs	r4, r1
 80008b6:	4643      	mov	r3, r8
 80008b8:	0015      	movs	r5, r2
 80008ba:	e7b8      	b.n	800082e <__aeabi_fadd+0x17e>
 80008bc:	4663      	mov	r3, ip
 80008be:	1afe      	subs	r6, r7, r3
 80008c0:	0173      	lsls	r3, r6, #5
 80008c2:	d445      	bmi.n	8000950 <__aeabi_fadd+0x2a0>
 80008c4:	2e00      	cmp	r6, #0
 80008c6:	d000      	beq.n	80008ca <__aeabi_fadd+0x21a>
 80008c8:	e75e      	b.n	8000788 <__aeabi_fadd+0xd8>
 80008ca:	2400      	movs	r4, #0
 80008cc:	2000      	movs	r0, #0
 80008ce:	2600      	movs	r6, #0
 80008d0:	e775      	b.n	80007be <__aeabi_fadd+0x10e>
 80008d2:	2bff      	cmp	r3, #255	; 0xff
 80008d4:	d0bb      	beq.n	800084e <__aeabi_fadd+0x19e>
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	04db      	lsls	r3, r3, #19
 80008da:	431f      	orrs	r7, r3
 80008dc:	2a1b      	cmp	r2, #27
 80008de:	dd47      	ble.n	8000970 <__aeabi_fadd+0x2c0>
 80008e0:	2301      	movs	r3, #1
 80008e2:	4662      	mov	r2, ip
 80008e4:	000c      	movs	r4, r1
 80008e6:	464d      	mov	r5, r9
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	e749      	b.n	8000780 <__aeabi_fadd+0xd0>
 80008ec:	0005      	movs	r5, r0
 80008ee:	e79e      	b.n	800082e <__aeabi_fadd+0x17e>
 80008f0:	4661      	mov	r1, ip
 80008f2:	2320      	movs	r3, #32
 80008f4:	40d1      	lsrs	r1, r2
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	4662      	mov	r2, ip
 80008fa:	409a      	lsls	r2, r3
 80008fc:	0013      	movs	r3, r2
 80008fe:	1e5a      	subs	r2, r3, #1
 8000900:	4193      	sbcs	r3, r2
 8000902:	430b      	orrs	r3, r1
 8000904:	e722      	b.n	800074c <__aeabi_fadd+0x9c>
 8000906:	2d00      	cmp	r5, #0
 8000908:	d146      	bne.n	8000998 <__aeabi_fadd+0x2e8>
 800090a:	2f00      	cmp	r7, #0
 800090c:	d062      	beq.n	80009d4 <__aeabi_fadd+0x324>
 800090e:	4663      	mov	r3, ip
 8000910:	2000      	movs	r0, #0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fadd+0x268>
 8000916:	e752      	b.n	80007be <__aeabi_fadd+0x10e>
 8000918:	003b      	movs	r3, r7
 800091a:	4463      	add	r3, ip
 800091c:	015a      	lsls	r2, r3, #5
 800091e:	d583      	bpl.n	8000828 <__aeabi_fadd+0x178>
 8000920:	4a32      	ldr	r2, [pc, #200]	; (80009ec <__aeabi_fadd+0x33c>)
 8000922:	3501      	adds	r5, #1
 8000924:	4013      	ands	r3, r2
 8000926:	e77f      	b.n	8000828 <__aeabi_fadd+0x178>
 8000928:	2f00      	cmp	r7, #0
 800092a:	d0c4      	beq.n	80008b6 <__aeabi_fadd+0x206>
 800092c:	1e53      	subs	r3, r2, #1
 800092e:	2a01      	cmp	r2, #1
 8000930:	d012      	beq.n	8000958 <__aeabi_fadd+0x2a8>
 8000932:	2aff      	cmp	r2, #255	; 0xff
 8000934:	d08c      	beq.n	8000850 <__aeabi_fadd+0x1a0>
 8000936:	001a      	movs	r2, r3
 8000938:	e79e      	b.n	8000878 <__aeabi_fadd+0x1c8>
 800093a:	2f00      	cmp	r7, #0
 800093c:	d000      	beq.n	8000940 <__aeabi_fadd+0x290>
 800093e:	e77c      	b.n	800083a <__aeabi_fadd+0x18a>
 8000940:	4663      	mov	r3, ip
 8000942:	2b00      	cmp	r3, #0
 8000944:	d183      	bne.n	800084e <__aeabi_fadd+0x19e>
 8000946:	2680      	movs	r6, #128	; 0x80
 8000948:	2400      	movs	r4, #0
 800094a:	20ff      	movs	r0, #255	; 0xff
 800094c:	03f6      	lsls	r6, r6, #15
 800094e:	e736      	b.n	80007be <__aeabi_fadd+0x10e>
 8000950:	4663      	mov	r3, ip
 8000952:	000c      	movs	r4, r1
 8000954:	1bde      	subs	r6, r3, r7
 8000956:	e717      	b.n	8000788 <__aeabi_fadd+0xd8>
 8000958:	003b      	movs	r3, r7
 800095a:	4463      	add	r3, ip
 800095c:	2501      	movs	r5, #1
 800095e:	015a      	lsls	r2, r3, #5
 8000960:	d400      	bmi.n	8000964 <__aeabi_fadd+0x2b4>
 8000962:	e761      	b.n	8000828 <__aeabi_fadd+0x178>
 8000964:	2502      	movs	r5, #2
 8000966:	e6f7      	b.n	8000758 <__aeabi_fadd+0xa8>
 8000968:	4663      	mov	r3, ip
 800096a:	2501      	movs	r5, #1
 800096c:	1afb      	subs	r3, r7, r3
 800096e:	e707      	b.n	8000780 <__aeabi_fadd+0xd0>
 8000970:	2320      	movs	r3, #32
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	0038      	movs	r0, r7
 8000976:	409f      	lsls	r7, r3
 8000978:	003b      	movs	r3, r7
 800097a:	40d0      	lsrs	r0, r2
 800097c:	1e5a      	subs	r2, r3, #1
 800097e:	4193      	sbcs	r3, r2
 8000980:	4303      	orrs	r3, r0
 8000982:	e7ae      	b.n	80008e2 <__aeabi_fadd+0x232>
 8000984:	2320      	movs	r3, #32
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	0039      	movs	r1, r7
 800098a:	409f      	lsls	r7, r3
 800098c:	003b      	movs	r3, r7
 800098e:	40d1      	lsrs	r1, r2
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	4193      	sbcs	r3, r2
 8000994:	430b      	orrs	r3, r1
 8000996:	e773      	b.n	8000880 <__aeabi_fadd+0x1d0>
 8000998:	2f00      	cmp	r7, #0
 800099a:	d100      	bne.n	800099e <__aeabi_fadd+0x2ee>
 800099c:	e758      	b.n	8000850 <__aeabi_fadd+0x1a0>
 800099e:	4662      	mov	r2, ip
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_fadd+0x2f6>
 80009a4:	e755      	b.n	8000852 <__aeabi_fadd+0x1a2>
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	03d2      	lsls	r2, r2, #15
 80009aa:	4213      	tst	r3, r2
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fadd+0x300>
 80009ae:	e750      	b.n	8000852 <__aeabi_fadd+0x1a2>
 80009b0:	4641      	mov	r1, r8
 80009b2:	4211      	tst	r1, r2
 80009b4:	d000      	beq.n	80009b8 <__aeabi_fadd+0x308>
 80009b6:	e74c      	b.n	8000852 <__aeabi_fadd+0x1a2>
 80009b8:	4643      	mov	r3, r8
 80009ba:	e74a      	b.n	8000852 <__aeabi_fadd+0x1a2>
 80009bc:	4663      	mov	r3, ip
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d083      	beq.n	80008ca <__aeabi_fadd+0x21a>
 80009c2:	000c      	movs	r4, r1
 80009c4:	4646      	mov	r6, r8
 80009c6:	2000      	movs	r0, #0
 80009c8:	e6f9      	b.n	80007be <__aeabi_fadd+0x10e>
 80009ca:	4663      	mov	r3, ip
 80009cc:	000c      	movs	r4, r1
 80009ce:	1bdb      	subs	r3, r3, r7
 80009d0:	3501      	adds	r5, #1
 80009d2:	e6d5      	b.n	8000780 <__aeabi_fadd+0xd0>
 80009d4:	4646      	mov	r6, r8
 80009d6:	2000      	movs	r0, #0
 80009d8:	e6f1      	b.n	80007be <__aeabi_fadd+0x10e>
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d000      	beq.n	80009e0 <__aeabi_fadd+0x330>
 80009de:	e723      	b.n	8000828 <__aeabi_fadd+0x178>
 80009e0:	2400      	movs	r4, #0
 80009e2:	2600      	movs	r6, #0
 80009e4:	e6eb      	b.n	80007be <__aeabi_fadd+0x10e>
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	7dffffff 	.word	0x7dffffff
 80009ec:	fbffffff 	.word	0xfbffffff

080009f0 <__aeabi_fdiv>:
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	464f      	mov	r7, r9
 80009f4:	4646      	mov	r6, r8
 80009f6:	46d6      	mov	lr, sl
 80009f8:	0245      	lsls	r5, r0, #9
 80009fa:	b5c0      	push	{r6, r7, lr}
 80009fc:	0047      	lsls	r7, r0, #1
 80009fe:	1c0c      	adds	r4, r1, #0
 8000a00:	0a6d      	lsrs	r5, r5, #9
 8000a02:	0e3f      	lsrs	r7, r7, #24
 8000a04:	0fc6      	lsrs	r6, r0, #31
 8000a06:	2f00      	cmp	r7, #0
 8000a08:	d100      	bne.n	8000a0c <__aeabi_fdiv+0x1c>
 8000a0a:	e06f      	b.n	8000aec <__aeabi_fdiv+0xfc>
 8000a0c:	2fff      	cmp	r7, #255	; 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fdiv+0x22>
 8000a10:	e074      	b.n	8000afc <__aeabi_fdiv+0x10c>
 8000a12:	2300      	movs	r3, #0
 8000a14:	2280      	movs	r2, #128	; 0x80
 8000a16:	4699      	mov	r9, r3
 8000a18:	469a      	mov	sl, r3
 8000a1a:	00ed      	lsls	r5, r5, #3
 8000a1c:	04d2      	lsls	r2, r2, #19
 8000a1e:	4315      	orrs	r5, r2
 8000a20:	3f7f      	subs	r7, #127	; 0x7f
 8000a22:	0263      	lsls	r3, r4, #9
 8000a24:	0a5b      	lsrs	r3, r3, #9
 8000a26:	4698      	mov	r8, r3
 8000a28:	0063      	lsls	r3, r4, #1
 8000a2a:	0e1b      	lsrs	r3, r3, #24
 8000a2c:	0fe4      	lsrs	r4, r4, #31
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d04d      	beq.n	8000ace <__aeabi_fdiv+0xde>
 8000a32:	2bff      	cmp	r3, #255	; 0xff
 8000a34:	d045      	beq.n	8000ac2 <__aeabi_fdiv+0xd2>
 8000a36:	4642      	mov	r2, r8
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	00d2      	lsls	r2, r2, #3
 8000a3c:	04c9      	lsls	r1, r1, #19
 8000a3e:	4311      	orrs	r1, r2
 8000a40:	4688      	mov	r8, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	3b7f      	subs	r3, #127	; 0x7f
 8000a46:	0031      	movs	r1, r6
 8000a48:	1aff      	subs	r7, r7, r3
 8000a4a:	464b      	mov	r3, r9
 8000a4c:	4061      	eors	r1, r4
 8000a4e:	b2c9      	uxtb	r1, r1
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d900      	bls.n	8000a56 <__aeabi_fdiv+0x66>
 8000a54:	e0b8      	b.n	8000bc8 <__aeabi_fdiv+0x1d8>
 8000a56:	4870      	ldr	r0, [pc, #448]	; (8000c18 <__aeabi_fdiv+0x228>)
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	58c3      	ldr	r3, [r0, r3]
 8000a5c:	469f      	mov	pc, r3
 8000a5e:	2300      	movs	r3, #0
 8000a60:	4698      	mov	r8, r3
 8000a62:	0026      	movs	r6, r4
 8000a64:	4645      	mov	r5, r8
 8000a66:	4692      	mov	sl, r2
 8000a68:	4653      	mov	r3, sl
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_fdiv+0x80>
 8000a6e:	e08d      	b.n	8000b8c <__aeabi_fdiv+0x19c>
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d100      	bne.n	8000a76 <__aeabi_fdiv+0x86>
 8000a74:	e0a1      	b.n	8000bba <__aeabi_fdiv+0x1ca>
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d018      	beq.n	8000aac <__aeabi_fdiv+0xbc>
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	337f      	adds	r3, #127	; 0x7f
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	dd6d      	ble.n	8000b5e <__aeabi_fdiv+0x16e>
 8000a82:	076a      	lsls	r2, r5, #29
 8000a84:	d004      	beq.n	8000a90 <__aeabi_fdiv+0xa0>
 8000a86:	220f      	movs	r2, #15
 8000a88:	402a      	ands	r2, r5
 8000a8a:	2a04      	cmp	r2, #4
 8000a8c:	d000      	beq.n	8000a90 <__aeabi_fdiv+0xa0>
 8000a8e:	3504      	adds	r5, #4
 8000a90:	012a      	lsls	r2, r5, #4
 8000a92:	d503      	bpl.n	8000a9c <__aeabi_fdiv+0xac>
 8000a94:	4b61      	ldr	r3, [pc, #388]	; (8000c1c <__aeabi_fdiv+0x22c>)
 8000a96:	401d      	ands	r5, r3
 8000a98:	003b      	movs	r3, r7
 8000a9a:	3380      	adds	r3, #128	; 0x80
 8000a9c:	2bfe      	cmp	r3, #254	; 0xfe
 8000a9e:	dd00      	ble.n	8000aa2 <__aeabi_fdiv+0xb2>
 8000aa0:	e074      	b.n	8000b8c <__aeabi_fdiv+0x19c>
 8000aa2:	01aa      	lsls	r2, r5, #6
 8000aa4:	0a52      	lsrs	r2, r2, #9
 8000aa6:	b2d8      	uxtb	r0, r3
 8000aa8:	e002      	b.n	8000ab0 <__aeabi_fdiv+0xc0>
 8000aaa:	000e      	movs	r6, r1
 8000aac:	2000      	movs	r0, #0
 8000aae:	2200      	movs	r2, #0
 8000ab0:	05c0      	lsls	r0, r0, #23
 8000ab2:	07f6      	lsls	r6, r6, #31
 8000ab4:	4310      	orrs	r0, r2
 8000ab6:	4330      	orrs	r0, r6
 8000ab8:	bce0      	pop	{r5, r6, r7}
 8000aba:	46ba      	mov	sl, r7
 8000abc:	46b1      	mov	r9, r6
 8000abe:	46a8      	mov	r8, r5
 8000ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac2:	4643      	mov	r3, r8
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d13f      	bne.n	8000b48 <__aeabi_fdiv+0x158>
 8000ac8:	2202      	movs	r2, #2
 8000aca:	3fff      	subs	r7, #255	; 0xff
 8000acc:	e003      	b.n	8000ad6 <__aeabi_fdiv+0xe6>
 8000ace:	4643      	mov	r3, r8
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d12d      	bne.n	8000b30 <__aeabi_fdiv+0x140>
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	0031      	movs	r1, r6
 8000ad8:	464b      	mov	r3, r9
 8000ada:	4061      	eors	r1, r4
 8000adc:	b2c9      	uxtb	r1, r1
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d838      	bhi.n	8000b56 <__aeabi_fdiv+0x166>
 8000ae4:	484e      	ldr	r0, [pc, #312]	; (8000c20 <__aeabi_fdiv+0x230>)
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	58c3      	ldr	r3, [r0, r3]
 8000aea:	469f      	mov	pc, r3
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d113      	bne.n	8000b18 <__aeabi_fdiv+0x128>
 8000af0:	2304      	movs	r3, #4
 8000af2:	4699      	mov	r9, r3
 8000af4:	3b03      	subs	r3, #3
 8000af6:	2700      	movs	r7, #0
 8000af8:	469a      	mov	sl, r3
 8000afa:	e792      	b.n	8000a22 <__aeabi_fdiv+0x32>
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d105      	bne.n	8000b0c <__aeabi_fdiv+0x11c>
 8000b00:	2308      	movs	r3, #8
 8000b02:	4699      	mov	r9, r3
 8000b04:	3b06      	subs	r3, #6
 8000b06:	27ff      	movs	r7, #255	; 0xff
 8000b08:	469a      	mov	sl, r3
 8000b0a:	e78a      	b.n	8000a22 <__aeabi_fdiv+0x32>
 8000b0c:	230c      	movs	r3, #12
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b09      	subs	r3, #9
 8000b12:	27ff      	movs	r7, #255	; 0xff
 8000b14:	469a      	mov	sl, r3
 8000b16:	e784      	b.n	8000a22 <__aeabi_fdiv+0x32>
 8000b18:	0028      	movs	r0, r5
 8000b1a:	f001 f86d 	bl	8001bf8 <__clzsi2>
 8000b1e:	2776      	movs	r7, #118	; 0x76
 8000b20:	1f43      	subs	r3, r0, #5
 8000b22:	409d      	lsls	r5, r3
 8000b24:	2300      	movs	r3, #0
 8000b26:	427f      	negs	r7, r7
 8000b28:	4699      	mov	r9, r3
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	1a3f      	subs	r7, r7, r0
 8000b2e:	e778      	b.n	8000a22 <__aeabi_fdiv+0x32>
 8000b30:	4640      	mov	r0, r8
 8000b32:	f001 f861 	bl	8001bf8 <__clzsi2>
 8000b36:	4642      	mov	r2, r8
 8000b38:	1f43      	subs	r3, r0, #5
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	2376      	movs	r3, #118	; 0x76
 8000b3e:	425b      	negs	r3, r3
 8000b40:	4690      	mov	r8, r2
 8000b42:	1a1b      	subs	r3, r3, r0
 8000b44:	2200      	movs	r2, #0
 8000b46:	e77e      	b.n	8000a46 <__aeabi_fdiv+0x56>
 8000b48:	2303      	movs	r3, #3
 8000b4a:	464a      	mov	r2, r9
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	4691      	mov	r9, r2
 8000b50:	33fc      	adds	r3, #252	; 0xfc
 8000b52:	2203      	movs	r2, #3
 8000b54:	e777      	b.n	8000a46 <__aeabi_fdiv+0x56>
 8000b56:	000e      	movs	r6, r1
 8000b58:	20ff      	movs	r0, #255	; 0xff
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	e7a8      	b.n	8000ab0 <__aeabi_fdiv+0xc0>
 8000b5e:	2201      	movs	r2, #1
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b1b      	cmp	r3, #27
 8000b64:	dca2      	bgt.n	8000aac <__aeabi_fdiv+0xbc>
 8000b66:	379e      	adds	r7, #158	; 0x9e
 8000b68:	002a      	movs	r2, r5
 8000b6a:	40bd      	lsls	r5, r7
 8000b6c:	40da      	lsrs	r2, r3
 8000b6e:	1e6b      	subs	r3, r5, #1
 8000b70:	419d      	sbcs	r5, r3
 8000b72:	4315      	orrs	r5, r2
 8000b74:	076a      	lsls	r2, r5, #29
 8000b76:	d004      	beq.n	8000b82 <__aeabi_fdiv+0x192>
 8000b78:	220f      	movs	r2, #15
 8000b7a:	402a      	ands	r2, r5
 8000b7c:	2a04      	cmp	r2, #4
 8000b7e:	d000      	beq.n	8000b82 <__aeabi_fdiv+0x192>
 8000b80:	3504      	adds	r5, #4
 8000b82:	016a      	lsls	r2, r5, #5
 8000b84:	d544      	bpl.n	8000c10 <__aeabi_fdiv+0x220>
 8000b86:	2001      	movs	r0, #1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	e791      	b.n	8000ab0 <__aeabi_fdiv+0xc0>
 8000b8c:	20ff      	movs	r0, #255	; 0xff
 8000b8e:	2200      	movs	r2, #0
 8000b90:	e78e      	b.n	8000ab0 <__aeabi_fdiv+0xc0>
 8000b92:	2280      	movs	r2, #128	; 0x80
 8000b94:	2600      	movs	r6, #0
 8000b96:	20ff      	movs	r0, #255	; 0xff
 8000b98:	03d2      	lsls	r2, r2, #15
 8000b9a:	e789      	b.n	8000ab0 <__aeabi_fdiv+0xc0>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	4698      	mov	r8, r3
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	03d2      	lsls	r2, r2, #15
 8000ba4:	4215      	tst	r5, r2
 8000ba6:	d008      	beq.n	8000bba <__aeabi_fdiv+0x1ca>
 8000ba8:	4643      	mov	r3, r8
 8000baa:	4213      	tst	r3, r2
 8000bac:	d105      	bne.n	8000bba <__aeabi_fdiv+0x1ca>
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	0252      	lsls	r2, r2, #9
 8000bb2:	0026      	movs	r6, r4
 8000bb4:	20ff      	movs	r0, #255	; 0xff
 8000bb6:	0a52      	lsrs	r2, r2, #9
 8000bb8:	e77a      	b.n	8000ab0 <__aeabi_fdiv+0xc0>
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	03d2      	lsls	r2, r2, #15
 8000bbe:	432a      	orrs	r2, r5
 8000bc0:	0252      	lsls	r2, r2, #9
 8000bc2:	20ff      	movs	r0, #255	; 0xff
 8000bc4:	0a52      	lsrs	r2, r2, #9
 8000bc6:	e773      	b.n	8000ab0 <__aeabi_fdiv+0xc0>
 8000bc8:	4642      	mov	r2, r8
 8000bca:	016b      	lsls	r3, r5, #5
 8000bcc:	0155      	lsls	r5, r2, #5
 8000bce:	42ab      	cmp	r3, r5
 8000bd0:	d21a      	bcs.n	8000c08 <__aeabi_fdiv+0x218>
 8000bd2:	201b      	movs	r0, #27
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	3f01      	subs	r7, #1
 8000bd8:	2601      	movs	r6, #1
 8000bda:	001c      	movs	r4, r3
 8000bdc:	0052      	lsls	r2, r2, #1
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	db01      	blt.n	8000be8 <__aeabi_fdiv+0x1f8>
 8000be4:	429d      	cmp	r5, r3
 8000be6:	d801      	bhi.n	8000bec <__aeabi_fdiv+0x1fc>
 8000be8:	1b5b      	subs	r3, r3, r5
 8000bea:	4332      	orrs	r2, r6
 8000bec:	3801      	subs	r0, #1
 8000bee:	2800      	cmp	r0, #0
 8000bf0:	d1f3      	bne.n	8000bda <__aeabi_fdiv+0x1ea>
 8000bf2:	1e58      	subs	r0, r3, #1
 8000bf4:	4183      	sbcs	r3, r0
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	001d      	movs	r5, r3
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	337f      	adds	r3, #127	; 0x7f
 8000bfe:	000e      	movs	r6, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	dd00      	ble.n	8000c06 <__aeabi_fdiv+0x216>
 8000c04:	e73d      	b.n	8000a82 <__aeabi_fdiv+0x92>
 8000c06:	e7aa      	b.n	8000b5e <__aeabi_fdiv+0x16e>
 8000c08:	201a      	movs	r0, #26
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	1b5b      	subs	r3, r3, r5
 8000c0e:	e7e3      	b.n	8000bd8 <__aeabi_fdiv+0x1e8>
 8000c10:	01aa      	lsls	r2, r5, #6
 8000c12:	2000      	movs	r0, #0
 8000c14:	0a52      	lsrs	r2, r2, #9
 8000c16:	e74b      	b.n	8000ab0 <__aeabi_fdiv+0xc0>
 8000c18:	08006e7c 	.word	0x08006e7c
 8000c1c:	f7ffffff 	.word	0xf7ffffff
 8000c20:	08006ebc 	.word	0x08006ebc

08000c24 <__eqsf2>:
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	0042      	lsls	r2, r0, #1
 8000c28:	0245      	lsls	r5, r0, #9
 8000c2a:	024e      	lsls	r6, r1, #9
 8000c2c:	004c      	lsls	r4, r1, #1
 8000c2e:	0fc3      	lsrs	r3, r0, #31
 8000c30:	0a6d      	lsrs	r5, r5, #9
 8000c32:	2001      	movs	r0, #1
 8000c34:	0e12      	lsrs	r2, r2, #24
 8000c36:	0a76      	lsrs	r6, r6, #9
 8000c38:	0e24      	lsrs	r4, r4, #24
 8000c3a:	0fc9      	lsrs	r1, r1, #31
 8000c3c:	2aff      	cmp	r2, #255	; 0xff
 8000c3e:	d006      	beq.n	8000c4e <__eqsf2+0x2a>
 8000c40:	2cff      	cmp	r4, #255	; 0xff
 8000c42:	d003      	beq.n	8000c4c <__eqsf2+0x28>
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	d101      	bne.n	8000c4c <__eqsf2+0x28>
 8000c48:	42b5      	cmp	r5, r6
 8000c4a:	d006      	beq.n	8000c5a <__eqsf2+0x36>
 8000c4c:	bd70      	pop	{r4, r5, r6, pc}
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d1fc      	bne.n	8000c4c <__eqsf2+0x28>
 8000c52:	2cff      	cmp	r4, #255	; 0xff
 8000c54:	d1fa      	bne.n	8000c4c <__eqsf2+0x28>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	d1f8      	bne.n	8000c4c <__eqsf2+0x28>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d006      	beq.n	8000c6c <__eqsf2+0x48>
 8000c5e:	2001      	movs	r0, #1
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	d1f3      	bne.n	8000c4c <__eqsf2+0x28>
 8000c64:	0028      	movs	r0, r5
 8000c66:	1e43      	subs	r3, r0, #1
 8000c68:	4198      	sbcs	r0, r3
 8000c6a:	e7ef      	b.n	8000c4c <__eqsf2+0x28>
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	e7ed      	b.n	8000c4c <__eqsf2+0x28>

08000c70 <__gesf2>:
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	0042      	lsls	r2, r0, #1
 8000c74:	0245      	lsls	r5, r0, #9
 8000c76:	024e      	lsls	r6, r1, #9
 8000c78:	004c      	lsls	r4, r1, #1
 8000c7a:	0fc3      	lsrs	r3, r0, #31
 8000c7c:	0a6d      	lsrs	r5, r5, #9
 8000c7e:	0e12      	lsrs	r2, r2, #24
 8000c80:	0a76      	lsrs	r6, r6, #9
 8000c82:	0e24      	lsrs	r4, r4, #24
 8000c84:	0fc8      	lsrs	r0, r1, #31
 8000c86:	2aff      	cmp	r2, #255	; 0xff
 8000c88:	d01b      	beq.n	8000cc2 <__gesf2+0x52>
 8000c8a:	2cff      	cmp	r4, #255	; 0xff
 8000c8c:	d00e      	beq.n	8000cac <__gesf2+0x3c>
 8000c8e:	2a00      	cmp	r2, #0
 8000c90:	d11b      	bne.n	8000cca <__gesf2+0x5a>
 8000c92:	2c00      	cmp	r4, #0
 8000c94:	d101      	bne.n	8000c9a <__gesf2+0x2a>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d01c      	beq.n	8000cd4 <__gesf2+0x64>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	d00c      	beq.n	8000cb8 <__gesf2+0x48>
 8000c9e:	4283      	cmp	r3, r0
 8000ca0:	d01c      	beq.n	8000cdc <__gesf2+0x6c>
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	1e58      	subs	r0, r3, #1
 8000ca6:	4008      	ands	r0, r1
 8000ca8:	3801      	subs	r0, #1
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d122      	bne.n	8000cf6 <__gesf2+0x86>
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d1f4      	bne.n	8000c9e <__gesf2+0x2e>
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d1f2      	bne.n	8000c9e <__gesf2+0x2e>
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	d1f6      	bne.n	8000caa <__gesf2+0x3a>
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	e7f3      	b.n	8000caa <__gesf2+0x3a>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d117      	bne.n	8000cf6 <__gesf2+0x86>
 8000cc6:	2cff      	cmp	r4, #255	; 0xff
 8000cc8:	d0f0      	beq.n	8000cac <__gesf2+0x3c>
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d1e7      	bne.n	8000c9e <__gesf2+0x2e>
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d1e5      	bne.n	8000c9e <__gesf2+0x2e>
 8000cd2:	e7e6      	b.n	8000ca2 <__gesf2+0x32>
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e7      	beq.n	8000caa <__gesf2+0x3a>
 8000cda:	e7e2      	b.n	8000ca2 <__gesf2+0x32>
 8000cdc:	42a2      	cmp	r2, r4
 8000cde:	dc05      	bgt.n	8000cec <__gesf2+0x7c>
 8000ce0:	dbea      	blt.n	8000cb8 <__gesf2+0x48>
 8000ce2:	42b5      	cmp	r5, r6
 8000ce4:	d802      	bhi.n	8000cec <__gesf2+0x7c>
 8000ce6:	d3e7      	bcc.n	8000cb8 <__gesf2+0x48>
 8000ce8:	2000      	movs	r0, #0
 8000cea:	e7de      	b.n	8000caa <__gesf2+0x3a>
 8000cec:	4243      	negs	r3, r0
 8000cee:	4158      	adcs	r0, r3
 8000cf0:	0040      	lsls	r0, r0, #1
 8000cf2:	3801      	subs	r0, #1
 8000cf4:	e7d9      	b.n	8000caa <__gesf2+0x3a>
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	e7d6      	b.n	8000caa <__gesf2+0x3a>

08000cfc <__lesf2>:
 8000cfc:	b570      	push	{r4, r5, r6, lr}
 8000cfe:	0042      	lsls	r2, r0, #1
 8000d00:	0245      	lsls	r5, r0, #9
 8000d02:	024e      	lsls	r6, r1, #9
 8000d04:	004c      	lsls	r4, r1, #1
 8000d06:	0fc3      	lsrs	r3, r0, #31
 8000d08:	0a6d      	lsrs	r5, r5, #9
 8000d0a:	0e12      	lsrs	r2, r2, #24
 8000d0c:	0a76      	lsrs	r6, r6, #9
 8000d0e:	0e24      	lsrs	r4, r4, #24
 8000d10:	0fc8      	lsrs	r0, r1, #31
 8000d12:	2aff      	cmp	r2, #255	; 0xff
 8000d14:	d00b      	beq.n	8000d2e <__lesf2+0x32>
 8000d16:	2cff      	cmp	r4, #255	; 0xff
 8000d18:	d00d      	beq.n	8000d36 <__lesf2+0x3a>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	d11f      	bne.n	8000d5e <__lesf2+0x62>
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d116      	bne.n	8000d50 <__lesf2+0x54>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d114      	bne.n	8000d50 <__lesf2+0x54>
 8000d26:	2000      	movs	r0, #0
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d010      	beq.n	8000d4e <__lesf2+0x52>
 8000d2c:	e009      	b.n	8000d42 <__lesf2+0x46>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d10c      	bne.n	8000d4c <__lesf2+0x50>
 8000d32:	2cff      	cmp	r4, #255	; 0xff
 8000d34:	d113      	bne.n	8000d5e <__lesf2+0x62>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	d108      	bne.n	8000d4c <__lesf2+0x50>
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d008      	beq.n	8000d50 <__lesf2+0x54>
 8000d3e:	4283      	cmp	r3, r0
 8000d40:	d012      	beq.n	8000d68 <__lesf2+0x6c>
 8000d42:	2102      	movs	r1, #2
 8000d44:	1e58      	subs	r0, r3, #1
 8000d46:	4008      	ands	r0, r1
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e000      	b.n	8000d4e <__lesf2+0x52>
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	bd70      	pop	{r4, r5, r6, pc}
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d1f4      	bne.n	8000d3e <__lesf2+0x42>
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d1fa      	bne.n	8000d4e <__lesf2+0x52>
 8000d58:	2001      	movs	r0, #1
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	e7f7      	b.n	8000d4e <__lesf2+0x52>
 8000d5e:	2c00      	cmp	r4, #0
 8000d60:	d1ed      	bne.n	8000d3e <__lesf2+0x42>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d1eb      	bne.n	8000d3e <__lesf2+0x42>
 8000d66:	e7ec      	b.n	8000d42 <__lesf2+0x46>
 8000d68:	42a2      	cmp	r2, r4
 8000d6a:	dc05      	bgt.n	8000d78 <__lesf2+0x7c>
 8000d6c:	dbf2      	blt.n	8000d54 <__lesf2+0x58>
 8000d6e:	42b5      	cmp	r5, r6
 8000d70:	d802      	bhi.n	8000d78 <__lesf2+0x7c>
 8000d72:	d3ef      	bcc.n	8000d54 <__lesf2+0x58>
 8000d74:	2000      	movs	r0, #0
 8000d76:	e7ea      	b.n	8000d4e <__lesf2+0x52>
 8000d78:	4243      	negs	r3, r0
 8000d7a:	4158      	adcs	r0, r3
 8000d7c:	0040      	lsls	r0, r0, #1
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7e5      	b.n	8000d4e <__lesf2+0x52>
 8000d82:	46c0      	nop			; (mov r8, r8)

08000d84 <__aeabi_fmul>:
 8000d84:	0243      	lsls	r3, r0, #9
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	464f      	mov	r7, r9
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	4699      	mov	r9, r3
 8000d90:	46d6      	mov	lr, sl
 8000d92:	0fc3      	lsrs	r3, r0, #31
 8000d94:	0045      	lsls	r5, r0, #1
 8000d96:	4698      	mov	r8, r3
 8000d98:	b5c0      	push	{r6, r7, lr}
 8000d9a:	464b      	mov	r3, r9
 8000d9c:	1c0f      	adds	r7, r1, #0
 8000d9e:	0e2d      	lsrs	r5, r5, #24
 8000da0:	d100      	bne.n	8000da4 <__aeabi_fmul+0x20>
 8000da2:	e0cb      	b.n	8000f3c <__aeabi_fmul+0x1b8>
 8000da4:	2dff      	cmp	r5, #255	; 0xff
 8000da6:	d100      	bne.n	8000daa <__aeabi_fmul+0x26>
 8000da8:	e0cf      	b.n	8000f4a <__aeabi_fmul+0x1c6>
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	04d2      	lsls	r2, r2, #19
 8000db0:	431a      	orrs	r2, r3
 8000db2:	2300      	movs	r3, #0
 8000db4:	4691      	mov	r9, r2
 8000db6:	2600      	movs	r6, #0
 8000db8:	469a      	mov	sl, r3
 8000dba:	3d7f      	subs	r5, #127	; 0x7f
 8000dbc:	027c      	lsls	r4, r7, #9
 8000dbe:	007b      	lsls	r3, r7, #1
 8000dc0:	0a64      	lsrs	r4, r4, #9
 8000dc2:	0e1b      	lsrs	r3, r3, #24
 8000dc4:	0fff      	lsrs	r7, r7, #31
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_fmul+0x48>
 8000dca:	e0a9      	b.n	8000f20 <__aeabi_fmul+0x19c>
 8000dcc:	2bff      	cmp	r3, #255	; 0xff
 8000dce:	d011      	beq.n	8000df4 <__aeabi_fmul+0x70>
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	00e4      	lsls	r4, r4, #3
 8000dd4:	04d2      	lsls	r2, r2, #19
 8000dd6:	4314      	orrs	r4, r2
 8000dd8:	4642      	mov	r2, r8
 8000dda:	3b7f      	subs	r3, #127	; 0x7f
 8000ddc:	195b      	adds	r3, r3, r5
 8000dde:	407a      	eors	r2, r7
 8000de0:	2000      	movs	r0, #0
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	1c5d      	adds	r5, r3, #1
 8000de6:	2e0a      	cmp	r6, #10
 8000de8:	dd13      	ble.n	8000e12 <__aeabi_fmul+0x8e>
 8000dea:	003a      	movs	r2, r7
 8000dec:	2e0b      	cmp	r6, #11
 8000dee:	d047      	beq.n	8000e80 <__aeabi_fmul+0xfc>
 8000df0:	4647      	mov	r7, r8
 8000df2:	e03f      	b.n	8000e74 <__aeabi_fmul+0xf0>
 8000df4:	002b      	movs	r3, r5
 8000df6:	33ff      	adds	r3, #255	; 0xff
 8000df8:	2c00      	cmp	r4, #0
 8000dfa:	d11e      	bne.n	8000e3a <__aeabi_fmul+0xb6>
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	4316      	orrs	r6, r2
 8000e00:	4642      	mov	r2, r8
 8000e02:	3501      	adds	r5, #1
 8000e04:	407a      	eors	r2, r7
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	35ff      	adds	r5, #255	; 0xff
 8000e0a:	2e0a      	cmp	r6, #10
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_fmul+0x8c>
 8000e0e:	e0e4      	b.n	8000fda <__aeabi_fmul+0x256>
 8000e10:	2002      	movs	r0, #2
 8000e12:	2e02      	cmp	r6, #2
 8000e14:	dc1c      	bgt.n	8000e50 <__aeabi_fmul+0xcc>
 8000e16:	3e01      	subs	r6, #1
 8000e18:	2e01      	cmp	r6, #1
 8000e1a:	d842      	bhi.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e1c:	2802      	cmp	r0, #2
 8000e1e:	d03d      	beq.n	8000e9c <__aeabi_fmul+0x118>
 8000e20:	2801      	cmp	r0, #1
 8000e22:	d166      	bne.n	8000ef2 <__aeabi_fmul+0x16e>
 8000e24:	2000      	movs	r0, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	05c0      	lsls	r0, r0, #23
 8000e2a:	4308      	orrs	r0, r1
 8000e2c:	07d2      	lsls	r2, r2, #31
 8000e2e:	4310      	orrs	r0, r2
 8000e30:	bce0      	pop	{r5, r6, r7}
 8000e32:	46ba      	mov	sl, r7
 8000e34:	46b1      	mov	r9, r6
 8000e36:	46a8      	mov	r8, r5
 8000e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	4316      	orrs	r6, r2
 8000e3e:	4642      	mov	r2, r8
 8000e40:	3501      	adds	r5, #1
 8000e42:	407a      	eors	r2, r7
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	35ff      	adds	r5, #255	; 0xff
 8000e48:	2e0a      	cmp	r6, #10
 8000e4a:	dd00      	ble.n	8000e4e <__aeabi_fmul+0xca>
 8000e4c:	e0e4      	b.n	8001018 <__aeabi_fmul+0x294>
 8000e4e:	2003      	movs	r0, #3
 8000e50:	2101      	movs	r1, #1
 8000e52:	40b1      	lsls	r1, r6
 8000e54:	26a6      	movs	r6, #166	; 0xa6
 8000e56:	00f6      	lsls	r6, r6, #3
 8000e58:	4231      	tst	r1, r6
 8000e5a:	d10a      	bne.n	8000e72 <__aeabi_fmul+0xee>
 8000e5c:	2690      	movs	r6, #144	; 0x90
 8000e5e:	00b6      	lsls	r6, r6, #2
 8000e60:	4231      	tst	r1, r6
 8000e62:	d116      	bne.n	8000e92 <__aeabi_fmul+0x10e>
 8000e64:	3eb9      	subs	r6, #185	; 0xb9
 8000e66:	3eff      	subs	r6, #255	; 0xff
 8000e68:	420e      	tst	r6, r1
 8000e6a:	d01a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e6c:	46a1      	mov	r9, r4
 8000e6e:	4682      	mov	sl, r0
 8000e70:	e000      	b.n	8000e74 <__aeabi_fmul+0xf0>
 8000e72:	0017      	movs	r7, r2
 8000e74:	4653      	mov	r3, sl
 8000e76:	003a      	movs	r2, r7
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d00f      	beq.n	8000e9c <__aeabi_fmul+0x118>
 8000e7c:	464c      	mov	r4, r9
 8000e7e:	4650      	mov	r0, sl
 8000e80:	2803      	cmp	r0, #3
 8000e82:	d1cd      	bne.n	8000e20 <__aeabi_fmul+0x9c>
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	03c9      	lsls	r1, r1, #15
 8000e88:	4321      	orrs	r1, r4
 8000e8a:	0249      	lsls	r1, r1, #9
 8000e8c:	20ff      	movs	r0, #255	; 0xff
 8000e8e:	0a49      	lsrs	r1, r1, #9
 8000e90:	e7ca      	b.n	8000e28 <__aeabi_fmul+0xa4>
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	2200      	movs	r2, #0
 8000e96:	20ff      	movs	r0, #255	; 0xff
 8000e98:	03c9      	lsls	r1, r1, #15
 8000e9a:	e7c5      	b.n	8000e28 <__aeabi_fmul+0xa4>
 8000e9c:	20ff      	movs	r0, #255	; 0xff
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	e7c2      	b.n	8000e28 <__aeabi_fmul+0xa4>
 8000ea2:	0c20      	lsrs	r0, r4, #16
 8000ea4:	4649      	mov	r1, r9
 8000ea6:	0424      	lsls	r4, r4, #16
 8000ea8:	0c24      	lsrs	r4, r4, #16
 8000eaa:	0027      	movs	r7, r4
 8000eac:	0c0e      	lsrs	r6, r1, #16
 8000eae:	0409      	lsls	r1, r1, #16
 8000eb0:	0c09      	lsrs	r1, r1, #16
 8000eb2:	4374      	muls	r4, r6
 8000eb4:	434f      	muls	r7, r1
 8000eb6:	4346      	muls	r6, r0
 8000eb8:	4348      	muls	r0, r1
 8000eba:	0c39      	lsrs	r1, r7, #16
 8000ebc:	1900      	adds	r0, r0, r4
 8000ebe:	1809      	adds	r1, r1, r0
 8000ec0:	428c      	cmp	r4, r1
 8000ec2:	d903      	bls.n	8000ecc <__aeabi_fmul+0x148>
 8000ec4:	2080      	movs	r0, #128	; 0x80
 8000ec6:	0240      	lsls	r0, r0, #9
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4466      	add	r6, ip
 8000ecc:	043f      	lsls	r7, r7, #16
 8000ece:	0408      	lsls	r0, r1, #16
 8000ed0:	0c3f      	lsrs	r7, r7, #16
 8000ed2:	19c0      	adds	r0, r0, r7
 8000ed4:	0184      	lsls	r4, r0, #6
 8000ed6:	1e67      	subs	r7, r4, #1
 8000ed8:	41bc      	sbcs	r4, r7
 8000eda:	0c09      	lsrs	r1, r1, #16
 8000edc:	0e80      	lsrs	r0, r0, #26
 8000ede:	1989      	adds	r1, r1, r6
 8000ee0:	4304      	orrs	r4, r0
 8000ee2:	0189      	lsls	r1, r1, #6
 8000ee4:	430c      	orrs	r4, r1
 8000ee6:	0109      	lsls	r1, r1, #4
 8000ee8:	d571      	bpl.n	8000fce <__aeabi_fmul+0x24a>
 8000eea:	2301      	movs	r3, #1
 8000eec:	0861      	lsrs	r1, r4, #1
 8000eee:	401c      	ands	r4, r3
 8000ef0:	430c      	orrs	r4, r1
 8000ef2:	002b      	movs	r3, r5
 8000ef4:	337f      	adds	r3, #127	; 0x7f
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	dd51      	ble.n	8000f9e <__aeabi_fmul+0x21a>
 8000efa:	0761      	lsls	r1, r4, #29
 8000efc:	d004      	beq.n	8000f08 <__aeabi_fmul+0x184>
 8000efe:	210f      	movs	r1, #15
 8000f00:	4021      	ands	r1, r4
 8000f02:	2904      	cmp	r1, #4
 8000f04:	d000      	beq.n	8000f08 <__aeabi_fmul+0x184>
 8000f06:	3404      	adds	r4, #4
 8000f08:	0121      	lsls	r1, r4, #4
 8000f0a:	d503      	bpl.n	8000f14 <__aeabi_fmul+0x190>
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <__aeabi_fmul+0x298>)
 8000f0e:	401c      	ands	r4, r3
 8000f10:	002b      	movs	r3, r5
 8000f12:	3380      	adds	r3, #128	; 0x80
 8000f14:	2bfe      	cmp	r3, #254	; 0xfe
 8000f16:	dcc1      	bgt.n	8000e9c <__aeabi_fmul+0x118>
 8000f18:	01a1      	lsls	r1, r4, #6
 8000f1a:	0a49      	lsrs	r1, r1, #9
 8000f1c:	b2d8      	uxtb	r0, r3
 8000f1e:	e783      	b.n	8000e28 <__aeabi_fmul+0xa4>
 8000f20:	2c00      	cmp	r4, #0
 8000f22:	d12c      	bne.n	8000f7e <__aeabi_fmul+0x1fa>
 8000f24:	2301      	movs	r3, #1
 8000f26:	4642      	mov	r2, r8
 8000f28:	431e      	orrs	r6, r3
 8000f2a:	002b      	movs	r3, r5
 8000f2c:	407a      	eors	r2, r7
 8000f2e:	2001      	movs	r0, #1
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	1c5d      	adds	r5, r3, #1
 8000f34:	2e0a      	cmp	r6, #10
 8000f36:	dd00      	ble.n	8000f3a <__aeabi_fmul+0x1b6>
 8000f38:	e757      	b.n	8000dea <__aeabi_fmul+0x66>
 8000f3a:	e76a      	b.n	8000e12 <__aeabi_fmul+0x8e>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d110      	bne.n	8000f62 <__aeabi_fmul+0x1de>
 8000f40:	2301      	movs	r3, #1
 8000f42:	2604      	movs	r6, #4
 8000f44:	2500      	movs	r5, #0
 8000f46:	469a      	mov	sl, r3
 8000f48:	e738      	b.n	8000dbc <__aeabi_fmul+0x38>
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d104      	bne.n	8000f58 <__aeabi_fmul+0x1d4>
 8000f4e:	2302      	movs	r3, #2
 8000f50:	2608      	movs	r6, #8
 8000f52:	25ff      	movs	r5, #255	; 0xff
 8000f54:	469a      	mov	sl, r3
 8000f56:	e731      	b.n	8000dbc <__aeabi_fmul+0x38>
 8000f58:	2303      	movs	r3, #3
 8000f5a:	260c      	movs	r6, #12
 8000f5c:	25ff      	movs	r5, #255	; 0xff
 8000f5e:	469a      	mov	sl, r3
 8000f60:	e72c      	b.n	8000dbc <__aeabi_fmul+0x38>
 8000f62:	4648      	mov	r0, r9
 8000f64:	f000 fe48 	bl	8001bf8 <__clzsi2>
 8000f68:	464a      	mov	r2, r9
 8000f6a:	1f43      	subs	r3, r0, #5
 8000f6c:	2576      	movs	r5, #118	; 0x76
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	2300      	movs	r3, #0
 8000f72:	426d      	negs	r5, r5
 8000f74:	4691      	mov	r9, r2
 8000f76:	2600      	movs	r6, #0
 8000f78:	469a      	mov	sl, r3
 8000f7a:	1a2d      	subs	r5, r5, r0
 8000f7c:	e71e      	b.n	8000dbc <__aeabi_fmul+0x38>
 8000f7e:	0020      	movs	r0, r4
 8000f80:	f000 fe3a 	bl	8001bf8 <__clzsi2>
 8000f84:	4642      	mov	r2, r8
 8000f86:	1f43      	subs	r3, r0, #5
 8000f88:	409c      	lsls	r4, r3
 8000f8a:	1a2b      	subs	r3, r5, r0
 8000f8c:	3b76      	subs	r3, #118	; 0x76
 8000f8e:	407a      	eors	r2, r7
 8000f90:	2000      	movs	r0, #0
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	1c5d      	adds	r5, r3, #1
 8000f96:	2e0a      	cmp	r6, #10
 8000f98:	dd00      	ble.n	8000f9c <__aeabi_fmul+0x218>
 8000f9a:	e726      	b.n	8000dea <__aeabi_fmul+0x66>
 8000f9c:	e739      	b.n	8000e12 <__aeabi_fmul+0x8e>
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	1acb      	subs	r3, r1, r3
 8000fa2:	2b1b      	cmp	r3, #27
 8000fa4:	dd00      	ble.n	8000fa8 <__aeabi_fmul+0x224>
 8000fa6:	e73d      	b.n	8000e24 <__aeabi_fmul+0xa0>
 8000fa8:	359e      	adds	r5, #158	; 0x9e
 8000faa:	0021      	movs	r1, r4
 8000fac:	40ac      	lsls	r4, r5
 8000fae:	40d9      	lsrs	r1, r3
 8000fb0:	1e63      	subs	r3, r4, #1
 8000fb2:	419c      	sbcs	r4, r3
 8000fb4:	4321      	orrs	r1, r4
 8000fb6:	074b      	lsls	r3, r1, #29
 8000fb8:	d004      	beq.n	8000fc4 <__aeabi_fmul+0x240>
 8000fba:	230f      	movs	r3, #15
 8000fbc:	400b      	ands	r3, r1
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	d000      	beq.n	8000fc4 <__aeabi_fmul+0x240>
 8000fc2:	3104      	adds	r1, #4
 8000fc4:	014b      	lsls	r3, r1, #5
 8000fc6:	d504      	bpl.n	8000fd2 <__aeabi_fmul+0x24e>
 8000fc8:	2001      	movs	r0, #1
 8000fca:	2100      	movs	r1, #0
 8000fcc:	e72c      	b.n	8000e28 <__aeabi_fmul+0xa4>
 8000fce:	001d      	movs	r5, r3
 8000fd0:	e78f      	b.n	8000ef2 <__aeabi_fmul+0x16e>
 8000fd2:	0189      	lsls	r1, r1, #6
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	0a49      	lsrs	r1, r1, #9
 8000fd8:	e726      	b.n	8000e28 <__aeabi_fmul+0xa4>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	2e0f      	cmp	r6, #15
 8000fde:	d10c      	bne.n	8000ffa <__aeabi_fmul+0x276>
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	464b      	mov	r3, r9
 8000fe4:	03c9      	lsls	r1, r1, #15
 8000fe6:	420b      	tst	r3, r1
 8000fe8:	d00d      	beq.n	8001006 <__aeabi_fmul+0x282>
 8000fea:	420c      	tst	r4, r1
 8000fec:	d10b      	bne.n	8001006 <__aeabi_fmul+0x282>
 8000fee:	4321      	orrs	r1, r4
 8000ff0:	0249      	lsls	r1, r1, #9
 8000ff2:	003a      	movs	r2, r7
 8000ff4:	20ff      	movs	r0, #255	; 0xff
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	e716      	b.n	8000e28 <__aeabi_fmul+0xa4>
 8000ffa:	2e0b      	cmp	r6, #11
 8000ffc:	d000      	beq.n	8001000 <__aeabi_fmul+0x27c>
 8000ffe:	e6f7      	b.n	8000df0 <__aeabi_fmul+0x6c>
 8001000:	46a1      	mov	r9, r4
 8001002:	469a      	mov	sl, r3
 8001004:	e736      	b.n	8000e74 <__aeabi_fmul+0xf0>
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	464b      	mov	r3, r9
 800100a:	03c9      	lsls	r1, r1, #15
 800100c:	4319      	orrs	r1, r3
 800100e:	0249      	lsls	r1, r1, #9
 8001010:	4642      	mov	r2, r8
 8001012:	20ff      	movs	r0, #255	; 0xff
 8001014:	0a49      	lsrs	r1, r1, #9
 8001016:	e707      	b.n	8000e28 <__aeabi_fmul+0xa4>
 8001018:	2303      	movs	r3, #3
 800101a:	e7df      	b.n	8000fdc <__aeabi_fmul+0x258>
 800101c:	f7ffffff 	.word	0xf7ffffff

08001020 <__aeabi_fsub>:
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	46c6      	mov	lr, r8
 8001024:	0243      	lsls	r3, r0, #9
 8001026:	0a5b      	lsrs	r3, r3, #9
 8001028:	0045      	lsls	r5, r0, #1
 800102a:	00da      	lsls	r2, r3, #3
 800102c:	0fc4      	lsrs	r4, r0, #31
 800102e:	0248      	lsls	r0, r1, #9
 8001030:	004f      	lsls	r7, r1, #1
 8001032:	4694      	mov	ip, r2
 8001034:	0a42      	lsrs	r2, r0, #9
 8001036:	001e      	movs	r6, r3
 8001038:	4690      	mov	r8, r2
 800103a:	b500      	push	{lr}
 800103c:	0e2d      	lsrs	r5, r5, #24
 800103e:	0e3f      	lsrs	r7, r7, #24
 8001040:	0fc9      	lsrs	r1, r1, #31
 8001042:	0980      	lsrs	r0, r0, #6
 8001044:	2fff      	cmp	r7, #255	; 0xff
 8001046:	d059      	beq.n	80010fc <__aeabi_fsub+0xdc>
 8001048:	2201      	movs	r2, #1
 800104a:	4051      	eors	r1, r2
 800104c:	428c      	cmp	r4, r1
 800104e:	d039      	beq.n	80010c4 <__aeabi_fsub+0xa4>
 8001050:	1bea      	subs	r2, r5, r7
 8001052:	2a00      	cmp	r2, #0
 8001054:	dd58      	ble.n	8001108 <__aeabi_fsub+0xe8>
 8001056:	2f00      	cmp	r7, #0
 8001058:	d068      	beq.n	800112c <__aeabi_fsub+0x10c>
 800105a:	2dff      	cmp	r5, #255	; 0xff
 800105c:	d100      	bne.n	8001060 <__aeabi_fsub+0x40>
 800105e:	e0d1      	b.n	8001204 <__aeabi_fsub+0x1e4>
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	04db      	lsls	r3, r3, #19
 8001064:	4318      	orrs	r0, r3
 8001066:	2a1b      	cmp	r2, #27
 8001068:	dc00      	bgt.n	800106c <__aeabi_fsub+0x4c>
 800106a:	e0e3      	b.n	8001234 <__aeabi_fsub+0x214>
 800106c:	2301      	movs	r3, #1
 800106e:	4662      	mov	r2, ip
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	015a      	lsls	r2, r3, #5
 8001074:	d400      	bmi.n	8001078 <__aeabi_fsub+0x58>
 8001076:	e0ac      	b.n	80011d2 <__aeabi_fsub+0x1b2>
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	099e      	lsrs	r6, r3, #6
 800107c:	0030      	movs	r0, r6
 800107e:	f000 fdbb 	bl	8001bf8 <__clzsi2>
 8001082:	0033      	movs	r3, r6
 8001084:	3805      	subs	r0, #5
 8001086:	4083      	lsls	r3, r0
 8001088:	4285      	cmp	r5, r0
 800108a:	dc00      	bgt.n	800108e <__aeabi_fsub+0x6e>
 800108c:	e0c6      	b.n	800121c <__aeabi_fsub+0x1fc>
 800108e:	4ab2      	ldr	r2, [pc, #712]	; (8001358 <__aeabi_fsub+0x338>)
 8001090:	1a2d      	subs	r5, r5, r0
 8001092:	4013      	ands	r3, r2
 8001094:	075a      	lsls	r2, r3, #29
 8001096:	d004      	beq.n	80010a2 <__aeabi_fsub+0x82>
 8001098:	220f      	movs	r2, #15
 800109a:	401a      	ands	r2, r3
 800109c:	2a04      	cmp	r2, #4
 800109e:	d000      	beq.n	80010a2 <__aeabi_fsub+0x82>
 80010a0:	3304      	adds	r3, #4
 80010a2:	015a      	lsls	r2, r3, #5
 80010a4:	d400      	bmi.n	80010a8 <__aeabi_fsub+0x88>
 80010a6:	e097      	b.n	80011d8 <__aeabi_fsub+0x1b8>
 80010a8:	1c6a      	adds	r2, r5, #1
 80010aa:	2dfe      	cmp	r5, #254	; 0xfe
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x90>
 80010ae:	e084      	b.n	80011ba <__aeabi_fsub+0x19a>
 80010b0:	019b      	lsls	r3, r3, #6
 80010b2:	0a5e      	lsrs	r6, r3, #9
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	05d0      	lsls	r0, r2, #23
 80010b8:	4330      	orrs	r0, r6
 80010ba:	07e4      	lsls	r4, r4, #31
 80010bc:	4320      	orrs	r0, r4
 80010be:	bc80      	pop	{r7}
 80010c0:	46b8      	mov	r8, r7
 80010c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c4:	1bea      	subs	r2, r5, r7
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	dd41      	ble.n	800114e <__aeabi_fsub+0x12e>
 80010ca:	2f00      	cmp	r7, #0
 80010cc:	d06b      	beq.n	80011a6 <__aeabi_fsub+0x186>
 80010ce:	2dff      	cmp	r5, #255	; 0xff
 80010d0:	d100      	bne.n	80010d4 <__aeabi_fsub+0xb4>
 80010d2:	e097      	b.n	8001204 <__aeabi_fsub+0x1e4>
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	04db      	lsls	r3, r3, #19
 80010d8:	4318      	orrs	r0, r3
 80010da:	2a1b      	cmp	r2, #27
 80010dc:	dc00      	bgt.n	80010e0 <__aeabi_fsub+0xc0>
 80010de:	e0cc      	b.n	800127a <__aeabi_fsub+0x25a>
 80010e0:	2301      	movs	r3, #1
 80010e2:	4463      	add	r3, ip
 80010e4:	015a      	lsls	r2, r3, #5
 80010e6:	d574      	bpl.n	80011d2 <__aeabi_fsub+0x1b2>
 80010e8:	3501      	adds	r5, #1
 80010ea:	2dff      	cmp	r5, #255	; 0xff
 80010ec:	d065      	beq.n	80011ba <__aeabi_fsub+0x19a>
 80010ee:	2201      	movs	r2, #1
 80010f0:	499a      	ldr	r1, [pc, #616]	; (800135c <__aeabi_fsub+0x33c>)
 80010f2:	401a      	ands	r2, r3
 80010f4:	085b      	lsrs	r3, r3, #1
 80010f6:	400b      	ands	r3, r1
 80010f8:	4313      	orrs	r3, r2
 80010fa:	e7cb      	b.n	8001094 <__aeabi_fsub+0x74>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	d01f      	beq.n	8001140 <__aeabi_fsub+0x120>
 8001100:	428c      	cmp	r4, r1
 8001102:	d022      	beq.n	800114a <__aeabi_fsub+0x12a>
 8001104:	002a      	movs	r2, r5
 8001106:	3aff      	subs	r2, #255	; 0xff
 8001108:	2a00      	cmp	r2, #0
 800110a:	d035      	beq.n	8001178 <__aeabi_fsub+0x158>
 800110c:	1b7a      	subs	r2, r7, r5
 800110e:	2d00      	cmp	r5, #0
 8001110:	d000      	beq.n	8001114 <__aeabi_fsub+0xf4>
 8001112:	e099      	b.n	8001248 <__aeabi_fsub+0x228>
 8001114:	4663      	mov	r3, ip
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <__aeabi_fsub+0xfc>
 800111a:	e0dd      	b.n	80012d8 <__aeabi_fsub+0x2b8>
 800111c:	1e53      	subs	r3, r2, #1
 800111e:	2a01      	cmp	r2, #1
 8001120:	d100      	bne.n	8001124 <__aeabi_fsub+0x104>
 8001122:	e105      	b.n	8001330 <__aeabi_fsub+0x310>
 8001124:	2aff      	cmp	r2, #255	; 0xff
 8001126:	d06b      	beq.n	8001200 <__aeabi_fsub+0x1e0>
 8001128:	001a      	movs	r2, r3
 800112a:	e094      	b.n	8001256 <__aeabi_fsub+0x236>
 800112c:	2800      	cmp	r0, #0
 800112e:	d073      	beq.n	8001218 <__aeabi_fsub+0x1f8>
 8001130:	1e51      	subs	r1, r2, #1
 8001132:	2a01      	cmp	r2, #1
 8001134:	d100      	bne.n	8001138 <__aeabi_fsub+0x118>
 8001136:	e0df      	b.n	80012f8 <__aeabi_fsub+0x2d8>
 8001138:	2aff      	cmp	r2, #255	; 0xff
 800113a:	d063      	beq.n	8001204 <__aeabi_fsub+0x1e4>
 800113c:	000a      	movs	r2, r1
 800113e:	e792      	b.n	8001066 <__aeabi_fsub+0x46>
 8001140:	2201      	movs	r2, #1
 8001142:	4051      	eors	r1, r2
 8001144:	42a1      	cmp	r1, r4
 8001146:	d000      	beq.n	800114a <__aeabi_fsub+0x12a>
 8001148:	e782      	b.n	8001050 <__aeabi_fsub+0x30>
 800114a:	002a      	movs	r2, r5
 800114c:	3aff      	subs	r2, #255	; 0xff
 800114e:	2a00      	cmp	r2, #0
 8001150:	d036      	beq.n	80011c0 <__aeabi_fsub+0x1a0>
 8001152:	1b7a      	subs	r2, r7, r5
 8001154:	2d00      	cmp	r5, #0
 8001156:	d100      	bne.n	800115a <__aeabi_fsub+0x13a>
 8001158:	e0aa      	b.n	80012b0 <__aeabi_fsub+0x290>
 800115a:	2fff      	cmp	r7, #255	; 0xff
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x140>
 800115e:	e0da      	b.n	8001316 <__aeabi_fsub+0x2f6>
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	4661      	mov	r1, ip
 8001164:	04db      	lsls	r3, r3, #19
 8001166:	4319      	orrs	r1, r3
 8001168:	468c      	mov	ip, r1
 800116a:	2a1b      	cmp	r2, #27
 800116c:	dc00      	bgt.n	8001170 <__aeabi_fsub+0x150>
 800116e:	e0d4      	b.n	800131a <__aeabi_fsub+0x2fa>
 8001170:	2301      	movs	r3, #1
 8001172:	003d      	movs	r5, r7
 8001174:	181b      	adds	r3, r3, r0
 8001176:	e7b5      	b.n	80010e4 <__aeabi_fsub+0xc4>
 8001178:	27fe      	movs	r7, #254	; 0xfe
 800117a:	1c6a      	adds	r2, r5, #1
 800117c:	4217      	tst	r7, r2
 800117e:	d171      	bne.n	8001264 <__aeabi_fsub+0x244>
 8001180:	2d00      	cmp	r5, #0
 8001182:	d000      	beq.n	8001186 <__aeabi_fsub+0x166>
 8001184:	e09e      	b.n	80012c4 <__aeabi_fsub+0x2a4>
 8001186:	4663      	mov	r3, ip
 8001188:	2b00      	cmp	r3, #0
 800118a:	d100      	bne.n	800118e <__aeabi_fsub+0x16e>
 800118c:	e0d5      	b.n	800133a <__aeabi_fsub+0x31a>
 800118e:	2200      	movs	r2, #0
 8001190:	2800      	cmp	r0, #0
 8001192:	d100      	bne.n	8001196 <__aeabi_fsub+0x176>
 8001194:	e78f      	b.n	80010b6 <__aeabi_fsub+0x96>
 8001196:	1a1b      	subs	r3, r3, r0
 8001198:	015e      	lsls	r6, r3, #5
 800119a:	d400      	bmi.n	800119e <__aeabi_fsub+0x17e>
 800119c:	e0d6      	b.n	800134c <__aeabi_fsub+0x32c>
 800119e:	4663      	mov	r3, ip
 80011a0:	000c      	movs	r4, r1
 80011a2:	1ac3      	subs	r3, r0, r3
 80011a4:	e776      	b.n	8001094 <__aeabi_fsub+0x74>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	d036      	beq.n	8001218 <__aeabi_fsub+0x1f8>
 80011aa:	1e51      	subs	r1, r2, #1
 80011ac:	2a01      	cmp	r2, #1
 80011ae:	d100      	bne.n	80011b2 <__aeabi_fsub+0x192>
 80011b0:	e09a      	b.n	80012e8 <__aeabi_fsub+0x2c8>
 80011b2:	2aff      	cmp	r2, #255	; 0xff
 80011b4:	d026      	beq.n	8001204 <__aeabi_fsub+0x1e4>
 80011b6:	000a      	movs	r2, r1
 80011b8:	e78f      	b.n	80010da <__aeabi_fsub+0xba>
 80011ba:	22ff      	movs	r2, #255	; 0xff
 80011bc:	2600      	movs	r6, #0
 80011be:	e77a      	b.n	80010b6 <__aeabi_fsub+0x96>
 80011c0:	27fe      	movs	r7, #254	; 0xfe
 80011c2:	1c6a      	adds	r2, r5, #1
 80011c4:	4217      	tst	r7, r2
 80011c6:	d062      	beq.n	800128e <__aeabi_fsub+0x26e>
 80011c8:	2aff      	cmp	r2, #255	; 0xff
 80011ca:	d0f6      	beq.n	80011ba <__aeabi_fsub+0x19a>
 80011cc:	0015      	movs	r5, r2
 80011ce:	4460      	add	r0, ip
 80011d0:	0843      	lsrs	r3, r0, #1
 80011d2:	075a      	lsls	r2, r3, #29
 80011d4:	d000      	beq.n	80011d8 <__aeabi_fsub+0x1b8>
 80011d6:	e75f      	b.n	8001098 <__aeabi_fsub+0x78>
 80011d8:	08db      	lsrs	r3, r3, #3
 80011da:	2dff      	cmp	r5, #255	; 0xff
 80011dc:	d012      	beq.n	8001204 <__aeabi_fsub+0x1e4>
 80011de:	025b      	lsls	r3, r3, #9
 80011e0:	0a5e      	lsrs	r6, r3, #9
 80011e2:	b2ea      	uxtb	r2, r5
 80011e4:	e767      	b.n	80010b6 <__aeabi_fsub+0x96>
 80011e6:	4662      	mov	r2, ip
 80011e8:	2a00      	cmp	r2, #0
 80011ea:	d100      	bne.n	80011ee <__aeabi_fsub+0x1ce>
 80011ec:	e093      	b.n	8001316 <__aeabi_fsub+0x2f6>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d008      	beq.n	8001204 <__aeabi_fsub+0x1e4>
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	03d2      	lsls	r2, r2, #15
 80011f6:	4213      	tst	r3, r2
 80011f8:	d004      	beq.n	8001204 <__aeabi_fsub+0x1e4>
 80011fa:	4640      	mov	r0, r8
 80011fc:	4210      	tst	r0, r2
 80011fe:	d101      	bne.n	8001204 <__aeabi_fsub+0x1e4>
 8001200:	000c      	movs	r4, r1
 8001202:	4643      	mov	r3, r8
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0d8      	beq.n	80011ba <__aeabi_fsub+0x19a>
 8001208:	2680      	movs	r6, #128	; 0x80
 800120a:	03f6      	lsls	r6, r6, #15
 800120c:	431e      	orrs	r6, r3
 800120e:	0276      	lsls	r6, r6, #9
 8001210:	22ff      	movs	r2, #255	; 0xff
 8001212:	0a76      	lsrs	r6, r6, #9
 8001214:	e74f      	b.n	80010b6 <__aeabi_fsub+0x96>
 8001216:	4643      	mov	r3, r8
 8001218:	0015      	movs	r5, r2
 800121a:	e7de      	b.n	80011da <__aeabi_fsub+0x1ba>
 800121c:	2220      	movs	r2, #32
 800121e:	1b40      	subs	r0, r0, r5
 8001220:	3001      	adds	r0, #1
 8001222:	1a12      	subs	r2, r2, r0
 8001224:	0019      	movs	r1, r3
 8001226:	4093      	lsls	r3, r2
 8001228:	40c1      	lsrs	r1, r0
 800122a:	1e5a      	subs	r2, r3, #1
 800122c:	4193      	sbcs	r3, r2
 800122e:	2500      	movs	r5, #0
 8001230:	430b      	orrs	r3, r1
 8001232:	e72f      	b.n	8001094 <__aeabi_fsub+0x74>
 8001234:	2320      	movs	r3, #32
 8001236:	1a9b      	subs	r3, r3, r2
 8001238:	0001      	movs	r1, r0
 800123a:	4098      	lsls	r0, r3
 800123c:	0003      	movs	r3, r0
 800123e:	40d1      	lsrs	r1, r2
 8001240:	1e5a      	subs	r2, r3, #1
 8001242:	4193      	sbcs	r3, r2
 8001244:	430b      	orrs	r3, r1
 8001246:	e712      	b.n	800106e <__aeabi_fsub+0x4e>
 8001248:	2fff      	cmp	r7, #255	; 0xff
 800124a:	d0d9      	beq.n	8001200 <__aeabi_fsub+0x1e0>
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	4664      	mov	r4, ip
 8001250:	04db      	lsls	r3, r3, #19
 8001252:	431c      	orrs	r4, r3
 8001254:	46a4      	mov	ip, r4
 8001256:	2a1b      	cmp	r2, #27
 8001258:	dd52      	ble.n	8001300 <__aeabi_fsub+0x2e0>
 800125a:	2301      	movs	r3, #1
 800125c:	000c      	movs	r4, r1
 800125e:	003d      	movs	r5, r7
 8001260:	1ac3      	subs	r3, r0, r3
 8001262:	e706      	b.n	8001072 <__aeabi_fsub+0x52>
 8001264:	4663      	mov	r3, ip
 8001266:	1a1e      	subs	r6, r3, r0
 8001268:	0173      	lsls	r3, r6, #5
 800126a:	d439      	bmi.n	80012e0 <__aeabi_fsub+0x2c0>
 800126c:	2e00      	cmp	r6, #0
 800126e:	d000      	beq.n	8001272 <__aeabi_fsub+0x252>
 8001270:	e704      	b.n	800107c <__aeabi_fsub+0x5c>
 8001272:	2400      	movs	r4, #0
 8001274:	2200      	movs	r2, #0
 8001276:	2600      	movs	r6, #0
 8001278:	e71d      	b.n	80010b6 <__aeabi_fsub+0x96>
 800127a:	2320      	movs	r3, #32
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	0001      	movs	r1, r0
 8001280:	4098      	lsls	r0, r3
 8001282:	0003      	movs	r3, r0
 8001284:	40d1      	lsrs	r1, r2
 8001286:	1e5a      	subs	r2, r3, #1
 8001288:	4193      	sbcs	r3, r2
 800128a:	430b      	orrs	r3, r1
 800128c:	e729      	b.n	80010e2 <__aeabi_fsub+0xc2>
 800128e:	2d00      	cmp	r5, #0
 8001290:	d1a9      	bne.n	80011e6 <__aeabi_fsub+0x1c6>
 8001292:	4663      	mov	r3, ip
 8001294:	2b00      	cmp	r3, #0
 8001296:	d056      	beq.n	8001346 <__aeabi_fsub+0x326>
 8001298:	2200      	movs	r2, #0
 800129a:	2800      	cmp	r0, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_fsub+0x280>
 800129e:	e70a      	b.n	80010b6 <__aeabi_fsub+0x96>
 80012a0:	0003      	movs	r3, r0
 80012a2:	4463      	add	r3, ip
 80012a4:	015a      	lsls	r2, r3, #5
 80012a6:	d594      	bpl.n	80011d2 <__aeabi_fsub+0x1b2>
 80012a8:	4a2b      	ldr	r2, [pc, #172]	; (8001358 <__aeabi_fsub+0x338>)
 80012aa:	3501      	adds	r5, #1
 80012ac:	4013      	ands	r3, r2
 80012ae:	e790      	b.n	80011d2 <__aeabi_fsub+0x1b2>
 80012b0:	4663      	mov	r3, ip
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0af      	beq.n	8001216 <__aeabi_fsub+0x1f6>
 80012b6:	1e53      	subs	r3, r2, #1
 80012b8:	2a01      	cmp	r2, #1
 80012ba:	d015      	beq.n	80012e8 <__aeabi_fsub+0x2c8>
 80012bc:	2aff      	cmp	r2, #255	; 0xff
 80012be:	d02a      	beq.n	8001316 <__aeabi_fsub+0x2f6>
 80012c0:	001a      	movs	r2, r3
 80012c2:	e752      	b.n	800116a <__aeabi_fsub+0x14a>
 80012c4:	4662      	mov	r2, ip
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d191      	bne.n	80011ee <__aeabi_fsub+0x1ce>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	d198      	bne.n	8001200 <__aeabi_fsub+0x1e0>
 80012ce:	2680      	movs	r6, #128	; 0x80
 80012d0:	2400      	movs	r4, #0
 80012d2:	22ff      	movs	r2, #255	; 0xff
 80012d4:	03f6      	lsls	r6, r6, #15
 80012d6:	e6ee      	b.n	80010b6 <__aeabi_fsub+0x96>
 80012d8:	000c      	movs	r4, r1
 80012da:	4643      	mov	r3, r8
 80012dc:	0015      	movs	r5, r2
 80012de:	e77c      	b.n	80011da <__aeabi_fsub+0x1ba>
 80012e0:	4663      	mov	r3, ip
 80012e2:	000c      	movs	r4, r1
 80012e4:	1ac6      	subs	r6, r0, r3
 80012e6:	e6c9      	b.n	800107c <__aeabi_fsub+0x5c>
 80012e8:	0003      	movs	r3, r0
 80012ea:	4463      	add	r3, ip
 80012ec:	2501      	movs	r5, #1
 80012ee:	015a      	lsls	r2, r3, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x2d4>
 80012f2:	e76e      	b.n	80011d2 <__aeabi_fsub+0x1b2>
 80012f4:	2502      	movs	r5, #2
 80012f6:	e6fa      	b.n	80010ee <__aeabi_fsub+0xce>
 80012f8:	4663      	mov	r3, ip
 80012fa:	2501      	movs	r5, #1
 80012fc:	1a1b      	subs	r3, r3, r0
 80012fe:	e6b8      	b.n	8001072 <__aeabi_fsub+0x52>
 8001300:	4664      	mov	r4, ip
 8001302:	2320      	movs	r3, #32
 8001304:	40d4      	lsrs	r4, r2
 8001306:	1a9b      	subs	r3, r3, r2
 8001308:	4662      	mov	r2, ip
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	1e5a      	subs	r2, r3, #1
 8001310:	4193      	sbcs	r3, r2
 8001312:	4323      	orrs	r3, r4
 8001314:	e7a2      	b.n	800125c <__aeabi_fsub+0x23c>
 8001316:	4643      	mov	r3, r8
 8001318:	e774      	b.n	8001204 <__aeabi_fsub+0x1e4>
 800131a:	4661      	mov	r1, ip
 800131c:	2320      	movs	r3, #32
 800131e:	40d1      	lsrs	r1, r2
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	4662      	mov	r2, ip
 8001324:	409a      	lsls	r2, r3
 8001326:	0013      	movs	r3, r2
 8001328:	1e5a      	subs	r2, r3, #1
 800132a:	4193      	sbcs	r3, r2
 800132c:	430b      	orrs	r3, r1
 800132e:	e720      	b.n	8001172 <__aeabi_fsub+0x152>
 8001330:	4663      	mov	r3, ip
 8001332:	000c      	movs	r4, r1
 8001334:	2501      	movs	r5, #1
 8001336:	1ac3      	subs	r3, r0, r3
 8001338:	e69b      	b.n	8001072 <__aeabi_fsub+0x52>
 800133a:	2800      	cmp	r0, #0
 800133c:	d099      	beq.n	8001272 <__aeabi_fsub+0x252>
 800133e:	000c      	movs	r4, r1
 8001340:	4646      	mov	r6, r8
 8001342:	2200      	movs	r2, #0
 8001344:	e6b7      	b.n	80010b6 <__aeabi_fsub+0x96>
 8001346:	4646      	mov	r6, r8
 8001348:	2200      	movs	r2, #0
 800134a:	e6b4      	b.n	80010b6 <__aeabi_fsub+0x96>
 800134c:	2b00      	cmp	r3, #0
 800134e:	d000      	beq.n	8001352 <__aeabi_fsub+0x332>
 8001350:	e73f      	b.n	80011d2 <__aeabi_fsub+0x1b2>
 8001352:	2400      	movs	r4, #0
 8001354:	2600      	movs	r6, #0
 8001356:	e6ae      	b.n	80010b6 <__aeabi_fsub+0x96>
 8001358:	fbffffff 	.word	0xfbffffff
 800135c:	7dffffff 	.word	0x7dffffff

08001360 <__aeabi_f2iz>:
 8001360:	0241      	lsls	r1, r0, #9
 8001362:	0042      	lsls	r2, r0, #1
 8001364:	0fc3      	lsrs	r3, r0, #31
 8001366:	0a49      	lsrs	r1, r1, #9
 8001368:	2000      	movs	r0, #0
 800136a:	0e12      	lsrs	r2, r2, #24
 800136c:	2a7e      	cmp	r2, #126	; 0x7e
 800136e:	dd03      	ble.n	8001378 <__aeabi_f2iz+0x18>
 8001370:	2a9d      	cmp	r2, #157	; 0x9d
 8001372:	dd02      	ble.n	800137a <__aeabi_f2iz+0x1a>
 8001374:	4a09      	ldr	r2, [pc, #36]	; (800139c <__aeabi_f2iz+0x3c>)
 8001376:	1898      	adds	r0, r3, r2
 8001378:	4770      	bx	lr
 800137a:	2080      	movs	r0, #128	; 0x80
 800137c:	0400      	lsls	r0, r0, #16
 800137e:	4301      	orrs	r1, r0
 8001380:	2a95      	cmp	r2, #149	; 0x95
 8001382:	dc07      	bgt.n	8001394 <__aeabi_f2iz+0x34>
 8001384:	2096      	movs	r0, #150	; 0x96
 8001386:	1a82      	subs	r2, r0, r2
 8001388:	40d1      	lsrs	r1, r2
 800138a:	4248      	negs	r0, r1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f3      	bne.n	8001378 <__aeabi_f2iz+0x18>
 8001390:	0008      	movs	r0, r1
 8001392:	e7f1      	b.n	8001378 <__aeabi_f2iz+0x18>
 8001394:	3a96      	subs	r2, #150	; 0x96
 8001396:	4091      	lsls	r1, r2
 8001398:	e7f7      	b.n	800138a <__aeabi_f2iz+0x2a>
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	7fffffff 	.word	0x7fffffff

080013a0 <__aeabi_i2f>:
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	2800      	cmp	r0, #0
 80013a4:	d013      	beq.n	80013ce <__aeabi_i2f+0x2e>
 80013a6:	17c3      	asrs	r3, r0, #31
 80013a8:	18c5      	adds	r5, r0, r3
 80013aa:	405d      	eors	r5, r3
 80013ac:	0fc4      	lsrs	r4, r0, #31
 80013ae:	0028      	movs	r0, r5
 80013b0:	f000 fc22 	bl	8001bf8 <__clzsi2>
 80013b4:	239e      	movs	r3, #158	; 0x9e
 80013b6:	0001      	movs	r1, r0
 80013b8:	1a1b      	subs	r3, r3, r0
 80013ba:	2b96      	cmp	r3, #150	; 0x96
 80013bc:	dc0f      	bgt.n	80013de <__aeabi_i2f+0x3e>
 80013be:	2808      	cmp	r0, #8
 80013c0:	d031      	beq.n	8001426 <__aeabi_i2f+0x86>
 80013c2:	3908      	subs	r1, #8
 80013c4:	408d      	lsls	r5, r1
 80013c6:	026d      	lsls	r5, r5, #9
 80013c8:	0a6d      	lsrs	r5, r5, #9
 80013ca:	b2d8      	uxtb	r0, r3
 80013cc:	e002      	b.n	80013d4 <__aeabi_i2f+0x34>
 80013ce:	2400      	movs	r4, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	2500      	movs	r5, #0
 80013d4:	05c0      	lsls	r0, r0, #23
 80013d6:	4328      	orrs	r0, r5
 80013d8:	07e4      	lsls	r4, r4, #31
 80013da:	4320      	orrs	r0, r4
 80013dc:	bd70      	pop	{r4, r5, r6, pc}
 80013de:	2b99      	cmp	r3, #153	; 0x99
 80013e0:	dd0c      	ble.n	80013fc <__aeabi_i2f+0x5c>
 80013e2:	2205      	movs	r2, #5
 80013e4:	1a12      	subs	r2, r2, r0
 80013e6:	0028      	movs	r0, r5
 80013e8:	40d0      	lsrs	r0, r2
 80013ea:	0002      	movs	r2, r0
 80013ec:	0008      	movs	r0, r1
 80013ee:	301b      	adds	r0, #27
 80013f0:	4085      	lsls	r5, r0
 80013f2:	0028      	movs	r0, r5
 80013f4:	1e45      	subs	r5, r0, #1
 80013f6:	41a8      	sbcs	r0, r5
 80013f8:	4302      	orrs	r2, r0
 80013fa:	0015      	movs	r5, r2
 80013fc:	2905      	cmp	r1, #5
 80013fe:	dc16      	bgt.n	800142e <__aeabi_i2f+0x8e>
 8001400:	002a      	movs	r2, r5
 8001402:	480f      	ldr	r0, [pc, #60]	; (8001440 <__aeabi_i2f+0xa0>)
 8001404:	4002      	ands	r2, r0
 8001406:	076e      	lsls	r6, r5, #29
 8001408:	d009      	beq.n	800141e <__aeabi_i2f+0x7e>
 800140a:	260f      	movs	r6, #15
 800140c:	4035      	ands	r5, r6
 800140e:	2d04      	cmp	r5, #4
 8001410:	d005      	beq.n	800141e <__aeabi_i2f+0x7e>
 8001412:	3204      	adds	r2, #4
 8001414:	0155      	lsls	r5, r2, #5
 8001416:	d502      	bpl.n	800141e <__aeabi_i2f+0x7e>
 8001418:	239f      	movs	r3, #159	; 0x9f
 800141a:	4002      	ands	r2, r0
 800141c:	1a5b      	subs	r3, r3, r1
 800141e:	0192      	lsls	r2, r2, #6
 8001420:	0a55      	lsrs	r5, r2, #9
 8001422:	b2d8      	uxtb	r0, r3
 8001424:	e7d6      	b.n	80013d4 <__aeabi_i2f+0x34>
 8001426:	026d      	lsls	r5, r5, #9
 8001428:	2096      	movs	r0, #150	; 0x96
 800142a:	0a6d      	lsrs	r5, r5, #9
 800142c:	e7d2      	b.n	80013d4 <__aeabi_i2f+0x34>
 800142e:	1f4a      	subs	r2, r1, #5
 8001430:	4095      	lsls	r5, r2
 8001432:	002a      	movs	r2, r5
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <__aeabi_i2f+0xa0>)
 8001436:	4002      	ands	r2, r0
 8001438:	076e      	lsls	r6, r5, #29
 800143a:	d0f0      	beq.n	800141e <__aeabi_i2f+0x7e>
 800143c:	e7e5      	b.n	800140a <__aeabi_i2f+0x6a>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	fbffffff 	.word	0xfbffffff

08001444 <__aeabi_ui2f>:
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	1e04      	subs	r4, r0, #0
 8001448:	d00e      	beq.n	8001468 <__aeabi_ui2f+0x24>
 800144a:	f000 fbd5 	bl	8001bf8 <__clzsi2>
 800144e:	239e      	movs	r3, #158	; 0x9e
 8001450:	0001      	movs	r1, r0
 8001452:	1a1b      	subs	r3, r3, r0
 8001454:	2b96      	cmp	r3, #150	; 0x96
 8001456:	dc0c      	bgt.n	8001472 <__aeabi_ui2f+0x2e>
 8001458:	2808      	cmp	r0, #8
 800145a:	d02c      	beq.n	80014b6 <__aeabi_ui2f+0x72>
 800145c:	3908      	subs	r1, #8
 800145e:	408c      	lsls	r4, r1
 8001460:	0264      	lsls	r4, r4, #9
 8001462:	0a64      	lsrs	r4, r4, #9
 8001464:	b2d8      	uxtb	r0, r3
 8001466:	e001      	b.n	800146c <__aeabi_ui2f+0x28>
 8001468:	2000      	movs	r0, #0
 800146a:	2400      	movs	r4, #0
 800146c:	05c0      	lsls	r0, r0, #23
 800146e:	4320      	orrs	r0, r4
 8001470:	bd70      	pop	{r4, r5, r6, pc}
 8001472:	2b99      	cmp	r3, #153	; 0x99
 8001474:	dd0a      	ble.n	800148c <__aeabi_ui2f+0x48>
 8001476:	0002      	movs	r2, r0
 8001478:	0020      	movs	r0, r4
 800147a:	321b      	adds	r2, #27
 800147c:	4090      	lsls	r0, r2
 800147e:	0002      	movs	r2, r0
 8001480:	1e50      	subs	r0, r2, #1
 8001482:	4182      	sbcs	r2, r0
 8001484:	2005      	movs	r0, #5
 8001486:	1a40      	subs	r0, r0, r1
 8001488:	40c4      	lsrs	r4, r0
 800148a:	4314      	orrs	r4, r2
 800148c:	2905      	cmp	r1, #5
 800148e:	dc16      	bgt.n	80014be <__aeabi_ui2f+0x7a>
 8001490:	0022      	movs	r2, r4
 8001492:	480f      	ldr	r0, [pc, #60]	; (80014d0 <__aeabi_ui2f+0x8c>)
 8001494:	4002      	ands	r2, r0
 8001496:	0765      	lsls	r5, r4, #29
 8001498:	d009      	beq.n	80014ae <__aeabi_ui2f+0x6a>
 800149a:	250f      	movs	r5, #15
 800149c:	402c      	ands	r4, r5
 800149e:	2c04      	cmp	r4, #4
 80014a0:	d005      	beq.n	80014ae <__aeabi_ui2f+0x6a>
 80014a2:	3204      	adds	r2, #4
 80014a4:	0154      	lsls	r4, r2, #5
 80014a6:	d502      	bpl.n	80014ae <__aeabi_ui2f+0x6a>
 80014a8:	239f      	movs	r3, #159	; 0x9f
 80014aa:	4002      	ands	r2, r0
 80014ac:	1a5b      	subs	r3, r3, r1
 80014ae:	0192      	lsls	r2, r2, #6
 80014b0:	0a54      	lsrs	r4, r2, #9
 80014b2:	b2d8      	uxtb	r0, r3
 80014b4:	e7da      	b.n	800146c <__aeabi_ui2f+0x28>
 80014b6:	0264      	lsls	r4, r4, #9
 80014b8:	2096      	movs	r0, #150	; 0x96
 80014ba:	0a64      	lsrs	r4, r4, #9
 80014bc:	e7d6      	b.n	800146c <__aeabi_ui2f+0x28>
 80014be:	1f4a      	subs	r2, r1, #5
 80014c0:	4094      	lsls	r4, r2
 80014c2:	0022      	movs	r2, r4
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <__aeabi_ui2f+0x8c>)
 80014c6:	4002      	ands	r2, r0
 80014c8:	0765      	lsls	r5, r4, #29
 80014ca:	d0f0      	beq.n	80014ae <__aeabi_ui2f+0x6a>
 80014cc:	e7e5      	b.n	800149a <__aeabi_ui2f+0x56>
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	fbffffff 	.word	0xfbffffff

080014d4 <__aeabi_ddiv>:
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	4657      	mov	r7, sl
 80014d8:	464e      	mov	r6, r9
 80014da:	4645      	mov	r5, r8
 80014dc:	46de      	mov	lr, fp
 80014de:	b5e0      	push	{r5, r6, r7, lr}
 80014e0:	030c      	lsls	r4, r1, #12
 80014e2:	001f      	movs	r7, r3
 80014e4:	004b      	lsls	r3, r1, #1
 80014e6:	4681      	mov	r9, r0
 80014e8:	4692      	mov	sl, r2
 80014ea:	0005      	movs	r5, r0
 80014ec:	b085      	sub	sp, #20
 80014ee:	0b24      	lsrs	r4, r4, #12
 80014f0:	0d5b      	lsrs	r3, r3, #21
 80014f2:	0fce      	lsrs	r6, r1, #31
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d100      	bne.n	80014fa <__aeabi_ddiv+0x26>
 80014f8:	e152      	b.n	80017a0 <__aeabi_ddiv+0x2cc>
 80014fa:	4ad2      	ldr	r2, [pc, #840]	; (8001844 <__aeabi_ddiv+0x370>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d100      	bne.n	8001502 <__aeabi_ddiv+0x2e>
 8001500:	e16e      	b.n	80017e0 <__aeabi_ddiv+0x30c>
 8001502:	0f42      	lsrs	r2, r0, #29
 8001504:	00e4      	lsls	r4, r4, #3
 8001506:	4314      	orrs	r4, r2
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	0412      	lsls	r2, r2, #16
 800150c:	4322      	orrs	r2, r4
 800150e:	4690      	mov	r8, r2
 8001510:	4acd      	ldr	r2, [pc, #820]	; (8001848 <__aeabi_ddiv+0x374>)
 8001512:	00c5      	lsls	r5, r0, #3
 8001514:	4693      	mov	fp, r2
 8001516:	449b      	add	fp, r3
 8001518:	2300      	movs	r3, #0
 800151a:	4699      	mov	r9, r3
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	033c      	lsls	r4, r7, #12
 8001520:	007b      	lsls	r3, r7, #1
 8001522:	4650      	mov	r0, sl
 8001524:	0b24      	lsrs	r4, r4, #12
 8001526:	0d5b      	lsrs	r3, r3, #21
 8001528:	0fff      	lsrs	r7, r7, #31
 800152a:	2b00      	cmp	r3, #0
 800152c:	d100      	bne.n	8001530 <__aeabi_ddiv+0x5c>
 800152e:	e11a      	b.n	8001766 <__aeabi_ddiv+0x292>
 8001530:	4ac4      	ldr	r2, [pc, #784]	; (8001844 <__aeabi_ddiv+0x370>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d100      	bne.n	8001538 <__aeabi_ddiv+0x64>
 8001536:	e15e      	b.n	80017f6 <__aeabi_ddiv+0x322>
 8001538:	0f42      	lsrs	r2, r0, #29
 800153a:	00e4      	lsls	r4, r4, #3
 800153c:	4322      	orrs	r2, r4
 800153e:	2480      	movs	r4, #128	; 0x80
 8001540:	0424      	lsls	r4, r4, #16
 8001542:	4314      	orrs	r4, r2
 8001544:	4ac0      	ldr	r2, [pc, #768]	; (8001848 <__aeabi_ddiv+0x374>)
 8001546:	00c1      	lsls	r1, r0, #3
 8001548:	4694      	mov	ip, r2
 800154a:	465a      	mov	r2, fp
 800154c:	4463      	add	r3, ip
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	469b      	mov	fp, r3
 8001552:	2000      	movs	r0, #0
 8001554:	0033      	movs	r3, r6
 8001556:	407b      	eors	r3, r7
 8001558:	469a      	mov	sl, r3
 800155a:	464b      	mov	r3, r9
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d827      	bhi.n	80015b0 <__aeabi_ddiv+0xdc>
 8001560:	4aba      	ldr	r2, [pc, #744]	; (800184c <__aeabi_ddiv+0x378>)
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	58d3      	ldr	r3, [r2, r3]
 8001566:	469f      	mov	pc, r3
 8001568:	46b2      	mov	sl, r6
 800156a:	9b00      	ldr	r3, [sp, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d016      	beq.n	800159e <__aeabi_ddiv+0xca>
 8001570:	2b03      	cmp	r3, #3
 8001572:	d100      	bne.n	8001576 <__aeabi_ddiv+0xa2>
 8001574:	e287      	b.n	8001a86 <__aeabi_ddiv+0x5b2>
 8001576:	2b01      	cmp	r3, #1
 8001578:	d000      	beq.n	800157c <__aeabi_ddiv+0xa8>
 800157a:	e0d5      	b.n	8001728 <__aeabi_ddiv+0x254>
 800157c:	2300      	movs	r3, #0
 800157e:	2200      	movs	r2, #0
 8001580:	2500      	movs	r5, #0
 8001582:	051b      	lsls	r3, r3, #20
 8001584:	4313      	orrs	r3, r2
 8001586:	4652      	mov	r2, sl
 8001588:	07d2      	lsls	r2, r2, #31
 800158a:	4313      	orrs	r3, r2
 800158c:	0028      	movs	r0, r5
 800158e:	0019      	movs	r1, r3
 8001590:	b005      	add	sp, #20
 8001592:	bcf0      	pop	{r4, r5, r6, r7}
 8001594:	46bb      	mov	fp, r7
 8001596:	46b2      	mov	sl, r6
 8001598:	46a9      	mov	r9, r5
 800159a:	46a0      	mov	r8, r4
 800159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159e:	2200      	movs	r2, #0
 80015a0:	2500      	movs	r5, #0
 80015a2:	4ba8      	ldr	r3, [pc, #672]	; (8001844 <__aeabi_ddiv+0x370>)
 80015a4:	e7ed      	b.n	8001582 <__aeabi_ddiv+0xae>
 80015a6:	46ba      	mov	sl, r7
 80015a8:	46a0      	mov	r8, r4
 80015aa:	000d      	movs	r5, r1
 80015ac:	9000      	str	r0, [sp, #0]
 80015ae:	e7dc      	b.n	800156a <__aeabi_ddiv+0x96>
 80015b0:	4544      	cmp	r4, r8
 80015b2:	d200      	bcs.n	80015b6 <__aeabi_ddiv+0xe2>
 80015b4:	e1c4      	b.n	8001940 <__aeabi_ddiv+0x46c>
 80015b6:	d100      	bne.n	80015ba <__aeabi_ddiv+0xe6>
 80015b8:	e1bf      	b.n	800193a <__aeabi_ddiv+0x466>
 80015ba:	2301      	movs	r3, #1
 80015bc:	425b      	negs	r3, r3
 80015be:	469c      	mov	ip, r3
 80015c0:	002e      	movs	r6, r5
 80015c2:	4640      	mov	r0, r8
 80015c4:	2500      	movs	r5, #0
 80015c6:	44e3      	add	fp, ip
 80015c8:	0223      	lsls	r3, r4, #8
 80015ca:	0e0c      	lsrs	r4, r1, #24
 80015cc:	431c      	orrs	r4, r3
 80015ce:	0c1b      	lsrs	r3, r3, #16
 80015d0:	4699      	mov	r9, r3
 80015d2:	0423      	lsls	r3, r4, #16
 80015d4:	020a      	lsls	r2, r1, #8
 80015d6:	0c1f      	lsrs	r7, r3, #16
 80015d8:	4649      	mov	r1, r9
 80015da:	9200      	str	r2, [sp, #0]
 80015dc:	9701      	str	r7, [sp, #4]
 80015de:	f7fe fe23 	bl	8000228 <__aeabi_uidivmod>
 80015e2:	0002      	movs	r2, r0
 80015e4:	437a      	muls	r2, r7
 80015e6:	040b      	lsls	r3, r1, #16
 80015e8:	0c31      	lsrs	r1, r6, #16
 80015ea:	4680      	mov	r8, r0
 80015ec:	4319      	orrs	r1, r3
 80015ee:	428a      	cmp	r2, r1
 80015f0:	d907      	bls.n	8001602 <__aeabi_ddiv+0x12e>
 80015f2:	2301      	movs	r3, #1
 80015f4:	425b      	negs	r3, r3
 80015f6:	469c      	mov	ip, r3
 80015f8:	1909      	adds	r1, r1, r4
 80015fa:	44e0      	add	r8, ip
 80015fc:	428c      	cmp	r4, r1
 80015fe:	d800      	bhi.n	8001602 <__aeabi_ddiv+0x12e>
 8001600:	e201      	b.n	8001a06 <__aeabi_ddiv+0x532>
 8001602:	1a88      	subs	r0, r1, r2
 8001604:	4649      	mov	r1, r9
 8001606:	f7fe fe0f 	bl	8000228 <__aeabi_uidivmod>
 800160a:	9a01      	ldr	r2, [sp, #4]
 800160c:	0436      	lsls	r6, r6, #16
 800160e:	4342      	muls	r2, r0
 8001610:	0409      	lsls	r1, r1, #16
 8001612:	0c36      	lsrs	r6, r6, #16
 8001614:	0003      	movs	r3, r0
 8001616:	430e      	orrs	r6, r1
 8001618:	42b2      	cmp	r2, r6
 800161a:	d904      	bls.n	8001626 <__aeabi_ddiv+0x152>
 800161c:	1936      	adds	r6, r6, r4
 800161e:	3b01      	subs	r3, #1
 8001620:	42b4      	cmp	r4, r6
 8001622:	d800      	bhi.n	8001626 <__aeabi_ddiv+0x152>
 8001624:	e1e9      	b.n	80019fa <__aeabi_ddiv+0x526>
 8001626:	1ab0      	subs	r0, r6, r2
 8001628:	4642      	mov	r2, r8
 800162a:	9e00      	ldr	r6, [sp, #0]
 800162c:	0412      	lsls	r2, r2, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	0c33      	lsrs	r3, r6, #16
 8001632:	001f      	movs	r7, r3
 8001634:	0c11      	lsrs	r1, r2, #16
 8001636:	4690      	mov	r8, r2
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	0413      	lsls	r3, r2, #16
 800163c:	0432      	lsls	r2, r6, #16
 800163e:	0c16      	lsrs	r6, r2, #16
 8001640:	0032      	movs	r2, r6
 8001642:	0c1b      	lsrs	r3, r3, #16
 8001644:	435a      	muls	r2, r3
 8001646:	9603      	str	r6, [sp, #12]
 8001648:	437b      	muls	r3, r7
 800164a:	434e      	muls	r6, r1
 800164c:	4379      	muls	r1, r7
 800164e:	0c17      	lsrs	r7, r2, #16
 8001650:	46bc      	mov	ip, r7
 8001652:	199b      	adds	r3, r3, r6
 8001654:	4463      	add	r3, ip
 8001656:	429e      	cmp	r6, r3
 8001658:	d903      	bls.n	8001662 <__aeabi_ddiv+0x18e>
 800165a:	2680      	movs	r6, #128	; 0x80
 800165c:	0276      	lsls	r6, r6, #9
 800165e:	46b4      	mov	ip, r6
 8001660:	4461      	add	r1, ip
 8001662:	0c1e      	lsrs	r6, r3, #16
 8001664:	1871      	adds	r1, r6, r1
 8001666:	0416      	lsls	r6, r2, #16
 8001668:	041b      	lsls	r3, r3, #16
 800166a:	0c36      	lsrs	r6, r6, #16
 800166c:	199e      	adds	r6, r3, r6
 800166e:	4288      	cmp	r0, r1
 8001670:	d302      	bcc.n	8001678 <__aeabi_ddiv+0x1a4>
 8001672:	d112      	bne.n	800169a <__aeabi_ddiv+0x1c6>
 8001674:	42b5      	cmp	r5, r6
 8001676:	d210      	bcs.n	800169a <__aeabi_ddiv+0x1c6>
 8001678:	4643      	mov	r3, r8
 800167a:	1e5a      	subs	r2, r3, #1
 800167c:	9b00      	ldr	r3, [sp, #0]
 800167e:	469c      	mov	ip, r3
 8001680:	4465      	add	r5, ip
 8001682:	001f      	movs	r7, r3
 8001684:	429d      	cmp	r5, r3
 8001686:	419b      	sbcs	r3, r3
 8001688:	425b      	negs	r3, r3
 800168a:	191b      	adds	r3, r3, r4
 800168c:	18c0      	adds	r0, r0, r3
 800168e:	4284      	cmp	r4, r0
 8001690:	d200      	bcs.n	8001694 <__aeabi_ddiv+0x1c0>
 8001692:	e19e      	b.n	80019d2 <__aeabi_ddiv+0x4fe>
 8001694:	d100      	bne.n	8001698 <__aeabi_ddiv+0x1c4>
 8001696:	e199      	b.n	80019cc <__aeabi_ddiv+0x4f8>
 8001698:	4690      	mov	r8, r2
 800169a:	1bae      	subs	r6, r5, r6
 800169c:	42b5      	cmp	r5, r6
 800169e:	41ad      	sbcs	r5, r5
 80016a0:	1a40      	subs	r0, r0, r1
 80016a2:	426d      	negs	r5, r5
 80016a4:	1b40      	subs	r0, r0, r5
 80016a6:	4284      	cmp	r4, r0
 80016a8:	d100      	bne.n	80016ac <__aeabi_ddiv+0x1d8>
 80016aa:	e1d2      	b.n	8001a52 <__aeabi_ddiv+0x57e>
 80016ac:	4649      	mov	r1, r9
 80016ae:	f7fe fdbb 	bl	8000228 <__aeabi_uidivmod>
 80016b2:	9a01      	ldr	r2, [sp, #4]
 80016b4:	040b      	lsls	r3, r1, #16
 80016b6:	4342      	muls	r2, r0
 80016b8:	0c31      	lsrs	r1, r6, #16
 80016ba:	0005      	movs	r5, r0
 80016bc:	4319      	orrs	r1, r3
 80016be:	428a      	cmp	r2, r1
 80016c0:	d900      	bls.n	80016c4 <__aeabi_ddiv+0x1f0>
 80016c2:	e16c      	b.n	800199e <__aeabi_ddiv+0x4ca>
 80016c4:	1a88      	subs	r0, r1, r2
 80016c6:	4649      	mov	r1, r9
 80016c8:	f7fe fdae 	bl	8000228 <__aeabi_uidivmod>
 80016cc:	9a01      	ldr	r2, [sp, #4]
 80016ce:	0436      	lsls	r6, r6, #16
 80016d0:	4342      	muls	r2, r0
 80016d2:	0409      	lsls	r1, r1, #16
 80016d4:	0c36      	lsrs	r6, r6, #16
 80016d6:	0003      	movs	r3, r0
 80016d8:	430e      	orrs	r6, r1
 80016da:	42b2      	cmp	r2, r6
 80016dc:	d900      	bls.n	80016e0 <__aeabi_ddiv+0x20c>
 80016de:	e153      	b.n	8001988 <__aeabi_ddiv+0x4b4>
 80016e0:	9803      	ldr	r0, [sp, #12]
 80016e2:	1ab6      	subs	r6, r6, r2
 80016e4:	0002      	movs	r2, r0
 80016e6:	042d      	lsls	r5, r5, #16
 80016e8:	431d      	orrs	r5, r3
 80016ea:	9f02      	ldr	r7, [sp, #8]
 80016ec:	042b      	lsls	r3, r5, #16
 80016ee:	0c1b      	lsrs	r3, r3, #16
 80016f0:	435a      	muls	r2, r3
 80016f2:	437b      	muls	r3, r7
 80016f4:	469c      	mov	ip, r3
 80016f6:	0c29      	lsrs	r1, r5, #16
 80016f8:	4348      	muls	r0, r1
 80016fa:	0c13      	lsrs	r3, r2, #16
 80016fc:	4484      	add	ip, r0
 80016fe:	4463      	add	r3, ip
 8001700:	4379      	muls	r1, r7
 8001702:	4298      	cmp	r0, r3
 8001704:	d903      	bls.n	800170e <__aeabi_ddiv+0x23a>
 8001706:	2080      	movs	r0, #128	; 0x80
 8001708:	0240      	lsls	r0, r0, #9
 800170a:	4684      	mov	ip, r0
 800170c:	4461      	add	r1, ip
 800170e:	0c18      	lsrs	r0, r3, #16
 8001710:	0412      	lsls	r2, r2, #16
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	0c12      	lsrs	r2, r2, #16
 8001716:	1840      	adds	r0, r0, r1
 8001718:	189b      	adds	r3, r3, r2
 800171a:	4286      	cmp	r6, r0
 800171c:	d200      	bcs.n	8001720 <__aeabi_ddiv+0x24c>
 800171e:	e100      	b.n	8001922 <__aeabi_ddiv+0x44e>
 8001720:	d100      	bne.n	8001724 <__aeabi_ddiv+0x250>
 8001722:	e0fb      	b.n	800191c <__aeabi_ddiv+0x448>
 8001724:	2301      	movs	r3, #1
 8001726:	431d      	orrs	r5, r3
 8001728:	4b49      	ldr	r3, [pc, #292]	; (8001850 <__aeabi_ddiv+0x37c>)
 800172a:	445b      	add	r3, fp
 800172c:	2b00      	cmp	r3, #0
 800172e:	dc00      	bgt.n	8001732 <__aeabi_ddiv+0x25e>
 8001730:	e0aa      	b.n	8001888 <__aeabi_ddiv+0x3b4>
 8001732:	076a      	lsls	r2, r5, #29
 8001734:	d000      	beq.n	8001738 <__aeabi_ddiv+0x264>
 8001736:	e13d      	b.n	80019b4 <__aeabi_ddiv+0x4e0>
 8001738:	08e9      	lsrs	r1, r5, #3
 800173a:	4642      	mov	r2, r8
 800173c:	01d2      	lsls	r2, r2, #7
 800173e:	d506      	bpl.n	800174e <__aeabi_ddiv+0x27a>
 8001740:	4642      	mov	r2, r8
 8001742:	4b44      	ldr	r3, [pc, #272]	; (8001854 <__aeabi_ddiv+0x380>)
 8001744:	401a      	ands	r2, r3
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	4690      	mov	r8, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	445b      	add	r3, fp
 800174e:	4a42      	ldr	r2, [pc, #264]	; (8001858 <__aeabi_ddiv+0x384>)
 8001750:	4293      	cmp	r3, r2
 8001752:	dd00      	ble.n	8001756 <__aeabi_ddiv+0x282>
 8001754:	e723      	b.n	800159e <__aeabi_ddiv+0xca>
 8001756:	4642      	mov	r2, r8
 8001758:	055b      	lsls	r3, r3, #21
 800175a:	0755      	lsls	r5, r2, #29
 800175c:	0252      	lsls	r2, r2, #9
 800175e:	430d      	orrs	r5, r1
 8001760:	0b12      	lsrs	r2, r2, #12
 8001762:	0d5b      	lsrs	r3, r3, #21
 8001764:	e70d      	b.n	8001582 <__aeabi_ddiv+0xae>
 8001766:	4651      	mov	r1, sl
 8001768:	4321      	orrs	r1, r4
 800176a:	d100      	bne.n	800176e <__aeabi_ddiv+0x29a>
 800176c:	e07c      	b.n	8001868 <__aeabi_ddiv+0x394>
 800176e:	2c00      	cmp	r4, #0
 8001770:	d100      	bne.n	8001774 <__aeabi_ddiv+0x2a0>
 8001772:	e0fb      	b.n	800196c <__aeabi_ddiv+0x498>
 8001774:	0020      	movs	r0, r4
 8001776:	f000 fa3f 	bl	8001bf8 <__clzsi2>
 800177a:	0002      	movs	r2, r0
 800177c:	3a0b      	subs	r2, #11
 800177e:	231d      	movs	r3, #29
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	4652      	mov	r2, sl
 8001784:	0001      	movs	r1, r0
 8001786:	40da      	lsrs	r2, r3
 8001788:	4653      	mov	r3, sl
 800178a:	3908      	subs	r1, #8
 800178c:	408b      	lsls	r3, r1
 800178e:	408c      	lsls	r4, r1
 8001790:	0019      	movs	r1, r3
 8001792:	4314      	orrs	r4, r2
 8001794:	4b31      	ldr	r3, [pc, #196]	; (800185c <__aeabi_ddiv+0x388>)
 8001796:	4458      	add	r0, fp
 8001798:	469b      	mov	fp, r3
 800179a:	4483      	add	fp, r0
 800179c:	2000      	movs	r0, #0
 800179e:	e6d9      	b.n	8001554 <__aeabi_ddiv+0x80>
 80017a0:	0003      	movs	r3, r0
 80017a2:	4323      	orrs	r3, r4
 80017a4:	4698      	mov	r8, r3
 80017a6:	d044      	beq.n	8001832 <__aeabi_ddiv+0x35e>
 80017a8:	2c00      	cmp	r4, #0
 80017aa:	d100      	bne.n	80017ae <__aeabi_ddiv+0x2da>
 80017ac:	e0cf      	b.n	800194e <__aeabi_ddiv+0x47a>
 80017ae:	0020      	movs	r0, r4
 80017b0:	f000 fa22 	bl	8001bf8 <__clzsi2>
 80017b4:	0001      	movs	r1, r0
 80017b6:	0002      	movs	r2, r0
 80017b8:	390b      	subs	r1, #11
 80017ba:	231d      	movs	r3, #29
 80017bc:	1a5b      	subs	r3, r3, r1
 80017be:	4649      	mov	r1, r9
 80017c0:	0010      	movs	r0, r2
 80017c2:	40d9      	lsrs	r1, r3
 80017c4:	3808      	subs	r0, #8
 80017c6:	4084      	lsls	r4, r0
 80017c8:	000b      	movs	r3, r1
 80017ca:	464d      	mov	r5, r9
 80017cc:	4323      	orrs	r3, r4
 80017ce:	4698      	mov	r8, r3
 80017d0:	4085      	lsls	r5, r0
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <__aeabi_ddiv+0x38c>)
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	469b      	mov	fp, r3
 80017d8:	2300      	movs	r3, #0
 80017da:	4699      	mov	r9, r3
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	e69e      	b.n	800151e <__aeabi_ddiv+0x4a>
 80017e0:	0002      	movs	r2, r0
 80017e2:	4322      	orrs	r2, r4
 80017e4:	4690      	mov	r8, r2
 80017e6:	d11d      	bne.n	8001824 <__aeabi_ddiv+0x350>
 80017e8:	2208      	movs	r2, #8
 80017ea:	469b      	mov	fp, r3
 80017ec:	2302      	movs	r3, #2
 80017ee:	2500      	movs	r5, #0
 80017f0:	4691      	mov	r9, r2
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	e693      	b.n	800151e <__aeabi_ddiv+0x4a>
 80017f6:	4651      	mov	r1, sl
 80017f8:	4321      	orrs	r1, r4
 80017fa:	d109      	bne.n	8001810 <__aeabi_ddiv+0x33c>
 80017fc:	2302      	movs	r3, #2
 80017fe:	464a      	mov	r2, r9
 8001800:	431a      	orrs	r2, r3
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <__aeabi_ddiv+0x390>)
 8001804:	4691      	mov	r9, r2
 8001806:	469c      	mov	ip, r3
 8001808:	2400      	movs	r4, #0
 800180a:	2002      	movs	r0, #2
 800180c:	44e3      	add	fp, ip
 800180e:	e6a1      	b.n	8001554 <__aeabi_ddiv+0x80>
 8001810:	2303      	movs	r3, #3
 8001812:	464a      	mov	r2, r9
 8001814:	431a      	orrs	r2, r3
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <__aeabi_ddiv+0x390>)
 8001818:	4691      	mov	r9, r2
 800181a:	469c      	mov	ip, r3
 800181c:	4651      	mov	r1, sl
 800181e:	2003      	movs	r0, #3
 8001820:	44e3      	add	fp, ip
 8001822:	e697      	b.n	8001554 <__aeabi_ddiv+0x80>
 8001824:	220c      	movs	r2, #12
 8001826:	469b      	mov	fp, r3
 8001828:	2303      	movs	r3, #3
 800182a:	46a0      	mov	r8, r4
 800182c:	4691      	mov	r9, r2
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	e675      	b.n	800151e <__aeabi_ddiv+0x4a>
 8001832:	2304      	movs	r3, #4
 8001834:	4699      	mov	r9, r3
 8001836:	2300      	movs	r3, #0
 8001838:	469b      	mov	fp, r3
 800183a:	3301      	adds	r3, #1
 800183c:	2500      	movs	r5, #0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	e66d      	b.n	800151e <__aeabi_ddiv+0x4a>
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	000007ff 	.word	0x000007ff
 8001848:	fffffc01 	.word	0xfffffc01
 800184c:	08006efc 	.word	0x08006efc
 8001850:	000003ff 	.word	0x000003ff
 8001854:	feffffff 	.word	0xfeffffff
 8001858:	000007fe 	.word	0x000007fe
 800185c:	000003f3 	.word	0x000003f3
 8001860:	fffffc0d 	.word	0xfffffc0d
 8001864:	fffff801 	.word	0xfffff801
 8001868:	464a      	mov	r2, r9
 800186a:	2301      	movs	r3, #1
 800186c:	431a      	orrs	r2, r3
 800186e:	4691      	mov	r9, r2
 8001870:	2400      	movs	r4, #0
 8001872:	2001      	movs	r0, #1
 8001874:	e66e      	b.n	8001554 <__aeabi_ddiv+0x80>
 8001876:	2300      	movs	r3, #0
 8001878:	2280      	movs	r2, #128	; 0x80
 800187a:	469a      	mov	sl, r3
 800187c:	2500      	movs	r5, #0
 800187e:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <__aeabi_ddiv+0x5cc>)
 8001880:	0312      	lsls	r2, r2, #12
 8001882:	e67e      	b.n	8001582 <__aeabi_ddiv+0xae>
 8001884:	2501      	movs	r5, #1
 8001886:	426d      	negs	r5, r5
 8001888:	2201      	movs	r2, #1
 800188a:	1ad2      	subs	r2, r2, r3
 800188c:	2a38      	cmp	r2, #56	; 0x38
 800188e:	dd00      	ble.n	8001892 <__aeabi_ddiv+0x3be>
 8001890:	e674      	b.n	800157c <__aeabi_ddiv+0xa8>
 8001892:	2a1f      	cmp	r2, #31
 8001894:	dc00      	bgt.n	8001898 <__aeabi_ddiv+0x3c4>
 8001896:	e0bd      	b.n	8001a14 <__aeabi_ddiv+0x540>
 8001898:	211f      	movs	r1, #31
 800189a:	4249      	negs	r1, r1
 800189c:	1acb      	subs	r3, r1, r3
 800189e:	4641      	mov	r1, r8
 80018a0:	40d9      	lsrs	r1, r3
 80018a2:	000b      	movs	r3, r1
 80018a4:	2a20      	cmp	r2, #32
 80018a6:	d004      	beq.n	80018b2 <__aeabi_ddiv+0x3de>
 80018a8:	4641      	mov	r1, r8
 80018aa:	4a7e      	ldr	r2, [pc, #504]	; (8001aa4 <__aeabi_ddiv+0x5d0>)
 80018ac:	445a      	add	r2, fp
 80018ae:	4091      	lsls	r1, r2
 80018b0:	430d      	orrs	r5, r1
 80018b2:	0029      	movs	r1, r5
 80018b4:	1e4a      	subs	r2, r1, #1
 80018b6:	4191      	sbcs	r1, r2
 80018b8:	4319      	orrs	r1, r3
 80018ba:	2307      	movs	r3, #7
 80018bc:	001d      	movs	r5, r3
 80018be:	2200      	movs	r2, #0
 80018c0:	400d      	ands	r5, r1
 80018c2:	420b      	tst	r3, r1
 80018c4:	d100      	bne.n	80018c8 <__aeabi_ddiv+0x3f4>
 80018c6:	e0d0      	b.n	8001a6a <__aeabi_ddiv+0x596>
 80018c8:	220f      	movs	r2, #15
 80018ca:	2300      	movs	r3, #0
 80018cc:	400a      	ands	r2, r1
 80018ce:	2a04      	cmp	r2, #4
 80018d0:	d100      	bne.n	80018d4 <__aeabi_ddiv+0x400>
 80018d2:	e0c7      	b.n	8001a64 <__aeabi_ddiv+0x590>
 80018d4:	1d0a      	adds	r2, r1, #4
 80018d6:	428a      	cmp	r2, r1
 80018d8:	4189      	sbcs	r1, r1
 80018da:	4249      	negs	r1, r1
 80018dc:	185b      	adds	r3, r3, r1
 80018de:	0011      	movs	r1, r2
 80018e0:	021a      	lsls	r2, r3, #8
 80018e2:	d400      	bmi.n	80018e6 <__aeabi_ddiv+0x412>
 80018e4:	e0be      	b.n	8001a64 <__aeabi_ddiv+0x590>
 80018e6:	2301      	movs	r3, #1
 80018e8:	2200      	movs	r2, #0
 80018ea:	2500      	movs	r5, #0
 80018ec:	e649      	b.n	8001582 <__aeabi_ddiv+0xae>
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	4643      	mov	r3, r8
 80018f2:	0312      	lsls	r2, r2, #12
 80018f4:	4213      	tst	r3, r2
 80018f6:	d008      	beq.n	800190a <__aeabi_ddiv+0x436>
 80018f8:	4214      	tst	r4, r2
 80018fa:	d106      	bne.n	800190a <__aeabi_ddiv+0x436>
 80018fc:	4322      	orrs	r2, r4
 80018fe:	0312      	lsls	r2, r2, #12
 8001900:	46ba      	mov	sl, r7
 8001902:	000d      	movs	r5, r1
 8001904:	4b66      	ldr	r3, [pc, #408]	; (8001aa0 <__aeabi_ddiv+0x5cc>)
 8001906:	0b12      	lsrs	r2, r2, #12
 8001908:	e63b      	b.n	8001582 <__aeabi_ddiv+0xae>
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	4643      	mov	r3, r8
 800190e:	0312      	lsls	r2, r2, #12
 8001910:	431a      	orrs	r2, r3
 8001912:	0312      	lsls	r2, r2, #12
 8001914:	46b2      	mov	sl, r6
 8001916:	4b62      	ldr	r3, [pc, #392]	; (8001aa0 <__aeabi_ddiv+0x5cc>)
 8001918:	0b12      	lsrs	r2, r2, #12
 800191a:	e632      	b.n	8001582 <__aeabi_ddiv+0xae>
 800191c:	2b00      	cmp	r3, #0
 800191e:	d100      	bne.n	8001922 <__aeabi_ddiv+0x44e>
 8001920:	e702      	b.n	8001728 <__aeabi_ddiv+0x254>
 8001922:	19a6      	adds	r6, r4, r6
 8001924:	1e6a      	subs	r2, r5, #1
 8001926:	42a6      	cmp	r6, r4
 8001928:	d200      	bcs.n	800192c <__aeabi_ddiv+0x458>
 800192a:	e089      	b.n	8001a40 <__aeabi_ddiv+0x56c>
 800192c:	4286      	cmp	r6, r0
 800192e:	d200      	bcs.n	8001932 <__aeabi_ddiv+0x45e>
 8001930:	e09f      	b.n	8001a72 <__aeabi_ddiv+0x59e>
 8001932:	d100      	bne.n	8001936 <__aeabi_ddiv+0x462>
 8001934:	e0af      	b.n	8001a96 <__aeabi_ddiv+0x5c2>
 8001936:	0015      	movs	r5, r2
 8001938:	e6f4      	b.n	8001724 <__aeabi_ddiv+0x250>
 800193a:	42a9      	cmp	r1, r5
 800193c:	d900      	bls.n	8001940 <__aeabi_ddiv+0x46c>
 800193e:	e63c      	b.n	80015ba <__aeabi_ddiv+0xe6>
 8001940:	4643      	mov	r3, r8
 8001942:	07de      	lsls	r6, r3, #31
 8001944:	0858      	lsrs	r0, r3, #1
 8001946:	086b      	lsrs	r3, r5, #1
 8001948:	431e      	orrs	r6, r3
 800194a:	07ed      	lsls	r5, r5, #31
 800194c:	e63c      	b.n	80015c8 <__aeabi_ddiv+0xf4>
 800194e:	f000 f953 	bl	8001bf8 <__clzsi2>
 8001952:	0001      	movs	r1, r0
 8001954:	0002      	movs	r2, r0
 8001956:	3115      	adds	r1, #21
 8001958:	3220      	adds	r2, #32
 800195a:	291c      	cmp	r1, #28
 800195c:	dc00      	bgt.n	8001960 <__aeabi_ddiv+0x48c>
 800195e:	e72c      	b.n	80017ba <__aeabi_ddiv+0x2e6>
 8001960:	464b      	mov	r3, r9
 8001962:	3808      	subs	r0, #8
 8001964:	4083      	lsls	r3, r0
 8001966:	2500      	movs	r5, #0
 8001968:	4698      	mov	r8, r3
 800196a:	e732      	b.n	80017d2 <__aeabi_ddiv+0x2fe>
 800196c:	f000 f944 	bl	8001bf8 <__clzsi2>
 8001970:	0003      	movs	r3, r0
 8001972:	001a      	movs	r2, r3
 8001974:	3215      	adds	r2, #21
 8001976:	3020      	adds	r0, #32
 8001978:	2a1c      	cmp	r2, #28
 800197a:	dc00      	bgt.n	800197e <__aeabi_ddiv+0x4aa>
 800197c:	e6ff      	b.n	800177e <__aeabi_ddiv+0x2aa>
 800197e:	4654      	mov	r4, sl
 8001980:	3b08      	subs	r3, #8
 8001982:	2100      	movs	r1, #0
 8001984:	409c      	lsls	r4, r3
 8001986:	e705      	b.n	8001794 <__aeabi_ddiv+0x2c0>
 8001988:	1936      	adds	r6, r6, r4
 800198a:	3b01      	subs	r3, #1
 800198c:	42b4      	cmp	r4, r6
 800198e:	d900      	bls.n	8001992 <__aeabi_ddiv+0x4be>
 8001990:	e6a6      	b.n	80016e0 <__aeabi_ddiv+0x20c>
 8001992:	42b2      	cmp	r2, r6
 8001994:	d800      	bhi.n	8001998 <__aeabi_ddiv+0x4c4>
 8001996:	e6a3      	b.n	80016e0 <__aeabi_ddiv+0x20c>
 8001998:	1e83      	subs	r3, r0, #2
 800199a:	1936      	adds	r6, r6, r4
 800199c:	e6a0      	b.n	80016e0 <__aeabi_ddiv+0x20c>
 800199e:	1909      	adds	r1, r1, r4
 80019a0:	3d01      	subs	r5, #1
 80019a2:	428c      	cmp	r4, r1
 80019a4:	d900      	bls.n	80019a8 <__aeabi_ddiv+0x4d4>
 80019a6:	e68d      	b.n	80016c4 <__aeabi_ddiv+0x1f0>
 80019a8:	428a      	cmp	r2, r1
 80019aa:	d800      	bhi.n	80019ae <__aeabi_ddiv+0x4da>
 80019ac:	e68a      	b.n	80016c4 <__aeabi_ddiv+0x1f0>
 80019ae:	1e85      	subs	r5, r0, #2
 80019b0:	1909      	adds	r1, r1, r4
 80019b2:	e687      	b.n	80016c4 <__aeabi_ddiv+0x1f0>
 80019b4:	220f      	movs	r2, #15
 80019b6:	402a      	ands	r2, r5
 80019b8:	2a04      	cmp	r2, #4
 80019ba:	d100      	bne.n	80019be <__aeabi_ddiv+0x4ea>
 80019bc:	e6bc      	b.n	8001738 <__aeabi_ddiv+0x264>
 80019be:	1d29      	adds	r1, r5, #4
 80019c0:	42a9      	cmp	r1, r5
 80019c2:	41ad      	sbcs	r5, r5
 80019c4:	426d      	negs	r5, r5
 80019c6:	08c9      	lsrs	r1, r1, #3
 80019c8:	44a8      	add	r8, r5
 80019ca:	e6b6      	b.n	800173a <__aeabi_ddiv+0x266>
 80019cc:	42af      	cmp	r7, r5
 80019ce:	d900      	bls.n	80019d2 <__aeabi_ddiv+0x4fe>
 80019d0:	e662      	b.n	8001698 <__aeabi_ddiv+0x1c4>
 80019d2:	4281      	cmp	r1, r0
 80019d4:	d804      	bhi.n	80019e0 <__aeabi_ddiv+0x50c>
 80019d6:	d000      	beq.n	80019da <__aeabi_ddiv+0x506>
 80019d8:	e65e      	b.n	8001698 <__aeabi_ddiv+0x1c4>
 80019da:	42ae      	cmp	r6, r5
 80019dc:	d800      	bhi.n	80019e0 <__aeabi_ddiv+0x50c>
 80019de:	e65b      	b.n	8001698 <__aeabi_ddiv+0x1c4>
 80019e0:	2302      	movs	r3, #2
 80019e2:	425b      	negs	r3, r3
 80019e4:	469c      	mov	ip, r3
 80019e6:	9b00      	ldr	r3, [sp, #0]
 80019e8:	44e0      	add	r8, ip
 80019ea:	469c      	mov	ip, r3
 80019ec:	4465      	add	r5, ip
 80019ee:	429d      	cmp	r5, r3
 80019f0:	419b      	sbcs	r3, r3
 80019f2:	425b      	negs	r3, r3
 80019f4:	191b      	adds	r3, r3, r4
 80019f6:	18c0      	adds	r0, r0, r3
 80019f8:	e64f      	b.n	800169a <__aeabi_ddiv+0x1c6>
 80019fa:	42b2      	cmp	r2, r6
 80019fc:	d800      	bhi.n	8001a00 <__aeabi_ddiv+0x52c>
 80019fe:	e612      	b.n	8001626 <__aeabi_ddiv+0x152>
 8001a00:	1e83      	subs	r3, r0, #2
 8001a02:	1936      	adds	r6, r6, r4
 8001a04:	e60f      	b.n	8001626 <__aeabi_ddiv+0x152>
 8001a06:	428a      	cmp	r2, r1
 8001a08:	d800      	bhi.n	8001a0c <__aeabi_ddiv+0x538>
 8001a0a:	e5fa      	b.n	8001602 <__aeabi_ddiv+0x12e>
 8001a0c:	1e83      	subs	r3, r0, #2
 8001a0e:	4698      	mov	r8, r3
 8001a10:	1909      	adds	r1, r1, r4
 8001a12:	e5f6      	b.n	8001602 <__aeabi_ddiv+0x12e>
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <__aeabi_ddiv+0x5d4>)
 8001a16:	0028      	movs	r0, r5
 8001a18:	445b      	add	r3, fp
 8001a1a:	4641      	mov	r1, r8
 8001a1c:	409d      	lsls	r5, r3
 8001a1e:	4099      	lsls	r1, r3
 8001a20:	40d0      	lsrs	r0, r2
 8001a22:	1e6b      	subs	r3, r5, #1
 8001a24:	419d      	sbcs	r5, r3
 8001a26:	4643      	mov	r3, r8
 8001a28:	4301      	orrs	r1, r0
 8001a2a:	4329      	orrs	r1, r5
 8001a2c:	40d3      	lsrs	r3, r2
 8001a2e:	074a      	lsls	r2, r1, #29
 8001a30:	d100      	bne.n	8001a34 <__aeabi_ddiv+0x560>
 8001a32:	e755      	b.n	80018e0 <__aeabi_ddiv+0x40c>
 8001a34:	220f      	movs	r2, #15
 8001a36:	400a      	ands	r2, r1
 8001a38:	2a04      	cmp	r2, #4
 8001a3a:	d000      	beq.n	8001a3e <__aeabi_ddiv+0x56a>
 8001a3c:	e74a      	b.n	80018d4 <__aeabi_ddiv+0x400>
 8001a3e:	e74f      	b.n	80018e0 <__aeabi_ddiv+0x40c>
 8001a40:	0015      	movs	r5, r2
 8001a42:	4286      	cmp	r6, r0
 8001a44:	d000      	beq.n	8001a48 <__aeabi_ddiv+0x574>
 8001a46:	e66d      	b.n	8001724 <__aeabi_ddiv+0x250>
 8001a48:	9a00      	ldr	r2, [sp, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_ddiv+0x57c>
 8001a4e:	e669      	b.n	8001724 <__aeabi_ddiv+0x250>
 8001a50:	e66a      	b.n	8001728 <__aeabi_ddiv+0x254>
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <__aeabi_ddiv+0x5d8>)
 8001a54:	445b      	add	r3, fp
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	dc00      	bgt.n	8001a5c <__aeabi_ddiv+0x588>
 8001a5a:	e713      	b.n	8001884 <__aeabi_ddiv+0x3b0>
 8001a5c:	2501      	movs	r5, #1
 8001a5e:	2100      	movs	r1, #0
 8001a60:	44a8      	add	r8, r5
 8001a62:	e66a      	b.n	800173a <__aeabi_ddiv+0x266>
 8001a64:	075d      	lsls	r5, r3, #29
 8001a66:	025b      	lsls	r3, r3, #9
 8001a68:	0b1a      	lsrs	r2, r3, #12
 8001a6a:	08c9      	lsrs	r1, r1, #3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	430d      	orrs	r5, r1
 8001a70:	e587      	b.n	8001582 <__aeabi_ddiv+0xae>
 8001a72:	9900      	ldr	r1, [sp, #0]
 8001a74:	3d02      	subs	r5, #2
 8001a76:	004a      	lsls	r2, r1, #1
 8001a78:	428a      	cmp	r2, r1
 8001a7a:	41bf      	sbcs	r7, r7
 8001a7c:	427f      	negs	r7, r7
 8001a7e:	193f      	adds	r7, r7, r4
 8001a80:	19f6      	adds	r6, r6, r7
 8001a82:	9200      	str	r2, [sp, #0]
 8001a84:	e7dd      	b.n	8001a42 <__aeabi_ddiv+0x56e>
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	4643      	mov	r3, r8
 8001a8a:	0312      	lsls	r2, r2, #12
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	0312      	lsls	r2, r2, #12
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <__aeabi_ddiv+0x5cc>)
 8001a92:	0b12      	lsrs	r2, r2, #12
 8001a94:	e575      	b.n	8001582 <__aeabi_ddiv+0xae>
 8001a96:	9900      	ldr	r1, [sp, #0]
 8001a98:	4299      	cmp	r1, r3
 8001a9a:	d3ea      	bcc.n	8001a72 <__aeabi_ddiv+0x59e>
 8001a9c:	0015      	movs	r5, r2
 8001a9e:	e7d3      	b.n	8001a48 <__aeabi_ddiv+0x574>
 8001aa0:	000007ff 	.word	0x000007ff
 8001aa4:	0000043e 	.word	0x0000043e
 8001aa8:	0000041e 	.word	0x0000041e
 8001aac:	000003ff 	.word	0x000003ff

08001ab0 <__aeabi_d2iz>:
 8001ab0:	000a      	movs	r2, r1
 8001ab2:	b530      	push	{r4, r5, lr}
 8001ab4:	4c13      	ldr	r4, [pc, #76]	; (8001b04 <__aeabi_d2iz+0x54>)
 8001ab6:	0053      	lsls	r3, r2, #1
 8001ab8:	0309      	lsls	r1, r1, #12
 8001aba:	0005      	movs	r5, r0
 8001abc:	0b09      	lsrs	r1, r1, #12
 8001abe:	2000      	movs	r0, #0
 8001ac0:	0d5b      	lsrs	r3, r3, #21
 8001ac2:	0fd2      	lsrs	r2, r2, #31
 8001ac4:	42a3      	cmp	r3, r4
 8001ac6:	dd04      	ble.n	8001ad2 <__aeabi_d2iz+0x22>
 8001ac8:	480f      	ldr	r0, [pc, #60]	; (8001b08 <__aeabi_d2iz+0x58>)
 8001aca:	4283      	cmp	r3, r0
 8001acc:	dd02      	ble.n	8001ad4 <__aeabi_d2iz+0x24>
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <__aeabi_d2iz+0x5c>)
 8001ad0:	18d0      	adds	r0, r2, r3
 8001ad2:	bd30      	pop	{r4, r5, pc}
 8001ad4:	2080      	movs	r0, #128	; 0x80
 8001ad6:	0340      	lsls	r0, r0, #13
 8001ad8:	4301      	orrs	r1, r0
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <__aeabi_d2iz+0x60>)
 8001adc:	1ac0      	subs	r0, r0, r3
 8001ade:	281f      	cmp	r0, #31
 8001ae0:	dd08      	ble.n	8001af4 <__aeabi_d2iz+0x44>
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <__aeabi_d2iz+0x64>)
 8001ae4:	1ac3      	subs	r3, r0, r3
 8001ae6:	40d9      	lsrs	r1, r3
 8001ae8:	000b      	movs	r3, r1
 8001aea:	4258      	negs	r0, r3
 8001aec:	2a00      	cmp	r2, #0
 8001aee:	d1f0      	bne.n	8001ad2 <__aeabi_d2iz+0x22>
 8001af0:	0018      	movs	r0, r3
 8001af2:	e7ee      	b.n	8001ad2 <__aeabi_d2iz+0x22>
 8001af4:	4c08      	ldr	r4, [pc, #32]	; (8001b18 <__aeabi_d2iz+0x68>)
 8001af6:	40c5      	lsrs	r5, r0
 8001af8:	46a4      	mov	ip, r4
 8001afa:	4463      	add	r3, ip
 8001afc:	4099      	lsls	r1, r3
 8001afe:	000b      	movs	r3, r1
 8001b00:	432b      	orrs	r3, r5
 8001b02:	e7f2      	b.n	8001aea <__aeabi_d2iz+0x3a>
 8001b04:	000003fe 	.word	0x000003fe
 8001b08:	0000041d 	.word	0x0000041d
 8001b0c:	7fffffff 	.word	0x7fffffff
 8001b10:	00000433 	.word	0x00000433
 8001b14:	00000413 	.word	0x00000413
 8001b18:	fffffbed 	.word	0xfffffbed

08001b1c <__aeabi_ui2d>:
 8001b1c:	b510      	push	{r4, lr}
 8001b1e:	1e04      	subs	r4, r0, #0
 8001b20:	d010      	beq.n	8001b44 <__aeabi_ui2d+0x28>
 8001b22:	f000 f869 	bl	8001bf8 <__clzsi2>
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <__aeabi_ui2d+0x48>)
 8001b28:	1a1b      	subs	r3, r3, r0
 8001b2a:	280a      	cmp	r0, #10
 8001b2c:	dc11      	bgt.n	8001b52 <__aeabi_ui2d+0x36>
 8001b2e:	220b      	movs	r2, #11
 8001b30:	0021      	movs	r1, r4
 8001b32:	1a12      	subs	r2, r2, r0
 8001b34:	40d1      	lsrs	r1, r2
 8001b36:	3015      	adds	r0, #21
 8001b38:	030a      	lsls	r2, r1, #12
 8001b3a:	055b      	lsls	r3, r3, #21
 8001b3c:	4084      	lsls	r4, r0
 8001b3e:	0b12      	lsrs	r2, r2, #12
 8001b40:	0d5b      	lsrs	r3, r3, #21
 8001b42:	e001      	b.n	8001b48 <__aeabi_ui2d+0x2c>
 8001b44:	2300      	movs	r3, #0
 8001b46:	2200      	movs	r2, #0
 8001b48:	051b      	lsls	r3, r3, #20
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	0020      	movs	r0, r4
 8001b4e:	0019      	movs	r1, r3
 8001b50:	bd10      	pop	{r4, pc}
 8001b52:	0022      	movs	r2, r4
 8001b54:	380b      	subs	r0, #11
 8001b56:	4082      	lsls	r2, r0
 8001b58:	055b      	lsls	r3, r3, #21
 8001b5a:	0312      	lsls	r2, r2, #12
 8001b5c:	2400      	movs	r4, #0
 8001b5e:	0b12      	lsrs	r2, r2, #12
 8001b60:	0d5b      	lsrs	r3, r3, #21
 8001b62:	e7f1      	b.n	8001b48 <__aeabi_ui2d+0x2c>
 8001b64:	0000041e 	.word	0x0000041e

08001b68 <__aeabi_f2d>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	0242      	lsls	r2, r0, #9
 8001b6c:	0043      	lsls	r3, r0, #1
 8001b6e:	0fc4      	lsrs	r4, r0, #31
 8001b70:	20fe      	movs	r0, #254	; 0xfe
 8001b72:	0e1b      	lsrs	r3, r3, #24
 8001b74:	1c59      	adds	r1, r3, #1
 8001b76:	0a55      	lsrs	r5, r2, #9
 8001b78:	4208      	tst	r0, r1
 8001b7a:	d00c      	beq.n	8001b96 <__aeabi_f2d+0x2e>
 8001b7c:	21e0      	movs	r1, #224	; 0xe0
 8001b7e:	0089      	lsls	r1, r1, #2
 8001b80:	468c      	mov	ip, r1
 8001b82:	076d      	lsls	r5, r5, #29
 8001b84:	0b12      	lsrs	r2, r2, #12
 8001b86:	4463      	add	r3, ip
 8001b88:	051b      	lsls	r3, r3, #20
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	07e4      	lsls	r4, r4, #31
 8001b8e:	4323      	orrs	r3, r4
 8001b90:	0028      	movs	r0, r5
 8001b92:	0019      	movs	r1, r3
 8001b94:	bd70      	pop	{r4, r5, r6, pc}
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d114      	bne.n	8001bc4 <__aeabi_f2d+0x5c>
 8001b9a:	2d00      	cmp	r5, #0
 8001b9c:	d01b      	beq.n	8001bd6 <__aeabi_f2d+0x6e>
 8001b9e:	0028      	movs	r0, r5
 8001ba0:	f000 f82a 	bl	8001bf8 <__clzsi2>
 8001ba4:	280a      	cmp	r0, #10
 8001ba6:	dc1c      	bgt.n	8001be2 <__aeabi_f2d+0x7a>
 8001ba8:	230b      	movs	r3, #11
 8001baa:	002a      	movs	r2, r5
 8001bac:	1a1b      	subs	r3, r3, r0
 8001bae:	40da      	lsrs	r2, r3
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	3315      	adds	r3, #21
 8001bb4:	409d      	lsls	r5, r3
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <__aeabi_f2d+0x88>)
 8001bb8:	0312      	lsls	r2, r2, #12
 8001bba:	1a1b      	subs	r3, r3, r0
 8001bbc:	055b      	lsls	r3, r3, #21
 8001bbe:	0b12      	lsrs	r2, r2, #12
 8001bc0:	0d5b      	lsrs	r3, r3, #21
 8001bc2:	e7e1      	b.n	8001b88 <__aeabi_f2d+0x20>
 8001bc4:	2d00      	cmp	r5, #0
 8001bc6:	d009      	beq.n	8001bdc <__aeabi_f2d+0x74>
 8001bc8:	0b13      	lsrs	r3, r2, #12
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	0312      	lsls	r2, r2, #12
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	076d      	lsls	r5, r5, #29
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <__aeabi_f2d+0x8c>)
 8001bd4:	e7d8      	b.n	8001b88 <__aeabi_f2d+0x20>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2200      	movs	r2, #0
 8001bda:	e7d5      	b.n	8001b88 <__aeabi_f2d+0x20>
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <__aeabi_f2d+0x8c>)
 8001be0:	e7d2      	b.n	8001b88 <__aeabi_f2d+0x20>
 8001be2:	0003      	movs	r3, r0
 8001be4:	002a      	movs	r2, r5
 8001be6:	3b0b      	subs	r3, #11
 8001be8:	409a      	lsls	r2, r3
 8001bea:	2500      	movs	r5, #0
 8001bec:	e7e3      	b.n	8001bb6 <__aeabi_f2d+0x4e>
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	00000389 	.word	0x00000389
 8001bf4:	000007ff 	.word	0x000007ff

08001bf8 <__clzsi2>:
 8001bf8:	211c      	movs	r1, #28
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	4298      	cmp	r0, r3
 8001c00:	d301      	bcc.n	8001c06 <__clzsi2+0xe>
 8001c02:	0c00      	lsrs	r0, r0, #16
 8001c04:	3910      	subs	r1, #16
 8001c06:	0a1b      	lsrs	r3, r3, #8
 8001c08:	4298      	cmp	r0, r3
 8001c0a:	d301      	bcc.n	8001c10 <__clzsi2+0x18>
 8001c0c:	0a00      	lsrs	r0, r0, #8
 8001c0e:	3908      	subs	r1, #8
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	4298      	cmp	r0, r3
 8001c14:	d301      	bcc.n	8001c1a <__clzsi2+0x22>
 8001c16:	0900      	lsrs	r0, r0, #4
 8001c18:	3904      	subs	r1, #4
 8001c1a:	a202      	add	r2, pc, #8	; (adr r2, 8001c24 <__clzsi2+0x2c>)
 8001c1c:	5c10      	ldrb	r0, [r2, r0]
 8001c1e:	1840      	adds	r0, r0, r1
 8001c20:	4770      	bx	lr
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	02020304 	.word	0x02020304
 8001c28:	01010101 	.word	0x01010101
	...

08001c34 <__clzdi2>:
 8001c34:	b510      	push	{r4, lr}
 8001c36:	2900      	cmp	r1, #0
 8001c38:	d103      	bne.n	8001c42 <__clzdi2+0xe>
 8001c3a:	f7ff ffdd 	bl	8001bf8 <__clzsi2>
 8001c3e:	3020      	adds	r0, #32
 8001c40:	e002      	b.n	8001c48 <__clzdi2+0x14>
 8001c42:	0008      	movs	r0, r1
 8001c44:	f7ff ffd8 	bl	8001bf8 <__clzsi2>
 8001c48:	bd10      	pop	{r4, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)

08001c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c50:	f001 ff7e 	bl	8003b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c54:	f000 f80a 	bl	8001c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c58:	f000 f8ba 	bl	8001dd0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c5c:	f000 f878 	bl	8001d50 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001c60:	f000 f96e 	bl	8001f40 <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ssd1306_TestAll();
 8001c64:	f001 fe24 	bl	80038b0 <ssd1306_TestAll>
 8001c68:	e7fc      	b.n	8001c64 <main+0x18>
	...

08001c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b099      	sub	sp, #100	; 0x64
 8001c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c72:	242c      	movs	r4, #44	; 0x2c
 8001c74:	193b      	adds	r3, r7, r4
 8001c76:	0018      	movs	r0, r3
 8001c78:	2334      	movs	r3, #52	; 0x34
 8001c7a:	001a      	movs	r2, r3
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	f003 fe1c 	bl	80058ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c82:	2318      	movs	r3, #24
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	0018      	movs	r0, r3
 8001c88:	2314      	movs	r3, #20
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	f003 fe14 	bl	80058ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c92:	003b      	movs	r3, r7
 8001c94:	0018      	movs	r0, r3
 8001c96:	2318      	movs	r3, #24
 8001c98:	001a      	movs	r2, r3
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	f003 fe0d 	bl	80058ba <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ca0:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <SystemClock_Config+0xdc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <SystemClock_Config+0xe0>)
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <SystemClock_Config+0xdc>)
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	0109      	lsls	r1, r1, #4
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb2:	0021      	movs	r1, r4
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	2210      	movs	r2, #16
 8001cc4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	2202      	movs	r2, #2
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2200      	movs	r2, #0
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	03d2      	lsls	r2, r2, #15
 8001cde:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f002 ff0c 	bl	8004b00 <HAL_RCC_OscConfig>
 8001ce8:	1e03      	subs	r3, r0, #0
 8001cea:	d001      	beq.n	8001cf0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001cec:	f000 f8ea 	bl	8001ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf0:	2118      	movs	r1, #24
 8001cf2:	187b      	adds	r3, r7, r1
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	2101      	movs	r1, #1
 8001d14:	0018      	movs	r0, r3
 8001d16:	f003 fa6f 	bl	80051f8 <HAL_RCC_ClockConfig>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001d1e:	f000 f8d1 	bl	8001ec4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d22:	003b      	movs	r3, r7
 8001d24:	2208      	movs	r2, #8
 8001d26:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d28:	003b      	movs	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2e:	003b      	movs	r3, r7
 8001d30:	0018      	movs	r0, r3
 8001d32:	f003 fc4f 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	1e03      	subs	r3, r0, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001d3a:	f000 f8c3 	bl	8001ec4 <Error_Handler>
  }
}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b019      	add	sp, #100	; 0x64
 8001d44:	bd90      	pop	{r4, r7, pc}
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	ffffe7ff 	.word	0xffffe7ff

08001d50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d56:	4a1c      	ldr	r2, [pc, #112]	; (8001dc8 <MX_I2C1_Init+0x78>)
 8001d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001d5a:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d5c:	4a1b      	ldr	r2, [pc, #108]	; (8001dcc <MX_I2C1_Init+0x7c>)
 8001d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d72:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f002 f9c3 	bl	8004118 <HAL_I2C_Init>
 8001d92:	1e03      	subs	r3, r0, #0
 8001d94:	d001      	beq.n	8001d9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d96:	f000 f895 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f002 fe16 	bl	80049d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001da4:	1e03      	subs	r3, r0, #0
 8001da6:	d001      	beq.n	8001dac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001da8:	f000 f88c 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <MX_I2C1_Init+0x74>)
 8001dae:	2100      	movs	r1, #0
 8001db0:	0018      	movs	r0, r3
 8001db2:	f002 fe59 	bl	8004a68 <HAL_I2CEx_ConfigDigitalFilter>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001dba:	f000 f883 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000078 	.word	0x20000078
 8001dc8:	40005400 	.word	0x40005400
 8001dcc:	00506682 	.word	0x00506682

08001dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b089      	sub	sp, #36	; 0x24
 8001dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd6:	240c      	movs	r4, #12
 8001dd8:	193b      	adds	r3, r7, r4
 8001dda:	0018      	movs	r0, r3
 8001ddc:	2314      	movs	r3, #20
 8001dde:	001a      	movs	r2, r3
 8001de0:	2100      	movs	r1, #0
 8001de2:	f003 fd6a 	bl	80058ba <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <MX_GPIO_Init+0xec>)
 8001de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dea:	4b34      	ldr	r3, [pc, #208]	; (8001ebc <MX_GPIO_Init+0xec>)
 8001dec:	2104      	movs	r1, #4
 8001dee:	430a      	orrs	r2, r1
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001df2:	4b32      	ldr	r3, [pc, #200]	; (8001ebc <MX_GPIO_Init+0xec>)
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	2204      	movs	r2, #4
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <MX_GPIO_Init+0xec>)
 8001e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e02:	4b2e      	ldr	r3, [pc, #184]	; (8001ebc <MX_GPIO_Init+0xec>)
 8001e04:	2180      	movs	r1, #128	; 0x80
 8001e06:	430a      	orrs	r2, r1
 8001e08:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <MX_GPIO_Init+0xec>)
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	4013      	ands	r3, r2
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <MX_GPIO_Init+0xec>)
 8001e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <MX_GPIO_Init+0xec>)
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e22:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <MX_GPIO_Init+0xec>)
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	2201      	movs	r2, #1
 8001e28:	4013      	ands	r3, r2
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e2e:	23a0      	movs	r3, #160	; 0xa0
 8001e30:	05db      	lsls	r3, r3, #23
 8001e32:	2200      	movs	r2, #0
 8001e34:	2120      	movs	r1, #32
 8001e36:	0018      	movs	r0, r3
 8001e38:	f002 f950 	bl	80040dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e3c:	193b      	adds	r3, r7, r4
 8001e3e:	2280      	movs	r2, #128	; 0x80
 8001e40:	0192      	lsls	r2, r2, #6
 8001e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	2284      	movs	r2, #132	; 0x84
 8001e48:	0392      	lsls	r2, r2, #14
 8001e4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	193b      	adds	r3, r7, r4
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	4a1a      	ldr	r2, [pc, #104]	; (8001ec0 <MX_GPIO_Init+0xf0>)
 8001e56:	0019      	movs	r1, r3
 8001e58:	0010      	movs	r0, r2
 8001e5a:	f001 ffc1 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e5e:	193b      	adds	r3, r7, r4
 8001e60:	220c      	movs	r2, #12
 8001e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	193b      	adds	r3, r7, r4
 8001e66:	2202      	movs	r2, #2
 8001e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	193b      	adds	r3, r7, r4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	193b      	adds	r3, r7, r4
 8001e72:	2203      	movs	r2, #3
 8001e74:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001e76:	193b      	adds	r3, r7, r4
 8001e78:	2204      	movs	r2, #4
 8001e7a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	193a      	adds	r2, r7, r4
 8001e7e:	23a0      	movs	r3, #160	; 0xa0
 8001e80:	05db      	lsls	r3, r3, #23
 8001e82:	0011      	movs	r1, r2
 8001e84:	0018      	movs	r0, r3
 8001e86:	f001 ffab 	bl	8003de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e8a:	0021      	movs	r1, r4
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	2220      	movs	r2, #32
 8001e90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	2201      	movs	r2, #1
 8001e96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	187a      	adds	r2, r7, r1
 8001ea6:	23a0      	movs	r3, #160	; 0xa0
 8001ea8:	05db      	lsls	r3, r3, #23
 8001eaa:	0011      	movs	r1, r2
 8001eac:	0018      	movs	r0, r3
 8001eae:	f001 ff97 	bl	8003de0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b009      	add	sp, #36	; 0x24
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	50000800 	.word	0x50000800

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec8:	b672      	cpsid	i
}
 8001eca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <Error_Handler+0x8>

08001ece <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af04      	add	r7, sp, #16
 8001ede:	0002      	movs	r2, r0
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001ee4:	4808      	ldr	r0, [pc, #32]	; (8001f08 <ssd1306_WriteCommand+0x30>)
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	425b      	negs	r3, r3
 8001eea:	9302      	str	r3, [sp, #8]
 8001eec:	2301      	movs	r3, #1
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2178      	movs	r1, #120	; 0x78
 8001efa:	f002 f9a3 	bl	8004244 <HAL_I2C_Mem_Write>
}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	b002      	add	sp, #8
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	20000078 	.word	0x20000078

08001f0c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af04      	add	r7, sp, #16
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4808      	ldr	r0, [pc, #32]	; (8001f3c <ssd1306_WriteData+0x30>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	4252      	negs	r2, r2
 8001f20:	9202      	str	r2, [sp, #8]
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2301      	movs	r3, #1
 8001f2a:	2240      	movs	r2, #64	; 0x40
 8001f2c:	2178      	movs	r1, #120	; 0x78
 8001f2e:	f002 f989 	bl	8004244 <HAL_I2C_Mem_Write>
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b002      	add	sp, #8
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	20000078 	.word	0x20000078

08001f40 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001f44:	f7ff ffc3 	bl	8001ece <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001f48:	2064      	movs	r0, #100	; 0x64
 8001f4a:	f001 fe71 	bl	8003c30 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f001 f8fc 	bl	800314c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001f54:	2020      	movs	r0, #32
 8001f56:	f7ff ffbf 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7ff ffbc 	bl	8001ed8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f60:	20b0      	movs	r0, #176	; 0xb0
 8001f62:	f7ff ffb9 	bl	8001ed8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001f66:	20c8      	movs	r0, #200	; 0xc8
 8001f68:	f7ff ffb6 	bl	8001ed8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff ffb3 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001f72:	2010      	movs	r0, #16
 8001f74:	f7ff ffb0 	bl	8001ed8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001f78:	2040      	movs	r0, #64	; 0x40
 8001f7a:	f7ff ffad 	bl	8001ed8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001f7e:	20ff      	movs	r0, #255	; 0xff
 8001f80:	f001 f8cc 	bl	800311c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001f84:	20a1      	movs	r0, #161	; 0xa1
 8001f86:	f7ff ffa7 	bl	8001ed8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001f8a:	20a6      	movs	r0, #166	; 0xa6
 8001f8c:	f7ff ffa4 	bl	8001ed8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001f90:	20a8      	movs	r0, #168	; 0xa8
 8001f92:	f7ff ffa1 	bl	8001ed8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001f96:	203f      	movs	r0, #63	; 0x3f
 8001f98:	f7ff ff9e 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001f9c:	20a4      	movs	r0, #164	; 0xa4
 8001f9e:	f7ff ff9b 	bl	8001ed8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001fa2:	20d3      	movs	r0, #211	; 0xd3
 8001fa4:	f7ff ff98 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff ff95 	bl	8001ed8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fae:	20d5      	movs	r0, #213	; 0xd5
 8001fb0:	f7ff ff92 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001fb4:	20f0      	movs	r0, #240	; 0xf0
 8001fb6:	f7ff ff8f 	bl	8001ed8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001fba:	20d9      	movs	r0, #217	; 0xd9
 8001fbc:	f7ff ff8c 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001fc0:	2022      	movs	r0, #34	; 0x22
 8001fc2:	f7ff ff89 	bl	8001ed8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001fc6:	20da      	movs	r0, #218	; 0xda
 8001fc8:	f7ff ff86 	bl	8001ed8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001fcc:	2012      	movs	r0, #18
 8001fce:	f7ff ff83 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001fd2:	20db      	movs	r0, #219	; 0xdb
 8001fd4:	f7ff ff80 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001fd8:	2020      	movs	r0, #32
 8001fda:	f7ff ff7d 	bl	8001ed8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001fde:	208d      	movs	r0, #141	; 0x8d
 8001fe0:	f7ff ff7a 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001fe4:	2014      	movs	r0, #20
 8001fe6:	f7ff ff77 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001fea:	2001      	movs	r0, #1
 8001fec:	f001 f8ae 	bl	800314c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f000 f811 	bl	8002018 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001ff6:	f000 f829 	bl	800204c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <ssd1306_Init+0xd4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002000:	4b04      	ldr	r3, [pc, #16]	; (8002014 <ssd1306_Init+0xd4>)
 8002002:	2200      	movs	r2, #0
 8002004:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002006:	4b03      	ldr	r3, [pc, #12]	; (8002014 <ssd1306_Init+0xd4>)
 8002008:	2201      	movs	r2, #1
 800200a:	711a      	strb	r2, [r3, #4]
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	200004cc 	.word	0x200004cc

08002018 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	0002      	movs	r2, r0
 8002020:	1dfb      	adds	r3, r7, #7
 8002022:	701a      	strb	r2, [r3, #0]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <ssd1306_Fill+0x18>
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <ssd1306_Fill+0x1a>
 8002030:	23ff      	movs	r3, #255	; 0xff
 8002032:	2280      	movs	r2, #128	; 0x80
 8002034:	00d2      	lsls	r2, r2, #3
 8002036:	4804      	ldr	r0, [pc, #16]	; (8002048 <ssd1306_Fill+0x30>)
 8002038:	0019      	movs	r1, r3
 800203a:	f003 fc3e 	bl	80058ba <memset>
}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	200000cc 	.word	0x200000cc

0800204c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e01a      	b.n	8002090 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	3b50      	subs	r3, #80	; 0x50
 8002060:	b2db      	uxtb	r3, r3
 8002062:	0018      	movs	r0, r3
 8002064:	f7ff ff38 	bl	8001ed8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff ff35 	bl	8001ed8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800206e:	2010      	movs	r0, #16
 8002070:	f7ff ff32 	bl	8001ed8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002074:	1dfb      	adds	r3, r7, #7
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	01da      	lsls	r2, r3, #7
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <ssd1306_UpdateScreen+0x58>)
 800207c:	18d3      	adds	r3, r2, r3
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff ff43 	bl	8001f0c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	3201      	adds	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	1dfb      	adds	r3, r7, #7
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b07      	cmp	r3, #7
 8002096:	d9e0      	bls.n	800205a <ssd1306_UpdateScreen+0xe>
    }
}
 8002098:	46c0      	nop			; (mov r8, r8)
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	b002      	add	sp, #8
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	200000cc 	.word	0x200000cc

080020a8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	0004      	movs	r4, r0
 80020b0:	0008      	movs	r0, r1
 80020b2:	0011      	movs	r1, r2
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	1c22      	adds	r2, r4, #0
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	1dbb      	adds	r3, r7, #6
 80020bc:	1c02      	adds	r2, r0, #0
 80020be:	701a      	strb	r2, [r3, #0]
 80020c0:	1d7b      	adds	r3, r7, #5
 80020c2:	1c0a      	adds	r2, r1, #0
 80020c4:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80020c6:	1dfb      	adds	r3, r7, #7
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	b25b      	sxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db47      	blt.n	8002160 <ssd1306_DrawPixel+0xb8>
 80020d0:	1dbb      	adds	r3, r7, #6
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b3f      	cmp	r3, #63	; 0x3f
 80020d6:	d843      	bhi.n	8002160 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80020d8:	1d7b      	adds	r3, r7, #5
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d11e      	bne.n	800211e <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	781a      	ldrb	r2, [r3, #0]
 80020e4:	1dbb      	adds	r3, r7, #6
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	08db      	lsrs	r3, r3, #3
 80020ea:	b2d8      	uxtb	r0, r3
 80020ec:	0003      	movs	r3, r0
 80020ee:	01db      	lsls	r3, r3, #7
 80020f0:	18d3      	adds	r3, r2, r3
 80020f2:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <ssd1306_DrawPixel+0xc0>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	b25a      	sxtb	r2, r3
 80020f8:	1dbb      	adds	r3, r7, #6
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2107      	movs	r1, #7
 80020fe:	400b      	ands	r3, r1
 8002100:	2101      	movs	r1, #1
 8002102:	4099      	lsls	r1, r3
 8002104:	000b      	movs	r3, r1
 8002106:	b25b      	sxtb	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	b259      	sxtb	r1, r3
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	781a      	ldrb	r2, [r3, #0]
 8002110:	0003      	movs	r3, r0
 8002112:	01db      	lsls	r3, r3, #7
 8002114:	18d3      	adds	r3, r2, r3
 8002116:	b2c9      	uxtb	r1, r1
 8002118:	4a13      	ldr	r2, [pc, #76]	; (8002168 <ssd1306_DrawPixel+0xc0>)
 800211a:	54d1      	strb	r1, [r2, r3]
 800211c:	e021      	b.n	8002162 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	1dbb      	adds	r3, r7, #6
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	08db      	lsrs	r3, r3, #3
 8002128:	b2d8      	uxtb	r0, r3
 800212a:	0003      	movs	r3, r0
 800212c:	01db      	lsls	r3, r3, #7
 800212e:	18d3      	adds	r3, r2, r3
 8002130:	4a0d      	ldr	r2, [pc, #52]	; (8002168 <ssd1306_DrawPixel+0xc0>)
 8002132:	5cd3      	ldrb	r3, [r2, r3]
 8002134:	b25b      	sxtb	r3, r3
 8002136:	1dba      	adds	r2, r7, #6
 8002138:	7812      	ldrb	r2, [r2, #0]
 800213a:	2107      	movs	r1, #7
 800213c:	400a      	ands	r2, r1
 800213e:	2101      	movs	r1, #1
 8002140:	4091      	lsls	r1, r2
 8002142:	000a      	movs	r2, r1
 8002144:	b252      	sxtb	r2, r2
 8002146:	43d2      	mvns	r2, r2
 8002148:	b252      	sxtb	r2, r2
 800214a:	4013      	ands	r3, r2
 800214c:	b259      	sxtb	r1, r3
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781a      	ldrb	r2, [r3, #0]
 8002152:	0003      	movs	r3, r0
 8002154:	01db      	lsls	r3, r3, #7
 8002156:	18d3      	adds	r3, r2, r3
 8002158:	b2c9      	uxtb	r1, r1
 800215a:	4a03      	ldr	r2, [pc, #12]	; (8002168 <ssd1306_DrawPixel+0xc0>)
 800215c:	54d1      	strb	r1, [r2, r3]
 800215e:	e000      	b.n	8002162 <ssd1306_DrawPixel+0xba>
        return;
 8002160:	46c0      	nop			; (mov r8, r8)
    }
}
 8002162:	46bd      	mov	sp, r7
 8002164:	b003      	add	sp, #12
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	200000cc 	.word	0x200000cc

0800216c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	0004      	movs	r4, r0
 8002174:	0038      	movs	r0, r7
 8002176:	6001      	str	r1, [r0, #0]
 8002178:	6042      	str	r2, [r0, #4]
 800217a:	6083      	str	r3, [r0, #8]
 800217c:	210f      	movs	r1, #15
 800217e:	187b      	adds	r3, r7, r1
 8002180:	1c22      	adds	r2, r4, #0
 8002182:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002184:	000a      	movs	r2, r1
 8002186:	18bb      	adds	r3, r7, r2
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b1f      	cmp	r3, #31
 800218c:	d903      	bls.n	8002196 <ssd1306_WriteChar+0x2a>
 800218e:	18bb      	adds	r3, r7, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b7e      	cmp	r3, #126	; 0x7e
 8002194:	d901      	bls.n	800219a <ssd1306_WriteChar+0x2e>
        return 0;
 8002196:	2300      	movs	r3, #0
 8002198:	e086      	b.n	80022a8 <ssd1306_WriteChar+0x13c>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800219a:	4b45      	ldr	r3, [pc, #276]	; (80022b0 <ssd1306_WriteChar+0x144>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	001a      	movs	r2, r3
 80021a0:	003b      	movs	r3, r7
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	18d3      	adds	r3, r2, r3
 80021a6:	2b80      	cmp	r3, #128	; 0x80
 80021a8:	dc07      	bgt.n	80021ba <ssd1306_WriteChar+0x4e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <ssd1306_WriteChar+0x144>)
 80021ac:	885b      	ldrh	r3, [r3, #2]
 80021ae:	001a      	movs	r2, r3
 80021b0:	003b      	movs	r3, r7
 80021b2:	785b      	ldrb	r3, [r3, #1]
 80021b4:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80021b6:	2b40      	cmp	r3, #64	; 0x40
 80021b8:	dd01      	ble.n	80021be <ssd1306_WriteChar+0x52>
    {
        // Not enough space on current line
        return 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e074      	b.n	80022a8 <ssd1306_WriteChar+0x13c>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	e051      	b.n	8002268 <ssd1306_WriteChar+0xfc>
        b = Font.data[(ch - 32) * Font.height + i];
 80021c4:	003b      	movs	r3, r7
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	230f      	movs	r3, #15
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	3b20      	subs	r3, #32
 80021d0:	0039      	movs	r1, r7
 80021d2:	7849      	ldrb	r1, [r1, #1]
 80021d4:	434b      	muls	r3, r1
 80021d6:	0019      	movs	r1, r3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	18cb      	adds	r3, r1, r3
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	18d3      	adds	r3, r2, r3
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	e035      	b.n	8002256 <ssd1306_WriteChar+0xea>
            if((b << j) & 0x8000)  {
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	409a      	lsls	r2, r3
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	4013      	ands	r3, r2
 80021f6:	d014      	beq.n	8002222 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80021f8:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <ssd1306_WriteChar+0x144>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	18d3      	adds	r3, r2, r3
 8002204:	b2d8      	uxtb	r0, r3
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <ssd1306_WriteChar+0x144>)
 8002208:	885b      	ldrh	r3, [r3, #2]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	18d3      	adds	r3, r2, r3
 8002212:	b2d9      	uxtb	r1, r3
 8002214:	2330      	movs	r3, #48	; 0x30
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	001a      	movs	r2, r3
 800221c:	f7ff ff44 	bl	80020a8 <ssd1306_DrawPixel>
 8002220:	e016      	b.n	8002250 <ssd1306_WriteChar+0xe4>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <ssd1306_WriteChar+0x144>)
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	18d3      	adds	r3, r2, r3
 800222e:	b2d8      	uxtb	r0, r3
 8002230:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <ssd1306_WriteChar+0x144>)
 8002232:	885b      	ldrh	r3, [r3, #2]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	18d3      	adds	r3, r2, r3
 800223c:	b2d9      	uxtb	r1, r3
 800223e:	2330      	movs	r3, #48	; 0x30
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	425a      	negs	r2, r3
 8002246:	4153      	adcs	r3, r2
 8002248:	b2db      	uxtb	r3, r3
 800224a:	001a      	movs	r2, r3
 800224c:	f7ff ff2c 	bl	80020a8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	3301      	adds	r3, #1
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	003b      	movs	r3, r7
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	001a      	movs	r2, r3
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4293      	cmp	r3, r2
 8002260:	d3c3      	bcc.n	80021ea <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3301      	adds	r3, #1
 8002266:	61fb      	str	r3, [r7, #28]
 8002268:	003b      	movs	r3, r7
 800226a:	785b      	ldrb	r3, [r3, #1]
 800226c:	001a      	movs	r2, r3
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	4293      	cmp	r3, r2
 8002272:	d3a7      	bcc.n	80021c4 <ssd1306_WriteChar+0x58>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <ssd1306_WriteChar+0x144>)
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	003b      	movs	r3, r7
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <ssd1306_WriteChar+0x128>
 8002280:	003b      	movs	r3, r7
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	230f      	movs	r3, #15
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3b20      	subs	r3, #32
 800228c:	18cb      	adds	r3, r1, r3
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b29b      	uxth	r3, r3
 8002292:	e002      	b.n	800229a <ssd1306_WriteChar+0x12e>
 8002294:	003b      	movs	r3, r7
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	189b      	adds	r3, r3, r2
 800229c:	b29a      	uxth	r2, r3
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <ssd1306_WriteChar+0x144>)
 80022a0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80022a2:	230f      	movs	r3, #15
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	781b      	ldrb	r3, [r3, #0]
}
 80022a8:	0018      	movs	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b009      	add	sp, #36	; 0x24
 80022ae:	bd90      	pop	{r4, r7, pc}
 80022b0:	200004cc 	.word	0x200004cc

080022b4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	0038      	movs	r0, r7
 80022be:	6001      	str	r1, [r0, #0]
 80022c0:	6042      	str	r2, [r0, #4]
 80022c2:	6083      	str	r3, [r0, #8]
    while (*str) {
 80022c4:	e017      	b.n	80022f6 <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	7818      	ldrb	r0, [r3, #0]
 80022ca:	003b      	movs	r3, r7
 80022cc:	2218      	movs	r2, #24
 80022ce:	18ba      	adds	r2, r7, r2
 80022d0:	7812      	ldrb	r2, [r2, #0]
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	6819      	ldr	r1, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f7ff ff47 	bl	800216c <ssd1306_WriteChar>
 80022de:	0003      	movs	r3, r0
 80022e0:	001a      	movs	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d002      	beq.n	80022f0 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	e008      	b.n	8002302 <ssd1306_WriteString+0x4e>
        }
        str++;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3301      	adds	r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1e3      	bne.n	80022c6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	781b      	ldrb	r3, [r3, #0]
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	0002      	movs	r2, r0
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	1dbb      	adds	r3, r7, #6
 800231a:	1c0a      	adds	r2, r1, #0
 800231c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b29a      	uxth	r2, r3
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <ssd1306_SetCursor+0x30>)
 8002326:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002328:	1dbb      	adds	r3, r7, #6
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b29a      	uxth	r2, r3
 800232e:	4b03      	ldr	r3, [pc, #12]	; (800233c <ssd1306_SetCursor+0x30>)
 8002330:	805a      	strh	r2, [r3, #2]
}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	200004cc 	.word	0x200004cc

08002340 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002340:	b5b0      	push	{r4, r5, r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0
 8002346:	0005      	movs	r5, r0
 8002348:	000c      	movs	r4, r1
 800234a:	0010      	movs	r0, r2
 800234c:	0019      	movs	r1, r3
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	1c2a      	adds	r2, r5, #0
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	1dbb      	adds	r3, r7, #6
 8002356:	1c22      	adds	r2, r4, #0
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	1d7b      	adds	r3, r7, #5
 800235c:	1c02      	adds	r2, r0, #0
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	1c0a      	adds	r2, r1, #0
 8002364:	701a      	strb	r2, [r3, #0]
    int32_t deltaX = abs(x2 - x1);
 8002366:	1d7b      	adds	r3, r7, #5
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	1dfb      	adds	r3, r7, #7
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	17da      	asrs	r2, r3, #31
 8002372:	189b      	adds	r3, r3, r2
 8002374:	4053      	eors	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	1dbb      	adds	r3, r7, #6
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	17da      	asrs	r2, r3, #31
 8002384:	189b      	adds	r3, r3, r2
 8002386:	4053      	eors	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800238a:	1dfa      	adds	r2, r7, #7
 800238c:	1d7b      	adds	r3, r7, #5
 800238e:	7812      	ldrb	r2, [r2, #0]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d201      	bcs.n	800239a <ssd1306_Line+0x5a>
 8002396:	2301      	movs	r3, #1
 8002398:	e001      	b.n	800239e <ssd1306_Line+0x5e>
 800239a:	2301      	movs	r3, #1
 800239c:	425b      	negs	r3, r3
 800239e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80023a0:	1dba      	adds	r2, r7, #6
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d201      	bcs.n	80023b0 <ssd1306_Line+0x70>
 80023ac:	2301      	movs	r3, #1
 80023ae:	e001      	b.n	80023b4 <ssd1306_Line+0x74>
 80023b0:	2301      	movs	r3, #1
 80023b2:	425b      	negs	r3, r3
 80023b4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80023be:	2330      	movs	r3, #48	; 0x30
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	781a      	ldrb	r2, [r3, #0]
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	7819      	ldrb	r1, [r3, #0]
 80023c8:	1d7b      	adds	r3, r7, #5
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff fe6b 	bl	80020a8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80023d2:	e02f      	b.n	8002434 <ssd1306_Line+0xf4>
        ssd1306_DrawPixel(x1, y1, color);
 80023d4:	2330      	movs	r3, #48	; 0x30
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	1dbb      	adds	r3, r7, #6
 80023dc:	7819      	ldrb	r1, [r3, #0]
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7ff fe60 	bl	80020a8 <ssd1306_DrawPixel>
        error2 = error * 2;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	425b      	negs	r3, r3
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dd0a      	ble.n	800240e <ssd1306_Line+0xce>
            error -= deltaY;
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	b2d9      	uxtb	r1, r3
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	1dfa      	adds	r2, r7, #7
 8002408:	7812      	ldrb	r2, [r2, #0]
 800240a:	188a      	adds	r2, r1, r2
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	1dbb      	adds	r3, r7, #6
 8002410:	1dba      	adds	r2, r7, #6
 8002412:	7812      	ldrb	r2, [r2, #0]
 8002414:	701a      	strb	r2, [r3, #0]
        }
        
        if(error2 < deltaX) {
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	429a      	cmp	r2, r3
 800241c:	da0a      	bge.n	8002434 <ssd1306_Line+0xf4>
            error += deltaX;
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	18d3      	adds	r3, r2, r3
 8002424:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	b2d9      	uxtb	r1, r3
 800242a:	1dbb      	adds	r3, r7, #6
 800242c:	1dba      	adds	r2, r7, #6
 800242e:	7812      	ldrb	r2, [r2, #0]
 8002430:	188a      	adds	r2, r1, r2
 8002432:	701a      	strb	r2, [r3, #0]
    while((x1 != x2) || (y1 != y2)) {
 8002434:	1dfa      	adds	r2, r7, #7
 8002436:	1d7b      	adds	r3, r7, #5
 8002438:	7812      	ldrb	r2, [r2, #0]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d1c9      	bne.n	80023d4 <ssd1306_Line+0x94>
 8002440:	1dba      	adds	r2, r7, #6
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	7812      	ldrb	r2, [r2, #0]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d1c3      	bne.n	80023d4 <ssd1306_Line+0x94>
        }
    }
    return;
 800244c:	46c0      	nop			; (mov r8, r8)
}
 800244e:	46bd      	mov	sp, r7
 8002450:	b008      	add	sp, #32
 8002452:	bdb0      	pop	{r4, r5, r7, pc}

08002454 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8002454:	b5b0      	push	{r4, r5, r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	0008      	movs	r0, r1
 800245e:	0011      	movs	r1, r2
 8002460:	1cbb      	adds	r3, r7, #2
 8002462:	1c02      	adds	r2, r0, #0
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	1c7b      	adds	r3, r7, #1
 8002468:	1c0a      	adds	r2, r1, #0
 800246a:	701a      	strb	r2, [r3, #0]
    uint16_t i;
    if(par_vertex == NULL) {
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d038      	beq.n	80024e4 <ssd1306_Polyline+0x90>
        return;
    }

    for(i = 1; i < par_size; i++) {
 8002472:	230e      	movs	r3, #14
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	2201      	movs	r2, #1
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	e02b      	b.n	80024d4 <ssd1306_Polyline+0x80>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 800247c:	240e      	movs	r4, #14
 800247e:	193b      	adds	r3, r7, r4
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	4a1a      	ldr	r2, [pc, #104]	; (80024ec <ssd1306_Polyline+0x98>)
 8002484:	4694      	mov	ip, r2
 8002486:	4463      	add	r3, ip
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	18d3      	adds	r3, r2, r3
 800248e:	7818      	ldrb	r0, [r3, #0]
 8002490:	193b      	adds	r3, r7, r4
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <ssd1306_Polyline+0x98>)
 8002496:	4694      	mov	ip, r2
 8002498:	4463      	add	r3, ip
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	18d3      	adds	r3, r2, r3
 80024a0:	7859      	ldrb	r1, [r3, #1]
 80024a2:	0025      	movs	r5, r4
 80024a4:	197b      	adds	r3, r7, r5
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	18d3      	adds	r3, r2, r3
 80024ae:	781c      	ldrb	r4, [r3, #0]
 80024b0:	197b      	adds	r3, r7, r5
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	18d3      	adds	r3, r2, r3
 80024ba:	785a      	ldrb	r2, [r3, #1]
 80024bc:	1c7b      	adds	r3, r7, #1
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	0013      	movs	r3, r2
 80024c4:	0022      	movs	r2, r4
 80024c6:	f7ff ff3b 	bl	8002340 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 80024ca:	197b      	adds	r3, r7, r5
 80024cc:	881a      	ldrh	r2, [r3, #0]
 80024ce:	197b      	adds	r3, r7, r5
 80024d0:	3201      	adds	r2, #1
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	230e      	movs	r3, #14
 80024d6:	18fa      	adds	r2, r7, r3
 80024d8:	1cbb      	adds	r3, r7, #2
 80024da:	8812      	ldrh	r2, [r2, #0]
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3cc      	bcc.n	800247c <ssd1306_Polyline+0x28>
    }

    return;
 80024e2:	e000      	b.n	80024e6 <ssd1306_Polyline+0x92>
        return;
 80024e4:	46c0      	nop			; (mov r8, r8)
}
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b004      	add	sp, #16
 80024ea:	bdb0      	pop	{r4, r5, r7, pc}
 80024ec:	7fffffff 	.word	0x7fffffff

080024f0 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 80024f8:	4904      	ldr	r1, [pc, #16]	; (800250c <ssd1306_DegToRad+0x1c>)
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fc42 	bl	8000d84 <__aeabi_fmul>
 8002500:	1c03      	adds	r3, r0, #0
}
 8002502:	1c18      	adds	r0, r3, #0
 8002504:	46bd      	mov	sp, r7
 8002506:	b002      	add	sp, #8
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	3c8ee7a7 	.word	0x3c8ee7a7

08002510 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	0002      	movs	r2, r0
 8002518:	1dbb      	adds	r3, r7, #6
 800251a:	801a      	strh	r2, [r3, #0]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 800251c:	1dbb      	adds	r3, r7, #6
 800251e:	881a      	ldrh	r2, [r3, #0]
 8002520:	23b4      	movs	r3, #180	; 0xb4
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	429a      	cmp	r2, r3
 8002526:	d805      	bhi.n	8002534 <ssd1306_NormalizeTo0_360+0x24>
        loc_angle = par_deg;
 8002528:	230e      	movs	r3, #14
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	1dba      	adds	r2, r7, #6
 800252e:	8812      	ldrh	r2, [r2, #0]
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	e016      	b.n	8002562 <ssd1306_NormalizeTo0_360+0x52>
    } else {
        loc_angle = par_deg % 360;
 8002534:	250e      	movs	r5, #14
 8002536:	197c      	adds	r4, r7, r5
 8002538:	1dbb      	adds	r3, r7, #6
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	22b4      	movs	r2, #180	; 0xb4
 800253e:	0051      	lsls	r1, r2, #1
 8002540:	0018      	movs	r0, r3
 8002542:	f7fd fe71 	bl	8000228 <__aeabi_uidivmod>
 8002546:	000b      	movs	r3, r1
 8002548:	8023      	strh	r3, [r4, #0]
        loc_angle = (loc_angle ? loc_angle : 360);
 800254a:	197b      	adds	r3, r7, r5
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <ssd1306_NormalizeTo0_360+0x48>
 8002552:	197b      	adds	r3, r7, r5
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	e001      	b.n	800255c <ssd1306_NormalizeTo0_360+0x4c>
 8002558:	23b4      	movs	r3, #180	; 0xb4
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	220e      	movs	r2, #14
 800255e:	18ba      	adds	r2, r7, r2
 8002560:	8013      	strh	r3, [r2, #0]
    }
    return loc_angle;
 8002562:	230e      	movs	r3, #14
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	881b      	ldrh	r3, [r3, #0]
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b004      	add	sp, #16
 800256e:	bdb0      	pop	{r4, r5, r7, pc}

08002570 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8002570:	b5b0      	push	{r4, r5, r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af02      	add	r7, sp, #8
 8002576:	0005      	movs	r5, r0
 8002578:	000c      	movs	r4, r1
 800257a:	0010      	movs	r0, r2
 800257c:	0019      	movs	r1, r3
 800257e:	1dfb      	adds	r3, r7, #7
 8002580:	1c2a      	adds	r2, r5, #0
 8002582:	701a      	strb	r2, [r3, #0]
 8002584:	1dbb      	adds	r3, r7, #6
 8002586:	1c22      	adds	r2, r4, #0
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	1d7b      	adds	r3, r7, #5
 800258c:	1c02      	adds	r2, r0, #0
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	1cbb      	adds	r3, r7, #2
 8002592:	1c0a      	adds	r2, r1, #0
 8002594:	801a      	strh	r2, [r3, #0]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8002596:	2330      	movs	r3, #48	; 0x30
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	0018      	movs	r0, r3
 800259e:	f7ff ffb7 	bl	8002510 <ssd1306_NormalizeTo0_360>
 80025a2:	0003      	movs	r3, r0
 80025a4:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80025a6:	1cbb      	adds	r3, r7, #2
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f7ff ffb0 	bl	8002510 <ssd1306_NormalizeTo0_360>
 80025b0:	0003      	movs	r3, r0
 80025b2:	001a      	movs	r2, r3
 80025b4:	4b6d      	ldr	r3, [pc, #436]	; (800276c <ssd1306_DrawArc+0x1fc>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4353      	muls	r3, r2
 80025ba:	22b4      	movs	r2, #180	; 0xb4
 80025bc:	0051      	lsls	r1, r2, #1
 80025be:	0018      	movs	r0, r3
 80025c0:	f7fd fe36 	bl	8000230 <__divsi3>
 80025c4:	0003      	movs	r3, r0
 80025c6:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80025c8:	4b68      	ldr	r3, [pc, #416]	; (800276c <ssd1306_DrawArc+0x1fc>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	001a      	movs	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	4353      	muls	r3, r2
 80025d2:	22b4      	movs	r2, #180	; 0xb4
 80025d4:	0051      	lsls	r1, r2, #1
 80025d6:	0018      	movs	r0, r3
 80025d8:	f7fd fda0 	bl	800011c <__udivsi3>
 80025dc:	0003      	movs	r3, r0
 80025de:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 80025e0:	6978      	ldr	r0, [r7, #20]
 80025e2:	f7fe ff2f 	bl	8001444 <__aeabi_ui2f>
 80025e6:	1c04      	adds	r4, r0, #0
 80025e8:	6938      	ldr	r0, [r7, #16]
 80025ea:	f7fe ff2b 	bl	8001444 <__aeabi_ui2f>
 80025ee:	1c03      	adds	r3, r0, #0
 80025f0:	1c19      	adds	r1, r3, #0
 80025f2:	1c20      	adds	r0, r4, #0
 80025f4:	f7fe f9fc 	bl	80009f0 <__aeabi_fdiv>
 80025f8:	1c03      	adds	r3, r0, #0
 80025fa:	60fb      	str	r3, [r7, #12]
    while(count < approx_segments)
 80025fc:	e0ad      	b.n	800275a <ssd1306_DrawArc+0x1ea>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 80025fe:	69f8      	ldr	r0, [r7, #28]
 8002600:	f7fe ff20 	bl	8001444 <__aeabi_ui2f>
 8002604:	1c03      	adds	r3, r0, #0
 8002606:	68f9      	ldr	r1, [r7, #12]
 8002608:	1c18      	adds	r0, r3, #0
 800260a:	f7fe fbbb 	bl	8000d84 <__aeabi_fmul>
 800260e:	1c03      	adds	r3, r0, #0
 8002610:	1c18      	adds	r0, r3, #0
 8002612:	f7ff ff6d 	bl	80024f0 <ssd1306_DegToRad>
 8002616:	1c03      	adds	r3, r0, #0
 8002618:	61bb      	str	r3, [r7, #24]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1c18      	adds	r0, r3, #0
 800261e:	f003 fdf3 	bl	8006208 <sinf>
 8002622:	1c04      	adds	r4, r0, #0
 8002624:	1d7b      	adds	r3, r7, #5
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	0018      	movs	r0, r3
 800262a:	f7fe feb9 	bl	80013a0 <__aeabi_i2f>
 800262e:	1c03      	adds	r3, r0, #0
 8002630:	1c19      	adds	r1, r3, #0
 8002632:	1c20      	adds	r0, r4, #0
 8002634:	f7fe fba6 	bl	8000d84 <__aeabi_fmul>
 8002638:	1c03      	adds	r3, r0, #0
 800263a:	1c18      	adds	r0, r3, #0
 800263c:	f7fe fe90 	bl	8001360 <__aeabi_f2iz>
 8002640:	0003      	movs	r3, r0
 8002642:	b25b      	sxtb	r3, r3
 8002644:	b2d9      	uxtb	r1, r3
 8002646:	230b      	movs	r3, #11
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	1dfa      	adds	r2, r7, #7
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	188a      	adds	r2, r1, r2
 8002650:	701a      	strb	r2, [r3, #0]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	1c18      	adds	r0, r3, #0
 8002656:	f003 fda3 	bl	80061a0 <cosf>
 800265a:	1c04      	adds	r4, r0, #0
 800265c:	1d7b      	adds	r3, r7, #5
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	0018      	movs	r0, r3
 8002662:	f7fe fe9d 	bl	80013a0 <__aeabi_i2f>
 8002666:	1c03      	adds	r3, r0, #0
 8002668:	1c19      	adds	r1, r3, #0
 800266a:	1c20      	adds	r0, r4, #0
 800266c:	f7fe fb8a 	bl	8000d84 <__aeabi_fmul>
 8002670:	1c03      	adds	r3, r0, #0
 8002672:	1c18      	adds	r0, r3, #0
 8002674:	f7fe fe74 	bl	8001360 <__aeabi_f2iz>
 8002678:	0003      	movs	r3, r0
 800267a:	b25b      	sxtb	r3, r3
 800267c:	b2d9      	uxtb	r1, r3
 800267e:	230a      	movs	r3, #10
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	1dba      	adds	r2, r7, #6
 8002684:	7812      	ldrb	r2, [r2, #0]
 8002686:	188a      	adds	r2, r1, r2
 8002688:	701a      	strb	r2, [r3, #0]
        count++;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3301      	adds	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments) {
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	429a      	cmp	r2, r3
 8002696:	d00e      	beq.n	80026b6 <ssd1306_DrawArc+0x146>
            rad = ssd1306_DegToRad(count*approx_degree);
 8002698:	69f8      	ldr	r0, [r7, #28]
 800269a:	f7fe fed3 	bl	8001444 <__aeabi_ui2f>
 800269e:	1c03      	adds	r3, r0, #0
 80026a0:	68f9      	ldr	r1, [r7, #12]
 80026a2:	1c18      	adds	r0, r3, #0
 80026a4:	f7fe fb6e 	bl	8000d84 <__aeabi_fmul>
 80026a8:	1c03      	adds	r3, r0, #0
 80026aa:	1c18      	adds	r0, r3, #0
 80026ac:	f7ff ff20 	bl	80024f0 <ssd1306_DegToRad>
 80026b0:	1c03      	adds	r3, r0, #0
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	e008      	b.n	80026c8 <ssd1306_DrawArc+0x158>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80026b6:	6978      	ldr	r0, [r7, #20]
 80026b8:	f7fe fec4 	bl	8001444 <__aeabi_ui2f>
 80026bc:	1c03      	adds	r3, r0, #0
 80026be:	1c18      	adds	r0, r3, #0
 80026c0:	f7ff ff16 	bl	80024f0 <ssd1306_DegToRad>
 80026c4:	1c03      	adds	r3, r0, #0
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	1c18      	adds	r0, r3, #0
 80026cc:	f003 fd9c 	bl	8006208 <sinf>
 80026d0:	1c04      	adds	r4, r0, #0
 80026d2:	1d7b      	adds	r3, r7, #5
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7fe fe62 	bl	80013a0 <__aeabi_i2f>
 80026dc:	1c03      	adds	r3, r0, #0
 80026de:	1c19      	adds	r1, r3, #0
 80026e0:	1c20      	adds	r0, r4, #0
 80026e2:	f7fe fb4f 	bl	8000d84 <__aeabi_fmul>
 80026e6:	1c03      	adds	r3, r0, #0
 80026e8:	1c18      	adds	r0, r3, #0
 80026ea:	f7fe fe39 	bl	8001360 <__aeabi_f2iz>
 80026ee:	0003      	movs	r3, r0
 80026f0:	b25b      	sxtb	r3, r3
 80026f2:	b2d9      	uxtb	r1, r3
 80026f4:	2509      	movs	r5, #9
 80026f6:	197b      	adds	r3, r7, r5
 80026f8:	1dfa      	adds	r2, r7, #7
 80026fa:	7812      	ldrb	r2, [r2, #0]
 80026fc:	188a      	adds	r2, r1, r2
 80026fe:	701a      	strb	r2, [r3, #0]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	1c18      	adds	r0, r3, #0
 8002704:	f003 fd4c 	bl	80061a0 <cosf>
 8002708:	1c04      	adds	r4, r0, #0
 800270a:	1d7b      	adds	r3, r7, #5
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	0018      	movs	r0, r3
 8002710:	f7fe fe46 	bl	80013a0 <__aeabi_i2f>
 8002714:	1c03      	adds	r3, r0, #0
 8002716:	1c19      	adds	r1, r3, #0
 8002718:	1c20      	adds	r0, r4, #0
 800271a:	f7fe fb33 	bl	8000d84 <__aeabi_fmul>
 800271e:	1c03      	adds	r3, r0, #0
 8002720:	1c18      	adds	r0, r3, #0
 8002722:	f7fe fe1d 	bl	8001360 <__aeabi_f2iz>
 8002726:	0003      	movs	r3, r0
 8002728:	b25b      	sxtb	r3, r3
 800272a:	b2d9      	uxtb	r1, r3
 800272c:	2008      	movs	r0, #8
 800272e:	183b      	adds	r3, r7, r0
 8002730:	1dba      	adds	r2, r7, #6
 8002732:	7812      	ldrb	r2, [r2, #0]
 8002734:	188a      	adds	r2, r1, r2
 8002736:	701a      	strb	r2, [r3, #0]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8002738:	183b      	adds	r3, r7, r0
 800273a:	781c      	ldrb	r4, [r3, #0]
 800273c:	197b      	adds	r3, r7, r5
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	230a      	movs	r3, #10
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	7819      	ldrb	r1, [r3, #0]
 8002746:	230b      	movs	r3, #11
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	7818      	ldrb	r0, [r3, #0]
 800274c:	2334      	movs	r3, #52	; 0x34
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	0023      	movs	r3, r4
 8002756:	f7ff fdf3 	bl	8002340 <ssd1306_Line>
    while(count < approx_segments)
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	429a      	cmp	r2, r3
 8002760:	d200      	bcs.n	8002764 <ssd1306_DrawArc+0x1f4>
 8002762:	e74c      	b.n	80025fe <ssd1306_DrawArc+0x8e>
    }
    
    return;
 8002764:	46c0      	nop			; (mov r8, r8)
}
 8002766:	46bd      	mov	sp, r7
 8002768:	b008      	add	sp, #32
 800276a:	bdb0      	pop	{r4, r5, r7, pc}
 800276c:	08006f3c 	.word	0x08006f3c

08002770 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8002770:	b5b0      	push	{r4, r5, r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af02      	add	r7, sp, #8
 8002776:	0005      	movs	r5, r0
 8002778:	000c      	movs	r4, r1
 800277a:	0010      	movs	r0, r2
 800277c:	0019      	movs	r1, r3
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	1c2a      	adds	r2, r5, #0
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	1dbb      	adds	r3, r7, #6
 8002786:	1c22      	adds	r2, r4, #0
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	1d7b      	adds	r3, r7, #5
 800278c:	1c02      	adds	r2, r0, #0
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	1cbb      	adds	r3, r7, #2
 8002792:	1c0a      	adds	r2, r1, #0
 8002794:	801a      	strh	r2, [r3, #0]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 8002796:	2324      	movs	r3, #36	; 0x24
 8002798:	61bb      	str	r3, [r7, #24]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 800279a:	2327      	movs	r3, #39	; 0x27
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
    uint8_t yp1;
    uint8_t yp2 = 0;
 80027a2:	2326      	movs	r3, #38	; 0x26
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80027aa:	2338      	movs	r3, #56	; 0x38
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7ff fead 	bl	8002510 <ssd1306_NormalizeTo0_360>
 80027b6:	0003      	movs	r3, r0
 80027b8:	617b      	str	r3, [r7, #20]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80027ba:	1cbb      	adds	r3, r7, #2
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	0018      	movs	r0, r3
 80027c0:	f7ff fea6 	bl	8002510 <ssd1306_NormalizeTo0_360>
 80027c4:	0003      	movs	r3, r0
 80027c6:	001a      	movs	r2, r3
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	4353      	muls	r3, r2
 80027cc:	22b4      	movs	r2, #180	; 0xb4
 80027ce:	0051      	lsls	r1, r2, #1
 80027d0:	0018      	movs	r0, r3
 80027d2:	f7fd fca3 	bl	800011c <__udivsi3>
 80027d6:	0003      	movs	r3, r0
 80027d8:	623b      	str	r3, [r7, #32]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4353      	muls	r3, r2
 80027e0:	22b4      	movs	r2, #180	; 0xb4
 80027e2:	0051      	lsls	r1, r2, #1
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fd fc99 	bl	800011c <__udivsi3>
 80027ea:	0003      	movs	r3, r0
 80027ec:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 80027ee:	6978      	ldr	r0, [r7, #20]
 80027f0:	f7fe fe28 	bl	8001444 <__aeabi_ui2f>
 80027f4:	1c04      	adds	r4, r0, #0
 80027f6:	6938      	ldr	r0, [r7, #16]
 80027f8:	f7fe fe24 	bl	8001444 <__aeabi_ui2f>
 80027fc:	1c03      	adds	r3, r0, #0
 80027fe:	1c19      	adds	r1, r3, #0
 8002800:	1c20      	adds	r0, r4, #0
 8002802:	f7fe f8f5 	bl	80009f0 <__aeabi_fdiv>
 8002806:	1c03      	adds	r3, r0, #0
 8002808:	60fb      	str	r3, [r7, #12]

    rad = ssd1306_DegToRad(count*approx_degree);
 800280a:	6a38      	ldr	r0, [r7, #32]
 800280c:	f7fe fe1a 	bl	8001444 <__aeabi_ui2f>
 8002810:	1c03      	adds	r3, r0, #0
 8002812:	68f9      	ldr	r1, [r7, #12]
 8002814:	1c18      	adds	r0, r3, #0
 8002816:	f7fe fab5 	bl	8000d84 <__aeabi_fmul>
 800281a:	1c03      	adds	r3, r0, #0
 800281c:	1c18      	adds	r0, r3, #0
 800281e:	f7ff fe67 	bl	80024f0 <ssd1306_DegToRad>
 8002822:	1c03      	adds	r3, r0, #0
 8002824:	61fb      	str	r3, [r7, #28]
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	1c18      	adds	r0, r3, #0
 800282a:	f003 fced 	bl	8006208 <sinf>
 800282e:	1c04      	adds	r4, r0, #0
 8002830:	1d7b      	adds	r3, r7, #5
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	0018      	movs	r0, r3
 8002836:	f7fe fdb3 	bl	80013a0 <__aeabi_i2f>
 800283a:	1c03      	adds	r3, r0, #0
 800283c:	1c19      	adds	r1, r3, #0
 800283e:	1c20      	adds	r0, r4, #0
 8002840:	f7fe faa0 	bl	8000d84 <__aeabi_fmul>
 8002844:	1c03      	adds	r3, r0, #0
 8002846:	1c18      	adds	r0, r3, #0
 8002848:	f7fe fd8a 	bl	8001360 <__aeabi_f2iz>
 800284c:	0003      	movs	r3, r0
 800284e:	b25b      	sxtb	r3, r3
 8002850:	b2d9      	uxtb	r1, r3
 8002852:	230b      	movs	r3, #11
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	1dfa      	adds	r2, r7, #7
 8002858:	7812      	ldrb	r2, [r2, #0]
 800285a:	188a      	adds	r2, r1, r2
 800285c:	701a      	strb	r2, [r3, #0]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	1c18      	adds	r0, r3, #0
 8002862:	f003 fc9d 	bl	80061a0 <cosf>
 8002866:	1c04      	adds	r4, r0, #0
 8002868:	1d7b      	adds	r3, r7, #5
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	0018      	movs	r0, r3
 800286e:	f7fe fd97 	bl	80013a0 <__aeabi_i2f>
 8002872:	1c03      	adds	r3, r0, #0
 8002874:	1c19      	adds	r1, r3, #0
 8002876:	1c20      	adds	r0, r4, #0
 8002878:	f7fe fa84 	bl	8000d84 <__aeabi_fmul>
 800287c:	1c03      	adds	r3, r0, #0
 800287e:	1c18      	adds	r0, r3, #0
 8002880:	f7fe fd6e 	bl	8001360 <__aeabi_f2iz>
 8002884:	0003      	movs	r3, r0
 8002886:	b25b      	sxtb	r3, r3
 8002888:	b2d9      	uxtb	r1, r3
 800288a:	230a      	movs	r3, #10
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	1dba      	adds	r2, r7, #6
 8002890:	7812      	ldrb	r2, [r2, #0]
 8002892:	188a      	adds	r2, r1, r2
 8002894:	701a      	strb	r2, [r3, #0]
    while (count < approx_segments) {
 8002896:	e0ad      	b.n	80029f4 <ssd1306_DrawArcWithRadiusLine+0x284>
        rad = ssd1306_DegToRad(count*approx_degree);
 8002898:	6a38      	ldr	r0, [r7, #32]
 800289a:	f7fe fdd3 	bl	8001444 <__aeabi_ui2f>
 800289e:	1c03      	adds	r3, r0, #0
 80028a0:	68f9      	ldr	r1, [r7, #12]
 80028a2:	1c18      	adds	r0, r3, #0
 80028a4:	f7fe fa6e 	bl	8000d84 <__aeabi_fmul>
 80028a8:	1c03      	adds	r3, r0, #0
 80028aa:	1c18      	adds	r0, r3, #0
 80028ac:	f7ff fe20 	bl	80024f0 <ssd1306_DegToRad>
 80028b0:	1c03      	adds	r3, r0, #0
 80028b2:	61fb      	str	r3, [r7, #28]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	1c18      	adds	r0, r3, #0
 80028b8:	f003 fca6 	bl	8006208 <sinf>
 80028bc:	1c04      	adds	r4, r0, #0
 80028be:	1d7b      	adds	r3, r7, #5
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	0018      	movs	r0, r3
 80028c4:	f7fe fd6c 	bl	80013a0 <__aeabi_i2f>
 80028c8:	1c03      	adds	r3, r0, #0
 80028ca:	1c19      	adds	r1, r3, #0
 80028cc:	1c20      	adds	r0, r4, #0
 80028ce:	f7fe fa59 	bl	8000d84 <__aeabi_fmul>
 80028d2:	1c03      	adds	r3, r0, #0
 80028d4:	1c18      	adds	r0, r3, #0
 80028d6:	f7fe fd43 	bl	8001360 <__aeabi_f2iz>
 80028da:	0003      	movs	r3, r0
 80028dc:	b25b      	sxtb	r3, r3
 80028de:	b2d9      	uxtb	r1, r3
 80028e0:	2309      	movs	r3, #9
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	1dfa      	adds	r2, r7, #7
 80028e6:	7812      	ldrb	r2, [r2, #0]
 80028e8:	188a      	adds	r2, r1, r2
 80028ea:	701a      	strb	r2, [r3, #0]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	1c18      	adds	r0, r3, #0
 80028f0:	f003 fc56 	bl	80061a0 <cosf>
 80028f4:	1c04      	adds	r4, r0, #0
 80028f6:	1d7b      	adds	r3, r7, #5
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f7fe fd50 	bl	80013a0 <__aeabi_i2f>
 8002900:	1c03      	adds	r3, r0, #0
 8002902:	1c19      	adds	r1, r3, #0
 8002904:	1c20      	adds	r0, r4, #0
 8002906:	f7fe fa3d 	bl	8000d84 <__aeabi_fmul>
 800290a:	1c03      	adds	r3, r0, #0
 800290c:	1c18      	adds	r0, r3, #0
 800290e:	f7fe fd27 	bl	8001360 <__aeabi_f2iz>
 8002912:	0003      	movs	r3, r0
 8002914:	b25b      	sxtb	r3, r3
 8002916:	b2d9      	uxtb	r1, r3
 8002918:	2308      	movs	r3, #8
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	1dba      	adds	r2, r7, #6
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	188a      	adds	r2, r1, r2
 8002922:	701a      	strb	r2, [r3, #0]
        count++;
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	3301      	adds	r3, #1
 8002928:	623b      	str	r3, [r7, #32]
        if (count != approx_segments) {
 800292a:	6a3a      	ldr	r2, [r7, #32]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	429a      	cmp	r2, r3
 8002930:	d00e      	beq.n	8002950 <ssd1306_DrawArcWithRadiusLine+0x1e0>
            rad = ssd1306_DegToRad(count*approx_degree);
 8002932:	6a38      	ldr	r0, [r7, #32]
 8002934:	f7fe fd86 	bl	8001444 <__aeabi_ui2f>
 8002938:	1c03      	adds	r3, r0, #0
 800293a:	68f9      	ldr	r1, [r7, #12]
 800293c:	1c18      	adds	r0, r3, #0
 800293e:	f7fe fa21 	bl	8000d84 <__aeabi_fmul>
 8002942:	1c03      	adds	r3, r0, #0
 8002944:	1c18      	adds	r0, r3, #0
 8002946:	f7ff fdd3 	bl	80024f0 <ssd1306_DegToRad>
 800294a:	1c03      	adds	r3, r0, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e008      	b.n	8002962 <ssd1306_DrawArcWithRadiusLine+0x1f2>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8002950:	6978      	ldr	r0, [r7, #20]
 8002952:	f7fe fd77 	bl	8001444 <__aeabi_ui2f>
 8002956:	1c03      	adds	r3, r0, #0
 8002958:	1c18      	adds	r0, r3, #0
 800295a:	f7ff fdc9 	bl	80024f0 <ssd1306_DegToRad>
 800295e:	1c03      	adds	r3, r0, #0
 8002960:	61fb      	str	r3, [r7, #28]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	1c18      	adds	r0, r3, #0
 8002966:	f003 fc4f 	bl	8006208 <sinf>
 800296a:	1c04      	adds	r4, r0, #0
 800296c:	1d7b      	adds	r3, r7, #5
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	0018      	movs	r0, r3
 8002972:	f7fe fd15 	bl	80013a0 <__aeabi_i2f>
 8002976:	1c03      	adds	r3, r0, #0
 8002978:	1c19      	adds	r1, r3, #0
 800297a:	1c20      	adds	r0, r4, #0
 800297c:	f7fe fa02 	bl	8000d84 <__aeabi_fmul>
 8002980:	1c03      	adds	r3, r0, #0
 8002982:	1c18      	adds	r0, r3, #0
 8002984:	f7fe fcec 	bl	8001360 <__aeabi_f2iz>
 8002988:	0003      	movs	r3, r0
 800298a:	b25b      	sxtb	r3, r3
 800298c:	b2d9      	uxtb	r1, r3
 800298e:	2527      	movs	r5, #39	; 0x27
 8002990:	197b      	adds	r3, r7, r5
 8002992:	1dfa      	adds	r2, r7, #7
 8002994:	7812      	ldrb	r2, [r2, #0]
 8002996:	188a      	adds	r2, r1, r2
 8002998:	701a      	strb	r2, [r3, #0]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	1c18      	adds	r0, r3, #0
 800299e:	f003 fbff 	bl	80061a0 <cosf>
 80029a2:	1c04      	adds	r4, r0, #0
 80029a4:	1d7b      	adds	r3, r7, #5
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7fe fcf9 	bl	80013a0 <__aeabi_i2f>
 80029ae:	1c03      	adds	r3, r0, #0
 80029b0:	1c19      	adds	r1, r3, #0
 80029b2:	1c20      	adds	r0, r4, #0
 80029b4:	f7fe f9e6 	bl	8000d84 <__aeabi_fmul>
 80029b8:	1c03      	adds	r3, r0, #0
 80029ba:	1c18      	adds	r0, r3, #0
 80029bc:	f7fe fcd0 	bl	8001360 <__aeabi_f2iz>
 80029c0:	0003      	movs	r3, r0
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	b2d9      	uxtb	r1, r3
 80029c6:	2026      	movs	r0, #38	; 0x26
 80029c8:	183b      	adds	r3, r7, r0
 80029ca:	1dba      	adds	r2, r7, #6
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	188a      	adds	r2, r1, r2
 80029d0:	701a      	strb	r2, [r3, #0]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80029d2:	183b      	adds	r3, r7, r0
 80029d4:	781c      	ldrb	r4, [r3, #0]
 80029d6:	197b      	adds	r3, r7, r5
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	2308      	movs	r3, #8
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	7819      	ldrb	r1, [r3, #0]
 80029e0:	2309      	movs	r3, #9
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	7818      	ldrb	r0, [r3, #0]
 80029e6:	233c      	movs	r3, #60	; 0x3c
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	0023      	movs	r3, r4
 80029f0:	f7ff fca6 	bl	8002340 <ssd1306_Line>
    while (count < approx_segments) {
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d200      	bcs.n	80029fe <ssd1306_DrawArcWithRadiusLine+0x28e>
 80029fc:	e74c      	b.n	8002898 <ssd1306_DrawArcWithRadiusLine+0x128>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 80029fe:	230a      	movs	r3, #10
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	781c      	ldrb	r4, [r3, #0]
 8002a04:	230b      	movs	r3, #11
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	7819      	ldrb	r1, [r3, #0]
 8002a0e:	1dfb      	adds	r3, r7, #7
 8002a10:	7818      	ldrb	r0, [r3, #0]
 8002a12:	253c      	movs	r5, #60	; 0x3c
 8002a14:	197b      	adds	r3, r7, r5
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	0023      	movs	r3, r4
 8002a1c:	f7ff fc90 	bl	8002340 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8002a20:	2326      	movs	r3, #38	; 0x26
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	781c      	ldrb	r4, [r3, #0]
 8002a26:	2327      	movs	r3, #39	; 0x27
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	1dbb      	adds	r3, r7, #6
 8002a2e:	7819      	ldrb	r1, [r3, #0]
 8002a30:	1dfb      	adds	r3, r7, #7
 8002a32:	7818      	ldrb	r0, [r3, #0]
 8002a34:	197b      	adds	r3, r7, r5
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	0023      	movs	r3, r4
 8002a3c:	f7ff fc80 	bl	8002340 <ssd1306_Line>
    return;
 8002a40:	46c0      	nop			; (mov r8, r8)
}
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b00a      	add	sp, #40	; 0x28
 8002a46:	bdb0      	pop	{r4, r5, r7, pc}

08002a48 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002a48:	b5b0      	push	{r4, r5, r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	0005      	movs	r5, r0
 8002a50:	000c      	movs	r4, r1
 8002a52:	0010      	movs	r0, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	1dfb      	adds	r3, r7, #7
 8002a58:	1c2a      	adds	r2, r5, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	1dbb      	adds	r3, r7, #6
 8002a5e:	1c22      	adds	r2, r4, #0
 8002a60:	701a      	strb	r2, [r3, #0]
 8002a62:	1d7b      	adds	r3, r7, #5
 8002a64:	1c02      	adds	r2, r0, #0
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	1c0a      	adds	r2, r1, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
    int32_t x = -par_r;
 8002a6e:	1d7b      	adds	r3, r7, #5
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	425b      	negs	r3, r3
 8002a74:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002a7a:	1d7b      	adds	r3, r7, #5
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002a86:	1dfb      	adds	r3, r7, #7
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	b25b      	sxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db72      	blt.n	8002b76 <ssd1306_DrawCircle+0x12e>
 8002a90:	1dbb      	adds	r3, r7, #6
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b3f      	cmp	r3, #63	; 0x3f
 8002a96:	d86e      	bhi.n	8002b76 <ssd1306_DrawCircle+0x12e>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	1dfa      	adds	r2, r7, #7
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	b2d8      	uxtb	r0, r3
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	1dbb      	adds	r3, r7, #6
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	18d3      	adds	r3, r2, r3
 8002aae:	b2d9      	uxtb	r1, r3
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	f7ff faf7 	bl	80020a8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	1dfb      	adds	r3, r7, #7
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	18d3      	adds	r3, r2, r3
 8002ac4:	b2d8      	uxtb	r0, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	1dbb      	adds	r3, r7, #6
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	18d3      	adds	r3, r2, r3
 8002ad0:	b2d9      	uxtb	r1, r3
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	f7ff fae6 	bl	80020a8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	18d3      	adds	r3, r2, r3
 8002ae6:	b2d8      	uxtb	r0, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	1dba      	adds	r2, r7, #6
 8002aee:	7812      	ldrb	r2, [r2, #0]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	b2d9      	uxtb	r1, r3
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	001a      	movs	r2, r3
 8002afa:	f7ff fad5 	bl	80020a8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	1dfa      	adds	r2, r7, #7
 8002b04:	7812      	ldrb	r2, [r2, #0]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	b2d8      	uxtb	r0, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	1dba      	adds	r2, r7, #6
 8002b10:	7812      	ldrb	r2, [r2, #0]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	b2d9      	uxtb	r1, r3
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	f7ff fac4 	bl	80020a8 <ssd1306_DrawPixel>
        e2 = err;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	dc13      	bgt.n	8002b54 <ssd1306_DrawCircle+0x10c>
            y++;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	3301      	adds	r3, #1
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	18d3      	adds	r3, r2, r3
 8002b3c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	425b      	negs	r3, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d105      	bne.n	8002b54 <ssd1306_DrawCircle+0x10c>
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	dc01      	bgt.n	8002b54 <ssd1306_DrawCircle+0x10c>
                e2 = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	dd08      	ble.n	8002b6e <ssd1306_DrawCircle+0x126>
            x++;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	3301      	adds	r3, #1
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	18d3      	adds	r3, r2, r3
 8002b6c:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	dd91      	ble.n	8002a98 <ssd1306_DrawCircle+0x50>

    return;
 8002b74:	e000      	b.n	8002b78 <ssd1306_DrawCircle+0x130>
        return;
 8002b76:	46c0      	nop			; (mov r8, r8)
}
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b006      	add	sp, #24
 8002b7c:	bdb0      	pop	{r4, r5, r7, pc}

08002b7e <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002b7e:	b5b0      	push	{r4, r5, r7, lr}
 8002b80:	b088      	sub	sp, #32
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	0005      	movs	r5, r0
 8002b86:	000c      	movs	r4, r1
 8002b88:	0010      	movs	r0, r2
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	1c2a      	adds	r2, r5, #0
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	1dbb      	adds	r3, r7, #6
 8002b94:	1c22      	adds	r2, r4, #0
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	1d7b      	adds	r3, r7, #5
 8002b9a:	1c02      	adds	r2, r0, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	1c0a      	adds	r2, r1, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
    int32_t x = -par_r;
 8002ba4:	1d7b      	adds	r3, r7, #5
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	425b      	negs	r3, r3
 8002baa:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8002bb0:	1d7b      	adds	r3, r7, #5
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	db69      	blt.n	8002c9a <ssd1306_FillCircle+0x11c>
 8002bc6:	1dbb      	adds	r3, r7, #6
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b3f      	cmp	r3, #63	; 0x3f
 8002bcc:	d865      	bhi.n	8002c9a <ssd1306_FillCircle+0x11c>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	b2d9      	uxtb	r1, r3
 8002bd2:	230f      	movs	r3, #15
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	1dba      	adds	r2, r7, #6
 8002bd8:	7812      	ldrb	r2, [r2, #0]
 8002bda:	188a      	adds	r2, r1, r2
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e028      	b.n	8002c32 <ssd1306_FillCircle+0xb4>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	230e      	movs	r3, #14
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	1df9      	adds	r1, r7, #7
 8002bea:	7809      	ldrb	r1, [r1, #0]
 8002bec:	1a8a      	subs	r2, r1, r2
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e010      	b.n	8002c14 <ssd1306_FillCircle+0x96>
                ssd1306_DrawPixel(_x, _y, par_color);
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	230f      	movs	r3, #15
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	7819      	ldrb	r1, [r3, #0]
 8002bfc:	240e      	movs	r4, #14
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	0018      	movs	r0, r3
 8002c04:	f7ff fa50 	bl	80020a8 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8002c08:	0021      	movs	r1, r4
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	3a01      	subs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	230e      	movs	r3, #14
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	7819      	ldrb	r1, [r3, #0]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	18cb      	adds	r3, r1, r3
 8002c22:	429a      	cmp	r2, r3
 8002c24:	dae5      	bge.n	8002bf2 <ssd1306_FillCircle+0x74>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8002c26:	210f      	movs	r1, #15
 8002c28:	187b      	adds	r3, r7, r1
 8002c2a:	781a      	ldrb	r2, [r3, #0]
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	3a01      	subs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	230f      	movs	r3, #15
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	781a      	ldrb	r2, [r3, #0]
 8002c38:	1dbb      	adds	r3, r7, #6
 8002c3a:	7819      	ldrb	r1, [r3, #0]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	1acb      	subs	r3, r1, r3
 8002c40:	429a      	cmp	r2, r3
 8002c42:	dacd      	bge.n	8002be0 <ssd1306_FillCircle+0x62>
            }
        }

        e2 = err;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	dc13      	bgt.n	8002c78 <ssd1306_FillCircle+0xfa>
            y++;
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	3301      	adds	r3, #1
 8002c54:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	18d3      	adds	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	425b      	negs	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d105      	bne.n	8002c78 <ssd1306_FillCircle+0xfa>
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	dc01      	bgt.n	8002c78 <ssd1306_FillCircle+0xfa>
                e2 = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	dd08      	ble.n	8002c92 <ssd1306_FillCircle+0x114>
            x++;
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	3301      	adds	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	18d3      	adds	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	dd9a      	ble.n	8002bce <ssd1306_FillCircle+0x50>

    return;
 8002c98:	e000      	b.n	8002c9c <ssd1306_FillCircle+0x11e>
        return;
 8002c9a:	46c0      	nop			; (mov r8, r8)
}
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b008      	add	sp, #32
 8002ca0:	bdb0      	pop	{r4, r5, r7, pc}

08002ca2 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002ca2:	b5b0      	push	{r4, r5, r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af02      	add	r7, sp, #8
 8002ca8:	0005      	movs	r5, r0
 8002caa:	000c      	movs	r4, r1
 8002cac:	0010      	movs	r0, r2
 8002cae:	0019      	movs	r1, r3
 8002cb0:	1dfb      	adds	r3, r7, #7
 8002cb2:	1c2a      	adds	r2, r5, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	1dbb      	adds	r3, r7, #6
 8002cb8:	1c22      	adds	r2, r4, #0
 8002cba:	701a      	strb	r2, [r3, #0]
 8002cbc:	1d7b      	adds	r3, r7, #5
 8002cbe:	1c02      	adds	r2, r0, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	1c0a      	adds	r2, r1, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002cc8:	1dbb      	adds	r3, r7, #6
 8002cca:	781c      	ldrb	r4, [r3, #0]
 8002ccc:	1d7b      	adds	r3, r7, #5
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	1dbb      	adds	r3, r7, #6
 8002cd2:	7819      	ldrb	r1, [r3, #0]
 8002cd4:	1dfb      	adds	r3, r7, #7
 8002cd6:	7818      	ldrb	r0, [r3, #0]
 8002cd8:	2518      	movs	r5, #24
 8002cda:	197b      	adds	r3, r7, r5
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	0023      	movs	r3, r4
 8002ce2:	f7ff fb2d 	bl	8002340 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	781c      	ldrb	r4, [r3, #0]
 8002cea:	1d7b      	adds	r3, r7, #5
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	1dbb      	adds	r3, r7, #6
 8002cf0:	7819      	ldrb	r1, [r3, #0]
 8002cf2:	1d7b      	adds	r3, r7, #5
 8002cf4:	7818      	ldrb	r0, [r3, #0]
 8002cf6:	197b      	adds	r3, r7, r5
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	0023      	movs	r3, r4
 8002cfe:	f7ff fb1f 	bl	8002340 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	781c      	ldrb	r4, [r3, #0]
 8002d06:	1dfb      	adds	r3, r7, #7
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	7819      	ldrb	r1, [r3, #0]
 8002d0e:	1d7b      	adds	r3, r7, #5
 8002d10:	7818      	ldrb	r0, [r3, #0]
 8002d12:	197b      	adds	r3, r7, r5
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	0023      	movs	r3, r4
 8002d1a:	f7ff fb11 	bl	8002340 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002d1e:	1dbb      	adds	r3, r7, #6
 8002d20:	781c      	ldrb	r4, [r3, #0]
 8002d22:	1dfb      	adds	r3, r7, #7
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	1d3b      	adds	r3, r7, #4
 8002d28:	7819      	ldrb	r1, [r3, #0]
 8002d2a:	1dfb      	adds	r3, r7, #7
 8002d2c:	7818      	ldrb	r0, [r3, #0]
 8002d2e:	197b      	adds	r3, r7, r5
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	0023      	movs	r3, r4
 8002d36:	f7ff fb03 	bl	8002340 <ssd1306_Line>

    return;
 8002d3a:	46c0      	nop			; (mov r8, r8)
}
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bdb0      	pop	{r4, r5, r7, pc}

08002d42 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002d42:	b5b0      	push	{r4, r5, r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	0005      	movs	r5, r0
 8002d4a:	000c      	movs	r4, r1
 8002d4c:	0010      	movs	r0, r2
 8002d4e:	0019      	movs	r1, r3
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	1c2a      	adds	r2, r5, #0
 8002d54:	701a      	strb	r2, [r3, #0]
 8002d56:	1dbb      	adds	r3, r7, #6
 8002d58:	1c22      	adds	r2, r4, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	1d7b      	adds	r3, r7, #5
 8002d5e:	1c02      	adds	r2, r0, #0
 8002d60:	701a      	strb	r2, [r3, #0]
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	1c0a      	adds	r2, r1, #0
 8002d66:	701a      	strb	r2, [r3, #0]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002d68:	230d      	movs	r3, #13
 8002d6a:	18fa      	adds	r2, r7, r3
 8002d6c:	1dfb      	adds	r3, r7, #7
 8002d6e:	1d79      	adds	r1, r7, #5
 8002d70:	780c      	ldrb	r4, [r1, #0]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b2d8      	uxtb	r0, r3
 8002d76:	b2e1      	uxtb	r1, r4
 8002d78:	4288      	cmp	r0, r1
 8002d7a:	d900      	bls.n	8002d7e <ssd1306_FillRectangle+0x3c>
 8002d7c:	1c23      	adds	r3, r4, #0
 8002d7e:	7013      	strb	r3, [r2, #0]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002d80:	230c      	movs	r3, #12
 8002d82:	18fa      	adds	r2, r7, r3
 8002d84:	1d7b      	adds	r3, r7, #5
 8002d86:	1df9      	adds	r1, r7, #7
 8002d88:	780c      	ldrb	r4, [r1, #0]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2d8      	uxtb	r0, r3
 8002d8e:	b2e1      	uxtb	r1, r4
 8002d90:	4288      	cmp	r0, r1
 8002d92:	d200      	bcs.n	8002d96 <ssd1306_FillRectangle+0x54>
 8002d94:	1c23      	adds	r3, r4, #0
 8002d96:	7013      	strb	r3, [r2, #0]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002d98:	230b      	movs	r3, #11
 8002d9a:	18fa      	adds	r2, r7, r3
 8002d9c:	1dbb      	adds	r3, r7, #6
 8002d9e:	1d39      	adds	r1, r7, #4
 8002da0:	780c      	ldrb	r4, [r1, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b2d8      	uxtb	r0, r3
 8002da6:	b2e1      	uxtb	r1, r4
 8002da8:	4288      	cmp	r0, r1
 8002daa:	d900      	bls.n	8002dae <ssd1306_FillRectangle+0x6c>
 8002dac:	1c23      	adds	r3, r4, #0
 8002dae:	7013      	strb	r3, [r2, #0]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002db0:	230a      	movs	r3, #10
 8002db2:	18fa      	adds	r2, r7, r3
 8002db4:	1d3b      	adds	r3, r7, #4
 8002db6:	1db9      	adds	r1, r7, #6
 8002db8:	780c      	ldrb	r4, [r1, #0]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2d8      	uxtb	r0, r3
 8002dbe:	b2e1      	uxtb	r1, r4
 8002dc0:	4288      	cmp	r0, r1
 8002dc2:	d200      	bcs.n	8002dc6 <ssd1306_FillRectangle+0x84>
 8002dc4:	1c23      	adds	r3, r4, #0
 8002dc6:	7013      	strb	r3, [r2, #0]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002dc8:	230f      	movs	r3, #15
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	220b      	movs	r2, #11
 8002dce:	18ba      	adds	r2, r7, r2
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e02b      	b.n	8002e2e <ssd1306_FillRectangle+0xec>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002dd6:	230e      	movs	r3, #14
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	220d      	movs	r2, #13
 8002ddc:	18ba      	adds	r2, r7, r2
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e011      	b.n	8002e08 <ssd1306_FillRectangle+0xc6>
            ssd1306_DrawPixel(x, y, color);
 8002de4:	2320      	movs	r3, #32
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	230f      	movs	r3, #15
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	7819      	ldrb	r1, [r3, #0]
 8002df0:	240e      	movs	r4, #14
 8002df2:	193b      	adds	r3, r7, r4
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7ff f956 	bl	80020a8 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002dfc:	0021      	movs	r1, r4
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	3201      	adds	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	210e      	movs	r1, #14
 8002e0a:	187a      	adds	r2, r7, r1
 8002e0c:	230c      	movs	r3, #12
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d804      	bhi.n	8002e22 <ssd1306_FillRectangle+0xe0>
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b25b      	sxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	dae0      	bge.n	8002de4 <ssd1306_FillRectangle+0xa2>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002e22:	210f      	movs	r1, #15
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	187b      	adds	r3, r7, r1
 8002e2a:	3201      	adds	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	210f      	movs	r1, #15
 8002e30:	187a      	adds	r2, r7, r1
 8002e32:	230a      	movs	r3, #10
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	7812      	ldrb	r2, [r2, #0]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d804      	bhi.n	8002e48 <ssd1306_FillRectangle+0x106>
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b3f      	cmp	r3, #63	; 0x3f
 8002e44:	d9c7      	bls.n	8002dd6 <ssd1306_FillRectangle+0x94>
        }
    }
    return;
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46c0      	nop			; (mov r8, r8)
}
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b004      	add	sp, #16
 8002e4e:	bdb0      	pop	{r4, r5, r7, pc}

08002e50 <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8002e50:	b5b0      	push	{r4, r5, r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	0005      	movs	r5, r0
 8002e58:	000c      	movs	r4, r1
 8002e5a:	0010      	movs	r0, r2
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	1dfb      	adds	r3, r7, #7
 8002e60:	1c2a      	adds	r2, r5, #0
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	1dbb      	adds	r3, r7, #6
 8002e66:	1c22      	adds	r2, r4, #0
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	1d7b      	adds	r3, r7, #5
 8002e6c:	1c02      	adds	r2, r0, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	1c0a      	adds	r2, r1, #0
 8002e74:	701a      	strb	r2, [r3, #0]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 8002e76:	1d7b      	adds	r3, r7, #5
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	b25b      	sxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db03      	blt.n	8002e88 <ssd1306_InvertRectangle+0x38>
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b3f      	cmp	r3, #63	; 0x3f
 8002e86:	d901      	bls.n	8002e8c <ssd1306_InvertRectangle+0x3c>
    return SSD1306_ERR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e0b2      	b.n	8002ff2 <ssd1306_InvertRectangle+0x1a2>
  }
  if ((x1 > x2) || (y1 > y2)) {
 8002e8c:	1dfa      	adds	r2, r7, #7
 8002e8e:	1d7b      	adds	r3, r7, #5
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d805      	bhi.n	8002ea4 <ssd1306_InvertRectangle+0x54>
 8002e98:	1dba      	adds	r2, r7, #6
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	7812      	ldrb	r2, [r2, #0]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d901      	bls.n	8002ea8 <ssd1306_InvertRectangle+0x58>
    return SSD1306_ERR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e0a4      	b.n	8002ff2 <ssd1306_InvertRectangle+0x1a2>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 8002ea8:	1dbb      	adds	r3, r7, #6
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	08db      	lsrs	r3, r3, #3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d05d      	beq.n	8002f78 <ssd1306_InvertRectangle+0x128>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 8002ebc:	1dfb      	adds	r3, r7, #7
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	e053      	b.n	8002f6c <ssd1306_InvertRectangle+0x11c>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	08db      	lsrs	r3, r3, #3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	01db      	lsls	r3, r3, #7
 8002ece:	001a      	movs	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	189b      	adds	r3, r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 8002ed6:	4a49      	ldr	r2, [pc, #292]	; (8002ffc <ssd1306_InvertRectangle+0x1ac>)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	18d3      	adds	r3, r2, r3
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	b25a      	sxtb	r2, r3
 8002ee0:	1dbb      	adds	r3, r7, #6
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2107      	movs	r1, #7
 8002ee6:	400b      	ands	r3, r1
 8002ee8:	21ff      	movs	r1, #255	; 0xff
 8002eea:	4099      	lsls	r1, r3
 8002eec:	000b      	movs	r3, r1
 8002eee:	b25b      	sxtb	r3, r3
 8002ef0:	4053      	eors	r3, r2
 8002ef2:	b25b      	sxtb	r3, r3
 8002ef4:	b2d9      	uxtb	r1, r3
 8002ef6:	4a41      	ldr	r2, [pc, #260]	; (8002ffc <ssd1306_InvertRectangle+0x1ac>)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	18d3      	adds	r3, r2, r3
 8002efc:	1c0a      	adds	r2, r1, #0
 8002efe:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3380      	adds	r3, #128	; 0x80
 8002f04:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8002f06:	e00d      	b.n	8002f24 <ssd1306_InvertRectangle+0xd4>
        SSD1306_Buffer[i] ^= 0xFF;
 8002f08:	4a3c      	ldr	r2, [pc, #240]	; (8002ffc <ssd1306_InvertRectangle+0x1ac>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	18d3      	adds	r3, r2, r3
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	b2d9      	uxtb	r1, r3
 8002f14:	4a39      	ldr	r2, [pc, #228]	; (8002ffc <ssd1306_InvertRectangle+0x1ac>)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	18d3      	adds	r3, r2, r3
 8002f1a:	1c0a      	adds	r2, r1, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3380      	adds	r3, #128	; 0x80
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	1d3b      	adds	r3, r7, #4
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	08db      	lsrs	r3, r3, #3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	01db      	lsls	r3, r3, #7
 8002f2e:	001a      	movs	r2, r3
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	18d3      	adds	r3, r2, r3
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3e6      	bcc.n	8002f08 <ssd1306_InvertRectangle+0xb8>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 8002f3a:	4a30      	ldr	r2, [pc, #192]	; (8002ffc <ssd1306_InvertRectangle+0x1ac>)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	18d3      	adds	r3, r2, r3
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	b25a      	sxtb	r2, r3
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	2107      	movs	r1, #7
 8002f4c:	400b      	ands	r3, r1
 8002f4e:	21ff      	movs	r1, #255	; 0xff
 8002f50:	4119      	asrs	r1, r3
 8002f52:	000b      	movs	r3, r1
 8002f54:	b25b      	sxtb	r3, r3
 8002f56:	4053      	eors	r3, r2
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	b2d9      	uxtb	r1, r3
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <ssd1306_InvertRectangle+0x1ac>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	18d3      	adds	r3, r2, r3
 8002f62:	1c0a      	adds	r2, r1, #0
 8002f64:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	1d7b      	adds	r3, r7, #5
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d9a6      	bls.n	8002ec4 <ssd1306_InvertRectangle+0x74>
 8002f76:	e03b      	b.n	8002ff0 <ssd1306_InvertRectangle+0x1a0>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	4013      	ands	r3, r2
 8002f80:	22ff      	movs	r2, #255	; 0xff
 8002f82:	409a      	lsls	r2, r3
 8002f84:	0013      	movs	r3, r2
 8002f86:	b25b      	sxtb	r3, r3
 8002f88:	1d3a      	adds	r2, r7, #4
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	43d2      	mvns	r2, r2
 8002f8e:	2107      	movs	r1, #7
 8002f90:	400a      	ands	r2, r1
 8002f92:	21ff      	movs	r1, #255	; 0xff
 8002f94:	4111      	asrs	r1, r2
 8002f96:	000a      	movs	r2, r1
 8002f98:	b252      	sxtb	r2, r2
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	b25a      	sxtb	r2, r3
 8002f9e:	230f      	movs	r3, #15
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	701a      	strb	r2, [r3, #0]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	1dbb      	adds	r3, r7, #6
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	08db      	lsrs	r3, r3, #3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	01db      	lsls	r3, r3, #7
 8002fb2:	18d3      	adds	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	e010      	b.n	8002fda <ssd1306_InvertRectangle+0x18a>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8002fb8:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <ssd1306_InvertRectangle+0x1ac>)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	18d3      	adds	r3, r2, r3
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	4053      	eors	r3, r2
 8002fc8:	b2d9      	uxtb	r1, r3
 8002fca:	4a0c      	ldr	r2, [pc, #48]	; (8002ffc <ssd1306_InvertRectangle+0x1ac>)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	18d3      	adds	r3, r2, r3
 8002fd0:	1c0a      	adds	r2, r1, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	1d7b      	adds	r3, r7, #5
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	1d3a      	adds	r2, r7, #4
 8002fe0:	7812      	ldrb	r2, [r2, #0]
 8002fe2:	08d2      	lsrs	r2, r2, #3
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	01d2      	lsls	r2, r2, #7
 8002fe8:	189b      	adds	r3, r3, r2
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d9e3      	bls.n	8002fb8 <ssd1306_InvertRectangle+0x168>
    }
  }
  return SSD1306_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b006      	add	sp, #24
 8002ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	200000cc 	.word	0x200000cc

08003000 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	0004      	movs	r4, r0
 8003008:	0008      	movs	r0, r1
 800300a:	603a      	str	r2, [r7, #0]
 800300c:	0019      	movs	r1, r3
 800300e:	1dfb      	adds	r3, r7, #7
 8003010:	1c22      	adds	r2, r4, #0
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	1dbb      	adds	r3, r7, #6
 8003016:	1c02      	adds	r2, r0, #0
 8003018:	701a      	strb	r2, [r3, #0]
 800301a:	1d7b      	adds	r3, r7, #5
 800301c:	1c0a      	adds	r2, r1, #0
 800301e:	701a      	strb	r2, [r3, #0]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003020:	1d7b      	adds	r3, r7, #5
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	3307      	adds	r3, #7
 8003026:	2b00      	cmp	r3, #0
 8003028:	da00      	bge.n	800302c <ssd1306_DrawBitmap+0x2c>
 800302a:	3307      	adds	r3, #7
 800302c:	10db      	asrs	r3, r3, #3
 800302e:	001a      	movs	r2, r3
 8003030:	230a      	movs	r3, #10
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8003036:	230f      	movs	r3, #15
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b25b      	sxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	db65      	blt.n	8003114 <ssd1306_DrawBitmap+0x114>
 8003048:	1dbb      	adds	r3, r7, #6
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b3f      	cmp	r3, #63	; 0x3f
 800304e:	d861      	bhi.n	8003114 <ssd1306_DrawBitmap+0x114>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8003050:	230e      	movs	r3, #14
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e053      	b.n	8003102 <ssd1306_DrawBitmap+0x102>
        for (uint8_t i = 0; i < w; i++) {
 800305a:	230d      	movs	r3, #13
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	e03c      	b.n	80030de <ssd1306_DrawBitmap+0xde>
            if (i & 7) {
 8003064:	230d      	movs	r3, #13
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2207      	movs	r2, #7
 800306c:	4013      	ands	r3, r2
 800306e:	d006      	beq.n	800307e <ssd1306_DrawBitmap+0x7e>
                byte <<= 1;
 8003070:	230f      	movs	r3, #15
 8003072:	18fa      	adds	r2, r7, r3
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	18db      	adds	r3, r3, r3
 800307a:	7013      	strb	r3, [r2, #0]
 800307c:	e014      	b.n	80030a8 <ssd1306_DrawBitmap+0xa8>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800307e:	230e      	movs	r3, #14
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	220a      	movs	r2, #10
 8003086:	18ba      	adds	r2, r7, r2
 8003088:	2100      	movs	r1, #0
 800308a:	5e52      	ldrsh	r2, [r2, r1]
 800308c:	4353      	muls	r3, r2
 800308e:	220d      	movs	r2, #13
 8003090:	18ba      	adds	r2, r7, r2
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	08d2      	lsrs	r2, r2, #3
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	189b      	adds	r3, r3, r2
 800309a:	001a      	movs	r2, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	189a      	adds	r2, r3, r2
 80030a0:	230f      	movs	r3, #15
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	701a      	strb	r2, [r3, #0]
            }

            if (byte & 0x80) {
 80030a8:	230f      	movs	r3, #15
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	b25b      	sxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da0e      	bge.n	80030d2 <ssd1306_DrawBitmap+0xd2>
                ssd1306_DrawPixel(x + i, y, color);
 80030b4:	1dfa      	adds	r2, r7, #7
 80030b6:	230d      	movs	r3, #13
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	18d3      	adds	r3, r2, r3
 80030c0:	b2d8      	uxtb	r0, r3
 80030c2:	2324      	movs	r3, #36	; 0x24
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	781a      	ldrb	r2, [r3, #0]
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	0019      	movs	r1, r3
 80030ce:	f7fe ffeb 	bl	80020a8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80030d2:	210d      	movs	r1, #13
 80030d4:	187b      	adds	r3, r7, r1
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	3201      	adds	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	230d      	movs	r3, #13
 80030e0:	18fa      	adds	r2, r7, r3
 80030e2:	1d7b      	adds	r3, r7, #5
 80030e4:	7812      	ldrb	r2, [r2, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d3bb      	bcc.n	8003064 <ssd1306_DrawBitmap+0x64>
    for (uint8_t j = 0; j < h; j++, y++) {
 80030ec:	210e      	movs	r1, #14
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	3201      	adds	r2, #1
 80030f6:	701a      	strb	r2, [r3, #0]
 80030f8:	1dbb      	adds	r3, r7, #6
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	1dbb      	adds	r3, r7, #6
 80030fe:	3201      	adds	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	230e      	movs	r3, #14
 8003104:	18fa      	adds	r2, r7, r3
 8003106:	2320      	movs	r3, #32
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	7812      	ldrb	r2, [r2, #0]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d3a3      	bcc.n	800305a <ssd1306_DrawBitmap+0x5a>
            }
        }
    }
    return;
 8003112:	e000      	b.n	8003116 <ssd1306_DrawBitmap+0x116>
        return;
 8003114:	46c0      	nop			; (mov r8, r8)
}
 8003116:	46bd      	mov	sp, r7
 8003118:	b005      	add	sp, #20
 800311a:	bd90      	pop	{r4, r7, pc}

0800311c <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	0002      	movs	r2, r0
 8003124:	1dfb      	adds	r3, r7, #7
 8003126:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003128:	210f      	movs	r1, #15
 800312a:	187b      	adds	r3, r7, r1
 800312c:	2281      	movs	r2, #129	; 0x81
 800312e:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003130:	187b      	adds	r3, r7, r1
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	0018      	movs	r0, r3
 8003136:	f7fe fecf 	bl	8001ed8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	0018      	movs	r0, r3
 8003140:	f7fe feca 	bl	8001ed8 <ssd1306_WriteCommand>
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	b004      	add	sp, #16
 800314a:	bd80      	pop	{r7, pc}

0800314c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	0002      	movs	r2, r0
 8003154:	1dfb      	adds	r3, r7, #7
 8003156:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8003158:	1dfb      	adds	r3, r7, #7
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8003160:	230f      	movs	r3, #15
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	22af      	movs	r2, #175	; 0xaf
 8003166:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <ssd1306_SetDisplayOn+0x48>)
 800316a:	2201      	movs	r2, #1
 800316c:	715a      	strb	r2, [r3, #5]
 800316e:	e006      	b.n	800317e <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8003170:	230f      	movs	r3, #15
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	22ae      	movs	r2, #174	; 0xae
 8003176:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <ssd1306_SetDisplayOn+0x48>)
 800317a:	2200      	movs	r2, #0
 800317c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800317e:	230f      	movs	r3, #15
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	0018      	movs	r0, r3
 8003186:	f7fe fea7 	bl	8001ed8 <ssd1306_WriteCommand>
}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	46bd      	mov	sp, r7
 800318e:	b004      	add	sp, #16
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	200004cc 	.word	0x200004cc

08003198 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800319e:	2000      	movs	r0, #0
 80031a0:	f7fe ff3a 	bl	8002018 <ssd1306_Fill>
   
    uint8_t x = 0;
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
    uint8_t y = 0;
 80031aa:	1dbb      	adds	r3, r7, #6
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
    do {
        ssd1306_DrawPixel(x, y, Black);
 80031b0:	1dbb      	adds	r3, r7, #6
 80031b2:	7819      	ldrb	r1, [r3, #0]
 80031b4:	1dfb      	adds	r3, r7, #7
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2200      	movs	r2, #0
 80031ba:	0018      	movs	r0, r3
 80031bc:	f7fe ff74 	bl	80020a8 <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 80031c0:	1dbb      	adds	r3, r7, #6
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <ssd1306_TestBorder+0x44>
 80031c8:	1dfb      	adds	r3, r7, #7
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b7e      	cmp	r3, #126	; 0x7e
 80031ce:	d805      	bhi.n	80031dc <ssd1306_TestBorder+0x44>
            x++;
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	1dfb      	adds	r3, r7, #7
 80031d6:	3201      	adds	r2, #1
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	e020      	b.n	800321e <ssd1306_TestBorder+0x86>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 80031dc:	1dfb      	adds	r3, r7, #7
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b7f      	cmp	r3, #127	; 0x7f
 80031e2:	d109      	bne.n	80031f8 <ssd1306_TestBorder+0x60>
 80031e4:	1dbb      	adds	r3, r7, #6
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b3e      	cmp	r3, #62	; 0x3e
 80031ea:	d805      	bhi.n	80031f8 <ssd1306_TestBorder+0x60>
            y++;
 80031ec:	1dbb      	adds	r3, r7, #6
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	1dbb      	adds	r3, r7, #6
 80031f2:	3201      	adds	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e012      	b.n	800321e <ssd1306_TestBorder+0x86>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 80031f8:	1dbb      	adds	r3, r7, #6
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b3f      	cmp	r3, #63	; 0x3f
 80031fe:	d109      	bne.n	8003214 <ssd1306_TestBorder+0x7c>
 8003200:	1dfb      	adds	r3, r7, #7
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <ssd1306_TestBorder+0x7c>
            x--;
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	1dfb      	adds	r3, r7, #7
 800320e:	3a01      	subs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
 8003212:	e004      	b.n	800321e <ssd1306_TestBorder+0x86>
        else
            y--;
 8003214:	1dbb      	adds	r3, r7, #6
 8003216:	781a      	ldrb	r2, [r3, #0]
 8003218:	1dbb      	adds	r3, r7, #6
 800321a:	3a01      	subs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]

        ssd1306_DrawPixel(x, y, White);
 800321e:	1dbb      	adds	r3, r7, #6
 8003220:	7819      	ldrb	r1, [r3, #0]
 8003222:	1dfb      	adds	r3, r7, #7
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2201      	movs	r2, #1
 8003228:	0018      	movs	r0, r3
 800322a:	f7fe ff3d 	bl	80020a8 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 800322e:	f7fe ff0d 	bl	800204c <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8003232:	2005      	movs	r0, #5
 8003234:	f000 fcfc 	bl	8003c30 <HAL_Delay>
    } while(x > 0 || y > 0);
 8003238:	1dfb      	adds	r3, r7, #7
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1b7      	bne.n	80031b0 <ssd1306_TestBorder+0x18>
 8003240:	1dbb      	adds	r3, r7, #6
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1b3      	bne.n	80031b0 <ssd1306_TestBorder+0x18>
   
    HAL_Delay(1000);
 8003248:	23fa      	movs	r3, #250	; 0xfa
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	0018      	movs	r0, r3
 800324e:	f000 fcef 	bl	8003c30 <HAL_Delay>
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	46bd      	mov	sp, r7
 8003256:	b002      	add	sp, #8
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 8003262:	1dfb      	adds	r3, r7, #7
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
    ssd1306_Fill(Black);
 8003268:	2000      	movs	r0, #0
 800326a:	f7fe fed5 	bl	8002018 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 800326e:	1dfb      	adds	r3, r7, #7
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	0019      	movs	r1, r3
 8003274:	2002      	movs	r0, #2
 8003276:	f7ff f849 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <ssd1306_TestFonts1+0xb4>)
 800327c:	4825      	ldr	r0, [pc, #148]	; (8003314 <ssd1306_TestFonts1+0xb8>)
 800327e:	2201      	movs	r2, #1
 8003280:	9200      	str	r2, [sp, #0]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f7ff f814 	bl	80022b4 <ssd1306_WriteString>
    y += 26;
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	1dfa      	adds	r2, r7, #7
 8003290:	7812      	ldrb	r2, [r2, #0]
 8003292:	321a      	adds	r2, #26
 8003294:	701a      	strb	r2, [r3, #0]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8003296:	1dfb      	adds	r3, r7, #7
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	0019      	movs	r1, r3
 800329c:	2002      	movs	r0, #2
 800329e:	f7ff f835 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <ssd1306_TestFonts1+0xbc>)
 80032a4:	481d      	ldr	r0, [pc, #116]	; (800331c <ssd1306_TestFonts1+0xc0>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	9200      	str	r2, [sp, #0]
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f7ff f800 	bl	80022b4 <ssd1306_WriteString>
    y += 18;
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	1dfa      	adds	r2, r7, #7
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	3212      	adds	r2, #18
 80032bc:	701a      	strb	r2, [r3, #0]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 80032be:	1dfb      	adds	r3, r7, #7
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	0019      	movs	r1, r3
 80032c4:	2002      	movs	r0, #2
 80032c6:	f7ff f821 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <ssd1306_TestFonts1+0xc4>)
 80032cc:	4815      	ldr	r0, [pc, #84]	; (8003324 <ssd1306_TestFonts1+0xc8>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	9200      	str	r2, [sp, #0]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f7fe ffec 	bl	80022b4 <ssd1306_WriteString>
    y += 10;
 80032dc:	1dfb      	adds	r3, r7, #7
 80032de:	1dfa      	adds	r2, r7, #7
 80032e0:	7812      	ldrb	r2, [r2, #0]
 80032e2:	320a      	adds	r2, #10
 80032e4:	701a      	strb	r2, [r3, #0]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	0019      	movs	r1, r3
 80032ec:	2002      	movs	r0, #2
 80032ee:	f7ff f80d 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <ssd1306_TestFonts1+0xcc>)
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <ssd1306_TestFonts1+0xd0>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	9200      	str	r2, [sp, #0]
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f7fe ffd8 	bl	80022b4 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8003304:	f7fe fea2 	bl	800204c <ssd1306_UpdateScreen>
}
 8003308:	46c0      	nop			; (mov r8, r8)
 800330a:	46bd      	mov	sp, r7
 800330c:	b002      	add	sp, #8
 800330e:	bd80      	pop	{r7, pc}
 8003310:	0800babc 	.word	0x0800babc
 8003314:	08006db4 	.word	0x08006db4
 8003318:	0800bab0 	.word	0x0800bab0
 800331c:	08006dc0 	.word	0x08006dc0
 8003320:	0800baa4 	.word	0x0800baa4
 8003324:	08006dcc 	.word	0x08006dcc
 8003328:	0800ba98 	.word	0x0800ba98
 800332c:	08006dd8 	.word	0x08006dd8

08003330 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b085      	sub	sp, #20
 8003334:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8003336:	2000      	movs	r0, #0
 8003338:	f7fe fe6e 	bl	8002018 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 800333c:	2104      	movs	r1, #4
 800333e:	2000      	movs	r0, #0
 8003340:	f7fe ffe4 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8003344:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <ssd1306_TestFonts2+0x88>)
 8003346:	481d      	ldr	r0, [pc, #116]	; (80033bc <ssd1306_TestFonts2+0x8c>)
 8003348:	2201      	movs	r2, #1
 800334a:	9200      	str	r2, [sp, #0]
 800334c:	6819      	ldr	r1, [r3, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f7fe ffaf 	bl	80022b4 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 8003356:	2124      	movs	r1, #36	; 0x24
 8003358:	2000      	movs	r0, #0
 800335a:	f7fe ffd7 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 800335e:	4b16      	ldr	r3, [pc, #88]	; (80033b8 <ssd1306_TestFonts2+0x88>)
 8003360:	4817      	ldr	r0, [pc, #92]	; (80033c0 <ssd1306_TestFonts2+0x90>)
 8003362:	2201      	movs	r2, #1
 8003364:	9200      	str	r2, [sp, #0]
 8003366:	6819      	ldr	r1, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f7fe ffa2 	bl	80022b4 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8003370:	1dfb      	adds	r3, r7, #7
 8003372:	2260      	movs	r2, #96	; 0x60
 8003374:	701a      	strb	r2, [r3, #0]
    y1 = 4+24+8+24;
 8003376:	1dbb      	adds	r3, r7, #6
 8003378:	223c      	movs	r2, #60	; 0x3c
 800337a:	701a      	strb	r2, [r3, #0]
    x2 = x1+16;
 800337c:	1d7b      	adds	r3, r7, #5
 800337e:	1dfa      	adds	r2, r7, #7
 8003380:	7812      	ldrb	r2, [r2, #0]
 8003382:	3210      	adds	r2, #16
 8003384:	701a      	strb	r2, [r3, #0]
    y2 = y1+2;
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	1dba      	adds	r2, r7, #6
 800338a:	7812      	ldrb	r2, [r2, #0]
 800338c:	3202      	adds	r2, #2
 800338e:	701a      	strb	r2, [r3, #0]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	781c      	ldrb	r4, [r3, #0]
 8003394:	1d7b      	adds	r3, r7, #5
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	1dbb      	adds	r3, r7, #6
 800339a:	7819      	ldrb	r1, [r3, #0]
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	7818      	ldrb	r0, [r3, #0]
 80033a0:	2301      	movs	r3, #1
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	0023      	movs	r3, r4
 80033a6:	f7ff fccc 	bl	8002d42 <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 80033aa:	f7fe fe4f 	bl	800204c <ssd1306_UpdateScreen>
#endif
}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b003      	add	sp, #12
 80033b4:	bd90      	pop	{r4, r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	0800bac8 	.word	0x0800bac8
 80033bc:	08006de4 	.word	0x08006de4
 80033c0:	08006df0 	.word	0x08006df0

080033c4 <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fe fe24 	bl	8002018 <ssd1306_Fill>
#ifdef SSD1306_INCLUDE_FONT_16x15
    ssd1306_SetCursor(4, 4);
 80033d0:	2104      	movs	r1, #4
 80033d2:	2004      	movs	r0, #4
 80033d4:	f7fe ff9a 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("Proportional", Font_16x15, White);
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <ssd1306_TestFonts3+0x64>)
 80033da:	4814      	ldr	r0, [pc, #80]	; (800342c <ssd1306_TestFonts3+0x68>)
 80033dc:	2201      	movs	r2, #1
 80033de:	9200      	str	r2, [sp, #0]
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f7fe ff65 	bl	80022b4 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 80033ea:	2118      	movs	r1, #24
 80033ec:	2004      	movs	r0, #4
 80033ee:	f7fe ff8d 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
 80033f2:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <ssd1306_TestFonts3+0x64>)
 80033f4:	480e      	ldr	r0, [pc, #56]	; (8003430 <ssd1306_TestFonts3+0x6c>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	9200      	str	r2, [sp, #0]
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f7fe ff58 	bl	80022b4 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	2004      	movs	r0, #4
 8003408:	f7fe ff80 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <ssd1306_TestFonts3+0x64>)
 800340e:	4809      	ldr	r0, [pc, #36]	; (8003434 <ssd1306_TestFonts3+0x70>)
 8003410:	2201      	movs	r2, #1
 8003412:	9200      	str	r2, [sp, #0]
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f7fe ff4b 	bl	80022b4 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("Font not", Font_11x18, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("included!", Font_11x18, White);
#endif
    ssd1306_UpdateScreen();
 800341e:	f7fe fe15 	bl	800204c <ssd1306_UpdateScreen>
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	0800bad4 	.word	0x0800bad4
 800342c:	08006dfc 	.word	0x08006dfc
 8003430:	08006e0c 	.word	0x08006e0c
 8003434:	08006e1c 	.word	0x08006e1c

08003438 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8003438:	b5b0      	push	{r4, r5, r7, lr}
 800343a:	b09a      	sub	sp, #104	; 0x68
 800343c:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 800343e:	2001      	movs	r0, #1
 8003440:	f7fe fdea 	bl	8002018 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8003444:	f000 fbea 	bl	8003c1c <HAL_GetTick>
 8003448:	0003      	movs	r3, r0
 800344a:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t end = start;
 800344c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800344e:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 8003454:	2344      	movs	r3, #68	; 0x44
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	4a45      	ldr	r2, [pc, #276]	; (8003570 <ssd1306_TestFPS+0x138>)
 800345a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800345c:	c313      	stmia	r3!, {r0, r1, r4}
   
    ssd1306_SetCursor(2,0);
 800345e:	2100      	movs	r1, #0
 8003460:	2002      	movs	r0, #2
 8003462:	f7fe ff53 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8003466:	4b43      	ldr	r3, [pc, #268]	; (8003574 <ssd1306_TestFPS+0x13c>)
 8003468:	4843      	ldr	r0, [pc, #268]	; (8003578 <ssd1306_TestFPS+0x140>)
 800346a:	2200      	movs	r2, #0
 800346c:	9200      	str	r2, [sp, #0]
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f7fe ff1e 	bl	80022b4 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 8003478:	2124      	movs	r1, #36	; 0x24
 800347a:	2002      	movs	r0, #2
 800347c:	f7fe ff46 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8003480:	4b3c      	ldr	r3, [pc, #240]	; (8003574 <ssd1306_TestFPS+0x13c>)
 8003482:	483e      	ldr	r0, [pc, #248]	; (800357c <ssd1306_TestFPS+0x144>)
 8003484:	2200      	movs	r2, #0
 8003486:	9200      	str	r2, [sp, #0]
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f7fe ff11 	bl	80022b4 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8003492:	2112      	movs	r1, #18
 8003494:	2002      	movs	r0, #2
 8003496:	f7fe ff39 	bl	800230c <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <ssd1306_TestFPS+0x13c>)
 800349c:	2444      	movs	r4, #68	; 0x44
 800349e:	1938      	adds	r0, r7, r4
 80034a0:	2200      	movs	r2, #0
 80034a2:	9200      	str	r2, [sp, #0]
 80034a4:	6819      	ldr	r1, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f7fe ff03 	bl	80022b4 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80034ae:	f7fe fdcd 	bl	800204c <ssd1306_UpdateScreen>
       
        char ch = message[0];
 80034b2:	2553      	movs	r5, #83	; 0x53
 80034b4:	197b      	adds	r3, r7, r5
 80034b6:	193a      	adds	r2, r7, r4
 80034b8:	7812      	ldrb	r2, [r2, #0]
 80034ba:	701a      	strb	r2, [r3, #0]
        memmove(message, message+1, sizeof(message)-2);
 80034bc:	193b      	adds	r3, r7, r4
 80034be:	3301      	adds	r3, #1
 80034c0:	1938      	adds	r0, r7, r4
 80034c2:	220a      	movs	r2, #10
 80034c4:	0019      	movs	r1, r3
 80034c6:	f002 f9e5 	bl	8005894 <memmove>
        message[sizeof(message)-2] = ch;
 80034ca:	193b      	adds	r3, r7, r4
 80034cc:	197a      	adds	r2, r7, r5
 80034ce:	7812      	ldrb	r2, [r2, #0]
 80034d0:	729a      	strb	r2, [r3, #10]

        fps++;
 80034d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d4:	3301      	adds	r3, #1
 80034d6:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 80034d8:	f000 fba0 	bl	8003c1c <HAL_GetTick>
 80034dc:	0003      	movs	r3, r0
 80034de:	657b      	str	r3, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 80034e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80034e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	4a26      	ldr	r2, [pc, #152]	; (8003580 <ssd1306_TestFPS+0x148>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d9d2      	bls.n	8003492 <ssd1306_TestFPS+0x5a>
   
    HAL_Delay(5000);
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <ssd1306_TestFPS+0x14c>)
 80034ee:	0018      	movs	r0, r3
 80034f0:	f000 fb9e 	bl	8003c30 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 80034f4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80034f6:	f7fd ff53 	bl	80013a0 <__aeabi_i2f>
 80034fa:	1c03      	adds	r3, r0, #0
 80034fc:	1c18      	adds	r0, r3, #0
 80034fe:	f7fe fb33 	bl	8001b68 <__aeabi_f2d>
 8003502:	0004      	movs	r4, r0
 8003504:	000d      	movs	r5, r1
 8003506:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	0018      	movs	r0, r3
 800350e:	f7fe fb05 	bl	8001b1c <__aeabi_ui2d>
 8003512:	2200      	movs	r2, #0
 8003514:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <ssd1306_TestFPS+0x150>)
 8003516:	f7fd ffdd 	bl	80014d4 <__aeabi_ddiv>
 800351a:	0002      	movs	r2, r0
 800351c:	000b      	movs	r3, r1
 800351e:	0020      	movs	r0, r4
 8003520:	0029      	movs	r1, r5
 8003522:	f7fd ffd7 	bl	80014d4 <__aeabi_ddiv>
 8003526:	0002      	movs	r2, r0
 8003528:	000b      	movs	r3, r1
 800352a:	0010      	movs	r0, r2
 800352c:	0019      	movs	r1, r3
 800352e:	f7fe fabf 	bl	8001ab0 <__aeabi_d2iz>
 8003532:	0003      	movs	r3, r0
 8003534:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8003536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003538:	4a14      	ldr	r2, [pc, #80]	; (800358c <ssd1306_TestFPS+0x154>)
 800353a:	1d38      	adds	r0, r7, #4
 800353c:	2140      	movs	r1, #64	; 0x40
 800353e:	f002 f975 	bl	800582c <sniprintf>
   
    ssd1306_Fill(White);
 8003542:	2001      	movs	r0, #1
 8003544:	f7fe fd68 	bl	8002018 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8003548:	2102      	movs	r1, #2
 800354a:	2002      	movs	r0, #2
 800354c:	f7fe fede 	bl	800230c <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <ssd1306_TestFPS+0x13c>)
 8003552:	1d38      	adds	r0, r7, #4
 8003554:	2200      	movs	r2, #0
 8003556:	9200      	str	r2, [sp, #0]
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f7fe fea9 	bl	80022b4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8003562:	f7fe fd73 	bl	800204c <ssd1306_UpdateScreen>
}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	b018      	add	sp, #96	; 0x60
 800356c:	bdb0      	pop	{r4, r5, r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	08006e4c 	.word	0x08006e4c
 8003574:	0800bab0 	.word	0x0800bab0
 8003578:	08006e2c 	.word	0x08006e2c
 800357c:	08006e38 	.word	0x08006e38
 8003580:	00001387 	.word	0x00001387
 8003584:	00001388 	.word	0x00001388
 8003588:	408f4000 	.word	0x408f4000
 800358c:	08006e44 	.word	0x08006e44

08003590 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8003596:	2301      	movs	r3, #1
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	233f      	movs	r3, #63	; 0x3f
 800359c:	227f      	movs	r2, #127	; 0x7f
 800359e:	2101      	movs	r1, #1
 80035a0:	2001      	movs	r0, #1
 80035a2:	f7fe fecd 	bl	8002340 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 80035a6:	2301      	movs	r3, #1
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	233f      	movs	r3, #63	; 0x3f
 80035ac:	2201      	movs	r2, #1
 80035ae:	2101      	movs	r1, #1
 80035b0:	207f      	movs	r0, #127	; 0x7f
 80035b2:	f7fe fec5 	bl	8002340 <ssd1306_Line>
  ssd1306_UpdateScreen();
 80035b6:	f7fe fd49 	bl	800204c <ssd1306_UpdateScreen>
  return;
 80035ba:	46c0      	nop			; (mov r8, r8)
}
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	e028      	b.n	800361e <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	1c1a      	adds	r2, r3, #0
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	18d3      	adds	r3, r2, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	b2d8      	uxtb	r0, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	1c1a      	adds	r2, r3, #0
 80035e2:	0092      	lsls	r2, r2, #2
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	b2d9      	uxtb	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	1c1a      	adds	r2, r3, #0
 80035f2:	0092      	lsls	r2, r2, #2
 80035f4:	18d3      	adds	r3, r2, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	227f      	movs	r2, #127	; 0x7f
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	1c1c      	adds	r4, r3, #0
 8003604:	00a4      	lsls	r4, r4, #2
 8003606:	18e3      	adds	r3, r4, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	243f      	movs	r4, #63	; 0x3f
 800360c:	1ae3      	subs	r3, r4, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2401      	movs	r4, #1
 8003612:	9400      	str	r4, [sp, #0]
 8003614:	f7ff fb45 	bl	8002ca2 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3301      	adds	r3, #1
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d9d3      	bls.n	80035cc <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8003624:	f7fe fd12 	bl	800204c <ssd1306_UpdateScreen>
  return;
 8003628:	46c0      	nop			; (mov r8, r8)
}
 800362a:	46bd      	mov	sp, r7
 800362c:	b003      	add	sp, #12
 800362e:	bd90      	pop	{r4, r7, pc}

08003630 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 8003636:	2301      	movs	r3, #1
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	2323      	movs	r3, #35	; 0x23
 800363c:	2241      	movs	r2, #65	; 0x41
 800363e:	2101      	movs	r1, #1
 8003640:	201f      	movs	r0, #31
 8003642:	f7ff fb7e 	bl	8002d42 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 8003646:	2301      	movs	r3, #1
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	233c      	movs	r3, #60	; 0x3c
 800364c:	2246      	movs	r2, #70	; 0x46
 800364e:	212d      	movs	r1, #45	; 0x2d
 8003650:	200a      	movs	r0, #10
 8003652:	f7ff fb76 	bl	8002d42 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 8003656:	2301      	movs	r3, #1
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	232d      	movs	r3, #45	; 0x2d
 800365c:	2264      	movs	r2, #100	; 0x64
 800365e:	210a      	movs	r1, #10
 8003660:	204b      	movs	r0, #75	; 0x4b
 8003662:	f7ff fb6e 	bl	8002d42 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 8003666:	2300      	movs	r3, #0
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	2337      	movs	r3, #55	; 0x37
 800366c:	2250      	movs	r2, #80	; 0x50
 800366e:	211e      	movs	r1, #30
 8003670:	2037      	movs	r0, #55	; 0x37
 8003672:	f7ff fb66 	bl	8002d42 <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 8003676:	f7fe fce9 	bl	800204c <ssd1306_UpdateScreen>
}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 8003686:	2100      	movs	r1, #0
 8003688:	2002      	movs	r0, #2
 800368a:	f7fe fe3f 	bl	800230c <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 800368e:	4b2d      	ldr	r3, [pc, #180]	; (8003744 <ssd1306_TestRectangleInvert+0xc4>)
 8003690:	482d      	ldr	r0, [pc, #180]	; (8003748 <ssd1306_TestRectangleInvert+0xc8>)
 8003692:	2201      	movs	r2, #1
 8003694:	9200      	str	r2, [sp, #0]
 8003696:	6819      	ldr	r1, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f7fe fe0a 	bl	80022b4 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 80036a0:	2114      	movs	r1, #20
 80036a2:	2002      	movs	r0, #2
 80036a4:	f7fe fe32 	bl	800230c <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 80036a8:	4b26      	ldr	r3, [pc, #152]	; (8003744 <ssd1306_TestRectangleInvert+0xc4>)
 80036aa:	4828      	ldr	r0, [pc, #160]	; (800374c <ssd1306_TestRectangleInvert+0xcc>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	9200      	str	r2, [sp, #0]
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f7fe fdfd 	bl	80022b4 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 80036ba:	2128      	movs	r1, #40	; 0x28
 80036bc:	2002      	movs	r0, #2
 80036be:	f7fe fe25 	bl	800230c <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <ssd1306_TestRectangleInvert+0xc4>)
 80036c4:	4822      	ldr	r0, [pc, #136]	; (8003750 <ssd1306_TestRectangleInvert+0xd0>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	9200      	str	r2, [sp, #0]
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f7fe fdf0 	bl	80022b4 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 80036d4:	2100      	movs	r1, #0
 80036d6:	2042      	movs	r0, #66	; 0x42
 80036d8:	f7fe fe18 	bl	800230c <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 80036dc:	4b19      	ldr	r3, [pc, #100]	; (8003744 <ssd1306_TestRectangleInvert+0xc4>)
 80036de:	481c      	ldr	r0, [pc, #112]	; (8003750 <ssd1306_TestRectangleInvert+0xd0>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	9200      	str	r2, [sp, #0]
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f7fe fde3 	bl	80022b4 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 80036ee:	2114      	movs	r1, #20
 80036f0:	2042      	movs	r0, #66	; 0x42
 80036f2:	f7fe fe0b 	bl	800230c <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 80036f6:	4b13      	ldr	r3, [pc, #76]	; (8003744 <ssd1306_TestRectangleInvert+0xc4>)
 80036f8:	4814      	ldr	r0, [pc, #80]	; (800374c <ssd1306_TestRectangleInvert+0xcc>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	9200      	str	r2, [sp, #0]
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f7fe fdd6 	bl	80022b4 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8003708:	2128      	movs	r1, #40	; 0x28
 800370a:	2042      	movs	r0, #66	; 0x42
 800370c:	f7fe fdfe 	bl	800230c <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <ssd1306_TestRectangleInvert+0xc4>)
 8003712:	480d      	ldr	r0, [pc, #52]	; (8003748 <ssd1306_TestRectangleInvert+0xc8>)
 8003714:	2201      	movs	r2, #1
 8003716:	9200      	str	r2, [sp, #0]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f7fe fdc9 	bl	80022b4 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 8003722:	233f      	movs	r3, #63	; 0x3f
 8003724:	223f      	movs	r2, #63	; 0x3f
 8003726:	2100      	movs	r1, #0
 8003728:	2000      	movs	r0, #0
 800372a:	f7ff fb91 	bl	8002e50 <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 800372e:	233c      	movs	r3, #60	; 0x3c
 8003730:	227d      	movs	r2, #125	; 0x7d
 8003732:	213a      	movs	r1, #58	; 0x3a
 8003734:	2002      	movs	r0, #2
 8003736:	f7ff fb8b 	bl	8002e50 <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 800373a:	f7fe fc87 	bl	800204c <ssd1306_UpdateScreen>
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	0800bab0 	.word	0x0800bab0
 8003748:	08006e58 	.word	0x08006e58
 800374c:	08006e60 	.word	0x08006e60
 8003750:	08006e64 	.word	0x08006e64

08003754 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 800375a:	2300      	movs	r3, #0
 800375c:	607b      	str	r3, [r7, #4]
 800375e:	e00e      	b.n	800377e <ssd1306_TestCircle+0x2a>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2214      	movs	r2, #20
 8003766:	4353      	muls	r3, r2
 8003768:	b2db      	uxtb	r3, r3
 800376a:	331e      	adds	r3, #30
 800376c:	b2d8      	uxtb	r0, r3
 800376e:	2301      	movs	r3, #1
 8003770:	220a      	movs	r2, #10
 8003772:	210f      	movs	r1, #15
 8003774:	f7ff f968 	bl	8002a48 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3301      	adds	r3, #1
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d9ed      	bls.n	8003760 <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8003784:	2300      	movs	r3, #0
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	e011      	b.n	80037ae <ssd1306_TestCircle+0x5a>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	1c1a      	adds	r2, r3, #0
 8003790:	1892      	adds	r2, r2, r2
 8003792:	18d2      	adds	r2, r2, r3
 8003794:	00d2      	lsls	r2, r2, #3
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	b2db      	uxtb	r3, r3
 800379a:	330f      	adds	r3, #15
 800379c:	b2d8      	uxtb	r0, r3
 800379e:	2301      	movs	r3, #1
 80037a0:	220a      	movs	r2, #10
 80037a2:	2128      	movs	r1, #40	; 0x28
 80037a4:	f7ff f9eb 	bl	8002b7e <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3301      	adds	r3, #1
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d9ea      	bls.n	800378a <ssd1306_TestCircle+0x36>
  }

  ssd1306_UpdateScreen();
 80037b4:	f7fe fc4a 	bl	800204c <ssd1306_UpdateScreen>
  return;
 80037b8:	46c0      	nop			; (mov r8, r8)
}
 80037ba:	46bd      	mov	sp, r7
 80037bc:	b002      	add	sp, #8
 80037be:	bd80      	pop	{r7, pc}

080037c0 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 80037c6:	2301      	movs	r3, #1
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	2387      	movs	r3, #135	; 0x87
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	2314      	movs	r3, #20
 80037d2:	221e      	movs	r2, #30
 80037d4:	211e      	movs	r1, #30
 80037d6:	201e      	movs	r0, #30
 80037d8:	f7fe feca 	bl	8002570 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 80037dc:	2301      	movs	r3, #1
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	2387      	movs	r3, #135	; 0x87
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	231e      	movs	r3, #30
 80037e8:	220a      	movs	r2, #10
 80037ea:	2137      	movs	r1, #55	; 0x37
 80037ec:	2050      	movs	r0, #80	; 0x50
 80037ee:	f7fe ffbf 	bl	8002770 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 80037f2:	f7fe fc2b 	bl	800204c <ssd1306_UpdateScreen>
  return;
 80037f6:	46c0      	nop			; (mov r8, r8)
}
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8003802:	003b      	movs	r3, r7
 8003804:	4a08      	ldr	r2, [pc, #32]	; (8003828 <ssd1306_TestPolyline+0x2c>)
 8003806:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003808:	c313      	stmia	r3!, {r0, r1, r4}
 800380a:	8812      	ldrh	r2, [r2, #0]
 800380c:	801a      	strh	r2, [r3, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 800380e:	003b      	movs	r3, r7
 8003810:	2201      	movs	r2, #1
 8003812:	2107      	movs	r1, #7
 8003814:	0018      	movs	r0, r3
 8003816:	f7fe fe1d 	bl	8002454 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 800381a:	f7fe fc17 	bl	800204c <ssd1306_UpdateScreen>
  return;
 800381e:	46c0      	nop			; (mov r8, r8)
}
 8003820:	46bd      	mov	sp, r7
 8003822:	b005      	add	sp, #20
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	08006e6c 	.word	0x08006e6c

0800382c <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 8003832:	2001      	movs	r0, #1
 8003834:	f7fe fbf0 	bl	8002018 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8003838:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <ssd1306_TestDrawBitmap+0x78>)
 800383a:	2300      	movs	r3, #0
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	2100      	movs	r1, #0
 8003846:	2000      	movs	r0, #0
 8003848:	f7ff fbda 	bl	8003000 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800384c:	f7fe fbfe 	bl	800204c <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8003850:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <ssd1306_TestDrawBitmap+0x7c>)
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f9ec 	bl	8003c30 <HAL_Delay>
    ssd1306_Fill(Black);
 8003858:	2000      	movs	r0, #0
 800385a:	f7fe fbdd 	bl	8002018 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 800385e:	4a13      	ldr	r2, [pc, #76]	; (80038ac <ssd1306_TestDrawBitmap+0x80>)
 8003860:	2301      	movs	r3, #1
 8003862:	9301      	str	r3, [sp, #4]
 8003864:	2340      	movs	r3, #64	; 0x40
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	2340      	movs	r3, #64	; 0x40
 800386a:	2100      	movs	r1, #0
 800386c:	2020      	movs	r0, #32
 800386e:	f7ff fbc7 	bl	8003000 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8003872:	f7fe fbeb 	bl	800204c <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <ssd1306_TestDrawBitmap+0x7c>)
 8003878:	0018      	movs	r0, r3
 800387a:	f000 f9d9 	bl	8003c30 <HAL_Delay>
    ssd1306_Fill(White);
 800387e:	2001      	movs	r0, #1
 8003880:	f7fe fbca 	bl	8002018 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 8003884:	4a09      	ldr	r2, [pc, #36]	; (80038ac <ssd1306_TestDrawBitmap+0x80>)
 8003886:	2300      	movs	r3, #0
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	2340      	movs	r3, #64	; 0x40
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	2340      	movs	r3, #64	; 0x40
 8003890:	2100      	movs	r1, #0
 8003892:	2020      	movs	r0, #32
 8003894:	f7ff fbb4 	bl	8003000 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8003898:	f7fe fbd8 	bl	800204c <ssd1306_UpdateScreen>
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	0800bae0 	.word	0x0800bae0
 80038a8:	00000bb8 	.word	0x00000bb8
 80038ac:	0800bee0 	.word	0x0800bee0

080038b0 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80038b4:	f7fe fb44 	bl	8001f40 <ssd1306_Init>

    ssd1306_TestFPS();
 80038b8:	f7ff fdbe 	bl	8003438 <ssd1306_TestFPS>
    HAL_Delay(3000);
 80038bc:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <ssd1306_TestAll+0xc0>)
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 f9b6 	bl	8003c30 <HAL_Delay>
    ssd1306_TestBorder();
 80038c4:	f7ff fc68 	bl	8003198 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 80038c8:	f7ff fcc8 	bl	800325c <ssd1306_TestFonts1>
    HAL_Delay(3000);
 80038cc:	4b28      	ldr	r3, [pc, #160]	; (8003970 <ssd1306_TestAll+0xc0>)
 80038ce:	0018      	movs	r0, r3
 80038d0:	f000 f9ae 	bl	8003c30 <HAL_Delay>
    ssd1306_TestFonts2();
 80038d4:	f7ff fd2c 	bl	8003330 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 80038d8:	4b25      	ldr	r3, [pc, #148]	; (8003970 <ssd1306_TestAll+0xc0>)
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 f9a8 	bl	8003c30 <HAL_Delay>
    ssd1306_TestFonts3();
 80038e0:	f7ff fd70 	bl	80033c4 <ssd1306_TestFonts3>
    HAL_Delay(3000);
 80038e4:	4b22      	ldr	r3, [pc, #136]	; (8003970 <ssd1306_TestAll+0xc0>)
 80038e6:	0018      	movs	r0, r3
 80038e8:	f000 f9a2 	bl	8003c30 <HAL_Delay>
    ssd1306_Fill(Black);
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7fe fb93 	bl	8002018 <ssd1306_Fill>
    ssd1306_TestRectangle();
 80038f2:	f7ff fe65 	bl	80035c0 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 80038f6:	f7ff fe4b 	bl	8003590 <ssd1306_TestLine>
    HAL_Delay(3000);
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <ssd1306_TestAll+0xc0>)
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 f997 	bl	8003c30 <HAL_Delay>
    ssd1306_Fill(Black);
 8003902:	2000      	movs	r0, #0
 8003904:	f7fe fb88 	bl	8002018 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 8003908:	f7ff fe92 	bl	8003630 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 800390c:	4b18      	ldr	r3, [pc, #96]	; (8003970 <ssd1306_TestAll+0xc0>)
 800390e:	0018      	movs	r0, r3
 8003910:	f000 f98e 	bl	8003c30 <HAL_Delay>
    ssd1306_Fill(Black);
 8003914:	2000      	movs	r0, #0
 8003916:	f7fe fb7f 	bl	8002018 <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 800391a:	f7ff feb1 	bl	8003680 <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 800391e:	4b14      	ldr	r3, [pc, #80]	; (8003970 <ssd1306_TestAll+0xc0>)
 8003920:	0018      	movs	r0, r3
 8003922:	f000 f985 	bl	8003c30 <HAL_Delay>
    ssd1306_Fill(Black);
 8003926:	2000      	movs	r0, #0
 8003928:	f7fe fb76 	bl	8002018 <ssd1306_Fill>
    ssd1306_TestPolyline();
 800392c:	f7ff ff66 	bl	80037fc <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <ssd1306_TestAll+0xc0>)
 8003932:	0018      	movs	r0, r3
 8003934:	f000 f97c 	bl	8003c30 <HAL_Delay>
    ssd1306_Fill(Black);
 8003938:	2000      	movs	r0, #0
 800393a:	f7fe fb6d 	bl	8002018 <ssd1306_Fill>
    ssd1306_TestArc();
 800393e:	f7ff ff3f 	bl	80037c0 <ssd1306_TestArc>
    HAL_Delay(3000);
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <ssd1306_TestAll+0xc0>)
 8003944:	0018      	movs	r0, r3
 8003946:	f000 f973 	bl	8003c30 <HAL_Delay>
    ssd1306_Fill(Black);
 800394a:	2000      	movs	r0, #0
 800394c:	f7fe fb64 	bl	8002018 <ssd1306_Fill>
    ssd1306_TestCircle();
 8003950:	f7ff ff00 	bl	8003754 <ssd1306_TestCircle>
    HAL_Delay(3000);
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <ssd1306_TestAll+0xc0>)
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f96a 	bl	8003c30 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 800395c:	f7ff ff66 	bl	800382c <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <ssd1306_TestAll+0xc0>)
 8003962:	0018      	movs	r0, r3
 8003964:	f000 f964 	bl	8003c30 <HAL_Delay>
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	00000bb8 	.word	0x00000bb8

08003974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003978:	4b07      	ldr	r3, [pc, #28]	; (8003998 <HAL_MspInit+0x24>)
 800397a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_MspInit+0x24>)
 800397e:	2101      	movs	r1, #1
 8003980:	430a      	orrs	r2, r1
 8003982:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <HAL_MspInit+0x24>)
 8003986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003988:	4b03      	ldr	r3, [pc, #12]	; (8003998 <HAL_MspInit+0x24>)
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	0549      	lsls	r1, r1, #21
 800398e:	430a      	orrs	r2, r1
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000

0800399c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b089      	sub	sp, #36	; 0x24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a4:	240c      	movs	r4, #12
 80039a6:	193b      	adds	r3, r7, r4
 80039a8:	0018      	movs	r0, r3
 80039aa:	2314      	movs	r3, #20
 80039ac:	001a      	movs	r2, r3
 80039ae:	2100      	movs	r1, #0
 80039b0:	f001 ff83 	bl	80058ba <memset>
  if(hi2c->Instance==I2C1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <HAL_I2C_MspInit+0x80>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d12a      	bne.n	8003a14 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <HAL_I2C_MspInit+0x84>)
 80039c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <HAL_I2C_MspInit+0x84>)
 80039c4:	2101      	movs	r1, #1
 80039c6:	430a      	orrs	r2, r1
 80039c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <HAL_I2C_MspInit+0x84>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	2201      	movs	r2, #1
 80039d0:	4013      	ands	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	22c0      	movs	r2, #192	; 0xc0
 80039da:	00d2      	lsls	r2, r2, #3
 80039dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039de:	0021      	movs	r1, r4
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	2212      	movs	r2, #18
 80039e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	2203      	movs	r2, #3
 80039f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80039f2:	187b      	adds	r3, r7, r1
 80039f4:	2206      	movs	r2, #6
 80039f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f8:	187a      	adds	r2, r7, r1
 80039fa:	23a0      	movs	r3, #160	; 0xa0
 80039fc:	05db      	lsls	r3, r3, #23
 80039fe:	0011      	movs	r1, r2
 8003a00:	0018      	movs	r0, r3
 8003a02:	f000 f9ed 	bl	8003de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_I2C_MspInit+0x84>)
 8003a08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <HAL_I2C_MspInit+0x84>)
 8003a0c:	2180      	movs	r1, #128	; 0x80
 8003a0e:	0389      	lsls	r1, r1, #14
 8003a10:	430a      	orrs	r2, r1
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b009      	add	sp, #36	; 0x24
 8003a1a:	bd90      	pop	{r4, r7, pc}
 8003a1c:	40005400 	.word	0x40005400
 8003a20:	40021000 	.word	0x40021000

08003a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a28:	e7fe      	b.n	8003a28 <NMI_Handler+0x4>

08003a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a2e:	e7fe      	b.n	8003a2e <HardFault_Handler+0x4>

08003a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a48:	f000 f8d6 	bl	8003bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <_sbrk+0x5c>)
 8003a5e:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <_sbrk+0x60>)
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <_sbrk+0x64>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <_sbrk+0x64>)
 8003a72:	4a12      	ldr	r2, [pc, #72]	; (8003abc <_sbrk+0x68>)
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <_sbrk+0x64>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	18d3      	adds	r3, r2, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d207      	bcs.n	8003a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a84:	f001 ff22 	bl	80058cc <__errno>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	220c      	movs	r2, #12
 8003a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	425b      	negs	r3, r3
 8003a92:	e009      	b.n	8003aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <_sbrk+0x64>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <_sbrk+0x64>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	18d2      	adds	r2, r2, r3
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <_sbrk+0x64>)
 8003aa4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	b006      	add	sp, #24
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20005000 	.word	0x20005000
 8003ab4:	00000400 	.word	0x00000400
 8003ab8:	200004d4 	.word	0x200004d4
 8003abc:	20000628 	.word	0x20000628

08003ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003acc:	4813      	ldr	r0, [pc, #76]	; (8003b1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003ace:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ad0:	f7ff fff6 	bl	8003ac0 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8003ad4:	4812      	ldr	r0, [pc, #72]	; (8003b20 <LoopForever+0x6>)
    LDR R1, [R0]
 8003ad6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003ad8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <LoopForever+0xa>)
    CMP R1, R2
 8003adc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003ade:	d105      	bne.n	8003aec <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8003ae0:	4811      	ldr	r0, [pc, #68]	; (8003b28 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8003ae2:	4912      	ldr	r1, [pc, #72]	; (8003b2c <LoopForever+0x12>)
    STR R1, [R0]
 8003ae4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003ae6:	4812      	ldr	r0, [pc, #72]	; (8003b30 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003ae8:	4912      	ldr	r1, [pc, #72]	; (8003b34 <LoopForever+0x1a>)
    STR R1, [R0]
 8003aea:	6001      	str	r1, [r0, #0]

08003aec <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003aec:	4812      	ldr	r0, [pc, #72]	; (8003b38 <LoopForever+0x1e>)
  ldr r1, =_edata
 8003aee:	4913      	ldr	r1, [pc, #76]	; (8003b3c <LoopForever+0x22>)
  ldr r2, =_sidata
 8003af0:	4a13      	ldr	r2, [pc, #76]	; (8003b40 <LoopForever+0x26>)
  movs r3, #0
 8003af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003af4:	e002      	b.n	8003afc <LoopCopyDataInit>

08003af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003afa:	3304      	adds	r3, #4

08003afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b00:	d3f9      	bcc.n	8003af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b02:	4a10      	ldr	r2, [pc, #64]	; (8003b44 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003b04:	4c10      	ldr	r4, [pc, #64]	; (8003b48 <LoopForever+0x2e>)
  movs r3, #0
 8003b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b08:	e001      	b.n	8003b0e <LoopFillZerobss>

08003b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b0c:	3204      	adds	r2, #4

08003b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b10:	d3fb      	bcc.n	8003b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b12:	f001 fee1 	bl	80058d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b16:	f7fe f899 	bl	8001c4c <main>

08003b1a <LoopForever>:

LoopForever:
    b LoopForever
 8003b1a:	e7fe      	b.n	8003b1a <LoopForever>
   ldr   r0, =_estack
 8003b1c:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 8003b20:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003b24:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8003b28:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8003b2c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003b30:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003b34:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003b40:	0800c50c 	.word	0x0800c50c
  ldr r2, =_sbss
 8003b44:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8003b48:	20000624 	.word	0x20000624

08003b4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b4c:	e7fe      	b.n	8003b4c <ADC1_IRQHandler>
	...

08003b50 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b56:	1dfb      	adds	r3, r7, #7
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_Init+0x3c>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <HAL_Init+0x3c>)
 8003b62:	2140      	movs	r1, #64	; 0x40
 8003b64:	430a      	orrs	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f000 f811 	bl	8003b90 <HAL_InitTick>
 8003b6e:	1e03      	subs	r3, r0, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003b72:	1dfb      	adds	r3, r7, #7
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e001      	b.n	8003b7e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b7a:	f7ff fefb 	bl	8003974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b7e:	1dfb      	adds	r3, r7, #7
 8003b80:	781b      	ldrb	r3, [r3, #0]
}
 8003b82:	0018      	movs	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	40022000 	.word	0x40022000

08003b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b90:	b590      	push	{r4, r7, lr}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <HAL_InitTick+0x5c>)
 8003b9a:	681c      	ldr	r4, [r3, #0]
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_InitTick+0x60>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	23fa      	movs	r3, #250	; 0xfa
 8003ba4:	0098      	lsls	r0, r3, #2
 8003ba6:	f7fc fab9 	bl	800011c <__udivsi3>
 8003baa:	0003      	movs	r3, r0
 8003bac:	0019      	movs	r1, r3
 8003bae:	0020      	movs	r0, r4
 8003bb0:	f7fc fab4 	bl	800011c <__udivsi3>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 f905 	bl	8003dc6 <HAL_SYSTICK_Config>
 8003bbc:	1e03      	subs	r3, r0, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e00f      	b.n	8003be4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d80b      	bhi.n	8003be2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	2301      	movs	r3, #1
 8003bce:	425b      	negs	r3, r3
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 f8e2 	bl	8003d9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_InitTick+0x64>)
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b003      	add	sp, #12
 8003bea:	bd90      	pop	{r4, r7, pc}
 8003bec:	20000000 	.word	0x20000000
 8003bf0:	20000008 	.word	0x20000008
 8003bf4:	20000004 	.word	0x20000004

08003bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_IncTick+0x1c>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	001a      	movs	r2, r3
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_IncTick+0x20>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	18d2      	adds	r2, r2, r3
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_IncTick+0x20>)
 8003c0a:	601a      	str	r2, [r3, #0]
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	20000008 	.word	0x20000008
 8003c18:	200004d8 	.word	0x200004d8

08003c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c20:	4b02      	ldr	r3, [pc, #8]	; (8003c2c <HAL_GetTick+0x10>)
 8003c22:	681b      	ldr	r3, [r3, #0]
}
 8003c24:	0018      	movs	r0, r3
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	200004d8 	.word	0x200004d8

08003c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c38:	f7ff fff0 	bl	8003c1c <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3301      	adds	r3, #1
 8003c48:	d005      	beq.n	8003c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <HAL_Delay+0x44>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	001a      	movs	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	f7ff ffe0 	bl	8003c1c <HAL_GetTick>
 8003c5c:	0002      	movs	r2, r0
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d8f7      	bhi.n	8003c58 <HAL_Delay+0x28>
  {
  }
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	20000008 	.word	0x20000008

08003c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	0002      	movs	r2, r0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	1dfb      	adds	r3, r7, #7
 8003c84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c86:	1dfb      	adds	r3, r7, #7
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c8c:	d828      	bhi.n	8003ce0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c8e:	4a2f      	ldr	r2, [pc, #188]	; (8003d4c <__NVIC_SetPriority+0xd4>)
 8003c90:	1dfb      	adds	r3, r7, #7
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	33c0      	adds	r3, #192	; 0xc0
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	589b      	ldr	r3, [r3, r2]
 8003c9e:	1dfa      	adds	r2, r7, #7
 8003ca0:	7812      	ldrb	r2, [r2, #0]
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	00d2      	lsls	r2, r2, #3
 8003caa:	21ff      	movs	r1, #255	; 0xff
 8003cac:	4091      	lsls	r1, r2
 8003cae:	000a      	movs	r2, r1
 8003cb0:	43d2      	mvns	r2, r2
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	019b      	lsls	r3, r3, #6
 8003cba:	22ff      	movs	r2, #255	; 0xff
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	1dfb      	adds	r3, r7, #7
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	4003      	ands	r3, r0
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ccc:	481f      	ldr	r0, [pc, #124]	; (8003d4c <__NVIC_SetPriority+0xd4>)
 8003cce:	1dfb      	adds	r3, r7, #7
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b25b      	sxtb	r3, r3
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	33c0      	adds	r3, #192	; 0xc0
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003cde:	e031      	b.n	8003d44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ce0:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <__NVIC_SetPriority+0xd8>)
 8003ce2:	1dfb      	adds	r3, r7, #7
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	230f      	movs	r3, #15
 8003cea:	400b      	ands	r3, r1
 8003cec:	3b08      	subs	r3, #8
 8003cee:	089b      	lsrs	r3, r3, #2
 8003cf0:	3306      	adds	r3, #6
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	18d3      	adds	r3, r2, r3
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1dfa      	adds	r2, r7, #7
 8003cfc:	7812      	ldrb	r2, [r2, #0]
 8003cfe:	0011      	movs	r1, r2
 8003d00:	2203      	movs	r2, #3
 8003d02:	400a      	ands	r2, r1
 8003d04:	00d2      	lsls	r2, r2, #3
 8003d06:	21ff      	movs	r1, #255	; 0xff
 8003d08:	4091      	lsls	r1, r2
 8003d0a:	000a      	movs	r2, r1
 8003d0c:	43d2      	mvns	r2, r2
 8003d0e:	401a      	ands	r2, r3
 8003d10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	019b      	lsls	r3, r3, #6
 8003d16:	22ff      	movs	r2, #255	; 0xff
 8003d18:	401a      	ands	r2, r3
 8003d1a:	1dfb      	adds	r3, r7, #7
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	2303      	movs	r3, #3
 8003d22:	4003      	ands	r3, r0
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d28:	4809      	ldr	r0, [pc, #36]	; (8003d50 <__NVIC_SetPriority+0xd8>)
 8003d2a:	1dfb      	adds	r3, r7, #7
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	001c      	movs	r4, r3
 8003d30:	230f      	movs	r3, #15
 8003d32:	4023      	ands	r3, r4
 8003d34:	3b08      	subs	r3, #8
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	3306      	adds	r3, #6
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	18c3      	adds	r3, r0, r3
 8003d40:	3304      	adds	r3, #4
 8003d42:	601a      	str	r2, [r3, #0]
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b003      	add	sp, #12
 8003d4a:	bd90      	pop	{r4, r7, pc}
 8003d4c:	e000e100 	.word	0xe000e100
 8003d50:	e000ed00 	.word	0xe000ed00

08003d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1e5a      	subs	r2, r3, #1
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	045b      	lsls	r3, r3, #17
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d301      	bcc.n	8003d6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e010      	b.n	8003d8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <SysTick_Config+0x44>)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	3a01      	subs	r2, #1
 8003d72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d74:	2301      	movs	r3, #1
 8003d76:	425b      	negs	r3, r3
 8003d78:	2103      	movs	r1, #3
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff ff7c 	bl	8003c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <SysTick_Config+0x44>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d86:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <SysTick_Config+0x44>)
 8003d88:	2207      	movs	r2, #7
 8003d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	0018      	movs	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b002      	add	sp, #8
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	e000e010 	.word	0xe000e010

08003d9c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	210f      	movs	r1, #15
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	1c02      	adds	r2, r0, #0
 8003dac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	0011      	movs	r1, r2
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7ff ff5d 	bl	8003c78 <__NVIC_SetPriority>
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b004      	add	sp, #16
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7ff ffbf 	bl	8003d54 <SysTick_Config>
 8003dd6:	0003      	movs	r3, r0
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b002      	add	sp, #8
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003df6:	e155      	b.n	80040a4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4091      	lsls	r1, r2
 8003e02:	000a      	movs	r2, r1
 8003e04:	4013      	ands	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d100      	bne.n	8003e10 <HAL_GPIO_Init+0x30>
 8003e0e:	e146      	b.n	800409e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2203      	movs	r2, #3
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d005      	beq.n	8003e28 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2203      	movs	r2, #3
 8003e22:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d130      	bne.n	8003e8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	2203      	movs	r2, #3
 8003e34:	409a      	lsls	r2, r3
 8003e36:	0013      	movs	r3, r2
 8003e38:	43da      	mvns	r2, r3
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	0013      	movs	r3, r2
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e5e:	2201      	movs	r2, #1
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	409a      	lsls	r2, r3
 8003e64:	0013      	movs	r3, r2
 8003e66:	43da      	mvns	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	2201      	movs	r2, #1
 8003e76:	401a      	ands	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	0013      	movs	r3, r2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2203      	movs	r2, #3
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d017      	beq.n	8003ec6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	0013      	movs	r3, r2
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	0013      	movs	r3, r2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2203      	movs	r2, #3
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d123      	bne.n	8003f1a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	08da      	lsrs	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	0092      	lsls	r2, r2, #2
 8003edc:	58d3      	ldr	r3, [r2, r3]
 8003ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	220f      	movs	r2, #15
 8003eea:	409a      	lsls	r2, r3
 8003eec:	0013      	movs	r3, r2
 8003eee:	43da      	mvns	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	691a      	ldr	r2, [r3, #16]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2107      	movs	r1, #7
 8003efe:	400b      	ands	r3, r1
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	409a      	lsls	r2, r3
 8003f04:	0013      	movs	r3, r2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	08da      	lsrs	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3208      	adds	r2, #8
 8003f14:	0092      	lsls	r2, r2, #2
 8003f16:	6939      	ldr	r1, [r7, #16]
 8003f18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	2203      	movs	r2, #3
 8003f26:	409a      	lsls	r2, r3
 8003f28:	0013      	movs	r3, r2
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2203      	movs	r2, #3
 8003f38:	401a      	ands	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	0013      	movs	r3, r2
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	23c0      	movs	r3, #192	; 0xc0
 8003f54:	029b      	lsls	r3, r3, #10
 8003f56:	4013      	ands	r3, r2
 8003f58:	d100      	bne.n	8003f5c <HAL_GPIO_Init+0x17c>
 8003f5a:	e0a0      	b.n	800409e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f5c:	4b57      	ldr	r3, [pc, #348]	; (80040bc <HAL_GPIO_Init+0x2dc>)
 8003f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f60:	4b56      	ldr	r3, [pc, #344]	; (80040bc <HAL_GPIO_Init+0x2dc>)
 8003f62:	2101      	movs	r1, #1
 8003f64:	430a      	orrs	r2, r1
 8003f66:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f68:	4a55      	ldr	r2, [pc, #340]	; (80040c0 <HAL_GPIO_Init+0x2e0>)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	3302      	adds	r3, #2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	589b      	ldr	r3, [r3, r2]
 8003f74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	220f      	movs	r2, #15
 8003f80:	409a      	lsls	r2, r3
 8003f82:	0013      	movs	r3, r2
 8003f84:	43da      	mvns	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	23a0      	movs	r3, #160	; 0xa0
 8003f90:	05db      	lsls	r3, r3, #23
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d01f      	beq.n	8003fd6 <HAL_GPIO_Init+0x1f6>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4a      	ldr	r2, [pc, #296]	; (80040c4 <HAL_GPIO_Init+0x2e4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d019      	beq.n	8003fd2 <HAL_GPIO_Init+0x1f2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a49      	ldr	r2, [pc, #292]	; (80040c8 <HAL_GPIO_Init+0x2e8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d013      	beq.n	8003fce <HAL_GPIO_Init+0x1ee>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a48      	ldr	r2, [pc, #288]	; (80040cc <HAL_GPIO_Init+0x2ec>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00d      	beq.n	8003fca <HAL_GPIO_Init+0x1ea>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a47      	ldr	r2, [pc, #284]	; (80040d0 <HAL_GPIO_Init+0x2f0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d007      	beq.n	8003fc6 <HAL_GPIO_Init+0x1e6>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a46      	ldr	r2, [pc, #280]	; (80040d4 <HAL_GPIO_Init+0x2f4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_GPIO_Init+0x1e2>
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	e00a      	b.n	8003fd8 <HAL_GPIO_Init+0x1f8>
 8003fc2:	2306      	movs	r3, #6
 8003fc4:	e008      	b.n	8003fd8 <HAL_GPIO_Init+0x1f8>
 8003fc6:	2304      	movs	r3, #4
 8003fc8:	e006      	b.n	8003fd8 <HAL_GPIO_Init+0x1f8>
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e004      	b.n	8003fd8 <HAL_GPIO_Init+0x1f8>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e002      	b.n	8003fd8 <HAL_GPIO_Init+0x1f8>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e000      	b.n	8003fd8 <HAL_GPIO_Init+0x1f8>
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	2103      	movs	r1, #3
 8003fdc:	400a      	ands	r2, r1
 8003fde:	0092      	lsls	r2, r2, #2
 8003fe0:	4093      	lsls	r3, r2
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fe8:	4935      	ldr	r1, [pc, #212]	; (80040c0 <HAL_GPIO_Init+0x2e0>)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	089b      	lsrs	r3, r3, #2
 8003fee:	3302      	adds	r3, #2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ff6:	4b38      	ldr	r3, [pc, #224]	; (80040d8 <HAL_GPIO_Init+0x2f8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	43da      	mvns	r2, r3
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	035b      	lsls	r3, r3, #13
 800400e:	4013      	ands	r3, r2
 8004010:	d003      	beq.n	800401a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <HAL_GPIO_Init+0x2f8>)
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004020:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <HAL_GPIO_Init+0x2f8>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	43da      	mvns	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	2380      	movs	r3, #128	; 0x80
 8004036:	039b      	lsls	r3, r3, #14
 8004038:	4013      	ands	r3, r2
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <HAL_GPIO_Init+0x2f8>)
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <HAL_GPIO_Init+0x2f8>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	43da      	mvns	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4013      	ands	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	029b      	lsls	r3, r3, #10
 8004062:	4013      	ands	r3, r2
 8004064:	d003      	beq.n	800406e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800406e:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <HAL_GPIO_Init+0x2f8>)
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004074:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <HAL_GPIO_Init+0x2f8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	43da      	mvns	r2, r3
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4013      	ands	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	025b      	lsls	r3, r3, #9
 800408c:	4013      	ands	r3, r2
 800408e:	d003      	beq.n	8004098 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004098:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <HAL_GPIO_Init+0x2f8>)
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	3301      	adds	r3, #1
 80040a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	40da      	lsrs	r2, r3
 80040ac:	1e13      	subs	r3, r2, #0
 80040ae:	d000      	beq.n	80040b2 <HAL_GPIO_Init+0x2d2>
 80040b0:	e6a2      	b.n	8003df8 <HAL_GPIO_Init+0x18>
  }
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b006      	add	sp, #24
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40010000 	.word	0x40010000
 80040c4:	50000400 	.word	0x50000400
 80040c8:	50000800 	.word	0x50000800
 80040cc:	50000c00 	.word	0x50000c00
 80040d0:	50001000 	.word	0x50001000
 80040d4:	50001c00 	.word	0x50001c00
 80040d8:	40010400 	.word	0x40010400

080040dc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	0008      	movs	r0, r1
 80040e6:	0011      	movs	r1, r2
 80040e8:	1cbb      	adds	r3, r7, #2
 80040ea:	1c02      	adds	r2, r0, #0
 80040ec:	801a      	strh	r2, [r3, #0]
 80040ee:	1c7b      	adds	r3, r7, #1
 80040f0:	1c0a      	adds	r2, r1, #0
 80040f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040f4:	1c7b      	adds	r3, r7, #1
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040fc:	1cbb      	adds	r3, r7, #2
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004104:	e003      	b.n	800410e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004106:	1cbb      	adds	r3, r7, #2
 8004108:	881a      	ldrh	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	46bd      	mov	sp, r7
 8004112:	b002      	add	sp, #8
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e082      	b.n	8004230 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2241      	movs	r2, #65	; 0x41
 800412e:	5c9b      	ldrb	r3, [r3, r2]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d107      	bne.n	8004146 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2240      	movs	r2, #64	; 0x40
 800413a:	2100      	movs	r1, #0
 800413c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	0018      	movs	r0, r3
 8004142:	f7ff fc2b 	bl	800399c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2241      	movs	r2, #65	; 0x41
 800414a:	2124      	movs	r1, #36	; 0x24
 800414c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2101      	movs	r1, #1
 800415a:	438a      	bics	r2, r1
 800415c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4934      	ldr	r1, [pc, #208]	; (8004238 <HAL_I2C_Init+0x120>)
 8004168:	400a      	ands	r2, r1
 800416a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4931      	ldr	r1, [pc, #196]	; (800423c <HAL_I2C_Init+0x124>)
 8004178:	400a      	ands	r2, r1
 800417a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d108      	bne.n	8004196 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2180      	movs	r1, #128	; 0x80
 800418e:	0209      	lsls	r1, r1, #8
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	e007      	b.n	80041a6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2184      	movs	r1, #132	; 0x84
 80041a0:	0209      	lsls	r1, r1, #8
 80041a2:	430a      	orrs	r2, r1
 80041a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d104      	bne.n	80041b8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	491f      	ldr	r1, [pc, #124]	; (8004240 <HAL_I2C_Init+0x128>)
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	491a      	ldr	r1, [pc, #104]	; (800423c <HAL_I2C_Init+0x124>)
 80041d4:	400a      	ands	r2, r1
 80041d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69d9      	ldr	r1, [r3, #28]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1a      	ldr	r2, [r3, #32]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2101      	movs	r1, #1
 800420e:	430a      	orrs	r2, r1
 8004210:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2241      	movs	r2, #65	; 0x41
 800421c:	2120      	movs	r1, #32
 800421e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2242      	movs	r2, #66	; 0x42
 800422a:	2100      	movs	r1, #0
 800422c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}
 8004238:	f0ffffff 	.word	0xf0ffffff
 800423c:	ffff7fff 	.word	0xffff7fff
 8004240:	02008000 	.word	0x02008000

08004244 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b089      	sub	sp, #36	; 0x24
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	000c      	movs	r4, r1
 800424e:	0010      	movs	r0, r2
 8004250:	0019      	movs	r1, r3
 8004252:	230a      	movs	r3, #10
 8004254:	18fb      	adds	r3, r7, r3
 8004256:	1c22      	adds	r2, r4, #0
 8004258:	801a      	strh	r2, [r3, #0]
 800425a:	2308      	movs	r3, #8
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	1c02      	adds	r2, r0, #0
 8004260:	801a      	strh	r2, [r3, #0]
 8004262:	1dbb      	adds	r3, r7, #6
 8004264:	1c0a      	adds	r2, r1, #0
 8004266:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2241      	movs	r2, #65	; 0x41
 800426c:	5c9b      	ldrb	r3, [r3, r2]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b20      	cmp	r3, #32
 8004272:	d000      	beq.n	8004276 <HAL_I2C_Mem_Write+0x32>
 8004274:	e10c      	b.n	8004490 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <HAL_I2C_Mem_Write+0x42>
 800427c:	232c      	movs	r3, #44	; 0x2c
 800427e:	18fb      	adds	r3, r7, r3
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2280      	movs	r2, #128	; 0x80
 800428a:	0092      	lsls	r2, r2, #2
 800428c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0ff      	b.n	8004492 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2240      	movs	r2, #64	; 0x40
 8004296:	5c9b      	ldrb	r3, [r3, r2]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d101      	bne.n	80042a0 <HAL_I2C_Mem_Write+0x5c>
 800429c:	2302      	movs	r3, #2
 800429e:	e0f8      	b.n	8004492 <HAL_I2C_Mem_Write+0x24e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2240      	movs	r2, #64	; 0x40
 80042a4:	2101      	movs	r1, #1
 80042a6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042a8:	f7ff fcb8 	bl	8003c1c <HAL_GetTick>
 80042ac:	0003      	movs	r3, r0
 80042ae:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	0219      	lsls	r1, r3, #8
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2319      	movs	r3, #25
 80042bc:	2201      	movs	r2, #1
 80042be:	f000 f975 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 80042c2:	1e03      	subs	r3, r0, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e0e3      	b.n	8004492 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2241      	movs	r2, #65	; 0x41
 80042ce:	2121      	movs	r1, #33	; 0x21
 80042d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2242      	movs	r2, #66	; 0x42
 80042d6:	2140      	movs	r1, #64	; 0x40
 80042d8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	222c      	movs	r2, #44	; 0x2c
 80042ea:	18ba      	adds	r2, r7, r2
 80042ec:	8812      	ldrh	r2, [r2, #0]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042f6:	1dbb      	adds	r3, r7, #6
 80042f8:	881c      	ldrh	r4, [r3, #0]
 80042fa:	2308      	movs	r3, #8
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	230a      	movs	r3, #10
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	8819      	ldrh	r1, [r3, #0]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	9301      	str	r3, [sp, #4]
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	0023      	movs	r3, r4
 8004312:	f000 f8c5 	bl	80044a0 <I2C_RequestMemoryWrite>
 8004316:	1e03      	subs	r3, r0, #0
 8004318:	d005      	beq.n	8004326 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2240      	movs	r2, #64	; 0x40
 800431e:	2100      	movs	r1, #0
 8004320:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0b5      	b.n	8004492 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	2bff      	cmp	r3, #255	; 0xff
 800432e:	d911      	bls.n	8004354 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	22ff      	movs	r2, #255	; 0xff
 8004334:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433a:	b2da      	uxtb	r2, r3
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	045c      	lsls	r4, r3, #17
 8004340:	230a      	movs	r3, #10
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	8819      	ldrh	r1, [r3, #0]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	2300      	movs	r3, #0
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	0023      	movs	r3, r4
 800434e:	f000 fb05 	bl	800495c <I2C_TransferConfig>
 8004352:	e012      	b.n	800437a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	b2da      	uxtb	r2, r3
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	049c      	lsls	r4, r3, #18
 8004368:	230a      	movs	r3, #10
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	8819      	ldrh	r1, [r3, #0]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	2300      	movs	r3, #0
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	0023      	movs	r3, r4
 8004376:	f000 faf1 	bl	800495c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 f961 	bl	8004648 <I2C_WaitOnTXISFlagUntilTimeout>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e081      	b.n	8004492 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	781a      	ldrb	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d03a      	beq.n	800443e <HAL_I2C_Mem_Write+0x1fa>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d136      	bne.n	800443e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	0013      	movs	r3, r2
 80043da:	2200      	movs	r2, #0
 80043dc:	2180      	movs	r1, #128	; 0x80
 80043de:	f000 f8e5 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 80043e2:	1e03      	subs	r3, r0, #0
 80043e4:	d001      	beq.n	80043ea <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e053      	b.n	8004492 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2bff      	cmp	r3, #255	; 0xff
 80043f2:	d911      	bls.n	8004418 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	22ff      	movs	r2, #255	; 0xff
 80043f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	045c      	lsls	r4, r3, #17
 8004404:	230a      	movs	r3, #10
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	8819      	ldrh	r1, [r3, #0]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	2300      	movs	r3, #0
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	0023      	movs	r3, r4
 8004412:	f000 faa3 	bl	800495c <I2C_TransferConfig>
 8004416:	e012      	b.n	800443e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	b2da      	uxtb	r2, r3
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	049c      	lsls	r4, r3, #18
 800442c:	230a      	movs	r3, #10
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	8819      	ldrh	r1, [r3, #0]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	2300      	movs	r3, #0
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	0023      	movs	r3, r4
 800443a:	f000 fa8f 	bl	800495c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d198      	bne.n	800437a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	0018      	movs	r0, r3
 8004450:	f000 f940 	bl	80046d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004454:	1e03      	subs	r3, r0, #0
 8004456:	d001      	beq.n	800445c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e01a      	b.n	8004492 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2220      	movs	r2, #32
 8004462:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	490b      	ldr	r1, [pc, #44]	; (800449c <HAL_I2C_Mem_Write+0x258>)
 8004470:	400a      	ands	r2, r1
 8004472:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2241      	movs	r2, #65	; 0x41
 8004478:	2120      	movs	r1, #32
 800447a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2242      	movs	r2, #66	; 0x42
 8004480:	2100      	movs	r1, #0
 8004482:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2240      	movs	r2, #64	; 0x40
 8004488:	2100      	movs	r1, #0
 800448a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	e000      	b.n	8004492 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004490:	2302      	movs	r3, #2
  }
}
 8004492:	0018      	movs	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	b007      	add	sp, #28
 8004498:	bd90      	pop	{r4, r7, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	fe00e800 	.word	0xfe00e800

080044a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044a0:	b5b0      	push	{r4, r5, r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	000c      	movs	r4, r1
 80044aa:	0010      	movs	r0, r2
 80044ac:	0019      	movs	r1, r3
 80044ae:	250a      	movs	r5, #10
 80044b0:	197b      	adds	r3, r7, r5
 80044b2:	1c22      	adds	r2, r4, #0
 80044b4:	801a      	strh	r2, [r3, #0]
 80044b6:	2308      	movs	r3, #8
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	1c02      	adds	r2, r0, #0
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	1dbb      	adds	r3, r7, #6
 80044c0:	1c0a      	adds	r2, r1, #0
 80044c2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044c4:	1dbb      	adds	r3, r7, #6
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	045c      	lsls	r4, r3, #17
 80044ce:	197b      	adds	r3, r7, r5
 80044d0:	8819      	ldrh	r1, [r3, #0]
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	4b23      	ldr	r3, [pc, #140]	; (8004564 <I2C_RequestMemoryWrite+0xc4>)
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	0023      	movs	r3, r4
 80044da:	f000 fa3f 	bl	800495c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e0:	6a39      	ldr	r1, [r7, #32]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f000 f8af 	bl	8004648 <I2C_WaitOnTXISFlagUntilTimeout>
 80044ea:	1e03      	subs	r3, r0, #0
 80044ec:	d001      	beq.n	80044f2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e033      	b.n	800455a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044f2:	1dbb      	adds	r3, r7, #6
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d107      	bne.n	800450a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044fa:	2308      	movs	r3, #8
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	629a      	str	r2, [r3, #40]	; 0x28
 8004508:	e019      	b.n	800453e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800450a:	2308      	movs	r3, #8
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	b29b      	uxth	r3, r3
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451e:	6a39      	ldr	r1, [r7, #32]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	0018      	movs	r0, r3
 8004524:	f000 f890 	bl	8004648 <I2C_WaitOnTXISFlagUntilTimeout>
 8004528:	1e03      	subs	r3, r0, #0
 800452a:	d001      	beq.n	8004530 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e014      	b.n	800455a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004530:	2308      	movs	r3, #8
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800453e:	6a3a      	ldr	r2, [r7, #32]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	0013      	movs	r3, r2
 8004548:	2200      	movs	r2, #0
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	f000 f82e 	bl	80045ac <I2C_WaitOnFlagUntilTimeout>
 8004550:	1e03      	subs	r3, r0, #0
 8004552:	d001      	beq.n	8004558 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b004      	add	sp, #16
 8004560:	bdb0      	pop	{r4, r5, r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	80002000 	.word	0x80002000

08004568 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2202      	movs	r2, #2
 8004578:	4013      	ands	r3, r2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d103      	bne.n	8004586 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2201      	movs	r2, #1
 800458e:	4013      	ands	r3, r2
 8004590:	2b01      	cmp	r3, #1
 8004592:	d007      	beq.n	80045a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2101      	movs	r1, #1
 80045a0:	430a      	orrs	r2, r1
 80045a2:	619a      	str	r2, [r3, #24]
  }
}
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b002      	add	sp, #8
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	1dfb      	adds	r3, r7, #7
 80045ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045bc:	e030      	b.n	8004620 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	3301      	adds	r3, #1
 80045c2:	d02d      	beq.n	8004620 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c4:	f7ff fb2a 	bl	8003c1c <HAL_GetTick>
 80045c8:	0002      	movs	r2, r0
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d302      	bcc.n	80045da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d122      	bne.n	8004620 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	425a      	negs	r2, r3
 80045ea:	4153      	adcs	r3, r2
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	001a      	movs	r2, r3
 80045f0:	1dfb      	adds	r3, r7, #7
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d113      	bne.n	8004620 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	2220      	movs	r2, #32
 80045fe:	431a      	orrs	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2241      	movs	r2, #65	; 0x41
 8004608:	2120      	movs	r1, #32
 800460a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2242      	movs	r2, #66	; 0x42
 8004610:	2100      	movs	r1, #0
 8004612:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2240      	movs	r2, #64	; 0x40
 8004618:	2100      	movs	r1, #0
 800461a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e00f      	b.n	8004640 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4013      	ands	r3, r2
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	425a      	negs	r2, r3
 8004630:	4153      	adcs	r3, r2
 8004632:	b2db      	uxtb	r3, r3
 8004634:	001a      	movs	r2, r3
 8004636:	1dfb      	adds	r3, r7, #7
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d0bf      	beq.n	80045be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	0018      	movs	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	b004      	add	sp, #16
 8004646:	bd80      	pop	{r7, pc}

08004648 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004654:	e032      	b.n	80046bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	0018      	movs	r0, r3
 800465e:	f000 f87d 	bl	800475c <I2C_IsErrorOccurred>
 8004662:	1e03      	subs	r3, r0, #0
 8004664:	d001      	beq.n	800466a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e030      	b.n	80046cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	3301      	adds	r3, #1
 800466e:	d025      	beq.n	80046bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004670:	f7ff fad4 	bl	8003c1c <HAL_GetTick>
 8004674:	0002      	movs	r2, r0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	429a      	cmp	r2, r3
 800467e:	d302      	bcc.n	8004686 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d11a      	bne.n	80046bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2202      	movs	r2, #2
 800468e:	4013      	ands	r3, r2
 8004690:	2b02      	cmp	r3, #2
 8004692:	d013      	beq.n	80046bc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004698:	2220      	movs	r2, #32
 800469a:	431a      	orrs	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2241      	movs	r2, #65	; 0x41
 80046a4:	2120      	movs	r1, #32
 80046a6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2242      	movs	r2, #66	; 0x42
 80046ac:	2100      	movs	r1, #0
 80046ae:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2240      	movs	r2, #64	; 0x40
 80046b4:	2100      	movs	r1, #0
 80046b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e007      	b.n	80046cc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2202      	movs	r2, #2
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d1c5      	bne.n	8004656 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046e0:	e02f      	b.n	8004742 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f000 f837 	bl	800475c <I2C_IsErrorOccurred>
 80046ee:	1e03      	subs	r3, r0, #0
 80046f0:	d001      	beq.n	80046f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e02d      	b.n	8004752 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7ff fa91 	bl	8003c1c <HAL_GetTick>
 80046fa:	0002      	movs	r2, r0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d11a      	bne.n	8004742 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2220      	movs	r2, #32
 8004714:	4013      	ands	r3, r2
 8004716:	2b20      	cmp	r3, #32
 8004718:	d013      	beq.n	8004742 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	2220      	movs	r2, #32
 8004720:	431a      	orrs	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2241      	movs	r2, #65	; 0x41
 800472a:	2120      	movs	r1, #32
 800472c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2242      	movs	r2, #66	; 0x42
 8004732:	2100      	movs	r1, #0
 8004734:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2240      	movs	r2, #64	; 0x40
 800473a:	2100      	movs	r1, #0
 800473c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e007      	b.n	8004752 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2220      	movs	r2, #32
 800474a:	4013      	ands	r3, r2
 800474c:	2b20      	cmp	r3, #32
 800474e:	d1c8      	bne.n	80046e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	0018      	movs	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	b004      	add	sp, #16
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b590      	push	{r4, r7, lr}
 800475e:	b08b      	sub	sp, #44	; 0x2c
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004768:	2327      	movs	r3, #39	; 0x27
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2210      	movs	r2, #16
 8004784:	4013      	ands	r3, r2
 8004786:	d100      	bne.n	800478a <I2C_IsErrorOccurred+0x2e>
 8004788:	e082      	b.n	8004890 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2210      	movs	r2, #16
 8004790:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004792:	e060      	b.n	8004856 <I2C_IsErrorOccurred+0xfa>
 8004794:	2427      	movs	r4, #39	; 0x27
 8004796:	193b      	adds	r3, r7, r4
 8004798:	193a      	adds	r2, r7, r4
 800479a:	7812      	ldrb	r2, [r2, #0]
 800479c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	3301      	adds	r3, #1
 80047a2:	d058      	beq.n	8004856 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047a4:	f7ff fa3a 	bl	8003c1c <HAL_GetTick>
 80047a8:	0002      	movs	r2, r0
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d306      	bcc.n	80047c2 <I2C_IsErrorOccurred+0x66>
 80047b4:	193b      	adds	r3, r7, r4
 80047b6:	193a      	adds	r2, r7, r4
 80047b8:	7812      	ldrb	r2, [r2, #0]
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d149      	bne.n	8004856 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	01db      	lsls	r3, r3, #7
 80047cc:	4013      	ands	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047d0:	2013      	movs	r0, #19
 80047d2:	183b      	adds	r3, r7, r0
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	2142      	movs	r1, #66	; 0x42
 80047d8:	5c52      	ldrb	r2, [r2, r1]
 80047da:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	021b      	lsls	r3, r3, #8
 80047e6:	401a      	ands	r2, r3
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d126      	bne.n	800483e <I2C_IsErrorOccurred+0xe2>
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	01db      	lsls	r3, r3, #7
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d021      	beq.n	800483e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80047fa:	183b      	adds	r3, r7, r0
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d01d      	beq.n	800483e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2180      	movs	r1, #128	; 0x80
 800480e:	01c9      	lsls	r1, r1, #7
 8004810:	430a      	orrs	r2, r1
 8004812:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004814:	f7ff fa02 	bl	8003c1c <HAL_GetTick>
 8004818:	0003      	movs	r3, r0
 800481a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800481c:	e00f      	b.n	800483e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800481e:	f7ff f9fd 	bl	8003c1c <HAL_GetTick>
 8004822:	0002      	movs	r2, r0
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b19      	cmp	r3, #25
 800482a:	d908      	bls.n	800483e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	2220      	movs	r2, #32
 8004830:	4313      	orrs	r3, r2
 8004832:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004834:	2327      	movs	r3, #39	; 0x27
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	2201      	movs	r2, #1
 800483a:	701a      	strb	r2, [r3, #0]

              break;
 800483c:	e00b      	b.n	8004856 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2220      	movs	r2, #32
 8004846:	4013      	ands	r3, r2
 8004848:	2127      	movs	r1, #39	; 0x27
 800484a:	187a      	adds	r2, r7, r1
 800484c:	1879      	adds	r1, r7, r1
 800484e:	7809      	ldrb	r1, [r1, #0]
 8004850:	7011      	strb	r1, [r2, #0]
 8004852:	2b20      	cmp	r3, #32
 8004854:	d1e3      	bne.n	800481e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2220      	movs	r2, #32
 800485e:	4013      	ands	r3, r2
 8004860:	2b20      	cmp	r3, #32
 8004862:	d004      	beq.n	800486e <I2C_IsErrorOccurred+0x112>
 8004864:	2327      	movs	r3, #39	; 0x27
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d092      	beq.n	8004794 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800486e:	2327      	movs	r3, #39	; 0x27
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2220      	movs	r2, #32
 800487e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	2204      	movs	r2, #4
 8004884:	4313      	orrs	r3, r2
 8004886:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004888:	2327      	movs	r3, #39	; 0x27
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4013      	ands	r3, r2
 80048a0:	d00c      	beq.n	80048bc <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	2201      	movs	r2, #1
 80048a6:	4313      	orrs	r3, r2
 80048a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2280      	movs	r2, #128	; 0x80
 80048b0:	0052      	lsls	r2, r2, #1
 80048b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048b4:	2327      	movs	r3, #39	; 0x27
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4013      	ands	r3, r2
 80048c4:	d00c      	beq.n	80048e0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	2208      	movs	r2, #8
 80048ca:	4313      	orrs	r3, r2
 80048cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2280      	movs	r2, #128	; 0x80
 80048d4:	00d2      	lsls	r2, r2, #3
 80048d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048d8:	2327      	movs	r3, #39	; 0x27
 80048da:	18fb      	adds	r3, r7, r3
 80048dc:	2201      	movs	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	2380      	movs	r3, #128	; 0x80
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4013      	ands	r3, r2
 80048e8:	d00c      	beq.n	8004904 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	2202      	movs	r2, #2
 80048ee:	4313      	orrs	r3, r2
 80048f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2280      	movs	r2, #128	; 0x80
 80048f8:	0092      	lsls	r2, r2, #2
 80048fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048fc:	2327      	movs	r3, #39	; 0x27
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	2201      	movs	r2, #1
 8004902:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004904:	2327      	movs	r3, #39	; 0x27
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01d      	beq.n	800494a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	0018      	movs	r0, r3
 8004912:	f7ff fe29 	bl	8004568 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	490d      	ldr	r1, [pc, #52]	; (8004958 <I2C_IsErrorOccurred+0x1fc>)
 8004922:	400a      	ands	r2, r1
 8004924:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	431a      	orrs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2241      	movs	r2, #65	; 0x41
 8004936:	2120      	movs	r1, #32
 8004938:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2242      	movs	r2, #66	; 0x42
 800493e:	2100      	movs	r1, #0
 8004940:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2240      	movs	r2, #64	; 0x40
 8004946:	2100      	movs	r1, #0
 8004948:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800494a:	2327      	movs	r3, #39	; 0x27
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	781b      	ldrb	r3, [r3, #0]
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b00b      	add	sp, #44	; 0x2c
 8004956:	bd90      	pop	{r4, r7, pc}
 8004958:	fe00e800 	.word	0xfe00e800

0800495c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800495c:	b590      	push	{r4, r7, lr}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	0008      	movs	r0, r1
 8004966:	0011      	movs	r1, r2
 8004968:	607b      	str	r3, [r7, #4]
 800496a:	240a      	movs	r4, #10
 800496c:	193b      	adds	r3, r7, r4
 800496e:	1c02      	adds	r2, r0, #0
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	2009      	movs	r0, #9
 8004974:	183b      	adds	r3, r7, r0
 8004976:	1c0a      	adds	r2, r1, #0
 8004978:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800497a:	193b      	adds	r3, r7, r4
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	059b      	lsls	r3, r3, #22
 8004980:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004982:	183b      	adds	r3, r7, r0
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	0419      	lsls	r1, r3, #16
 8004988:	23ff      	movs	r3, #255	; 0xff
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800498e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	4313      	orrs	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	085b      	lsrs	r3, r3, #1
 800499c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a6:	0d51      	lsrs	r1, r2, #21
 80049a8:	2280      	movs	r2, #128	; 0x80
 80049aa:	00d2      	lsls	r2, r2, #3
 80049ac:	400a      	ands	r2, r1
 80049ae:	4907      	ldr	r1, [pc, #28]	; (80049cc <I2C_TransferConfig+0x70>)
 80049b0:	430a      	orrs	r2, r1
 80049b2:	43d2      	mvns	r2, r2
 80049b4:	401a      	ands	r2, r3
 80049b6:	0011      	movs	r1, r2
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b007      	add	sp, #28
 80049c8:	bd90      	pop	{r4, r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	03ff63ff 	.word	0x03ff63ff

080049d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2241      	movs	r2, #65	; 0x41
 80049de:	5c9b      	ldrb	r3, [r3, r2]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d138      	bne.n	8004a58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2240      	movs	r2, #64	; 0x40
 80049ea:	5c9b      	ldrb	r3, [r3, r2]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e032      	b.n	8004a5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2240      	movs	r2, #64	; 0x40
 80049f8:	2101      	movs	r1, #1
 80049fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2241      	movs	r2, #65	; 0x41
 8004a00:	2124      	movs	r1, #36	; 0x24
 8004a02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2101      	movs	r1, #1
 8004a10:	438a      	bics	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4911      	ldr	r1, [pc, #68]	; (8004a64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004a20:	400a      	ands	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6819      	ldr	r1, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2101      	movs	r1, #1
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2241      	movs	r2, #65	; 0x41
 8004a48:	2120      	movs	r1, #32
 8004a4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2240      	movs	r2, #64	; 0x40
 8004a50:	2100      	movs	r1, #0
 8004a52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e000      	b.n	8004a5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
  }
}
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b002      	add	sp, #8
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	ffffefff 	.word	0xffffefff

08004a68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2241      	movs	r2, #65	; 0x41
 8004a76:	5c9b      	ldrb	r3, [r3, r2]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d139      	bne.n	8004af2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2240      	movs	r2, #64	; 0x40
 8004a82:	5c9b      	ldrb	r3, [r3, r2]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e033      	b.n	8004af4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2240      	movs	r2, #64	; 0x40
 8004a90:	2101      	movs	r1, #1
 8004a92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2241      	movs	r2, #65	; 0x41
 8004a98:	2124      	movs	r1, #36	; 0x24
 8004a9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a11      	ldr	r2, [pc, #68]	; (8004afc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2101      	movs	r1, #1
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2241      	movs	r2, #65	; 0x41
 8004ae2:	2120      	movs	r1, #32
 8004ae4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2240      	movs	r2, #64	; 0x40
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e000      	b.n	8004af4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
  }
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b004      	add	sp, #16
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	fffff0ff 	.word	0xfffff0ff

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b5b0      	push	{r4, r5, r7, lr}
 8004b02:	b08a      	sub	sp, #40	; 0x28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f000 fb6c 	bl	80051ec <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b14:	4bc8      	ldr	r3, [pc, #800]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	220c      	movs	r2, #12
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b1e:	4bc6      	ldr	r3, [pc, #792]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	025b      	lsls	r3, r3, #9
 8004b26:	4013      	ands	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	4013      	ands	r3, r2
 8004b32:	d100      	bne.n	8004b36 <HAL_RCC_OscConfig+0x36>
 8004b34:	e07d      	b.n	8004c32 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d007      	beq.n	8004b4c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d112      	bne.n	8004b68 <HAL_RCC_OscConfig+0x68>
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	025b      	lsls	r3, r3, #9
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d10d      	bne.n	8004b68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4c:	4bba      	ldr	r3, [pc, #744]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	029b      	lsls	r3, r3, #10
 8004b54:	4013      	ands	r3, r2
 8004b56:	d100      	bne.n	8004b5a <HAL_RCC_OscConfig+0x5a>
 8004b58:	e06a      	b.n	8004c30 <HAL_RCC_OscConfig+0x130>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d166      	bne.n	8004c30 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f000 fb42 	bl	80051ec <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	025b      	lsls	r3, r3, #9
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_OscConfig+0x84>
 8004b74:	4bb0      	ldr	r3, [pc, #704]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4baf      	ldr	r3, [pc, #700]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004b7a:	2180      	movs	r1, #128	; 0x80
 8004b7c:	0249      	lsls	r1, r1, #9
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	e027      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	23a0      	movs	r3, #160	; 0xa0
 8004b8a:	02db      	lsls	r3, r3, #11
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d10e      	bne.n	8004bae <HAL_RCC_OscConfig+0xae>
 8004b90:	4ba9      	ldr	r3, [pc, #676]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4ba8      	ldr	r3, [pc, #672]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004b96:	2180      	movs	r1, #128	; 0x80
 8004b98:	02c9      	lsls	r1, r1, #11
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	4ba6      	ldr	r3, [pc, #664]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	4ba5      	ldr	r3, [pc, #660]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004ba4:	2180      	movs	r1, #128	; 0x80
 8004ba6:	0249      	lsls	r1, r1, #9
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e012      	b.n	8004bd4 <HAL_RCC_OscConfig+0xd4>
 8004bae:	4ba2      	ldr	r3, [pc, #648]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4ba1      	ldr	r3, [pc, #644]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004bb4:	49a1      	ldr	r1, [pc, #644]	; (8004e3c <HAL_RCC_OscConfig+0x33c>)
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	4b9f      	ldr	r3, [pc, #636]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	025b      	lsls	r3, r3, #9
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4b9b      	ldr	r3, [pc, #620]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b9a      	ldr	r3, [pc, #616]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004bce:	499c      	ldr	r1, [pc, #624]	; (8004e40 <HAL_RCC_OscConfig+0x340>)
 8004bd0:	400a      	ands	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d014      	beq.n	8004c06 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7ff f81e 	bl	8003c1c <HAL_GetTick>
 8004be0:	0003      	movs	r3, r0
 8004be2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be6:	f7ff f819 	bl	8003c1c <HAL_GetTick>
 8004bea:	0002      	movs	r2, r0
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b64      	cmp	r3, #100	; 0x64
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e2f9      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bf8:	4b8f      	ldr	r3, [pc, #572]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	029b      	lsls	r3, r3, #10
 8004c00:	4013      	ands	r3, r2
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0xe6>
 8004c04:	e015      	b.n	8004c32 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c06:	f7ff f809 	bl	8003c1c <HAL_GetTick>
 8004c0a:	0003      	movs	r3, r0
 8004c0c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c10:	f7ff f804 	bl	8003c1c <HAL_GetTick>
 8004c14:	0002      	movs	r2, r0
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e2e4      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c22:	4b85      	ldr	r3, [pc, #532]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	029b      	lsls	r3, r3, #10
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x110>
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c30:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2202      	movs	r2, #2
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d100      	bne.n	8004c3e <HAL_RCC_OscConfig+0x13e>
 8004c3c:	e099      	b.n	8004d72 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	2220      	movs	r2, #32
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d009      	beq.n	8004c60 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004c4c:	4b7a      	ldr	r3, [pc, #488]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b79      	ldr	r3, [pc, #484]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004c52:	2120      	movs	r1, #32
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	4393      	bics	r3, r2
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d005      	beq.n	8004c72 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	d13e      	bne.n	8004cea <HAL_RCC_OscConfig+0x1ea>
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d13b      	bne.n	8004cea <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004c72:	4b71      	ldr	r3, [pc, #452]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2204      	movs	r2, #4
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d004      	beq.n	8004c86 <HAL_RCC_OscConfig+0x186>
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e2b2      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c86:	4b6c      	ldr	r3, [pc, #432]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4a6e      	ldr	r2, [pc, #440]	; (8004e44 <HAL_RCC_OscConfig+0x344>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	0019      	movs	r1, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	021a      	lsls	r2, r3, #8
 8004c96:	4b68      	ldr	r3, [pc, #416]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004c9c:	4b66      	ldr	r3, [pc, #408]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2209      	movs	r2, #9
 8004ca2:	4393      	bics	r3, r2
 8004ca4:	0019      	movs	r1, r3
 8004ca6:	4b64      	ldr	r3, [pc, #400]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004caa:	430a      	orrs	r2, r1
 8004cac:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cae:	f000 fbeb 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 8004cb2:	0001      	movs	r1, r0
 8004cb4:	4b60      	ldr	r3, [pc, #384]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	220f      	movs	r2, #15
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	4a62      	ldr	r2, [pc, #392]	; (8004e48 <HAL_RCC_OscConfig+0x348>)
 8004cc0:	5cd3      	ldrb	r3, [r2, r3]
 8004cc2:	000a      	movs	r2, r1
 8004cc4:	40da      	lsrs	r2, r3
 8004cc6:	4b61      	ldr	r3, [pc, #388]	; (8004e4c <HAL_RCC_OscConfig+0x34c>)
 8004cc8:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004cca:	4b61      	ldr	r3, [pc, #388]	; (8004e50 <HAL_RCC_OscConfig+0x350>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2513      	movs	r5, #19
 8004cd0:	197c      	adds	r4, r7, r5
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f7fe ff5c 	bl	8003b90 <HAL_InitTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004cdc:	197b      	adds	r3, r7, r5
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d046      	beq.n	8004d72 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004ce4:	197b      	adds	r3, r7, r5
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	e280      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d027      	beq.n	8004d40 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004cf0:	4b51      	ldr	r3, [pc, #324]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2209      	movs	r2, #9
 8004cf6:	4393      	bics	r3, r2
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	4b4f      	ldr	r3, [pc, #316]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d02:	f7fe ff8b 	bl	8003c1c <HAL_GetTick>
 8004d06:	0003      	movs	r3, r0
 8004d08:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d0c:	f7fe ff86 	bl	8003c1c <HAL_GetTick>
 8004d10:	0002      	movs	r2, r0
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e266      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d1e:	4b46      	ldr	r3, [pc, #280]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2204      	movs	r2, #4
 8004d24:	4013      	ands	r3, r2
 8004d26:	d0f1      	beq.n	8004d0c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d28:	4b43      	ldr	r3, [pc, #268]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a45      	ldr	r2, [pc, #276]	; (8004e44 <HAL_RCC_OscConfig+0x344>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	0019      	movs	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	021a      	lsls	r2, r3, #8
 8004d38:	4b3f      	ldr	r3, [pc, #252]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	e018      	b.n	8004d72 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d40:	4b3d      	ldr	r3, [pc, #244]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b3c      	ldr	r3, [pc, #240]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004d46:	2101      	movs	r1, #1
 8004d48:	438a      	bics	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fe ff66 	bl	8003c1c <HAL_GetTick>
 8004d50:	0003      	movs	r3, r0
 8004d52:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d56:	f7fe ff61 	bl	8003c1c <HAL_GetTick>
 8004d5a:	0002      	movs	r2, r0
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e241      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004d68:	4b33      	ldr	r3, [pc, #204]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2204      	movs	r2, #4
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d1f1      	bne.n	8004d56 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2210      	movs	r2, #16
 8004d78:	4013      	ands	r3, r2
 8004d7a:	d100      	bne.n	8004d7e <HAL_RCC_OscConfig+0x27e>
 8004d7c:	e0a1      	b.n	8004ec2 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d140      	bne.n	8004e06 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d84:	4b2c      	ldr	r3, [pc, #176]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d005      	beq.n	8004d9c <HAL_RCC_OscConfig+0x29c>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e227      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d9c:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4a2c      	ldr	r2, [pc, #176]	; (8004e54 <HAL_RCC_OscConfig+0x354>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	0019      	movs	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1a      	ldr	r2, [r3, #32]
 8004daa:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004db0:	4b21      	ldr	r3, [pc, #132]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	0a19      	lsrs	r1, r3, #8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	061a      	lsls	r2, r3, #24
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	0b5b      	lsrs	r3, r3, #13
 8004dca:	3301      	adds	r3, #1
 8004dcc:	2280      	movs	r2, #128	; 0x80
 8004dce:	0212      	lsls	r2, r2, #8
 8004dd0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004dd2:	4b19      	ldr	r3, [pc, #100]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	210f      	movs	r1, #15
 8004dda:	400b      	ands	r3, r1
 8004ddc:	491a      	ldr	r1, [pc, #104]	; (8004e48 <HAL_RCC_OscConfig+0x348>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004de2:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <HAL_RCC_OscConfig+0x34c>)
 8004de4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004de6:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <HAL_RCC_OscConfig+0x350>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2513      	movs	r5, #19
 8004dec:	197c      	adds	r4, r7, r5
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7fe fece 	bl	8003b90 <HAL_InitTick>
 8004df4:	0003      	movs	r3, r0
 8004df6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004df8:	197b      	adds	r3, r7, r5
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d060      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004e00:	197b      	adds	r3, r7, r5
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	e1f2      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d03f      	beq.n	8004e8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b09      	ldr	r3, [pc, #36]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004e14:	2180      	movs	r1, #128	; 0x80
 8004e16:	0049      	lsls	r1, r1, #1
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fe fefe 	bl	8003c1c <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e24:	e018      	b.n	8004e58 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e26:	f7fe fef9 	bl	8003c1c <HAL_GetTick>
 8004e2a:	0002      	movs	r2, r0
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d911      	bls.n	8004e58 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e1d9      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	fffeffff 	.word	0xfffeffff
 8004e40:	fffbffff 	.word	0xfffbffff
 8004e44:	ffffe0ff 	.word	0xffffe0ff
 8004e48:	0800c0e0 	.word	0x0800c0e0
 8004e4c:	20000000 	.word	0x20000000
 8004e50:	20000004 	.word	0x20000004
 8004e54:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e58:	4bc9      	ldr	r3, [pc, #804]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4013      	ands	r3, r2
 8004e62:	d0e0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e64:	4bc6      	ldr	r3, [pc, #792]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4ac6      	ldr	r2, [pc, #792]	; (8005184 <HAL_RCC_OscConfig+0x684>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1a      	ldr	r2, [r3, #32]
 8004e72:	4bc3      	ldr	r3, [pc, #780]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004e74:	430a      	orrs	r2, r1
 8004e76:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e78:	4bc1      	ldr	r3, [pc, #772]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	0a19      	lsrs	r1, r3, #8
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	061a      	lsls	r2, r3, #24
 8004e86:	4bbe      	ldr	r3, [pc, #760]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	e019      	b.n	8004ec2 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e8e:	4bbc      	ldr	r3, [pc, #752]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	4bbb      	ldr	r3, [pc, #748]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004e94:	49bc      	ldr	r1, [pc, #752]	; (8005188 <HAL_RCC_OscConfig+0x688>)
 8004e96:	400a      	ands	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9a:	f7fe febf 	bl	8003c1c <HAL_GetTick>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ea4:	f7fe feba 	bl	8003c1c <HAL_GetTick>
 8004ea8:	0002      	movs	r2, r0
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e19a      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004eb6:	4bb2      	ldr	r3, [pc, #712]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	2380      	movs	r3, #128	; 0x80
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2208      	movs	r2, #8
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d036      	beq.n	8004f3a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d019      	beq.n	8004f08 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ed4:	4baa      	ldr	r3, [pc, #680]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ed8:	4ba9      	ldr	r3, [pc, #676]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004eda:	2101      	movs	r1, #1
 8004edc:	430a      	orrs	r2, r1
 8004ede:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee0:	f7fe fe9c 	bl	8003c1c <HAL_GetTick>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eea:	f7fe fe97 	bl	8003c1c <HAL_GetTick>
 8004eee:	0002      	movs	r2, r0
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e177      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004efc:	4ba0      	ldr	r3, [pc, #640]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f00:	2202      	movs	r2, #2
 8004f02:	4013      	ands	r3, r2
 8004f04:	d0f1      	beq.n	8004eea <HAL_RCC_OscConfig+0x3ea>
 8004f06:	e018      	b.n	8004f3a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f08:	4b9d      	ldr	r3, [pc, #628]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f0c:	4b9c      	ldr	r3, [pc, #624]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004f0e:	2101      	movs	r1, #1
 8004f10:	438a      	bics	r2, r1
 8004f12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f14:	f7fe fe82 	bl	8003c1c <HAL_GetTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f1e:	f7fe fe7d 	bl	8003c1c <HAL_GetTick>
 8004f22:	0002      	movs	r2, r0
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e15d      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f30:	4b93      	ldr	r3, [pc, #588]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f34:	2202      	movs	r2, #2
 8004f36:	4013      	ands	r3, r2
 8004f38:	d1f1      	bne.n	8004f1e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2204      	movs	r2, #4
 8004f40:	4013      	ands	r3, r2
 8004f42:	d100      	bne.n	8004f46 <HAL_RCC_OscConfig+0x446>
 8004f44:	e0ae      	b.n	80050a4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f46:	2023      	movs	r0, #35	; 0x23
 8004f48:	183b      	adds	r3, r7, r0
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f4e:	4b8c      	ldr	r3, [pc, #560]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	055b      	lsls	r3, r3, #21
 8004f56:	4013      	ands	r3, r2
 8004f58:	d109      	bne.n	8004f6e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	4b89      	ldr	r3, [pc, #548]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5e:	4b88      	ldr	r3, [pc, #544]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004f60:	2180      	movs	r1, #128	; 0x80
 8004f62:	0549      	lsls	r1, r1, #21
 8004f64:	430a      	orrs	r2, r1
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004f68:	183b      	adds	r3, r7, r0
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6e:	4b87      	ldr	r3, [pc, #540]	; (800518c <HAL_RCC_OscConfig+0x68c>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	4013      	ands	r3, r2
 8004f78:	d11a      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f7a:	4b84      	ldr	r3, [pc, #528]	; (800518c <HAL_RCC_OscConfig+0x68c>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b83      	ldr	r3, [pc, #524]	; (800518c <HAL_RCC_OscConfig+0x68c>)
 8004f80:	2180      	movs	r1, #128	; 0x80
 8004f82:	0049      	lsls	r1, r1, #1
 8004f84:	430a      	orrs	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f88:	f7fe fe48 	bl	8003c1c <HAL_GetTick>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f92:	f7fe fe43 	bl	8003c1c <HAL_GetTick>
 8004f96:	0002      	movs	r2, r0
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b64      	cmp	r3, #100	; 0x64
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e123      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa4:	4b79      	ldr	r3, [pc, #484]	; (800518c <HAL_RCC_OscConfig+0x68c>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	4013      	ands	r3, r2
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d107      	bne.n	8004fcc <HAL_RCC_OscConfig+0x4cc>
 8004fbc:	4b70      	ldr	r3, [pc, #448]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fc0:	4b6f      	ldr	r3, [pc, #444]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004fc2:	2180      	movs	r1, #128	; 0x80
 8004fc4:	0049      	lsls	r1, r1, #1
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	651a      	str	r2, [r3, #80]	; 0x50
 8004fca:	e031      	b.n	8005030 <HAL_RCC_OscConfig+0x530>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10c      	bne.n	8004fee <HAL_RCC_OscConfig+0x4ee>
 8004fd4:	4b6a      	ldr	r3, [pc, #424]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004fd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fd8:	4b69      	ldr	r3, [pc, #420]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004fda:	496b      	ldr	r1, [pc, #428]	; (8005188 <HAL_RCC_OscConfig+0x688>)
 8004fdc:	400a      	ands	r2, r1
 8004fde:	651a      	str	r2, [r3, #80]	; 0x50
 8004fe0:	4b67      	ldr	r3, [pc, #412]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fe4:	4b66      	ldr	r3, [pc, #408]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004fe6:	496a      	ldr	r1, [pc, #424]	; (8005190 <HAL_RCC_OscConfig+0x690>)
 8004fe8:	400a      	ands	r2, r1
 8004fea:	651a      	str	r2, [r3, #80]	; 0x50
 8004fec:	e020      	b.n	8005030 <HAL_RCC_OscConfig+0x530>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	23a0      	movs	r3, #160	; 0xa0
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d10e      	bne.n	8005018 <HAL_RCC_OscConfig+0x518>
 8004ffa:	4b61      	ldr	r3, [pc, #388]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8004ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ffe:	4b60      	ldr	r3, [pc, #384]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8005000:	2180      	movs	r1, #128	; 0x80
 8005002:	00c9      	lsls	r1, r1, #3
 8005004:	430a      	orrs	r2, r1
 8005006:	651a      	str	r2, [r3, #80]	; 0x50
 8005008:	4b5d      	ldr	r3, [pc, #372]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 800500a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800500c:	4b5c      	ldr	r3, [pc, #368]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 800500e:	2180      	movs	r1, #128	; 0x80
 8005010:	0049      	lsls	r1, r1, #1
 8005012:	430a      	orrs	r2, r1
 8005014:	651a      	str	r2, [r3, #80]	; 0x50
 8005016:	e00b      	b.n	8005030 <HAL_RCC_OscConfig+0x530>
 8005018:	4b59      	ldr	r3, [pc, #356]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 800501a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800501c:	4b58      	ldr	r3, [pc, #352]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 800501e:	495a      	ldr	r1, [pc, #360]	; (8005188 <HAL_RCC_OscConfig+0x688>)
 8005020:	400a      	ands	r2, r1
 8005022:	651a      	str	r2, [r3, #80]	; 0x50
 8005024:	4b56      	ldr	r3, [pc, #344]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8005026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005028:	4b55      	ldr	r3, [pc, #340]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 800502a:	4959      	ldr	r1, [pc, #356]	; (8005190 <HAL_RCC_OscConfig+0x690>)
 800502c:	400a      	ands	r2, r1
 800502e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d015      	beq.n	8005064 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005038:	f7fe fdf0 	bl	8003c1c <HAL_GetTick>
 800503c:	0003      	movs	r3, r0
 800503e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005040:	e009      	b.n	8005056 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005042:	f7fe fdeb 	bl	8003c1c <HAL_GetTick>
 8005046:	0002      	movs	r2, r0
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	4a51      	ldr	r2, [pc, #324]	; (8005194 <HAL_RCC_OscConfig+0x694>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e0ca      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005056:	4b4a      	ldr	r3, [pc, #296]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8005058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4013      	ands	r3, r2
 8005060:	d0ef      	beq.n	8005042 <HAL_RCC_OscConfig+0x542>
 8005062:	e014      	b.n	800508e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005064:	f7fe fdda 	bl	8003c1c <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800506c:	e009      	b.n	8005082 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800506e:	f7fe fdd5 	bl	8003c1c <HAL_GetTick>
 8005072:	0002      	movs	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	4a46      	ldr	r2, [pc, #280]	; (8005194 <HAL_RCC_OscConfig+0x694>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e0b4      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005082:	4b3f      	ldr	r3, [pc, #252]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8005084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005086:	2380      	movs	r3, #128	; 0x80
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4013      	ands	r3, r2
 800508c:	d1ef      	bne.n	800506e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800508e:	2323      	movs	r3, #35	; 0x23
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d105      	bne.n	80050a4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005098:	4b39      	ldr	r3, [pc, #228]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 800509a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800509c:	4b38      	ldr	r3, [pc, #224]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 800509e:	493e      	ldr	r1, [pc, #248]	; (8005198 <HAL_RCC_OscConfig+0x698>)
 80050a0:	400a      	ands	r2, r1
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d100      	bne.n	80050ae <HAL_RCC_OscConfig+0x5ae>
 80050ac:	e09d      	b.n	80051ea <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	2b0c      	cmp	r3, #12
 80050b2:	d100      	bne.n	80050b6 <HAL_RCC_OscConfig+0x5b6>
 80050b4:	e076      	b.n	80051a4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d145      	bne.n	800514a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050be:	4b30      	ldr	r3, [pc, #192]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b2f      	ldr	r3, [pc, #188]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 80050c4:	4935      	ldr	r1, [pc, #212]	; (800519c <HAL_RCC_OscConfig+0x69c>)
 80050c6:	400a      	ands	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ca:	f7fe fda7 	bl	8003c1c <HAL_GetTick>
 80050ce:	0003      	movs	r3, r0
 80050d0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fe fda2 	bl	8003c1c <HAL_GetTick>
 80050d8:	0002      	movs	r2, r0
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e082      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80050e6:	4b26      	ldr	r3, [pc, #152]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	049b      	lsls	r3, r3, #18
 80050ee:	4013      	ands	r3, r2
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f2:	4b23      	ldr	r3, [pc, #140]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <HAL_RCC_OscConfig+0x6a0>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	0019      	movs	r1, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510a:	431a      	orrs	r2, r3
 800510c:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 800510e:	430a      	orrs	r2, r1
 8005110:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005112:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8005118:	2180      	movs	r1, #128	; 0x80
 800511a:	0449      	lsls	r1, r1, #17
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7fe fd7c 	bl	8003c1c <HAL_GetTick>
 8005124:	0003      	movs	r3, r0
 8005126:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800512a:	f7fe fd77 	bl	8003c1c <HAL_GetTick>
 800512e:	0002      	movs	r2, r0
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e057      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800513c:	4b10      	ldr	r3, [pc, #64]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	049b      	lsls	r3, r3, #18
 8005144:	4013      	ands	r3, r2
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x62a>
 8005148:	e04f      	b.n	80051ea <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800514a:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8005150:	4912      	ldr	r1, [pc, #72]	; (800519c <HAL_RCC_OscConfig+0x69c>)
 8005152:	400a      	ands	r2, r1
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005156:	f7fe fd61 	bl	8003c1c <HAL_GetTick>
 800515a:	0003      	movs	r3, r0
 800515c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005160:	f7fe fd5c 	bl	8003c1c <HAL_GetTick>
 8005164:	0002      	movs	r2, r0
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e03c      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005172:	4b03      	ldr	r3, [pc, #12]	; (8005180 <HAL_RCC_OscConfig+0x680>)
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	049b      	lsls	r3, r3, #18
 800517a:	4013      	ands	r3, r2
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x660>
 800517e:	e034      	b.n	80051ea <HAL_RCC_OscConfig+0x6ea>
 8005180:	40021000 	.word	0x40021000
 8005184:	ffff1fff 	.word	0xffff1fff
 8005188:	fffffeff 	.word	0xfffffeff
 800518c:	40007000 	.word	0x40007000
 8005190:	fffffbff 	.word	0xfffffbff
 8005194:	00001388 	.word	0x00001388
 8005198:	efffffff 	.word	0xefffffff
 800519c:	feffffff 	.word	0xfeffffff
 80051a0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e01d      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051b0:	4b10      	ldr	r3, [pc, #64]	; (80051f4 <HAL_RCC_OscConfig+0x6f4>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	025b      	lsls	r3, r3, #9
 80051bc:	401a      	ands	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d10f      	bne.n	80051e6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	23f0      	movs	r3, #240	; 0xf0
 80051ca:	039b      	lsls	r3, r3, #14
 80051cc:	401a      	ands	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	23c0      	movs	r3, #192	; 0xc0
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	401a      	ands	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d001      	beq.n	80051ea <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	0018      	movs	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b00a      	add	sp, #40	; 0x28
 80051f2:	bdb0      	pop	{r4, r5, r7, pc}
 80051f4:	40021000 	.word	0x40021000

080051f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051f8:	b5b0      	push	{r4, r5, r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e128      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800520c:	4b96      	ldr	r3, [pc, #600]	; (8005468 <HAL_RCC_ClockConfig+0x270>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2201      	movs	r2, #1
 8005212:	4013      	ands	r3, r2
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d91e      	bls.n	8005258 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b93      	ldr	r3, [pc, #588]	; (8005468 <HAL_RCC_ClockConfig+0x270>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2201      	movs	r2, #1
 8005220:	4393      	bics	r3, r2
 8005222:	0019      	movs	r1, r3
 8005224:	4b90      	ldr	r3, [pc, #576]	; (8005468 <HAL_RCC_ClockConfig+0x270>)
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800522c:	f7fe fcf6 	bl	8003c1c <HAL_GetTick>
 8005230:	0003      	movs	r3, r0
 8005232:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005234:	e009      	b.n	800524a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005236:	f7fe fcf1 	bl	8003c1c <HAL_GetTick>
 800523a:	0002      	movs	r2, r0
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	4a8a      	ldr	r2, [pc, #552]	; (800546c <HAL_RCC_ClockConfig+0x274>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d901      	bls.n	800524a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e109      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800524a:	4b87      	ldr	r3, [pc, #540]	; (8005468 <HAL_RCC_ClockConfig+0x270>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2201      	movs	r2, #1
 8005250:	4013      	ands	r3, r2
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d1ee      	bne.n	8005236 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2202      	movs	r2, #2
 800525e:	4013      	ands	r3, r2
 8005260:	d009      	beq.n	8005276 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005262:	4b83      	ldr	r3, [pc, #524]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	22f0      	movs	r2, #240	; 0xf0
 8005268:	4393      	bics	r3, r2
 800526a:	0019      	movs	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	4b7f      	ldr	r3, [pc, #508]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 8005272:	430a      	orrs	r2, r1
 8005274:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2201      	movs	r2, #1
 800527c:	4013      	ands	r3, r2
 800527e:	d100      	bne.n	8005282 <HAL_RCC_ClockConfig+0x8a>
 8005280:	e089      	b.n	8005396 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d107      	bne.n	800529a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800528a:	4b79      	ldr	r3, [pc, #484]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	029b      	lsls	r3, r3, #10
 8005292:	4013      	ands	r3, r2
 8005294:	d120      	bne.n	80052d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e0e1      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d107      	bne.n	80052b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052a2:	4b73      	ldr	r3, [pc, #460]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	049b      	lsls	r3, r3, #18
 80052aa:	4013      	ands	r3, r2
 80052ac:	d114      	bne.n	80052d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e0d5      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d106      	bne.n	80052c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052ba:	4b6d      	ldr	r3, [pc, #436]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2204      	movs	r2, #4
 80052c0:	4013      	ands	r3, r2
 80052c2:	d109      	bne.n	80052d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0ca      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052c8:	4b69      	ldr	r3, [pc, #420]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4013      	ands	r3, r2
 80052d2:	d101      	bne.n	80052d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0c2      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052d8:	4b65      	ldr	r3, [pc, #404]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	2203      	movs	r2, #3
 80052de:	4393      	bics	r3, r2
 80052e0:	0019      	movs	r1, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	4b62      	ldr	r3, [pc, #392]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 80052e8:	430a      	orrs	r2, r1
 80052ea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052ec:	f7fe fc96 	bl	8003c1c <HAL_GetTick>
 80052f0:	0003      	movs	r3, r0
 80052f2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d111      	bne.n	8005320 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80052fc:	e009      	b.n	8005312 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052fe:	f7fe fc8d 	bl	8003c1c <HAL_GetTick>
 8005302:	0002      	movs	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	4a58      	ldr	r2, [pc, #352]	; (800546c <HAL_RCC_ClockConfig+0x274>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e0a5      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005312:	4b57      	ldr	r3, [pc, #348]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	220c      	movs	r2, #12
 8005318:	4013      	ands	r3, r2
 800531a:	2b08      	cmp	r3, #8
 800531c:	d1ef      	bne.n	80052fe <HAL_RCC_ClockConfig+0x106>
 800531e:	e03a      	b.n	8005396 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d111      	bne.n	800534c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005328:	e009      	b.n	800533e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800532a:	f7fe fc77 	bl	8003c1c <HAL_GetTick>
 800532e:	0002      	movs	r2, r0
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	4a4d      	ldr	r2, [pc, #308]	; (800546c <HAL_RCC_ClockConfig+0x274>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d901      	bls.n	800533e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e08f      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800533e:	4b4c      	ldr	r3, [pc, #304]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	220c      	movs	r2, #12
 8005344:	4013      	ands	r3, r2
 8005346:	2b0c      	cmp	r3, #12
 8005348:	d1ef      	bne.n	800532a <HAL_RCC_ClockConfig+0x132>
 800534a:	e024      	b.n	8005396 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d11b      	bne.n	800538c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005354:	e009      	b.n	800536a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005356:	f7fe fc61 	bl	8003c1c <HAL_GetTick>
 800535a:	0002      	movs	r2, r0
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	4a42      	ldr	r2, [pc, #264]	; (800546c <HAL_RCC_ClockConfig+0x274>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e079      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800536a:	4b41      	ldr	r3, [pc, #260]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	220c      	movs	r2, #12
 8005370:	4013      	ands	r3, r2
 8005372:	2b04      	cmp	r3, #4
 8005374:	d1ef      	bne.n	8005356 <HAL_RCC_ClockConfig+0x15e>
 8005376:	e00e      	b.n	8005396 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005378:	f7fe fc50 	bl	8003c1c <HAL_GetTick>
 800537c:	0002      	movs	r2, r0
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	4a3a      	ldr	r2, [pc, #232]	; (800546c <HAL_RCC_ClockConfig+0x274>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e068      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800538c:	4b38      	ldr	r3, [pc, #224]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	220c      	movs	r2, #12
 8005392:	4013      	ands	r3, r2
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005396:	4b34      	ldr	r3, [pc, #208]	; (8005468 <HAL_RCC_ClockConfig+0x270>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	4013      	ands	r3, r2
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d21e      	bcs.n	80053e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a4:	4b30      	ldr	r3, [pc, #192]	; (8005468 <HAL_RCC_ClockConfig+0x270>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2201      	movs	r2, #1
 80053aa:	4393      	bics	r3, r2
 80053ac:	0019      	movs	r1, r3
 80053ae:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <HAL_RCC_ClockConfig+0x270>)
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80053b6:	f7fe fc31 	bl	8003c1c <HAL_GetTick>
 80053ba:	0003      	movs	r3, r0
 80053bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053be:	e009      	b.n	80053d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053c0:	f7fe fc2c 	bl	8003c1c <HAL_GetTick>
 80053c4:	0002      	movs	r2, r0
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	4a28      	ldr	r2, [pc, #160]	; (800546c <HAL_RCC_ClockConfig+0x274>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e044      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d4:	4b24      	ldr	r3, [pc, #144]	; (8005468 <HAL_RCC_ClockConfig+0x270>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	4013      	ands	r3, r2
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d1ee      	bne.n	80053c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2204      	movs	r2, #4
 80053e8:	4013      	ands	r3, r2
 80053ea:	d009      	beq.n	8005400 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ec:	4b20      	ldr	r3, [pc, #128]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4a20      	ldr	r2, [pc, #128]	; (8005474 <HAL_RCC_ClockConfig+0x27c>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	0019      	movs	r1, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 80053fc:	430a      	orrs	r2, r1
 80053fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2208      	movs	r2, #8
 8005406:	4013      	ands	r3, r2
 8005408:	d00a      	beq.n	8005420 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800540a:	4b19      	ldr	r3, [pc, #100]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <HAL_RCC_ClockConfig+0x280>)
 8005410:	4013      	ands	r3, r2
 8005412:	0019      	movs	r1, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	00da      	lsls	r2, r3, #3
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 800541c:	430a      	orrs	r2, r1
 800541e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005420:	f000 f832 	bl	8005488 <HAL_RCC_GetSysClockFreq>
 8005424:	0001      	movs	r1, r0
 8005426:	4b12      	ldr	r3, [pc, #72]	; (8005470 <HAL_RCC_ClockConfig+0x278>)
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	091b      	lsrs	r3, r3, #4
 800542c:	220f      	movs	r2, #15
 800542e:	4013      	ands	r3, r2
 8005430:	4a12      	ldr	r2, [pc, #72]	; (800547c <HAL_RCC_ClockConfig+0x284>)
 8005432:	5cd3      	ldrb	r3, [r2, r3]
 8005434:	000a      	movs	r2, r1
 8005436:	40da      	lsrs	r2, r3
 8005438:	4b11      	ldr	r3, [pc, #68]	; (8005480 <HAL_RCC_ClockConfig+0x288>)
 800543a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800543c:	4b11      	ldr	r3, [pc, #68]	; (8005484 <HAL_RCC_ClockConfig+0x28c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	250b      	movs	r5, #11
 8005442:	197c      	adds	r4, r7, r5
 8005444:	0018      	movs	r0, r3
 8005446:	f7fe fba3 	bl	8003b90 <HAL_InitTick>
 800544a:	0003      	movs	r3, r0
 800544c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800544e:	197b      	adds	r3, r7, r5
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005456:	197b      	adds	r3, r7, r5
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	e000      	b.n	800545e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	0018      	movs	r0, r3
 8005460:	46bd      	mov	sp, r7
 8005462:	b004      	add	sp, #16
 8005464:	bdb0      	pop	{r4, r5, r7, pc}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	40022000 	.word	0x40022000
 800546c:	00001388 	.word	0x00001388
 8005470:	40021000 	.word	0x40021000
 8005474:	fffff8ff 	.word	0xfffff8ff
 8005478:	ffffc7ff 	.word	0xffffc7ff
 800547c:	0800c0e0 	.word	0x0800c0e0
 8005480:	20000000 	.word	0x20000000
 8005484:	20000004 	.word	0x20000004

08005488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005488:	b5b0      	push	{r4, r5, r7, lr}
 800548a:	b08e      	sub	sp, #56	; 0x38
 800548c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800548e:	4b4c      	ldr	r3, [pc, #304]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005496:	230c      	movs	r3, #12
 8005498:	4013      	ands	r3, r2
 800549a:	2b0c      	cmp	r3, #12
 800549c:	d014      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0x40>
 800549e:	d900      	bls.n	80054a2 <HAL_RCC_GetSysClockFreq+0x1a>
 80054a0:	e07b      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x112>
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d002      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0x24>
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d00b      	beq.n	80054c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80054aa:	e076      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80054ac:	4b44      	ldr	r3, [pc, #272]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2210      	movs	r2, #16
 80054b2:	4013      	ands	r3, r2
 80054b4:	d002      	beq.n	80054bc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80054b6:	4b43      	ldr	r3, [pc, #268]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80054b8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80054ba:	e07c      	b.n	80055b6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80054bc:	4b42      	ldr	r3, [pc, #264]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x140>)
 80054be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054c0:	e079      	b.n	80055b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054c2:	4b42      	ldr	r3, [pc, #264]	; (80055cc <HAL_RCC_GetSysClockFreq+0x144>)
 80054c4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80054c6:	e076      	b.n	80055b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80054c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ca:	0c9a      	lsrs	r2, r3, #18
 80054cc:	230f      	movs	r3, #15
 80054ce:	401a      	ands	r2, r3
 80054d0:	4b3f      	ldr	r3, [pc, #252]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x148>)
 80054d2:	5c9b      	ldrb	r3, [r3, r2]
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	0d9a      	lsrs	r2, r3, #22
 80054da:	2303      	movs	r3, #3
 80054dc:	4013      	ands	r3, r2
 80054de:	3301      	adds	r3, #1
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e2:	4b37      	ldr	r3, [pc, #220]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	025b      	lsls	r3, r3, #9
 80054ea:	4013      	ands	r3, r2
 80054ec:	d01a      	beq.n	8005524 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	2300      	movs	r3, #0
 80054f4:	61fb      	str	r3, [r7, #28]
 80054f6:	4a35      	ldr	r2, [pc, #212]	; (80055cc <HAL_RCC_GetSysClockFreq+0x144>)
 80054f8:	2300      	movs	r3, #0
 80054fa:	69b8      	ldr	r0, [r7, #24]
 80054fc:	69f9      	ldr	r1, [r7, #28]
 80054fe:	f7fa ffdd 	bl	80004bc <__aeabi_lmul>
 8005502:	0002      	movs	r2, r0
 8005504:	000b      	movs	r3, r1
 8005506:	0010      	movs	r0, r2
 8005508:	0019      	movs	r1, r3
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	2300      	movs	r3, #0
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f7fa ffb1 	bl	800047c <__aeabi_uldivmod>
 800551a:	0002      	movs	r2, r0
 800551c:	000b      	movs	r3, r1
 800551e:	0013      	movs	r3, r2
 8005520:	637b      	str	r3, [r7, #52]	; 0x34
 8005522:	e037      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005524:	4b26      	ldr	r3, [pc, #152]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2210      	movs	r2, #16
 800552a:	4013      	ands	r3, r2
 800552c:	d01a      	beq.n	8005564 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	60bb      	str	r3, [r7, #8]
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	4a23      	ldr	r2, [pc, #140]	; (80055c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005538:	2300      	movs	r3, #0
 800553a:	68b8      	ldr	r0, [r7, #8]
 800553c:	68f9      	ldr	r1, [r7, #12]
 800553e:	f7fa ffbd 	bl	80004bc <__aeabi_lmul>
 8005542:	0002      	movs	r2, r0
 8005544:	000b      	movs	r3, r1
 8005546:	0010      	movs	r0, r2
 8005548:	0019      	movs	r1, r3
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	2300      	movs	r3, #0
 8005550:	607b      	str	r3, [r7, #4]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f7fa ff91 	bl	800047c <__aeabi_uldivmod>
 800555a:	0002      	movs	r2, r0
 800555c:	000b      	movs	r3, r1
 800555e:	0013      	movs	r3, r2
 8005560:	637b      	str	r3, [r7, #52]	; 0x34
 8005562:	e017      	b.n	8005594 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	0018      	movs	r0, r3
 8005568:	2300      	movs	r3, #0
 800556a:	0019      	movs	r1, r3
 800556c:	4a16      	ldr	r2, [pc, #88]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x140>)
 800556e:	2300      	movs	r3, #0
 8005570:	f7fa ffa4 	bl	80004bc <__aeabi_lmul>
 8005574:	0002      	movs	r2, r0
 8005576:	000b      	movs	r3, r1
 8005578:	0010      	movs	r0, r2
 800557a:	0019      	movs	r1, r3
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	001c      	movs	r4, r3
 8005580:	2300      	movs	r3, #0
 8005582:	001d      	movs	r5, r3
 8005584:	0022      	movs	r2, r4
 8005586:	002b      	movs	r3, r5
 8005588:	f7fa ff78 	bl	800047c <__aeabi_uldivmod>
 800558c:	0002      	movs	r2, r0
 800558e:	000b      	movs	r3, r1
 8005590:	0013      	movs	r3, r2
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005598:	e00d      	b.n	80055b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800559a:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	0b5b      	lsrs	r3, r3, #13
 80055a0:	2207      	movs	r2, #7
 80055a2:	4013      	ands	r3, r2
 80055a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	3301      	adds	r3, #1
 80055aa:	2280      	movs	r2, #128	; 0x80
 80055ac:	0212      	lsls	r2, r2, #8
 80055ae:	409a      	lsls	r2, r3
 80055b0:	0013      	movs	r3, r2
 80055b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80055b4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80055b8:	0018      	movs	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	b00e      	add	sp, #56	; 0x38
 80055be:	bdb0      	pop	{r4, r5, r7, pc}
 80055c0:	40021000 	.word	0x40021000
 80055c4:	003d0900 	.word	0x003d0900
 80055c8:	00f42400 	.word	0x00f42400
 80055cc:	007a1200 	.word	0x007a1200
 80055d0:	0800c0f0 	.word	0x0800c0f0

080055d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80055dc:	2017      	movs	r0, #23
 80055de:	183b      	adds	r3, r7, r0
 80055e0:	2200      	movs	r2, #0
 80055e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2220      	movs	r2, #32
 80055ea:	4013      	ands	r3, r2
 80055ec:	d100      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80055ee:	e0c7      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055f0:	4b84      	ldr	r3, [pc, #528]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80055f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f4:	2380      	movs	r3, #128	; 0x80
 80055f6:	055b      	lsls	r3, r3, #21
 80055f8:	4013      	ands	r3, r2
 80055fa:	d109      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055fc:	4b81      	ldr	r3, [pc, #516]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80055fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005600:	4b80      	ldr	r3, [pc, #512]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005602:	2180      	movs	r1, #128	; 0x80
 8005604:	0549      	lsls	r1, r1, #21
 8005606:	430a      	orrs	r2, r1
 8005608:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800560a:	183b      	adds	r3, r7, r0
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005610:	4b7d      	ldr	r3, [pc, #500]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	4013      	ands	r3, r2
 800561a:	d11a      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800561c:	4b7a      	ldr	r3, [pc, #488]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4b79      	ldr	r3, [pc, #484]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	0049      	lsls	r1, r1, #1
 8005626:	430a      	orrs	r2, r1
 8005628:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562a:	f7fe faf7 	bl	8003c1c <HAL_GetTick>
 800562e:	0003      	movs	r3, r0
 8005630:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005632:	e008      	b.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005634:	f7fe faf2 	bl	8003c1c <HAL_GetTick>
 8005638:	0002      	movs	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e0d9      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005646:	4b70      	ldr	r3, [pc, #448]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	4013      	ands	r3, r2
 8005650:	d0f0      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005652:	4b6c      	ldr	r3, [pc, #432]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	23c0      	movs	r3, #192	; 0xc0
 8005658:	039b      	lsls	r3, r3, #14
 800565a:	4013      	ands	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	23c0      	movs	r3, #192	; 0xc0
 8005664:	039b      	lsls	r3, r3, #14
 8005666:	4013      	ands	r3, r2
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	429a      	cmp	r2, r3
 800566c:	d013      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	23c0      	movs	r3, #192	; 0xc0
 8005674:	029b      	lsls	r3, r3, #10
 8005676:	401a      	ands	r2, r3
 8005678:	23c0      	movs	r3, #192	; 0xc0
 800567a:	029b      	lsls	r3, r3, #10
 800567c:	429a      	cmp	r2, r3
 800567e:	d10a      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005680:	4b60      	ldr	r3, [pc, #384]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	2380      	movs	r3, #128	; 0x80
 8005686:	029b      	lsls	r3, r3, #10
 8005688:	401a      	ands	r2, r3
 800568a:	2380      	movs	r3, #128	; 0x80
 800568c:	029b      	lsls	r3, r3, #10
 800568e:	429a      	cmp	r2, r3
 8005690:	d101      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e0b1      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005696:	4b5b      	ldr	r3, [pc, #364]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800569a:	23c0      	movs	r3, #192	; 0xc0
 800569c:	029b      	lsls	r3, r3, #10
 800569e:	4013      	ands	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d03b      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	23c0      	movs	r3, #192	; 0xc0
 80056ae:	029b      	lsls	r3, r3, #10
 80056b0:	4013      	ands	r3, r2
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d033      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2220      	movs	r2, #32
 80056be:	4013      	ands	r3, r2
 80056c0:	d02e      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80056c2:	4b50      	ldr	r3, [pc, #320]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c6:	4a51      	ldr	r2, [pc, #324]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056cc:	4b4d      	ldr	r3, [pc, #308]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056d0:	4b4c      	ldr	r3, [pc, #304]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	0309      	lsls	r1, r1, #12
 80056d6:	430a      	orrs	r2, r1
 80056d8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056da:	4b4a      	ldr	r3, [pc, #296]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056de:	4b49      	ldr	r3, [pc, #292]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056e0:	494b      	ldr	r1, [pc, #300]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80056e2:	400a      	ands	r2, r1
 80056e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80056e6:	4b47      	ldr	r3, [pc, #284]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	4013      	ands	r3, r2
 80056f4:	d014      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f6:	f7fe fa91 	bl	8003c1c <HAL_GetTick>
 80056fa:	0003      	movs	r3, r0
 80056fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056fe:	e009      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005700:	f7fe fa8c 	bl	8003c1c <HAL_GetTick>
 8005704:	0002      	movs	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	4a42      	ldr	r2, [pc, #264]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d901      	bls.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e072      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005714:	4b3b      	ldr	r3, [pc, #236]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005716:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4013      	ands	r3, r2
 800571e:	d0ef      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2220      	movs	r2, #32
 8005726:	4013      	ands	r3, r2
 8005728:	d01f      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	23c0      	movs	r3, #192	; 0xc0
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	401a      	ands	r2, r3
 8005734:	23c0      	movs	r3, #192	; 0xc0
 8005736:	029b      	lsls	r3, r3, #10
 8005738:	429a      	cmp	r2, r3
 800573a:	d10c      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800573c:	4b31      	ldr	r3, [pc, #196]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a35      	ldr	r2, [pc, #212]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005742:	4013      	ands	r3, r2
 8005744:	0019      	movs	r1, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	23c0      	movs	r3, #192	; 0xc0
 800574c:	039b      	lsls	r3, r3, #14
 800574e:	401a      	ands	r2, r3
 8005750:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005752:	430a      	orrs	r2, r1
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	4b2b      	ldr	r3, [pc, #172]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005758:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	23c0      	movs	r3, #192	; 0xc0
 8005760:	029b      	lsls	r3, r3, #10
 8005762:	401a      	ands	r2, r3
 8005764:	4b27      	ldr	r3, [pc, #156]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005766:	430a      	orrs	r2, r1
 8005768:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800576a:	2317      	movs	r3, #23
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d105      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005774:	4b23      	ldr	r3, [pc, #140]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005778:	4b22      	ldr	r3, [pc, #136]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800577a:	4928      	ldr	r1, [pc, #160]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800577c:	400a      	ands	r2, r1
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2202      	movs	r2, #2
 8005786:	4013      	ands	r3, r2
 8005788:	d009      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800578a:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578e:	220c      	movs	r2, #12
 8005790:	4393      	bics	r3, r2
 8005792:	0019      	movs	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800579a:	430a      	orrs	r2, r1
 800579c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2204      	movs	r2, #4
 80057a4:	4013      	ands	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057a8:	4b16      	ldr	r3, [pc, #88]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80057aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ac:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	0019      	movs	r1, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	4b13      	ldr	r3, [pc, #76]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80057b8:	430a      	orrs	r2, r1
 80057ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2208      	movs	r2, #8
 80057c2:	4013      	ands	r3, r2
 80057c4:	d009      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c6:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80057c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ca:	4a16      	ldr	r2, [pc, #88]	; (8005824 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	0019      	movs	r1, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80057d6:	430a      	orrs	r2, r1
 80057d8:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2280      	movs	r2, #128	; 0x80
 80057e0:	4013      	ands	r3, r2
 80057e2:	d009      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80057e4:	4b07      	ldr	r3, [pc, #28]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80057e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e8:	4a0f      	ldr	r2, [pc, #60]	; (8005828 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	0019      	movs	r1, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	4b04      	ldr	r3, [pc, #16]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80057f4:	430a      	orrs	r2, r1
 80057f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b006      	add	sp, #24
 8005800:	bd80      	pop	{r7, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	40021000 	.word	0x40021000
 8005808:	40007000 	.word	0x40007000
 800580c:	fffcffff 	.word	0xfffcffff
 8005810:	fff7ffff 	.word	0xfff7ffff
 8005814:	00001388 	.word	0x00001388
 8005818:	ffcfffff 	.word	0xffcfffff
 800581c:	efffffff 	.word	0xefffffff
 8005820:	fffff3ff 	.word	0xfffff3ff
 8005824:	ffffcfff 	.word	0xffffcfff
 8005828:	fff3ffff 	.word	0xfff3ffff

0800582c <sniprintf>:
 800582c:	b40c      	push	{r2, r3}
 800582e:	b530      	push	{r4, r5, lr}
 8005830:	4b17      	ldr	r3, [pc, #92]	; (8005890 <sniprintf+0x64>)
 8005832:	000c      	movs	r4, r1
 8005834:	681d      	ldr	r5, [r3, #0]
 8005836:	b09d      	sub	sp, #116	; 0x74
 8005838:	2900      	cmp	r1, #0
 800583a:	da08      	bge.n	800584e <sniprintf+0x22>
 800583c:	238b      	movs	r3, #139	; 0x8b
 800583e:	2001      	movs	r0, #1
 8005840:	602b      	str	r3, [r5, #0]
 8005842:	4240      	negs	r0, r0
 8005844:	b01d      	add	sp, #116	; 0x74
 8005846:	bc30      	pop	{r4, r5}
 8005848:	bc08      	pop	{r3}
 800584a:	b002      	add	sp, #8
 800584c:	4718      	bx	r3
 800584e:	2382      	movs	r3, #130	; 0x82
 8005850:	466a      	mov	r2, sp
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	8293      	strh	r3, [r2, #20]
 8005856:	2300      	movs	r3, #0
 8005858:	9002      	str	r0, [sp, #8]
 800585a:	9006      	str	r0, [sp, #24]
 800585c:	4299      	cmp	r1, r3
 800585e:	d000      	beq.n	8005862 <sniprintf+0x36>
 8005860:	1e4b      	subs	r3, r1, #1
 8005862:	9304      	str	r3, [sp, #16]
 8005864:	9307      	str	r3, [sp, #28]
 8005866:	2301      	movs	r3, #1
 8005868:	466a      	mov	r2, sp
 800586a:	425b      	negs	r3, r3
 800586c:	82d3      	strh	r3, [r2, #22]
 800586e:	0028      	movs	r0, r5
 8005870:	ab21      	add	r3, sp, #132	; 0x84
 8005872:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005874:	a902      	add	r1, sp, #8
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	f000 f9be 	bl	8005bf8 <_svfiprintf_r>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	da01      	bge.n	8005884 <sniprintf+0x58>
 8005880:	238b      	movs	r3, #139	; 0x8b
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	2c00      	cmp	r4, #0
 8005886:	d0dd      	beq.n	8005844 <sniprintf+0x18>
 8005888:	2200      	movs	r2, #0
 800588a:	9b02      	ldr	r3, [sp, #8]
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e7d9      	b.n	8005844 <sniprintf+0x18>
 8005890:	20000058 	.word	0x20000058

08005894 <memmove>:
 8005894:	b510      	push	{r4, lr}
 8005896:	4288      	cmp	r0, r1
 8005898:	d902      	bls.n	80058a0 <memmove+0xc>
 800589a:	188b      	adds	r3, r1, r2
 800589c:	4298      	cmp	r0, r3
 800589e:	d303      	bcc.n	80058a8 <memmove+0x14>
 80058a0:	2300      	movs	r3, #0
 80058a2:	e007      	b.n	80058b4 <memmove+0x20>
 80058a4:	5c8b      	ldrb	r3, [r1, r2]
 80058a6:	5483      	strb	r3, [r0, r2]
 80058a8:	3a01      	subs	r2, #1
 80058aa:	d2fb      	bcs.n	80058a4 <memmove+0x10>
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	5ccc      	ldrb	r4, [r1, r3]
 80058b0:	54c4      	strb	r4, [r0, r3]
 80058b2:	3301      	adds	r3, #1
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d1fa      	bne.n	80058ae <memmove+0x1a>
 80058b8:	e7f8      	b.n	80058ac <memmove+0x18>

080058ba <memset>:
 80058ba:	0003      	movs	r3, r0
 80058bc:	1882      	adds	r2, r0, r2
 80058be:	4293      	cmp	r3, r2
 80058c0:	d100      	bne.n	80058c4 <memset+0xa>
 80058c2:	4770      	bx	lr
 80058c4:	7019      	strb	r1, [r3, #0]
 80058c6:	3301      	adds	r3, #1
 80058c8:	e7f9      	b.n	80058be <memset+0x4>
	...

080058cc <__errno>:
 80058cc:	4b01      	ldr	r3, [pc, #4]	; (80058d4 <__errno+0x8>)
 80058ce:	6818      	ldr	r0, [r3, #0]
 80058d0:	4770      	bx	lr
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	20000058 	.word	0x20000058

080058d8 <__libc_init_array>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	2600      	movs	r6, #0
 80058dc:	4c0c      	ldr	r4, [pc, #48]	; (8005910 <__libc_init_array+0x38>)
 80058de:	4d0d      	ldr	r5, [pc, #52]	; (8005914 <__libc_init_array+0x3c>)
 80058e0:	1b64      	subs	r4, r4, r5
 80058e2:	10a4      	asrs	r4, r4, #2
 80058e4:	42a6      	cmp	r6, r4
 80058e6:	d109      	bne.n	80058fc <__libc_init_array+0x24>
 80058e8:	2600      	movs	r6, #0
 80058ea:	f001 fa57 	bl	8006d9c <_init>
 80058ee:	4c0a      	ldr	r4, [pc, #40]	; (8005918 <__libc_init_array+0x40>)
 80058f0:	4d0a      	ldr	r5, [pc, #40]	; (800591c <__libc_init_array+0x44>)
 80058f2:	1b64      	subs	r4, r4, r5
 80058f4:	10a4      	asrs	r4, r4, #2
 80058f6:	42a6      	cmp	r6, r4
 80058f8:	d105      	bne.n	8005906 <__libc_init_array+0x2e>
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	00b3      	lsls	r3, r6, #2
 80058fe:	58eb      	ldr	r3, [r5, r3]
 8005900:	4798      	blx	r3
 8005902:	3601      	adds	r6, #1
 8005904:	e7ee      	b.n	80058e4 <__libc_init_array+0xc>
 8005906:	00b3      	lsls	r3, r6, #2
 8005908:	58eb      	ldr	r3, [r5, r3]
 800590a:	4798      	blx	r3
 800590c:	3601      	adds	r6, #1
 800590e:	e7f2      	b.n	80058f6 <__libc_init_array+0x1e>
 8005910:	0800c504 	.word	0x0800c504
 8005914:	0800c504 	.word	0x0800c504
 8005918:	0800c508 	.word	0x0800c508
 800591c:	0800c504 	.word	0x0800c504

08005920 <__retarget_lock_acquire_recursive>:
 8005920:	4770      	bx	lr

08005922 <__retarget_lock_release_recursive>:
 8005922:	4770      	bx	lr

08005924 <memcpy>:
 8005924:	2300      	movs	r3, #0
 8005926:	b510      	push	{r4, lr}
 8005928:	429a      	cmp	r2, r3
 800592a:	d100      	bne.n	800592e <memcpy+0xa>
 800592c:	bd10      	pop	{r4, pc}
 800592e:	5ccc      	ldrb	r4, [r1, r3]
 8005930:	54c4      	strb	r4, [r0, r3]
 8005932:	3301      	adds	r3, #1
 8005934:	e7f8      	b.n	8005928 <memcpy+0x4>
	...

08005938 <_free_r>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	0005      	movs	r5, r0
 800593c:	2900      	cmp	r1, #0
 800593e:	d010      	beq.n	8005962 <_free_r+0x2a>
 8005940:	1f0c      	subs	r4, r1, #4
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	da00      	bge.n	800594a <_free_r+0x12>
 8005948:	18e4      	adds	r4, r4, r3
 800594a:	0028      	movs	r0, r5
 800594c:	f000 f8e2 	bl	8005b14 <__malloc_lock>
 8005950:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <_free_r+0x90>)
 8005952:	6813      	ldr	r3, [r2, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d105      	bne.n	8005964 <_free_r+0x2c>
 8005958:	6063      	str	r3, [r4, #4]
 800595a:	6014      	str	r4, [r2, #0]
 800595c:	0028      	movs	r0, r5
 800595e:	f000 f8e1 	bl	8005b24 <__malloc_unlock>
 8005962:	bd70      	pop	{r4, r5, r6, pc}
 8005964:	42a3      	cmp	r3, r4
 8005966:	d908      	bls.n	800597a <_free_r+0x42>
 8005968:	6820      	ldr	r0, [r4, #0]
 800596a:	1821      	adds	r1, r4, r0
 800596c:	428b      	cmp	r3, r1
 800596e:	d1f3      	bne.n	8005958 <_free_r+0x20>
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	1809      	adds	r1, r1, r0
 8005976:	6021      	str	r1, [r4, #0]
 8005978:	e7ee      	b.n	8005958 <_free_r+0x20>
 800597a:	001a      	movs	r2, r3
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <_free_r+0x4e>
 8005982:	42a3      	cmp	r3, r4
 8005984:	d9f9      	bls.n	800597a <_free_r+0x42>
 8005986:	6811      	ldr	r1, [r2, #0]
 8005988:	1850      	adds	r0, r2, r1
 800598a:	42a0      	cmp	r0, r4
 800598c:	d10b      	bne.n	80059a6 <_free_r+0x6e>
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	1809      	adds	r1, r1, r0
 8005992:	1850      	adds	r0, r2, r1
 8005994:	6011      	str	r1, [r2, #0]
 8005996:	4283      	cmp	r3, r0
 8005998:	d1e0      	bne.n	800595c <_free_r+0x24>
 800599a:	6818      	ldr	r0, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	1841      	adds	r1, r0, r1
 80059a0:	6011      	str	r1, [r2, #0]
 80059a2:	6053      	str	r3, [r2, #4]
 80059a4:	e7da      	b.n	800595c <_free_r+0x24>
 80059a6:	42a0      	cmp	r0, r4
 80059a8:	d902      	bls.n	80059b0 <_free_r+0x78>
 80059aa:	230c      	movs	r3, #12
 80059ac:	602b      	str	r3, [r5, #0]
 80059ae:	e7d5      	b.n	800595c <_free_r+0x24>
 80059b0:	6820      	ldr	r0, [r4, #0]
 80059b2:	1821      	adds	r1, r4, r0
 80059b4:	428b      	cmp	r3, r1
 80059b6:	d103      	bne.n	80059c0 <_free_r+0x88>
 80059b8:	6819      	ldr	r1, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	1809      	adds	r1, r1, r0
 80059be:	6021      	str	r1, [r4, #0]
 80059c0:	6063      	str	r3, [r4, #4]
 80059c2:	6054      	str	r4, [r2, #4]
 80059c4:	e7ca      	b.n	800595c <_free_r+0x24>
 80059c6:	46c0      	nop			; (mov r8, r8)
 80059c8:	2000061c 	.word	0x2000061c

080059cc <sbrk_aligned>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	4e0f      	ldr	r6, [pc, #60]	; (8005a0c <sbrk_aligned+0x40>)
 80059d0:	000d      	movs	r5, r1
 80059d2:	6831      	ldr	r1, [r6, #0]
 80059d4:	0004      	movs	r4, r0
 80059d6:	2900      	cmp	r1, #0
 80059d8:	d102      	bne.n	80059e0 <sbrk_aligned+0x14>
 80059da:	f000 fb8d 	bl	80060f8 <_sbrk_r>
 80059de:	6030      	str	r0, [r6, #0]
 80059e0:	0029      	movs	r1, r5
 80059e2:	0020      	movs	r0, r4
 80059e4:	f000 fb88 	bl	80060f8 <_sbrk_r>
 80059e8:	1c43      	adds	r3, r0, #1
 80059ea:	d00a      	beq.n	8005a02 <sbrk_aligned+0x36>
 80059ec:	2303      	movs	r3, #3
 80059ee:	1cc5      	adds	r5, r0, #3
 80059f0:	439d      	bics	r5, r3
 80059f2:	42a8      	cmp	r0, r5
 80059f4:	d007      	beq.n	8005a06 <sbrk_aligned+0x3a>
 80059f6:	1a29      	subs	r1, r5, r0
 80059f8:	0020      	movs	r0, r4
 80059fa:	f000 fb7d 	bl	80060f8 <_sbrk_r>
 80059fe:	3001      	adds	r0, #1
 8005a00:	d101      	bne.n	8005a06 <sbrk_aligned+0x3a>
 8005a02:	2501      	movs	r5, #1
 8005a04:	426d      	negs	r5, r5
 8005a06:	0028      	movs	r0, r5
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	20000620 	.word	0x20000620

08005a10 <_malloc_r>:
 8005a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a12:	2203      	movs	r2, #3
 8005a14:	1ccb      	adds	r3, r1, #3
 8005a16:	4393      	bics	r3, r2
 8005a18:	3308      	adds	r3, #8
 8005a1a:	0006      	movs	r6, r0
 8005a1c:	001f      	movs	r7, r3
 8005a1e:	2b0c      	cmp	r3, #12
 8005a20:	d238      	bcs.n	8005a94 <_malloc_r+0x84>
 8005a22:	270c      	movs	r7, #12
 8005a24:	42b9      	cmp	r1, r7
 8005a26:	d837      	bhi.n	8005a98 <_malloc_r+0x88>
 8005a28:	0030      	movs	r0, r6
 8005a2a:	f000 f873 	bl	8005b14 <__malloc_lock>
 8005a2e:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <_malloc_r+0x100>)
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	001c      	movs	r4, r3
 8005a36:	2c00      	cmp	r4, #0
 8005a38:	d133      	bne.n	8005aa2 <_malloc_r+0x92>
 8005a3a:	0039      	movs	r1, r7
 8005a3c:	0030      	movs	r0, r6
 8005a3e:	f7ff ffc5 	bl	80059cc <sbrk_aligned>
 8005a42:	0004      	movs	r4, r0
 8005a44:	1c43      	adds	r3, r0, #1
 8005a46:	d15e      	bne.n	8005b06 <_malloc_r+0xf6>
 8005a48:	9b00      	ldr	r3, [sp, #0]
 8005a4a:	681c      	ldr	r4, [r3, #0]
 8005a4c:	0025      	movs	r5, r4
 8005a4e:	2d00      	cmp	r5, #0
 8005a50:	d14e      	bne.n	8005af0 <_malloc_r+0xe0>
 8005a52:	2c00      	cmp	r4, #0
 8005a54:	d051      	beq.n	8005afa <_malloc_r+0xea>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	0029      	movs	r1, r5
 8005a5a:	18e3      	adds	r3, r4, r3
 8005a5c:	0030      	movs	r0, r6
 8005a5e:	9301      	str	r3, [sp, #4]
 8005a60:	f000 fb4a 	bl	80060f8 <_sbrk_r>
 8005a64:	9b01      	ldr	r3, [sp, #4]
 8005a66:	4283      	cmp	r3, r0
 8005a68:	d147      	bne.n	8005afa <_malloc_r+0xea>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	0030      	movs	r0, r6
 8005a6e:	1aff      	subs	r7, r7, r3
 8005a70:	0039      	movs	r1, r7
 8005a72:	f7ff ffab 	bl	80059cc <sbrk_aligned>
 8005a76:	3001      	adds	r0, #1
 8005a78:	d03f      	beq.n	8005afa <_malloc_r+0xea>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	19db      	adds	r3, r3, r7
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	9b00      	ldr	r3, [sp, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d040      	beq.n	8005b0a <_malloc_r+0xfa>
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	42a2      	cmp	r2, r4
 8005a8c:	d133      	bne.n	8005af6 <_malloc_r+0xe6>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	605a      	str	r2, [r3, #4]
 8005a92:	e014      	b.n	8005abe <_malloc_r+0xae>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	dac5      	bge.n	8005a24 <_malloc_r+0x14>
 8005a98:	230c      	movs	r3, #12
 8005a9a:	2500      	movs	r5, #0
 8005a9c:	6033      	str	r3, [r6, #0]
 8005a9e:	0028      	movs	r0, r5
 8005aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aa2:	6821      	ldr	r1, [r4, #0]
 8005aa4:	1bc9      	subs	r1, r1, r7
 8005aa6:	d420      	bmi.n	8005aea <_malloc_r+0xda>
 8005aa8:	290b      	cmp	r1, #11
 8005aaa:	d918      	bls.n	8005ade <_malloc_r+0xce>
 8005aac:	19e2      	adds	r2, r4, r7
 8005aae:	6027      	str	r7, [r4, #0]
 8005ab0:	42a3      	cmp	r3, r4
 8005ab2:	d112      	bne.n	8005ada <_malloc_r+0xca>
 8005ab4:	9b00      	ldr	r3, [sp, #0]
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	6863      	ldr	r3, [r4, #4]
 8005aba:	6011      	str	r1, [r2, #0]
 8005abc:	6053      	str	r3, [r2, #4]
 8005abe:	0030      	movs	r0, r6
 8005ac0:	0025      	movs	r5, r4
 8005ac2:	f000 f82f 	bl	8005b24 <__malloc_unlock>
 8005ac6:	2207      	movs	r2, #7
 8005ac8:	350b      	adds	r5, #11
 8005aca:	1d23      	adds	r3, r4, #4
 8005acc:	4395      	bics	r5, r2
 8005ace:	1aea      	subs	r2, r5, r3
 8005ad0:	429d      	cmp	r5, r3
 8005ad2:	d0e4      	beq.n	8005a9e <_malloc_r+0x8e>
 8005ad4:	1b5b      	subs	r3, r3, r5
 8005ad6:	50a3      	str	r3, [r4, r2]
 8005ad8:	e7e1      	b.n	8005a9e <_malloc_r+0x8e>
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	e7ec      	b.n	8005ab8 <_malloc_r+0xa8>
 8005ade:	6862      	ldr	r2, [r4, #4]
 8005ae0:	42a3      	cmp	r3, r4
 8005ae2:	d1d5      	bne.n	8005a90 <_malloc_r+0x80>
 8005ae4:	9b00      	ldr	r3, [sp, #0]
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	e7e9      	b.n	8005abe <_malloc_r+0xae>
 8005aea:	0023      	movs	r3, r4
 8005aec:	6864      	ldr	r4, [r4, #4]
 8005aee:	e7a2      	b.n	8005a36 <_malloc_r+0x26>
 8005af0:	002c      	movs	r4, r5
 8005af2:	686d      	ldr	r5, [r5, #4]
 8005af4:	e7ab      	b.n	8005a4e <_malloc_r+0x3e>
 8005af6:	0013      	movs	r3, r2
 8005af8:	e7c4      	b.n	8005a84 <_malloc_r+0x74>
 8005afa:	230c      	movs	r3, #12
 8005afc:	0030      	movs	r0, r6
 8005afe:	6033      	str	r3, [r6, #0]
 8005b00:	f000 f810 	bl	8005b24 <__malloc_unlock>
 8005b04:	e7cb      	b.n	8005a9e <_malloc_r+0x8e>
 8005b06:	6027      	str	r7, [r4, #0]
 8005b08:	e7d9      	b.n	8005abe <_malloc_r+0xae>
 8005b0a:	605b      	str	r3, [r3, #4]
 8005b0c:	deff      	udf	#255	; 0xff
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	2000061c 	.word	0x2000061c

08005b14 <__malloc_lock>:
 8005b14:	b510      	push	{r4, lr}
 8005b16:	4802      	ldr	r0, [pc, #8]	; (8005b20 <__malloc_lock+0xc>)
 8005b18:	f7ff ff02 	bl	8005920 <__retarget_lock_acquire_recursive>
 8005b1c:	bd10      	pop	{r4, pc}
 8005b1e:	46c0      	nop			; (mov r8, r8)
 8005b20:	20000618 	.word	0x20000618

08005b24 <__malloc_unlock>:
 8005b24:	b510      	push	{r4, lr}
 8005b26:	4802      	ldr	r0, [pc, #8]	; (8005b30 <__malloc_unlock+0xc>)
 8005b28:	f7ff fefb 	bl	8005922 <__retarget_lock_release_recursive>
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	20000618 	.word	0x20000618

08005b34 <__ssputs_r>:
 8005b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b36:	b085      	sub	sp, #20
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	9203      	str	r2, [sp, #12]
 8005b3c:	688e      	ldr	r6, [r1, #8]
 8005b3e:	9a01      	ldr	r2, [sp, #4]
 8005b40:	0007      	movs	r7, r0
 8005b42:	000c      	movs	r4, r1
 8005b44:	680b      	ldr	r3, [r1, #0]
 8005b46:	4296      	cmp	r6, r2
 8005b48:	d831      	bhi.n	8005bae <__ssputs_r+0x7a>
 8005b4a:	898a      	ldrh	r2, [r1, #12]
 8005b4c:	2190      	movs	r1, #144	; 0x90
 8005b4e:	00c9      	lsls	r1, r1, #3
 8005b50:	420a      	tst	r2, r1
 8005b52:	d029      	beq.n	8005ba8 <__ssputs_r+0x74>
 8005b54:	2003      	movs	r0, #3
 8005b56:	6921      	ldr	r1, [r4, #16]
 8005b58:	1a5b      	subs	r3, r3, r1
 8005b5a:	9302      	str	r3, [sp, #8]
 8005b5c:	6963      	ldr	r3, [r4, #20]
 8005b5e:	4343      	muls	r3, r0
 8005b60:	0fdd      	lsrs	r5, r3, #31
 8005b62:	18ed      	adds	r5, r5, r3
 8005b64:	9b01      	ldr	r3, [sp, #4]
 8005b66:	9802      	ldr	r0, [sp, #8]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	181b      	adds	r3, r3, r0
 8005b6c:	106d      	asrs	r5, r5, #1
 8005b6e:	42ab      	cmp	r3, r5
 8005b70:	d900      	bls.n	8005b74 <__ssputs_r+0x40>
 8005b72:	001d      	movs	r5, r3
 8005b74:	0552      	lsls	r2, r2, #21
 8005b76:	d529      	bpl.n	8005bcc <__ssputs_r+0x98>
 8005b78:	0029      	movs	r1, r5
 8005b7a:	0038      	movs	r0, r7
 8005b7c:	f7ff ff48 	bl	8005a10 <_malloc_r>
 8005b80:	1e06      	subs	r6, r0, #0
 8005b82:	d02d      	beq.n	8005be0 <__ssputs_r+0xac>
 8005b84:	9a02      	ldr	r2, [sp, #8]
 8005b86:	6921      	ldr	r1, [r4, #16]
 8005b88:	f7ff fecc 	bl	8005924 <memcpy>
 8005b8c:	89a2      	ldrh	r2, [r4, #12]
 8005b8e:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <__ssputs_r+0xc0>)
 8005b90:	401a      	ands	r2, r3
 8005b92:	2380      	movs	r3, #128	; 0x80
 8005b94:	4313      	orrs	r3, r2
 8005b96:	81a3      	strh	r3, [r4, #12]
 8005b98:	9b02      	ldr	r3, [sp, #8]
 8005b9a:	6126      	str	r6, [r4, #16]
 8005b9c:	18f6      	adds	r6, r6, r3
 8005b9e:	6026      	str	r6, [r4, #0]
 8005ba0:	6165      	str	r5, [r4, #20]
 8005ba2:	9e01      	ldr	r6, [sp, #4]
 8005ba4:	1aed      	subs	r5, r5, r3
 8005ba6:	60a5      	str	r5, [r4, #8]
 8005ba8:	9b01      	ldr	r3, [sp, #4]
 8005baa:	429e      	cmp	r6, r3
 8005bac:	d900      	bls.n	8005bb0 <__ssputs_r+0x7c>
 8005bae:	9e01      	ldr	r6, [sp, #4]
 8005bb0:	0032      	movs	r2, r6
 8005bb2:	9903      	ldr	r1, [sp, #12]
 8005bb4:	6820      	ldr	r0, [r4, #0]
 8005bb6:	f7ff fe6d 	bl	8005894 <memmove>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	68a3      	ldr	r3, [r4, #8]
 8005bbe:	1b9b      	subs	r3, r3, r6
 8005bc0:	60a3      	str	r3, [r4, #8]
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	199b      	adds	r3, r3, r6
 8005bc6:	6023      	str	r3, [r4, #0]
 8005bc8:	b005      	add	sp, #20
 8005bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bcc:	002a      	movs	r2, r5
 8005bce:	0038      	movs	r0, r7
 8005bd0:	f000 faaf 	bl	8006132 <_realloc_r>
 8005bd4:	1e06      	subs	r6, r0, #0
 8005bd6:	d1df      	bne.n	8005b98 <__ssputs_r+0x64>
 8005bd8:	0038      	movs	r0, r7
 8005bda:	6921      	ldr	r1, [r4, #16]
 8005bdc:	f7ff feac 	bl	8005938 <_free_r>
 8005be0:	230c      	movs	r3, #12
 8005be2:	2001      	movs	r0, #1
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	89a2      	ldrh	r2, [r4, #12]
 8005be8:	3334      	adds	r3, #52	; 0x34
 8005bea:	4313      	orrs	r3, r2
 8005bec:	81a3      	strh	r3, [r4, #12]
 8005bee:	4240      	negs	r0, r0
 8005bf0:	e7ea      	b.n	8005bc8 <__ssputs_r+0x94>
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	fffffb7f 	.word	0xfffffb7f

08005bf8 <_svfiprintf_r>:
 8005bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfa:	b0a1      	sub	sp, #132	; 0x84
 8005bfc:	9003      	str	r0, [sp, #12]
 8005bfe:	001d      	movs	r5, r3
 8005c00:	898b      	ldrh	r3, [r1, #12]
 8005c02:	000f      	movs	r7, r1
 8005c04:	0016      	movs	r6, r2
 8005c06:	061b      	lsls	r3, r3, #24
 8005c08:	d511      	bpl.n	8005c2e <_svfiprintf_r+0x36>
 8005c0a:	690b      	ldr	r3, [r1, #16]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10e      	bne.n	8005c2e <_svfiprintf_r+0x36>
 8005c10:	2140      	movs	r1, #64	; 0x40
 8005c12:	f7ff fefd 	bl	8005a10 <_malloc_r>
 8005c16:	6038      	str	r0, [r7, #0]
 8005c18:	6138      	str	r0, [r7, #16]
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d105      	bne.n	8005c2a <_svfiprintf_r+0x32>
 8005c1e:	230c      	movs	r3, #12
 8005c20:	9a03      	ldr	r2, [sp, #12]
 8005c22:	3801      	subs	r0, #1
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	b021      	add	sp, #132	; 0x84
 8005c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c2a:	2340      	movs	r3, #64	; 0x40
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	ac08      	add	r4, sp, #32
 8005c32:	6163      	str	r3, [r4, #20]
 8005c34:	3320      	adds	r3, #32
 8005c36:	7663      	strb	r3, [r4, #25]
 8005c38:	3310      	adds	r3, #16
 8005c3a:	76a3      	strb	r3, [r4, #26]
 8005c3c:	9507      	str	r5, [sp, #28]
 8005c3e:	0035      	movs	r5, r6
 8005c40:	782b      	ldrb	r3, [r5, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <_svfiprintf_r+0x52>
 8005c46:	2b25      	cmp	r3, #37	; 0x25
 8005c48:	d148      	bne.n	8005cdc <_svfiprintf_r+0xe4>
 8005c4a:	1bab      	subs	r3, r5, r6
 8005c4c:	9305      	str	r3, [sp, #20]
 8005c4e:	42b5      	cmp	r5, r6
 8005c50:	d00b      	beq.n	8005c6a <_svfiprintf_r+0x72>
 8005c52:	0032      	movs	r2, r6
 8005c54:	0039      	movs	r1, r7
 8005c56:	9803      	ldr	r0, [sp, #12]
 8005c58:	f7ff ff6c 	bl	8005b34 <__ssputs_r>
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d100      	bne.n	8005c62 <_svfiprintf_r+0x6a>
 8005c60:	e0af      	b.n	8005dc2 <_svfiprintf_r+0x1ca>
 8005c62:	6963      	ldr	r3, [r4, #20]
 8005c64:	9a05      	ldr	r2, [sp, #20]
 8005c66:	189b      	adds	r3, r3, r2
 8005c68:	6163      	str	r3, [r4, #20]
 8005c6a:	782b      	ldrb	r3, [r5, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d100      	bne.n	8005c72 <_svfiprintf_r+0x7a>
 8005c70:	e0a7      	b.n	8005dc2 <_svfiprintf_r+0x1ca>
 8005c72:	2201      	movs	r2, #1
 8005c74:	2300      	movs	r3, #0
 8005c76:	4252      	negs	r2, r2
 8005c78:	6062      	str	r2, [r4, #4]
 8005c7a:	a904      	add	r1, sp, #16
 8005c7c:	3254      	adds	r2, #84	; 0x54
 8005c7e:	1852      	adds	r2, r2, r1
 8005c80:	1c6e      	adds	r6, r5, #1
 8005c82:	6023      	str	r3, [r4, #0]
 8005c84:	60e3      	str	r3, [r4, #12]
 8005c86:	60a3      	str	r3, [r4, #8]
 8005c88:	7013      	strb	r3, [r2, #0]
 8005c8a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c8c:	4b55      	ldr	r3, [pc, #340]	; (8005de4 <_svfiprintf_r+0x1ec>)
 8005c8e:	2205      	movs	r2, #5
 8005c90:	0018      	movs	r0, r3
 8005c92:	7831      	ldrb	r1, [r6, #0]
 8005c94:	9305      	str	r3, [sp, #20]
 8005c96:	f000 fa41 	bl	800611c <memchr>
 8005c9a:	1c75      	adds	r5, r6, #1
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d11f      	bne.n	8005ce0 <_svfiprintf_r+0xe8>
 8005ca0:	6822      	ldr	r2, [r4, #0]
 8005ca2:	06d3      	lsls	r3, r2, #27
 8005ca4:	d504      	bpl.n	8005cb0 <_svfiprintf_r+0xb8>
 8005ca6:	2353      	movs	r3, #83	; 0x53
 8005ca8:	a904      	add	r1, sp, #16
 8005caa:	185b      	adds	r3, r3, r1
 8005cac:	2120      	movs	r1, #32
 8005cae:	7019      	strb	r1, [r3, #0]
 8005cb0:	0713      	lsls	r3, r2, #28
 8005cb2:	d504      	bpl.n	8005cbe <_svfiprintf_r+0xc6>
 8005cb4:	2353      	movs	r3, #83	; 0x53
 8005cb6:	a904      	add	r1, sp, #16
 8005cb8:	185b      	adds	r3, r3, r1
 8005cba:	212b      	movs	r1, #43	; 0x2b
 8005cbc:	7019      	strb	r1, [r3, #0]
 8005cbe:	7833      	ldrb	r3, [r6, #0]
 8005cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8005cc2:	d016      	beq.n	8005cf2 <_svfiprintf_r+0xfa>
 8005cc4:	0035      	movs	r5, r6
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	200a      	movs	r0, #10
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	782a      	ldrb	r2, [r5, #0]
 8005cce:	1c6e      	adds	r6, r5, #1
 8005cd0:	3a30      	subs	r2, #48	; 0x30
 8005cd2:	2a09      	cmp	r2, #9
 8005cd4:	d94e      	bls.n	8005d74 <_svfiprintf_r+0x17c>
 8005cd6:	2900      	cmp	r1, #0
 8005cd8:	d111      	bne.n	8005cfe <_svfiprintf_r+0x106>
 8005cda:	e017      	b.n	8005d0c <_svfiprintf_r+0x114>
 8005cdc:	3501      	adds	r5, #1
 8005cde:	e7af      	b.n	8005c40 <_svfiprintf_r+0x48>
 8005ce0:	9b05      	ldr	r3, [sp, #20]
 8005ce2:	6822      	ldr	r2, [r4, #0]
 8005ce4:	1ac0      	subs	r0, r0, r3
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4083      	lsls	r3, r0
 8005cea:	4313      	orrs	r3, r2
 8005cec:	002e      	movs	r6, r5
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	e7cc      	b.n	8005c8c <_svfiprintf_r+0x94>
 8005cf2:	9b07      	ldr	r3, [sp, #28]
 8005cf4:	1d19      	adds	r1, r3, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	9107      	str	r1, [sp, #28]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	db01      	blt.n	8005d02 <_svfiprintf_r+0x10a>
 8005cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d00:	e004      	b.n	8005d0c <_svfiprintf_r+0x114>
 8005d02:	425b      	negs	r3, r3
 8005d04:	60e3      	str	r3, [r4, #12]
 8005d06:	2302      	movs	r3, #2
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	6023      	str	r3, [r4, #0]
 8005d0c:	782b      	ldrb	r3, [r5, #0]
 8005d0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005d10:	d10a      	bne.n	8005d28 <_svfiprintf_r+0x130>
 8005d12:	786b      	ldrb	r3, [r5, #1]
 8005d14:	2b2a      	cmp	r3, #42	; 0x2a
 8005d16:	d135      	bne.n	8005d84 <_svfiprintf_r+0x18c>
 8005d18:	9b07      	ldr	r3, [sp, #28]
 8005d1a:	3502      	adds	r5, #2
 8005d1c:	1d1a      	adds	r2, r3, #4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	9207      	str	r2, [sp, #28]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	db2b      	blt.n	8005d7e <_svfiprintf_r+0x186>
 8005d26:	9309      	str	r3, [sp, #36]	; 0x24
 8005d28:	4e2f      	ldr	r6, [pc, #188]	; (8005de8 <_svfiprintf_r+0x1f0>)
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	0030      	movs	r0, r6
 8005d2e:	7829      	ldrb	r1, [r5, #0]
 8005d30:	f000 f9f4 	bl	800611c <memchr>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d006      	beq.n	8005d46 <_svfiprintf_r+0x14e>
 8005d38:	2340      	movs	r3, #64	; 0x40
 8005d3a:	1b80      	subs	r0, r0, r6
 8005d3c:	4083      	lsls	r3, r0
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	3501      	adds	r5, #1
 8005d42:	4313      	orrs	r3, r2
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	7829      	ldrb	r1, [r5, #0]
 8005d48:	2206      	movs	r2, #6
 8005d4a:	4828      	ldr	r0, [pc, #160]	; (8005dec <_svfiprintf_r+0x1f4>)
 8005d4c:	1c6e      	adds	r6, r5, #1
 8005d4e:	7621      	strb	r1, [r4, #24]
 8005d50:	f000 f9e4 	bl	800611c <memchr>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d03c      	beq.n	8005dd2 <_svfiprintf_r+0x1da>
 8005d58:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <_svfiprintf_r+0x1f8>)
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d125      	bne.n	8005daa <_svfiprintf_r+0x1b2>
 8005d5e:	2207      	movs	r2, #7
 8005d60:	9b07      	ldr	r3, [sp, #28]
 8005d62:	3307      	adds	r3, #7
 8005d64:	4393      	bics	r3, r2
 8005d66:	3308      	adds	r3, #8
 8005d68:	9307      	str	r3, [sp, #28]
 8005d6a:	6963      	ldr	r3, [r4, #20]
 8005d6c:	9a04      	ldr	r2, [sp, #16]
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	6163      	str	r3, [r4, #20]
 8005d72:	e764      	b.n	8005c3e <_svfiprintf_r+0x46>
 8005d74:	4343      	muls	r3, r0
 8005d76:	0035      	movs	r5, r6
 8005d78:	2101      	movs	r1, #1
 8005d7a:	189b      	adds	r3, r3, r2
 8005d7c:	e7a6      	b.n	8005ccc <_svfiprintf_r+0xd4>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	425b      	negs	r3, r3
 8005d82:	e7d0      	b.n	8005d26 <_svfiprintf_r+0x12e>
 8005d84:	2300      	movs	r3, #0
 8005d86:	200a      	movs	r0, #10
 8005d88:	001a      	movs	r2, r3
 8005d8a:	3501      	adds	r5, #1
 8005d8c:	6063      	str	r3, [r4, #4]
 8005d8e:	7829      	ldrb	r1, [r5, #0]
 8005d90:	1c6e      	adds	r6, r5, #1
 8005d92:	3930      	subs	r1, #48	; 0x30
 8005d94:	2909      	cmp	r1, #9
 8005d96:	d903      	bls.n	8005da0 <_svfiprintf_r+0x1a8>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0c5      	beq.n	8005d28 <_svfiprintf_r+0x130>
 8005d9c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d9e:	e7c3      	b.n	8005d28 <_svfiprintf_r+0x130>
 8005da0:	4342      	muls	r2, r0
 8005da2:	0035      	movs	r5, r6
 8005da4:	2301      	movs	r3, #1
 8005da6:	1852      	adds	r2, r2, r1
 8005da8:	e7f1      	b.n	8005d8e <_svfiprintf_r+0x196>
 8005daa:	aa07      	add	r2, sp, #28
 8005dac:	9200      	str	r2, [sp, #0]
 8005dae:	0021      	movs	r1, r4
 8005db0:	003a      	movs	r2, r7
 8005db2:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <_svfiprintf_r+0x1fc>)
 8005db4:	9803      	ldr	r0, [sp, #12]
 8005db6:	e000      	b.n	8005dba <_svfiprintf_r+0x1c2>
 8005db8:	bf00      	nop
 8005dba:	9004      	str	r0, [sp, #16]
 8005dbc:	9b04      	ldr	r3, [sp, #16]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	d1d3      	bne.n	8005d6a <_svfiprintf_r+0x172>
 8005dc2:	89bb      	ldrh	r3, [r7, #12]
 8005dc4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005dc6:	065b      	lsls	r3, r3, #25
 8005dc8:	d400      	bmi.n	8005dcc <_svfiprintf_r+0x1d4>
 8005dca:	e72c      	b.n	8005c26 <_svfiprintf_r+0x2e>
 8005dcc:	2001      	movs	r0, #1
 8005dce:	4240      	negs	r0, r0
 8005dd0:	e729      	b.n	8005c26 <_svfiprintf_r+0x2e>
 8005dd2:	aa07      	add	r2, sp, #28
 8005dd4:	9200      	str	r2, [sp, #0]
 8005dd6:	0021      	movs	r1, r4
 8005dd8:	003a      	movs	r2, r7
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <_svfiprintf_r+0x1fc>)
 8005ddc:	9803      	ldr	r0, [sp, #12]
 8005dde:	f000 f87b 	bl	8005ed8 <_printf_i>
 8005de2:	e7ea      	b.n	8005dba <_svfiprintf_r+0x1c2>
 8005de4:	0800c0f9 	.word	0x0800c0f9
 8005de8:	0800c0ff 	.word	0x0800c0ff
 8005dec:	0800c103 	.word	0x0800c103
 8005df0:	00000000 	.word	0x00000000
 8005df4:	08005b35 	.word	0x08005b35

08005df8 <_printf_common>:
 8005df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dfa:	0016      	movs	r6, r2
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	688a      	ldr	r2, [r1, #8]
 8005e00:	690b      	ldr	r3, [r1, #16]
 8005e02:	000c      	movs	r4, r1
 8005e04:	9000      	str	r0, [sp, #0]
 8005e06:	4293      	cmp	r3, r2
 8005e08:	da00      	bge.n	8005e0c <_printf_common+0x14>
 8005e0a:	0013      	movs	r3, r2
 8005e0c:	0022      	movs	r2, r4
 8005e0e:	6033      	str	r3, [r6, #0]
 8005e10:	3243      	adds	r2, #67	; 0x43
 8005e12:	7812      	ldrb	r2, [r2, #0]
 8005e14:	2a00      	cmp	r2, #0
 8005e16:	d001      	beq.n	8005e1c <_printf_common+0x24>
 8005e18:	3301      	adds	r3, #1
 8005e1a:	6033      	str	r3, [r6, #0]
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	069b      	lsls	r3, r3, #26
 8005e20:	d502      	bpl.n	8005e28 <_printf_common+0x30>
 8005e22:	6833      	ldr	r3, [r6, #0]
 8005e24:	3302      	adds	r3, #2
 8005e26:	6033      	str	r3, [r6, #0]
 8005e28:	6822      	ldr	r2, [r4, #0]
 8005e2a:	2306      	movs	r3, #6
 8005e2c:	0015      	movs	r5, r2
 8005e2e:	401d      	ands	r5, r3
 8005e30:	421a      	tst	r2, r3
 8005e32:	d027      	beq.n	8005e84 <_printf_common+0x8c>
 8005e34:	0023      	movs	r3, r4
 8005e36:	3343      	adds	r3, #67	; 0x43
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	1e5a      	subs	r2, r3, #1
 8005e3c:	4193      	sbcs	r3, r2
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	0692      	lsls	r2, r2, #26
 8005e42:	d430      	bmi.n	8005ea6 <_printf_common+0xae>
 8005e44:	0022      	movs	r2, r4
 8005e46:	9901      	ldr	r1, [sp, #4]
 8005e48:	9800      	ldr	r0, [sp, #0]
 8005e4a:	9d08      	ldr	r5, [sp, #32]
 8005e4c:	3243      	adds	r2, #67	; 0x43
 8005e4e:	47a8      	blx	r5
 8005e50:	3001      	adds	r0, #1
 8005e52:	d025      	beq.n	8005ea0 <_printf_common+0xa8>
 8005e54:	2206      	movs	r2, #6
 8005e56:	6823      	ldr	r3, [r4, #0]
 8005e58:	2500      	movs	r5, #0
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d105      	bne.n	8005e6c <_printf_common+0x74>
 8005e60:	6833      	ldr	r3, [r6, #0]
 8005e62:	68e5      	ldr	r5, [r4, #12]
 8005e64:	1aed      	subs	r5, r5, r3
 8005e66:	43eb      	mvns	r3, r5
 8005e68:	17db      	asrs	r3, r3, #31
 8005e6a:	401d      	ands	r5, r3
 8005e6c:	68a3      	ldr	r3, [r4, #8]
 8005e6e:	6922      	ldr	r2, [r4, #16]
 8005e70:	4293      	cmp	r3, r2
 8005e72:	dd01      	ble.n	8005e78 <_printf_common+0x80>
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	18ed      	adds	r5, r5, r3
 8005e78:	2600      	movs	r6, #0
 8005e7a:	42b5      	cmp	r5, r6
 8005e7c:	d120      	bne.n	8005ec0 <_printf_common+0xc8>
 8005e7e:	2000      	movs	r0, #0
 8005e80:	e010      	b.n	8005ea4 <_printf_common+0xac>
 8005e82:	3501      	adds	r5, #1
 8005e84:	68e3      	ldr	r3, [r4, #12]
 8005e86:	6832      	ldr	r2, [r6, #0]
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	42ab      	cmp	r3, r5
 8005e8c:	ddd2      	ble.n	8005e34 <_printf_common+0x3c>
 8005e8e:	0022      	movs	r2, r4
 8005e90:	2301      	movs	r3, #1
 8005e92:	9901      	ldr	r1, [sp, #4]
 8005e94:	9800      	ldr	r0, [sp, #0]
 8005e96:	9f08      	ldr	r7, [sp, #32]
 8005e98:	3219      	adds	r2, #25
 8005e9a:	47b8      	blx	r7
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d1f0      	bne.n	8005e82 <_printf_common+0x8a>
 8005ea0:	2001      	movs	r0, #1
 8005ea2:	4240      	negs	r0, r0
 8005ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ea6:	2030      	movs	r0, #48	; 0x30
 8005ea8:	18e1      	adds	r1, r4, r3
 8005eaa:	3143      	adds	r1, #67	; 0x43
 8005eac:	7008      	strb	r0, [r1, #0]
 8005eae:	0021      	movs	r1, r4
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	3145      	adds	r1, #69	; 0x45
 8005eb4:	7809      	ldrb	r1, [r1, #0]
 8005eb6:	18a2      	adds	r2, r4, r2
 8005eb8:	3243      	adds	r2, #67	; 0x43
 8005eba:	3302      	adds	r3, #2
 8005ebc:	7011      	strb	r1, [r2, #0]
 8005ebe:	e7c1      	b.n	8005e44 <_printf_common+0x4c>
 8005ec0:	0022      	movs	r2, r4
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	9901      	ldr	r1, [sp, #4]
 8005ec6:	9800      	ldr	r0, [sp, #0]
 8005ec8:	9f08      	ldr	r7, [sp, #32]
 8005eca:	321a      	adds	r2, #26
 8005ecc:	47b8      	blx	r7
 8005ece:	3001      	adds	r0, #1
 8005ed0:	d0e6      	beq.n	8005ea0 <_printf_common+0xa8>
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7d1      	b.n	8005e7a <_printf_common+0x82>
	...

08005ed8 <_printf_i>:
 8005ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eda:	b08b      	sub	sp, #44	; 0x2c
 8005edc:	9206      	str	r2, [sp, #24]
 8005ede:	000a      	movs	r2, r1
 8005ee0:	3243      	adds	r2, #67	; 0x43
 8005ee2:	9307      	str	r3, [sp, #28]
 8005ee4:	9005      	str	r0, [sp, #20]
 8005ee6:	9204      	str	r2, [sp, #16]
 8005ee8:	7e0a      	ldrb	r2, [r1, #24]
 8005eea:	000c      	movs	r4, r1
 8005eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005eee:	2a78      	cmp	r2, #120	; 0x78
 8005ef0:	d809      	bhi.n	8005f06 <_printf_i+0x2e>
 8005ef2:	2a62      	cmp	r2, #98	; 0x62
 8005ef4:	d80b      	bhi.n	8005f0e <_printf_i+0x36>
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	d100      	bne.n	8005efc <_printf_i+0x24>
 8005efa:	e0be      	b.n	800607a <_printf_i+0x1a2>
 8005efc:	497c      	ldr	r1, [pc, #496]	; (80060f0 <_printf_i+0x218>)
 8005efe:	9103      	str	r1, [sp, #12]
 8005f00:	2a58      	cmp	r2, #88	; 0x58
 8005f02:	d100      	bne.n	8005f06 <_printf_i+0x2e>
 8005f04:	e093      	b.n	800602e <_printf_i+0x156>
 8005f06:	0026      	movs	r6, r4
 8005f08:	3642      	adds	r6, #66	; 0x42
 8005f0a:	7032      	strb	r2, [r6, #0]
 8005f0c:	e022      	b.n	8005f54 <_printf_i+0x7c>
 8005f0e:	0010      	movs	r0, r2
 8005f10:	3863      	subs	r0, #99	; 0x63
 8005f12:	2815      	cmp	r0, #21
 8005f14:	d8f7      	bhi.n	8005f06 <_printf_i+0x2e>
 8005f16:	f7fa f8f7 	bl	8000108 <__gnu_thumb1_case_shi>
 8005f1a:	0016      	.short	0x0016
 8005f1c:	fff6001f 	.word	0xfff6001f
 8005f20:	fff6fff6 	.word	0xfff6fff6
 8005f24:	001ffff6 	.word	0x001ffff6
 8005f28:	fff6fff6 	.word	0xfff6fff6
 8005f2c:	fff6fff6 	.word	0xfff6fff6
 8005f30:	003600a3 	.word	0x003600a3
 8005f34:	fff60083 	.word	0xfff60083
 8005f38:	00b4fff6 	.word	0x00b4fff6
 8005f3c:	0036fff6 	.word	0x0036fff6
 8005f40:	fff6fff6 	.word	0xfff6fff6
 8005f44:	0087      	.short	0x0087
 8005f46:	0026      	movs	r6, r4
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	3642      	adds	r6, #66	; 0x42
 8005f4c:	1d11      	adds	r1, r2, #4
 8005f4e:	6019      	str	r1, [r3, #0]
 8005f50:	6813      	ldr	r3, [r2, #0]
 8005f52:	7033      	strb	r3, [r6, #0]
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0a2      	b.n	800609e <_printf_i+0x1c6>
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	6809      	ldr	r1, [r1, #0]
 8005f5c:	1d02      	adds	r2, r0, #4
 8005f5e:	060d      	lsls	r5, r1, #24
 8005f60:	d50b      	bpl.n	8005f7a <_printf_i+0xa2>
 8005f62:	6805      	ldr	r5, [r0, #0]
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	2d00      	cmp	r5, #0
 8005f68:	da03      	bge.n	8005f72 <_printf_i+0x9a>
 8005f6a:	232d      	movs	r3, #45	; 0x2d
 8005f6c:	9a04      	ldr	r2, [sp, #16]
 8005f6e:	426d      	negs	r5, r5
 8005f70:	7013      	strb	r3, [r2, #0]
 8005f72:	4b5f      	ldr	r3, [pc, #380]	; (80060f0 <_printf_i+0x218>)
 8005f74:	270a      	movs	r7, #10
 8005f76:	9303      	str	r3, [sp, #12]
 8005f78:	e01b      	b.n	8005fb2 <_printf_i+0xda>
 8005f7a:	6805      	ldr	r5, [r0, #0]
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	0649      	lsls	r1, r1, #25
 8005f80:	d5f1      	bpl.n	8005f66 <_printf_i+0x8e>
 8005f82:	b22d      	sxth	r5, r5
 8005f84:	e7ef      	b.n	8005f66 <_printf_i+0x8e>
 8005f86:	680d      	ldr	r5, [r1, #0]
 8005f88:	6819      	ldr	r1, [r3, #0]
 8005f8a:	1d08      	adds	r0, r1, #4
 8005f8c:	6018      	str	r0, [r3, #0]
 8005f8e:	062e      	lsls	r6, r5, #24
 8005f90:	d501      	bpl.n	8005f96 <_printf_i+0xbe>
 8005f92:	680d      	ldr	r5, [r1, #0]
 8005f94:	e003      	b.n	8005f9e <_printf_i+0xc6>
 8005f96:	066d      	lsls	r5, r5, #25
 8005f98:	d5fb      	bpl.n	8005f92 <_printf_i+0xba>
 8005f9a:	680d      	ldr	r5, [r1, #0]
 8005f9c:	b2ad      	uxth	r5, r5
 8005f9e:	4b54      	ldr	r3, [pc, #336]	; (80060f0 <_printf_i+0x218>)
 8005fa0:	2708      	movs	r7, #8
 8005fa2:	9303      	str	r3, [sp, #12]
 8005fa4:	2a6f      	cmp	r2, #111	; 0x6f
 8005fa6:	d000      	beq.n	8005faa <_printf_i+0xd2>
 8005fa8:	3702      	adds	r7, #2
 8005faa:	0023      	movs	r3, r4
 8005fac:	2200      	movs	r2, #0
 8005fae:	3343      	adds	r3, #67	; 0x43
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	6863      	ldr	r3, [r4, #4]
 8005fb4:	60a3      	str	r3, [r4, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	db03      	blt.n	8005fc2 <_printf_i+0xea>
 8005fba:	2104      	movs	r1, #4
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	438a      	bics	r2, r1
 8005fc0:	6022      	str	r2, [r4, #0]
 8005fc2:	2d00      	cmp	r5, #0
 8005fc4:	d102      	bne.n	8005fcc <_printf_i+0xf4>
 8005fc6:	9e04      	ldr	r6, [sp, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00c      	beq.n	8005fe6 <_printf_i+0x10e>
 8005fcc:	9e04      	ldr	r6, [sp, #16]
 8005fce:	0028      	movs	r0, r5
 8005fd0:	0039      	movs	r1, r7
 8005fd2:	f7fa f929 	bl	8000228 <__aeabi_uidivmod>
 8005fd6:	9b03      	ldr	r3, [sp, #12]
 8005fd8:	3e01      	subs	r6, #1
 8005fda:	5c5b      	ldrb	r3, [r3, r1]
 8005fdc:	7033      	strb	r3, [r6, #0]
 8005fde:	002b      	movs	r3, r5
 8005fe0:	0005      	movs	r5, r0
 8005fe2:	429f      	cmp	r7, r3
 8005fe4:	d9f3      	bls.n	8005fce <_printf_i+0xf6>
 8005fe6:	2f08      	cmp	r7, #8
 8005fe8:	d109      	bne.n	8005ffe <_printf_i+0x126>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	07db      	lsls	r3, r3, #31
 8005fee:	d506      	bpl.n	8005ffe <_printf_i+0x126>
 8005ff0:	6862      	ldr	r2, [r4, #4]
 8005ff2:	6923      	ldr	r3, [r4, #16]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	dc02      	bgt.n	8005ffe <_printf_i+0x126>
 8005ff8:	2330      	movs	r3, #48	; 0x30
 8005ffa:	3e01      	subs	r6, #1
 8005ffc:	7033      	strb	r3, [r6, #0]
 8005ffe:	9b04      	ldr	r3, [sp, #16]
 8006000:	1b9b      	subs	r3, r3, r6
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	9b07      	ldr	r3, [sp, #28]
 8006006:	0021      	movs	r1, r4
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	9805      	ldr	r0, [sp, #20]
 800600c:	9b06      	ldr	r3, [sp, #24]
 800600e:	aa09      	add	r2, sp, #36	; 0x24
 8006010:	f7ff fef2 	bl	8005df8 <_printf_common>
 8006014:	3001      	adds	r0, #1
 8006016:	d147      	bne.n	80060a8 <_printf_i+0x1d0>
 8006018:	2001      	movs	r0, #1
 800601a:	4240      	negs	r0, r0
 800601c:	b00b      	add	sp, #44	; 0x2c
 800601e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006020:	2220      	movs	r2, #32
 8006022:	6809      	ldr	r1, [r1, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	6022      	str	r2, [r4, #0]
 8006028:	2278      	movs	r2, #120	; 0x78
 800602a:	4932      	ldr	r1, [pc, #200]	; (80060f4 <_printf_i+0x21c>)
 800602c:	9103      	str	r1, [sp, #12]
 800602e:	0021      	movs	r1, r4
 8006030:	3145      	adds	r1, #69	; 0x45
 8006032:	700a      	strb	r2, [r1, #0]
 8006034:	6819      	ldr	r1, [r3, #0]
 8006036:	6822      	ldr	r2, [r4, #0]
 8006038:	c920      	ldmia	r1!, {r5}
 800603a:	0610      	lsls	r0, r2, #24
 800603c:	d402      	bmi.n	8006044 <_printf_i+0x16c>
 800603e:	0650      	lsls	r0, r2, #25
 8006040:	d500      	bpl.n	8006044 <_printf_i+0x16c>
 8006042:	b2ad      	uxth	r5, r5
 8006044:	6019      	str	r1, [r3, #0]
 8006046:	07d3      	lsls	r3, r2, #31
 8006048:	d502      	bpl.n	8006050 <_printf_i+0x178>
 800604a:	2320      	movs	r3, #32
 800604c:	4313      	orrs	r3, r2
 800604e:	6023      	str	r3, [r4, #0]
 8006050:	2710      	movs	r7, #16
 8006052:	2d00      	cmp	r5, #0
 8006054:	d1a9      	bne.n	8005faa <_printf_i+0xd2>
 8006056:	2220      	movs	r2, #32
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	4393      	bics	r3, r2
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	e7a4      	b.n	8005faa <_printf_i+0xd2>
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	680d      	ldr	r5, [r1, #0]
 8006064:	1d10      	adds	r0, r2, #4
 8006066:	6949      	ldr	r1, [r1, #20]
 8006068:	6018      	str	r0, [r3, #0]
 800606a:	6813      	ldr	r3, [r2, #0]
 800606c:	062e      	lsls	r6, r5, #24
 800606e:	d501      	bpl.n	8006074 <_printf_i+0x19c>
 8006070:	6019      	str	r1, [r3, #0]
 8006072:	e002      	b.n	800607a <_printf_i+0x1a2>
 8006074:	066d      	lsls	r5, r5, #25
 8006076:	d5fb      	bpl.n	8006070 <_printf_i+0x198>
 8006078:	8019      	strh	r1, [r3, #0]
 800607a:	2300      	movs	r3, #0
 800607c:	9e04      	ldr	r6, [sp, #16]
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	e7c0      	b.n	8006004 <_printf_i+0x12c>
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	1d11      	adds	r1, r2, #4
 8006086:	6019      	str	r1, [r3, #0]
 8006088:	6816      	ldr	r6, [r2, #0]
 800608a:	2100      	movs	r1, #0
 800608c:	0030      	movs	r0, r6
 800608e:	6862      	ldr	r2, [r4, #4]
 8006090:	f000 f844 	bl	800611c <memchr>
 8006094:	2800      	cmp	r0, #0
 8006096:	d001      	beq.n	800609c <_printf_i+0x1c4>
 8006098:	1b80      	subs	r0, r0, r6
 800609a:	6060      	str	r0, [r4, #4]
 800609c:	6863      	ldr	r3, [r4, #4]
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	2300      	movs	r3, #0
 80060a2:	9a04      	ldr	r2, [sp, #16]
 80060a4:	7013      	strb	r3, [r2, #0]
 80060a6:	e7ad      	b.n	8006004 <_printf_i+0x12c>
 80060a8:	0032      	movs	r2, r6
 80060aa:	6923      	ldr	r3, [r4, #16]
 80060ac:	9906      	ldr	r1, [sp, #24]
 80060ae:	9805      	ldr	r0, [sp, #20]
 80060b0:	9d07      	ldr	r5, [sp, #28]
 80060b2:	47a8      	blx	r5
 80060b4:	3001      	adds	r0, #1
 80060b6:	d0af      	beq.n	8006018 <_printf_i+0x140>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	079b      	lsls	r3, r3, #30
 80060bc:	d415      	bmi.n	80060ea <_printf_i+0x212>
 80060be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c0:	68e0      	ldr	r0, [r4, #12]
 80060c2:	4298      	cmp	r0, r3
 80060c4:	daaa      	bge.n	800601c <_printf_i+0x144>
 80060c6:	0018      	movs	r0, r3
 80060c8:	e7a8      	b.n	800601c <_printf_i+0x144>
 80060ca:	0022      	movs	r2, r4
 80060cc:	2301      	movs	r3, #1
 80060ce:	9906      	ldr	r1, [sp, #24]
 80060d0:	9805      	ldr	r0, [sp, #20]
 80060d2:	9e07      	ldr	r6, [sp, #28]
 80060d4:	3219      	adds	r2, #25
 80060d6:	47b0      	blx	r6
 80060d8:	3001      	adds	r0, #1
 80060da:	d09d      	beq.n	8006018 <_printf_i+0x140>
 80060dc:	3501      	adds	r5, #1
 80060de:	68e3      	ldr	r3, [r4, #12]
 80060e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	42ab      	cmp	r3, r5
 80060e6:	dcf0      	bgt.n	80060ca <_printf_i+0x1f2>
 80060e8:	e7e9      	b.n	80060be <_printf_i+0x1e6>
 80060ea:	2500      	movs	r5, #0
 80060ec:	e7f7      	b.n	80060de <_printf_i+0x206>
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	0800c10a 	.word	0x0800c10a
 80060f4:	0800c11b 	.word	0x0800c11b

080060f8 <_sbrk_r>:
 80060f8:	2300      	movs	r3, #0
 80060fa:	b570      	push	{r4, r5, r6, lr}
 80060fc:	4d06      	ldr	r5, [pc, #24]	; (8006118 <_sbrk_r+0x20>)
 80060fe:	0004      	movs	r4, r0
 8006100:	0008      	movs	r0, r1
 8006102:	602b      	str	r3, [r5, #0]
 8006104:	f7fd fca6 	bl	8003a54 <_sbrk>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d103      	bne.n	8006114 <_sbrk_r+0x1c>
 800610c:	682b      	ldr	r3, [r5, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d000      	beq.n	8006114 <_sbrk_r+0x1c>
 8006112:	6023      	str	r3, [r4, #0]
 8006114:	bd70      	pop	{r4, r5, r6, pc}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	20000614 	.word	0x20000614

0800611c <memchr>:
 800611c:	b2c9      	uxtb	r1, r1
 800611e:	1882      	adds	r2, r0, r2
 8006120:	4290      	cmp	r0, r2
 8006122:	d101      	bne.n	8006128 <memchr+0xc>
 8006124:	2000      	movs	r0, #0
 8006126:	4770      	bx	lr
 8006128:	7803      	ldrb	r3, [r0, #0]
 800612a:	428b      	cmp	r3, r1
 800612c:	d0fb      	beq.n	8006126 <memchr+0xa>
 800612e:	3001      	adds	r0, #1
 8006130:	e7f6      	b.n	8006120 <memchr+0x4>

08006132 <_realloc_r>:
 8006132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006134:	0007      	movs	r7, r0
 8006136:	000e      	movs	r6, r1
 8006138:	0014      	movs	r4, r2
 800613a:	2900      	cmp	r1, #0
 800613c:	d105      	bne.n	800614a <_realloc_r+0x18>
 800613e:	0011      	movs	r1, r2
 8006140:	f7ff fc66 	bl	8005a10 <_malloc_r>
 8006144:	0005      	movs	r5, r0
 8006146:	0028      	movs	r0, r5
 8006148:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800614a:	2a00      	cmp	r2, #0
 800614c:	d103      	bne.n	8006156 <_realloc_r+0x24>
 800614e:	f7ff fbf3 	bl	8005938 <_free_r>
 8006152:	0025      	movs	r5, r4
 8006154:	e7f7      	b.n	8006146 <_realloc_r+0x14>
 8006156:	f000 f81b 	bl	8006190 <_malloc_usable_size_r>
 800615a:	9001      	str	r0, [sp, #4]
 800615c:	4284      	cmp	r4, r0
 800615e:	d803      	bhi.n	8006168 <_realloc_r+0x36>
 8006160:	0035      	movs	r5, r6
 8006162:	0843      	lsrs	r3, r0, #1
 8006164:	42a3      	cmp	r3, r4
 8006166:	d3ee      	bcc.n	8006146 <_realloc_r+0x14>
 8006168:	0021      	movs	r1, r4
 800616a:	0038      	movs	r0, r7
 800616c:	f7ff fc50 	bl	8005a10 <_malloc_r>
 8006170:	1e05      	subs	r5, r0, #0
 8006172:	d0e8      	beq.n	8006146 <_realloc_r+0x14>
 8006174:	9b01      	ldr	r3, [sp, #4]
 8006176:	0022      	movs	r2, r4
 8006178:	429c      	cmp	r4, r3
 800617a:	d900      	bls.n	800617e <_realloc_r+0x4c>
 800617c:	001a      	movs	r2, r3
 800617e:	0031      	movs	r1, r6
 8006180:	0028      	movs	r0, r5
 8006182:	f7ff fbcf 	bl	8005924 <memcpy>
 8006186:	0031      	movs	r1, r6
 8006188:	0038      	movs	r0, r7
 800618a:	f7ff fbd5 	bl	8005938 <_free_r>
 800618e:	e7da      	b.n	8006146 <_realloc_r+0x14>

08006190 <_malloc_usable_size_r>:
 8006190:	1f0b      	subs	r3, r1, #4
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	1f18      	subs	r0, r3, #4
 8006196:	2b00      	cmp	r3, #0
 8006198:	da01      	bge.n	800619e <_malloc_usable_size_r+0xe>
 800619a:	580b      	ldr	r3, [r1, r0]
 800619c:	18c0      	adds	r0, r0, r3
 800619e:	4770      	bx	lr

080061a0 <cosf>:
 80061a0:	b507      	push	{r0, r1, r2, lr}
 80061a2:	4a18      	ldr	r2, [pc, #96]	; (8006204 <cosf+0x64>)
 80061a4:	0043      	lsls	r3, r0, #1
 80061a6:	2100      	movs	r1, #0
 80061a8:	085b      	lsrs	r3, r3, #1
 80061aa:	4293      	cmp	r3, r2
 80061ac:	dd14      	ble.n	80061d8 <cosf+0x38>
 80061ae:	22ff      	movs	r2, #255	; 0xff
 80061b0:	05d2      	lsls	r2, r2, #23
 80061b2:	4293      	cmp	r3, r2
 80061b4:	db03      	blt.n	80061be <cosf+0x1e>
 80061b6:	1c01      	adds	r1, r0, #0
 80061b8:	f7fa ff32 	bl	8001020 <__aeabi_fsub>
 80061bc:	bd0e      	pop	{r1, r2, r3, pc}
 80061be:	4669      	mov	r1, sp
 80061c0:	f000 f94e 	bl	8006460 <__ieee754_rem_pio2f>
 80061c4:	2203      	movs	r2, #3
 80061c6:	4002      	ands	r2, r0
 80061c8:	2a01      	cmp	r2, #1
 80061ca:	d008      	beq.n	80061de <cosf+0x3e>
 80061cc:	2a02      	cmp	r2, #2
 80061ce:	d00e      	beq.n	80061ee <cosf+0x4e>
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	d111      	bne.n	80061f8 <cosf+0x58>
 80061d4:	9901      	ldr	r1, [sp, #4]
 80061d6:	9800      	ldr	r0, [sp, #0]
 80061d8:	f000 f84e 	bl	8006278 <__kernel_cosf>
 80061dc:	e7ee      	b.n	80061bc <cosf+0x1c>
 80061de:	9901      	ldr	r1, [sp, #4]
 80061e0:	9800      	ldr	r0, [sp, #0]
 80061e2:	f000 f8c9 	bl	8006378 <__kernel_sinf>
 80061e6:	2380      	movs	r3, #128	; 0x80
 80061e8:	061b      	lsls	r3, r3, #24
 80061ea:	18c0      	adds	r0, r0, r3
 80061ec:	e7e6      	b.n	80061bc <cosf+0x1c>
 80061ee:	9901      	ldr	r1, [sp, #4]
 80061f0:	9800      	ldr	r0, [sp, #0]
 80061f2:	f000 f841 	bl	8006278 <__kernel_cosf>
 80061f6:	e7f6      	b.n	80061e6 <cosf+0x46>
 80061f8:	2201      	movs	r2, #1
 80061fa:	9901      	ldr	r1, [sp, #4]
 80061fc:	9800      	ldr	r0, [sp, #0]
 80061fe:	f000 f8bb 	bl	8006378 <__kernel_sinf>
 8006202:	e7db      	b.n	80061bc <cosf+0x1c>
 8006204:	3f490fd8 	.word	0x3f490fd8

08006208 <sinf>:
 8006208:	b507      	push	{r0, r1, r2, lr}
 800620a:	4a1a      	ldr	r2, [pc, #104]	; (8006274 <sinf+0x6c>)
 800620c:	0043      	lsls	r3, r0, #1
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	4293      	cmp	r3, r2
 8006212:	dc04      	bgt.n	800621e <sinf+0x16>
 8006214:	2200      	movs	r2, #0
 8006216:	2100      	movs	r1, #0
 8006218:	f000 f8ae 	bl	8006378 <__kernel_sinf>
 800621c:	e006      	b.n	800622c <sinf+0x24>
 800621e:	22ff      	movs	r2, #255	; 0xff
 8006220:	05d2      	lsls	r2, r2, #23
 8006222:	4293      	cmp	r3, r2
 8006224:	db03      	blt.n	800622e <sinf+0x26>
 8006226:	1c01      	adds	r1, r0, #0
 8006228:	f7fa fefa 	bl	8001020 <__aeabi_fsub>
 800622c:	bd0e      	pop	{r1, r2, r3, pc}
 800622e:	4669      	mov	r1, sp
 8006230:	f000 f916 	bl	8006460 <__ieee754_rem_pio2f>
 8006234:	2303      	movs	r3, #3
 8006236:	4018      	ands	r0, r3
 8006238:	2801      	cmp	r0, #1
 800623a:	d007      	beq.n	800624c <sinf+0x44>
 800623c:	2802      	cmp	r0, #2
 800623e:	d00a      	beq.n	8006256 <sinf+0x4e>
 8006240:	2800      	cmp	r0, #0
 8006242:	d111      	bne.n	8006268 <sinf+0x60>
 8006244:	2201      	movs	r2, #1
 8006246:	9901      	ldr	r1, [sp, #4]
 8006248:	9800      	ldr	r0, [sp, #0]
 800624a:	e7e5      	b.n	8006218 <sinf+0x10>
 800624c:	9901      	ldr	r1, [sp, #4]
 800624e:	9800      	ldr	r0, [sp, #0]
 8006250:	f000 f812 	bl	8006278 <__kernel_cosf>
 8006254:	e7ea      	b.n	800622c <sinf+0x24>
 8006256:	2201      	movs	r2, #1
 8006258:	9901      	ldr	r1, [sp, #4]
 800625a:	9800      	ldr	r0, [sp, #0]
 800625c:	f000 f88c 	bl	8006378 <__kernel_sinf>
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	061b      	lsls	r3, r3, #24
 8006264:	18c0      	adds	r0, r0, r3
 8006266:	e7e1      	b.n	800622c <sinf+0x24>
 8006268:	9901      	ldr	r1, [sp, #4]
 800626a:	9800      	ldr	r0, [sp, #0]
 800626c:	f000 f804 	bl	8006278 <__kernel_cosf>
 8006270:	e7f6      	b.n	8006260 <sinf+0x58>
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	3f490fd8 	.word	0x3f490fd8

08006278 <__kernel_cosf>:
 8006278:	23c8      	movs	r3, #200	; 0xc8
 800627a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800627c:	0044      	lsls	r4, r0, #1
 800627e:	1c06      	adds	r6, r0, #0
 8006280:	9101      	str	r1, [sp, #4]
 8006282:	0864      	lsrs	r4, r4, #1
 8006284:	059b      	lsls	r3, r3, #22
 8006286:	429c      	cmp	r4, r3
 8006288:	da03      	bge.n	8006292 <__kernel_cosf+0x1a>
 800628a:	f7fb f869 	bl	8001360 <__aeabi_f2iz>
 800628e:	2800      	cmp	r0, #0
 8006290:	d05d      	beq.n	800634e <__kernel_cosf+0xd6>
 8006292:	1c31      	adds	r1, r6, #0
 8006294:	1c30      	adds	r0, r6, #0
 8006296:	f7fa fd75 	bl	8000d84 <__aeabi_fmul>
 800629a:	21fc      	movs	r1, #252	; 0xfc
 800629c:	0589      	lsls	r1, r1, #22
 800629e:	1c05      	adds	r5, r0, #0
 80062a0:	f7fa fd70 	bl	8000d84 <__aeabi_fmul>
 80062a4:	492b      	ldr	r1, [pc, #172]	; (8006354 <__kernel_cosf+0xdc>)
 80062a6:	1c07      	adds	r7, r0, #0
 80062a8:	1c28      	adds	r0, r5, #0
 80062aa:	f7fa fd6b 	bl	8000d84 <__aeabi_fmul>
 80062ae:	492a      	ldr	r1, [pc, #168]	; (8006358 <__kernel_cosf+0xe0>)
 80062b0:	f7fa f9fe 	bl	80006b0 <__aeabi_fadd>
 80062b4:	1c29      	adds	r1, r5, #0
 80062b6:	f7fa fd65 	bl	8000d84 <__aeabi_fmul>
 80062ba:	4928      	ldr	r1, [pc, #160]	; (800635c <__kernel_cosf+0xe4>)
 80062bc:	f7fa feb0 	bl	8001020 <__aeabi_fsub>
 80062c0:	1c29      	adds	r1, r5, #0
 80062c2:	f7fa fd5f 	bl	8000d84 <__aeabi_fmul>
 80062c6:	4926      	ldr	r1, [pc, #152]	; (8006360 <__kernel_cosf+0xe8>)
 80062c8:	f7fa f9f2 	bl	80006b0 <__aeabi_fadd>
 80062cc:	1c29      	adds	r1, r5, #0
 80062ce:	f7fa fd59 	bl	8000d84 <__aeabi_fmul>
 80062d2:	4924      	ldr	r1, [pc, #144]	; (8006364 <__kernel_cosf+0xec>)
 80062d4:	f7fa fea4 	bl	8001020 <__aeabi_fsub>
 80062d8:	1c29      	adds	r1, r5, #0
 80062da:	f7fa fd53 	bl	8000d84 <__aeabi_fmul>
 80062de:	4922      	ldr	r1, [pc, #136]	; (8006368 <__kernel_cosf+0xf0>)
 80062e0:	f7fa f9e6 	bl	80006b0 <__aeabi_fadd>
 80062e4:	1c29      	adds	r1, r5, #0
 80062e6:	f7fa fd4d 	bl	8000d84 <__aeabi_fmul>
 80062ea:	1c29      	adds	r1, r5, #0
 80062ec:	f7fa fd4a 	bl	8000d84 <__aeabi_fmul>
 80062f0:	9901      	ldr	r1, [sp, #4]
 80062f2:	1c05      	adds	r5, r0, #0
 80062f4:	1c30      	adds	r0, r6, #0
 80062f6:	f7fa fd45 	bl	8000d84 <__aeabi_fmul>
 80062fa:	1c01      	adds	r1, r0, #0
 80062fc:	1c28      	adds	r0, r5, #0
 80062fe:	f7fa fe8f 	bl	8001020 <__aeabi_fsub>
 8006302:	4b1a      	ldr	r3, [pc, #104]	; (800636c <__kernel_cosf+0xf4>)
 8006304:	1c05      	adds	r5, r0, #0
 8006306:	429c      	cmp	r4, r3
 8006308:	dc09      	bgt.n	800631e <__kernel_cosf+0xa6>
 800630a:	1c01      	adds	r1, r0, #0
 800630c:	1c38      	adds	r0, r7, #0
 800630e:	f7fa fe87 	bl	8001020 <__aeabi_fsub>
 8006312:	1c01      	adds	r1, r0, #0
 8006314:	20fe      	movs	r0, #254	; 0xfe
 8006316:	0580      	lsls	r0, r0, #22
 8006318:	f7fa fe82 	bl	8001020 <__aeabi_fsub>
 800631c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800631e:	4b14      	ldr	r3, [pc, #80]	; (8006370 <__kernel_cosf+0xf8>)
 8006320:	429c      	cmp	r4, r3
 8006322:	dc12      	bgt.n	800634a <__kernel_cosf+0xd2>
 8006324:	23ff      	movs	r3, #255	; 0xff
 8006326:	061b      	lsls	r3, r3, #24
 8006328:	18e4      	adds	r4, r4, r3
 800632a:	20fe      	movs	r0, #254	; 0xfe
 800632c:	1c21      	adds	r1, r4, #0
 800632e:	0580      	lsls	r0, r0, #22
 8006330:	f7fa fe76 	bl	8001020 <__aeabi_fsub>
 8006334:	1c21      	adds	r1, r4, #0
 8006336:	1c06      	adds	r6, r0, #0
 8006338:	1c38      	adds	r0, r7, #0
 800633a:	f7fa fe71 	bl	8001020 <__aeabi_fsub>
 800633e:	1c29      	adds	r1, r5, #0
 8006340:	f7fa fe6e 	bl	8001020 <__aeabi_fsub>
 8006344:	1c01      	adds	r1, r0, #0
 8006346:	1c30      	adds	r0, r6, #0
 8006348:	e7e6      	b.n	8006318 <__kernel_cosf+0xa0>
 800634a:	4c0a      	ldr	r4, [pc, #40]	; (8006374 <__kernel_cosf+0xfc>)
 800634c:	e7ed      	b.n	800632a <__kernel_cosf+0xb2>
 800634e:	20fe      	movs	r0, #254	; 0xfe
 8006350:	0580      	lsls	r0, r0, #22
 8006352:	e7e3      	b.n	800631c <__kernel_cosf+0xa4>
 8006354:	ad47d74e 	.word	0xad47d74e
 8006358:	310f74f6 	.word	0x310f74f6
 800635c:	3493f27c 	.word	0x3493f27c
 8006360:	37d00d01 	.word	0x37d00d01
 8006364:	3ab60b61 	.word	0x3ab60b61
 8006368:	3d2aaaab 	.word	0x3d2aaaab
 800636c:	3e999999 	.word	0x3e999999
 8006370:	3f480000 	.word	0x3f480000
 8006374:	3e900000 	.word	0x3e900000

08006378 <__kernel_sinf>:
 8006378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800637a:	9201      	str	r2, [sp, #4]
 800637c:	22c8      	movs	r2, #200	; 0xc8
 800637e:	0043      	lsls	r3, r0, #1
 8006380:	1c04      	adds	r4, r0, #0
 8006382:	9100      	str	r1, [sp, #0]
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	0592      	lsls	r2, r2, #22
 8006388:	4293      	cmp	r3, r2
 800638a:	da03      	bge.n	8006394 <__kernel_sinf+0x1c>
 800638c:	f7fa ffe8 	bl	8001360 <__aeabi_f2iz>
 8006390:	2800      	cmp	r0, #0
 8006392:	d035      	beq.n	8006400 <__kernel_sinf+0x88>
 8006394:	1c21      	adds	r1, r4, #0
 8006396:	1c20      	adds	r0, r4, #0
 8006398:	f7fa fcf4 	bl	8000d84 <__aeabi_fmul>
 800639c:	1c05      	adds	r5, r0, #0
 800639e:	1c01      	adds	r1, r0, #0
 80063a0:	1c20      	adds	r0, r4, #0
 80063a2:	f7fa fcef 	bl	8000d84 <__aeabi_fmul>
 80063a6:	4928      	ldr	r1, [pc, #160]	; (8006448 <__kernel_sinf+0xd0>)
 80063a8:	1c06      	adds	r6, r0, #0
 80063aa:	1c28      	adds	r0, r5, #0
 80063ac:	f7fa fcea 	bl	8000d84 <__aeabi_fmul>
 80063b0:	4926      	ldr	r1, [pc, #152]	; (800644c <__kernel_sinf+0xd4>)
 80063b2:	f7fa fe35 	bl	8001020 <__aeabi_fsub>
 80063b6:	1c29      	adds	r1, r5, #0
 80063b8:	f7fa fce4 	bl	8000d84 <__aeabi_fmul>
 80063bc:	4924      	ldr	r1, [pc, #144]	; (8006450 <__kernel_sinf+0xd8>)
 80063be:	f7fa f977 	bl	80006b0 <__aeabi_fadd>
 80063c2:	1c29      	adds	r1, r5, #0
 80063c4:	f7fa fcde 	bl	8000d84 <__aeabi_fmul>
 80063c8:	4922      	ldr	r1, [pc, #136]	; (8006454 <__kernel_sinf+0xdc>)
 80063ca:	f7fa fe29 	bl	8001020 <__aeabi_fsub>
 80063ce:	1c29      	adds	r1, r5, #0
 80063d0:	f7fa fcd8 	bl	8000d84 <__aeabi_fmul>
 80063d4:	4920      	ldr	r1, [pc, #128]	; (8006458 <__kernel_sinf+0xe0>)
 80063d6:	f7fa f96b 	bl	80006b0 <__aeabi_fadd>
 80063da:	9b01      	ldr	r3, [sp, #4]
 80063dc:	1c07      	adds	r7, r0, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d110      	bne.n	8006404 <__kernel_sinf+0x8c>
 80063e2:	1c01      	adds	r1, r0, #0
 80063e4:	1c28      	adds	r0, r5, #0
 80063e6:	f7fa fccd 	bl	8000d84 <__aeabi_fmul>
 80063ea:	491c      	ldr	r1, [pc, #112]	; (800645c <__kernel_sinf+0xe4>)
 80063ec:	f7fa fe18 	bl	8001020 <__aeabi_fsub>
 80063f0:	1c31      	adds	r1, r6, #0
 80063f2:	f7fa fcc7 	bl	8000d84 <__aeabi_fmul>
 80063f6:	1c01      	adds	r1, r0, #0
 80063f8:	1c20      	adds	r0, r4, #0
 80063fa:	f7fa f959 	bl	80006b0 <__aeabi_fadd>
 80063fe:	1c04      	adds	r4, r0, #0
 8006400:	1c20      	adds	r0, r4, #0
 8006402:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006404:	21fc      	movs	r1, #252	; 0xfc
 8006406:	9800      	ldr	r0, [sp, #0]
 8006408:	0589      	lsls	r1, r1, #22
 800640a:	f7fa fcbb 	bl	8000d84 <__aeabi_fmul>
 800640e:	1c39      	adds	r1, r7, #0
 8006410:	9001      	str	r0, [sp, #4]
 8006412:	1c30      	adds	r0, r6, #0
 8006414:	f7fa fcb6 	bl	8000d84 <__aeabi_fmul>
 8006418:	1c01      	adds	r1, r0, #0
 800641a:	9801      	ldr	r0, [sp, #4]
 800641c:	f7fa fe00 	bl	8001020 <__aeabi_fsub>
 8006420:	1c29      	adds	r1, r5, #0
 8006422:	f7fa fcaf 	bl	8000d84 <__aeabi_fmul>
 8006426:	9900      	ldr	r1, [sp, #0]
 8006428:	f7fa fdfa 	bl	8001020 <__aeabi_fsub>
 800642c:	490b      	ldr	r1, [pc, #44]	; (800645c <__kernel_sinf+0xe4>)
 800642e:	1c05      	adds	r5, r0, #0
 8006430:	1c30      	adds	r0, r6, #0
 8006432:	f7fa fca7 	bl	8000d84 <__aeabi_fmul>
 8006436:	1c01      	adds	r1, r0, #0
 8006438:	1c28      	adds	r0, r5, #0
 800643a:	f7fa f939 	bl	80006b0 <__aeabi_fadd>
 800643e:	1c01      	adds	r1, r0, #0
 8006440:	1c20      	adds	r0, r4, #0
 8006442:	f7fa fded 	bl	8001020 <__aeabi_fsub>
 8006446:	e7da      	b.n	80063fe <__kernel_sinf+0x86>
 8006448:	2f2ec9d3 	.word	0x2f2ec9d3
 800644c:	32d72f34 	.word	0x32d72f34
 8006450:	3638ef1b 	.word	0x3638ef1b
 8006454:	39500d01 	.word	0x39500d01
 8006458:	3c088889 	.word	0x3c088889
 800645c:	3e2aaaab 	.word	0x3e2aaaab

08006460 <__ieee754_rem_pio2f>:
 8006460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006462:	4ba0      	ldr	r3, [pc, #640]	; (80066e4 <__ieee754_rem_pio2f+0x284>)
 8006464:	b08b      	sub	sp, #44	; 0x2c
 8006466:	0045      	lsls	r5, r0, #1
 8006468:	000c      	movs	r4, r1
 800646a:	9005      	str	r0, [sp, #20]
 800646c:	086d      	lsrs	r5, r5, #1
 800646e:	429d      	cmp	r5, r3
 8006470:	dc04      	bgt.n	800647c <__ieee754_rem_pio2f+0x1c>
 8006472:	2300      	movs	r3, #0
 8006474:	6008      	str	r0, [r1, #0]
 8006476:	604b      	str	r3, [r1, #4]
 8006478:	2700      	movs	r7, #0
 800647a:	e01a      	b.n	80064b2 <__ieee754_rem_pio2f+0x52>
 800647c:	4b9a      	ldr	r3, [pc, #616]	; (80066e8 <__ieee754_rem_pio2f+0x288>)
 800647e:	429d      	cmp	r5, r3
 8006480:	dc4a      	bgt.n	8006518 <__ieee754_rem_pio2f+0xb8>
 8006482:	230f      	movs	r3, #15
 8006484:	4e99      	ldr	r6, [pc, #612]	; (80066ec <__ieee754_rem_pio2f+0x28c>)
 8006486:	499a      	ldr	r1, [pc, #616]	; (80066f0 <__ieee754_rem_pio2f+0x290>)
 8006488:	439d      	bics	r5, r3
 800648a:	2800      	cmp	r0, #0
 800648c:	dd22      	ble.n	80064d4 <__ieee754_rem_pio2f+0x74>
 800648e:	f7fa fdc7 	bl	8001020 <__aeabi_fsub>
 8006492:	1c07      	adds	r7, r0, #0
 8006494:	42b5      	cmp	r5, r6
 8006496:	d00f      	beq.n	80064b8 <__ieee754_rem_pio2f+0x58>
 8006498:	4996      	ldr	r1, [pc, #600]	; (80066f4 <__ieee754_rem_pio2f+0x294>)
 800649a:	f7fa fdc1 	bl	8001020 <__aeabi_fsub>
 800649e:	1c01      	adds	r1, r0, #0
 80064a0:	6020      	str	r0, [r4, #0]
 80064a2:	1c38      	adds	r0, r7, #0
 80064a4:	f7fa fdbc 	bl	8001020 <__aeabi_fsub>
 80064a8:	4992      	ldr	r1, [pc, #584]	; (80066f4 <__ieee754_rem_pio2f+0x294>)
 80064aa:	f7fa fdb9 	bl	8001020 <__aeabi_fsub>
 80064ae:	2701      	movs	r7, #1
 80064b0:	6060      	str	r0, [r4, #4]
 80064b2:	0038      	movs	r0, r7
 80064b4:	b00b      	add	sp, #44	; 0x2c
 80064b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b8:	498f      	ldr	r1, [pc, #572]	; (80066f8 <__ieee754_rem_pio2f+0x298>)
 80064ba:	f7fa fdb1 	bl	8001020 <__aeabi_fsub>
 80064be:	498f      	ldr	r1, [pc, #572]	; (80066fc <__ieee754_rem_pio2f+0x29c>)
 80064c0:	1c05      	adds	r5, r0, #0
 80064c2:	f7fa fdad 	bl	8001020 <__aeabi_fsub>
 80064c6:	1c01      	adds	r1, r0, #0
 80064c8:	6020      	str	r0, [r4, #0]
 80064ca:	1c28      	adds	r0, r5, #0
 80064cc:	f7fa fda8 	bl	8001020 <__aeabi_fsub>
 80064d0:	498a      	ldr	r1, [pc, #552]	; (80066fc <__ieee754_rem_pio2f+0x29c>)
 80064d2:	e7ea      	b.n	80064aa <__ieee754_rem_pio2f+0x4a>
 80064d4:	f7fa f8ec 	bl	80006b0 <__aeabi_fadd>
 80064d8:	1c07      	adds	r7, r0, #0
 80064da:	42b5      	cmp	r5, r6
 80064dc:	d00e      	beq.n	80064fc <__ieee754_rem_pio2f+0x9c>
 80064de:	4985      	ldr	r1, [pc, #532]	; (80066f4 <__ieee754_rem_pio2f+0x294>)
 80064e0:	f7fa f8e6 	bl	80006b0 <__aeabi_fadd>
 80064e4:	1c01      	adds	r1, r0, #0
 80064e6:	6020      	str	r0, [r4, #0]
 80064e8:	1c38      	adds	r0, r7, #0
 80064ea:	f7fa fd99 	bl	8001020 <__aeabi_fsub>
 80064ee:	4981      	ldr	r1, [pc, #516]	; (80066f4 <__ieee754_rem_pio2f+0x294>)
 80064f0:	f7fa f8de 	bl	80006b0 <__aeabi_fadd>
 80064f4:	2701      	movs	r7, #1
 80064f6:	6060      	str	r0, [r4, #4]
 80064f8:	427f      	negs	r7, r7
 80064fa:	e7da      	b.n	80064b2 <__ieee754_rem_pio2f+0x52>
 80064fc:	497e      	ldr	r1, [pc, #504]	; (80066f8 <__ieee754_rem_pio2f+0x298>)
 80064fe:	f7fa f8d7 	bl	80006b0 <__aeabi_fadd>
 8006502:	497e      	ldr	r1, [pc, #504]	; (80066fc <__ieee754_rem_pio2f+0x29c>)
 8006504:	1c05      	adds	r5, r0, #0
 8006506:	f7fa f8d3 	bl	80006b0 <__aeabi_fadd>
 800650a:	1c01      	adds	r1, r0, #0
 800650c:	6020      	str	r0, [r4, #0]
 800650e:	1c28      	adds	r0, r5, #0
 8006510:	f7fa fd86 	bl	8001020 <__aeabi_fsub>
 8006514:	4979      	ldr	r1, [pc, #484]	; (80066fc <__ieee754_rem_pio2f+0x29c>)
 8006516:	e7eb      	b.n	80064f0 <__ieee754_rem_pio2f+0x90>
 8006518:	4b79      	ldr	r3, [pc, #484]	; (8006700 <__ieee754_rem_pio2f+0x2a0>)
 800651a:	429d      	cmp	r5, r3
 800651c:	dd00      	ble.n	8006520 <__ieee754_rem_pio2f+0xc0>
 800651e:	e091      	b.n	8006644 <__ieee754_rem_pio2f+0x1e4>
 8006520:	f000 f8fa 	bl	8006718 <fabsf>
 8006524:	4977      	ldr	r1, [pc, #476]	; (8006704 <__ieee754_rem_pio2f+0x2a4>)
 8006526:	1c06      	adds	r6, r0, #0
 8006528:	f7fa fc2c 	bl	8000d84 <__aeabi_fmul>
 800652c:	21fc      	movs	r1, #252	; 0xfc
 800652e:	0589      	lsls	r1, r1, #22
 8006530:	f7fa f8be 	bl	80006b0 <__aeabi_fadd>
 8006534:	f7fa ff14 	bl	8001360 <__aeabi_f2iz>
 8006538:	0007      	movs	r7, r0
 800653a:	f7fa ff31 	bl	80013a0 <__aeabi_i2f>
 800653e:	496c      	ldr	r1, [pc, #432]	; (80066f0 <__ieee754_rem_pio2f+0x290>)
 8006540:	9003      	str	r0, [sp, #12]
 8006542:	f7fa fc1f 	bl	8000d84 <__aeabi_fmul>
 8006546:	1c01      	adds	r1, r0, #0
 8006548:	1c30      	adds	r0, r6, #0
 800654a:	f7fa fd69 	bl	8001020 <__aeabi_fsub>
 800654e:	4969      	ldr	r1, [pc, #420]	; (80066f4 <__ieee754_rem_pio2f+0x294>)
 8006550:	9002      	str	r0, [sp, #8]
 8006552:	9803      	ldr	r0, [sp, #12]
 8006554:	f7fa fc16 	bl	8000d84 <__aeabi_fmul>
 8006558:	1c06      	adds	r6, r0, #0
 800655a:	2f1f      	cmp	r7, #31
 800655c:	dc0d      	bgt.n	800657a <__ieee754_rem_pio2f+0x11a>
 800655e:	23ff      	movs	r3, #255	; 0xff
 8006560:	0029      	movs	r1, r5
 8006562:	1e7a      	subs	r2, r7, #1
 8006564:	4399      	bics	r1, r3
 8006566:	4b68      	ldr	r3, [pc, #416]	; (8006708 <__ieee754_rem_pio2f+0x2a8>)
 8006568:	0092      	lsls	r2, r2, #2
 800656a:	58d3      	ldr	r3, [r2, r3]
 800656c:	4299      	cmp	r1, r3
 800656e:	d004      	beq.n	800657a <__ieee754_rem_pio2f+0x11a>
 8006570:	9802      	ldr	r0, [sp, #8]
 8006572:	1c31      	adds	r1, r6, #0
 8006574:	f7fa fd54 	bl	8001020 <__aeabi_fsub>
 8006578:	e00c      	b.n	8006594 <__ieee754_rem_pio2f+0x134>
 800657a:	9802      	ldr	r0, [sp, #8]
 800657c:	1c31      	adds	r1, r6, #0
 800657e:	f7fa fd4f 	bl	8001020 <__aeabi_fsub>
 8006582:	22ff      	movs	r2, #255	; 0xff
 8006584:	15eb      	asrs	r3, r5, #23
 8006586:	9304      	str	r3, [sp, #16]
 8006588:	0dc3      	lsrs	r3, r0, #23
 800658a:	4013      	ands	r3, r2
 800658c:	9a04      	ldr	r2, [sp, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b08      	cmp	r3, #8
 8006592:	dc01      	bgt.n	8006598 <__ieee754_rem_pio2f+0x138>
 8006594:	6020      	str	r0, [r4, #0]
 8006596:	e026      	b.n	80065e6 <__ieee754_rem_pio2f+0x186>
 8006598:	4957      	ldr	r1, [pc, #348]	; (80066f8 <__ieee754_rem_pio2f+0x298>)
 800659a:	9803      	ldr	r0, [sp, #12]
 800659c:	f7fa fbf2 	bl	8000d84 <__aeabi_fmul>
 80065a0:	1c06      	adds	r6, r0, #0
 80065a2:	1c01      	adds	r1, r0, #0
 80065a4:	9802      	ldr	r0, [sp, #8]
 80065a6:	f7fa fd3b 	bl	8001020 <__aeabi_fsub>
 80065aa:	1c01      	adds	r1, r0, #0
 80065ac:	1c05      	adds	r5, r0, #0
 80065ae:	9802      	ldr	r0, [sp, #8]
 80065b0:	f7fa fd36 	bl	8001020 <__aeabi_fsub>
 80065b4:	1c31      	adds	r1, r6, #0
 80065b6:	f7fa fd33 	bl	8001020 <__aeabi_fsub>
 80065ba:	4950      	ldr	r1, [pc, #320]	; (80066fc <__ieee754_rem_pio2f+0x29c>)
 80065bc:	1c06      	adds	r6, r0, #0
 80065be:	9803      	ldr	r0, [sp, #12]
 80065c0:	f7fa fbe0 	bl	8000d84 <__aeabi_fmul>
 80065c4:	1c31      	adds	r1, r6, #0
 80065c6:	f7fa fd2b 	bl	8001020 <__aeabi_fsub>
 80065ca:	1c01      	adds	r1, r0, #0
 80065cc:	1c06      	adds	r6, r0, #0
 80065ce:	1c28      	adds	r0, r5, #0
 80065d0:	f7fa fd26 	bl	8001020 <__aeabi_fsub>
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	0dc3      	lsrs	r3, r0, #23
 80065d8:	4013      	ands	r3, r2
 80065da:	9a04      	ldr	r2, [sp, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b19      	cmp	r3, #25
 80065e0:	dc15      	bgt.n	800660e <__ieee754_rem_pio2f+0x1ae>
 80065e2:	6020      	str	r0, [r4, #0]
 80065e4:	9502      	str	r5, [sp, #8]
 80065e6:	6825      	ldr	r5, [r4, #0]
 80065e8:	9802      	ldr	r0, [sp, #8]
 80065ea:	1c29      	adds	r1, r5, #0
 80065ec:	f7fa fd18 	bl	8001020 <__aeabi_fsub>
 80065f0:	1c31      	adds	r1, r6, #0
 80065f2:	f7fa fd15 	bl	8001020 <__aeabi_fsub>
 80065f6:	9b05      	ldr	r3, [sp, #20]
 80065f8:	6060      	str	r0, [r4, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	db00      	blt.n	8006600 <__ieee754_rem_pio2f+0x1a0>
 80065fe:	e758      	b.n	80064b2 <__ieee754_rem_pio2f+0x52>
 8006600:	2380      	movs	r3, #128	; 0x80
 8006602:	061b      	lsls	r3, r3, #24
 8006604:	18ed      	adds	r5, r5, r3
 8006606:	18c0      	adds	r0, r0, r3
 8006608:	6025      	str	r5, [r4, #0]
 800660a:	6060      	str	r0, [r4, #4]
 800660c:	e774      	b.n	80064f8 <__ieee754_rem_pio2f+0x98>
 800660e:	493f      	ldr	r1, [pc, #252]	; (800670c <__ieee754_rem_pio2f+0x2ac>)
 8006610:	9803      	ldr	r0, [sp, #12]
 8006612:	f7fa fbb7 	bl	8000d84 <__aeabi_fmul>
 8006616:	1c06      	adds	r6, r0, #0
 8006618:	1c01      	adds	r1, r0, #0
 800661a:	1c28      	adds	r0, r5, #0
 800661c:	f7fa fd00 	bl	8001020 <__aeabi_fsub>
 8006620:	1c01      	adds	r1, r0, #0
 8006622:	9002      	str	r0, [sp, #8]
 8006624:	1c28      	adds	r0, r5, #0
 8006626:	f7fa fcfb 	bl	8001020 <__aeabi_fsub>
 800662a:	1c31      	adds	r1, r6, #0
 800662c:	f7fa fcf8 	bl	8001020 <__aeabi_fsub>
 8006630:	4937      	ldr	r1, [pc, #220]	; (8006710 <__ieee754_rem_pio2f+0x2b0>)
 8006632:	1c05      	adds	r5, r0, #0
 8006634:	9803      	ldr	r0, [sp, #12]
 8006636:	f7fa fba5 	bl	8000d84 <__aeabi_fmul>
 800663a:	1c29      	adds	r1, r5, #0
 800663c:	f7fa fcf0 	bl	8001020 <__aeabi_fsub>
 8006640:	1c06      	adds	r6, r0, #0
 8006642:	e795      	b.n	8006570 <__ieee754_rem_pio2f+0x110>
 8006644:	23ff      	movs	r3, #255	; 0xff
 8006646:	05db      	lsls	r3, r3, #23
 8006648:	429d      	cmp	r5, r3
 800664a:	db05      	blt.n	8006658 <__ieee754_rem_pio2f+0x1f8>
 800664c:	1c01      	adds	r1, r0, #0
 800664e:	f7fa fce7 	bl	8001020 <__aeabi_fsub>
 8006652:	6060      	str	r0, [r4, #4]
 8006654:	6020      	str	r0, [r4, #0]
 8006656:	e70f      	b.n	8006478 <__ieee754_rem_pio2f+0x18>
 8006658:	15ee      	asrs	r6, r5, #23
 800665a:	3e86      	subs	r6, #134	; 0x86
 800665c:	05f3      	lsls	r3, r6, #23
 800665e:	1aed      	subs	r5, r5, r3
 8006660:	1c28      	adds	r0, r5, #0
 8006662:	f7fa fe7d 	bl	8001360 <__aeabi_f2iz>
 8006666:	f7fa fe9b 	bl	80013a0 <__aeabi_i2f>
 800666a:	1c01      	adds	r1, r0, #0
 800666c:	9007      	str	r0, [sp, #28]
 800666e:	1c28      	adds	r0, r5, #0
 8006670:	f7fa fcd6 	bl	8001020 <__aeabi_fsub>
 8006674:	2187      	movs	r1, #135	; 0x87
 8006676:	05c9      	lsls	r1, r1, #23
 8006678:	f7fa fb84 	bl	8000d84 <__aeabi_fmul>
 800667c:	1c07      	adds	r7, r0, #0
 800667e:	f7fa fe6f 	bl	8001360 <__aeabi_f2iz>
 8006682:	f7fa fe8d 	bl	80013a0 <__aeabi_i2f>
 8006686:	1c01      	adds	r1, r0, #0
 8006688:	9008      	str	r0, [sp, #32]
 800668a:	1c05      	adds	r5, r0, #0
 800668c:	1c38      	adds	r0, r7, #0
 800668e:	f7fa fcc7 	bl	8001020 <__aeabi_fsub>
 8006692:	2187      	movs	r1, #135	; 0x87
 8006694:	05c9      	lsls	r1, r1, #23
 8006696:	f7fa fb75 	bl	8000d84 <__aeabi_fmul>
 800669a:	2100      	movs	r1, #0
 800669c:	9009      	str	r0, [sp, #36]	; 0x24
 800669e:	f7f9 febf 	bl	8000420 <__aeabi_fcmpeq>
 80066a2:	2303      	movs	r3, #3
 80066a4:	2800      	cmp	r0, #0
 80066a6:	d006      	beq.n	80066b6 <__ieee754_rem_pio2f+0x256>
 80066a8:	2100      	movs	r1, #0
 80066aa:	1c28      	adds	r0, r5, #0
 80066ac:	f7f9 feb8 	bl	8000420 <__aeabi_fcmpeq>
 80066b0:	4243      	negs	r3, r0
 80066b2:	4143      	adcs	r3, r0
 80066b4:	3301      	adds	r3, #1
 80066b6:	4a17      	ldr	r2, [pc, #92]	; (8006714 <__ieee754_rem_pio2f+0x2b4>)
 80066b8:	0021      	movs	r1, r4
 80066ba:	9201      	str	r2, [sp, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	a807      	add	r0, sp, #28
 80066c0:	9200      	str	r2, [sp, #0]
 80066c2:	0032      	movs	r2, r6
 80066c4:	f000 f82c 	bl	8006720 <__kernel_rem_pio2f>
 80066c8:	9b05      	ldr	r3, [sp, #20]
 80066ca:	0007      	movs	r7, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	db00      	blt.n	80066d2 <__ieee754_rem_pio2f+0x272>
 80066d0:	e6ef      	b.n	80064b2 <__ieee754_rem_pio2f+0x52>
 80066d2:	2280      	movs	r2, #128	; 0x80
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	0612      	lsls	r2, r2, #24
 80066d8:	189b      	adds	r3, r3, r2
 80066da:	6023      	str	r3, [r4, #0]
 80066dc:	6863      	ldr	r3, [r4, #4]
 80066de:	189b      	adds	r3, r3, r2
 80066e0:	6063      	str	r3, [r4, #4]
 80066e2:	e709      	b.n	80064f8 <__ieee754_rem_pio2f+0x98>
 80066e4:	3f490fd8 	.word	0x3f490fd8
 80066e8:	4016cbe3 	.word	0x4016cbe3
 80066ec:	3fc90fd0 	.word	0x3fc90fd0
 80066f0:	3fc90f80 	.word	0x3fc90f80
 80066f4:	37354443 	.word	0x37354443
 80066f8:	37354400 	.word	0x37354400
 80066fc:	2e85a308 	.word	0x2e85a308
 8006700:	43490f80 	.word	0x43490f80
 8006704:	3f22f984 	.word	0x3f22f984
 8006708:	0800c12c 	.word	0x0800c12c
 800670c:	2e85a300 	.word	0x2e85a300
 8006710:	248d3132 	.word	0x248d3132
 8006714:	0800c1ac 	.word	0x0800c1ac

08006718 <fabsf>:
 8006718:	0040      	lsls	r0, r0, #1
 800671a:	0840      	lsrs	r0, r0, #1
 800671c:	4770      	bx	lr
	...

08006720 <__kernel_rem_pio2f>:
 8006720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006722:	b0dd      	sub	sp, #372	; 0x174
 8006724:	9206      	str	r2, [sp, #24]
 8006726:	9a62      	ldr	r2, [sp, #392]	; 0x188
 8006728:	9307      	str	r3, [sp, #28]
 800672a:	4bca      	ldr	r3, [pc, #808]	; (8006a54 <__kernel_rem_pio2f+0x334>)
 800672c:	0092      	lsls	r2, r2, #2
 800672e:	58d3      	ldr	r3, [r2, r3]
 8006730:	9009      	str	r0, [sp, #36]	; 0x24
 8006732:	9304      	str	r3, [sp, #16]
 8006734:	9b07      	ldr	r3, [sp, #28]
 8006736:	9102      	str	r1, [sp, #8]
 8006738:	3b01      	subs	r3, #1
 800673a:	9305      	str	r3, [sp, #20]
 800673c:	2300      	movs	r3, #0
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	9b06      	ldr	r3, [sp, #24]
 8006742:	3304      	adds	r3, #4
 8006744:	db07      	blt.n	8006756 <__kernel_rem_pio2f+0x36>
 8006746:	2107      	movs	r1, #7
 8006748:	9b06      	ldr	r3, [sp, #24]
 800674a:	1eda      	subs	r2, r3, #3
 800674c:	17d3      	asrs	r3, r2, #31
 800674e:	400b      	ands	r3, r1
 8006750:	189b      	adds	r3, r3, r2
 8006752:	10db      	asrs	r3, r3, #3
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	9b01      	ldr	r3, [sp, #4]
 8006758:	ae20      	add	r6, sp, #128	; 0x80
 800675a:	3301      	adds	r3, #1
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	9308      	str	r3, [sp, #32]
 8006760:	9a08      	ldr	r2, [sp, #32]
 8006762:	9b06      	ldr	r3, [sp, #24]
 8006764:	1a9b      	subs	r3, r3, r2
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	9a05      	ldr	r2, [sp, #20]
 800676a:	9b01      	ldr	r3, [sp, #4]
 800676c:	1a9d      	subs	r5, r3, r2
 800676e:	002c      	movs	r4, r5
 8006770:	9b04      	ldr	r3, [sp, #16]
 8006772:	189f      	adds	r7, r3, r2
 8006774:	1b63      	subs	r3, r4, r5
 8006776:	429f      	cmp	r7, r3
 8006778:	da0d      	bge.n	8006796 <__kernel_rem_pio2f+0x76>
 800677a:	9c07      	ldr	r4, [sp, #28]
 800677c:	af48      	add	r7, sp, #288	; 0x120
 800677e:	9b07      	ldr	r3, [sp, #28]
 8006780:	9a04      	ldr	r2, [sp, #16]
 8006782:	1ae3      	subs	r3, r4, r3
 8006784:	429a      	cmp	r2, r3
 8006786:	db25      	blt.n	80067d4 <__kernel_rem_pio2f+0xb4>
 8006788:	ab20      	add	r3, sp, #128	; 0x80
 800678a:	00a5      	lsls	r5, r4, #2
 800678c:	18ed      	adds	r5, r5, r3
 800678e:	2300      	movs	r3, #0
 8006790:	2600      	movs	r6, #0
 8006792:	9303      	str	r3, [sp, #12]
 8006794:	e016      	b.n	80067c4 <__kernel_rem_pio2f+0xa4>
 8006796:	2000      	movs	r0, #0
 8006798:	2c00      	cmp	r4, #0
 800679a:	db04      	blt.n	80067a6 <__kernel_rem_pio2f+0x86>
 800679c:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 800679e:	00a3      	lsls	r3, r4, #2
 80067a0:	58d0      	ldr	r0, [r2, r3]
 80067a2:	f7fa fdfd 	bl	80013a0 <__aeabi_i2f>
 80067a6:	c601      	stmia	r6!, {r0}
 80067a8:	3401      	adds	r4, #1
 80067aa:	e7e3      	b.n	8006774 <__kernel_rem_pio2f+0x54>
 80067ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067ae:	00b3      	lsls	r3, r6, #2
 80067b0:	6829      	ldr	r1, [r5, #0]
 80067b2:	58d0      	ldr	r0, [r2, r3]
 80067b4:	f7fa fae6 	bl	8000d84 <__aeabi_fmul>
 80067b8:	1c01      	adds	r1, r0, #0
 80067ba:	9803      	ldr	r0, [sp, #12]
 80067bc:	f7f9 ff78 	bl	80006b0 <__aeabi_fadd>
 80067c0:	3601      	adds	r6, #1
 80067c2:	9003      	str	r0, [sp, #12]
 80067c4:	9b05      	ldr	r3, [sp, #20]
 80067c6:	3d04      	subs	r5, #4
 80067c8:	429e      	cmp	r6, r3
 80067ca:	ddef      	ble.n	80067ac <__kernel_rem_pio2f+0x8c>
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	3401      	adds	r4, #1
 80067d0:	c708      	stmia	r7!, {r3}
 80067d2:	e7d4      	b.n	800677e <__kernel_rem_pio2f+0x5e>
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	aa0c      	add	r2, sp, #48	; 0x30
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	189b      	adds	r3, r3, r2
 80067dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	9a63      	ldr	r2, [sp, #396]	; 0x18c
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	18d3      	adds	r3, r2, r3
 80067e6:	9e04      	ldr	r6, [sp, #16]
 80067e8:	930a      	str	r3, [sp, #40]	; 0x28
 80067ea:	21f0      	movs	r1, #240	; 0xf0
 80067ec:	0035      	movs	r5, r6
 80067ee:	aa0c      	add	r2, sp, #48	; 0x30
 80067f0:	00b3      	lsls	r3, r6, #2
 80067f2:	1852      	adds	r2, r2, r1
 80067f4:	af0c      	add	r7, sp, #48	; 0x30
 80067f6:	58d4      	ldr	r4, [r2, r3]
 80067f8:	9701      	str	r7, [sp, #4]
 80067fa:	2d00      	cmp	r5, #0
 80067fc:	dc64      	bgt.n	80068c8 <__kernel_rem_pio2f+0x1a8>
 80067fe:	9900      	ldr	r1, [sp, #0]
 8006800:	1c20      	adds	r0, r4, #0
 8006802:	f000 fa37 	bl	8006c74 <scalbnf>
 8006806:	21f8      	movs	r1, #248	; 0xf8
 8006808:	0589      	lsls	r1, r1, #22
 800680a:	1c04      	adds	r4, r0, #0
 800680c:	f7fa faba 	bl	8000d84 <__aeabi_fmul>
 8006810:	f000 fa86 	bl	8006d20 <floorf>
 8006814:	2182      	movs	r1, #130	; 0x82
 8006816:	05c9      	lsls	r1, r1, #23
 8006818:	f7fa fab4 	bl	8000d84 <__aeabi_fmul>
 800681c:	1c01      	adds	r1, r0, #0
 800681e:	1c20      	adds	r0, r4, #0
 8006820:	f7fa fbfe 	bl	8001020 <__aeabi_fsub>
 8006824:	1c04      	adds	r4, r0, #0
 8006826:	f7fa fd9b 	bl	8001360 <__aeabi_f2iz>
 800682a:	9003      	str	r0, [sp, #12]
 800682c:	f7fa fdb8 	bl	80013a0 <__aeabi_i2f>
 8006830:	1c01      	adds	r1, r0, #0
 8006832:	1c20      	adds	r0, r4, #0
 8006834:	f7fa fbf4 	bl	8001020 <__aeabi_fsub>
 8006838:	9b00      	ldr	r3, [sp, #0]
 800683a:	1c04      	adds	r4, r0, #0
 800683c:	2b00      	cmp	r3, #0
 800683e:	dd65      	ble.n	800690c <__kernel_rem_pio2f+0x1ec>
 8006840:	2008      	movs	r0, #8
 8006842:	1e73      	subs	r3, r6, #1
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	aa0c      	add	r2, sp, #48	; 0x30
 8006848:	589a      	ldr	r2, [r3, r2]
 800684a:	9900      	ldr	r1, [sp, #0]
 800684c:	9d03      	ldr	r5, [sp, #12]
 800684e:	1a40      	subs	r0, r0, r1
 8006850:	0011      	movs	r1, r2
 8006852:	4101      	asrs	r1, r0
 8006854:	186d      	adds	r5, r5, r1
 8006856:	4081      	lsls	r1, r0
 8006858:	1a52      	subs	r2, r2, r1
 800685a:	a90c      	add	r1, sp, #48	; 0x30
 800685c:	505a      	str	r2, [r3, r1]
 800685e:	2307      	movs	r3, #7
 8006860:	9900      	ldr	r1, [sp, #0]
 8006862:	9503      	str	r5, [sp, #12]
 8006864:	1a5b      	subs	r3, r3, r1
 8006866:	411a      	asrs	r2, r3
 8006868:	9201      	str	r2, [sp, #4]
 800686a:	9b01      	ldr	r3, [sp, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	dd5e      	ble.n	800692e <__kernel_rem_pio2f+0x20e>
 8006870:	9b03      	ldr	r3, [sp, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	3301      	adds	r3, #1
 8006876:	9303      	str	r3, [sp, #12]
 8006878:	2301      	movs	r3, #1
 800687a:	2080      	movs	r0, #128	; 0x80
 800687c:	0015      	movs	r5, r2
 800687e:	21ff      	movs	r1, #255	; 0xff
 8006880:	469c      	mov	ip, r3
 8006882:	0040      	lsls	r0, r0, #1
 8006884:	4296      	cmp	r6, r2
 8006886:	dd00      	ble.n	800688a <__kernel_rem_pio2f+0x16a>
 8006888:	e084      	b.n	8006994 <__kernel_rem_pio2f+0x274>
 800688a:	9b00      	ldr	r3, [sp, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	dd05      	ble.n	800689c <__kernel_rem_pio2f+0x17c>
 8006890:	2b01      	cmp	r3, #1
 8006892:	d100      	bne.n	8006896 <__kernel_rem_pio2f+0x176>
 8006894:	e08e      	b.n	80069b4 <__kernel_rem_pio2f+0x294>
 8006896:	2b02      	cmp	r3, #2
 8006898:	d100      	bne.n	800689c <__kernel_rem_pio2f+0x17c>
 800689a:	e094      	b.n	80069c6 <__kernel_rem_pio2f+0x2a6>
 800689c:	9b01      	ldr	r3, [sp, #4]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d145      	bne.n	800692e <__kernel_rem_pio2f+0x20e>
 80068a2:	20fe      	movs	r0, #254	; 0xfe
 80068a4:	1c21      	adds	r1, r4, #0
 80068a6:	0580      	lsls	r0, r0, #22
 80068a8:	f7fa fbba 	bl	8001020 <__aeabi_fsub>
 80068ac:	1c04      	adds	r4, r0, #0
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	d03d      	beq.n	800692e <__kernel_rem_pio2f+0x20e>
 80068b2:	20fe      	movs	r0, #254	; 0xfe
 80068b4:	9900      	ldr	r1, [sp, #0]
 80068b6:	0580      	lsls	r0, r0, #22
 80068b8:	f000 f9dc 	bl	8006c74 <scalbnf>
 80068bc:	1c01      	adds	r1, r0, #0
 80068be:	1c20      	adds	r0, r4, #0
 80068c0:	f7fa fbae 	bl	8001020 <__aeabi_fsub>
 80068c4:	1c04      	adds	r4, r0, #0
 80068c6:	e032      	b.n	800692e <__kernel_rem_pio2f+0x20e>
 80068c8:	21ee      	movs	r1, #238	; 0xee
 80068ca:	1c20      	adds	r0, r4, #0
 80068cc:	0589      	lsls	r1, r1, #22
 80068ce:	f7fa fa59 	bl	8000d84 <__aeabi_fmul>
 80068d2:	f7fa fd45 	bl	8001360 <__aeabi_f2iz>
 80068d6:	f7fa fd63 	bl	80013a0 <__aeabi_i2f>
 80068da:	2187      	movs	r1, #135	; 0x87
 80068dc:	05c9      	lsls	r1, r1, #23
 80068de:	9003      	str	r0, [sp, #12]
 80068e0:	f7fa fa50 	bl	8000d84 <__aeabi_fmul>
 80068e4:	1c01      	adds	r1, r0, #0
 80068e6:	1c20      	adds	r0, r4, #0
 80068e8:	f7fa fb9a 	bl	8001020 <__aeabi_fsub>
 80068ec:	f7fa fd38 	bl	8001360 <__aeabi_f2iz>
 80068f0:	21f0      	movs	r1, #240	; 0xf0
 80068f2:	9b01      	ldr	r3, [sp, #4]
 80068f4:	3d01      	subs	r5, #1
 80068f6:	c301      	stmia	r3!, {r0}
 80068f8:	aa0c      	add	r2, sp, #48	; 0x30
 80068fa:	9301      	str	r3, [sp, #4]
 80068fc:	1852      	adds	r2, r2, r1
 80068fe:	00ab      	lsls	r3, r5, #2
 8006900:	58d1      	ldr	r1, [r2, r3]
 8006902:	9803      	ldr	r0, [sp, #12]
 8006904:	f7f9 fed4 	bl	80006b0 <__aeabi_fadd>
 8006908:	1c04      	adds	r4, r0, #0
 800690a:	e776      	b.n	80067fa <__kernel_rem_pio2f+0xda>
 800690c:	9b00      	ldr	r3, [sp, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d106      	bne.n	8006920 <__kernel_rem_pio2f+0x200>
 8006912:	1e73      	subs	r3, r6, #1
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	aa0c      	add	r2, sp, #48	; 0x30
 8006918:	589b      	ldr	r3, [r3, r2]
 800691a:	11db      	asrs	r3, r3, #7
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	e7a4      	b.n	800686a <__kernel_rem_pio2f+0x14a>
 8006920:	21fc      	movs	r1, #252	; 0xfc
 8006922:	0589      	lsls	r1, r1, #22
 8006924:	f7f9 fda0 	bl	8000468 <__aeabi_fcmpge>
 8006928:	2800      	cmp	r0, #0
 800692a:	d130      	bne.n	800698e <__kernel_rem_pio2f+0x26e>
 800692c:	9001      	str	r0, [sp, #4]
 800692e:	2100      	movs	r1, #0
 8006930:	1c20      	adds	r0, r4, #0
 8006932:	f7f9 fd75 	bl	8000420 <__aeabi_fcmpeq>
 8006936:	2800      	cmp	r0, #0
 8006938:	d100      	bne.n	800693c <__kernel_rem_pio2f+0x21c>
 800693a:	e08f      	b.n	8006a5c <__kernel_rem_pio2f+0x33c>
 800693c:	1e77      	subs	r7, r6, #1
 800693e:	003b      	movs	r3, r7
 8006940:	2200      	movs	r2, #0
 8006942:	9904      	ldr	r1, [sp, #16]
 8006944:	428b      	cmp	r3, r1
 8006946:	da44      	bge.n	80069d2 <__kernel_rem_pio2f+0x2b2>
 8006948:	2a00      	cmp	r2, #0
 800694a:	d05c      	beq.n	8006a06 <__kernel_rem_pio2f+0x2e6>
 800694c:	9b00      	ldr	r3, [sp, #0]
 800694e:	aa0c      	add	r2, sp, #48	; 0x30
 8006950:	3b08      	subs	r3, #8
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	00bb      	lsls	r3, r7, #2
 8006956:	589b      	ldr	r3, [r3, r2]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d079      	beq.n	8006a50 <__kernel_rem_pio2f+0x330>
 800695c:	20fe      	movs	r0, #254	; 0xfe
 800695e:	9900      	ldr	r1, [sp, #0]
 8006960:	0580      	lsls	r0, r0, #22
 8006962:	f000 f987 	bl	8006c74 <scalbnf>
 8006966:	003d      	movs	r5, r7
 8006968:	1c04      	adds	r4, r0, #0
 800696a:	2d00      	cmp	r5, #0
 800696c:	db00      	blt.n	8006970 <__kernel_rem_pio2f+0x250>
 800696e:	e0ac      	b.n	8006aca <__kernel_rem_pio2f+0x3aa>
 8006970:	003c      	movs	r4, r7
 8006972:	4b39      	ldr	r3, [pc, #228]	; (8006a58 <__kernel_rem_pio2f+0x338>)
 8006974:	9306      	str	r3, [sp, #24]
 8006976:	2c00      	cmp	r4, #0
 8006978:	da00      	bge.n	800697c <__kernel_rem_pio2f+0x25c>
 800697a:	e0d5      	b.n	8006b28 <__kernel_rem_pio2f+0x408>
 800697c:	00a3      	lsls	r3, r4, #2
 800697e:	aa48      	add	r2, sp, #288	; 0x120
 8006980:	189b      	adds	r3, r3, r2
 8006982:	9305      	str	r3, [sp, #20]
 8006984:	1b3b      	subs	r3, r7, r4
 8006986:	2600      	movs	r6, #0
 8006988:	2500      	movs	r5, #0
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	e0be      	b.n	8006b0c <__kernel_rem_pio2f+0x3ec>
 800698e:	2302      	movs	r3, #2
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	e76d      	b.n	8006870 <__kernel_rem_pio2f+0x150>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2d00      	cmp	r5, #0
 8006998:	d108      	bne.n	80069ac <__kernel_rem_pio2f+0x28c>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <__kernel_rem_pio2f+0x284>
 800699e:	1ac3      	subs	r3, r0, r3
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	4663      	mov	r3, ip
 80069a4:	001d      	movs	r5, r3
 80069a6:	3201      	adds	r2, #1
 80069a8:	3704      	adds	r7, #4
 80069aa:	e76b      	b.n	8006884 <__kernel_rem_pio2f+0x164>
 80069ac:	1acb      	subs	r3, r1, r3
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	002b      	movs	r3, r5
 80069b2:	e7f7      	b.n	80069a4 <__kernel_rem_pio2f+0x284>
 80069b4:	217f      	movs	r1, #127	; 0x7f
 80069b6:	1e73      	subs	r3, r6, #1
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	aa0c      	add	r2, sp, #48	; 0x30
 80069bc:	589a      	ldr	r2, [r3, r2]
 80069be:	400a      	ands	r2, r1
 80069c0:	a90c      	add	r1, sp, #48	; 0x30
 80069c2:	505a      	str	r2, [r3, r1]
 80069c4:	e76a      	b.n	800689c <__kernel_rem_pio2f+0x17c>
 80069c6:	1e73      	subs	r3, r6, #1
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	aa0c      	add	r2, sp, #48	; 0x30
 80069cc:	213f      	movs	r1, #63	; 0x3f
 80069ce:	589a      	ldr	r2, [r3, r2]
 80069d0:	e7f5      	b.n	80069be <__kernel_rem_pio2f+0x29e>
 80069d2:	0099      	lsls	r1, r3, #2
 80069d4:	a80c      	add	r0, sp, #48	; 0x30
 80069d6:	5809      	ldr	r1, [r1, r0]
 80069d8:	3b01      	subs	r3, #1
 80069da:	430a      	orrs	r2, r1
 80069dc:	e7b1      	b.n	8006942 <__kernel_rem_pio2f+0x222>
 80069de:	3301      	adds	r3, #1
 80069e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80069e2:	009a      	lsls	r2, r3, #2
 80069e4:	4252      	negs	r2, r2
 80069e6:	588a      	ldr	r2, [r1, r2]
 80069e8:	2a00      	cmp	r2, #0
 80069ea:	d0f8      	beq.n	80069de <__kernel_rem_pio2f+0x2be>
 80069ec:	9a07      	ldr	r2, [sp, #28]
 80069ee:	18f3      	adds	r3, r6, r3
 80069f0:	18b4      	adds	r4, r6, r2
 80069f2:	00a4      	lsls	r4, r4, #2
 80069f4:	aa20      	add	r2, sp, #128	; 0x80
 80069f6:	1c75      	adds	r5, r6, #1
 80069f8:	1914      	adds	r4, r2, r4
 80069fa:	9301      	str	r3, [sp, #4]
 80069fc:	9b01      	ldr	r3, [sp, #4]
 80069fe:	42ab      	cmp	r3, r5
 8006a00:	da03      	bge.n	8006a0a <__kernel_rem_pio2f+0x2ea>
 8006a02:	001e      	movs	r6, r3
 8006a04:	e6f1      	b.n	80067ea <__kernel_rem_pio2f+0xca>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e7ea      	b.n	80069e0 <__kernel_rem_pio2f+0x2c0>
 8006a0a:	00ab      	lsls	r3, r5, #2
 8006a0c:	9303      	str	r3, [sp, #12]
 8006a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a10:	00aa      	lsls	r2, r5, #2
 8006a12:	5898      	ldr	r0, [r3, r2]
 8006a14:	f7fa fcc4 	bl	80013a0 <__aeabi_i2f>
 8006a18:	2700      	movs	r7, #0
 8006a1a:	2600      	movs	r6, #0
 8006a1c:	6020      	str	r0, [r4, #0]
 8006a1e:	9b05      	ldr	r3, [sp, #20]
 8006a20:	429f      	cmp	r7, r3
 8006a22:	dd07      	ble.n	8006a34 <__kernel_rem_pio2f+0x314>
 8006a24:	21f0      	movs	r1, #240	; 0xf0
 8006a26:	9a03      	ldr	r2, [sp, #12]
 8006a28:	ab0c      	add	r3, sp, #48	; 0x30
 8006a2a:	185b      	adds	r3, r3, r1
 8006a2c:	509e      	str	r6, [r3, r2]
 8006a2e:	3501      	adds	r5, #1
 8006a30:	3404      	adds	r4, #4
 8006a32:	e7e3      	b.n	80069fc <__kernel_rem_pio2f+0x2dc>
 8006a34:	00bb      	lsls	r3, r7, #2
 8006a36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a38:	425a      	negs	r2, r3
 8006a3a:	58c9      	ldr	r1, [r1, r3]
 8006a3c:	58a0      	ldr	r0, [r4, r2]
 8006a3e:	f7fa f9a1 	bl	8000d84 <__aeabi_fmul>
 8006a42:	1c01      	adds	r1, r0, #0
 8006a44:	1c30      	adds	r0, r6, #0
 8006a46:	f7f9 fe33 	bl	80006b0 <__aeabi_fadd>
 8006a4a:	3701      	adds	r7, #1
 8006a4c:	1c06      	adds	r6, r0, #0
 8006a4e:	e7e6      	b.n	8006a1e <__kernel_rem_pio2f+0x2fe>
 8006a50:	3f01      	subs	r7, #1
 8006a52:	e77b      	b.n	800694c <__kernel_rem_pio2f+0x22c>
 8006a54:	0800c4f0 	.word	0x0800c4f0
 8006a58:	0800c4c4 	.word	0x0800c4c4
 8006a5c:	9b08      	ldr	r3, [sp, #32]
 8006a5e:	9a06      	ldr	r2, [sp, #24]
 8006a60:	1c20      	adds	r0, r4, #0
 8006a62:	1a99      	subs	r1, r3, r2
 8006a64:	f000 f906 	bl	8006c74 <scalbnf>
 8006a68:	2187      	movs	r1, #135	; 0x87
 8006a6a:	05c9      	lsls	r1, r1, #23
 8006a6c:	1c04      	adds	r4, r0, #0
 8006a6e:	f7f9 fcfb 	bl	8000468 <__aeabi_fcmpge>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d021      	beq.n	8006aba <__kernel_rem_pio2f+0x39a>
 8006a76:	21ee      	movs	r1, #238	; 0xee
 8006a78:	1c20      	adds	r0, r4, #0
 8006a7a:	0589      	lsls	r1, r1, #22
 8006a7c:	f7fa f982 	bl	8000d84 <__aeabi_fmul>
 8006a80:	f7fa fc6e 	bl	8001360 <__aeabi_f2iz>
 8006a84:	f7fa fc8c 	bl	80013a0 <__aeabi_i2f>
 8006a88:	2187      	movs	r1, #135	; 0x87
 8006a8a:	05c9      	lsls	r1, r1, #23
 8006a8c:	1c05      	adds	r5, r0, #0
 8006a8e:	f7fa f979 	bl	8000d84 <__aeabi_fmul>
 8006a92:	1c01      	adds	r1, r0, #0
 8006a94:	1c20      	adds	r0, r4, #0
 8006a96:	f7fa fac3 	bl	8001020 <__aeabi_fsub>
 8006a9a:	f7fa fc61 	bl	8001360 <__aeabi_f2iz>
 8006a9e:	00b7      	lsls	r7, r6, #2
 8006aa0:	ab0c      	add	r3, sp, #48	; 0x30
 8006aa2:	51d8      	str	r0, [r3, r7]
 8006aa4:	9b00      	ldr	r3, [sp, #0]
 8006aa6:	1c28      	adds	r0, r5, #0
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	f7fa fc58 	bl	8001360 <__aeabi_f2iz>
 8006ab0:	1c77      	adds	r7, r6, #1
 8006ab2:	00bc      	lsls	r4, r7, #2
 8006ab4:	ab0c      	add	r3, sp, #48	; 0x30
 8006ab6:	5118      	str	r0, [r3, r4]
 8006ab8:	e750      	b.n	800695c <__kernel_rem_pio2f+0x23c>
 8006aba:	1c20      	adds	r0, r4, #0
 8006abc:	f7fa fc50 	bl	8001360 <__aeabi_f2iz>
 8006ac0:	00b5      	lsls	r5, r6, #2
 8006ac2:	ab0c      	add	r3, sp, #48	; 0x30
 8006ac4:	0037      	movs	r7, r6
 8006ac6:	5158      	str	r0, [r3, r5]
 8006ac8:	e748      	b.n	800695c <__kernel_rem_pio2f+0x23c>
 8006aca:	ab0c      	add	r3, sp, #48	; 0x30
 8006acc:	00ae      	lsls	r6, r5, #2
 8006ace:	58f0      	ldr	r0, [r6, r3]
 8006ad0:	f7fa fc66 	bl	80013a0 <__aeabi_i2f>
 8006ad4:	1c21      	adds	r1, r4, #0
 8006ad6:	f7fa f955 	bl	8000d84 <__aeabi_fmul>
 8006ada:	22f0      	movs	r2, #240	; 0xf0
 8006adc:	21ee      	movs	r1, #238	; 0xee
 8006ade:	ab0c      	add	r3, sp, #48	; 0x30
 8006ae0:	189b      	adds	r3, r3, r2
 8006ae2:	5198      	str	r0, [r3, r6]
 8006ae4:	0589      	lsls	r1, r1, #22
 8006ae6:	1c20      	adds	r0, r4, #0
 8006ae8:	f7fa f94c 	bl	8000d84 <__aeabi_fmul>
 8006aec:	3d01      	subs	r5, #1
 8006aee:	1c04      	adds	r4, r0, #0
 8006af0:	e73b      	b.n	800696a <__kernel_rem_pio2f+0x24a>
 8006af2:	9a05      	ldr	r2, [sp, #20]
 8006af4:	00ab      	lsls	r3, r5, #2
 8006af6:	58d1      	ldr	r1, [r2, r3]
 8006af8:	9a06      	ldr	r2, [sp, #24]
 8006afa:	3501      	adds	r5, #1
 8006afc:	5898      	ldr	r0, [r3, r2]
 8006afe:	f7fa f941 	bl	8000d84 <__aeabi_fmul>
 8006b02:	1c01      	adds	r1, r0, #0
 8006b04:	1c30      	adds	r0, r6, #0
 8006b06:	f7f9 fdd3 	bl	80006b0 <__aeabi_fadd>
 8006b0a:	1c06      	adds	r6, r0, #0
 8006b0c:	9b04      	ldr	r3, [sp, #16]
 8006b0e:	429d      	cmp	r5, r3
 8006b10:	dc02      	bgt.n	8006b18 <__kernel_rem_pio2f+0x3f8>
 8006b12:	9b00      	ldr	r3, [sp, #0]
 8006b14:	429d      	cmp	r5, r3
 8006b16:	ddec      	ble.n	8006af2 <__kernel_rem_pio2f+0x3d2>
 8006b18:	21a0      	movs	r1, #160	; 0xa0
 8006b1a:	9b00      	ldr	r3, [sp, #0]
 8006b1c:	aa0c      	add	r2, sp, #48	; 0x30
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	1852      	adds	r2, r2, r1
 8006b22:	50d6      	str	r6, [r2, r3]
 8006b24:	3c01      	subs	r4, #1
 8006b26:	e726      	b.n	8006976 <__kernel_rem_pio2f+0x256>
 8006b28:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	dc08      	bgt.n	8006b40 <__kernel_rem_pio2f+0x420>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	dc5a      	bgt.n	8006be8 <__kernel_rem_pio2f+0x4c8>
 8006b32:	d035      	beq.n	8006ba0 <__kernel_rem_pio2f+0x480>
 8006b34:	2007      	movs	r0, #7
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	4003      	ands	r3, r0
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	b05d      	add	sp, #372	; 0x174
 8006b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b40:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d1f6      	bne.n	8006b34 <__kernel_rem_pio2f+0x414>
 8006b46:	00bb      	lsls	r3, r7, #2
 8006b48:	aa34      	add	r2, sp, #208	; 0xd0
 8006b4a:	18d5      	adds	r5, r2, r3
 8006b4c:	002c      	movs	r4, r5
 8006b4e:	9700      	str	r7, [sp, #0]
 8006b50:	9b00      	ldr	r3, [sp, #0]
 8006b52:	3c04      	subs	r4, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dc51      	bgt.n	8006bfc <__kernel_rem_pio2f+0x4dc>
 8006b58:	9700      	str	r7, [sp, #0]
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	3d04      	subs	r5, #4
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	dc62      	bgt.n	8006c28 <__kernel_rem_pio2f+0x508>
 8006b62:	2000      	movs	r0, #0
 8006b64:	ac34      	add	r4, sp, #208	; 0xd0
 8006b66:	2f01      	cmp	r7, #1
 8006b68:	dc73      	bgt.n	8006c52 <__kernel_rem_pio2f+0x532>
 8006b6a:	9901      	ldr	r1, [sp, #4]
 8006b6c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8006b6e:	6863      	ldr	r3, [r4, #4]
 8006b70:	2900      	cmp	r1, #0
 8006b72:	d174      	bne.n	8006c5e <__kernel_rem_pio2f+0x53e>
 8006b74:	9902      	ldr	r1, [sp, #8]
 8006b76:	604b      	str	r3, [r1, #4]
 8006b78:	000b      	movs	r3, r1
 8006b7a:	600a      	str	r2, [r1, #0]
 8006b7c:	6098      	str	r0, [r3, #8]
 8006b7e:	e7d9      	b.n	8006b34 <__kernel_rem_pio2f+0x414>
 8006b80:	00bb      	lsls	r3, r7, #2
 8006b82:	5919      	ldr	r1, [r3, r4]
 8006b84:	f7f9 fd94 	bl	80006b0 <__aeabi_fadd>
 8006b88:	3f01      	subs	r7, #1
 8006b8a:	2f00      	cmp	r7, #0
 8006b8c:	daf8      	bge.n	8006b80 <__kernel_rem_pio2f+0x460>
 8006b8e:	9b01      	ldr	r3, [sp, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <__kernel_rem_pio2f+0x47a>
 8006b94:	2380      	movs	r3, #128	; 0x80
 8006b96:	061b      	lsls	r3, r3, #24
 8006b98:	18c0      	adds	r0, r0, r3
 8006b9a:	9b02      	ldr	r3, [sp, #8]
 8006b9c:	6018      	str	r0, [r3, #0]
 8006b9e:	e7c9      	b.n	8006b34 <__kernel_rem_pio2f+0x414>
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	ac34      	add	r4, sp, #208	; 0xd0
 8006ba4:	e7f1      	b.n	8006b8a <__kernel_rem_pio2f+0x46a>
 8006ba6:	00a3      	lsls	r3, r4, #2
 8006ba8:	5959      	ldr	r1, [r3, r5]
 8006baa:	f7f9 fd81 	bl	80006b0 <__aeabi_fadd>
 8006bae:	3c01      	subs	r4, #1
 8006bb0:	2c00      	cmp	r4, #0
 8006bb2:	daf8      	bge.n	8006ba6 <__kernel_rem_pio2f+0x486>
 8006bb4:	9a01      	ldr	r2, [sp, #4]
 8006bb6:	1c03      	adds	r3, r0, #0
 8006bb8:	2a00      	cmp	r2, #0
 8006bba:	d002      	beq.n	8006bc2 <__kernel_rem_pio2f+0x4a2>
 8006bbc:	2380      	movs	r3, #128	; 0x80
 8006bbe:	061b      	lsls	r3, r3, #24
 8006bc0:	18c3      	adds	r3, r0, r3
 8006bc2:	9a02      	ldr	r2, [sp, #8]
 8006bc4:	1c01      	adds	r1, r0, #0
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	9834      	ldr	r0, [sp, #208]	; 0xd0
 8006bca:	f7fa fa29 	bl	8001020 <__aeabi_fsub>
 8006bce:	2401      	movs	r4, #1
 8006bd0:	ad34      	add	r5, sp, #208	; 0xd0
 8006bd2:	42a7      	cmp	r7, r4
 8006bd4:	da0c      	bge.n	8006bf0 <__kernel_rem_pio2f+0x4d0>
 8006bd6:	9b01      	ldr	r3, [sp, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <__kernel_rem_pio2f+0x4c2>
 8006bdc:	2380      	movs	r3, #128	; 0x80
 8006bde:	061b      	lsls	r3, r3, #24
 8006be0:	18c0      	adds	r0, r0, r3
 8006be2:	9b02      	ldr	r3, [sp, #8]
 8006be4:	6058      	str	r0, [r3, #4]
 8006be6:	e7a5      	b.n	8006b34 <__kernel_rem_pio2f+0x414>
 8006be8:	003c      	movs	r4, r7
 8006bea:	2000      	movs	r0, #0
 8006bec:	ad34      	add	r5, sp, #208	; 0xd0
 8006bee:	e7df      	b.n	8006bb0 <__kernel_rem_pio2f+0x490>
 8006bf0:	00a3      	lsls	r3, r4, #2
 8006bf2:	5959      	ldr	r1, [r3, r5]
 8006bf4:	f7f9 fd5c 	bl	80006b0 <__aeabi_fadd>
 8006bf8:	3401      	adds	r4, #1
 8006bfa:	e7ea      	b.n	8006bd2 <__kernel_rem_pio2f+0x4b2>
 8006bfc:	9b00      	ldr	r3, [sp, #0]
 8006bfe:	6826      	ldr	r6, [r4, #0]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	6863      	ldr	r3, [r4, #4]
 8006c06:	1c30      	adds	r0, r6, #0
 8006c08:	1c19      	adds	r1, r3, #0
 8006c0a:	9304      	str	r3, [sp, #16]
 8006c0c:	f7f9 fd50 	bl	80006b0 <__aeabi_fadd>
 8006c10:	1c01      	adds	r1, r0, #0
 8006c12:	9005      	str	r0, [sp, #20]
 8006c14:	1c30      	adds	r0, r6, #0
 8006c16:	f7fa fa03 	bl	8001020 <__aeabi_fsub>
 8006c1a:	9904      	ldr	r1, [sp, #16]
 8006c1c:	f7f9 fd48 	bl	80006b0 <__aeabi_fadd>
 8006c20:	9b05      	ldr	r3, [sp, #20]
 8006c22:	6060      	str	r0, [r4, #4]
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	e793      	b.n	8006b50 <__kernel_rem_pio2f+0x430>
 8006c28:	682c      	ldr	r4, [r5, #0]
 8006c2a:	686e      	ldr	r6, [r5, #4]
 8006c2c:	9b00      	ldr	r3, [sp, #0]
 8006c2e:	1c31      	adds	r1, r6, #0
 8006c30:	3b01      	subs	r3, #1
 8006c32:	1c20      	adds	r0, r4, #0
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	f7f9 fd3b 	bl	80006b0 <__aeabi_fadd>
 8006c3a:	1c01      	adds	r1, r0, #0
 8006c3c:	9004      	str	r0, [sp, #16]
 8006c3e:	1c20      	adds	r0, r4, #0
 8006c40:	f7fa f9ee 	bl	8001020 <__aeabi_fsub>
 8006c44:	1c31      	adds	r1, r6, #0
 8006c46:	f7f9 fd33 	bl	80006b0 <__aeabi_fadd>
 8006c4a:	9b04      	ldr	r3, [sp, #16]
 8006c4c:	6068      	str	r0, [r5, #4]
 8006c4e:	602b      	str	r3, [r5, #0]
 8006c50:	e783      	b.n	8006b5a <__kernel_rem_pio2f+0x43a>
 8006c52:	00bb      	lsls	r3, r7, #2
 8006c54:	58e1      	ldr	r1, [r4, r3]
 8006c56:	f7f9 fd2b 	bl	80006b0 <__aeabi_fadd>
 8006c5a:	3f01      	subs	r7, #1
 8006c5c:	e783      	b.n	8006b66 <__kernel_rem_pio2f+0x446>
 8006c5e:	2180      	movs	r1, #128	; 0x80
 8006c60:	9c02      	ldr	r4, [sp, #8]
 8006c62:	0609      	lsls	r1, r1, #24
 8006c64:	185b      	adds	r3, r3, r1
 8006c66:	1852      	adds	r2, r2, r1
 8006c68:	6063      	str	r3, [r4, #4]
 8006c6a:	6022      	str	r2, [r4, #0]
 8006c6c:	0023      	movs	r3, r4
 8006c6e:	1840      	adds	r0, r0, r1
 8006c70:	e784      	b.n	8006b7c <__kernel_rem_pio2f+0x45c>
 8006c72:	46c0      	nop			; (mov r8, r8)

08006c74 <scalbnf>:
 8006c74:	0043      	lsls	r3, r0, #1
 8006c76:	b570      	push	{r4, r5, r6, lr}
 8006c78:	0002      	movs	r2, r0
 8006c7a:	000c      	movs	r4, r1
 8006c7c:	085d      	lsrs	r5, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d006      	beq.n	8006c90 <scalbnf+0x1c>
 8006c82:	21ff      	movs	r1, #255	; 0xff
 8006c84:	05c9      	lsls	r1, r1, #23
 8006c86:	428d      	cmp	r5, r1
 8006c88:	d303      	bcc.n	8006c92 <scalbnf+0x1e>
 8006c8a:	1c01      	adds	r1, r0, #0
 8006c8c:	f7f9 fd10 	bl	80006b0 <__aeabi_fadd>
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
 8006c92:	4208      	tst	r0, r1
 8006c94:	d118      	bne.n	8006cc8 <scalbnf+0x54>
 8006c96:	2198      	movs	r1, #152	; 0x98
 8006c98:	05c9      	lsls	r1, r1, #23
 8006c9a:	f7fa f873 	bl	8000d84 <__aeabi_fmul>
 8006c9e:	4b19      	ldr	r3, [pc, #100]	; (8006d04 <scalbnf+0x90>)
 8006ca0:	429c      	cmp	r4, r3
 8006ca2:	db0d      	blt.n	8006cc0 <scalbnf+0x4c>
 8006ca4:	0002      	movs	r2, r0
 8006ca6:	15c1      	asrs	r1, r0, #23
 8006ca8:	b2c9      	uxtb	r1, r1
 8006caa:	3919      	subs	r1, #25
 8006cac:	4b16      	ldr	r3, [pc, #88]	; (8006d08 <scalbnf+0x94>)
 8006cae:	429c      	cmp	r4, r3
 8006cb0:	dd0c      	ble.n	8006ccc <scalbnf+0x58>
 8006cb2:	4b16      	ldr	r3, [pc, #88]	; (8006d0c <scalbnf+0x98>)
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	da00      	bge.n	8006cba <scalbnf+0x46>
 8006cb8:	4b15      	ldr	r3, [pc, #84]	; (8006d10 <scalbnf+0x9c>)
 8006cba:	4914      	ldr	r1, [pc, #80]	; (8006d0c <scalbnf+0x98>)
 8006cbc:	1c18      	adds	r0, r3, #0
 8006cbe:	e000      	b.n	8006cc2 <scalbnf+0x4e>
 8006cc0:	4914      	ldr	r1, [pc, #80]	; (8006d14 <scalbnf+0xa0>)
 8006cc2:	f7fa f85f 	bl	8000d84 <__aeabi_fmul>
 8006cc6:	e7e3      	b.n	8006c90 <scalbnf+0x1c>
 8006cc8:	0e19      	lsrs	r1, r3, #24
 8006cca:	e7ef      	b.n	8006cac <scalbnf+0x38>
 8006ccc:	1909      	adds	r1, r1, r4
 8006cce:	29fe      	cmp	r1, #254	; 0xfe
 8006cd0:	dcef      	bgt.n	8006cb2 <scalbnf+0x3e>
 8006cd2:	2900      	cmp	r1, #0
 8006cd4:	dd04      	ble.n	8006ce0 <scalbnf+0x6c>
 8006cd6:	4810      	ldr	r0, [pc, #64]	; (8006d18 <scalbnf+0xa4>)
 8006cd8:	05c9      	lsls	r1, r1, #23
 8006cda:	4010      	ands	r0, r2
 8006cdc:	4308      	orrs	r0, r1
 8006cde:	e7d7      	b.n	8006c90 <scalbnf+0x1c>
 8006ce0:	000b      	movs	r3, r1
 8006ce2:	3316      	adds	r3, #22
 8006ce4:	da05      	bge.n	8006cf2 <scalbnf+0x7e>
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	; (8006d14 <scalbnf+0xa0>)
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	da00      	bge.n	8006cee <scalbnf+0x7a>
 8006cec:	4b0b      	ldr	r3, [pc, #44]	; (8006d1c <scalbnf+0xa8>)
 8006cee:	4909      	ldr	r1, [pc, #36]	; (8006d14 <scalbnf+0xa0>)
 8006cf0:	e7e4      	b.n	8006cbc <scalbnf+0x48>
 8006cf2:	3119      	adds	r1, #25
 8006cf4:	05c8      	lsls	r0, r1, #23
 8006cf6:	21cc      	movs	r1, #204	; 0xcc
 8006cf8:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <scalbnf+0xa4>)
 8006cfa:	0589      	lsls	r1, r1, #22
 8006cfc:	401a      	ands	r2, r3
 8006cfe:	4310      	orrs	r0, r2
 8006d00:	e7df      	b.n	8006cc2 <scalbnf+0x4e>
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	ffff3cb0 	.word	0xffff3cb0
 8006d08:	0000c350 	.word	0x0000c350
 8006d0c:	7149f2ca 	.word	0x7149f2ca
 8006d10:	f149f2ca 	.word	0xf149f2ca
 8006d14:	0da24260 	.word	0x0da24260
 8006d18:	807fffff 	.word	0x807fffff
 8006d1c:	8da24260 	.word	0x8da24260

08006d20 <floorf>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	0045      	lsls	r5, r0, #1
 8006d24:	086e      	lsrs	r6, r5, #1
 8006d26:	0e2d      	lsrs	r5, r5, #24
 8006d28:	3d7f      	subs	r5, #127	; 0x7f
 8006d2a:	0004      	movs	r4, r0
 8006d2c:	2d16      	cmp	r5, #22
 8006d2e:	dc24      	bgt.n	8006d7a <floorf+0x5a>
 8006d30:	2d00      	cmp	r5, #0
 8006d32:	da0e      	bge.n	8006d52 <floorf+0x32>
 8006d34:	4916      	ldr	r1, [pc, #88]	; (8006d90 <floorf+0x70>)
 8006d36:	f7f9 fcbb 	bl	80006b0 <__aeabi_fadd>
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	f7f9 fb8a 	bl	8000454 <__aeabi_fcmpgt>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d004      	beq.n	8006d4e <floorf+0x2e>
 8006d44:	2c00      	cmp	r4, #0
 8006d46:	da20      	bge.n	8006d8a <floorf+0x6a>
 8006d48:	2e00      	cmp	r6, #0
 8006d4a:	d000      	beq.n	8006d4e <floorf+0x2e>
 8006d4c:	4c11      	ldr	r4, [pc, #68]	; (8006d94 <floorf+0x74>)
 8006d4e:	1c20      	adds	r0, r4, #0
 8006d50:	e01a      	b.n	8006d88 <floorf+0x68>
 8006d52:	4e11      	ldr	r6, [pc, #68]	; (8006d98 <floorf+0x78>)
 8006d54:	412e      	asrs	r6, r5
 8006d56:	4206      	tst	r6, r0
 8006d58:	d016      	beq.n	8006d88 <floorf+0x68>
 8006d5a:	490d      	ldr	r1, [pc, #52]	; (8006d90 <floorf+0x70>)
 8006d5c:	f7f9 fca8 	bl	80006b0 <__aeabi_fadd>
 8006d60:	2100      	movs	r1, #0
 8006d62:	f7f9 fb77 	bl	8000454 <__aeabi_fcmpgt>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d0f1      	beq.n	8006d4e <floorf+0x2e>
 8006d6a:	2c00      	cmp	r4, #0
 8006d6c:	da03      	bge.n	8006d76 <floorf+0x56>
 8006d6e:	2380      	movs	r3, #128	; 0x80
 8006d70:	041b      	lsls	r3, r3, #16
 8006d72:	412b      	asrs	r3, r5
 8006d74:	18e4      	adds	r4, r4, r3
 8006d76:	43b4      	bics	r4, r6
 8006d78:	e7e9      	b.n	8006d4e <floorf+0x2e>
 8006d7a:	23ff      	movs	r3, #255	; 0xff
 8006d7c:	05db      	lsls	r3, r3, #23
 8006d7e:	429e      	cmp	r6, r3
 8006d80:	d302      	bcc.n	8006d88 <floorf+0x68>
 8006d82:	1c01      	adds	r1, r0, #0
 8006d84:	f7f9 fc94 	bl	80006b0 <__aeabi_fadd>
 8006d88:	bd70      	pop	{r4, r5, r6, pc}
 8006d8a:	2400      	movs	r4, #0
 8006d8c:	e7df      	b.n	8006d4e <floorf+0x2e>
 8006d8e:	46c0      	nop			; (mov r8, r8)
 8006d90:	7149f2ca 	.word	0x7149f2ca
 8006d94:	bf800000 	.word	0xbf800000
 8006d98:	007fffff 	.word	0x007fffff

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	46c0      	nop			; (mov r8, r8)
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
