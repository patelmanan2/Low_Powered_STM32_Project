
Writing_Tool_Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a20  0800e678  0800e678  0001e678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f098  0800f098  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f098  0800f098  0001f098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0a0  0800f0a0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0a0  0800f0a0  0001f0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0a4  0800f0a4  0001f0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f0a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  200001ec  0800f294  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  0800f294  00020670  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b267  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a5  00000000  00000000  0002b4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002d868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cc  00000000  00000000  0002e408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001365e  00000000  00000000  0002ecd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f65  00000000  00000000  00042332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00069c93  00000000  00000000  00053297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003edc  00000000  00000000  000bcf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  000c0e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e660 	.word	0x0800e660

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800e660 	.word	0x0800e660

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fbb5 	bl	8001bac <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fb05 	bl	8001a5c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fba7 	bl	8001bac <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fb9d 	bl	8001bac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb2d 	bl	8001ae0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fb23 	bl	8001ae0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f8a4 	bl	8000624 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_d2uiz>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	2200      	movs	r2, #0
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <__aeabi_d2uiz+0x38>)
 800054a:	0004      	movs	r4, r0
 800054c:	000d      	movs	r5, r1
 800054e:	f7ff ffa1 	bl	8000494 <__aeabi_dcmpge>
 8000552:	2800      	cmp	r0, #0
 8000554:	d104      	bne.n	8000560 <__aeabi_d2uiz+0x1c>
 8000556:	0020      	movs	r0, r4
 8000558:	0029      	movs	r1, r5
 800055a:	f002 f9ed 	bl	8002938 <__aeabi_d2iz>
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_d2uiz+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	0020      	movs	r0, r4
 8000566:	0029      	movs	r1, r5
 8000568:	f001 fe46 	bl	80021f8 <__aeabi_dsub>
 800056c:	f002 f9e4 	bl	8002938 <__aeabi_d2iz>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	061b      	lsls	r3, r3, #24
 8000574:	469c      	mov	ip, r3
 8000576:	4460      	add	r0, ip
 8000578:	e7f1      	b.n	800055e <__aeabi_d2uiz+0x1a>
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41e00000 	.word	0x41e00000

08000580 <__aeabi_d2lz>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000c      	movs	r4, r1
 8000586:	2200      	movs	r2, #0
 8000588:	2300      	movs	r3, #0
 800058a:	0028      	movs	r0, r5
 800058c:	0021      	movs	r1, r4
 800058e:	f7ff ff63 	bl	8000458 <__aeabi_dcmplt>
 8000592:	2800      	cmp	r0, #0
 8000594:	d108      	bne.n	80005a8 <__aeabi_d2lz+0x28>
 8000596:	0028      	movs	r0, r5
 8000598:	0021      	movs	r1, r4
 800059a:	f000 f80f 	bl	80005bc <__aeabi_d2ulz>
 800059e:	0002      	movs	r2, r0
 80005a0:	000b      	movs	r3, r1
 80005a2:	0010      	movs	r0, r2
 80005a4:	0019      	movs	r1, r3
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	061b      	lsls	r3, r3, #24
 80005ac:	18e1      	adds	r1, r4, r3
 80005ae:	0028      	movs	r0, r5
 80005b0:	f000 f804 	bl	80005bc <__aeabi_d2ulz>
 80005b4:	2300      	movs	r3, #0
 80005b6:	4242      	negs	r2, r0
 80005b8:	418b      	sbcs	r3, r1
 80005ba:	e7f2      	b.n	80005a2 <__aeabi_d2lz+0x22>

080005bc <__aeabi_d2ulz>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	2200      	movs	r2, #0
 80005c0:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <__aeabi_d2ulz+0x34>)
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	f001 fb55 	bl	8001c74 <__aeabi_dmul>
 80005ca:	f7ff ffbb 	bl	8000544 <__aeabi_d2uiz>
 80005ce:	0006      	movs	r6, r0
 80005d0:	f002 fa18 	bl	8002a04 <__aeabi_ui2d>
 80005d4:	2200      	movs	r2, #0
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <__aeabi_d2ulz+0x38>)
 80005d8:	f001 fb4c 	bl	8001c74 <__aeabi_dmul>
 80005dc:	0002      	movs	r2, r0
 80005de:	000b      	movs	r3, r1
 80005e0:	0020      	movs	r0, r4
 80005e2:	0029      	movs	r1, r5
 80005e4:	f001 fe08 	bl	80021f8 <__aeabi_dsub>
 80005e8:	f7ff ffac 	bl	8000544 <__aeabi_d2uiz>
 80005ec:	0031      	movs	r1, r6
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	3df00000 	.word	0x3df00000
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__aeabi_l2d>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0006      	movs	r6, r0
 80005fc:	0008      	movs	r0, r1
 80005fe:	f002 f9d1 	bl	80029a4 <__aeabi_i2d>
 8000602:	2200      	movs	r2, #0
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <__aeabi_l2d+0x28>)
 8000606:	f001 fb35 	bl	8001c74 <__aeabi_dmul>
 800060a:	000d      	movs	r5, r1
 800060c:	0004      	movs	r4, r0
 800060e:	0030      	movs	r0, r6
 8000610:	f002 f9f8 	bl	8002a04 <__aeabi_ui2d>
 8000614:	002b      	movs	r3, r5
 8000616:	0022      	movs	r2, r4
 8000618:	f000 fbd2 	bl	8000dc0 <__aeabi_dadd>
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	41f00000 	.word	0x41f00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 faf0 	bl	8002c28 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 faeb 	bl	8002c28 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fdiv>:
 80007bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007be:	464f      	mov	r7, r9
 80007c0:	4646      	mov	r6, r8
 80007c2:	46d6      	mov	lr, sl
 80007c4:	0245      	lsls	r5, r0, #9
 80007c6:	b5c0      	push	{r6, r7, lr}
 80007c8:	0047      	lsls	r7, r0, #1
 80007ca:	1c0c      	adds	r4, r1, #0
 80007cc:	0a6d      	lsrs	r5, r5, #9
 80007ce:	0e3f      	lsrs	r7, r7, #24
 80007d0:	0fc6      	lsrs	r6, r0, #31
 80007d2:	2f00      	cmp	r7, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fdiv+0x1c>
 80007d6:	e06f      	b.n	80008b8 <__aeabi_fdiv+0xfc>
 80007d8:	2fff      	cmp	r7, #255	; 0xff
 80007da:	d100      	bne.n	80007de <__aeabi_fdiv+0x22>
 80007dc:	e074      	b.n	80008c8 <__aeabi_fdiv+0x10c>
 80007de:	2300      	movs	r3, #0
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	4699      	mov	r9, r3
 80007e4:	469a      	mov	sl, r3
 80007e6:	00ed      	lsls	r5, r5, #3
 80007e8:	04d2      	lsls	r2, r2, #19
 80007ea:	4315      	orrs	r5, r2
 80007ec:	3f7f      	subs	r7, #127	; 0x7f
 80007ee:	0263      	lsls	r3, r4, #9
 80007f0:	0a5b      	lsrs	r3, r3, #9
 80007f2:	4698      	mov	r8, r3
 80007f4:	0063      	lsls	r3, r4, #1
 80007f6:	0e1b      	lsrs	r3, r3, #24
 80007f8:	0fe4      	lsrs	r4, r4, #31
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d04d      	beq.n	800089a <__aeabi_fdiv+0xde>
 80007fe:	2bff      	cmp	r3, #255	; 0xff
 8000800:	d045      	beq.n	800088e <__aeabi_fdiv+0xd2>
 8000802:	4642      	mov	r2, r8
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	00d2      	lsls	r2, r2, #3
 8000808:	04c9      	lsls	r1, r1, #19
 800080a:	4311      	orrs	r1, r2
 800080c:	4688      	mov	r8, r1
 800080e:	2200      	movs	r2, #0
 8000810:	3b7f      	subs	r3, #127	; 0x7f
 8000812:	0031      	movs	r1, r6
 8000814:	1aff      	subs	r7, r7, r3
 8000816:	464b      	mov	r3, r9
 8000818:	4061      	eors	r1, r4
 800081a:	b2c9      	uxtb	r1, r1
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d900      	bls.n	8000822 <__aeabi_fdiv+0x66>
 8000820:	e0b8      	b.n	8000994 <__aeabi_fdiv+0x1d8>
 8000822:	4870      	ldr	r0, [pc, #448]	; (80009e4 <__aeabi_fdiv+0x228>)
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	58c3      	ldr	r3, [r0, r3]
 8000828:	469f      	mov	pc, r3
 800082a:	2300      	movs	r3, #0
 800082c:	4698      	mov	r8, r3
 800082e:	0026      	movs	r6, r4
 8000830:	4645      	mov	r5, r8
 8000832:	4692      	mov	sl, r2
 8000834:	4653      	mov	r3, sl
 8000836:	2b02      	cmp	r3, #2
 8000838:	d100      	bne.n	800083c <__aeabi_fdiv+0x80>
 800083a:	e08d      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800083c:	2b03      	cmp	r3, #3
 800083e:	d100      	bne.n	8000842 <__aeabi_fdiv+0x86>
 8000840:	e0a1      	b.n	8000986 <__aeabi_fdiv+0x1ca>
 8000842:	2b01      	cmp	r3, #1
 8000844:	d018      	beq.n	8000878 <__aeabi_fdiv+0xbc>
 8000846:	003b      	movs	r3, r7
 8000848:	337f      	adds	r3, #127	; 0x7f
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd6d      	ble.n	800092a <__aeabi_fdiv+0x16e>
 800084e:	076a      	lsls	r2, r5, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0xa0>
 8000852:	220f      	movs	r2, #15
 8000854:	402a      	ands	r2, r5
 8000856:	2a04      	cmp	r2, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0xa0>
 800085a:	3504      	adds	r5, #4
 800085c:	012a      	lsls	r2, r5, #4
 800085e:	d503      	bpl.n	8000868 <__aeabi_fdiv+0xac>
 8000860:	4b61      	ldr	r3, [pc, #388]	; (80009e8 <__aeabi_fdiv+0x22c>)
 8000862:	401d      	ands	r5, r3
 8000864:	003b      	movs	r3, r7
 8000866:	3380      	adds	r3, #128	; 0x80
 8000868:	2bfe      	cmp	r3, #254	; 0xfe
 800086a:	dd00      	ble.n	800086e <__aeabi_fdiv+0xb2>
 800086c:	e074      	b.n	8000958 <__aeabi_fdiv+0x19c>
 800086e:	01aa      	lsls	r2, r5, #6
 8000870:	0a52      	lsrs	r2, r2, #9
 8000872:	b2d8      	uxtb	r0, r3
 8000874:	e002      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000876:	000e      	movs	r6, r1
 8000878:	2000      	movs	r0, #0
 800087a:	2200      	movs	r2, #0
 800087c:	05c0      	lsls	r0, r0, #23
 800087e:	07f6      	lsls	r6, r6, #31
 8000880:	4310      	orrs	r0, r2
 8000882:	4330      	orrs	r0, r6
 8000884:	bce0      	pop	{r5, r6, r7}
 8000886:	46ba      	mov	sl, r7
 8000888:	46b1      	mov	r9, r6
 800088a:	46a8      	mov	r8, r5
 800088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088e:	4643      	mov	r3, r8
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <__aeabi_fdiv+0x158>
 8000894:	2202      	movs	r2, #2
 8000896:	3fff      	subs	r7, #255	; 0xff
 8000898:	e003      	b.n	80008a2 <__aeabi_fdiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	2b00      	cmp	r3, #0
 800089e:	d12d      	bne.n	80008fc <__aeabi_fdiv+0x140>
 80008a0:	2201      	movs	r2, #1
 80008a2:	0031      	movs	r1, r6
 80008a4:	464b      	mov	r3, r9
 80008a6:	4061      	eors	r1, r4
 80008a8:	b2c9      	uxtb	r1, r1
 80008aa:	4313      	orrs	r3, r2
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d838      	bhi.n	8000922 <__aeabi_fdiv+0x166>
 80008b0:	484e      	ldr	r0, [pc, #312]	; (80009ec <__aeabi_fdiv+0x230>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	58c3      	ldr	r3, [r0, r3]
 80008b6:	469f      	mov	pc, r3
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d113      	bne.n	80008e4 <__aeabi_fdiv+0x128>
 80008bc:	2304      	movs	r3, #4
 80008be:	4699      	mov	r9, r3
 80008c0:	3b03      	subs	r3, #3
 80008c2:	2700      	movs	r7, #0
 80008c4:	469a      	mov	sl, r3
 80008c6:	e792      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008c8:	2d00      	cmp	r5, #0
 80008ca:	d105      	bne.n	80008d8 <__aeabi_fdiv+0x11c>
 80008cc:	2308      	movs	r3, #8
 80008ce:	4699      	mov	r9, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	27ff      	movs	r7, #255	; 0xff
 80008d4:	469a      	mov	sl, r3
 80008d6:	e78a      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008d8:	230c      	movs	r3, #12
 80008da:	4699      	mov	r9, r3
 80008dc:	3b09      	subs	r3, #9
 80008de:	27ff      	movs	r7, #255	; 0xff
 80008e0:	469a      	mov	sl, r3
 80008e2:	e784      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008e4:	0028      	movs	r0, r5
 80008e6:	f002 f981 	bl	8002bec <__clzsi2>
 80008ea:	2776      	movs	r7, #118	; 0x76
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409d      	lsls	r5, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	427f      	negs	r7, r7
 80008f4:	4699      	mov	r9, r3
 80008f6:	469a      	mov	sl, r3
 80008f8:	1a3f      	subs	r7, r7, r0
 80008fa:	e778      	b.n	80007ee <__aeabi_fdiv+0x32>
 80008fc:	4640      	mov	r0, r8
 80008fe:	f002 f975 	bl	8002bec <__clzsi2>
 8000902:	4642      	mov	r2, r8
 8000904:	1f43      	subs	r3, r0, #5
 8000906:	409a      	lsls	r2, r3
 8000908:	2376      	movs	r3, #118	; 0x76
 800090a:	425b      	negs	r3, r3
 800090c:	4690      	mov	r8, r2
 800090e:	1a1b      	subs	r3, r3, r0
 8000910:	2200      	movs	r2, #0
 8000912:	e77e      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000914:	2303      	movs	r3, #3
 8000916:	464a      	mov	r2, r9
 8000918:	431a      	orrs	r2, r3
 800091a:	4691      	mov	r9, r2
 800091c:	33fc      	adds	r3, #252	; 0xfc
 800091e:	2203      	movs	r2, #3
 8000920:	e777      	b.n	8000812 <__aeabi_fdiv+0x56>
 8000922:	000e      	movs	r6, r1
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2200      	movs	r2, #0
 8000928:	e7a8      	b.n	800087c <__aeabi_fdiv+0xc0>
 800092a:	2201      	movs	r2, #1
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dca2      	bgt.n	8000878 <__aeabi_fdiv+0xbc>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	002a      	movs	r2, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40da      	lsrs	r2, r3
 800093a:	1e6b      	subs	r3, r5, #1
 800093c:	419d      	sbcs	r5, r3
 800093e:	4315      	orrs	r5, r2
 8000940:	076a      	lsls	r2, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x192>
 8000944:	220f      	movs	r2, #15
 8000946:	402a      	ands	r2, r5
 8000948:	2a04      	cmp	r2, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x192>
 800094c:	3504      	adds	r5, #4
 800094e:	016a      	lsls	r2, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x220>
 8000952:	2001      	movs	r0, #1
 8000954:	2200      	movs	r2, #0
 8000956:	e791      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2200      	movs	r2, #0
 800095c:	e78e      	b.n	800087c <__aeabi_fdiv+0xc0>
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03d2      	lsls	r2, r2, #15
 8000966:	e789      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	03d2      	lsls	r2, r2, #15
 8000970:	4215      	tst	r5, r2
 8000972:	d008      	beq.n	8000986 <__aeabi_fdiv+0x1ca>
 8000974:	4643      	mov	r3, r8
 8000976:	4213      	tst	r3, r2
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0x1ca>
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	0026      	movs	r6, r4
 8000980:	20ff      	movs	r0, #255	; 0xff
 8000982:	0a52      	lsrs	r2, r2, #9
 8000984:	e77a      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	03d2      	lsls	r2, r2, #15
 800098a:	432a      	orrs	r2, r5
 800098c:	0252      	lsls	r2, r2, #9
 800098e:	20ff      	movs	r0, #255	; 0xff
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	e773      	b.n	800087c <__aeabi_fdiv+0xc0>
 8000994:	4642      	mov	r2, r8
 8000996:	016b      	lsls	r3, r5, #5
 8000998:	0155      	lsls	r5, r2, #5
 800099a:	42ab      	cmp	r3, r5
 800099c:	d21a      	bcs.n	80009d4 <__aeabi_fdiv+0x218>
 800099e:	201b      	movs	r0, #27
 80009a0:	2200      	movs	r2, #0
 80009a2:	3f01      	subs	r7, #1
 80009a4:	2601      	movs	r6, #1
 80009a6:	001c      	movs	r4, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	db01      	blt.n	80009b4 <__aeabi_fdiv+0x1f8>
 80009b0:	429d      	cmp	r5, r3
 80009b2:	d801      	bhi.n	80009b8 <__aeabi_fdiv+0x1fc>
 80009b4:	1b5b      	subs	r3, r3, r5
 80009b6:	4332      	orrs	r2, r6
 80009b8:	3801      	subs	r0, #1
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d1f3      	bne.n	80009a6 <__aeabi_fdiv+0x1ea>
 80009be:	1e58      	subs	r0, r3, #1
 80009c0:	4183      	sbcs	r3, r0
 80009c2:	4313      	orrs	r3, r2
 80009c4:	001d      	movs	r5, r3
 80009c6:	003b      	movs	r3, r7
 80009c8:	337f      	adds	r3, #127	; 0x7f
 80009ca:	000e      	movs	r6, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x216>
 80009d0:	e73d      	b.n	800084e <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x16e>
 80009d4:	201a      	movs	r0, #26
 80009d6:	2201      	movs	r2, #1
 80009d8:	1b5b      	subs	r3, r3, r5
 80009da:	e7e3      	b.n	80009a4 <__aeabi_fdiv+0x1e8>
 80009dc:	01aa      	lsls	r2, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a52      	lsrs	r2, r2, #9
 80009e2:	e74b      	b.n	800087c <__aeabi_fdiv+0xc0>
 80009e4:	0800e6f8 	.word	0x0800e6f8
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	0800e738 	.word	0x0800e738

080009f0 <__aeabi_fmul>:
 80009f0:	0243      	lsls	r3, r0, #9
 80009f2:	0a5b      	lsrs	r3, r3, #9
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	4699      	mov	r9, r3
 80009fc:	46d6      	mov	lr, sl
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0045      	lsls	r5, r0, #1
 8000a02:	4698      	mov	r8, r3
 8000a04:	b5c0      	push	{r6, r7, lr}
 8000a06:	464b      	mov	r3, r9
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	0e2d      	lsrs	r5, r5, #24
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_fmul+0x20>
 8000a0e:	e0cb      	b.n	8000ba8 <__aeabi_fmul+0x1b8>
 8000a10:	2dff      	cmp	r5, #255	; 0xff
 8000a12:	d100      	bne.n	8000a16 <__aeabi_fmul+0x26>
 8000a14:	e0cf      	b.n	8000bb6 <__aeabi_fmul+0x1c6>
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	04d2      	lsls	r2, r2, #19
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	2300      	movs	r3, #0
 8000a20:	4691      	mov	r9, r2
 8000a22:	2600      	movs	r6, #0
 8000a24:	469a      	mov	sl, r3
 8000a26:	3d7f      	subs	r5, #127	; 0x7f
 8000a28:	027c      	lsls	r4, r7, #9
 8000a2a:	007b      	lsls	r3, r7, #1
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e1b      	lsrs	r3, r3, #24
 8000a30:	0fff      	lsrs	r7, r7, #31
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fmul+0x48>
 8000a36:	e0a9      	b.n	8000b8c <__aeabi_fmul+0x19c>
 8000a38:	2bff      	cmp	r3, #255	; 0xff
 8000a3a:	d011      	beq.n	8000a60 <__aeabi_fmul+0x70>
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	00e4      	lsls	r4, r4, #3
 8000a40:	04d2      	lsls	r2, r2, #19
 8000a42:	4314      	orrs	r4, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	3b7f      	subs	r3, #127	; 0x7f
 8000a48:	195b      	adds	r3, r3, r5
 8000a4a:	407a      	eors	r2, r7
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	1c5d      	adds	r5, r3, #1
 8000a52:	2e0a      	cmp	r6, #10
 8000a54:	dd13      	ble.n	8000a7e <__aeabi_fmul+0x8e>
 8000a56:	003a      	movs	r2, r7
 8000a58:	2e0b      	cmp	r6, #11
 8000a5a:	d047      	beq.n	8000aec <__aeabi_fmul+0xfc>
 8000a5c:	4647      	mov	r7, r8
 8000a5e:	e03f      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000a60:	002b      	movs	r3, r5
 8000a62:	33ff      	adds	r3, #255	; 0xff
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d11e      	bne.n	8000aa6 <__aeabi_fmul+0xb6>
 8000a68:	2202      	movs	r2, #2
 8000a6a:	4316      	orrs	r6, r2
 8000a6c:	4642      	mov	r2, r8
 8000a6e:	3501      	adds	r5, #1
 8000a70:	407a      	eors	r2, r7
 8000a72:	b2d2      	uxtb	r2, r2
 8000a74:	35ff      	adds	r5, #255	; 0xff
 8000a76:	2e0a      	cmp	r6, #10
 8000a78:	dd00      	ble.n	8000a7c <__aeabi_fmul+0x8c>
 8000a7a:	e0e4      	b.n	8000c46 <__aeabi_fmul+0x256>
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	2e02      	cmp	r6, #2
 8000a80:	dc1c      	bgt.n	8000abc <__aeabi_fmul+0xcc>
 8000a82:	3e01      	subs	r6, #1
 8000a84:	2e01      	cmp	r6, #1
 8000a86:	d842      	bhi.n	8000b0e <__aeabi_fmul+0x11e>
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	d03d      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000a8c:	2801      	cmp	r0, #1
 8000a8e:	d166      	bne.n	8000b5e <__aeabi_fmul+0x16e>
 8000a90:	2000      	movs	r0, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	05c0      	lsls	r0, r0, #23
 8000a96:	4308      	orrs	r0, r1
 8000a98:	07d2      	lsls	r2, r2, #31
 8000a9a:	4310      	orrs	r0, r2
 8000a9c:	bce0      	pop	{r5, r6, r7}
 8000a9e:	46ba      	mov	sl, r7
 8000aa0:	46b1      	mov	r9, r6
 8000aa2:	46a8      	mov	r8, r5
 8000aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	4316      	orrs	r6, r2
 8000aaa:	4642      	mov	r2, r8
 8000aac:	3501      	adds	r5, #1
 8000aae:	407a      	eors	r2, r7
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	35ff      	adds	r5, #255	; 0xff
 8000ab4:	2e0a      	cmp	r6, #10
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_fmul+0xca>
 8000ab8:	e0e4      	b.n	8000c84 <__aeabi_fmul+0x294>
 8000aba:	2003      	movs	r0, #3
 8000abc:	2101      	movs	r1, #1
 8000abe:	40b1      	lsls	r1, r6
 8000ac0:	26a6      	movs	r6, #166	; 0xa6
 8000ac2:	00f6      	lsls	r6, r6, #3
 8000ac4:	4231      	tst	r1, r6
 8000ac6:	d10a      	bne.n	8000ade <__aeabi_fmul+0xee>
 8000ac8:	2690      	movs	r6, #144	; 0x90
 8000aca:	00b6      	lsls	r6, r6, #2
 8000acc:	4231      	tst	r1, r6
 8000ace:	d116      	bne.n	8000afe <__aeabi_fmul+0x10e>
 8000ad0:	3eb9      	subs	r6, #185	; 0xb9
 8000ad2:	3eff      	subs	r6, #255	; 0xff
 8000ad4:	420e      	tst	r6, r1
 8000ad6:	d01a      	beq.n	8000b0e <__aeabi_fmul+0x11e>
 8000ad8:	46a1      	mov	r9, r4
 8000ada:	4682      	mov	sl, r0
 8000adc:	e000      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000ade:	0017      	movs	r7, r2
 8000ae0:	4653      	mov	r3, sl
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d00f      	beq.n	8000b08 <__aeabi_fmul+0x118>
 8000ae8:	464c      	mov	r4, r9
 8000aea:	4650      	mov	r0, sl
 8000aec:	2803      	cmp	r0, #3
 8000aee:	d1cd      	bne.n	8000a8c <__aeabi_fmul+0x9c>
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	03c9      	lsls	r1, r1, #15
 8000af4:	4321      	orrs	r1, r4
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	20ff      	movs	r0, #255	; 0xff
 8000afa:	0a49      	lsrs	r1, r1, #9
 8000afc:	e7ca      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	2200      	movs	r2, #0
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	03c9      	lsls	r1, r1, #15
 8000b06:	e7c5      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b08:	20ff      	movs	r0, #255	; 0xff
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	e7c2      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b0e:	0c20      	lsrs	r0, r4, #16
 8000b10:	4649      	mov	r1, r9
 8000b12:	0424      	lsls	r4, r4, #16
 8000b14:	0c24      	lsrs	r4, r4, #16
 8000b16:	0027      	movs	r7, r4
 8000b18:	0c0e      	lsrs	r6, r1, #16
 8000b1a:	0409      	lsls	r1, r1, #16
 8000b1c:	0c09      	lsrs	r1, r1, #16
 8000b1e:	4374      	muls	r4, r6
 8000b20:	434f      	muls	r7, r1
 8000b22:	4346      	muls	r6, r0
 8000b24:	4348      	muls	r0, r1
 8000b26:	0c39      	lsrs	r1, r7, #16
 8000b28:	1900      	adds	r0, r0, r4
 8000b2a:	1809      	adds	r1, r1, r0
 8000b2c:	428c      	cmp	r4, r1
 8000b2e:	d903      	bls.n	8000b38 <__aeabi_fmul+0x148>
 8000b30:	2080      	movs	r0, #128	; 0x80
 8000b32:	0240      	lsls	r0, r0, #9
 8000b34:	4684      	mov	ip, r0
 8000b36:	4466      	add	r6, ip
 8000b38:	043f      	lsls	r7, r7, #16
 8000b3a:	0408      	lsls	r0, r1, #16
 8000b3c:	0c3f      	lsrs	r7, r7, #16
 8000b3e:	19c0      	adds	r0, r0, r7
 8000b40:	0184      	lsls	r4, r0, #6
 8000b42:	1e67      	subs	r7, r4, #1
 8000b44:	41bc      	sbcs	r4, r7
 8000b46:	0c09      	lsrs	r1, r1, #16
 8000b48:	0e80      	lsrs	r0, r0, #26
 8000b4a:	1989      	adds	r1, r1, r6
 8000b4c:	4304      	orrs	r4, r0
 8000b4e:	0189      	lsls	r1, r1, #6
 8000b50:	430c      	orrs	r4, r1
 8000b52:	0109      	lsls	r1, r1, #4
 8000b54:	d571      	bpl.n	8000c3a <__aeabi_fmul+0x24a>
 8000b56:	2301      	movs	r3, #1
 8000b58:	0861      	lsrs	r1, r4, #1
 8000b5a:	401c      	ands	r4, r3
 8000b5c:	430c      	orrs	r4, r1
 8000b5e:	002b      	movs	r3, r5
 8000b60:	337f      	adds	r3, #127	; 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd51      	ble.n	8000c0a <__aeabi_fmul+0x21a>
 8000b66:	0761      	lsls	r1, r4, #29
 8000b68:	d004      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	4021      	ands	r1, r4
 8000b6e:	2904      	cmp	r1, #4
 8000b70:	d000      	beq.n	8000b74 <__aeabi_fmul+0x184>
 8000b72:	3404      	adds	r4, #4
 8000b74:	0121      	lsls	r1, r4, #4
 8000b76:	d503      	bpl.n	8000b80 <__aeabi_fmul+0x190>
 8000b78:	4b43      	ldr	r3, [pc, #268]	; (8000c88 <__aeabi_fmul+0x298>)
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	002b      	movs	r3, r5
 8000b7e:	3380      	adds	r3, #128	; 0x80
 8000b80:	2bfe      	cmp	r3, #254	; 0xfe
 8000b82:	dcc1      	bgt.n	8000b08 <__aeabi_fmul+0x118>
 8000b84:	01a1      	lsls	r1, r4, #6
 8000b86:	0a49      	lsrs	r1, r1, #9
 8000b88:	b2d8      	uxtb	r0, r3
 8000b8a:	e783      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000b8c:	2c00      	cmp	r4, #0
 8000b8e:	d12c      	bne.n	8000bea <__aeabi_fmul+0x1fa>
 8000b90:	2301      	movs	r3, #1
 8000b92:	4642      	mov	r2, r8
 8000b94:	431e      	orrs	r6, r3
 8000b96:	002b      	movs	r3, r5
 8000b98:	407a      	eors	r2, r7
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	1c5d      	adds	r5, r3, #1
 8000ba0:	2e0a      	cmp	r6, #10
 8000ba2:	dd00      	ble.n	8000ba6 <__aeabi_fmul+0x1b6>
 8000ba4:	e757      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000ba6:	e76a      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d110      	bne.n	8000bce <__aeabi_fmul+0x1de>
 8000bac:	2301      	movs	r3, #1
 8000bae:	2604      	movs	r6, #4
 8000bb0:	2500      	movs	r5, #0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e738      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <__aeabi_fmul+0x1d4>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	2608      	movs	r6, #8
 8000bbe:	25ff      	movs	r5, #255	; 0xff
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	e731      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	260c      	movs	r6, #12
 8000bc8:	25ff      	movs	r5, #255	; 0xff
 8000bca:	469a      	mov	sl, r3
 8000bcc:	e72c      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bce:	4648      	mov	r0, r9
 8000bd0:	f002 f80c 	bl	8002bec <__clzsi2>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	2576      	movs	r5, #118	; 0x76
 8000bda:	409a      	lsls	r2, r3
 8000bdc:	2300      	movs	r3, #0
 8000bde:	426d      	negs	r5, r5
 8000be0:	4691      	mov	r9, r2
 8000be2:	2600      	movs	r6, #0
 8000be4:	469a      	mov	sl, r3
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	e71e      	b.n	8000a28 <__aeabi_fmul+0x38>
 8000bea:	0020      	movs	r0, r4
 8000bec:	f001 fffe 	bl	8002bec <__clzsi2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	1f43      	subs	r3, r0, #5
 8000bf4:	409c      	lsls	r4, r3
 8000bf6:	1a2b      	subs	r3, r5, r0
 8000bf8:	3b76      	subs	r3, #118	; 0x76
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	1c5d      	adds	r5, r3, #1
 8000c02:	2e0a      	cmp	r6, #10
 8000c04:	dd00      	ble.n	8000c08 <__aeabi_fmul+0x218>
 8000c06:	e726      	b.n	8000a56 <__aeabi_fmul+0x66>
 8000c08:	e739      	b.n	8000a7e <__aeabi_fmul+0x8e>
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	1acb      	subs	r3, r1, r3
 8000c0e:	2b1b      	cmp	r3, #27
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_fmul+0x224>
 8000c12:	e73d      	b.n	8000a90 <__aeabi_fmul+0xa0>
 8000c14:	359e      	adds	r5, #158	; 0x9e
 8000c16:	0021      	movs	r1, r4
 8000c18:	40ac      	lsls	r4, r5
 8000c1a:	40d9      	lsrs	r1, r3
 8000c1c:	1e63      	subs	r3, r4, #1
 8000c1e:	419c      	sbcs	r4, r3
 8000c20:	4321      	orrs	r1, r4
 8000c22:	074b      	lsls	r3, r1, #29
 8000c24:	d004      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c26:	230f      	movs	r3, #15
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_fmul+0x240>
 8000c2e:	3104      	adds	r1, #4
 8000c30:	014b      	lsls	r3, r1, #5
 8000c32:	d504      	bpl.n	8000c3e <__aeabi_fmul+0x24e>
 8000c34:	2001      	movs	r0, #1
 8000c36:	2100      	movs	r1, #0
 8000c38:	e72c      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c3a:	001d      	movs	r5, r3
 8000c3c:	e78f      	b.n	8000b5e <__aeabi_fmul+0x16e>
 8000c3e:	0189      	lsls	r1, r1, #6
 8000c40:	2000      	movs	r0, #0
 8000c42:	0a49      	lsrs	r1, r1, #9
 8000c44:	e726      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c46:	2302      	movs	r3, #2
 8000c48:	2e0f      	cmp	r6, #15
 8000c4a:	d10c      	bne.n	8000c66 <__aeabi_fmul+0x276>
 8000c4c:	2180      	movs	r1, #128	; 0x80
 8000c4e:	464b      	mov	r3, r9
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	420b      	tst	r3, r1
 8000c54:	d00d      	beq.n	8000c72 <__aeabi_fmul+0x282>
 8000c56:	420c      	tst	r4, r1
 8000c58:	d10b      	bne.n	8000c72 <__aeabi_fmul+0x282>
 8000c5a:	4321      	orrs	r1, r4
 8000c5c:	0249      	lsls	r1, r1, #9
 8000c5e:	003a      	movs	r2, r7
 8000c60:	20ff      	movs	r0, #255	; 0xff
 8000c62:	0a49      	lsrs	r1, r1, #9
 8000c64:	e716      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c66:	2e0b      	cmp	r6, #11
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fmul+0x27c>
 8000c6a:	e6f7      	b.n	8000a5c <__aeabi_fmul+0x6c>
 8000c6c:	46a1      	mov	r9, r4
 8000c6e:	469a      	mov	sl, r3
 8000c70:	e736      	b.n	8000ae0 <__aeabi_fmul+0xf0>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	464b      	mov	r3, r9
 8000c76:	03c9      	lsls	r1, r1, #15
 8000c78:	4319      	orrs	r1, r3
 8000c7a:	0249      	lsls	r1, r1, #9
 8000c7c:	4642      	mov	r2, r8
 8000c7e:	20ff      	movs	r0, #255	; 0xff
 8000c80:	0a49      	lsrs	r1, r1, #9
 8000c82:	e707      	b.n	8000a94 <__aeabi_fmul+0xa4>
 8000c84:	2303      	movs	r3, #3
 8000c86:	e7df      	b.n	8000c48 <__aeabi_fmul+0x258>
 8000c88:	f7ffffff 	.word	0xf7ffffff

08000c8c <__aeabi_i2f>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	2800      	cmp	r0, #0
 8000c90:	d013      	beq.n	8000cba <__aeabi_i2f+0x2e>
 8000c92:	17c3      	asrs	r3, r0, #31
 8000c94:	18c5      	adds	r5, r0, r3
 8000c96:	405d      	eors	r5, r3
 8000c98:	0fc4      	lsrs	r4, r0, #31
 8000c9a:	0028      	movs	r0, r5
 8000c9c:	f001 ffa6 	bl	8002bec <__clzsi2>
 8000ca0:	239e      	movs	r3, #158	; 0x9e
 8000ca2:	0001      	movs	r1, r0
 8000ca4:	1a1b      	subs	r3, r3, r0
 8000ca6:	2b96      	cmp	r3, #150	; 0x96
 8000ca8:	dc0f      	bgt.n	8000cca <__aeabi_i2f+0x3e>
 8000caa:	2808      	cmp	r0, #8
 8000cac:	d031      	beq.n	8000d12 <__aeabi_i2f+0x86>
 8000cae:	3908      	subs	r1, #8
 8000cb0:	408d      	lsls	r5, r1
 8000cb2:	026d      	lsls	r5, r5, #9
 8000cb4:	0a6d      	lsrs	r5, r5, #9
 8000cb6:	b2d8      	uxtb	r0, r3
 8000cb8:	e002      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000cba:	2400      	movs	r4, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	05c0      	lsls	r0, r0, #23
 8000cc2:	4328      	orrs	r0, r5
 8000cc4:	07e4      	lsls	r4, r4, #31
 8000cc6:	4320      	orrs	r0, r4
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	2b99      	cmp	r3, #153	; 0x99
 8000ccc:	dd0c      	ble.n	8000ce8 <__aeabi_i2f+0x5c>
 8000cce:	2205      	movs	r2, #5
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	0028      	movs	r0, r5
 8000cd4:	40d0      	lsrs	r0, r2
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	0008      	movs	r0, r1
 8000cda:	301b      	adds	r0, #27
 8000cdc:	4085      	lsls	r5, r0
 8000cde:	0028      	movs	r0, r5
 8000ce0:	1e45      	subs	r5, r0, #1
 8000ce2:	41a8      	sbcs	r0, r5
 8000ce4:	4302      	orrs	r2, r0
 8000ce6:	0015      	movs	r5, r2
 8000ce8:	2905      	cmp	r1, #5
 8000cea:	dc16      	bgt.n	8000d1a <__aeabi_i2f+0x8e>
 8000cec:	002a      	movs	r2, r5
 8000cee:	480f      	ldr	r0, [pc, #60]	; (8000d2c <__aeabi_i2f+0xa0>)
 8000cf0:	4002      	ands	r2, r0
 8000cf2:	076e      	lsls	r6, r5, #29
 8000cf4:	d009      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000cf6:	260f      	movs	r6, #15
 8000cf8:	4035      	ands	r5, r6
 8000cfa:	2d04      	cmp	r5, #4
 8000cfc:	d005      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000cfe:	3204      	adds	r2, #4
 8000d00:	0155      	lsls	r5, r2, #5
 8000d02:	d502      	bpl.n	8000d0a <__aeabi_i2f+0x7e>
 8000d04:	239f      	movs	r3, #159	; 0x9f
 8000d06:	4002      	ands	r2, r0
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	0192      	lsls	r2, r2, #6
 8000d0c:	0a55      	lsrs	r5, r2, #9
 8000d0e:	b2d8      	uxtb	r0, r3
 8000d10:	e7d6      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000d12:	026d      	lsls	r5, r5, #9
 8000d14:	2096      	movs	r0, #150	; 0x96
 8000d16:	0a6d      	lsrs	r5, r5, #9
 8000d18:	e7d2      	b.n	8000cc0 <__aeabi_i2f+0x34>
 8000d1a:	1f4a      	subs	r2, r1, #5
 8000d1c:	4095      	lsls	r5, r2
 8000d1e:	002a      	movs	r2, r5
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <__aeabi_i2f+0xa0>)
 8000d22:	4002      	ands	r2, r0
 8000d24:	076e      	lsls	r6, r5, #29
 8000d26:	d0f0      	beq.n	8000d0a <__aeabi_i2f+0x7e>
 8000d28:	e7e5      	b.n	8000cf6 <__aeabi_i2f+0x6a>
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	fbffffff 	.word	0xfbffffff

08000d30 <__aeabi_ui2f>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	1e04      	subs	r4, r0, #0
 8000d34:	d00e      	beq.n	8000d54 <__aeabi_ui2f+0x24>
 8000d36:	f001 ff59 	bl	8002bec <__clzsi2>
 8000d3a:	239e      	movs	r3, #158	; 0x9e
 8000d3c:	0001      	movs	r1, r0
 8000d3e:	1a1b      	subs	r3, r3, r0
 8000d40:	2b96      	cmp	r3, #150	; 0x96
 8000d42:	dc0c      	bgt.n	8000d5e <__aeabi_ui2f+0x2e>
 8000d44:	2808      	cmp	r0, #8
 8000d46:	d02c      	beq.n	8000da2 <__aeabi_ui2f+0x72>
 8000d48:	3908      	subs	r1, #8
 8000d4a:	408c      	lsls	r4, r1
 8000d4c:	0264      	lsls	r4, r4, #9
 8000d4e:	0a64      	lsrs	r4, r4, #9
 8000d50:	b2d8      	uxtb	r0, r3
 8000d52:	e001      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000d54:	2000      	movs	r0, #0
 8000d56:	2400      	movs	r4, #0
 8000d58:	05c0      	lsls	r0, r0, #23
 8000d5a:	4320      	orrs	r0, r4
 8000d5c:	bd70      	pop	{r4, r5, r6, pc}
 8000d5e:	2b99      	cmp	r3, #153	; 0x99
 8000d60:	dd0a      	ble.n	8000d78 <__aeabi_ui2f+0x48>
 8000d62:	0002      	movs	r2, r0
 8000d64:	0020      	movs	r0, r4
 8000d66:	321b      	adds	r2, #27
 8000d68:	4090      	lsls	r0, r2
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	1e50      	subs	r0, r2, #1
 8000d6e:	4182      	sbcs	r2, r0
 8000d70:	2005      	movs	r0, #5
 8000d72:	1a40      	subs	r0, r0, r1
 8000d74:	40c4      	lsrs	r4, r0
 8000d76:	4314      	orrs	r4, r2
 8000d78:	2905      	cmp	r1, #5
 8000d7a:	dc16      	bgt.n	8000daa <__aeabi_ui2f+0x7a>
 8000d7c:	0022      	movs	r2, r4
 8000d7e:	480f      	ldr	r0, [pc, #60]	; (8000dbc <__aeabi_ui2f+0x8c>)
 8000d80:	4002      	ands	r2, r0
 8000d82:	0765      	lsls	r5, r4, #29
 8000d84:	d009      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d86:	250f      	movs	r5, #15
 8000d88:	402c      	ands	r4, r5
 8000d8a:	2c04      	cmp	r4, #4
 8000d8c:	d005      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d8e:	3204      	adds	r2, #4
 8000d90:	0154      	lsls	r4, r2, #5
 8000d92:	d502      	bpl.n	8000d9a <__aeabi_ui2f+0x6a>
 8000d94:	239f      	movs	r3, #159	; 0x9f
 8000d96:	4002      	ands	r2, r0
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	0192      	lsls	r2, r2, #6
 8000d9c:	0a54      	lsrs	r4, r2, #9
 8000d9e:	b2d8      	uxtb	r0, r3
 8000da0:	e7da      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000da2:	0264      	lsls	r4, r4, #9
 8000da4:	2096      	movs	r0, #150	; 0x96
 8000da6:	0a64      	lsrs	r4, r4, #9
 8000da8:	e7d6      	b.n	8000d58 <__aeabi_ui2f+0x28>
 8000daa:	1f4a      	subs	r2, r1, #5
 8000dac:	4094      	lsls	r4, r2
 8000dae:	0022      	movs	r2, r4
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <__aeabi_ui2f+0x8c>)
 8000db2:	4002      	ands	r2, r0
 8000db4:	0765      	lsls	r5, r4, #29
 8000db6:	d0f0      	beq.n	8000d9a <__aeabi_ui2f+0x6a>
 8000db8:	e7e5      	b.n	8000d86 <__aeabi_ui2f+0x56>
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	fbffffff 	.word	0xfbffffff

08000dc0 <__aeabi_dadd>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	464f      	mov	r7, r9
 8000dc4:	4646      	mov	r6, r8
 8000dc6:	46d6      	mov	lr, sl
 8000dc8:	0004      	movs	r4, r0
 8000dca:	b5c0      	push	{r6, r7, lr}
 8000dcc:	001f      	movs	r7, r3
 8000dce:	030b      	lsls	r3, r1, #12
 8000dd0:	0010      	movs	r0, r2
 8000dd2:	004e      	lsls	r6, r1, #1
 8000dd4:	0a5b      	lsrs	r3, r3, #9
 8000dd6:	0fcd      	lsrs	r5, r1, #31
 8000dd8:	0f61      	lsrs	r1, r4, #29
 8000dda:	007a      	lsls	r2, r7, #1
 8000ddc:	4319      	orrs	r1, r3
 8000dde:	00e3      	lsls	r3, r4, #3
 8000de0:	033c      	lsls	r4, r7, #12
 8000de2:	0fff      	lsrs	r7, r7, #31
 8000de4:	46bc      	mov	ip, r7
 8000de6:	0a64      	lsrs	r4, r4, #9
 8000de8:	0f47      	lsrs	r7, r0, #29
 8000dea:	4327      	orrs	r7, r4
 8000dec:	0d76      	lsrs	r6, r6, #21
 8000dee:	0d52      	lsrs	r2, r2, #21
 8000df0:	00c0      	lsls	r0, r0, #3
 8000df2:	46b9      	mov	r9, r7
 8000df4:	4680      	mov	r8, r0
 8000df6:	1ab7      	subs	r7, r6, r2
 8000df8:	4565      	cmp	r5, ip
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dadd+0x3e>
 8000dfc:	e09b      	b.n	8000f36 <__aeabi_dadd+0x176>
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	dc00      	bgt.n	8000e04 <__aeabi_dadd+0x44>
 8000e02:	e084      	b.n	8000f0e <__aeabi_dadd+0x14e>
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x4a>
 8000e08:	e0be      	b.n	8000f88 <__aeabi_dadd+0x1c8>
 8000e0a:	4ac8      	ldr	r2, [pc, #800]	; (800112c <__aeabi_dadd+0x36c>)
 8000e0c:	4296      	cmp	r6, r2
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_dadd+0x52>
 8000e10:	e124      	b.n	800105c <__aeabi_dadd+0x29c>
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	464c      	mov	r4, r9
 8000e16:	0412      	lsls	r2, r2, #16
 8000e18:	4314      	orrs	r4, r2
 8000e1a:	46a1      	mov	r9, r4
 8000e1c:	2f38      	cmp	r7, #56	; 0x38
 8000e1e:	dd00      	ble.n	8000e22 <__aeabi_dadd+0x62>
 8000e20:	e167      	b.n	80010f2 <__aeabi_dadd+0x332>
 8000e22:	2f1f      	cmp	r7, #31
 8000e24:	dd00      	ble.n	8000e28 <__aeabi_dadd+0x68>
 8000e26:	e1d6      	b.n	80011d6 <__aeabi_dadd+0x416>
 8000e28:	2220      	movs	r2, #32
 8000e2a:	464c      	mov	r4, r9
 8000e2c:	1bd2      	subs	r2, r2, r7
 8000e2e:	4094      	lsls	r4, r2
 8000e30:	46a2      	mov	sl, r4
 8000e32:	4644      	mov	r4, r8
 8000e34:	40fc      	lsrs	r4, r7
 8000e36:	0020      	movs	r0, r4
 8000e38:	4654      	mov	r4, sl
 8000e3a:	4304      	orrs	r4, r0
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	4090      	lsls	r0, r2
 8000e40:	1e42      	subs	r2, r0, #1
 8000e42:	4190      	sbcs	r0, r2
 8000e44:	464a      	mov	r2, r9
 8000e46:	40fa      	lsrs	r2, r7
 8000e48:	4304      	orrs	r4, r0
 8000e4a:	1a89      	subs	r1, r1, r2
 8000e4c:	1b1c      	subs	r4, r3, r4
 8000e4e:	42a3      	cmp	r3, r4
 8000e50:	4192      	sbcs	r2, r2
 8000e52:	4252      	negs	r2, r2
 8000e54:	1a8b      	subs	r3, r1, r2
 8000e56:	469a      	mov	sl, r3
 8000e58:	4653      	mov	r3, sl
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	d400      	bmi.n	8000e60 <__aeabi_dadd+0xa0>
 8000e5e:	e0d4      	b.n	800100a <__aeabi_dadd+0x24a>
 8000e60:	4653      	mov	r3, sl
 8000e62:	025a      	lsls	r2, r3, #9
 8000e64:	0a53      	lsrs	r3, r2, #9
 8000e66:	469a      	mov	sl, r3
 8000e68:	4653      	mov	r3, sl
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dadd+0xb0>
 8000e6e:	e104      	b.n	800107a <__aeabi_dadd+0x2ba>
 8000e70:	4650      	mov	r0, sl
 8000e72:	f001 febb 	bl	8002bec <__clzsi2>
 8000e76:	0003      	movs	r3, r0
 8000e78:	3b08      	subs	r3, #8
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	0020      	movs	r0, r4
 8000e7e:	1ad2      	subs	r2, r2, r3
 8000e80:	4651      	mov	r1, sl
 8000e82:	40d0      	lsrs	r0, r2
 8000e84:	4099      	lsls	r1, r3
 8000e86:	0002      	movs	r2, r0
 8000e88:	409c      	lsls	r4, r3
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	42b3      	cmp	r3, r6
 8000e8e:	da00      	bge.n	8000e92 <__aeabi_dadd+0xd2>
 8000e90:	e102      	b.n	8001098 <__aeabi_dadd+0x2d8>
 8000e92:	1b9b      	subs	r3, r3, r6
 8000e94:	1c59      	adds	r1, r3, #1
 8000e96:	291f      	cmp	r1, #31
 8000e98:	dd00      	ble.n	8000e9c <__aeabi_dadd+0xdc>
 8000e9a:	e0a7      	b.n	8000fec <__aeabi_dadd+0x22c>
 8000e9c:	2320      	movs	r3, #32
 8000e9e:	0010      	movs	r0, r2
 8000ea0:	0026      	movs	r6, r4
 8000ea2:	1a5b      	subs	r3, r3, r1
 8000ea4:	409c      	lsls	r4, r3
 8000ea6:	4098      	lsls	r0, r3
 8000ea8:	40ce      	lsrs	r6, r1
 8000eaa:	40ca      	lsrs	r2, r1
 8000eac:	1e63      	subs	r3, r4, #1
 8000eae:	419c      	sbcs	r4, r3
 8000eb0:	4330      	orrs	r0, r6
 8000eb2:	4692      	mov	sl, r2
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	4304      	orrs	r4, r0
 8000eb8:	0763      	lsls	r3, r4, #29
 8000eba:	d009      	beq.n	8000ed0 <__aeabi_dadd+0x110>
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	4023      	ands	r3, r4
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d005      	beq.n	8000ed0 <__aeabi_dadd+0x110>
 8000ec4:	1d23      	adds	r3, r4, #4
 8000ec6:	42a3      	cmp	r3, r4
 8000ec8:	41a4      	sbcs	r4, r4
 8000eca:	4264      	negs	r4, r4
 8000ecc:	44a2      	add	sl, r4
 8000ece:	001c      	movs	r4, r3
 8000ed0:	4653      	mov	r3, sl
 8000ed2:	021b      	lsls	r3, r3, #8
 8000ed4:	d400      	bmi.n	8000ed8 <__aeabi_dadd+0x118>
 8000ed6:	e09b      	b.n	8001010 <__aeabi_dadd+0x250>
 8000ed8:	4b94      	ldr	r3, [pc, #592]	; (800112c <__aeabi_dadd+0x36c>)
 8000eda:	3601      	adds	r6, #1
 8000edc:	429e      	cmp	r6, r3
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x122>
 8000ee0:	e0b8      	b.n	8001054 <__aeabi_dadd+0x294>
 8000ee2:	4653      	mov	r3, sl
 8000ee4:	4992      	ldr	r1, [pc, #584]	; (8001130 <__aeabi_dadd+0x370>)
 8000ee6:	08e4      	lsrs	r4, r4, #3
 8000ee8:	400b      	ands	r3, r1
 8000eea:	0019      	movs	r1, r3
 8000eec:	075b      	lsls	r3, r3, #29
 8000eee:	4323      	orrs	r3, r4
 8000ef0:	0572      	lsls	r2, r6, #21
 8000ef2:	024c      	lsls	r4, r1, #9
 8000ef4:	0b24      	lsrs	r4, r4, #12
 8000ef6:	0d52      	lsrs	r2, r2, #21
 8000ef8:	0512      	lsls	r2, r2, #20
 8000efa:	07ed      	lsls	r5, r5, #31
 8000efc:	4322      	orrs	r2, r4
 8000efe:	432a      	orrs	r2, r5
 8000f00:	0018      	movs	r0, r3
 8000f02:	0011      	movs	r1, r2
 8000f04:	bce0      	pop	{r5, r6, r7}
 8000f06:	46ba      	mov	sl, r7
 8000f08:	46b1      	mov	r9, r6
 8000f0a:	46a8      	mov	r8, r5
 8000f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f0e:	2f00      	cmp	r7, #0
 8000f10:	d048      	beq.n	8000fa4 <__aeabi_dadd+0x1e4>
 8000f12:	1b97      	subs	r7, r2, r6
 8000f14:	2e00      	cmp	r6, #0
 8000f16:	d000      	beq.n	8000f1a <__aeabi_dadd+0x15a>
 8000f18:	e10e      	b.n	8001138 <__aeabi_dadd+0x378>
 8000f1a:	000c      	movs	r4, r1
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_dadd+0x162>
 8000f20:	e1b7      	b.n	8001292 <__aeabi_dadd+0x4d2>
 8000f22:	1e7c      	subs	r4, r7, #1
 8000f24:	2f01      	cmp	r7, #1
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dadd+0x16a>
 8000f28:	e226      	b.n	8001378 <__aeabi_dadd+0x5b8>
 8000f2a:	4d80      	ldr	r5, [pc, #512]	; (800112c <__aeabi_dadd+0x36c>)
 8000f2c:	42af      	cmp	r7, r5
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dadd+0x172>
 8000f30:	e1d5      	b.n	80012de <__aeabi_dadd+0x51e>
 8000f32:	0027      	movs	r7, r4
 8000f34:	e107      	b.n	8001146 <__aeabi_dadd+0x386>
 8000f36:	2f00      	cmp	r7, #0
 8000f38:	dc00      	bgt.n	8000f3c <__aeabi_dadd+0x17c>
 8000f3a:	e0b2      	b.n	80010a2 <__aeabi_dadd+0x2e2>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d047      	beq.n	8000fd0 <__aeabi_dadd+0x210>
 8000f40:	4a7a      	ldr	r2, [pc, #488]	; (800112c <__aeabi_dadd+0x36c>)
 8000f42:	4296      	cmp	r6, r2
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x188>
 8000f46:	e089      	b.n	800105c <__aeabi_dadd+0x29c>
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	464c      	mov	r4, r9
 8000f4c:	0412      	lsls	r2, r2, #16
 8000f4e:	4314      	orrs	r4, r2
 8000f50:	46a1      	mov	r9, r4
 8000f52:	2f38      	cmp	r7, #56	; 0x38
 8000f54:	dc6b      	bgt.n	800102e <__aeabi_dadd+0x26e>
 8000f56:	2f1f      	cmp	r7, #31
 8000f58:	dc00      	bgt.n	8000f5c <__aeabi_dadd+0x19c>
 8000f5a:	e16e      	b.n	800123a <__aeabi_dadd+0x47a>
 8000f5c:	003a      	movs	r2, r7
 8000f5e:	4648      	mov	r0, r9
 8000f60:	3a20      	subs	r2, #32
 8000f62:	40d0      	lsrs	r0, r2
 8000f64:	4684      	mov	ip, r0
 8000f66:	2f20      	cmp	r7, #32
 8000f68:	d007      	beq.n	8000f7a <__aeabi_dadd+0x1ba>
 8000f6a:	2240      	movs	r2, #64	; 0x40
 8000f6c:	4648      	mov	r0, r9
 8000f6e:	1bd2      	subs	r2, r2, r7
 8000f70:	4090      	lsls	r0, r2
 8000f72:	0002      	movs	r2, r0
 8000f74:	4640      	mov	r0, r8
 8000f76:	4310      	orrs	r0, r2
 8000f78:	4680      	mov	r8, r0
 8000f7a:	4640      	mov	r0, r8
 8000f7c:	1e42      	subs	r2, r0, #1
 8000f7e:	4190      	sbcs	r0, r2
 8000f80:	4662      	mov	r2, ip
 8000f82:	0004      	movs	r4, r0
 8000f84:	4314      	orrs	r4, r2
 8000f86:	e057      	b.n	8001038 <__aeabi_dadd+0x278>
 8000f88:	464a      	mov	r2, r9
 8000f8a:	4302      	orrs	r2, r0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_dadd+0x1d0>
 8000f8e:	e103      	b.n	8001198 <__aeabi_dadd+0x3d8>
 8000f90:	1e7a      	subs	r2, r7, #1
 8000f92:	2f01      	cmp	r7, #1
 8000f94:	d100      	bne.n	8000f98 <__aeabi_dadd+0x1d8>
 8000f96:	e193      	b.n	80012c0 <__aeabi_dadd+0x500>
 8000f98:	4c64      	ldr	r4, [pc, #400]	; (800112c <__aeabi_dadd+0x36c>)
 8000f9a:	42a7      	cmp	r7, r4
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_dadd+0x1e0>
 8000f9e:	e18a      	b.n	80012b6 <__aeabi_dadd+0x4f6>
 8000fa0:	0017      	movs	r7, r2
 8000fa2:	e73b      	b.n	8000e1c <__aeabi_dadd+0x5c>
 8000fa4:	4c63      	ldr	r4, [pc, #396]	; (8001134 <__aeabi_dadd+0x374>)
 8000fa6:	1c72      	adds	r2, r6, #1
 8000fa8:	4222      	tst	r2, r4
 8000faa:	d000      	beq.n	8000fae <__aeabi_dadd+0x1ee>
 8000fac:	e0e0      	b.n	8001170 <__aeabi_dadd+0x3b0>
 8000fae:	000a      	movs	r2, r1
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_dadd+0x1f8>
 8000fb6:	e174      	b.n	80012a2 <__aeabi_dadd+0x4e2>
 8000fb8:	2a00      	cmp	r2, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dadd+0x1fe>
 8000fbc:	e1d0      	b.n	8001360 <__aeabi_dadd+0x5a0>
 8000fbe:	464a      	mov	r2, r9
 8000fc0:	4302      	orrs	r2, r0
 8000fc2:	d000      	beq.n	8000fc6 <__aeabi_dadd+0x206>
 8000fc4:	e1e3      	b.n	800138e <__aeabi_dadd+0x5ce>
 8000fc6:	074a      	lsls	r2, r1, #29
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	08c9      	lsrs	r1, r1, #3
 8000fce:	e029      	b.n	8001024 <__aeabi_dadd+0x264>
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_dadd+0x218>
 8000fd6:	e17d      	b.n	80012d4 <__aeabi_dadd+0x514>
 8000fd8:	1e7a      	subs	r2, r7, #1
 8000fda:	2f01      	cmp	r7, #1
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_dadd+0x220>
 8000fde:	e0e0      	b.n	80011a2 <__aeabi_dadd+0x3e2>
 8000fe0:	4c52      	ldr	r4, [pc, #328]	; (800112c <__aeabi_dadd+0x36c>)
 8000fe2:	42a7      	cmp	r7, r4
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dadd+0x228>
 8000fe6:	e166      	b.n	80012b6 <__aeabi_dadd+0x4f6>
 8000fe8:	0017      	movs	r7, r2
 8000fea:	e7b2      	b.n	8000f52 <__aeabi_dadd+0x192>
 8000fec:	0010      	movs	r0, r2
 8000fee:	3b1f      	subs	r3, #31
 8000ff0:	40d8      	lsrs	r0, r3
 8000ff2:	2920      	cmp	r1, #32
 8000ff4:	d003      	beq.n	8000ffe <__aeabi_dadd+0x23e>
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	1a5b      	subs	r3, r3, r1
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	4314      	orrs	r4, r2
 8000ffe:	1e63      	subs	r3, r4, #1
 8001000:	419c      	sbcs	r4, r3
 8001002:	2300      	movs	r3, #0
 8001004:	2600      	movs	r6, #0
 8001006:	469a      	mov	sl, r3
 8001008:	4304      	orrs	r4, r0
 800100a:	0763      	lsls	r3, r4, #29
 800100c:	d000      	beq.n	8001010 <__aeabi_dadd+0x250>
 800100e:	e755      	b.n	8000ebc <__aeabi_dadd+0xfc>
 8001010:	4652      	mov	r2, sl
 8001012:	08e3      	lsrs	r3, r4, #3
 8001014:	0752      	lsls	r2, r2, #29
 8001016:	4313      	orrs	r3, r2
 8001018:	4652      	mov	r2, sl
 800101a:	0037      	movs	r7, r6
 800101c:	08d1      	lsrs	r1, r2, #3
 800101e:	4a43      	ldr	r2, [pc, #268]	; (800112c <__aeabi_dadd+0x36c>)
 8001020:	4297      	cmp	r7, r2
 8001022:	d01f      	beq.n	8001064 <__aeabi_dadd+0x2a4>
 8001024:	0309      	lsls	r1, r1, #12
 8001026:	057a      	lsls	r2, r7, #21
 8001028:	0b0c      	lsrs	r4, r1, #12
 800102a:	0d52      	lsrs	r2, r2, #21
 800102c:	e764      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800102e:	4642      	mov	r2, r8
 8001030:	464c      	mov	r4, r9
 8001032:	4314      	orrs	r4, r2
 8001034:	1e62      	subs	r2, r4, #1
 8001036:	4194      	sbcs	r4, r2
 8001038:	18e4      	adds	r4, r4, r3
 800103a:	429c      	cmp	r4, r3
 800103c:	4192      	sbcs	r2, r2
 800103e:	4252      	negs	r2, r2
 8001040:	4692      	mov	sl, r2
 8001042:	448a      	add	sl, r1
 8001044:	4653      	mov	r3, sl
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	d5df      	bpl.n	800100a <__aeabi_dadd+0x24a>
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <__aeabi_dadd+0x36c>)
 800104c:	3601      	adds	r6, #1
 800104e:	429e      	cmp	r6, r3
 8001050:	d000      	beq.n	8001054 <__aeabi_dadd+0x294>
 8001052:	e0b3      	b.n	80011bc <__aeabi_dadd+0x3fc>
 8001054:	0032      	movs	r2, r6
 8001056:	2400      	movs	r4, #0
 8001058:	2300      	movs	r3, #0
 800105a:	e74d      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800105c:	074a      	lsls	r2, r1, #29
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	4313      	orrs	r3, r2
 8001062:	08c9      	lsrs	r1, r1, #3
 8001064:	001a      	movs	r2, r3
 8001066:	430a      	orrs	r2, r1
 8001068:	d100      	bne.n	800106c <__aeabi_dadd+0x2ac>
 800106a:	e200      	b.n	800146e <__aeabi_dadd+0x6ae>
 800106c:	2480      	movs	r4, #128	; 0x80
 800106e:	0324      	lsls	r4, r4, #12
 8001070:	430c      	orrs	r4, r1
 8001072:	0324      	lsls	r4, r4, #12
 8001074:	4a2d      	ldr	r2, [pc, #180]	; (800112c <__aeabi_dadd+0x36c>)
 8001076:	0b24      	lsrs	r4, r4, #12
 8001078:	e73e      	b.n	8000ef8 <__aeabi_dadd+0x138>
 800107a:	0020      	movs	r0, r4
 800107c:	f001 fdb6 	bl	8002bec <__clzsi2>
 8001080:	0003      	movs	r3, r0
 8001082:	3318      	adds	r3, #24
 8001084:	2b1f      	cmp	r3, #31
 8001086:	dc00      	bgt.n	800108a <__aeabi_dadd+0x2ca>
 8001088:	e6f7      	b.n	8000e7a <__aeabi_dadd+0xba>
 800108a:	0022      	movs	r2, r4
 800108c:	3808      	subs	r0, #8
 800108e:	4082      	lsls	r2, r0
 8001090:	2400      	movs	r4, #0
 8001092:	42b3      	cmp	r3, r6
 8001094:	db00      	blt.n	8001098 <__aeabi_dadd+0x2d8>
 8001096:	e6fc      	b.n	8000e92 <__aeabi_dadd+0xd2>
 8001098:	1af6      	subs	r6, r6, r3
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <__aeabi_dadd+0x370>)
 800109c:	401a      	ands	r2, r3
 800109e:	4692      	mov	sl, r2
 80010a0:	e70a      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80010a2:	2f00      	cmp	r7, #0
 80010a4:	d02b      	beq.n	80010fe <__aeabi_dadd+0x33e>
 80010a6:	1b97      	subs	r7, r2, r6
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x2ee>
 80010ac:	e0b8      	b.n	8001220 <__aeabi_dadd+0x460>
 80010ae:	4c1f      	ldr	r4, [pc, #124]	; (800112c <__aeabi_dadd+0x36c>)
 80010b0:	42a2      	cmp	r2, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dadd+0x2f6>
 80010b4:	e11c      	b.n	80012f0 <__aeabi_dadd+0x530>
 80010b6:	2480      	movs	r4, #128	; 0x80
 80010b8:	0424      	lsls	r4, r4, #16
 80010ba:	4321      	orrs	r1, r4
 80010bc:	2f38      	cmp	r7, #56	; 0x38
 80010be:	dd00      	ble.n	80010c2 <__aeabi_dadd+0x302>
 80010c0:	e11e      	b.n	8001300 <__aeabi_dadd+0x540>
 80010c2:	2f1f      	cmp	r7, #31
 80010c4:	dd00      	ble.n	80010c8 <__aeabi_dadd+0x308>
 80010c6:	e19e      	b.n	8001406 <__aeabi_dadd+0x646>
 80010c8:	2620      	movs	r6, #32
 80010ca:	000c      	movs	r4, r1
 80010cc:	1bf6      	subs	r6, r6, r7
 80010ce:	0018      	movs	r0, r3
 80010d0:	40b3      	lsls	r3, r6
 80010d2:	40b4      	lsls	r4, r6
 80010d4:	40f8      	lsrs	r0, r7
 80010d6:	1e5e      	subs	r6, r3, #1
 80010d8:	41b3      	sbcs	r3, r6
 80010da:	40f9      	lsrs	r1, r7
 80010dc:	4304      	orrs	r4, r0
 80010de:	431c      	orrs	r4, r3
 80010e0:	4489      	add	r9, r1
 80010e2:	4444      	add	r4, r8
 80010e4:	4544      	cmp	r4, r8
 80010e6:	419b      	sbcs	r3, r3
 80010e8:	425b      	negs	r3, r3
 80010ea:	444b      	add	r3, r9
 80010ec:	469a      	mov	sl, r3
 80010ee:	0016      	movs	r6, r2
 80010f0:	e7a8      	b.n	8001044 <__aeabi_dadd+0x284>
 80010f2:	4642      	mov	r2, r8
 80010f4:	464c      	mov	r4, r9
 80010f6:	4314      	orrs	r4, r2
 80010f8:	1e62      	subs	r2, r4, #1
 80010fa:	4194      	sbcs	r4, r2
 80010fc:	e6a6      	b.n	8000e4c <__aeabi_dadd+0x8c>
 80010fe:	4c0d      	ldr	r4, [pc, #52]	; (8001134 <__aeabi_dadd+0x374>)
 8001100:	1c72      	adds	r2, r6, #1
 8001102:	4222      	tst	r2, r4
 8001104:	d000      	beq.n	8001108 <__aeabi_dadd+0x348>
 8001106:	e0a8      	b.n	800125a <__aeabi_dadd+0x49a>
 8001108:	000a      	movs	r2, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	2e00      	cmp	r6, #0
 800110e:	d000      	beq.n	8001112 <__aeabi_dadd+0x352>
 8001110:	e10a      	b.n	8001328 <__aeabi_dadd+0x568>
 8001112:	2a00      	cmp	r2, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x358>
 8001116:	e15e      	b.n	80013d6 <__aeabi_dadd+0x616>
 8001118:	464a      	mov	r2, r9
 800111a:	4302      	orrs	r2, r0
 800111c:	d000      	beq.n	8001120 <__aeabi_dadd+0x360>
 800111e:	e161      	b.n	80013e4 <__aeabi_dadd+0x624>
 8001120:	074a      	lsls	r2, r1, #29
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	4313      	orrs	r3, r2
 8001126:	08c9      	lsrs	r1, r1, #3
 8001128:	e77c      	b.n	8001024 <__aeabi_dadd+0x264>
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	000007ff 	.word	0x000007ff
 8001130:	ff7fffff 	.word	0xff7fffff
 8001134:	000007fe 	.word	0x000007fe
 8001138:	4ccf      	ldr	r4, [pc, #828]	; (8001478 <__aeabi_dadd+0x6b8>)
 800113a:	42a2      	cmp	r2, r4
 800113c:	d100      	bne.n	8001140 <__aeabi_dadd+0x380>
 800113e:	e0ce      	b.n	80012de <__aeabi_dadd+0x51e>
 8001140:	2480      	movs	r4, #128	; 0x80
 8001142:	0424      	lsls	r4, r4, #16
 8001144:	4321      	orrs	r1, r4
 8001146:	2f38      	cmp	r7, #56	; 0x38
 8001148:	dc5b      	bgt.n	8001202 <__aeabi_dadd+0x442>
 800114a:	2f1f      	cmp	r7, #31
 800114c:	dd00      	ble.n	8001150 <__aeabi_dadd+0x390>
 800114e:	e0dc      	b.n	800130a <__aeabi_dadd+0x54a>
 8001150:	2520      	movs	r5, #32
 8001152:	000c      	movs	r4, r1
 8001154:	1bed      	subs	r5, r5, r7
 8001156:	001e      	movs	r6, r3
 8001158:	40ab      	lsls	r3, r5
 800115a:	40ac      	lsls	r4, r5
 800115c:	40fe      	lsrs	r6, r7
 800115e:	1e5d      	subs	r5, r3, #1
 8001160:	41ab      	sbcs	r3, r5
 8001162:	4334      	orrs	r4, r6
 8001164:	40f9      	lsrs	r1, r7
 8001166:	431c      	orrs	r4, r3
 8001168:	464b      	mov	r3, r9
 800116a:	1a5b      	subs	r3, r3, r1
 800116c:	4699      	mov	r9, r3
 800116e:	e04c      	b.n	800120a <__aeabi_dadd+0x44a>
 8001170:	464a      	mov	r2, r9
 8001172:	1a1c      	subs	r4, r3, r0
 8001174:	1a88      	subs	r0, r1, r2
 8001176:	42a3      	cmp	r3, r4
 8001178:	4192      	sbcs	r2, r2
 800117a:	4252      	negs	r2, r2
 800117c:	4692      	mov	sl, r2
 800117e:	0002      	movs	r2, r0
 8001180:	4650      	mov	r0, sl
 8001182:	1a12      	subs	r2, r2, r0
 8001184:	4692      	mov	sl, r2
 8001186:	0212      	lsls	r2, r2, #8
 8001188:	d478      	bmi.n	800127c <__aeabi_dadd+0x4bc>
 800118a:	4653      	mov	r3, sl
 800118c:	4323      	orrs	r3, r4
 800118e:	d000      	beq.n	8001192 <__aeabi_dadd+0x3d2>
 8001190:	e66a      	b.n	8000e68 <__aeabi_dadd+0xa8>
 8001192:	2100      	movs	r1, #0
 8001194:	2500      	movs	r5, #0
 8001196:	e745      	b.n	8001024 <__aeabi_dadd+0x264>
 8001198:	074a      	lsls	r2, r1, #29
 800119a:	08db      	lsrs	r3, r3, #3
 800119c:	4313      	orrs	r3, r2
 800119e:	08c9      	lsrs	r1, r1, #3
 80011a0:	e73d      	b.n	800101e <__aeabi_dadd+0x25e>
 80011a2:	181c      	adds	r4, r3, r0
 80011a4:	429c      	cmp	r4, r3
 80011a6:	419b      	sbcs	r3, r3
 80011a8:	4449      	add	r1, r9
 80011aa:	468a      	mov	sl, r1
 80011ac:	425b      	negs	r3, r3
 80011ae:	449a      	add	sl, r3
 80011b0:	4653      	mov	r3, sl
 80011b2:	2601      	movs	r6, #1
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	d400      	bmi.n	80011ba <__aeabi_dadd+0x3fa>
 80011b8:	e727      	b.n	800100a <__aeabi_dadd+0x24a>
 80011ba:	2602      	movs	r6, #2
 80011bc:	4652      	mov	r2, sl
 80011be:	4baf      	ldr	r3, [pc, #700]	; (800147c <__aeabi_dadd+0x6bc>)
 80011c0:	2101      	movs	r1, #1
 80011c2:	401a      	ands	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	4021      	ands	r1, r4
 80011c8:	0862      	lsrs	r2, r4, #1
 80011ca:	430a      	orrs	r2, r1
 80011cc:	07dc      	lsls	r4, r3, #31
 80011ce:	085b      	lsrs	r3, r3, #1
 80011d0:	469a      	mov	sl, r3
 80011d2:	4314      	orrs	r4, r2
 80011d4:	e670      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80011d6:	003a      	movs	r2, r7
 80011d8:	464c      	mov	r4, r9
 80011da:	3a20      	subs	r2, #32
 80011dc:	40d4      	lsrs	r4, r2
 80011de:	46a4      	mov	ip, r4
 80011e0:	2f20      	cmp	r7, #32
 80011e2:	d007      	beq.n	80011f4 <__aeabi_dadd+0x434>
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	4648      	mov	r0, r9
 80011e8:	1bd2      	subs	r2, r2, r7
 80011ea:	4090      	lsls	r0, r2
 80011ec:	0002      	movs	r2, r0
 80011ee:	4640      	mov	r0, r8
 80011f0:	4310      	orrs	r0, r2
 80011f2:	4680      	mov	r8, r0
 80011f4:	4640      	mov	r0, r8
 80011f6:	1e42      	subs	r2, r0, #1
 80011f8:	4190      	sbcs	r0, r2
 80011fa:	4662      	mov	r2, ip
 80011fc:	0004      	movs	r4, r0
 80011fe:	4314      	orrs	r4, r2
 8001200:	e624      	b.n	8000e4c <__aeabi_dadd+0x8c>
 8001202:	4319      	orrs	r1, r3
 8001204:	000c      	movs	r4, r1
 8001206:	1e63      	subs	r3, r4, #1
 8001208:	419c      	sbcs	r4, r3
 800120a:	4643      	mov	r3, r8
 800120c:	1b1c      	subs	r4, r3, r4
 800120e:	45a0      	cmp	r8, r4
 8001210:	419b      	sbcs	r3, r3
 8001212:	4649      	mov	r1, r9
 8001214:	425b      	negs	r3, r3
 8001216:	1acb      	subs	r3, r1, r3
 8001218:	469a      	mov	sl, r3
 800121a:	4665      	mov	r5, ip
 800121c:	0016      	movs	r6, r2
 800121e:	e61b      	b.n	8000e58 <__aeabi_dadd+0x98>
 8001220:	000c      	movs	r4, r1
 8001222:	431c      	orrs	r4, r3
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x468>
 8001226:	e0c7      	b.n	80013b8 <__aeabi_dadd+0x5f8>
 8001228:	1e7c      	subs	r4, r7, #1
 800122a:	2f01      	cmp	r7, #1
 800122c:	d100      	bne.n	8001230 <__aeabi_dadd+0x470>
 800122e:	e0f9      	b.n	8001424 <__aeabi_dadd+0x664>
 8001230:	4e91      	ldr	r6, [pc, #580]	; (8001478 <__aeabi_dadd+0x6b8>)
 8001232:	42b7      	cmp	r7, r6
 8001234:	d05c      	beq.n	80012f0 <__aeabi_dadd+0x530>
 8001236:	0027      	movs	r7, r4
 8001238:	e740      	b.n	80010bc <__aeabi_dadd+0x2fc>
 800123a:	2220      	movs	r2, #32
 800123c:	464c      	mov	r4, r9
 800123e:	4640      	mov	r0, r8
 8001240:	1bd2      	subs	r2, r2, r7
 8001242:	4094      	lsls	r4, r2
 8001244:	40f8      	lsrs	r0, r7
 8001246:	4304      	orrs	r4, r0
 8001248:	4640      	mov	r0, r8
 800124a:	4090      	lsls	r0, r2
 800124c:	1e42      	subs	r2, r0, #1
 800124e:	4190      	sbcs	r0, r2
 8001250:	464a      	mov	r2, r9
 8001252:	40fa      	lsrs	r2, r7
 8001254:	4304      	orrs	r4, r0
 8001256:	1889      	adds	r1, r1, r2
 8001258:	e6ee      	b.n	8001038 <__aeabi_dadd+0x278>
 800125a:	4c87      	ldr	r4, [pc, #540]	; (8001478 <__aeabi_dadd+0x6b8>)
 800125c:	42a2      	cmp	r2, r4
 800125e:	d100      	bne.n	8001262 <__aeabi_dadd+0x4a2>
 8001260:	e6f9      	b.n	8001056 <__aeabi_dadd+0x296>
 8001262:	1818      	adds	r0, r3, r0
 8001264:	4298      	cmp	r0, r3
 8001266:	419b      	sbcs	r3, r3
 8001268:	4449      	add	r1, r9
 800126a:	425b      	negs	r3, r3
 800126c:	18cb      	adds	r3, r1, r3
 800126e:	07dc      	lsls	r4, r3, #31
 8001270:	0840      	lsrs	r0, r0, #1
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	469a      	mov	sl, r3
 8001276:	0016      	movs	r6, r2
 8001278:	4304      	orrs	r4, r0
 800127a:	e6c6      	b.n	800100a <__aeabi_dadd+0x24a>
 800127c:	4642      	mov	r2, r8
 800127e:	1ad4      	subs	r4, r2, r3
 8001280:	45a0      	cmp	r8, r4
 8001282:	4180      	sbcs	r0, r0
 8001284:	464b      	mov	r3, r9
 8001286:	4240      	negs	r0, r0
 8001288:	1a59      	subs	r1, r3, r1
 800128a:	1a0b      	subs	r3, r1, r0
 800128c:	469a      	mov	sl, r3
 800128e:	4665      	mov	r5, ip
 8001290:	e5ea      	b.n	8000e68 <__aeabi_dadd+0xa8>
 8001292:	464b      	mov	r3, r9
 8001294:	464a      	mov	r2, r9
 8001296:	08c0      	lsrs	r0, r0, #3
 8001298:	075b      	lsls	r3, r3, #29
 800129a:	4665      	mov	r5, ip
 800129c:	4303      	orrs	r3, r0
 800129e:	08d1      	lsrs	r1, r2, #3
 80012a0:	e6bd      	b.n	800101e <__aeabi_dadd+0x25e>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d000      	beq.n	80012a8 <__aeabi_dadd+0x4e8>
 80012a6:	e08e      	b.n	80013c6 <__aeabi_dadd+0x606>
 80012a8:	464b      	mov	r3, r9
 80012aa:	4303      	orrs	r3, r0
 80012ac:	d117      	bne.n	80012de <__aeabi_dadd+0x51e>
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	2500      	movs	r5, #0
 80012b2:	0309      	lsls	r1, r1, #12
 80012b4:	e6da      	b.n	800106c <__aeabi_dadd+0x2ac>
 80012b6:	074a      	lsls	r2, r1, #29
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	08c9      	lsrs	r1, r1, #3
 80012be:	e6d1      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80012c0:	1a1c      	subs	r4, r3, r0
 80012c2:	464a      	mov	r2, r9
 80012c4:	42a3      	cmp	r3, r4
 80012c6:	419b      	sbcs	r3, r3
 80012c8:	1a89      	subs	r1, r1, r2
 80012ca:	425b      	negs	r3, r3
 80012cc:	1acb      	subs	r3, r1, r3
 80012ce:	469a      	mov	sl, r3
 80012d0:	2601      	movs	r6, #1
 80012d2:	e5c1      	b.n	8000e58 <__aeabi_dadd+0x98>
 80012d4:	074a      	lsls	r2, r1, #29
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	4313      	orrs	r3, r2
 80012da:	08c9      	lsrs	r1, r1, #3
 80012dc:	e69f      	b.n	800101e <__aeabi_dadd+0x25e>
 80012de:	4643      	mov	r3, r8
 80012e0:	08d8      	lsrs	r0, r3, #3
 80012e2:	464b      	mov	r3, r9
 80012e4:	464a      	mov	r2, r9
 80012e6:	075b      	lsls	r3, r3, #29
 80012e8:	4665      	mov	r5, ip
 80012ea:	4303      	orrs	r3, r0
 80012ec:	08d1      	lsrs	r1, r2, #3
 80012ee:	e6b9      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80012f0:	4643      	mov	r3, r8
 80012f2:	08d8      	lsrs	r0, r3, #3
 80012f4:	464b      	mov	r3, r9
 80012f6:	464a      	mov	r2, r9
 80012f8:	075b      	lsls	r3, r3, #29
 80012fa:	4303      	orrs	r3, r0
 80012fc:	08d1      	lsrs	r1, r2, #3
 80012fe:	e6b1      	b.n	8001064 <__aeabi_dadd+0x2a4>
 8001300:	4319      	orrs	r1, r3
 8001302:	000c      	movs	r4, r1
 8001304:	1e63      	subs	r3, r4, #1
 8001306:	419c      	sbcs	r4, r3
 8001308:	e6eb      	b.n	80010e2 <__aeabi_dadd+0x322>
 800130a:	003c      	movs	r4, r7
 800130c:	000d      	movs	r5, r1
 800130e:	3c20      	subs	r4, #32
 8001310:	40e5      	lsrs	r5, r4
 8001312:	2f20      	cmp	r7, #32
 8001314:	d003      	beq.n	800131e <__aeabi_dadd+0x55e>
 8001316:	2440      	movs	r4, #64	; 0x40
 8001318:	1be4      	subs	r4, r4, r7
 800131a:	40a1      	lsls	r1, r4
 800131c:	430b      	orrs	r3, r1
 800131e:	001c      	movs	r4, r3
 8001320:	1e63      	subs	r3, r4, #1
 8001322:	419c      	sbcs	r4, r3
 8001324:	432c      	orrs	r4, r5
 8001326:	e770      	b.n	800120a <__aeabi_dadd+0x44a>
 8001328:	2a00      	cmp	r2, #0
 800132a:	d0e1      	beq.n	80012f0 <__aeabi_dadd+0x530>
 800132c:	464a      	mov	r2, r9
 800132e:	4302      	orrs	r2, r0
 8001330:	d0c1      	beq.n	80012b6 <__aeabi_dadd+0x4f6>
 8001332:	074a      	lsls	r2, r1, #29
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	08c9      	lsrs	r1, r1, #3
 800133c:	0312      	lsls	r2, r2, #12
 800133e:	4211      	tst	r1, r2
 8001340:	d008      	beq.n	8001354 <__aeabi_dadd+0x594>
 8001342:	4648      	mov	r0, r9
 8001344:	08c4      	lsrs	r4, r0, #3
 8001346:	4214      	tst	r4, r2
 8001348:	d104      	bne.n	8001354 <__aeabi_dadd+0x594>
 800134a:	4643      	mov	r3, r8
 800134c:	0021      	movs	r1, r4
 800134e:	08db      	lsrs	r3, r3, #3
 8001350:	0742      	lsls	r2, r0, #29
 8001352:	4313      	orrs	r3, r2
 8001354:	0f5a      	lsrs	r2, r3, #29
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	0752      	lsls	r2, r2, #29
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	4313      	orrs	r3, r2
 800135e:	e681      	b.n	8001064 <__aeabi_dadd+0x2a4>
 8001360:	464b      	mov	r3, r9
 8001362:	4303      	orrs	r3, r0
 8001364:	d100      	bne.n	8001368 <__aeabi_dadd+0x5a8>
 8001366:	e714      	b.n	8001192 <__aeabi_dadd+0x3d2>
 8001368:	464b      	mov	r3, r9
 800136a:	464a      	mov	r2, r9
 800136c:	08c0      	lsrs	r0, r0, #3
 800136e:	075b      	lsls	r3, r3, #29
 8001370:	4665      	mov	r5, ip
 8001372:	4303      	orrs	r3, r0
 8001374:	08d1      	lsrs	r1, r2, #3
 8001376:	e655      	b.n	8001024 <__aeabi_dadd+0x264>
 8001378:	1ac4      	subs	r4, r0, r3
 800137a:	45a0      	cmp	r8, r4
 800137c:	4180      	sbcs	r0, r0
 800137e:	464b      	mov	r3, r9
 8001380:	4240      	negs	r0, r0
 8001382:	1a59      	subs	r1, r3, r1
 8001384:	1a0b      	subs	r3, r1, r0
 8001386:	469a      	mov	sl, r3
 8001388:	4665      	mov	r5, ip
 800138a:	2601      	movs	r6, #1
 800138c:	e564      	b.n	8000e58 <__aeabi_dadd+0x98>
 800138e:	1a1c      	subs	r4, r3, r0
 8001390:	464a      	mov	r2, r9
 8001392:	42a3      	cmp	r3, r4
 8001394:	4180      	sbcs	r0, r0
 8001396:	1a8a      	subs	r2, r1, r2
 8001398:	4240      	negs	r0, r0
 800139a:	1a12      	subs	r2, r2, r0
 800139c:	4692      	mov	sl, r2
 800139e:	0212      	lsls	r2, r2, #8
 80013a0:	d549      	bpl.n	8001436 <__aeabi_dadd+0x676>
 80013a2:	4642      	mov	r2, r8
 80013a4:	1ad4      	subs	r4, r2, r3
 80013a6:	45a0      	cmp	r8, r4
 80013a8:	4180      	sbcs	r0, r0
 80013aa:	464b      	mov	r3, r9
 80013ac:	4240      	negs	r0, r0
 80013ae:	1a59      	subs	r1, r3, r1
 80013b0:	1a0b      	subs	r3, r1, r0
 80013b2:	469a      	mov	sl, r3
 80013b4:	4665      	mov	r5, ip
 80013b6:	e57f      	b.n	8000eb8 <__aeabi_dadd+0xf8>
 80013b8:	464b      	mov	r3, r9
 80013ba:	464a      	mov	r2, r9
 80013bc:	08c0      	lsrs	r0, r0, #3
 80013be:	075b      	lsls	r3, r3, #29
 80013c0:	4303      	orrs	r3, r0
 80013c2:	08d1      	lsrs	r1, r2, #3
 80013c4:	e62b      	b.n	800101e <__aeabi_dadd+0x25e>
 80013c6:	464a      	mov	r2, r9
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	4302      	orrs	r2, r0
 80013cc:	d138      	bne.n	8001440 <__aeabi_dadd+0x680>
 80013ce:	074a      	lsls	r2, r1, #29
 80013d0:	4313      	orrs	r3, r2
 80013d2:	08c9      	lsrs	r1, r1, #3
 80013d4:	e646      	b.n	8001064 <__aeabi_dadd+0x2a4>
 80013d6:	464b      	mov	r3, r9
 80013d8:	464a      	mov	r2, r9
 80013da:	08c0      	lsrs	r0, r0, #3
 80013dc:	075b      	lsls	r3, r3, #29
 80013de:	4303      	orrs	r3, r0
 80013e0:	08d1      	lsrs	r1, r2, #3
 80013e2:	e61f      	b.n	8001024 <__aeabi_dadd+0x264>
 80013e4:	181c      	adds	r4, r3, r0
 80013e6:	429c      	cmp	r4, r3
 80013e8:	419b      	sbcs	r3, r3
 80013ea:	4449      	add	r1, r9
 80013ec:	468a      	mov	sl, r1
 80013ee:	425b      	negs	r3, r3
 80013f0:	449a      	add	sl, r3
 80013f2:	4653      	mov	r3, sl
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	d400      	bmi.n	80013fa <__aeabi_dadd+0x63a>
 80013f8:	e607      	b.n	800100a <__aeabi_dadd+0x24a>
 80013fa:	4652      	mov	r2, sl
 80013fc:	4b1f      	ldr	r3, [pc, #124]	; (800147c <__aeabi_dadd+0x6bc>)
 80013fe:	2601      	movs	r6, #1
 8001400:	401a      	ands	r2, r3
 8001402:	4692      	mov	sl, r2
 8001404:	e601      	b.n	800100a <__aeabi_dadd+0x24a>
 8001406:	003c      	movs	r4, r7
 8001408:	000e      	movs	r6, r1
 800140a:	3c20      	subs	r4, #32
 800140c:	40e6      	lsrs	r6, r4
 800140e:	2f20      	cmp	r7, #32
 8001410:	d003      	beq.n	800141a <__aeabi_dadd+0x65a>
 8001412:	2440      	movs	r4, #64	; 0x40
 8001414:	1be4      	subs	r4, r4, r7
 8001416:	40a1      	lsls	r1, r4
 8001418:	430b      	orrs	r3, r1
 800141a:	001c      	movs	r4, r3
 800141c:	1e63      	subs	r3, r4, #1
 800141e:	419c      	sbcs	r4, r3
 8001420:	4334      	orrs	r4, r6
 8001422:	e65e      	b.n	80010e2 <__aeabi_dadd+0x322>
 8001424:	4443      	add	r3, r8
 8001426:	4283      	cmp	r3, r0
 8001428:	4180      	sbcs	r0, r0
 800142a:	4449      	add	r1, r9
 800142c:	468a      	mov	sl, r1
 800142e:	4240      	negs	r0, r0
 8001430:	001c      	movs	r4, r3
 8001432:	4482      	add	sl, r0
 8001434:	e6bc      	b.n	80011b0 <__aeabi_dadd+0x3f0>
 8001436:	4653      	mov	r3, sl
 8001438:	4323      	orrs	r3, r4
 800143a:	d100      	bne.n	800143e <__aeabi_dadd+0x67e>
 800143c:	e6a9      	b.n	8001192 <__aeabi_dadd+0x3d2>
 800143e:	e5e4      	b.n	800100a <__aeabi_dadd+0x24a>
 8001440:	074a      	lsls	r2, r1, #29
 8001442:	4313      	orrs	r3, r2
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	08c9      	lsrs	r1, r1, #3
 8001448:	0312      	lsls	r2, r2, #12
 800144a:	4211      	tst	r1, r2
 800144c:	d009      	beq.n	8001462 <__aeabi_dadd+0x6a2>
 800144e:	4648      	mov	r0, r9
 8001450:	08c4      	lsrs	r4, r0, #3
 8001452:	4214      	tst	r4, r2
 8001454:	d105      	bne.n	8001462 <__aeabi_dadd+0x6a2>
 8001456:	4643      	mov	r3, r8
 8001458:	4665      	mov	r5, ip
 800145a:	0021      	movs	r1, r4
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	0742      	lsls	r2, r0, #29
 8001460:	4313      	orrs	r3, r2
 8001462:	0f5a      	lsrs	r2, r3, #29
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	08db      	lsrs	r3, r3, #3
 8001468:	0752      	lsls	r2, r2, #29
 800146a:	4313      	orrs	r3, r2
 800146c:	e5fa      	b.n	8001064 <__aeabi_dadd+0x2a4>
 800146e:	2300      	movs	r3, #0
 8001470:	4a01      	ldr	r2, [pc, #4]	; (8001478 <__aeabi_dadd+0x6b8>)
 8001472:	001c      	movs	r4, r3
 8001474:	e540      	b.n	8000ef8 <__aeabi_dadd+0x138>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff
 800147c:	ff7fffff 	.word	0xff7fffff

08001480 <__aeabi_ddiv>:
 8001480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001482:	4657      	mov	r7, sl
 8001484:	464e      	mov	r6, r9
 8001486:	4645      	mov	r5, r8
 8001488:	46de      	mov	lr, fp
 800148a:	b5e0      	push	{r5, r6, r7, lr}
 800148c:	030c      	lsls	r4, r1, #12
 800148e:	001f      	movs	r7, r3
 8001490:	004b      	lsls	r3, r1, #1
 8001492:	4681      	mov	r9, r0
 8001494:	4692      	mov	sl, r2
 8001496:	0005      	movs	r5, r0
 8001498:	b085      	sub	sp, #20
 800149a:	0b24      	lsrs	r4, r4, #12
 800149c:	0d5b      	lsrs	r3, r3, #21
 800149e:	0fce      	lsrs	r6, r1, #31
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_ddiv+0x26>
 80014a4:	e152      	b.n	800174c <__aeabi_ddiv+0x2cc>
 80014a6:	4ad2      	ldr	r2, [pc, #840]	; (80017f0 <__aeabi_ddiv+0x370>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d100      	bne.n	80014ae <__aeabi_ddiv+0x2e>
 80014ac:	e16e      	b.n	800178c <__aeabi_ddiv+0x30c>
 80014ae:	0f42      	lsrs	r2, r0, #29
 80014b0:	00e4      	lsls	r4, r4, #3
 80014b2:	4314      	orrs	r4, r2
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	0412      	lsls	r2, r2, #16
 80014b8:	4322      	orrs	r2, r4
 80014ba:	4690      	mov	r8, r2
 80014bc:	4acd      	ldr	r2, [pc, #820]	; (80017f4 <__aeabi_ddiv+0x374>)
 80014be:	00c5      	lsls	r5, r0, #3
 80014c0:	4693      	mov	fp, r2
 80014c2:	449b      	add	fp, r3
 80014c4:	2300      	movs	r3, #0
 80014c6:	4699      	mov	r9, r3
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	033c      	lsls	r4, r7, #12
 80014cc:	007b      	lsls	r3, r7, #1
 80014ce:	4650      	mov	r0, sl
 80014d0:	0b24      	lsrs	r4, r4, #12
 80014d2:	0d5b      	lsrs	r3, r3, #21
 80014d4:	0fff      	lsrs	r7, r7, #31
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d100      	bne.n	80014dc <__aeabi_ddiv+0x5c>
 80014da:	e11a      	b.n	8001712 <__aeabi_ddiv+0x292>
 80014dc:	4ac4      	ldr	r2, [pc, #784]	; (80017f0 <__aeabi_ddiv+0x370>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d100      	bne.n	80014e4 <__aeabi_ddiv+0x64>
 80014e2:	e15e      	b.n	80017a2 <__aeabi_ddiv+0x322>
 80014e4:	0f42      	lsrs	r2, r0, #29
 80014e6:	00e4      	lsls	r4, r4, #3
 80014e8:	4322      	orrs	r2, r4
 80014ea:	2480      	movs	r4, #128	; 0x80
 80014ec:	0424      	lsls	r4, r4, #16
 80014ee:	4314      	orrs	r4, r2
 80014f0:	4ac0      	ldr	r2, [pc, #768]	; (80017f4 <__aeabi_ddiv+0x374>)
 80014f2:	00c1      	lsls	r1, r0, #3
 80014f4:	4694      	mov	ip, r2
 80014f6:	465a      	mov	r2, fp
 80014f8:	4463      	add	r3, ip
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	469b      	mov	fp, r3
 80014fe:	2000      	movs	r0, #0
 8001500:	0033      	movs	r3, r6
 8001502:	407b      	eors	r3, r7
 8001504:	469a      	mov	sl, r3
 8001506:	464b      	mov	r3, r9
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d827      	bhi.n	800155c <__aeabi_ddiv+0xdc>
 800150c:	4aba      	ldr	r2, [pc, #744]	; (80017f8 <__aeabi_ddiv+0x378>)
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	58d3      	ldr	r3, [r2, r3]
 8001512:	469f      	mov	pc, r3
 8001514:	46b2      	mov	sl, r6
 8001516:	9b00      	ldr	r3, [sp, #0]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d016      	beq.n	800154a <__aeabi_ddiv+0xca>
 800151c:	2b03      	cmp	r3, #3
 800151e:	d100      	bne.n	8001522 <__aeabi_ddiv+0xa2>
 8001520:	e287      	b.n	8001a32 <__aeabi_ddiv+0x5b2>
 8001522:	2b01      	cmp	r3, #1
 8001524:	d000      	beq.n	8001528 <__aeabi_ddiv+0xa8>
 8001526:	e0d5      	b.n	80016d4 <__aeabi_ddiv+0x254>
 8001528:	2300      	movs	r3, #0
 800152a:	2200      	movs	r2, #0
 800152c:	2500      	movs	r5, #0
 800152e:	051b      	lsls	r3, r3, #20
 8001530:	4313      	orrs	r3, r2
 8001532:	4652      	mov	r2, sl
 8001534:	07d2      	lsls	r2, r2, #31
 8001536:	4313      	orrs	r3, r2
 8001538:	0028      	movs	r0, r5
 800153a:	0019      	movs	r1, r3
 800153c:	b005      	add	sp, #20
 800153e:	bcf0      	pop	{r4, r5, r6, r7}
 8001540:	46bb      	mov	fp, r7
 8001542:	46b2      	mov	sl, r6
 8001544:	46a9      	mov	r9, r5
 8001546:	46a0      	mov	r8, r4
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	2200      	movs	r2, #0
 800154c:	2500      	movs	r5, #0
 800154e:	4ba8      	ldr	r3, [pc, #672]	; (80017f0 <__aeabi_ddiv+0x370>)
 8001550:	e7ed      	b.n	800152e <__aeabi_ddiv+0xae>
 8001552:	46ba      	mov	sl, r7
 8001554:	46a0      	mov	r8, r4
 8001556:	000d      	movs	r5, r1
 8001558:	9000      	str	r0, [sp, #0]
 800155a:	e7dc      	b.n	8001516 <__aeabi_ddiv+0x96>
 800155c:	4544      	cmp	r4, r8
 800155e:	d200      	bcs.n	8001562 <__aeabi_ddiv+0xe2>
 8001560:	e1c4      	b.n	80018ec <__aeabi_ddiv+0x46c>
 8001562:	d100      	bne.n	8001566 <__aeabi_ddiv+0xe6>
 8001564:	e1bf      	b.n	80018e6 <__aeabi_ddiv+0x466>
 8001566:	2301      	movs	r3, #1
 8001568:	425b      	negs	r3, r3
 800156a:	469c      	mov	ip, r3
 800156c:	002e      	movs	r6, r5
 800156e:	4640      	mov	r0, r8
 8001570:	2500      	movs	r5, #0
 8001572:	44e3      	add	fp, ip
 8001574:	0223      	lsls	r3, r4, #8
 8001576:	0e0c      	lsrs	r4, r1, #24
 8001578:	431c      	orrs	r4, r3
 800157a:	0c1b      	lsrs	r3, r3, #16
 800157c:	4699      	mov	r9, r3
 800157e:	0423      	lsls	r3, r4, #16
 8001580:	020a      	lsls	r2, r1, #8
 8001582:	0c1f      	lsrs	r7, r3, #16
 8001584:	4649      	mov	r1, r9
 8001586:	9200      	str	r2, [sp, #0]
 8001588:	9701      	str	r7, [sp, #4]
 800158a:	f7fe fe5f 	bl	800024c <__aeabi_uidivmod>
 800158e:	0002      	movs	r2, r0
 8001590:	437a      	muls	r2, r7
 8001592:	040b      	lsls	r3, r1, #16
 8001594:	0c31      	lsrs	r1, r6, #16
 8001596:	4680      	mov	r8, r0
 8001598:	4319      	orrs	r1, r3
 800159a:	428a      	cmp	r2, r1
 800159c:	d907      	bls.n	80015ae <__aeabi_ddiv+0x12e>
 800159e:	2301      	movs	r3, #1
 80015a0:	425b      	negs	r3, r3
 80015a2:	469c      	mov	ip, r3
 80015a4:	1909      	adds	r1, r1, r4
 80015a6:	44e0      	add	r8, ip
 80015a8:	428c      	cmp	r4, r1
 80015aa:	d800      	bhi.n	80015ae <__aeabi_ddiv+0x12e>
 80015ac:	e201      	b.n	80019b2 <__aeabi_ddiv+0x532>
 80015ae:	1a88      	subs	r0, r1, r2
 80015b0:	4649      	mov	r1, r9
 80015b2:	f7fe fe4b 	bl	800024c <__aeabi_uidivmod>
 80015b6:	9a01      	ldr	r2, [sp, #4]
 80015b8:	0436      	lsls	r6, r6, #16
 80015ba:	4342      	muls	r2, r0
 80015bc:	0409      	lsls	r1, r1, #16
 80015be:	0c36      	lsrs	r6, r6, #16
 80015c0:	0003      	movs	r3, r0
 80015c2:	430e      	orrs	r6, r1
 80015c4:	42b2      	cmp	r2, r6
 80015c6:	d904      	bls.n	80015d2 <__aeabi_ddiv+0x152>
 80015c8:	1936      	adds	r6, r6, r4
 80015ca:	3b01      	subs	r3, #1
 80015cc:	42b4      	cmp	r4, r6
 80015ce:	d800      	bhi.n	80015d2 <__aeabi_ddiv+0x152>
 80015d0:	e1e9      	b.n	80019a6 <__aeabi_ddiv+0x526>
 80015d2:	1ab0      	subs	r0, r6, r2
 80015d4:	4642      	mov	r2, r8
 80015d6:	9e00      	ldr	r6, [sp, #0]
 80015d8:	0412      	lsls	r2, r2, #16
 80015da:	431a      	orrs	r2, r3
 80015dc:	0c33      	lsrs	r3, r6, #16
 80015de:	001f      	movs	r7, r3
 80015e0:	0c11      	lsrs	r1, r2, #16
 80015e2:	4690      	mov	r8, r2
 80015e4:	9302      	str	r3, [sp, #8]
 80015e6:	0413      	lsls	r3, r2, #16
 80015e8:	0432      	lsls	r2, r6, #16
 80015ea:	0c16      	lsrs	r6, r2, #16
 80015ec:	0032      	movs	r2, r6
 80015ee:	0c1b      	lsrs	r3, r3, #16
 80015f0:	435a      	muls	r2, r3
 80015f2:	9603      	str	r6, [sp, #12]
 80015f4:	437b      	muls	r3, r7
 80015f6:	434e      	muls	r6, r1
 80015f8:	4379      	muls	r1, r7
 80015fa:	0c17      	lsrs	r7, r2, #16
 80015fc:	46bc      	mov	ip, r7
 80015fe:	199b      	adds	r3, r3, r6
 8001600:	4463      	add	r3, ip
 8001602:	429e      	cmp	r6, r3
 8001604:	d903      	bls.n	800160e <__aeabi_ddiv+0x18e>
 8001606:	2680      	movs	r6, #128	; 0x80
 8001608:	0276      	lsls	r6, r6, #9
 800160a:	46b4      	mov	ip, r6
 800160c:	4461      	add	r1, ip
 800160e:	0c1e      	lsrs	r6, r3, #16
 8001610:	1871      	adds	r1, r6, r1
 8001612:	0416      	lsls	r6, r2, #16
 8001614:	041b      	lsls	r3, r3, #16
 8001616:	0c36      	lsrs	r6, r6, #16
 8001618:	199e      	adds	r6, r3, r6
 800161a:	4288      	cmp	r0, r1
 800161c:	d302      	bcc.n	8001624 <__aeabi_ddiv+0x1a4>
 800161e:	d112      	bne.n	8001646 <__aeabi_ddiv+0x1c6>
 8001620:	42b5      	cmp	r5, r6
 8001622:	d210      	bcs.n	8001646 <__aeabi_ddiv+0x1c6>
 8001624:	4643      	mov	r3, r8
 8001626:	1e5a      	subs	r2, r3, #1
 8001628:	9b00      	ldr	r3, [sp, #0]
 800162a:	469c      	mov	ip, r3
 800162c:	4465      	add	r5, ip
 800162e:	001f      	movs	r7, r3
 8001630:	429d      	cmp	r5, r3
 8001632:	419b      	sbcs	r3, r3
 8001634:	425b      	negs	r3, r3
 8001636:	191b      	adds	r3, r3, r4
 8001638:	18c0      	adds	r0, r0, r3
 800163a:	4284      	cmp	r4, r0
 800163c:	d200      	bcs.n	8001640 <__aeabi_ddiv+0x1c0>
 800163e:	e19e      	b.n	800197e <__aeabi_ddiv+0x4fe>
 8001640:	d100      	bne.n	8001644 <__aeabi_ddiv+0x1c4>
 8001642:	e199      	b.n	8001978 <__aeabi_ddiv+0x4f8>
 8001644:	4690      	mov	r8, r2
 8001646:	1bae      	subs	r6, r5, r6
 8001648:	42b5      	cmp	r5, r6
 800164a:	41ad      	sbcs	r5, r5
 800164c:	1a40      	subs	r0, r0, r1
 800164e:	426d      	negs	r5, r5
 8001650:	1b40      	subs	r0, r0, r5
 8001652:	4284      	cmp	r4, r0
 8001654:	d100      	bne.n	8001658 <__aeabi_ddiv+0x1d8>
 8001656:	e1d2      	b.n	80019fe <__aeabi_ddiv+0x57e>
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe fdf7 	bl	800024c <__aeabi_uidivmod>
 800165e:	9a01      	ldr	r2, [sp, #4]
 8001660:	040b      	lsls	r3, r1, #16
 8001662:	4342      	muls	r2, r0
 8001664:	0c31      	lsrs	r1, r6, #16
 8001666:	0005      	movs	r5, r0
 8001668:	4319      	orrs	r1, r3
 800166a:	428a      	cmp	r2, r1
 800166c:	d900      	bls.n	8001670 <__aeabi_ddiv+0x1f0>
 800166e:	e16c      	b.n	800194a <__aeabi_ddiv+0x4ca>
 8001670:	1a88      	subs	r0, r1, r2
 8001672:	4649      	mov	r1, r9
 8001674:	f7fe fdea 	bl	800024c <__aeabi_uidivmod>
 8001678:	9a01      	ldr	r2, [sp, #4]
 800167a:	0436      	lsls	r6, r6, #16
 800167c:	4342      	muls	r2, r0
 800167e:	0409      	lsls	r1, r1, #16
 8001680:	0c36      	lsrs	r6, r6, #16
 8001682:	0003      	movs	r3, r0
 8001684:	430e      	orrs	r6, r1
 8001686:	42b2      	cmp	r2, r6
 8001688:	d900      	bls.n	800168c <__aeabi_ddiv+0x20c>
 800168a:	e153      	b.n	8001934 <__aeabi_ddiv+0x4b4>
 800168c:	9803      	ldr	r0, [sp, #12]
 800168e:	1ab6      	subs	r6, r6, r2
 8001690:	0002      	movs	r2, r0
 8001692:	042d      	lsls	r5, r5, #16
 8001694:	431d      	orrs	r5, r3
 8001696:	9f02      	ldr	r7, [sp, #8]
 8001698:	042b      	lsls	r3, r5, #16
 800169a:	0c1b      	lsrs	r3, r3, #16
 800169c:	435a      	muls	r2, r3
 800169e:	437b      	muls	r3, r7
 80016a0:	469c      	mov	ip, r3
 80016a2:	0c29      	lsrs	r1, r5, #16
 80016a4:	4348      	muls	r0, r1
 80016a6:	0c13      	lsrs	r3, r2, #16
 80016a8:	4484      	add	ip, r0
 80016aa:	4463      	add	r3, ip
 80016ac:	4379      	muls	r1, r7
 80016ae:	4298      	cmp	r0, r3
 80016b0:	d903      	bls.n	80016ba <__aeabi_ddiv+0x23a>
 80016b2:	2080      	movs	r0, #128	; 0x80
 80016b4:	0240      	lsls	r0, r0, #9
 80016b6:	4684      	mov	ip, r0
 80016b8:	4461      	add	r1, ip
 80016ba:	0c18      	lsrs	r0, r3, #16
 80016bc:	0412      	lsls	r2, r2, #16
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	0c12      	lsrs	r2, r2, #16
 80016c2:	1840      	adds	r0, r0, r1
 80016c4:	189b      	adds	r3, r3, r2
 80016c6:	4286      	cmp	r6, r0
 80016c8:	d200      	bcs.n	80016cc <__aeabi_ddiv+0x24c>
 80016ca:	e100      	b.n	80018ce <__aeabi_ddiv+0x44e>
 80016cc:	d100      	bne.n	80016d0 <__aeabi_ddiv+0x250>
 80016ce:	e0fb      	b.n	80018c8 <__aeabi_ddiv+0x448>
 80016d0:	2301      	movs	r3, #1
 80016d2:	431d      	orrs	r5, r3
 80016d4:	4b49      	ldr	r3, [pc, #292]	; (80017fc <__aeabi_ddiv+0x37c>)
 80016d6:	445b      	add	r3, fp
 80016d8:	2b00      	cmp	r3, #0
 80016da:	dc00      	bgt.n	80016de <__aeabi_ddiv+0x25e>
 80016dc:	e0aa      	b.n	8001834 <__aeabi_ddiv+0x3b4>
 80016de:	076a      	lsls	r2, r5, #29
 80016e0:	d000      	beq.n	80016e4 <__aeabi_ddiv+0x264>
 80016e2:	e13d      	b.n	8001960 <__aeabi_ddiv+0x4e0>
 80016e4:	08e9      	lsrs	r1, r5, #3
 80016e6:	4642      	mov	r2, r8
 80016e8:	01d2      	lsls	r2, r2, #7
 80016ea:	d506      	bpl.n	80016fa <__aeabi_ddiv+0x27a>
 80016ec:	4642      	mov	r2, r8
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <__aeabi_ddiv+0x380>)
 80016f0:	401a      	ands	r2, r3
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	4690      	mov	r8, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	445b      	add	r3, fp
 80016fa:	4a42      	ldr	r2, [pc, #264]	; (8001804 <__aeabi_ddiv+0x384>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	dd00      	ble.n	8001702 <__aeabi_ddiv+0x282>
 8001700:	e723      	b.n	800154a <__aeabi_ddiv+0xca>
 8001702:	4642      	mov	r2, r8
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	0755      	lsls	r5, r2, #29
 8001708:	0252      	lsls	r2, r2, #9
 800170a:	430d      	orrs	r5, r1
 800170c:	0b12      	lsrs	r2, r2, #12
 800170e:	0d5b      	lsrs	r3, r3, #21
 8001710:	e70d      	b.n	800152e <__aeabi_ddiv+0xae>
 8001712:	4651      	mov	r1, sl
 8001714:	4321      	orrs	r1, r4
 8001716:	d100      	bne.n	800171a <__aeabi_ddiv+0x29a>
 8001718:	e07c      	b.n	8001814 <__aeabi_ddiv+0x394>
 800171a:	2c00      	cmp	r4, #0
 800171c:	d100      	bne.n	8001720 <__aeabi_ddiv+0x2a0>
 800171e:	e0fb      	b.n	8001918 <__aeabi_ddiv+0x498>
 8001720:	0020      	movs	r0, r4
 8001722:	f001 fa63 	bl	8002bec <__clzsi2>
 8001726:	0002      	movs	r2, r0
 8001728:	3a0b      	subs	r2, #11
 800172a:	231d      	movs	r3, #29
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	4652      	mov	r2, sl
 8001730:	0001      	movs	r1, r0
 8001732:	40da      	lsrs	r2, r3
 8001734:	4653      	mov	r3, sl
 8001736:	3908      	subs	r1, #8
 8001738:	408b      	lsls	r3, r1
 800173a:	408c      	lsls	r4, r1
 800173c:	0019      	movs	r1, r3
 800173e:	4314      	orrs	r4, r2
 8001740:	4b31      	ldr	r3, [pc, #196]	; (8001808 <__aeabi_ddiv+0x388>)
 8001742:	4458      	add	r0, fp
 8001744:	469b      	mov	fp, r3
 8001746:	4483      	add	fp, r0
 8001748:	2000      	movs	r0, #0
 800174a:	e6d9      	b.n	8001500 <__aeabi_ddiv+0x80>
 800174c:	0003      	movs	r3, r0
 800174e:	4323      	orrs	r3, r4
 8001750:	4698      	mov	r8, r3
 8001752:	d044      	beq.n	80017de <__aeabi_ddiv+0x35e>
 8001754:	2c00      	cmp	r4, #0
 8001756:	d100      	bne.n	800175a <__aeabi_ddiv+0x2da>
 8001758:	e0cf      	b.n	80018fa <__aeabi_ddiv+0x47a>
 800175a:	0020      	movs	r0, r4
 800175c:	f001 fa46 	bl	8002bec <__clzsi2>
 8001760:	0001      	movs	r1, r0
 8001762:	0002      	movs	r2, r0
 8001764:	390b      	subs	r1, #11
 8001766:	231d      	movs	r3, #29
 8001768:	1a5b      	subs	r3, r3, r1
 800176a:	4649      	mov	r1, r9
 800176c:	0010      	movs	r0, r2
 800176e:	40d9      	lsrs	r1, r3
 8001770:	3808      	subs	r0, #8
 8001772:	4084      	lsls	r4, r0
 8001774:	000b      	movs	r3, r1
 8001776:	464d      	mov	r5, r9
 8001778:	4323      	orrs	r3, r4
 800177a:	4698      	mov	r8, r3
 800177c:	4085      	lsls	r5, r0
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <__aeabi_ddiv+0x38c>)
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	469b      	mov	fp, r3
 8001784:	2300      	movs	r3, #0
 8001786:	4699      	mov	r9, r3
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	e69e      	b.n	80014ca <__aeabi_ddiv+0x4a>
 800178c:	0002      	movs	r2, r0
 800178e:	4322      	orrs	r2, r4
 8001790:	4690      	mov	r8, r2
 8001792:	d11d      	bne.n	80017d0 <__aeabi_ddiv+0x350>
 8001794:	2208      	movs	r2, #8
 8001796:	469b      	mov	fp, r3
 8001798:	2302      	movs	r3, #2
 800179a:	2500      	movs	r5, #0
 800179c:	4691      	mov	r9, r2
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	e693      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017a2:	4651      	mov	r1, sl
 80017a4:	4321      	orrs	r1, r4
 80017a6:	d109      	bne.n	80017bc <__aeabi_ddiv+0x33c>
 80017a8:	2302      	movs	r3, #2
 80017aa:	464a      	mov	r2, r9
 80017ac:	431a      	orrs	r2, r3
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <__aeabi_ddiv+0x390>)
 80017b0:	4691      	mov	r9, r2
 80017b2:	469c      	mov	ip, r3
 80017b4:	2400      	movs	r4, #0
 80017b6:	2002      	movs	r0, #2
 80017b8:	44e3      	add	fp, ip
 80017ba:	e6a1      	b.n	8001500 <__aeabi_ddiv+0x80>
 80017bc:	2303      	movs	r3, #3
 80017be:	464a      	mov	r2, r9
 80017c0:	431a      	orrs	r2, r3
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <__aeabi_ddiv+0x390>)
 80017c4:	4691      	mov	r9, r2
 80017c6:	469c      	mov	ip, r3
 80017c8:	4651      	mov	r1, sl
 80017ca:	2003      	movs	r0, #3
 80017cc:	44e3      	add	fp, ip
 80017ce:	e697      	b.n	8001500 <__aeabi_ddiv+0x80>
 80017d0:	220c      	movs	r2, #12
 80017d2:	469b      	mov	fp, r3
 80017d4:	2303      	movs	r3, #3
 80017d6:	46a0      	mov	r8, r4
 80017d8:	4691      	mov	r9, r2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	e675      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017de:	2304      	movs	r3, #4
 80017e0:	4699      	mov	r9, r3
 80017e2:	2300      	movs	r3, #0
 80017e4:	469b      	mov	fp, r3
 80017e6:	3301      	adds	r3, #1
 80017e8:	2500      	movs	r5, #0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	e66d      	b.n	80014ca <__aeabi_ddiv+0x4a>
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	fffffc01 	.word	0xfffffc01
 80017f8:	0800e778 	.word	0x0800e778
 80017fc:	000003ff 	.word	0x000003ff
 8001800:	feffffff 	.word	0xfeffffff
 8001804:	000007fe 	.word	0x000007fe
 8001808:	000003f3 	.word	0x000003f3
 800180c:	fffffc0d 	.word	0xfffffc0d
 8001810:	fffff801 	.word	0xfffff801
 8001814:	464a      	mov	r2, r9
 8001816:	2301      	movs	r3, #1
 8001818:	431a      	orrs	r2, r3
 800181a:	4691      	mov	r9, r2
 800181c:	2400      	movs	r4, #0
 800181e:	2001      	movs	r0, #1
 8001820:	e66e      	b.n	8001500 <__aeabi_ddiv+0x80>
 8001822:	2300      	movs	r3, #0
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	469a      	mov	sl, r3
 8001828:	2500      	movs	r5, #0
 800182a:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 800182c:	0312      	lsls	r2, r2, #12
 800182e:	e67e      	b.n	800152e <__aeabi_ddiv+0xae>
 8001830:	2501      	movs	r5, #1
 8001832:	426d      	negs	r5, r5
 8001834:	2201      	movs	r2, #1
 8001836:	1ad2      	subs	r2, r2, r3
 8001838:	2a38      	cmp	r2, #56	; 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_ddiv+0x3be>
 800183c:	e674      	b.n	8001528 <__aeabi_ddiv+0xa8>
 800183e:	2a1f      	cmp	r2, #31
 8001840:	dc00      	bgt.n	8001844 <__aeabi_ddiv+0x3c4>
 8001842:	e0bd      	b.n	80019c0 <__aeabi_ddiv+0x540>
 8001844:	211f      	movs	r1, #31
 8001846:	4249      	negs	r1, r1
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	4641      	mov	r1, r8
 800184c:	40d9      	lsrs	r1, r3
 800184e:	000b      	movs	r3, r1
 8001850:	2a20      	cmp	r2, #32
 8001852:	d004      	beq.n	800185e <__aeabi_ddiv+0x3de>
 8001854:	4641      	mov	r1, r8
 8001856:	4a7e      	ldr	r2, [pc, #504]	; (8001a50 <__aeabi_ddiv+0x5d0>)
 8001858:	445a      	add	r2, fp
 800185a:	4091      	lsls	r1, r2
 800185c:	430d      	orrs	r5, r1
 800185e:	0029      	movs	r1, r5
 8001860:	1e4a      	subs	r2, r1, #1
 8001862:	4191      	sbcs	r1, r2
 8001864:	4319      	orrs	r1, r3
 8001866:	2307      	movs	r3, #7
 8001868:	001d      	movs	r5, r3
 800186a:	2200      	movs	r2, #0
 800186c:	400d      	ands	r5, r1
 800186e:	420b      	tst	r3, r1
 8001870:	d100      	bne.n	8001874 <__aeabi_ddiv+0x3f4>
 8001872:	e0d0      	b.n	8001a16 <__aeabi_ddiv+0x596>
 8001874:	220f      	movs	r2, #15
 8001876:	2300      	movs	r3, #0
 8001878:	400a      	ands	r2, r1
 800187a:	2a04      	cmp	r2, #4
 800187c:	d100      	bne.n	8001880 <__aeabi_ddiv+0x400>
 800187e:	e0c7      	b.n	8001a10 <__aeabi_ddiv+0x590>
 8001880:	1d0a      	adds	r2, r1, #4
 8001882:	428a      	cmp	r2, r1
 8001884:	4189      	sbcs	r1, r1
 8001886:	4249      	negs	r1, r1
 8001888:	185b      	adds	r3, r3, r1
 800188a:	0011      	movs	r1, r2
 800188c:	021a      	lsls	r2, r3, #8
 800188e:	d400      	bmi.n	8001892 <__aeabi_ddiv+0x412>
 8001890:	e0be      	b.n	8001a10 <__aeabi_ddiv+0x590>
 8001892:	2301      	movs	r3, #1
 8001894:	2200      	movs	r2, #0
 8001896:	2500      	movs	r5, #0
 8001898:	e649      	b.n	800152e <__aeabi_ddiv+0xae>
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	4643      	mov	r3, r8
 800189e:	0312      	lsls	r2, r2, #12
 80018a0:	4213      	tst	r3, r2
 80018a2:	d008      	beq.n	80018b6 <__aeabi_ddiv+0x436>
 80018a4:	4214      	tst	r4, r2
 80018a6:	d106      	bne.n	80018b6 <__aeabi_ddiv+0x436>
 80018a8:	4322      	orrs	r2, r4
 80018aa:	0312      	lsls	r2, r2, #12
 80018ac:	46ba      	mov	sl, r7
 80018ae:	000d      	movs	r5, r1
 80018b0:	4b66      	ldr	r3, [pc, #408]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 80018b2:	0b12      	lsrs	r2, r2, #12
 80018b4:	e63b      	b.n	800152e <__aeabi_ddiv+0xae>
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	4643      	mov	r3, r8
 80018ba:	0312      	lsls	r2, r2, #12
 80018bc:	431a      	orrs	r2, r3
 80018be:	0312      	lsls	r2, r2, #12
 80018c0:	46b2      	mov	sl, r6
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 80018c4:	0b12      	lsrs	r2, r2, #12
 80018c6:	e632      	b.n	800152e <__aeabi_ddiv+0xae>
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x44e>
 80018cc:	e702      	b.n	80016d4 <__aeabi_ddiv+0x254>
 80018ce:	19a6      	adds	r6, r4, r6
 80018d0:	1e6a      	subs	r2, r5, #1
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d200      	bcs.n	80018d8 <__aeabi_ddiv+0x458>
 80018d6:	e089      	b.n	80019ec <__aeabi_ddiv+0x56c>
 80018d8:	4286      	cmp	r6, r0
 80018da:	d200      	bcs.n	80018de <__aeabi_ddiv+0x45e>
 80018dc:	e09f      	b.n	8001a1e <__aeabi_ddiv+0x59e>
 80018de:	d100      	bne.n	80018e2 <__aeabi_ddiv+0x462>
 80018e0:	e0af      	b.n	8001a42 <__aeabi_ddiv+0x5c2>
 80018e2:	0015      	movs	r5, r2
 80018e4:	e6f4      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80018e6:	42a9      	cmp	r1, r5
 80018e8:	d900      	bls.n	80018ec <__aeabi_ddiv+0x46c>
 80018ea:	e63c      	b.n	8001566 <__aeabi_ddiv+0xe6>
 80018ec:	4643      	mov	r3, r8
 80018ee:	07de      	lsls	r6, r3, #31
 80018f0:	0858      	lsrs	r0, r3, #1
 80018f2:	086b      	lsrs	r3, r5, #1
 80018f4:	431e      	orrs	r6, r3
 80018f6:	07ed      	lsls	r5, r5, #31
 80018f8:	e63c      	b.n	8001574 <__aeabi_ddiv+0xf4>
 80018fa:	f001 f977 	bl	8002bec <__clzsi2>
 80018fe:	0001      	movs	r1, r0
 8001900:	0002      	movs	r2, r0
 8001902:	3115      	adds	r1, #21
 8001904:	3220      	adds	r2, #32
 8001906:	291c      	cmp	r1, #28
 8001908:	dc00      	bgt.n	800190c <__aeabi_ddiv+0x48c>
 800190a:	e72c      	b.n	8001766 <__aeabi_ddiv+0x2e6>
 800190c:	464b      	mov	r3, r9
 800190e:	3808      	subs	r0, #8
 8001910:	4083      	lsls	r3, r0
 8001912:	2500      	movs	r5, #0
 8001914:	4698      	mov	r8, r3
 8001916:	e732      	b.n	800177e <__aeabi_ddiv+0x2fe>
 8001918:	f001 f968 	bl	8002bec <__clzsi2>
 800191c:	0003      	movs	r3, r0
 800191e:	001a      	movs	r2, r3
 8001920:	3215      	adds	r2, #21
 8001922:	3020      	adds	r0, #32
 8001924:	2a1c      	cmp	r2, #28
 8001926:	dc00      	bgt.n	800192a <__aeabi_ddiv+0x4aa>
 8001928:	e6ff      	b.n	800172a <__aeabi_ddiv+0x2aa>
 800192a:	4654      	mov	r4, sl
 800192c:	3b08      	subs	r3, #8
 800192e:	2100      	movs	r1, #0
 8001930:	409c      	lsls	r4, r3
 8001932:	e705      	b.n	8001740 <__aeabi_ddiv+0x2c0>
 8001934:	1936      	adds	r6, r6, r4
 8001936:	3b01      	subs	r3, #1
 8001938:	42b4      	cmp	r4, r6
 800193a:	d900      	bls.n	800193e <__aeabi_ddiv+0x4be>
 800193c:	e6a6      	b.n	800168c <__aeabi_ddiv+0x20c>
 800193e:	42b2      	cmp	r2, r6
 8001940:	d800      	bhi.n	8001944 <__aeabi_ddiv+0x4c4>
 8001942:	e6a3      	b.n	800168c <__aeabi_ddiv+0x20c>
 8001944:	1e83      	subs	r3, r0, #2
 8001946:	1936      	adds	r6, r6, r4
 8001948:	e6a0      	b.n	800168c <__aeabi_ddiv+0x20c>
 800194a:	1909      	adds	r1, r1, r4
 800194c:	3d01      	subs	r5, #1
 800194e:	428c      	cmp	r4, r1
 8001950:	d900      	bls.n	8001954 <__aeabi_ddiv+0x4d4>
 8001952:	e68d      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 8001954:	428a      	cmp	r2, r1
 8001956:	d800      	bhi.n	800195a <__aeabi_ddiv+0x4da>
 8001958:	e68a      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 800195a:	1e85      	subs	r5, r0, #2
 800195c:	1909      	adds	r1, r1, r4
 800195e:	e687      	b.n	8001670 <__aeabi_ddiv+0x1f0>
 8001960:	220f      	movs	r2, #15
 8001962:	402a      	ands	r2, r5
 8001964:	2a04      	cmp	r2, #4
 8001966:	d100      	bne.n	800196a <__aeabi_ddiv+0x4ea>
 8001968:	e6bc      	b.n	80016e4 <__aeabi_ddiv+0x264>
 800196a:	1d29      	adds	r1, r5, #4
 800196c:	42a9      	cmp	r1, r5
 800196e:	41ad      	sbcs	r5, r5
 8001970:	426d      	negs	r5, r5
 8001972:	08c9      	lsrs	r1, r1, #3
 8001974:	44a8      	add	r8, r5
 8001976:	e6b6      	b.n	80016e6 <__aeabi_ddiv+0x266>
 8001978:	42af      	cmp	r7, r5
 800197a:	d900      	bls.n	800197e <__aeabi_ddiv+0x4fe>
 800197c:	e662      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 800197e:	4281      	cmp	r1, r0
 8001980:	d804      	bhi.n	800198c <__aeabi_ddiv+0x50c>
 8001982:	d000      	beq.n	8001986 <__aeabi_ddiv+0x506>
 8001984:	e65e      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 8001986:	42ae      	cmp	r6, r5
 8001988:	d800      	bhi.n	800198c <__aeabi_ddiv+0x50c>
 800198a:	e65b      	b.n	8001644 <__aeabi_ddiv+0x1c4>
 800198c:	2302      	movs	r3, #2
 800198e:	425b      	negs	r3, r3
 8001990:	469c      	mov	ip, r3
 8001992:	9b00      	ldr	r3, [sp, #0]
 8001994:	44e0      	add	r8, ip
 8001996:	469c      	mov	ip, r3
 8001998:	4465      	add	r5, ip
 800199a:	429d      	cmp	r5, r3
 800199c:	419b      	sbcs	r3, r3
 800199e:	425b      	negs	r3, r3
 80019a0:	191b      	adds	r3, r3, r4
 80019a2:	18c0      	adds	r0, r0, r3
 80019a4:	e64f      	b.n	8001646 <__aeabi_ddiv+0x1c6>
 80019a6:	42b2      	cmp	r2, r6
 80019a8:	d800      	bhi.n	80019ac <__aeabi_ddiv+0x52c>
 80019aa:	e612      	b.n	80015d2 <__aeabi_ddiv+0x152>
 80019ac:	1e83      	subs	r3, r0, #2
 80019ae:	1936      	adds	r6, r6, r4
 80019b0:	e60f      	b.n	80015d2 <__aeabi_ddiv+0x152>
 80019b2:	428a      	cmp	r2, r1
 80019b4:	d800      	bhi.n	80019b8 <__aeabi_ddiv+0x538>
 80019b6:	e5fa      	b.n	80015ae <__aeabi_ddiv+0x12e>
 80019b8:	1e83      	subs	r3, r0, #2
 80019ba:	4698      	mov	r8, r3
 80019bc:	1909      	adds	r1, r1, r4
 80019be:	e5f6      	b.n	80015ae <__aeabi_ddiv+0x12e>
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <__aeabi_ddiv+0x5d4>)
 80019c2:	0028      	movs	r0, r5
 80019c4:	445b      	add	r3, fp
 80019c6:	4641      	mov	r1, r8
 80019c8:	409d      	lsls	r5, r3
 80019ca:	4099      	lsls	r1, r3
 80019cc:	40d0      	lsrs	r0, r2
 80019ce:	1e6b      	subs	r3, r5, #1
 80019d0:	419d      	sbcs	r5, r3
 80019d2:	4643      	mov	r3, r8
 80019d4:	4301      	orrs	r1, r0
 80019d6:	4329      	orrs	r1, r5
 80019d8:	40d3      	lsrs	r3, r2
 80019da:	074a      	lsls	r2, r1, #29
 80019dc:	d100      	bne.n	80019e0 <__aeabi_ddiv+0x560>
 80019de:	e755      	b.n	800188c <__aeabi_ddiv+0x40c>
 80019e0:	220f      	movs	r2, #15
 80019e2:	400a      	ands	r2, r1
 80019e4:	2a04      	cmp	r2, #4
 80019e6:	d000      	beq.n	80019ea <__aeabi_ddiv+0x56a>
 80019e8:	e74a      	b.n	8001880 <__aeabi_ddiv+0x400>
 80019ea:	e74f      	b.n	800188c <__aeabi_ddiv+0x40c>
 80019ec:	0015      	movs	r5, r2
 80019ee:	4286      	cmp	r6, r0
 80019f0:	d000      	beq.n	80019f4 <__aeabi_ddiv+0x574>
 80019f2:	e66d      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80019f4:	9a00      	ldr	r2, [sp, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d000      	beq.n	80019fc <__aeabi_ddiv+0x57c>
 80019fa:	e669      	b.n	80016d0 <__aeabi_ddiv+0x250>
 80019fc:	e66a      	b.n	80016d4 <__aeabi_ddiv+0x254>
 80019fe:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <__aeabi_ddiv+0x5d8>)
 8001a00:	445b      	add	r3, fp
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_ddiv+0x588>
 8001a06:	e713      	b.n	8001830 <__aeabi_ddiv+0x3b0>
 8001a08:	2501      	movs	r5, #1
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	44a8      	add	r8, r5
 8001a0e:	e66a      	b.n	80016e6 <__aeabi_ddiv+0x266>
 8001a10:	075d      	lsls	r5, r3, #29
 8001a12:	025b      	lsls	r3, r3, #9
 8001a14:	0b1a      	lsrs	r2, r3, #12
 8001a16:	08c9      	lsrs	r1, r1, #3
 8001a18:	2300      	movs	r3, #0
 8001a1a:	430d      	orrs	r5, r1
 8001a1c:	e587      	b.n	800152e <__aeabi_ddiv+0xae>
 8001a1e:	9900      	ldr	r1, [sp, #0]
 8001a20:	3d02      	subs	r5, #2
 8001a22:	004a      	lsls	r2, r1, #1
 8001a24:	428a      	cmp	r2, r1
 8001a26:	41bf      	sbcs	r7, r7
 8001a28:	427f      	negs	r7, r7
 8001a2a:	193f      	adds	r7, r7, r4
 8001a2c:	19f6      	adds	r6, r6, r7
 8001a2e:	9200      	str	r2, [sp, #0]
 8001a30:	e7dd      	b.n	80019ee <__aeabi_ddiv+0x56e>
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	4643      	mov	r3, r8
 8001a36:	0312      	lsls	r2, r2, #12
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	0312      	lsls	r2, r2, #12
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <__aeabi_ddiv+0x5cc>)
 8001a3e:	0b12      	lsrs	r2, r2, #12
 8001a40:	e575      	b.n	800152e <__aeabi_ddiv+0xae>
 8001a42:	9900      	ldr	r1, [sp, #0]
 8001a44:	4299      	cmp	r1, r3
 8001a46:	d3ea      	bcc.n	8001a1e <__aeabi_ddiv+0x59e>
 8001a48:	0015      	movs	r5, r2
 8001a4a:	e7d3      	b.n	80019f4 <__aeabi_ddiv+0x574>
 8001a4c:	000007ff 	.word	0x000007ff
 8001a50:	0000043e 	.word	0x0000043e
 8001a54:	0000041e 	.word	0x0000041e
 8001a58:	000003ff 	.word	0x000003ff

08001a5c <__eqdf2>:
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	464e      	mov	r6, r9
 8001a60:	4645      	mov	r5, r8
 8001a62:	46de      	mov	lr, fp
 8001a64:	4657      	mov	r7, sl
 8001a66:	4690      	mov	r8, r2
 8001a68:	b5e0      	push	{r5, r6, r7, lr}
 8001a6a:	0017      	movs	r7, r2
 8001a6c:	031a      	lsls	r2, r3, #12
 8001a6e:	0b12      	lsrs	r2, r2, #12
 8001a70:	0005      	movs	r5, r0
 8001a72:	4684      	mov	ip, r0
 8001a74:	4819      	ldr	r0, [pc, #100]	; (8001adc <__eqdf2+0x80>)
 8001a76:	030e      	lsls	r6, r1, #12
 8001a78:	004c      	lsls	r4, r1, #1
 8001a7a:	4691      	mov	r9, r2
 8001a7c:	005a      	lsls	r2, r3, #1
 8001a7e:	0fdb      	lsrs	r3, r3, #31
 8001a80:	469b      	mov	fp, r3
 8001a82:	0b36      	lsrs	r6, r6, #12
 8001a84:	0d64      	lsrs	r4, r4, #21
 8001a86:	0fc9      	lsrs	r1, r1, #31
 8001a88:	0d52      	lsrs	r2, r2, #21
 8001a8a:	4284      	cmp	r4, r0
 8001a8c:	d019      	beq.n	8001ac2 <__eqdf2+0x66>
 8001a8e:	4282      	cmp	r2, r0
 8001a90:	d010      	beq.n	8001ab4 <__eqdf2+0x58>
 8001a92:	2001      	movs	r0, #1
 8001a94:	4294      	cmp	r4, r2
 8001a96:	d10e      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001a98:	454e      	cmp	r6, r9
 8001a9a:	d10c      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	45c4      	cmp	ip, r8
 8001aa0:	d109      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aa2:	4559      	cmp	r1, fp
 8001aa4:	d017      	beq.n	8001ad6 <__eqdf2+0x7a>
 8001aa6:	2c00      	cmp	r4, #0
 8001aa8:	d105      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aaa:	0030      	movs	r0, r6
 8001aac:	4328      	orrs	r0, r5
 8001aae:	1e43      	subs	r3, r0, #1
 8001ab0:	4198      	sbcs	r0, r3
 8001ab2:	e000      	b.n	8001ab6 <__eqdf2+0x5a>
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab8:	46bb      	mov	fp, r7
 8001aba:	46b2      	mov	sl, r6
 8001abc:	46a9      	mov	r9, r5
 8001abe:	46a0      	mov	r8, r4
 8001ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac2:	0033      	movs	r3, r6
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	432b      	orrs	r3, r5
 8001ac8:	d1f5      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001aca:	42a2      	cmp	r2, r4
 8001acc:	d1f3      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001ace:	464b      	mov	r3, r9
 8001ad0:	433b      	orrs	r3, r7
 8001ad2:	d1f0      	bne.n	8001ab6 <__eqdf2+0x5a>
 8001ad4:	e7e2      	b.n	8001a9c <__eqdf2+0x40>
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	e7ed      	b.n	8001ab6 <__eqdf2+0x5a>
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	000007ff 	.word	0x000007ff

08001ae0 <__gedf2>:
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	4647      	mov	r7, r8
 8001ae4:	46ce      	mov	lr, r9
 8001ae6:	0004      	movs	r4, r0
 8001ae8:	0018      	movs	r0, r3
 8001aea:	0016      	movs	r6, r2
 8001aec:	031b      	lsls	r3, r3, #12
 8001aee:	0b1b      	lsrs	r3, r3, #12
 8001af0:	4d2d      	ldr	r5, [pc, #180]	; (8001ba8 <__gedf2+0xc8>)
 8001af2:	004a      	lsls	r2, r1, #1
 8001af4:	4699      	mov	r9, r3
 8001af6:	b580      	push	{r7, lr}
 8001af8:	0043      	lsls	r3, r0, #1
 8001afa:	030f      	lsls	r7, r1, #12
 8001afc:	46a4      	mov	ip, r4
 8001afe:	46b0      	mov	r8, r6
 8001b00:	0b3f      	lsrs	r7, r7, #12
 8001b02:	0d52      	lsrs	r2, r2, #21
 8001b04:	0fc9      	lsrs	r1, r1, #31
 8001b06:	0d5b      	lsrs	r3, r3, #21
 8001b08:	0fc0      	lsrs	r0, r0, #31
 8001b0a:	42aa      	cmp	r2, r5
 8001b0c:	d021      	beq.n	8001b52 <__gedf2+0x72>
 8001b0e:	42ab      	cmp	r3, r5
 8001b10:	d013      	beq.n	8001b3a <__gedf2+0x5a>
 8001b12:	2a00      	cmp	r2, #0
 8001b14:	d122      	bne.n	8001b5c <__gedf2+0x7c>
 8001b16:	433c      	orrs	r4, r7
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <__gedf2+0x42>
 8001b1c:	464d      	mov	r5, r9
 8001b1e:	432e      	orrs	r6, r5
 8001b20:	d022      	beq.n	8001b68 <__gedf2+0x88>
 8001b22:	2c00      	cmp	r4, #0
 8001b24:	d010      	beq.n	8001b48 <__gedf2+0x68>
 8001b26:	4281      	cmp	r1, r0
 8001b28:	d022      	beq.n	8001b70 <__gedf2+0x90>
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	3901      	subs	r1, #1
 8001b2e:	4008      	ands	r0, r1
 8001b30:	3801      	subs	r0, #1
 8001b32:	bcc0      	pop	{r6, r7}
 8001b34:	46b9      	mov	r9, r7
 8001b36:	46b0      	mov	r8, r6
 8001b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3a:	464d      	mov	r5, r9
 8001b3c:	432e      	orrs	r6, r5
 8001b3e:	d129      	bne.n	8001b94 <__gedf2+0xb4>
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	d1f0      	bne.n	8001b26 <__gedf2+0x46>
 8001b44:	433c      	orrs	r4, r7
 8001b46:	d1ee      	bne.n	8001b26 <__gedf2+0x46>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d1f2      	bne.n	8001b32 <__gedf2+0x52>
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	4240      	negs	r0, r0
 8001b50:	e7ef      	b.n	8001b32 <__gedf2+0x52>
 8001b52:	003d      	movs	r5, r7
 8001b54:	4325      	orrs	r5, r4
 8001b56:	d11d      	bne.n	8001b94 <__gedf2+0xb4>
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d0ee      	beq.n	8001b3a <__gedf2+0x5a>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e2      	bne.n	8001b26 <__gedf2+0x46>
 8001b60:	464c      	mov	r4, r9
 8001b62:	4326      	orrs	r6, r4
 8001b64:	d1df      	bne.n	8001b26 <__gedf2+0x46>
 8001b66:	e7e0      	b.n	8001b2a <__gedf2+0x4a>
 8001b68:	2000      	movs	r0, #0
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	d0e1      	beq.n	8001b32 <__gedf2+0x52>
 8001b6e:	e7dc      	b.n	8001b2a <__gedf2+0x4a>
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dc0a      	bgt.n	8001b8a <__gedf2+0xaa>
 8001b74:	dbe8      	blt.n	8001b48 <__gedf2+0x68>
 8001b76:	454f      	cmp	r7, r9
 8001b78:	d8d7      	bhi.n	8001b2a <__gedf2+0x4a>
 8001b7a:	d00e      	beq.n	8001b9a <__gedf2+0xba>
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	454f      	cmp	r7, r9
 8001b80:	d2d7      	bcs.n	8001b32 <__gedf2+0x52>
 8001b82:	2900      	cmp	r1, #0
 8001b84:	d0e2      	beq.n	8001b4c <__gedf2+0x6c>
 8001b86:	0008      	movs	r0, r1
 8001b88:	e7d3      	b.n	8001b32 <__gedf2+0x52>
 8001b8a:	4243      	negs	r3, r0
 8001b8c:	4158      	adcs	r0, r3
 8001b8e:	0040      	lsls	r0, r0, #1
 8001b90:	3801      	subs	r0, #1
 8001b92:	e7ce      	b.n	8001b32 <__gedf2+0x52>
 8001b94:	2002      	movs	r0, #2
 8001b96:	4240      	negs	r0, r0
 8001b98:	e7cb      	b.n	8001b32 <__gedf2+0x52>
 8001b9a:	45c4      	cmp	ip, r8
 8001b9c:	d8c5      	bhi.n	8001b2a <__gedf2+0x4a>
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	45c4      	cmp	ip, r8
 8001ba2:	d2c6      	bcs.n	8001b32 <__gedf2+0x52>
 8001ba4:	e7ed      	b.n	8001b82 <__gedf2+0xa2>
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	000007ff 	.word	0x000007ff

08001bac <__ledf2>:
 8001bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bae:	4647      	mov	r7, r8
 8001bb0:	46ce      	mov	lr, r9
 8001bb2:	0004      	movs	r4, r0
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	0016      	movs	r6, r2
 8001bb8:	031b      	lsls	r3, r3, #12
 8001bba:	0b1b      	lsrs	r3, r3, #12
 8001bbc:	4d2c      	ldr	r5, [pc, #176]	; (8001c70 <__ledf2+0xc4>)
 8001bbe:	004a      	lsls	r2, r1, #1
 8001bc0:	4699      	mov	r9, r3
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	0043      	lsls	r3, r0, #1
 8001bc6:	030f      	lsls	r7, r1, #12
 8001bc8:	46a4      	mov	ip, r4
 8001bca:	46b0      	mov	r8, r6
 8001bcc:	0b3f      	lsrs	r7, r7, #12
 8001bce:	0d52      	lsrs	r2, r2, #21
 8001bd0:	0fc9      	lsrs	r1, r1, #31
 8001bd2:	0d5b      	lsrs	r3, r3, #21
 8001bd4:	0fc0      	lsrs	r0, r0, #31
 8001bd6:	42aa      	cmp	r2, r5
 8001bd8:	d00d      	beq.n	8001bf6 <__ledf2+0x4a>
 8001bda:	42ab      	cmp	r3, r5
 8001bdc:	d010      	beq.n	8001c00 <__ledf2+0x54>
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d127      	bne.n	8001c32 <__ledf2+0x86>
 8001be2:	433c      	orrs	r4, r7
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d111      	bne.n	8001c0c <__ledf2+0x60>
 8001be8:	464d      	mov	r5, r9
 8001bea:	432e      	orrs	r6, r5
 8001bec:	d10e      	bne.n	8001c0c <__ledf2+0x60>
 8001bee:	2000      	movs	r0, #0
 8001bf0:	2c00      	cmp	r4, #0
 8001bf2:	d015      	beq.n	8001c20 <__ledf2+0x74>
 8001bf4:	e00e      	b.n	8001c14 <__ledf2+0x68>
 8001bf6:	003d      	movs	r5, r7
 8001bf8:	4325      	orrs	r5, r4
 8001bfa:	d110      	bne.n	8001c1e <__ledf2+0x72>
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d118      	bne.n	8001c32 <__ledf2+0x86>
 8001c00:	464d      	mov	r5, r9
 8001c02:	432e      	orrs	r6, r5
 8001c04:	d10b      	bne.n	8001c1e <__ledf2+0x72>
 8001c06:	2a00      	cmp	r2, #0
 8001c08:	d102      	bne.n	8001c10 <__ledf2+0x64>
 8001c0a:	433c      	orrs	r4, r7
 8001c0c:	2c00      	cmp	r4, #0
 8001c0e:	d00b      	beq.n	8001c28 <__ledf2+0x7c>
 8001c10:	4281      	cmp	r1, r0
 8001c12:	d014      	beq.n	8001c3e <__ledf2+0x92>
 8001c14:	2002      	movs	r0, #2
 8001c16:	3901      	subs	r1, #1
 8001c18:	4008      	ands	r0, r1
 8001c1a:	3801      	subs	r0, #1
 8001c1c:	e000      	b.n	8001c20 <__ledf2+0x74>
 8001c1e:	2002      	movs	r0, #2
 8001c20:	bcc0      	pop	{r6, r7}
 8001c22:	46b9      	mov	r9, r7
 8001c24:	46b0      	mov	r8, r6
 8001c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	d1f9      	bne.n	8001c20 <__ledf2+0x74>
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	4240      	negs	r0, r0
 8001c30:	e7f6      	b.n	8001c20 <__ledf2+0x74>
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ec      	bne.n	8001c10 <__ledf2+0x64>
 8001c36:	464c      	mov	r4, r9
 8001c38:	4326      	orrs	r6, r4
 8001c3a:	d1e9      	bne.n	8001c10 <__ledf2+0x64>
 8001c3c:	e7ea      	b.n	8001c14 <__ledf2+0x68>
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dd04      	ble.n	8001c4c <__ledf2+0xa0>
 8001c42:	4243      	negs	r3, r0
 8001c44:	4158      	adcs	r0, r3
 8001c46:	0040      	lsls	r0, r0, #1
 8001c48:	3801      	subs	r0, #1
 8001c4a:	e7e9      	b.n	8001c20 <__ledf2+0x74>
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbeb      	blt.n	8001c28 <__ledf2+0x7c>
 8001c50:	454f      	cmp	r7, r9
 8001c52:	d8df      	bhi.n	8001c14 <__ledf2+0x68>
 8001c54:	d006      	beq.n	8001c64 <__ledf2+0xb8>
 8001c56:	2000      	movs	r0, #0
 8001c58:	454f      	cmp	r7, r9
 8001c5a:	d2e1      	bcs.n	8001c20 <__ledf2+0x74>
 8001c5c:	2900      	cmp	r1, #0
 8001c5e:	d0e5      	beq.n	8001c2c <__ledf2+0x80>
 8001c60:	0008      	movs	r0, r1
 8001c62:	e7dd      	b.n	8001c20 <__ledf2+0x74>
 8001c64:	45c4      	cmp	ip, r8
 8001c66:	d8d5      	bhi.n	8001c14 <__ledf2+0x68>
 8001c68:	2000      	movs	r0, #0
 8001c6a:	45c4      	cmp	ip, r8
 8001c6c:	d2d8      	bcs.n	8001c20 <__ledf2+0x74>
 8001c6e:	e7f5      	b.n	8001c5c <__ledf2+0xb0>
 8001c70:	000007ff 	.word	0x000007ff

08001c74 <__aeabi_dmul>:
 8001c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c76:	4645      	mov	r5, r8
 8001c78:	46de      	mov	lr, fp
 8001c7a:	4657      	mov	r7, sl
 8001c7c:	464e      	mov	r6, r9
 8001c7e:	b5e0      	push	{r5, r6, r7, lr}
 8001c80:	001f      	movs	r7, r3
 8001c82:	030b      	lsls	r3, r1, #12
 8001c84:	0b1b      	lsrs	r3, r3, #12
 8001c86:	469b      	mov	fp, r3
 8001c88:	004d      	lsls	r5, r1, #1
 8001c8a:	0fcb      	lsrs	r3, r1, #31
 8001c8c:	0004      	movs	r4, r0
 8001c8e:	4691      	mov	r9, r2
 8001c90:	4698      	mov	r8, r3
 8001c92:	b087      	sub	sp, #28
 8001c94:	0d6d      	lsrs	r5, r5, #21
 8001c96:	d100      	bne.n	8001c9a <__aeabi_dmul+0x26>
 8001c98:	e1cd      	b.n	8002036 <__aeabi_dmul+0x3c2>
 8001c9a:	4bce      	ldr	r3, [pc, #824]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001c9c:	429d      	cmp	r5, r3
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dmul+0x2e>
 8001ca0:	e1e9      	b.n	8002076 <__aeabi_dmul+0x402>
 8001ca2:	465a      	mov	r2, fp
 8001ca4:	0f43      	lsrs	r3, r0, #29
 8001ca6:	00d2      	lsls	r2, r2, #3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	0412      	lsls	r2, r2, #16
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	00c3      	lsls	r3, r0, #3
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4bc8      	ldr	r3, [pc, #800]	; (8001fd8 <__aeabi_dmul+0x364>)
 8001cb6:	4693      	mov	fp, r2
 8001cb8:	469c      	mov	ip, r3
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2600      	movs	r6, #0
 8001cbe:	4465      	add	r5, ip
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	033c      	lsls	r4, r7, #12
 8001cc4:	007b      	lsls	r3, r7, #1
 8001cc6:	4648      	mov	r0, r9
 8001cc8:	0b24      	lsrs	r4, r4, #12
 8001cca:	0d5b      	lsrs	r3, r3, #21
 8001ccc:	0fff      	lsrs	r7, r7, #31
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dmul+0x60>
 8001cd2:	e189      	b.n	8001fe8 <__aeabi_dmul+0x374>
 8001cd4:	4abf      	ldr	r2, [pc, #764]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d019      	beq.n	8001d0e <__aeabi_dmul+0x9a>
 8001cda:	0f42      	lsrs	r2, r0, #29
 8001cdc:	00e4      	lsls	r4, r4, #3
 8001cde:	4322      	orrs	r2, r4
 8001ce0:	2480      	movs	r4, #128	; 0x80
 8001ce2:	0424      	lsls	r4, r4, #16
 8001ce4:	4314      	orrs	r4, r2
 8001ce6:	4abc      	ldr	r2, [pc, #752]	; (8001fd8 <__aeabi_dmul+0x364>)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4694      	mov	ip, r2
 8001cec:	4642      	mov	r2, r8
 8001cee:	4463      	add	r3, ip
 8001cf0:	195b      	adds	r3, r3, r5
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	9b01      	ldr	r3, [sp, #4]
 8001cf6:	407a      	eors	r2, r7
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	00c0      	lsls	r0, r0, #3
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	2e0a      	cmp	r6, #10
 8001d02:	dd1c      	ble.n	8001d3e <__aeabi_dmul+0xca>
 8001d04:	003a      	movs	r2, r7
 8001d06:	2e0b      	cmp	r6, #11
 8001d08:	d05e      	beq.n	8001dc8 <__aeabi_dmul+0x154>
 8001d0a:	4647      	mov	r7, r8
 8001d0c:	e056      	b.n	8001dbc <__aeabi_dmul+0x148>
 8001d0e:	4649      	mov	r1, r9
 8001d10:	4bb0      	ldr	r3, [pc, #704]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001d12:	4321      	orrs	r1, r4
 8001d14:	18eb      	adds	r3, r5, r3
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2900      	cmp	r1, #0
 8001d1a:	d12a      	bne.n	8001d72 <__aeabi_dmul+0xfe>
 8001d1c:	2080      	movs	r0, #128	; 0x80
 8001d1e:	2202      	movs	r2, #2
 8001d20:	0100      	lsls	r0, r0, #4
 8001d22:	002b      	movs	r3, r5
 8001d24:	4684      	mov	ip, r0
 8001d26:	4316      	orrs	r6, r2
 8001d28:	4642      	mov	r2, r8
 8001d2a:	4463      	add	r3, ip
 8001d2c:	407a      	eors	r2, r7
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	9302      	str	r3, [sp, #8]
 8001d32:	2e0a      	cmp	r6, #10
 8001d34:	dd00      	ble.n	8001d38 <__aeabi_dmul+0xc4>
 8001d36:	e231      	b.n	800219c <__aeabi_dmul+0x528>
 8001d38:	2000      	movs	r0, #0
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	2e02      	cmp	r6, #2
 8001d40:	dc26      	bgt.n	8001d90 <__aeabi_dmul+0x11c>
 8001d42:	3e01      	subs	r6, #1
 8001d44:	2e01      	cmp	r6, #1
 8001d46:	d852      	bhi.n	8001dee <__aeabi_dmul+0x17a>
 8001d48:	2902      	cmp	r1, #2
 8001d4a:	d04c      	beq.n	8001de6 <__aeabi_dmul+0x172>
 8001d4c:	2901      	cmp	r1, #1
 8001d4e:	d000      	beq.n	8001d52 <__aeabi_dmul+0xde>
 8001d50:	e118      	b.n	8001f84 <__aeabi_dmul+0x310>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2400      	movs	r4, #0
 8001d56:	2500      	movs	r5, #0
 8001d58:	051b      	lsls	r3, r3, #20
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	07d2      	lsls	r2, r2, #31
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	0028      	movs	r0, r5
 8001d62:	0019      	movs	r1, r3
 8001d64:	b007      	add	sp, #28
 8001d66:	bcf0      	pop	{r4, r5, r6, r7}
 8001d68:	46bb      	mov	fp, r7
 8001d6a:	46b2      	mov	sl, r6
 8001d6c:	46a9      	mov	r9, r5
 8001d6e:	46a0      	mov	r8, r4
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	2203      	movs	r2, #3
 8001d76:	0109      	lsls	r1, r1, #4
 8001d78:	002b      	movs	r3, r5
 8001d7a:	468c      	mov	ip, r1
 8001d7c:	4316      	orrs	r6, r2
 8001d7e:	4642      	mov	r2, r8
 8001d80:	4463      	add	r3, ip
 8001d82:	407a      	eors	r2, r7
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	2e0a      	cmp	r6, #10
 8001d8a:	dd00      	ble.n	8001d8e <__aeabi_dmul+0x11a>
 8001d8c:	e228      	b.n	80021e0 <__aeabi_dmul+0x56c>
 8001d8e:	2103      	movs	r1, #3
 8001d90:	2501      	movs	r5, #1
 8001d92:	40b5      	lsls	r5, r6
 8001d94:	46ac      	mov	ip, r5
 8001d96:	26a6      	movs	r6, #166	; 0xa6
 8001d98:	4663      	mov	r3, ip
 8001d9a:	00f6      	lsls	r6, r6, #3
 8001d9c:	4035      	ands	r5, r6
 8001d9e:	4233      	tst	r3, r6
 8001da0:	d10b      	bne.n	8001dba <__aeabi_dmul+0x146>
 8001da2:	2690      	movs	r6, #144	; 0x90
 8001da4:	00b6      	lsls	r6, r6, #2
 8001da6:	4233      	tst	r3, r6
 8001da8:	d118      	bne.n	8001ddc <__aeabi_dmul+0x168>
 8001daa:	3eb9      	subs	r6, #185	; 0xb9
 8001dac:	3eff      	subs	r6, #255	; 0xff
 8001dae:	421e      	tst	r6, r3
 8001db0:	d01d      	beq.n	8001dee <__aeabi_dmul+0x17a>
 8001db2:	46a3      	mov	fp, r4
 8001db4:	4682      	mov	sl, r0
 8001db6:	9100      	str	r1, [sp, #0]
 8001db8:	e000      	b.n	8001dbc <__aeabi_dmul+0x148>
 8001dba:	0017      	movs	r7, r2
 8001dbc:	9900      	ldr	r1, [sp, #0]
 8001dbe:	003a      	movs	r2, r7
 8001dc0:	2902      	cmp	r1, #2
 8001dc2:	d010      	beq.n	8001de6 <__aeabi_dmul+0x172>
 8001dc4:	465c      	mov	r4, fp
 8001dc6:	4650      	mov	r0, sl
 8001dc8:	2903      	cmp	r1, #3
 8001dca:	d1bf      	bne.n	8001d4c <__aeabi_dmul+0xd8>
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	031b      	lsls	r3, r3, #12
 8001dd0:	431c      	orrs	r4, r3
 8001dd2:	0324      	lsls	r4, r4, #12
 8001dd4:	0005      	movs	r5, r0
 8001dd6:	4b7f      	ldr	r3, [pc, #508]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001dd8:	0b24      	lsrs	r4, r4, #12
 8001dda:	e7bd      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001ddc:	2480      	movs	r4, #128	; 0x80
 8001dde:	2200      	movs	r2, #0
 8001de0:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001de2:	0324      	lsls	r4, r4, #12
 8001de4:	e7b8      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001de6:	2400      	movs	r4, #0
 8001de8:	2500      	movs	r5, #0
 8001dea:	4b7a      	ldr	r3, [pc, #488]	; (8001fd4 <__aeabi_dmul+0x360>)
 8001dec:	e7b4      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001dee:	4653      	mov	r3, sl
 8001df0:	041e      	lsls	r6, r3, #16
 8001df2:	0c36      	lsrs	r6, r6, #16
 8001df4:	0c1f      	lsrs	r7, r3, #16
 8001df6:	0033      	movs	r3, r6
 8001df8:	0c01      	lsrs	r1, r0, #16
 8001dfa:	0400      	lsls	r0, r0, #16
 8001dfc:	0c00      	lsrs	r0, r0, #16
 8001dfe:	4343      	muls	r3, r0
 8001e00:	4698      	mov	r8, r3
 8001e02:	0003      	movs	r3, r0
 8001e04:	437b      	muls	r3, r7
 8001e06:	4699      	mov	r9, r3
 8001e08:	0033      	movs	r3, r6
 8001e0a:	434b      	muls	r3, r1
 8001e0c:	469c      	mov	ip, r3
 8001e0e:	4643      	mov	r3, r8
 8001e10:	000d      	movs	r5, r1
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	469a      	mov	sl, r3
 8001e16:	437d      	muls	r5, r7
 8001e18:	44cc      	add	ip, r9
 8001e1a:	44d4      	add	ip, sl
 8001e1c:	9500      	str	r5, [sp, #0]
 8001e1e:	45e1      	cmp	r9, ip
 8001e20:	d904      	bls.n	8001e2c <__aeabi_dmul+0x1b8>
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	025b      	lsls	r3, r3, #9
 8001e26:	4699      	mov	r9, r3
 8001e28:	444d      	add	r5, r9
 8001e2a:	9500      	str	r5, [sp, #0]
 8001e2c:	4663      	mov	r3, ip
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	001d      	movs	r5, r3
 8001e32:	4663      	mov	r3, ip
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	469c      	mov	ip, r3
 8001e38:	4643      	mov	r3, r8
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	0c1b      	lsrs	r3, r3, #16
 8001e3e:	4698      	mov	r8, r3
 8001e40:	4663      	mov	r3, ip
 8001e42:	4443      	add	r3, r8
 8001e44:	9303      	str	r3, [sp, #12]
 8001e46:	0c23      	lsrs	r3, r4, #16
 8001e48:	4698      	mov	r8, r3
 8001e4a:	0033      	movs	r3, r6
 8001e4c:	0424      	lsls	r4, r4, #16
 8001e4e:	0c24      	lsrs	r4, r4, #16
 8001e50:	4363      	muls	r3, r4
 8001e52:	469c      	mov	ip, r3
 8001e54:	0023      	movs	r3, r4
 8001e56:	437b      	muls	r3, r7
 8001e58:	4699      	mov	r9, r3
 8001e5a:	4643      	mov	r3, r8
 8001e5c:	435e      	muls	r6, r3
 8001e5e:	435f      	muls	r7, r3
 8001e60:	444e      	add	r6, r9
 8001e62:	4663      	mov	r3, ip
 8001e64:	46b2      	mov	sl, r6
 8001e66:	0c1e      	lsrs	r6, r3, #16
 8001e68:	4456      	add	r6, sl
 8001e6a:	45b1      	cmp	r9, r6
 8001e6c:	d903      	bls.n	8001e76 <__aeabi_dmul+0x202>
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	4699      	mov	r9, r3
 8001e74:	444f      	add	r7, r9
 8001e76:	0c33      	lsrs	r3, r6, #16
 8001e78:	4699      	mov	r9, r3
 8001e7a:	003b      	movs	r3, r7
 8001e7c:	444b      	add	r3, r9
 8001e7e:	9305      	str	r3, [sp, #20]
 8001e80:	4663      	mov	r3, ip
 8001e82:	46ac      	mov	ip, r5
 8001e84:	041f      	lsls	r7, r3, #16
 8001e86:	0c3f      	lsrs	r7, r7, #16
 8001e88:	0436      	lsls	r6, r6, #16
 8001e8a:	19f6      	adds	r6, r6, r7
 8001e8c:	44b4      	add	ip, r6
 8001e8e:	4663      	mov	r3, ip
 8001e90:	9304      	str	r3, [sp, #16]
 8001e92:	465b      	mov	r3, fp
 8001e94:	0c1b      	lsrs	r3, r3, #16
 8001e96:	469c      	mov	ip, r3
 8001e98:	465b      	mov	r3, fp
 8001e9a:	041f      	lsls	r7, r3, #16
 8001e9c:	0c3f      	lsrs	r7, r7, #16
 8001e9e:	003b      	movs	r3, r7
 8001ea0:	4343      	muls	r3, r0
 8001ea2:	4699      	mov	r9, r3
 8001ea4:	4663      	mov	r3, ip
 8001ea6:	4343      	muls	r3, r0
 8001ea8:	469a      	mov	sl, r3
 8001eaa:	464b      	mov	r3, r9
 8001eac:	4660      	mov	r0, ip
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	469b      	mov	fp, r3
 8001eb2:	4348      	muls	r0, r1
 8001eb4:	4379      	muls	r1, r7
 8001eb6:	4451      	add	r1, sl
 8001eb8:	4459      	add	r1, fp
 8001eba:	458a      	cmp	sl, r1
 8001ebc:	d903      	bls.n	8001ec6 <__aeabi_dmul+0x252>
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	025b      	lsls	r3, r3, #9
 8001ec2:	469a      	mov	sl, r3
 8001ec4:	4450      	add	r0, sl
 8001ec6:	0c0b      	lsrs	r3, r1, #16
 8001ec8:	469a      	mov	sl, r3
 8001eca:	464b      	mov	r3, r9
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	003b      	movs	r3, r7
 8001ed4:	4363      	muls	r3, r4
 8001ed6:	0409      	lsls	r1, r1, #16
 8001ed8:	4645      	mov	r5, r8
 8001eda:	4449      	add	r1, r9
 8001edc:	4699      	mov	r9, r3
 8001ede:	4663      	mov	r3, ip
 8001ee0:	435c      	muls	r4, r3
 8001ee2:	436b      	muls	r3, r5
 8001ee4:	469c      	mov	ip, r3
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	0c1b      	lsrs	r3, r3, #16
 8001eea:	4698      	mov	r8, r3
 8001eec:	436f      	muls	r7, r5
 8001eee:	193f      	adds	r7, r7, r4
 8001ef0:	4447      	add	r7, r8
 8001ef2:	4450      	add	r0, sl
 8001ef4:	42bc      	cmp	r4, r7
 8001ef6:	d903      	bls.n	8001f00 <__aeabi_dmul+0x28c>
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	025b      	lsls	r3, r3, #9
 8001efc:	4698      	mov	r8, r3
 8001efe:	44c4      	add	ip, r8
 8001f00:	9b04      	ldr	r3, [sp, #16]
 8001f02:	9d00      	ldr	r5, [sp, #0]
 8001f04:	4698      	mov	r8, r3
 8001f06:	4445      	add	r5, r8
 8001f08:	42b5      	cmp	r5, r6
 8001f0a:	41b6      	sbcs	r6, r6
 8001f0c:	4273      	negs	r3, r6
 8001f0e:	4698      	mov	r8, r3
 8001f10:	464b      	mov	r3, r9
 8001f12:	041e      	lsls	r6, r3, #16
 8001f14:	9b05      	ldr	r3, [sp, #20]
 8001f16:	043c      	lsls	r4, r7, #16
 8001f18:	4699      	mov	r9, r3
 8001f1a:	0c36      	lsrs	r6, r6, #16
 8001f1c:	19a4      	adds	r4, r4, r6
 8001f1e:	444c      	add	r4, r9
 8001f20:	46a1      	mov	r9, r4
 8001f22:	4683      	mov	fp, r0
 8001f24:	186e      	adds	r6, r5, r1
 8001f26:	44c1      	add	r9, r8
 8001f28:	428e      	cmp	r6, r1
 8001f2a:	4189      	sbcs	r1, r1
 8001f2c:	44cb      	add	fp, r9
 8001f2e:	465d      	mov	r5, fp
 8001f30:	4249      	negs	r1, r1
 8001f32:	186d      	adds	r5, r5, r1
 8001f34:	429c      	cmp	r4, r3
 8001f36:	41a4      	sbcs	r4, r4
 8001f38:	45c1      	cmp	r9, r8
 8001f3a:	419b      	sbcs	r3, r3
 8001f3c:	4583      	cmp	fp, r0
 8001f3e:	4180      	sbcs	r0, r0
 8001f40:	428d      	cmp	r5, r1
 8001f42:	4189      	sbcs	r1, r1
 8001f44:	425b      	negs	r3, r3
 8001f46:	4264      	negs	r4, r4
 8001f48:	431c      	orrs	r4, r3
 8001f4a:	4240      	negs	r0, r0
 8001f4c:	9b03      	ldr	r3, [sp, #12]
 8001f4e:	4249      	negs	r1, r1
 8001f50:	4301      	orrs	r1, r0
 8001f52:	0270      	lsls	r0, r6, #9
 8001f54:	0c3f      	lsrs	r7, r7, #16
 8001f56:	4318      	orrs	r0, r3
 8001f58:	19e4      	adds	r4, r4, r7
 8001f5a:	1e47      	subs	r7, r0, #1
 8001f5c:	41b8      	sbcs	r0, r7
 8001f5e:	1864      	adds	r4, r4, r1
 8001f60:	4464      	add	r4, ip
 8001f62:	0df6      	lsrs	r6, r6, #23
 8001f64:	0261      	lsls	r1, r4, #9
 8001f66:	4330      	orrs	r0, r6
 8001f68:	0dec      	lsrs	r4, r5, #23
 8001f6a:	026e      	lsls	r6, r5, #9
 8001f6c:	430c      	orrs	r4, r1
 8001f6e:	4330      	orrs	r0, r6
 8001f70:	01c9      	lsls	r1, r1, #7
 8001f72:	d400      	bmi.n	8001f76 <__aeabi_dmul+0x302>
 8001f74:	e0f1      	b.n	800215a <__aeabi_dmul+0x4e6>
 8001f76:	2101      	movs	r1, #1
 8001f78:	0843      	lsrs	r3, r0, #1
 8001f7a:	4001      	ands	r1, r0
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	07e0      	lsls	r0, r4, #31
 8001f80:	4318      	orrs	r0, r3
 8001f82:	0864      	lsrs	r4, r4, #1
 8001f84:	4915      	ldr	r1, [pc, #84]	; (8001fdc <__aeabi_dmul+0x368>)
 8001f86:	9b02      	ldr	r3, [sp, #8]
 8001f88:	468c      	mov	ip, r1
 8001f8a:	4463      	add	r3, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	dc00      	bgt.n	8001f92 <__aeabi_dmul+0x31e>
 8001f90:	e097      	b.n	80020c2 <__aeabi_dmul+0x44e>
 8001f92:	0741      	lsls	r1, r0, #29
 8001f94:	d009      	beq.n	8001faa <__aeabi_dmul+0x336>
 8001f96:	210f      	movs	r1, #15
 8001f98:	4001      	ands	r1, r0
 8001f9a:	2904      	cmp	r1, #4
 8001f9c:	d005      	beq.n	8001faa <__aeabi_dmul+0x336>
 8001f9e:	1d01      	adds	r1, r0, #4
 8001fa0:	4281      	cmp	r1, r0
 8001fa2:	4180      	sbcs	r0, r0
 8001fa4:	4240      	negs	r0, r0
 8001fa6:	1824      	adds	r4, r4, r0
 8001fa8:	0008      	movs	r0, r1
 8001faa:	01e1      	lsls	r1, r4, #7
 8001fac:	d506      	bpl.n	8001fbc <__aeabi_dmul+0x348>
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	00c9      	lsls	r1, r1, #3
 8001fb2:	468c      	mov	ip, r1
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <__aeabi_dmul+0x36c>)
 8001fb6:	401c      	ands	r4, r3
 8001fb8:	9b02      	ldr	r3, [sp, #8]
 8001fba:	4463      	add	r3, ip
 8001fbc:	4909      	ldr	r1, [pc, #36]	; (8001fe4 <__aeabi_dmul+0x370>)
 8001fbe:	428b      	cmp	r3, r1
 8001fc0:	dd00      	ble.n	8001fc4 <__aeabi_dmul+0x350>
 8001fc2:	e710      	b.n	8001de6 <__aeabi_dmul+0x172>
 8001fc4:	0761      	lsls	r1, r4, #29
 8001fc6:	08c5      	lsrs	r5, r0, #3
 8001fc8:	0264      	lsls	r4, r4, #9
 8001fca:	055b      	lsls	r3, r3, #21
 8001fcc:	430d      	orrs	r5, r1
 8001fce:	0b24      	lsrs	r4, r4, #12
 8001fd0:	0d5b      	lsrs	r3, r3, #21
 8001fd2:	e6c1      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8001fd4:	000007ff 	.word	0x000007ff
 8001fd8:	fffffc01 	.word	0xfffffc01
 8001fdc:	000003ff 	.word	0x000003ff
 8001fe0:	feffffff 	.word	0xfeffffff
 8001fe4:	000007fe 	.word	0x000007fe
 8001fe8:	464b      	mov	r3, r9
 8001fea:	4323      	orrs	r3, r4
 8001fec:	d059      	beq.n	80020a2 <__aeabi_dmul+0x42e>
 8001fee:	2c00      	cmp	r4, #0
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dmul+0x380>
 8001ff2:	e0a3      	b.n	800213c <__aeabi_dmul+0x4c8>
 8001ff4:	0020      	movs	r0, r4
 8001ff6:	f000 fdf9 	bl	8002bec <__clzsi2>
 8001ffa:	0001      	movs	r1, r0
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	390b      	subs	r1, #11
 8002000:	221d      	movs	r2, #29
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4649      	mov	r1, r9
 8002006:	0018      	movs	r0, r3
 8002008:	40d1      	lsrs	r1, r2
 800200a:	464a      	mov	r2, r9
 800200c:	3808      	subs	r0, #8
 800200e:	4082      	lsls	r2, r0
 8002010:	4084      	lsls	r4, r0
 8002012:	0010      	movs	r0, r2
 8002014:	430c      	orrs	r4, r1
 8002016:	4a74      	ldr	r2, [pc, #464]	; (80021e8 <__aeabi_dmul+0x574>)
 8002018:	1aeb      	subs	r3, r5, r3
 800201a:	4694      	mov	ip, r2
 800201c:	4642      	mov	r2, r8
 800201e:	4463      	add	r3, ip
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	407a      	eors	r2, r7
 8002026:	3301      	adds	r3, #1
 8002028:	2100      	movs	r1, #0
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	2e0a      	cmp	r6, #10
 8002030:	dd00      	ble.n	8002034 <__aeabi_dmul+0x3c0>
 8002032:	e667      	b.n	8001d04 <__aeabi_dmul+0x90>
 8002034:	e683      	b.n	8001d3e <__aeabi_dmul+0xca>
 8002036:	465b      	mov	r3, fp
 8002038:	4303      	orrs	r3, r0
 800203a:	469a      	mov	sl, r3
 800203c:	d02a      	beq.n	8002094 <__aeabi_dmul+0x420>
 800203e:	465b      	mov	r3, fp
 8002040:	2b00      	cmp	r3, #0
 8002042:	d06d      	beq.n	8002120 <__aeabi_dmul+0x4ac>
 8002044:	4658      	mov	r0, fp
 8002046:	f000 fdd1 	bl	8002bec <__clzsi2>
 800204a:	0001      	movs	r1, r0
 800204c:	0003      	movs	r3, r0
 800204e:	390b      	subs	r1, #11
 8002050:	221d      	movs	r2, #29
 8002052:	1a52      	subs	r2, r2, r1
 8002054:	0021      	movs	r1, r4
 8002056:	0018      	movs	r0, r3
 8002058:	465d      	mov	r5, fp
 800205a:	40d1      	lsrs	r1, r2
 800205c:	3808      	subs	r0, #8
 800205e:	4085      	lsls	r5, r0
 8002060:	000a      	movs	r2, r1
 8002062:	4084      	lsls	r4, r0
 8002064:	432a      	orrs	r2, r5
 8002066:	4693      	mov	fp, r2
 8002068:	46a2      	mov	sl, r4
 800206a:	4d5f      	ldr	r5, [pc, #380]	; (80021e8 <__aeabi_dmul+0x574>)
 800206c:	2600      	movs	r6, #0
 800206e:	1aed      	subs	r5, r5, r3
 8002070:	2300      	movs	r3, #0
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	e625      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 8002076:	465b      	mov	r3, fp
 8002078:	4303      	orrs	r3, r0
 800207a:	469a      	mov	sl, r3
 800207c:	d105      	bne.n	800208a <__aeabi_dmul+0x416>
 800207e:	2300      	movs	r3, #0
 8002080:	469b      	mov	fp, r3
 8002082:	3302      	adds	r3, #2
 8002084:	2608      	movs	r6, #8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	e61b      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 800208a:	2303      	movs	r3, #3
 800208c:	4682      	mov	sl, r0
 800208e:	260c      	movs	r6, #12
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	e616      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 8002094:	2300      	movs	r3, #0
 8002096:	469b      	mov	fp, r3
 8002098:	3301      	adds	r3, #1
 800209a:	2604      	movs	r6, #4
 800209c:	2500      	movs	r5, #0
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	e60f      	b.n	8001cc2 <__aeabi_dmul+0x4e>
 80020a2:	4642      	mov	r2, r8
 80020a4:	3301      	adds	r3, #1
 80020a6:	9501      	str	r5, [sp, #4]
 80020a8:	431e      	orrs	r6, r3
 80020aa:	9b01      	ldr	r3, [sp, #4]
 80020ac:	407a      	eors	r2, r7
 80020ae:	3301      	adds	r3, #1
 80020b0:	2400      	movs	r4, #0
 80020b2:	2000      	movs	r0, #0
 80020b4:	2101      	movs	r1, #1
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	9302      	str	r3, [sp, #8]
 80020ba:	2e0a      	cmp	r6, #10
 80020bc:	dd00      	ble.n	80020c0 <__aeabi_dmul+0x44c>
 80020be:	e621      	b.n	8001d04 <__aeabi_dmul+0x90>
 80020c0:	e63d      	b.n	8001d3e <__aeabi_dmul+0xca>
 80020c2:	2101      	movs	r1, #1
 80020c4:	1ac9      	subs	r1, r1, r3
 80020c6:	2938      	cmp	r1, #56	; 0x38
 80020c8:	dd00      	ble.n	80020cc <__aeabi_dmul+0x458>
 80020ca:	e642      	b.n	8001d52 <__aeabi_dmul+0xde>
 80020cc:	291f      	cmp	r1, #31
 80020ce:	dd47      	ble.n	8002160 <__aeabi_dmul+0x4ec>
 80020d0:	261f      	movs	r6, #31
 80020d2:	0025      	movs	r5, r4
 80020d4:	4276      	negs	r6, r6
 80020d6:	1af3      	subs	r3, r6, r3
 80020d8:	40dd      	lsrs	r5, r3
 80020da:	002b      	movs	r3, r5
 80020dc:	2920      	cmp	r1, #32
 80020de:	d005      	beq.n	80020ec <__aeabi_dmul+0x478>
 80020e0:	4942      	ldr	r1, [pc, #264]	; (80021ec <__aeabi_dmul+0x578>)
 80020e2:	9d02      	ldr	r5, [sp, #8]
 80020e4:	468c      	mov	ip, r1
 80020e6:	4465      	add	r5, ip
 80020e8:	40ac      	lsls	r4, r5
 80020ea:	4320      	orrs	r0, r4
 80020ec:	1e41      	subs	r1, r0, #1
 80020ee:	4188      	sbcs	r0, r1
 80020f0:	4318      	orrs	r0, r3
 80020f2:	2307      	movs	r3, #7
 80020f4:	001d      	movs	r5, r3
 80020f6:	2400      	movs	r4, #0
 80020f8:	4005      	ands	r5, r0
 80020fa:	4203      	tst	r3, r0
 80020fc:	d04a      	beq.n	8002194 <__aeabi_dmul+0x520>
 80020fe:	230f      	movs	r3, #15
 8002100:	2400      	movs	r4, #0
 8002102:	4003      	ands	r3, r0
 8002104:	2b04      	cmp	r3, #4
 8002106:	d042      	beq.n	800218e <__aeabi_dmul+0x51a>
 8002108:	1d03      	adds	r3, r0, #4
 800210a:	4283      	cmp	r3, r0
 800210c:	4180      	sbcs	r0, r0
 800210e:	4240      	negs	r0, r0
 8002110:	1824      	adds	r4, r4, r0
 8002112:	0018      	movs	r0, r3
 8002114:	0223      	lsls	r3, r4, #8
 8002116:	d53a      	bpl.n	800218e <__aeabi_dmul+0x51a>
 8002118:	2301      	movs	r3, #1
 800211a:	2400      	movs	r4, #0
 800211c:	2500      	movs	r5, #0
 800211e:	e61b      	b.n	8001d58 <__aeabi_dmul+0xe4>
 8002120:	f000 fd64 	bl	8002bec <__clzsi2>
 8002124:	0001      	movs	r1, r0
 8002126:	0003      	movs	r3, r0
 8002128:	3115      	adds	r1, #21
 800212a:	3320      	adds	r3, #32
 800212c:	291c      	cmp	r1, #28
 800212e:	dd8f      	ble.n	8002050 <__aeabi_dmul+0x3dc>
 8002130:	3808      	subs	r0, #8
 8002132:	2200      	movs	r2, #0
 8002134:	4084      	lsls	r4, r0
 8002136:	4692      	mov	sl, r2
 8002138:	46a3      	mov	fp, r4
 800213a:	e796      	b.n	800206a <__aeabi_dmul+0x3f6>
 800213c:	f000 fd56 	bl	8002bec <__clzsi2>
 8002140:	0001      	movs	r1, r0
 8002142:	0003      	movs	r3, r0
 8002144:	3115      	adds	r1, #21
 8002146:	3320      	adds	r3, #32
 8002148:	291c      	cmp	r1, #28
 800214a:	dc00      	bgt.n	800214e <__aeabi_dmul+0x4da>
 800214c:	e758      	b.n	8002000 <__aeabi_dmul+0x38c>
 800214e:	0002      	movs	r2, r0
 8002150:	464c      	mov	r4, r9
 8002152:	3a08      	subs	r2, #8
 8002154:	2000      	movs	r0, #0
 8002156:	4094      	lsls	r4, r2
 8002158:	e75d      	b.n	8002016 <__aeabi_dmul+0x3a2>
 800215a:	9b01      	ldr	r3, [sp, #4]
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	e711      	b.n	8001f84 <__aeabi_dmul+0x310>
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <__aeabi_dmul+0x57c>)
 8002162:	0026      	movs	r6, r4
 8002164:	469c      	mov	ip, r3
 8002166:	0003      	movs	r3, r0
 8002168:	9d02      	ldr	r5, [sp, #8]
 800216a:	40cb      	lsrs	r3, r1
 800216c:	4465      	add	r5, ip
 800216e:	40ae      	lsls	r6, r5
 8002170:	431e      	orrs	r6, r3
 8002172:	0003      	movs	r3, r0
 8002174:	40ab      	lsls	r3, r5
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	4183      	sbcs	r3, r0
 800217a:	0030      	movs	r0, r6
 800217c:	4318      	orrs	r0, r3
 800217e:	40cc      	lsrs	r4, r1
 8002180:	0743      	lsls	r3, r0, #29
 8002182:	d0c7      	beq.n	8002114 <__aeabi_dmul+0x4a0>
 8002184:	230f      	movs	r3, #15
 8002186:	4003      	ands	r3, r0
 8002188:	2b04      	cmp	r3, #4
 800218a:	d1bd      	bne.n	8002108 <__aeabi_dmul+0x494>
 800218c:	e7c2      	b.n	8002114 <__aeabi_dmul+0x4a0>
 800218e:	0765      	lsls	r5, r4, #29
 8002190:	0264      	lsls	r4, r4, #9
 8002192:	0b24      	lsrs	r4, r4, #12
 8002194:	08c0      	lsrs	r0, r0, #3
 8002196:	2300      	movs	r3, #0
 8002198:	4305      	orrs	r5, r0
 800219a:	e5dd      	b.n	8001d58 <__aeabi_dmul+0xe4>
 800219c:	2500      	movs	r5, #0
 800219e:	2302      	movs	r3, #2
 80021a0:	2e0f      	cmp	r6, #15
 80021a2:	d10c      	bne.n	80021be <__aeabi_dmul+0x54a>
 80021a4:	2480      	movs	r4, #128	; 0x80
 80021a6:	465b      	mov	r3, fp
 80021a8:	0324      	lsls	r4, r4, #12
 80021aa:	4223      	tst	r3, r4
 80021ac:	d00e      	beq.n	80021cc <__aeabi_dmul+0x558>
 80021ae:	4221      	tst	r1, r4
 80021b0:	d10c      	bne.n	80021cc <__aeabi_dmul+0x558>
 80021b2:	430c      	orrs	r4, r1
 80021b4:	0324      	lsls	r4, r4, #12
 80021b6:	003a      	movs	r2, r7
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <__aeabi_dmul+0x580>)
 80021ba:	0b24      	lsrs	r4, r4, #12
 80021bc:	e5cc      	b.n	8001d58 <__aeabi_dmul+0xe4>
 80021be:	2e0b      	cmp	r6, #11
 80021c0:	d000      	beq.n	80021c4 <__aeabi_dmul+0x550>
 80021c2:	e5a2      	b.n	8001d0a <__aeabi_dmul+0x96>
 80021c4:	468b      	mov	fp, r1
 80021c6:	46aa      	mov	sl, r5
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	e5f7      	b.n	8001dbc <__aeabi_dmul+0x148>
 80021cc:	2480      	movs	r4, #128	; 0x80
 80021ce:	465b      	mov	r3, fp
 80021d0:	0324      	lsls	r4, r4, #12
 80021d2:	431c      	orrs	r4, r3
 80021d4:	0324      	lsls	r4, r4, #12
 80021d6:	4642      	mov	r2, r8
 80021d8:	4655      	mov	r5, sl
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <__aeabi_dmul+0x580>)
 80021dc:	0b24      	lsrs	r4, r4, #12
 80021de:	e5bb      	b.n	8001d58 <__aeabi_dmul+0xe4>
 80021e0:	464d      	mov	r5, r9
 80021e2:	0021      	movs	r1, r4
 80021e4:	2303      	movs	r3, #3
 80021e6:	e7db      	b.n	80021a0 <__aeabi_dmul+0x52c>
 80021e8:	fffffc0d 	.word	0xfffffc0d
 80021ec:	0000043e 	.word	0x0000043e
 80021f0:	0000041e 	.word	0x0000041e
 80021f4:	000007ff 	.word	0x000007ff

080021f8 <__aeabi_dsub>:
 80021f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021fa:	4657      	mov	r7, sl
 80021fc:	464e      	mov	r6, r9
 80021fe:	4645      	mov	r5, r8
 8002200:	46de      	mov	lr, fp
 8002202:	b5e0      	push	{r5, r6, r7, lr}
 8002204:	000d      	movs	r5, r1
 8002206:	0004      	movs	r4, r0
 8002208:	0019      	movs	r1, r3
 800220a:	0010      	movs	r0, r2
 800220c:	032b      	lsls	r3, r5, #12
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	0f62      	lsrs	r2, r4, #29
 8002212:	431a      	orrs	r2, r3
 8002214:	00e3      	lsls	r3, r4, #3
 8002216:	030c      	lsls	r4, r1, #12
 8002218:	0a64      	lsrs	r4, r4, #9
 800221a:	0f47      	lsrs	r7, r0, #29
 800221c:	4327      	orrs	r7, r4
 800221e:	4cd0      	ldr	r4, [pc, #832]	; (8002560 <__aeabi_dsub+0x368>)
 8002220:	006e      	lsls	r6, r5, #1
 8002222:	4691      	mov	r9, r2
 8002224:	b083      	sub	sp, #12
 8002226:	004a      	lsls	r2, r1, #1
 8002228:	00c0      	lsls	r0, r0, #3
 800222a:	4698      	mov	r8, r3
 800222c:	46a2      	mov	sl, r4
 800222e:	0d76      	lsrs	r6, r6, #21
 8002230:	0fed      	lsrs	r5, r5, #31
 8002232:	0d52      	lsrs	r2, r2, #21
 8002234:	0fc9      	lsrs	r1, r1, #31
 8002236:	9001      	str	r0, [sp, #4]
 8002238:	42a2      	cmp	r2, r4
 800223a:	d100      	bne.n	800223e <__aeabi_dsub+0x46>
 800223c:	e0b9      	b.n	80023b2 <__aeabi_dsub+0x1ba>
 800223e:	2401      	movs	r4, #1
 8002240:	4061      	eors	r1, r4
 8002242:	468b      	mov	fp, r1
 8002244:	428d      	cmp	r5, r1
 8002246:	d100      	bne.n	800224a <__aeabi_dsub+0x52>
 8002248:	e08d      	b.n	8002366 <__aeabi_dsub+0x16e>
 800224a:	1ab4      	subs	r4, r6, r2
 800224c:	46a4      	mov	ip, r4
 800224e:	2c00      	cmp	r4, #0
 8002250:	dc00      	bgt.n	8002254 <__aeabi_dsub+0x5c>
 8002252:	e0b7      	b.n	80023c4 <__aeabi_dsub+0x1cc>
 8002254:	2a00      	cmp	r2, #0
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x62>
 8002258:	e0cb      	b.n	80023f2 <__aeabi_dsub+0x1fa>
 800225a:	4ac1      	ldr	r2, [pc, #772]	; (8002560 <__aeabi_dsub+0x368>)
 800225c:	4296      	cmp	r6, r2
 800225e:	d100      	bne.n	8002262 <__aeabi_dsub+0x6a>
 8002260:	e186      	b.n	8002570 <__aeabi_dsub+0x378>
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	0412      	lsls	r2, r2, #16
 8002266:	4317      	orrs	r7, r2
 8002268:	4662      	mov	r2, ip
 800226a:	2a38      	cmp	r2, #56	; 0x38
 800226c:	dd00      	ble.n	8002270 <__aeabi_dsub+0x78>
 800226e:	e1a4      	b.n	80025ba <__aeabi_dsub+0x3c2>
 8002270:	2a1f      	cmp	r2, #31
 8002272:	dd00      	ble.n	8002276 <__aeabi_dsub+0x7e>
 8002274:	e21d      	b.n	80026b2 <__aeabi_dsub+0x4ba>
 8002276:	4661      	mov	r1, ip
 8002278:	2220      	movs	r2, #32
 800227a:	003c      	movs	r4, r7
 800227c:	1a52      	subs	r2, r2, r1
 800227e:	0001      	movs	r1, r0
 8002280:	4090      	lsls	r0, r2
 8002282:	4094      	lsls	r4, r2
 8002284:	1e42      	subs	r2, r0, #1
 8002286:	4190      	sbcs	r0, r2
 8002288:	4662      	mov	r2, ip
 800228a:	46a0      	mov	r8, r4
 800228c:	4664      	mov	r4, ip
 800228e:	40d7      	lsrs	r7, r2
 8002290:	464a      	mov	r2, r9
 8002292:	40e1      	lsrs	r1, r4
 8002294:	4644      	mov	r4, r8
 8002296:	1bd2      	subs	r2, r2, r7
 8002298:	4691      	mov	r9, r2
 800229a:	430c      	orrs	r4, r1
 800229c:	4304      	orrs	r4, r0
 800229e:	1b1c      	subs	r4, r3, r4
 80022a0:	42a3      	cmp	r3, r4
 80022a2:	4192      	sbcs	r2, r2
 80022a4:	464b      	mov	r3, r9
 80022a6:	4252      	negs	r2, r2
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	469a      	mov	sl, r3
 80022ac:	4653      	mov	r3, sl
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	d400      	bmi.n	80022b4 <__aeabi_dsub+0xbc>
 80022b2:	e12b      	b.n	800250c <__aeabi_dsub+0x314>
 80022b4:	4653      	mov	r3, sl
 80022b6:	025a      	lsls	r2, r3, #9
 80022b8:	0a53      	lsrs	r3, r2, #9
 80022ba:	469a      	mov	sl, r3
 80022bc:	4653      	mov	r3, sl
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d100      	bne.n	80022c4 <__aeabi_dsub+0xcc>
 80022c2:	e166      	b.n	8002592 <__aeabi_dsub+0x39a>
 80022c4:	4650      	mov	r0, sl
 80022c6:	f000 fc91 	bl	8002bec <__clzsi2>
 80022ca:	0003      	movs	r3, r0
 80022cc:	3b08      	subs	r3, #8
 80022ce:	2220      	movs	r2, #32
 80022d0:	0020      	movs	r0, r4
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	4651      	mov	r1, sl
 80022d6:	40d0      	lsrs	r0, r2
 80022d8:	4099      	lsls	r1, r3
 80022da:	0002      	movs	r2, r0
 80022dc:	409c      	lsls	r4, r3
 80022de:	430a      	orrs	r2, r1
 80022e0:	429e      	cmp	r6, r3
 80022e2:	dd00      	ble.n	80022e6 <__aeabi_dsub+0xee>
 80022e4:	e164      	b.n	80025b0 <__aeabi_dsub+0x3b8>
 80022e6:	1b9b      	subs	r3, r3, r6
 80022e8:	1c59      	adds	r1, r3, #1
 80022ea:	291f      	cmp	r1, #31
 80022ec:	dd00      	ble.n	80022f0 <__aeabi_dsub+0xf8>
 80022ee:	e0fe      	b.n	80024ee <__aeabi_dsub+0x2f6>
 80022f0:	2320      	movs	r3, #32
 80022f2:	0010      	movs	r0, r2
 80022f4:	0026      	movs	r6, r4
 80022f6:	1a5b      	subs	r3, r3, r1
 80022f8:	409c      	lsls	r4, r3
 80022fa:	4098      	lsls	r0, r3
 80022fc:	40ce      	lsrs	r6, r1
 80022fe:	40ca      	lsrs	r2, r1
 8002300:	1e63      	subs	r3, r4, #1
 8002302:	419c      	sbcs	r4, r3
 8002304:	4330      	orrs	r0, r6
 8002306:	4692      	mov	sl, r2
 8002308:	2600      	movs	r6, #0
 800230a:	4304      	orrs	r4, r0
 800230c:	0763      	lsls	r3, r4, #29
 800230e:	d009      	beq.n	8002324 <__aeabi_dsub+0x12c>
 8002310:	230f      	movs	r3, #15
 8002312:	4023      	ands	r3, r4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d005      	beq.n	8002324 <__aeabi_dsub+0x12c>
 8002318:	1d23      	adds	r3, r4, #4
 800231a:	42a3      	cmp	r3, r4
 800231c:	41a4      	sbcs	r4, r4
 800231e:	4264      	negs	r4, r4
 8002320:	44a2      	add	sl, r4
 8002322:	001c      	movs	r4, r3
 8002324:	4653      	mov	r3, sl
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	d400      	bmi.n	800232c <__aeabi_dsub+0x134>
 800232a:	e0f2      	b.n	8002512 <__aeabi_dsub+0x31a>
 800232c:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <__aeabi_dsub+0x368>)
 800232e:	3601      	adds	r6, #1
 8002330:	429e      	cmp	r6, r3
 8002332:	d100      	bne.n	8002336 <__aeabi_dsub+0x13e>
 8002334:	e10f      	b.n	8002556 <__aeabi_dsub+0x35e>
 8002336:	4653      	mov	r3, sl
 8002338:	498a      	ldr	r1, [pc, #552]	; (8002564 <__aeabi_dsub+0x36c>)
 800233a:	08e4      	lsrs	r4, r4, #3
 800233c:	400b      	ands	r3, r1
 800233e:	0019      	movs	r1, r3
 8002340:	075b      	lsls	r3, r3, #29
 8002342:	4323      	orrs	r3, r4
 8002344:	0572      	lsls	r2, r6, #21
 8002346:	024c      	lsls	r4, r1, #9
 8002348:	0b24      	lsrs	r4, r4, #12
 800234a:	0d52      	lsrs	r2, r2, #21
 800234c:	0512      	lsls	r2, r2, #20
 800234e:	4322      	orrs	r2, r4
 8002350:	07ed      	lsls	r5, r5, #31
 8002352:	432a      	orrs	r2, r5
 8002354:	0018      	movs	r0, r3
 8002356:	0011      	movs	r1, r2
 8002358:	b003      	add	sp, #12
 800235a:	bcf0      	pop	{r4, r5, r6, r7}
 800235c:	46bb      	mov	fp, r7
 800235e:	46b2      	mov	sl, r6
 8002360:	46a9      	mov	r9, r5
 8002362:	46a0      	mov	r8, r4
 8002364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002366:	1ab4      	subs	r4, r6, r2
 8002368:	46a4      	mov	ip, r4
 800236a:	2c00      	cmp	r4, #0
 800236c:	dd59      	ble.n	8002422 <__aeabi_dsub+0x22a>
 800236e:	2a00      	cmp	r2, #0
 8002370:	d100      	bne.n	8002374 <__aeabi_dsub+0x17c>
 8002372:	e0b0      	b.n	80024d6 <__aeabi_dsub+0x2de>
 8002374:	4556      	cmp	r6, sl
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x182>
 8002378:	e0fa      	b.n	8002570 <__aeabi_dsub+0x378>
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	0412      	lsls	r2, r2, #16
 800237e:	4317      	orrs	r7, r2
 8002380:	4662      	mov	r2, ip
 8002382:	2a38      	cmp	r2, #56	; 0x38
 8002384:	dd00      	ble.n	8002388 <__aeabi_dsub+0x190>
 8002386:	e0d4      	b.n	8002532 <__aeabi_dsub+0x33a>
 8002388:	2a1f      	cmp	r2, #31
 800238a:	dc00      	bgt.n	800238e <__aeabi_dsub+0x196>
 800238c:	e1c0      	b.n	8002710 <__aeabi_dsub+0x518>
 800238e:	0039      	movs	r1, r7
 8002390:	3a20      	subs	r2, #32
 8002392:	40d1      	lsrs	r1, r2
 8002394:	4662      	mov	r2, ip
 8002396:	2a20      	cmp	r2, #32
 8002398:	d006      	beq.n	80023a8 <__aeabi_dsub+0x1b0>
 800239a:	4664      	mov	r4, ip
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	1b12      	subs	r2, r2, r4
 80023a0:	003c      	movs	r4, r7
 80023a2:	4094      	lsls	r4, r2
 80023a4:	4304      	orrs	r4, r0
 80023a6:	9401      	str	r4, [sp, #4]
 80023a8:	9c01      	ldr	r4, [sp, #4]
 80023aa:	1e62      	subs	r2, r4, #1
 80023ac:	4194      	sbcs	r4, r2
 80023ae:	430c      	orrs	r4, r1
 80023b0:	e0c3      	b.n	800253a <__aeabi_dsub+0x342>
 80023b2:	003c      	movs	r4, r7
 80023b4:	4304      	orrs	r4, r0
 80023b6:	d02b      	beq.n	8002410 <__aeabi_dsub+0x218>
 80023b8:	468b      	mov	fp, r1
 80023ba:	428d      	cmp	r5, r1
 80023bc:	d02e      	beq.n	800241c <__aeabi_dsub+0x224>
 80023be:	4c6a      	ldr	r4, [pc, #424]	; (8002568 <__aeabi_dsub+0x370>)
 80023c0:	46a4      	mov	ip, r4
 80023c2:	44b4      	add	ip, r6
 80023c4:	4664      	mov	r4, ip
 80023c6:	2c00      	cmp	r4, #0
 80023c8:	d05f      	beq.n	800248a <__aeabi_dsub+0x292>
 80023ca:	1b94      	subs	r4, r2, r6
 80023cc:	46a4      	mov	ip, r4
 80023ce:	2e00      	cmp	r6, #0
 80023d0:	d000      	beq.n	80023d4 <__aeabi_dsub+0x1dc>
 80023d2:	e120      	b.n	8002616 <__aeabi_dsub+0x41e>
 80023d4:	464c      	mov	r4, r9
 80023d6:	431c      	orrs	r4, r3
 80023d8:	d100      	bne.n	80023dc <__aeabi_dsub+0x1e4>
 80023da:	e1c7      	b.n	800276c <__aeabi_dsub+0x574>
 80023dc:	4661      	mov	r1, ip
 80023de:	1e4c      	subs	r4, r1, #1
 80023e0:	2901      	cmp	r1, #1
 80023e2:	d100      	bne.n	80023e6 <__aeabi_dsub+0x1ee>
 80023e4:	e223      	b.n	800282e <__aeabi_dsub+0x636>
 80023e6:	4d5e      	ldr	r5, [pc, #376]	; (8002560 <__aeabi_dsub+0x368>)
 80023e8:	45ac      	cmp	ip, r5
 80023ea:	d100      	bne.n	80023ee <__aeabi_dsub+0x1f6>
 80023ec:	e1d8      	b.n	80027a0 <__aeabi_dsub+0x5a8>
 80023ee:	46a4      	mov	ip, r4
 80023f0:	e11a      	b.n	8002628 <__aeabi_dsub+0x430>
 80023f2:	003a      	movs	r2, r7
 80023f4:	4302      	orrs	r2, r0
 80023f6:	d100      	bne.n	80023fa <__aeabi_dsub+0x202>
 80023f8:	e0e4      	b.n	80025c4 <__aeabi_dsub+0x3cc>
 80023fa:	0022      	movs	r2, r4
 80023fc:	3a01      	subs	r2, #1
 80023fe:	2c01      	cmp	r4, #1
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x20c>
 8002402:	e1c3      	b.n	800278c <__aeabi_dsub+0x594>
 8002404:	4956      	ldr	r1, [pc, #344]	; (8002560 <__aeabi_dsub+0x368>)
 8002406:	428c      	cmp	r4, r1
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x214>
 800240a:	e0b1      	b.n	8002570 <__aeabi_dsub+0x378>
 800240c:	4694      	mov	ip, r2
 800240e:	e72b      	b.n	8002268 <__aeabi_dsub+0x70>
 8002410:	2401      	movs	r4, #1
 8002412:	4061      	eors	r1, r4
 8002414:	468b      	mov	fp, r1
 8002416:	428d      	cmp	r5, r1
 8002418:	d000      	beq.n	800241c <__aeabi_dsub+0x224>
 800241a:	e716      	b.n	800224a <__aeabi_dsub+0x52>
 800241c:	4952      	ldr	r1, [pc, #328]	; (8002568 <__aeabi_dsub+0x370>)
 800241e:	468c      	mov	ip, r1
 8002420:	44b4      	add	ip, r6
 8002422:	4664      	mov	r4, ip
 8002424:	2c00      	cmp	r4, #0
 8002426:	d100      	bne.n	800242a <__aeabi_dsub+0x232>
 8002428:	e0d3      	b.n	80025d2 <__aeabi_dsub+0x3da>
 800242a:	1b91      	subs	r1, r2, r6
 800242c:	468c      	mov	ip, r1
 800242e:	2e00      	cmp	r6, #0
 8002430:	d100      	bne.n	8002434 <__aeabi_dsub+0x23c>
 8002432:	e15e      	b.n	80026f2 <__aeabi_dsub+0x4fa>
 8002434:	494a      	ldr	r1, [pc, #296]	; (8002560 <__aeabi_dsub+0x368>)
 8002436:	428a      	cmp	r2, r1
 8002438:	d100      	bne.n	800243c <__aeabi_dsub+0x244>
 800243a:	e1be      	b.n	80027ba <__aeabi_dsub+0x5c2>
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	464c      	mov	r4, r9
 8002440:	0409      	lsls	r1, r1, #16
 8002442:	430c      	orrs	r4, r1
 8002444:	46a1      	mov	r9, r4
 8002446:	4661      	mov	r1, ip
 8002448:	2938      	cmp	r1, #56	; 0x38
 800244a:	dd00      	ble.n	800244e <__aeabi_dsub+0x256>
 800244c:	e1ba      	b.n	80027c4 <__aeabi_dsub+0x5cc>
 800244e:	291f      	cmp	r1, #31
 8002450:	dd00      	ble.n	8002454 <__aeabi_dsub+0x25c>
 8002452:	e227      	b.n	80028a4 <__aeabi_dsub+0x6ac>
 8002454:	2420      	movs	r4, #32
 8002456:	1a64      	subs	r4, r4, r1
 8002458:	4649      	mov	r1, r9
 800245a:	40a1      	lsls	r1, r4
 800245c:	001e      	movs	r6, r3
 800245e:	4688      	mov	r8, r1
 8002460:	4661      	mov	r1, ip
 8002462:	40a3      	lsls	r3, r4
 8002464:	40ce      	lsrs	r6, r1
 8002466:	4641      	mov	r1, r8
 8002468:	1e5c      	subs	r4, r3, #1
 800246a:	41a3      	sbcs	r3, r4
 800246c:	4331      	orrs	r1, r6
 800246e:	4319      	orrs	r1, r3
 8002470:	000c      	movs	r4, r1
 8002472:	4663      	mov	r3, ip
 8002474:	4649      	mov	r1, r9
 8002476:	40d9      	lsrs	r1, r3
 8002478:	187f      	adds	r7, r7, r1
 800247a:	1824      	adds	r4, r4, r0
 800247c:	4284      	cmp	r4, r0
 800247e:	419b      	sbcs	r3, r3
 8002480:	425b      	negs	r3, r3
 8002482:	469a      	mov	sl, r3
 8002484:	0016      	movs	r6, r2
 8002486:	44ba      	add	sl, r7
 8002488:	e05d      	b.n	8002546 <__aeabi_dsub+0x34e>
 800248a:	4c38      	ldr	r4, [pc, #224]	; (800256c <__aeabi_dsub+0x374>)
 800248c:	1c72      	adds	r2, r6, #1
 800248e:	4222      	tst	r2, r4
 8002490:	d000      	beq.n	8002494 <__aeabi_dsub+0x29c>
 8002492:	e0df      	b.n	8002654 <__aeabi_dsub+0x45c>
 8002494:	464a      	mov	r2, r9
 8002496:	431a      	orrs	r2, r3
 8002498:	2e00      	cmp	r6, #0
 800249a:	d000      	beq.n	800249e <__aeabi_dsub+0x2a6>
 800249c:	e15c      	b.n	8002758 <__aeabi_dsub+0x560>
 800249e:	2a00      	cmp	r2, #0
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x2ac>
 80024a2:	e1cf      	b.n	8002844 <__aeabi_dsub+0x64c>
 80024a4:	003a      	movs	r2, r7
 80024a6:	4302      	orrs	r2, r0
 80024a8:	d100      	bne.n	80024ac <__aeabi_dsub+0x2b4>
 80024aa:	e17f      	b.n	80027ac <__aeabi_dsub+0x5b4>
 80024ac:	1a1c      	subs	r4, r3, r0
 80024ae:	464a      	mov	r2, r9
 80024b0:	42a3      	cmp	r3, r4
 80024b2:	4189      	sbcs	r1, r1
 80024b4:	1bd2      	subs	r2, r2, r7
 80024b6:	4249      	negs	r1, r1
 80024b8:	1a52      	subs	r2, r2, r1
 80024ba:	4692      	mov	sl, r2
 80024bc:	0212      	lsls	r2, r2, #8
 80024be:	d400      	bmi.n	80024c2 <__aeabi_dsub+0x2ca>
 80024c0:	e20a      	b.n	80028d8 <__aeabi_dsub+0x6e0>
 80024c2:	1ac4      	subs	r4, r0, r3
 80024c4:	42a0      	cmp	r0, r4
 80024c6:	4180      	sbcs	r0, r0
 80024c8:	464b      	mov	r3, r9
 80024ca:	4240      	negs	r0, r0
 80024cc:	1aff      	subs	r7, r7, r3
 80024ce:	1a3b      	subs	r3, r7, r0
 80024d0:	469a      	mov	sl, r3
 80024d2:	465d      	mov	r5, fp
 80024d4:	e71a      	b.n	800230c <__aeabi_dsub+0x114>
 80024d6:	003a      	movs	r2, r7
 80024d8:	4302      	orrs	r2, r0
 80024da:	d073      	beq.n	80025c4 <__aeabi_dsub+0x3cc>
 80024dc:	0022      	movs	r2, r4
 80024de:	3a01      	subs	r2, #1
 80024e0:	2c01      	cmp	r4, #1
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x2ee>
 80024e4:	e0cb      	b.n	800267e <__aeabi_dsub+0x486>
 80024e6:	4554      	cmp	r4, sl
 80024e8:	d042      	beq.n	8002570 <__aeabi_dsub+0x378>
 80024ea:	4694      	mov	ip, r2
 80024ec:	e748      	b.n	8002380 <__aeabi_dsub+0x188>
 80024ee:	0010      	movs	r0, r2
 80024f0:	3b1f      	subs	r3, #31
 80024f2:	40d8      	lsrs	r0, r3
 80024f4:	2920      	cmp	r1, #32
 80024f6:	d003      	beq.n	8002500 <__aeabi_dsub+0x308>
 80024f8:	2340      	movs	r3, #64	; 0x40
 80024fa:	1a5b      	subs	r3, r3, r1
 80024fc:	409a      	lsls	r2, r3
 80024fe:	4314      	orrs	r4, r2
 8002500:	1e63      	subs	r3, r4, #1
 8002502:	419c      	sbcs	r4, r3
 8002504:	2300      	movs	r3, #0
 8002506:	2600      	movs	r6, #0
 8002508:	469a      	mov	sl, r3
 800250a:	4304      	orrs	r4, r0
 800250c:	0763      	lsls	r3, r4, #29
 800250e:	d000      	beq.n	8002512 <__aeabi_dsub+0x31a>
 8002510:	e6fe      	b.n	8002310 <__aeabi_dsub+0x118>
 8002512:	4652      	mov	r2, sl
 8002514:	08e3      	lsrs	r3, r4, #3
 8002516:	0752      	lsls	r2, r2, #29
 8002518:	4313      	orrs	r3, r2
 800251a:	4652      	mov	r2, sl
 800251c:	46b4      	mov	ip, r6
 800251e:	08d2      	lsrs	r2, r2, #3
 8002520:	490f      	ldr	r1, [pc, #60]	; (8002560 <__aeabi_dsub+0x368>)
 8002522:	458c      	cmp	ip, r1
 8002524:	d02a      	beq.n	800257c <__aeabi_dsub+0x384>
 8002526:	0312      	lsls	r2, r2, #12
 8002528:	0b14      	lsrs	r4, r2, #12
 800252a:	4662      	mov	r2, ip
 800252c:	0552      	lsls	r2, r2, #21
 800252e:	0d52      	lsrs	r2, r2, #21
 8002530:	e70c      	b.n	800234c <__aeabi_dsub+0x154>
 8002532:	003c      	movs	r4, r7
 8002534:	4304      	orrs	r4, r0
 8002536:	1e62      	subs	r2, r4, #1
 8002538:	4194      	sbcs	r4, r2
 800253a:	18e4      	adds	r4, r4, r3
 800253c:	429c      	cmp	r4, r3
 800253e:	4192      	sbcs	r2, r2
 8002540:	4252      	negs	r2, r2
 8002542:	444a      	add	r2, r9
 8002544:	4692      	mov	sl, r2
 8002546:	4653      	mov	r3, sl
 8002548:	021b      	lsls	r3, r3, #8
 800254a:	d5df      	bpl.n	800250c <__aeabi_dsub+0x314>
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <__aeabi_dsub+0x368>)
 800254e:	3601      	adds	r6, #1
 8002550:	429e      	cmp	r6, r3
 8002552:	d000      	beq.n	8002556 <__aeabi_dsub+0x35e>
 8002554:	e0a0      	b.n	8002698 <__aeabi_dsub+0x4a0>
 8002556:	0032      	movs	r2, r6
 8002558:	2400      	movs	r4, #0
 800255a:	2300      	movs	r3, #0
 800255c:	e6f6      	b.n	800234c <__aeabi_dsub+0x154>
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	000007ff 	.word	0x000007ff
 8002564:	ff7fffff 	.word	0xff7fffff
 8002568:	fffff801 	.word	0xfffff801
 800256c:	000007fe 	.word	0x000007fe
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	464a      	mov	r2, r9
 8002574:	0752      	lsls	r2, r2, #29
 8002576:	4313      	orrs	r3, r2
 8002578:	464a      	mov	r2, r9
 800257a:	08d2      	lsrs	r2, r2, #3
 800257c:	0019      	movs	r1, r3
 800257e:	4311      	orrs	r1, r2
 8002580:	d100      	bne.n	8002584 <__aeabi_dsub+0x38c>
 8002582:	e1b5      	b.n	80028f0 <__aeabi_dsub+0x6f8>
 8002584:	2480      	movs	r4, #128	; 0x80
 8002586:	0324      	lsls	r4, r4, #12
 8002588:	4314      	orrs	r4, r2
 800258a:	0324      	lsls	r4, r4, #12
 800258c:	4ad5      	ldr	r2, [pc, #852]	; (80028e4 <__aeabi_dsub+0x6ec>)
 800258e:	0b24      	lsrs	r4, r4, #12
 8002590:	e6dc      	b.n	800234c <__aeabi_dsub+0x154>
 8002592:	0020      	movs	r0, r4
 8002594:	f000 fb2a 	bl	8002bec <__clzsi2>
 8002598:	0003      	movs	r3, r0
 800259a:	3318      	adds	r3, #24
 800259c:	2b1f      	cmp	r3, #31
 800259e:	dc00      	bgt.n	80025a2 <__aeabi_dsub+0x3aa>
 80025a0:	e695      	b.n	80022ce <__aeabi_dsub+0xd6>
 80025a2:	0022      	movs	r2, r4
 80025a4:	3808      	subs	r0, #8
 80025a6:	4082      	lsls	r2, r0
 80025a8:	2400      	movs	r4, #0
 80025aa:	429e      	cmp	r6, r3
 80025ac:	dc00      	bgt.n	80025b0 <__aeabi_dsub+0x3b8>
 80025ae:	e69a      	b.n	80022e6 <__aeabi_dsub+0xee>
 80025b0:	1af6      	subs	r6, r6, r3
 80025b2:	4bcd      	ldr	r3, [pc, #820]	; (80028e8 <__aeabi_dsub+0x6f0>)
 80025b4:	401a      	ands	r2, r3
 80025b6:	4692      	mov	sl, r2
 80025b8:	e6a8      	b.n	800230c <__aeabi_dsub+0x114>
 80025ba:	003c      	movs	r4, r7
 80025bc:	4304      	orrs	r4, r0
 80025be:	1e62      	subs	r2, r4, #1
 80025c0:	4194      	sbcs	r4, r2
 80025c2:	e66c      	b.n	800229e <__aeabi_dsub+0xa6>
 80025c4:	464a      	mov	r2, r9
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	0752      	lsls	r2, r2, #29
 80025ca:	4313      	orrs	r3, r2
 80025cc:	464a      	mov	r2, r9
 80025ce:	08d2      	lsrs	r2, r2, #3
 80025d0:	e7a6      	b.n	8002520 <__aeabi_dsub+0x328>
 80025d2:	4cc6      	ldr	r4, [pc, #792]	; (80028ec <__aeabi_dsub+0x6f4>)
 80025d4:	1c72      	adds	r2, r6, #1
 80025d6:	4222      	tst	r2, r4
 80025d8:	d000      	beq.n	80025dc <__aeabi_dsub+0x3e4>
 80025da:	e0ac      	b.n	8002736 <__aeabi_dsub+0x53e>
 80025dc:	464a      	mov	r2, r9
 80025de:	431a      	orrs	r2, r3
 80025e0:	2e00      	cmp	r6, #0
 80025e2:	d000      	beq.n	80025e6 <__aeabi_dsub+0x3ee>
 80025e4:	e105      	b.n	80027f2 <__aeabi_dsub+0x5fa>
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x3f4>
 80025ea:	e156      	b.n	800289a <__aeabi_dsub+0x6a2>
 80025ec:	003a      	movs	r2, r7
 80025ee:	4302      	orrs	r2, r0
 80025f0:	d100      	bne.n	80025f4 <__aeabi_dsub+0x3fc>
 80025f2:	e0db      	b.n	80027ac <__aeabi_dsub+0x5b4>
 80025f4:	181c      	adds	r4, r3, r0
 80025f6:	429c      	cmp	r4, r3
 80025f8:	419b      	sbcs	r3, r3
 80025fa:	444f      	add	r7, r9
 80025fc:	46ba      	mov	sl, r7
 80025fe:	425b      	negs	r3, r3
 8002600:	449a      	add	sl, r3
 8002602:	4653      	mov	r3, sl
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	d400      	bmi.n	800260a <__aeabi_dsub+0x412>
 8002608:	e780      	b.n	800250c <__aeabi_dsub+0x314>
 800260a:	4652      	mov	r2, sl
 800260c:	4bb6      	ldr	r3, [pc, #728]	; (80028e8 <__aeabi_dsub+0x6f0>)
 800260e:	2601      	movs	r6, #1
 8002610:	401a      	ands	r2, r3
 8002612:	4692      	mov	sl, r2
 8002614:	e77a      	b.n	800250c <__aeabi_dsub+0x314>
 8002616:	4cb3      	ldr	r4, [pc, #716]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002618:	42a2      	cmp	r2, r4
 800261a:	d100      	bne.n	800261e <__aeabi_dsub+0x426>
 800261c:	e0c0      	b.n	80027a0 <__aeabi_dsub+0x5a8>
 800261e:	2480      	movs	r4, #128	; 0x80
 8002620:	464d      	mov	r5, r9
 8002622:	0424      	lsls	r4, r4, #16
 8002624:	4325      	orrs	r5, r4
 8002626:	46a9      	mov	r9, r5
 8002628:	4664      	mov	r4, ip
 800262a:	2c38      	cmp	r4, #56	; 0x38
 800262c:	dc53      	bgt.n	80026d6 <__aeabi_dsub+0x4de>
 800262e:	4661      	mov	r1, ip
 8002630:	2c1f      	cmp	r4, #31
 8002632:	dd00      	ble.n	8002636 <__aeabi_dsub+0x43e>
 8002634:	e0cd      	b.n	80027d2 <__aeabi_dsub+0x5da>
 8002636:	2520      	movs	r5, #32
 8002638:	001e      	movs	r6, r3
 800263a:	1b2d      	subs	r5, r5, r4
 800263c:	464c      	mov	r4, r9
 800263e:	40ab      	lsls	r3, r5
 8002640:	40ac      	lsls	r4, r5
 8002642:	40ce      	lsrs	r6, r1
 8002644:	1e5d      	subs	r5, r3, #1
 8002646:	41ab      	sbcs	r3, r5
 8002648:	4334      	orrs	r4, r6
 800264a:	4323      	orrs	r3, r4
 800264c:	464c      	mov	r4, r9
 800264e:	40cc      	lsrs	r4, r1
 8002650:	1b3f      	subs	r7, r7, r4
 8002652:	e045      	b.n	80026e0 <__aeabi_dsub+0x4e8>
 8002654:	464a      	mov	r2, r9
 8002656:	1a1c      	subs	r4, r3, r0
 8002658:	1bd1      	subs	r1, r2, r7
 800265a:	42a3      	cmp	r3, r4
 800265c:	4192      	sbcs	r2, r2
 800265e:	4252      	negs	r2, r2
 8002660:	4692      	mov	sl, r2
 8002662:	000a      	movs	r2, r1
 8002664:	4651      	mov	r1, sl
 8002666:	1a52      	subs	r2, r2, r1
 8002668:	4692      	mov	sl, r2
 800266a:	0212      	lsls	r2, r2, #8
 800266c:	d500      	bpl.n	8002670 <__aeabi_dsub+0x478>
 800266e:	e083      	b.n	8002778 <__aeabi_dsub+0x580>
 8002670:	4653      	mov	r3, sl
 8002672:	4323      	orrs	r3, r4
 8002674:	d000      	beq.n	8002678 <__aeabi_dsub+0x480>
 8002676:	e621      	b.n	80022bc <__aeabi_dsub+0xc4>
 8002678:	2200      	movs	r2, #0
 800267a:	2500      	movs	r5, #0
 800267c:	e753      	b.n	8002526 <__aeabi_dsub+0x32e>
 800267e:	181c      	adds	r4, r3, r0
 8002680:	429c      	cmp	r4, r3
 8002682:	419b      	sbcs	r3, r3
 8002684:	444f      	add	r7, r9
 8002686:	46ba      	mov	sl, r7
 8002688:	425b      	negs	r3, r3
 800268a:	449a      	add	sl, r3
 800268c:	4653      	mov	r3, sl
 800268e:	2601      	movs	r6, #1
 8002690:	021b      	lsls	r3, r3, #8
 8002692:	d400      	bmi.n	8002696 <__aeabi_dsub+0x49e>
 8002694:	e73a      	b.n	800250c <__aeabi_dsub+0x314>
 8002696:	2602      	movs	r6, #2
 8002698:	4652      	mov	r2, sl
 800269a:	4b93      	ldr	r3, [pc, #588]	; (80028e8 <__aeabi_dsub+0x6f0>)
 800269c:	2101      	movs	r1, #1
 800269e:	401a      	ands	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	4021      	ands	r1, r4
 80026a4:	0862      	lsrs	r2, r4, #1
 80026a6:	430a      	orrs	r2, r1
 80026a8:	07dc      	lsls	r4, r3, #31
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	469a      	mov	sl, r3
 80026ae:	4314      	orrs	r4, r2
 80026b0:	e62c      	b.n	800230c <__aeabi_dsub+0x114>
 80026b2:	0039      	movs	r1, r7
 80026b4:	3a20      	subs	r2, #32
 80026b6:	40d1      	lsrs	r1, r2
 80026b8:	4662      	mov	r2, ip
 80026ba:	2a20      	cmp	r2, #32
 80026bc:	d006      	beq.n	80026cc <__aeabi_dsub+0x4d4>
 80026be:	4664      	mov	r4, ip
 80026c0:	2240      	movs	r2, #64	; 0x40
 80026c2:	1b12      	subs	r2, r2, r4
 80026c4:	003c      	movs	r4, r7
 80026c6:	4094      	lsls	r4, r2
 80026c8:	4304      	orrs	r4, r0
 80026ca:	9401      	str	r4, [sp, #4]
 80026cc:	9c01      	ldr	r4, [sp, #4]
 80026ce:	1e62      	subs	r2, r4, #1
 80026d0:	4194      	sbcs	r4, r2
 80026d2:	430c      	orrs	r4, r1
 80026d4:	e5e3      	b.n	800229e <__aeabi_dsub+0xa6>
 80026d6:	4649      	mov	r1, r9
 80026d8:	4319      	orrs	r1, r3
 80026da:	000b      	movs	r3, r1
 80026dc:	1e5c      	subs	r4, r3, #1
 80026de:	41a3      	sbcs	r3, r4
 80026e0:	1ac4      	subs	r4, r0, r3
 80026e2:	42a0      	cmp	r0, r4
 80026e4:	419b      	sbcs	r3, r3
 80026e6:	425b      	negs	r3, r3
 80026e8:	1afb      	subs	r3, r7, r3
 80026ea:	469a      	mov	sl, r3
 80026ec:	465d      	mov	r5, fp
 80026ee:	0016      	movs	r6, r2
 80026f0:	e5dc      	b.n	80022ac <__aeabi_dsub+0xb4>
 80026f2:	4649      	mov	r1, r9
 80026f4:	4319      	orrs	r1, r3
 80026f6:	d100      	bne.n	80026fa <__aeabi_dsub+0x502>
 80026f8:	e0ae      	b.n	8002858 <__aeabi_dsub+0x660>
 80026fa:	4661      	mov	r1, ip
 80026fc:	4664      	mov	r4, ip
 80026fe:	3901      	subs	r1, #1
 8002700:	2c01      	cmp	r4, #1
 8002702:	d100      	bne.n	8002706 <__aeabi_dsub+0x50e>
 8002704:	e0e0      	b.n	80028c8 <__aeabi_dsub+0x6d0>
 8002706:	4c77      	ldr	r4, [pc, #476]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002708:	45a4      	cmp	ip, r4
 800270a:	d056      	beq.n	80027ba <__aeabi_dsub+0x5c2>
 800270c:	468c      	mov	ip, r1
 800270e:	e69a      	b.n	8002446 <__aeabi_dsub+0x24e>
 8002710:	4661      	mov	r1, ip
 8002712:	2220      	movs	r2, #32
 8002714:	003c      	movs	r4, r7
 8002716:	1a52      	subs	r2, r2, r1
 8002718:	4094      	lsls	r4, r2
 800271a:	0001      	movs	r1, r0
 800271c:	4090      	lsls	r0, r2
 800271e:	46a0      	mov	r8, r4
 8002720:	4664      	mov	r4, ip
 8002722:	1e42      	subs	r2, r0, #1
 8002724:	4190      	sbcs	r0, r2
 8002726:	4662      	mov	r2, ip
 8002728:	40e1      	lsrs	r1, r4
 800272a:	4644      	mov	r4, r8
 800272c:	40d7      	lsrs	r7, r2
 800272e:	430c      	orrs	r4, r1
 8002730:	4304      	orrs	r4, r0
 8002732:	44b9      	add	r9, r7
 8002734:	e701      	b.n	800253a <__aeabi_dsub+0x342>
 8002736:	496b      	ldr	r1, [pc, #428]	; (80028e4 <__aeabi_dsub+0x6ec>)
 8002738:	428a      	cmp	r2, r1
 800273a:	d100      	bne.n	800273e <__aeabi_dsub+0x546>
 800273c:	e70c      	b.n	8002558 <__aeabi_dsub+0x360>
 800273e:	1818      	adds	r0, r3, r0
 8002740:	4298      	cmp	r0, r3
 8002742:	419b      	sbcs	r3, r3
 8002744:	444f      	add	r7, r9
 8002746:	425b      	negs	r3, r3
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	07dc      	lsls	r4, r3, #31
 800274c:	0840      	lsrs	r0, r0, #1
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	469a      	mov	sl, r3
 8002752:	0016      	movs	r6, r2
 8002754:	4304      	orrs	r4, r0
 8002756:	e6d9      	b.n	800250c <__aeabi_dsub+0x314>
 8002758:	2a00      	cmp	r2, #0
 800275a:	d000      	beq.n	800275e <__aeabi_dsub+0x566>
 800275c:	e081      	b.n	8002862 <__aeabi_dsub+0x66a>
 800275e:	003b      	movs	r3, r7
 8002760:	4303      	orrs	r3, r0
 8002762:	d11d      	bne.n	80027a0 <__aeabi_dsub+0x5a8>
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	2500      	movs	r5, #0
 8002768:	0312      	lsls	r2, r2, #12
 800276a:	e70b      	b.n	8002584 <__aeabi_dsub+0x38c>
 800276c:	08c0      	lsrs	r0, r0, #3
 800276e:	077b      	lsls	r3, r7, #29
 8002770:	465d      	mov	r5, fp
 8002772:	4303      	orrs	r3, r0
 8002774:	08fa      	lsrs	r2, r7, #3
 8002776:	e6d3      	b.n	8002520 <__aeabi_dsub+0x328>
 8002778:	1ac4      	subs	r4, r0, r3
 800277a:	42a0      	cmp	r0, r4
 800277c:	4180      	sbcs	r0, r0
 800277e:	464b      	mov	r3, r9
 8002780:	4240      	negs	r0, r0
 8002782:	1aff      	subs	r7, r7, r3
 8002784:	1a3b      	subs	r3, r7, r0
 8002786:	469a      	mov	sl, r3
 8002788:	465d      	mov	r5, fp
 800278a:	e597      	b.n	80022bc <__aeabi_dsub+0xc4>
 800278c:	1a1c      	subs	r4, r3, r0
 800278e:	464a      	mov	r2, r9
 8002790:	42a3      	cmp	r3, r4
 8002792:	419b      	sbcs	r3, r3
 8002794:	1bd7      	subs	r7, r2, r7
 8002796:	425b      	negs	r3, r3
 8002798:	1afb      	subs	r3, r7, r3
 800279a:	469a      	mov	sl, r3
 800279c:	2601      	movs	r6, #1
 800279e:	e585      	b.n	80022ac <__aeabi_dsub+0xb4>
 80027a0:	08c0      	lsrs	r0, r0, #3
 80027a2:	077b      	lsls	r3, r7, #29
 80027a4:	465d      	mov	r5, fp
 80027a6:	4303      	orrs	r3, r0
 80027a8:	08fa      	lsrs	r2, r7, #3
 80027aa:	e6e7      	b.n	800257c <__aeabi_dsub+0x384>
 80027ac:	464a      	mov	r2, r9
 80027ae:	08db      	lsrs	r3, r3, #3
 80027b0:	0752      	lsls	r2, r2, #29
 80027b2:	4313      	orrs	r3, r2
 80027b4:	464a      	mov	r2, r9
 80027b6:	08d2      	lsrs	r2, r2, #3
 80027b8:	e6b5      	b.n	8002526 <__aeabi_dsub+0x32e>
 80027ba:	08c0      	lsrs	r0, r0, #3
 80027bc:	077b      	lsls	r3, r7, #29
 80027be:	4303      	orrs	r3, r0
 80027c0:	08fa      	lsrs	r2, r7, #3
 80027c2:	e6db      	b.n	800257c <__aeabi_dsub+0x384>
 80027c4:	4649      	mov	r1, r9
 80027c6:	4319      	orrs	r1, r3
 80027c8:	000b      	movs	r3, r1
 80027ca:	1e59      	subs	r1, r3, #1
 80027cc:	418b      	sbcs	r3, r1
 80027ce:	001c      	movs	r4, r3
 80027d0:	e653      	b.n	800247a <__aeabi_dsub+0x282>
 80027d2:	464d      	mov	r5, r9
 80027d4:	3c20      	subs	r4, #32
 80027d6:	40e5      	lsrs	r5, r4
 80027d8:	2920      	cmp	r1, #32
 80027da:	d005      	beq.n	80027e8 <__aeabi_dsub+0x5f0>
 80027dc:	2440      	movs	r4, #64	; 0x40
 80027de:	1a64      	subs	r4, r4, r1
 80027e0:	4649      	mov	r1, r9
 80027e2:	40a1      	lsls	r1, r4
 80027e4:	430b      	orrs	r3, r1
 80027e6:	4698      	mov	r8, r3
 80027e8:	4643      	mov	r3, r8
 80027ea:	1e5c      	subs	r4, r3, #1
 80027ec:	41a3      	sbcs	r3, r4
 80027ee:	432b      	orrs	r3, r5
 80027f0:	e776      	b.n	80026e0 <__aeabi_dsub+0x4e8>
 80027f2:	2a00      	cmp	r2, #0
 80027f4:	d0e1      	beq.n	80027ba <__aeabi_dsub+0x5c2>
 80027f6:	003a      	movs	r2, r7
 80027f8:	08db      	lsrs	r3, r3, #3
 80027fa:	4302      	orrs	r2, r0
 80027fc:	d100      	bne.n	8002800 <__aeabi_dsub+0x608>
 80027fe:	e6b8      	b.n	8002572 <__aeabi_dsub+0x37a>
 8002800:	464a      	mov	r2, r9
 8002802:	0752      	lsls	r2, r2, #29
 8002804:	2480      	movs	r4, #128	; 0x80
 8002806:	4313      	orrs	r3, r2
 8002808:	464a      	mov	r2, r9
 800280a:	0324      	lsls	r4, r4, #12
 800280c:	08d2      	lsrs	r2, r2, #3
 800280e:	4222      	tst	r2, r4
 8002810:	d007      	beq.n	8002822 <__aeabi_dsub+0x62a>
 8002812:	08fe      	lsrs	r6, r7, #3
 8002814:	4226      	tst	r6, r4
 8002816:	d104      	bne.n	8002822 <__aeabi_dsub+0x62a>
 8002818:	465d      	mov	r5, fp
 800281a:	0032      	movs	r2, r6
 800281c:	08c3      	lsrs	r3, r0, #3
 800281e:	077f      	lsls	r7, r7, #29
 8002820:	433b      	orrs	r3, r7
 8002822:	0f59      	lsrs	r1, r3, #29
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	0749      	lsls	r1, r1, #29
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	430b      	orrs	r3, r1
 800282c:	e6a6      	b.n	800257c <__aeabi_dsub+0x384>
 800282e:	1ac4      	subs	r4, r0, r3
 8002830:	42a0      	cmp	r0, r4
 8002832:	4180      	sbcs	r0, r0
 8002834:	464b      	mov	r3, r9
 8002836:	4240      	negs	r0, r0
 8002838:	1aff      	subs	r7, r7, r3
 800283a:	1a3b      	subs	r3, r7, r0
 800283c:	469a      	mov	sl, r3
 800283e:	465d      	mov	r5, fp
 8002840:	2601      	movs	r6, #1
 8002842:	e533      	b.n	80022ac <__aeabi_dsub+0xb4>
 8002844:	003b      	movs	r3, r7
 8002846:	4303      	orrs	r3, r0
 8002848:	d100      	bne.n	800284c <__aeabi_dsub+0x654>
 800284a:	e715      	b.n	8002678 <__aeabi_dsub+0x480>
 800284c:	08c0      	lsrs	r0, r0, #3
 800284e:	077b      	lsls	r3, r7, #29
 8002850:	465d      	mov	r5, fp
 8002852:	4303      	orrs	r3, r0
 8002854:	08fa      	lsrs	r2, r7, #3
 8002856:	e666      	b.n	8002526 <__aeabi_dsub+0x32e>
 8002858:	08c0      	lsrs	r0, r0, #3
 800285a:	077b      	lsls	r3, r7, #29
 800285c:	4303      	orrs	r3, r0
 800285e:	08fa      	lsrs	r2, r7, #3
 8002860:	e65e      	b.n	8002520 <__aeabi_dsub+0x328>
 8002862:	003a      	movs	r2, r7
 8002864:	08db      	lsrs	r3, r3, #3
 8002866:	4302      	orrs	r2, r0
 8002868:	d100      	bne.n	800286c <__aeabi_dsub+0x674>
 800286a:	e682      	b.n	8002572 <__aeabi_dsub+0x37a>
 800286c:	464a      	mov	r2, r9
 800286e:	0752      	lsls	r2, r2, #29
 8002870:	2480      	movs	r4, #128	; 0x80
 8002872:	4313      	orrs	r3, r2
 8002874:	464a      	mov	r2, r9
 8002876:	0324      	lsls	r4, r4, #12
 8002878:	08d2      	lsrs	r2, r2, #3
 800287a:	4222      	tst	r2, r4
 800287c:	d007      	beq.n	800288e <__aeabi_dsub+0x696>
 800287e:	08fe      	lsrs	r6, r7, #3
 8002880:	4226      	tst	r6, r4
 8002882:	d104      	bne.n	800288e <__aeabi_dsub+0x696>
 8002884:	465d      	mov	r5, fp
 8002886:	0032      	movs	r2, r6
 8002888:	08c3      	lsrs	r3, r0, #3
 800288a:	077f      	lsls	r7, r7, #29
 800288c:	433b      	orrs	r3, r7
 800288e:	0f59      	lsrs	r1, r3, #29
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	0749      	lsls	r1, r1, #29
 8002896:	430b      	orrs	r3, r1
 8002898:	e670      	b.n	800257c <__aeabi_dsub+0x384>
 800289a:	08c0      	lsrs	r0, r0, #3
 800289c:	077b      	lsls	r3, r7, #29
 800289e:	4303      	orrs	r3, r0
 80028a0:	08fa      	lsrs	r2, r7, #3
 80028a2:	e640      	b.n	8002526 <__aeabi_dsub+0x32e>
 80028a4:	464c      	mov	r4, r9
 80028a6:	3920      	subs	r1, #32
 80028a8:	40cc      	lsrs	r4, r1
 80028aa:	4661      	mov	r1, ip
 80028ac:	2920      	cmp	r1, #32
 80028ae:	d006      	beq.n	80028be <__aeabi_dsub+0x6c6>
 80028b0:	4666      	mov	r6, ip
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	1b89      	subs	r1, r1, r6
 80028b6:	464e      	mov	r6, r9
 80028b8:	408e      	lsls	r6, r1
 80028ba:	4333      	orrs	r3, r6
 80028bc:	4698      	mov	r8, r3
 80028be:	4643      	mov	r3, r8
 80028c0:	1e59      	subs	r1, r3, #1
 80028c2:	418b      	sbcs	r3, r1
 80028c4:	431c      	orrs	r4, r3
 80028c6:	e5d8      	b.n	800247a <__aeabi_dsub+0x282>
 80028c8:	181c      	adds	r4, r3, r0
 80028ca:	4284      	cmp	r4, r0
 80028cc:	4180      	sbcs	r0, r0
 80028ce:	444f      	add	r7, r9
 80028d0:	46ba      	mov	sl, r7
 80028d2:	4240      	negs	r0, r0
 80028d4:	4482      	add	sl, r0
 80028d6:	e6d9      	b.n	800268c <__aeabi_dsub+0x494>
 80028d8:	4653      	mov	r3, sl
 80028da:	4323      	orrs	r3, r4
 80028dc:	d100      	bne.n	80028e0 <__aeabi_dsub+0x6e8>
 80028de:	e6cb      	b.n	8002678 <__aeabi_dsub+0x480>
 80028e0:	e614      	b.n	800250c <__aeabi_dsub+0x314>
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	000007ff 	.word	0x000007ff
 80028e8:	ff7fffff 	.word	0xff7fffff
 80028ec:	000007fe 	.word	0x000007fe
 80028f0:	2300      	movs	r3, #0
 80028f2:	4a01      	ldr	r2, [pc, #4]	; (80028f8 <__aeabi_dsub+0x700>)
 80028f4:	001c      	movs	r4, r3
 80028f6:	e529      	b.n	800234c <__aeabi_dsub+0x154>
 80028f8:	000007ff 	.word	0x000007ff

080028fc <__aeabi_dcmpun>:
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	0005      	movs	r5, r0
 8002900:	480c      	ldr	r0, [pc, #48]	; (8002934 <__aeabi_dcmpun+0x38>)
 8002902:	031c      	lsls	r4, r3, #12
 8002904:	0016      	movs	r6, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	030a      	lsls	r2, r1, #12
 800290a:	0049      	lsls	r1, r1, #1
 800290c:	0b12      	lsrs	r2, r2, #12
 800290e:	0d49      	lsrs	r1, r1, #21
 8002910:	0b24      	lsrs	r4, r4, #12
 8002912:	0d5b      	lsrs	r3, r3, #21
 8002914:	4281      	cmp	r1, r0
 8002916:	d008      	beq.n	800292a <__aeabi_dcmpun+0x2e>
 8002918:	4a06      	ldr	r2, [pc, #24]	; (8002934 <__aeabi_dcmpun+0x38>)
 800291a:	2000      	movs	r0, #0
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <__aeabi_dcmpun+0x2c>
 8002920:	0020      	movs	r0, r4
 8002922:	4330      	orrs	r0, r6
 8002924:	1e43      	subs	r3, r0, #1
 8002926:	4198      	sbcs	r0, r3
 8002928:	bd70      	pop	{r4, r5, r6, pc}
 800292a:	2001      	movs	r0, #1
 800292c:	432a      	orrs	r2, r5
 800292e:	d1fb      	bne.n	8002928 <__aeabi_dcmpun+0x2c>
 8002930:	e7f2      	b.n	8002918 <__aeabi_dcmpun+0x1c>
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	000007ff 	.word	0x000007ff

08002938 <__aeabi_d2iz>:
 8002938:	000a      	movs	r2, r1
 800293a:	b530      	push	{r4, r5, lr}
 800293c:	4c13      	ldr	r4, [pc, #76]	; (800298c <__aeabi_d2iz+0x54>)
 800293e:	0053      	lsls	r3, r2, #1
 8002940:	0309      	lsls	r1, r1, #12
 8002942:	0005      	movs	r5, r0
 8002944:	0b09      	lsrs	r1, r1, #12
 8002946:	2000      	movs	r0, #0
 8002948:	0d5b      	lsrs	r3, r3, #21
 800294a:	0fd2      	lsrs	r2, r2, #31
 800294c:	42a3      	cmp	r3, r4
 800294e:	dd04      	ble.n	800295a <__aeabi_d2iz+0x22>
 8002950:	480f      	ldr	r0, [pc, #60]	; (8002990 <__aeabi_d2iz+0x58>)
 8002952:	4283      	cmp	r3, r0
 8002954:	dd02      	ble.n	800295c <__aeabi_d2iz+0x24>
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <__aeabi_d2iz+0x5c>)
 8002958:	18d0      	adds	r0, r2, r3
 800295a:	bd30      	pop	{r4, r5, pc}
 800295c:	2080      	movs	r0, #128	; 0x80
 800295e:	0340      	lsls	r0, r0, #13
 8002960:	4301      	orrs	r1, r0
 8002962:	480d      	ldr	r0, [pc, #52]	; (8002998 <__aeabi_d2iz+0x60>)
 8002964:	1ac0      	subs	r0, r0, r3
 8002966:	281f      	cmp	r0, #31
 8002968:	dd08      	ble.n	800297c <__aeabi_d2iz+0x44>
 800296a:	480c      	ldr	r0, [pc, #48]	; (800299c <__aeabi_d2iz+0x64>)
 800296c:	1ac3      	subs	r3, r0, r3
 800296e:	40d9      	lsrs	r1, r3
 8002970:	000b      	movs	r3, r1
 8002972:	4258      	negs	r0, r3
 8002974:	2a00      	cmp	r2, #0
 8002976:	d1f0      	bne.n	800295a <__aeabi_d2iz+0x22>
 8002978:	0018      	movs	r0, r3
 800297a:	e7ee      	b.n	800295a <__aeabi_d2iz+0x22>
 800297c:	4c08      	ldr	r4, [pc, #32]	; (80029a0 <__aeabi_d2iz+0x68>)
 800297e:	40c5      	lsrs	r5, r0
 8002980:	46a4      	mov	ip, r4
 8002982:	4463      	add	r3, ip
 8002984:	4099      	lsls	r1, r3
 8002986:	000b      	movs	r3, r1
 8002988:	432b      	orrs	r3, r5
 800298a:	e7f2      	b.n	8002972 <__aeabi_d2iz+0x3a>
 800298c:	000003fe 	.word	0x000003fe
 8002990:	0000041d 	.word	0x0000041d
 8002994:	7fffffff 	.word	0x7fffffff
 8002998:	00000433 	.word	0x00000433
 800299c:	00000413 	.word	0x00000413
 80029a0:	fffffbed 	.word	0xfffffbed

080029a4 <__aeabi_i2d>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	2800      	cmp	r0, #0
 80029a8:	d016      	beq.n	80029d8 <__aeabi_i2d+0x34>
 80029aa:	17c3      	asrs	r3, r0, #31
 80029ac:	18c5      	adds	r5, r0, r3
 80029ae:	405d      	eors	r5, r3
 80029b0:	0fc4      	lsrs	r4, r0, #31
 80029b2:	0028      	movs	r0, r5
 80029b4:	f000 f91a 	bl	8002bec <__clzsi2>
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <__aeabi_i2d+0x5c>)
 80029ba:	1a1b      	subs	r3, r3, r0
 80029bc:	280a      	cmp	r0, #10
 80029be:	dc16      	bgt.n	80029ee <__aeabi_i2d+0x4a>
 80029c0:	0002      	movs	r2, r0
 80029c2:	002e      	movs	r6, r5
 80029c4:	3215      	adds	r2, #21
 80029c6:	4096      	lsls	r6, r2
 80029c8:	220b      	movs	r2, #11
 80029ca:	1a12      	subs	r2, r2, r0
 80029cc:	40d5      	lsrs	r5, r2
 80029ce:	055b      	lsls	r3, r3, #21
 80029d0:	032d      	lsls	r5, r5, #12
 80029d2:	0b2d      	lsrs	r5, r5, #12
 80029d4:	0d5b      	lsrs	r3, r3, #21
 80029d6:	e003      	b.n	80029e0 <__aeabi_i2d+0x3c>
 80029d8:	2400      	movs	r4, #0
 80029da:	2300      	movs	r3, #0
 80029dc:	2500      	movs	r5, #0
 80029de:	2600      	movs	r6, #0
 80029e0:	051b      	lsls	r3, r3, #20
 80029e2:	432b      	orrs	r3, r5
 80029e4:	07e4      	lsls	r4, r4, #31
 80029e6:	4323      	orrs	r3, r4
 80029e8:	0030      	movs	r0, r6
 80029ea:	0019      	movs	r1, r3
 80029ec:	bd70      	pop	{r4, r5, r6, pc}
 80029ee:	380b      	subs	r0, #11
 80029f0:	4085      	lsls	r5, r0
 80029f2:	055b      	lsls	r3, r3, #21
 80029f4:	032d      	lsls	r5, r5, #12
 80029f6:	2600      	movs	r6, #0
 80029f8:	0b2d      	lsrs	r5, r5, #12
 80029fa:	0d5b      	lsrs	r3, r3, #21
 80029fc:	e7f0      	b.n	80029e0 <__aeabi_i2d+0x3c>
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	0000041e 	.word	0x0000041e

08002a04 <__aeabi_ui2d>:
 8002a04:	b510      	push	{r4, lr}
 8002a06:	1e04      	subs	r4, r0, #0
 8002a08:	d010      	beq.n	8002a2c <__aeabi_ui2d+0x28>
 8002a0a:	f000 f8ef 	bl	8002bec <__clzsi2>
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <__aeabi_ui2d+0x48>)
 8002a10:	1a1b      	subs	r3, r3, r0
 8002a12:	280a      	cmp	r0, #10
 8002a14:	dc11      	bgt.n	8002a3a <__aeabi_ui2d+0x36>
 8002a16:	220b      	movs	r2, #11
 8002a18:	0021      	movs	r1, r4
 8002a1a:	1a12      	subs	r2, r2, r0
 8002a1c:	40d1      	lsrs	r1, r2
 8002a1e:	3015      	adds	r0, #21
 8002a20:	030a      	lsls	r2, r1, #12
 8002a22:	055b      	lsls	r3, r3, #21
 8002a24:	4084      	lsls	r4, r0
 8002a26:	0b12      	lsrs	r2, r2, #12
 8002a28:	0d5b      	lsrs	r3, r3, #21
 8002a2a:	e001      	b.n	8002a30 <__aeabi_ui2d+0x2c>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2200      	movs	r2, #0
 8002a30:	051b      	lsls	r3, r3, #20
 8002a32:	4313      	orrs	r3, r2
 8002a34:	0020      	movs	r0, r4
 8002a36:	0019      	movs	r1, r3
 8002a38:	bd10      	pop	{r4, pc}
 8002a3a:	0022      	movs	r2, r4
 8002a3c:	380b      	subs	r0, #11
 8002a3e:	4082      	lsls	r2, r0
 8002a40:	055b      	lsls	r3, r3, #21
 8002a42:	0312      	lsls	r2, r2, #12
 8002a44:	2400      	movs	r4, #0
 8002a46:	0b12      	lsrs	r2, r2, #12
 8002a48:	0d5b      	lsrs	r3, r3, #21
 8002a4a:	e7f1      	b.n	8002a30 <__aeabi_ui2d+0x2c>
 8002a4c:	0000041e 	.word	0x0000041e

08002a50 <__aeabi_f2d>:
 8002a50:	b570      	push	{r4, r5, r6, lr}
 8002a52:	0242      	lsls	r2, r0, #9
 8002a54:	0043      	lsls	r3, r0, #1
 8002a56:	0fc4      	lsrs	r4, r0, #31
 8002a58:	20fe      	movs	r0, #254	; 0xfe
 8002a5a:	0e1b      	lsrs	r3, r3, #24
 8002a5c:	1c59      	adds	r1, r3, #1
 8002a5e:	0a55      	lsrs	r5, r2, #9
 8002a60:	4208      	tst	r0, r1
 8002a62:	d00c      	beq.n	8002a7e <__aeabi_f2d+0x2e>
 8002a64:	21e0      	movs	r1, #224	; 0xe0
 8002a66:	0089      	lsls	r1, r1, #2
 8002a68:	468c      	mov	ip, r1
 8002a6a:	076d      	lsls	r5, r5, #29
 8002a6c:	0b12      	lsrs	r2, r2, #12
 8002a6e:	4463      	add	r3, ip
 8002a70:	051b      	lsls	r3, r3, #20
 8002a72:	4313      	orrs	r3, r2
 8002a74:	07e4      	lsls	r4, r4, #31
 8002a76:	4323      	orrs	r3, r4
 8002a78:	0028      	movs	r0, r5
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	bd70      	pop	{r4, r5, r6, pc}
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d114      	bne.n	8002aac <__aeabi_f2d+0x5c>
 8002a82:	2d00      	cmp	r5, #0
 8002a84:	d01b      	beq.n	8002abe <__aeabi_f2d+0x6e>
 8002a86:	0028      	movs	r0, r5
 8002a88:	f000 f8b0 	bl	8002bec <__clzsi2>
 8002a8c:	280a      	cmp	r0, #10
 8002a8e:	dc1c      	bgt.n	8002aca <__aeabi_f2d+0x7a>
 8002a90:	230b      	movs	r3, #11
 8002a92:	002a      	movs	r2, r5
 8002a94:	1a1b      	subs	r3, r3, r0
 8002a96:	40da      	lsrs	r2, r3
 8002a98:	0003      	movs	r3, r0
 8002a9a:	3315      	adds	r3, #21
 8002a9c:	409d      	lsls	r5, r3
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ad8 <__aeabi_f2d+0x88>)
 8002aa0:	0312      	lsls	r2, r2, #12
 8002aa2:	1a1b      	subs	r3, r3, r0
 8002aa4:	055b      	lsls	r3, r3, #21
 8002aa6:	0b12      	lsrs	r2, r2, #12
 8002aa8:	0d5b      	lsrs	r3, r3, #21
 8002aaa:	e7e1      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002aac:	2d00      	cmp	r5, #0
 8002aae:	d009      	beq.n	8002ac4 <__aeabi_f2d+0x74>
 8002ab0:	0b13      	lsrs	r3, r2, #12
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	0312      	lsls	r2, r2, #12
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	076d      	lsls	r5, r5, #29
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <__aeabi_f2d+0x8c>)
 8002abc:	e7d8      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	e7d5      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <__aeabi_f2d+0x8c>)
 8002ac8:	e7d2      	b.n	8002a70 <__aeabi_f2d+0x20>
 8002aca:	0003      	movs	r3, r0
 8002acc:	002a      	movs	r2, r5
 8002ace:	3b0b      	subs	r3, #11
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	e7e3      	b.n	8002a9e <__aeabi_f2d+0x4e>
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	00000389 	.word	0x00000389
 8002adc:	000007ff 	.word	0x000007ff

08002ae0 <__aeabi_d2f>:
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae4:	004b      	lsls	r3, r1, #1
 8002ae6:	030d      	lsls	r5, r1, #12
 8002ae8:	0f40      	lsrs	r0, r0, #29
 8002aea:	0d5b      	lsrs	r3, r3, #21
 8002aec:	0fcc      	lsrs	r4, r1, #31
 8002aee:	0a6d      	lsrs	r5, r5, #9
 8002af0:	493a      	ldr	r1, [pc, #232]	; (8002bdc <__aeabi_d2f+0xfc>)
 8002af2:	4305      	orrs	r5, r0
 8002af4:	1c58      	adds	r0, r3, #1
 8002af6:	00d7      	lsls	r7, r2, #3
 8002af8:	4208      	tst	r0, r1
 8002afa:	d00a      	beq.n	8002b12 <__aeabi_d2f+0x32>
 8002afc:	4938      	ldr	r1, [pc, #224]	; (8002be0 <__aeabi_d2f+0x100>)
 8002afe:	1859      	adds	r1, r3, r1
 8002b00:	29fe      	cmp	r1, #254	; 0xfe
 8002b02:	dd16      	ble.n	8002b32 <__aeabi_d2f+0x52>
 8002b04:	20ff      	movs	r0, #255	; 0xff
 8002b06:	2200      	movs	r2, #0
 8002b08:	05c0      	lsls	r0, r0, #23
 8002b0a:	4310      	orrs	r0, r2
 8002b0c:	07e4      	lsls	r4, r4, #31
 8002b0e:	4320      	orrs	r0, r4
 8002b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <__aeabi_d2f+0x44>
 8002b16:	433d      	orrs	r5, r7
 8002b18:	d026      	beq.n	8002b68 <__aeabi_d2f+0x88>
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	0192      	lsls	r2, r2, #6
 8002b1e:	0a52      	lsrs	r2, r2, #9
 8002b20:	b2d8      	uxtb	r0, r3
 8002b22:	e7f1      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b24:	432f      	orrs	r7, r5
 8002b26:	d0ed      	beq.n	8002b04 <__aeabi_d2f+0x24>
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	03d2      	lsls	r2, r2, #15
 8002b2c:	20ff      	movs	r0, #255	; 0xff
 8002b2e:	432a      	orrs	r2, r5
 8002b30:	e7ea      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b32:	2900      	cmp	r1, #0
 8002b34:	dd1b      	ble.n	8002b6e <__aeabi_d2f+0x8e>
 8002b36:	0192      	lsls	r2, r2, #6
 8002b38:	1e50      	subs	r0, r2, #1
 8002b3a:	4182      	sbcs	r2, r0
 8002b3c:	00ed      	lsls	r5, r5, #3
 8002b3e:	0f7f      	lsrs	r7, r7, #29
 8002b40:	432a      	orrs	r2, r5
 8002b42:	433a      	orrs	r2, r7
 8002b44:	0753      	lsls	r3, r2, #29
 8002b46:	d047      	beq.n	8002bd8 <__aeabi_d2f+0xf8>
 8002b48:	230f      	movs	r3, #15
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d000      	beq.n	8002b52 <__aeabi_d2f+0x72>
 8002b50:	3204      	adds	r2, #4
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	04db      	lsls	r3, r3, #19
 8002b56:	4013      	ands	r3, r2
 8002b58:	d03e      	beq.n	8002bd8 <__aeabi_d2f+0xf8>
 8002b5a:	1c48      	adds	r0, r1, #1
 8002b5c:	29fe      	cmp	r1, #254	; 0xfe
 8002b5e:	d0d1      	beq.n	8002b04 <__aeabi_d2f+0x24>
 8002b60:	0192      	lsls	r2, r2, #6
 8002b62:	0a52      	lsrs	r2, r2, #9
 8002b64:	b2c0      	uxtb	r0, r0
 8002b66:	e7cf      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b68:	2000      	movs	r0, #0
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	e7cc      	b.n	8002b08 <__aeabi_d2f+0x28>
 8002b6e:	000a      	movs	r2, r1
 8002b70:	3217      	adds	r2, #23
 8002b72:	db2f      	blt.n	8002bd4 <__aeabi_d2f+0xf4>
 8002b74:	2680      	movs	r6, #128	; 0x80
 8002b76:	0436      	lsls	r6, r6, #16
 8002b78:	432e      	orrs	r6, r5
 8002b7a:	251e      	movs	r5, #30
 8002b7c:	1a6d      	subs	r5, r5, r1
 8002b7e:	2d1f      	cmp	r5, #31
 8002b80:	dd11      	ble.n	8002ba6 <__aeabi_d2f+0xc6>
 8002b82:	2202      	movs	r2, #2
 8002b84:	4252      	negs	r2, r2
 8002b86:	1a52      	subs	r2, r2, r1
 8002b88:	0031      	movs	r1, r6
 8002b8a:	40d1      	lsrs	r1, r2
 8002b8c:	2d20      	cmp	r5, #32
 8002b8e:	d004      	beq.n	8002b9a <__aeabi_d2f+0xba>
 8002b90:	4a14      	ldr	r2, [pc, #80]	; (8002be4 <__aeabi_d2f+0x104>)
 8002b92:	4694      	mov	ip, r2
 8002b94:	4463      	add	r3, ip
 8002b96:	409e      	lsls	r6, r3
 8002b98:	4337      	orrs	r7, r6
 8002b9a:	003a      	movs	r2, r7
 8002b9c:	1e53      	subs	r3, r2, #1
 8002b9e:	419a      	sbcs	r2, r3
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	e7ce      	b.n	8002b44 <__aeabi_d2f+0x64>
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <__aeabi_d2f+0x108>)
 8002ba8:	0038      	movs	r0, r7
 8002baa:	4694      	mov	ip, r2
 8002bac:	4463      	add	r3, ip
 8002bae:	4098      	lsls	r0, r3
 8002bb0:	003a      	movs	r2, r7
 8002bb2:	1e41      	subs	r1, r0, #1
 8002bb4:	4188      	sbcs	r0, r1
 8002bb6:	409e      	lsls	r6, r3
 8002bb8:	40ea      	lsrs	r2, r5
 8002bba:	4330      	orrs	r0, r6
 8002bbc:	4302      	orrs	r2, r0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	0753      	lsls	r3, r2, #29
 8002bc2:	d1c1      	bne.n	8002b48 <__aeabi_d2f+0x68>
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	04c9      	lsls	r1, r1, #19
 8002bca:	2001      	movs	r0, #1
 8002bcc:	400b      	ands	r3, r1
 8002bce:	420a      	tst	r2, r1
 8002bd0:	d1c6      	bne.n	8002b60 <__aeabi_d2f+0x80>
 8002bd2:	e7a3      	b.n	8002b1c <__aeabi_d2f+0x3c>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e7a0      	b.n	8002b1a <__aeabi_d2f+0x3a>
 8002bd8:	000b      	movs	r3, r1
 8002bda:	e79f      	b.n	8002b1c <__aeabi_d2f+0x3c>
 8002bdc:	000007fe 	.word	0x000007fe
 8002be0:	fffffc80 	.word	0xfffffc80
 8002be4:	fffffca2 	.word	0xfffffca2
 8002be8:	fffffc82 	.word	0xfffffc82

08002bec <__clzsi2>:
 8002bec:	211c      	movs	r1, #28
 8002bee:	2301      	movs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	4298      	cmp	r0, r3
 8002bf4:	d301      	bcc.n	8002bfa <__clzsi2+0xe>
 8002bf6:	0c00      	lsrs	r0, r0, #16
 8002bf8:	3910      	subs	r1, #16
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	4298      	cmp	r0, r3
 8002bfe:	d301      	bcc.n	8002c04 <__clzsi2+0x18>
 8002c00:	0a00      	lsrs	r0, r0, #8
 8002c02:	3908      	subs	r1, #8
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	4298      	cmp	r0, r3
 8002c08:	d301      	bcc.n	8002c0e <__clzsi2+0x22>
 8002c0a:	0900      	lsrs	r0, r0, #4
 8002c0c:	3904      	subs	r1, #4
 8002c0e:	a202      	add	r2, pc, #8	; (adr r2, 8002c18 <__clzsi2+0x2c>)
 8002c10:	5c10      	ldrb	r0, [r2, r0]
 8002c12:	1840      	adds	r0, r0, r1
 8002c14:	4770      	bx	lr
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	02020304 	.word	0x02020304
 8002c1c:	01010101 	.word	0x01010101
	...

08002c28 <__clzdi2>:
 8002c28:	b510      	push	{r4, lr}
 8002c2a:	2900      	cmp	r1, #0
 8002c2c:	d103      	bne.n	8002c36 <__clzdi2+0xe>
 8002c2e:	f7ff ffdd 	bl	8002bec <__clzsi2>
 8002c32:	3020      	adds	r0, #32
 8002c34:	e002      	b.n	8002c3c <__clzdi2+0x14>
 8002c36:	0008      	movs	r0, r1
 8002c38:	f7ff ffd8 	bl	8002bec <__clzsi2>
 8002c3c:	bd10      	pop	{r4, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)

08002c40 <SELECT>:
/***************************************
 * SPI functions
 **************************************/
/* slave select */
static void SELECT(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8002c44:	23a0      	movs	r3, #160	; 0xa0
 8002c46:	05db      	lsls	r3, r3, #23
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f002 fb98 	bl	8005382 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002c52:	2001      	movs	r0, #1
 8002c54:	f001 fcce 	bl	80045f4 <HAL_Delay>
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <DESELECT>:
/* slave deselect */
static void DESELECT(void)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8002c62:	23a0      	movs	r3, #160	; 0xa0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	2201      	movs	r2, #1
 8002c68:	2110      	movs	r1, #16
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f002 fb89 	bl	8005382 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002c70:	2001      	movs	r0, #1
 8002c72:	f001 fcbf 	bl	80045f4 <HAL_Delay>
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <SPI_TxByte>:
/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	0002      	movs	r2, r0
 8002c84:	1dfb      	adds	r3, r7, #7
 8002c86:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <SPI_TxByte+0x30>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2202      	movs	r2, #2
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d1f8      	bne.n	8002c8a <SPI_TxByte+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8002c98:	1df9      	adds	r1, r7, #7
 8002c9a:	4804      	ldr	r0, [pc, #16]	; (8002cac <SPI_TxByte+0x30>)
 8002c9c:	2364      	movs	r3, #100	; 0x64
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f003 f97f 	bl	8005fa2 <HAL_SPI_Transmit>
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	2000026c 	.word	0x2000026c

08002cb0 <SPI_TxBuffer>:
/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	000a      	movs	r2, r1
 8002cba:	1cbb      	adds	r3, r7, #2
 8002cbc:	801a      	strh	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <SPI_TxBuffer+0x34>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d1f8      	bne.n	8002cc0 <SPI_TxBuffer+0x10>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8002cce:	1cbb      	adds	r3, r7, #2
 8002cd0:	881a      	ldrh	r2, [r3, #0]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4803      	ldr	r0, [pc, #12]	; (8002ce4 <SPI_TxBuffer+0x34>)
 8002cd6:	2364      	movs	r3, #100	; 0x64
 8002cd8:	f003 f963 	bl	8005fa2 <HAL_SPI_Transmit>
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	2000026c 	.word	0x2000026c

08002ce8 <SPI_RxByte>:
/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8002cee:	1dfb      	adds	r3, r7, #7
 8002cf0:	22ff      	movs	r2, #255	; 0xff
 8002cf2:	701a      	strb	r2, [r3, #0]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <SPI_RxByte+0x38>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d1f8      	bne.n	8002cf6 <SPI_RxByte+0xe>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8002d04:	1dba      	adds	r2, r7, #6
 8002d06:	1df9      	adds	r1, r7, #7
 8002d08:	4805      	ldr	r0, [pc, #20]	; (8002d20 <SPI_RxByte+0x38>)
 8002d0a:	2364      	movs	r3, #100	; 0x64
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f003 faa4 	bl	800625c <HAL_SPI_TransmitReceive>
  return data;
 8002d14:	1dbb      	adds	r3, r7, #6
 8002d16:	781b      	ldrb	r3, [r3, #0]
}
 8002d18:	0018      	movs	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	2000026c 	.word	0x2000026c

08002d24 <SPI_RxBytePtr>:
/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002d2c:	f7ff ffdc 	bl	8002ce8 <SPI_RxByte>
 8002d30:	0003      	movs	r3, r0
 8002d32:	001a      	movs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	701a      	strb	r2, [r3, #0]
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b002      	add	sp, #8
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <SD_ReadyWait>:
/***************************************
 * SD functions
 **************************************/
/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <SD_ReadyWait+0x34>)
 8002d48:	22fa      	movs	r2, #250	; 0xfa
 8002d4a:	0052      	lsls	r2, r2, #1
 8002d4c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8002d4e:	1dfc      	adds	r4, r7, #7
 8002d50:	f7ff ffca 	bl	8002ce8 <SPI_RxByte>
 8002d54:	0003      	movs	r3, r0
 8002d56:	7023      	strb	r3, [r4, #0]
  } while ((res != 0xFF) && Timer2);
 8002d58:	1dfb      	adds	r3, r7, #7
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2bff      	cmp	r3, #255	; 0xff
 8002d5e:	d003      	beq.n	8002d68 <SD_ReadyWait+0x28>
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <SD_ReadyWait+0x34>)
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f2      	bne.n	8002d4e <SD_ReadyWait+0xe>
  return res;
 8002d68:	1dfb      	adds	r3, r7, #7
 8002d6a:	781b      	ldrb	r3, [r3, #0]
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b003      	add	sp, #12
 8002d72:	bd90      	pop	{r4, r7, pc}
 8002d74:	2000020a 	.word	0x2000020a

08002d78 <SD_PowerOn>:
/* power on */
static void SD_PowerOn(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <SD_PowerOn+0x88>)
 8002d80:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 8002d82:	f7ff ff6c 	bl	8002c5e <DESELECT>
  for(int i = 0; i < 10; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	e005      	b.n	8002d98 <SD_PowerOn+0x20>
  {
    SPI_TxByte(0xFF);
 8002d8c:	20ff      	movs	r0, #255	; 0xff
 8002d8e:	f7ff ff75 	bl	8002c7c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3301      	adds	r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b09      	cmp	r3, #9
 8002d9c:	ddf6      	ble.n	8002d8c <SD_PowerOn+0x14>
  }
  /* slave select */
  SELECT();
 8002d9e:	f7ff ff4f 	bl	8002c40 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8002da2:	003b      	movs	r3, r7
 8002da4:	2240      	movs	r2, #64	; 0x40
 8002da6:	701a      	strb	r2, [r3, #0]
  args[1] = 0;
 8002da8:	003b      	movs	r3, r7
 8002daa:	2200      	movs	r2, #0
 8002dac:	705a      	strb	r2, [r3, #1]
  args[2] = 0;
 8002dae:	003b      	movs	r3, r7
 8002db0:	2200      	movs	r2, #0
 8002db2:	709a      	strb	r2, [r3, #2]
  args[3] = 0;
 8002db4:	003b      	movs	r3, r7
 8002db6:	2200      	movs	r2, #0
 8002db8:	70da      	strb	r2, [r3, #3]
  args[4] = 0;
 8002dba:	003b      	movs	r3, r7
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	711a      	strb	r2, [r3, #4]
  args[5] = 0x95;   /* CRC */
 8002dc0:	003b      	movs	r3, r7
 8002dc2:	2295      	movs	r2, #149	; 0x95
 8002dc4:	715a      	strb	r2, [r3, #5]
  SPI_TxBuffer(args, sizeof(args));
 8002dc6:	003b      	movs	r3, r7
 8002dc8:	2106      	movs	r1, #6
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7ff ff70 	bl	8002cb0 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8002dd0:	e002      	b.n	8002dd8 <SD_PowerOn+0x60>
  {
    cnt--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8002dd8:	f7ff ff86 	bl	8002ce8 <SPI_RxByte>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d002      	beq.n	8002de8 <SD_PowerOn+0x70>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f4      	bne.n	8002dd2 <SD_PowerOn+0x5a>
  }
  DESELECT();
 8002de8:	f7ff ff39 	bl	8002c5e <DESELECT>
  SPI_TxByte(0XFF);
 8002dec:	20ff      	movs	r0, #255	; 0xff
 8002dee:	f7ff ff45 	bl	8002c7c <SPI_TxByte>
  PowerFlag = 1;
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <SD_PowerOn+0x8c>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b004      	add	sp, #16
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00001fff 	.word	0x00001fff
 8002e04:	2000020d 	.word	0x2000020d

08002e08 <SD_PowerOff>:
/* power off */
static void SD_PowerOff(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002e0c:	4b02      	ldr	r3, [pc, #8]	; (8002e18 <SD_PowerOff+0x10>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	2000020d 	.word	0x2000020d

08002e1c <SD_CheckPower>:
/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  return PowerFlag;
 8002e20:	4b02      	ldr	r3, [pc, #8]	; (8002e2c <SD_CheckPower+0x10>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	2000020d 	.word	0x2000020d

08002e30 <SD_RxDataBlock>:
/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8002e30:	b5b0      	push	{r4, r5, r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <SD_RxDataBlock+0x64>)
 8002e3c:	22c8      	movs	r2, #200	; 0xc8
 8002e3e:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8002e40:	250f      	movs	r5, #15
 8002e42:	197c      	adds	r4, r7, r5
 8002e44:	f7ff ff50 	bl	8002ce8 <SPI_RxByte>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	7023      	strb	r3, [r4, #0]
  } while((token == 0xFF) && Timer1);
 8002e4c:	197b      	adds	r3, r7, r5
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2bff      	cmp	r3, #255	; 0xff
 8002e52:	d103      	bne.n	8002e5c <SD_RxDataBlock+0x2c>
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <SD_RxDataBlock+0x64>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f1      	bne.n	8002e40 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 8002e5c:	230f      	movs	r3, #15
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2bfe      	cmp	r3, #254	; 0xfe
 8002e64:	d001      	beq.n	8002e6a <SD_RxDataBlock+0x3a>
 8002e66:	2300      	movs	r3, #0
 8002e68:	e00f      	b.n	8002e8a <SD_RxDataBlock+0x5a>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff ff57 	bl	8002d24 <SPI_RxBytePtr>
  } while(len--);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	603a      	str	r2, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f4      	bne.n	8002e6a <SD_RxDataBlock+0x3a>
  /* discard CRC */
  SPI_RxByte();
 8002e80:	f7ff ff32 	bl	8002ce8 <SPI_RxByte>
  SPI_RxByte();
 8002e84:	f7ff ff30 	bl	8002ce8 <SPI_RxByte>
  return TRUE;
 8002e88:	2301      	movs	r3, #1
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b004      	add	sp, #16
 8002e90:	bdb0      	pop	{r4, r5, r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	20000208 	.word	0x20000208

08002e98 <SD_TxDataBlock>:
/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	000a      	movs	r2, r1
 8002ea2:	1cfb      	adds	r3, r7, #3
 8002ea4:	701a      	strb	r2, [r3, #0]
  uint8_t resp;
  uint8_t i = 0;
 8002ea6:	230e      	movs	r3, #14
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8002eae:	f7ff ff47 	bl	8002d40 <SD_ReadyWait>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	2bff      	cmp	r3, #255	; 0xff
 8002eb6:	d001      	beq.n	8002ebc <SD_TxDataBlock+0x24>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e03c      	b.n	8002f36 <SD_TxDataBlock+0x9e>
  /* transmit token */
  SPI_TxByte(token);
 8002ebc:	1cfb      	adds	r3, r7, #3
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7ff fedb 	bl	8002c7c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8002ec6:	1cfb      	adds	r3, r7, #3
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2bfd      	cmp	r3, #253	; 0xfd
 8002ecc:	d029      	beq.n	8002f22 <SD_TxDataBlock+0x8a>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8002ece:	2380      	movs	r3, #128	; 0x80
 8002ed0:	009a      	lsls	r2, r3, #2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0011      	movs	r1, r2
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff feea 	bl	8002cb0 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 8002edc:	f7ff ff04 	bl	8002ce8 <SPI_RxByte>
    SPI_RxByte();
 8002ee0:	f7ff ff02 	bl	8002ce8 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 8002ee4:	e011      	b.n	8002f0a <SD_TxDataBlock+0x72>
    {
      resp = SPI_RxByte();
 8002ee6:	250f      	movs	r5, #15
 8002ee8:	197c      	adds	r4, r7, r5
 8002eea:	f7ff fefd 	bl	8002ce8 <SPI_RxByte>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	7023      	strb	r3, [r4, #0]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8002ef2:	197b      	adds	r3, r7, r5
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	221f      	movs	r2, #31
 8002ef8:	4013      	ands	r3, r2
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	d00b      	beq.n	8002f16 <SD_TxDataBlock+0x7e>
      i++;
 8002efe:	210e      	movs	r1, #14
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	781a      	ldrb	r2, [r3, #0]
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	3201      	adds	r2, #1
 8002f08:	701a      	strb	r2, [r3, #0]
    while (i <= 64)
 8002f0a:	230e      	movs	r3, #14
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d9e8      	bls.n	8002ee6 <SD_TxDataBlock+0x4e>
 8002f14:	e000      	b.n	8002f18 <SD_TxDataBlock+0x80>
      if ((resp & 0x1F) == 0x05) break;
 8002f16:	46c0      	nop			; (mov r8, r8)
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8002f18:	46c0      	nop			; (mov r8, r8)
 8002f1a:	f7ff fee5 	bl	8002ce8 <SPI_RxByte>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d0fb      	beq.n	8002f1a <SD_TxDataBlock+0x82>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8002f22:	230f      	movs	r3, #15
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	221f      	movs	r2, #31
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b05      	cmp	r3, #5
 8002f2e:	d101      	bne.n	8002f34 <SD_TxDataBlock+0x9c>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <SD_TxDataBlock+0x9e>
  return FALSE;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bdb0      	pop	{r4, r5, r7, pc}

08002f3e <SD_SendCmd>:
#endif /* _USE_WRITE */
/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8002f3e:	b5b0      	push	{r4, r5, r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	0002      	movs	r2, r0
 8002f46:	6039      	str	r1, [r7, #0]
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	701a      	strb	r2, [r3, #0]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8002f4c:	f7ff fef8 	bl	8002d40 <SD_ReadyWait>
 8002f50:	0003      	movs	r3, r0
 8002f52:	2bff      	cmp	r3, #255	; 0xff
 8002f54:	d001      	beq.n	8002f5a <SD_SendCmd+0x1c>
 8002f56:	23ff      	movs	r3, #255	; 0xff
 8002f58:	e059      	b.n	800300e <SD_SendCmd+0xd0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f7ff fe8c 	bl	8002c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	0e1b      	lsrs	r3, r3, #24
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7ff fe86 	bl	8002c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff fe80 	bl	8002c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7ff fe7a 	bl	8002c7c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7ff fe75 	bl	8002c7c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8002f92:	1dfb      	adds	r3, r7, #7
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d104      	bne.n	8002fa4 <SD_SendCmd+0x66>
 8002f9a:	230f      	movs	r3, #15
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2295      	movs	r2, #149	; 0x95
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e00c      	b.n	8002fbe <SD_SendCmd+0x80>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b48      	cmp	r3, #72	; 0x48
 8002faa:	d104      	bne.n	8002fb6 <SD_SendCmd+0x78>
 8002fac:	230f      	movs	r3, #15
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2287      	movs	r2, #135	; 0x87
 8002fb2:	701a      	strb	r2, [r3, #0]
 8002fb4:	e003      	b.n	8002fbe <SD_SendCmd+0x80>
  else crc = 1;
 8002fb6:	230f      	movs	r3, #15
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]
  /* transmit CRC */
  SPI_TxByte(crc);
 8002fbe:	230f      	movs	r3, #15
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7ff fe59 	bl	8002c7c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8002fca:	1dfb      	adds	r3, r7, #7
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b4c      	cmp	r3, #76	; 0x4c
 8002fd0:	d101      	bne.n	8002fd6 <SD_SendCmd+0x98>
 8002fd2:	f7ff fe89 	bl	8002ce8 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 8002fd6:	230e      	movs	r3, #14
 8002fd8:	18fb      	adds	r3, r7, r3
 8002fda:	220a      	movs	r2, #10
 8002fdc:	701a      	strb	r2, [r3, #0]
  do {
    res = SPI_RxByte();
 8002fde:	250d      	movs	r5, #13
 8002fe0:	197c      	adds	r4, r7, r5
 8002fe2:	f7ff fe81 	bl	8002ce8 <SPI_RxByte>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	7023      	strb	r3, [r4, #0]
  } while ((res & 0x80) && --n);
 8002fea:	197b      	adds	r3, r7, r5
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	b25b      	sxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da09      	bge.n	8003008 <SD_SendCmd+0xca>
 8002ff4:	210e      	movs	r1, #14
 8002ff6:	187b      	adds	r3, r7, r1
 8002ff8:	187a      	adds	r2, r7, r1
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	3a01      	subs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	187b      	adds	r3, r7, r1
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ea      	bne.n	8002fde <SD_SendCmd+0xa0>
  return res;
 8003008:	230d      	movs	r3, #13
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	781b      	ldrb	r3, [r3, #0]
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b004      	add	sp, #16
 8003014:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003018 <SD_disk_initialize>:
/***************************************
 * user_diskio.c functions
 **************************************/
/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003018:	b5b0      	push	{r4, r5, r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	0002      	movs	r2, r0
 8003020:	1dfb      	adds	r3, r7, #7
 8003022:	701a      	strb	r2, [r3, #0]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <SD_disk_initialize+0x18>
 800302c:	2301      	movs	r3, #1
 800302e:	e0f2      	b.n	8003216 <SD_disk_initialize+0x1fe>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8003030:	4b7b      	ldr	r3, [pc, #492]	; (8003220 <SD_disk_initialize+0x208>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	001a      	movs	r2, r3
 8003038:	2302      	movs	r3, #2
 800303a:	4013      	ands	r3, r2
 800303c:	d003      	beq.n	8003046 <SD_disk_initialize+0x2e>
 800303e:	4b78      	ldr	r3, [pc, #480]	; (8003220 <SD_disk_initialize+0x208>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e0e7      	b.n	8003216 <SD_disk_initialize+0x1fe>
  /* power on */
  SD_PowerOn();
 8003046:	f7ff fe97 	bl	8002d78 <SD_PowerOn>
  /* slave select */
  SELECT();
 800304a:	f7ff fdf9 	bl	8002c40 <SELECT>
  /* check disk type */
  type = 0;
 800304e:	230e      	movs	r3, #14
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8003056:	2100      	movs	r1, #0
 8003058:	2040      	movs	r0, #64	; 0x40
 800305a:	f7ff ff70 	bl	8002f3e <SD_SendCmd>
 800305e:	0003      	movs	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d000      	beq.n	8003066 <SD_disk_initialize+0x4e>
 8003064:	e0bc      	b.n	80031e0 <SD_disk_initialize+0x1c8>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8003066:	4b6f      	ldr	r3, [pc, #444]	; (8003224 <SD_disk_initialize+0x20c>)
 8003068:	22fa      	movs	r2, #250	; 0xfa
 800306a:	0092      	lsls	r2, r2, #2
 800306c:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800306e:	23d5      	movs	r3, #213	; 0xd5
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	0019      	movs	r1, r3
 8003074:	2048      	movs	r0, #72	; 0x48
 8003076:	f7ff ff62 	bl	8002f3e <SD_SendCmd>
 800307a:	0003      	movs	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d000      	beq.n	8003082 <SD_disk_initialize+0x6a>
 8003080:	e06b      	b.n	800315a <SD_disk_initialize+0x142>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8003082:	230f      	movs	r3, #15
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e00e      	b.n	80030aa <SD_disk_initialize+0x92>
      {
        ocr[n] = SPI_RxByte();
 800308c:	250f      	movs	r5, #15
 800308e:	197b      	adds	r3, r7, r5
 8003090:	781c      	ldrb	r4, [r3, #0]
 8003092:	f7ff fe29 	bl	8002ce8 <SPI_RxByte>
 8003096:	0003      	movs	r3, r0
 8003098:	001a      	movs	r2, r3
 800309a:	2308      	movs	r3, #8
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	551a      	strb	r2, [r3, r4]
      for (n = 0; n < 4; n++)
 80030a0:	197b      	adds	r3, r7, r5
 80030a2:	781a      	ldrb	r2, [r3, #0]
 80030a4:	197b      	adds	r3, r7, r5
 80030a6:	3201      	adds	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	230f      	movs	r3, #15
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d9eb      	bls.n	800308c <SD_disk_initialize+0x74>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80030b4:	2208      	movs	r2, #8
 80030b6:	18bb      	adds	r3, r7, r2
 80030b8:	789b      	ldrb	r3, [r3, #2]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d000      	beq.n	80030c0 <SD_disk_initialize+0xa8>
 80030be:	e08f      	b.n	80031e0 <SD_disk_initialize+0x1c8>
 80030c0:	18bb      	adds	r3, r7, r2
 80030c2:	78db      	ldrb	r3, [r3, #3]
 80030c4:	2baa      	cmp	r3, #170	; 0xaa
 80030c6:	d000      	beq.n	80030ca <SD_disk_initialize+0xb2>
 80030c8:	e08a      	b.n	80031e0 <SD_disk_initialize+0x1c8>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80030ca:	2100      	movs	r1, #0
 80030cc:	2077      	movs	r0, #119	; 0x77
 80030ce:	f7ff ff36 	bl	8002f3e <SD_SendCmd>
 80030d2:	0003      	movs	r3, r0
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d807      	bhi.n	80030e8 <SD_disk_initialize+0xd0>
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	05db      	lsls	r3, r3, #23
 80030dc:	0019      	movs	r1, r3
 80030de:	2069      	movs	r0, #105	; 0x69
 80030e0:	f7ff ff2d 	bl	8002f3e <SD_SendCmd>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d004      	beq.n	80030f2 <SD_disk_initialize+0xda>
        } while (Timer1);
 80030e8:	4b4e      	ldr	r3, [pc, #312]	; (8003224 <SD_disk_initialize+0x20c>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1ec      	bne.n	80030ca <SD_disk_initialize+0xb2>
 80030f0:	e000      	b.n	80030f4 <SD_disk_initialize+0xdc>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80030f2:	46c0      	nop			; (mov r8, r8)
        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80030f4:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <SD_disk_initialize+0x20c>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d100      	bne.n	80030fe <SD_disk_initialize+0xe6>
 80030fc:	e070      	b.n	80031e0 <SD_disk_initialize+0x1c8>
 80030fe:	2100      	movs	r1, #0
 8003100:	207a      	movs	r0, #122	; 0x7a
 8003102:	f7ff ff1c 	bl	8002f3e <SD_SendCmd>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d000      	beq.n	800310c <SD_disk_initialize+0xf4>
 800310a:	e069      	b.n	80031e0 <SD_disk_initialize+0x1c8>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800310c:	230f      	movs	r3, #15
 800310e:	18fb      	adds	r3, r7, r3
 8003110:	2200      	movs	r2, #0
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	e00e      	b.n	8003134 <SD_disk_initialize+0x11c>
          {
            ocr[n] = SPI_RxByte();
 8003116:	250f      	movs	r5, #15
 8003118:	197b      	adds	r3, r7, r5
 800311a:	781c      	ldrb	r4, [r3, #0]
 800311c:	f7ff fde4 	bl	8002ce8 <SPI_RxByte>
 8003120:	0003      	movs	r3, r0
 8003122:	001a      	movs	r2, r3
 8003124:	2308      	movs	r3, #8
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	551a      	strb	r2, [r3, r4]
          for (n = 0; n < 4; n++)
 800312a:	197b      	adds	r3, r7, r5
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	197b      	adds	r3, r7, r5
 8003130:	3201      	adds	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	230f      	movs	r3, #15
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d9eb      	bls.n	8003116 <SD_disk_initialize+0xfe>
          }
          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800313e:	2308      	movs	r3, #8
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	001a      	movs	r2, r3
 8003146:	2340      	movs	r3, #64	; 0x40
 8003148:	4013      	ands	r3, r2
 800314a:	d001      	beq.n	8003150 <SD_disk_initialize+0x138>
 800314c:	220c      	movs	r2, #12
 800314e:	e000      	b.n	8003152 <SD_disk_initialize+0x13a>
 8003150:	2204      	movs	r2, #4
 8003152:	230e      	movs	r3, #14
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e042      	b.n	80031e0 <SD_disk_initialize+0x1c8>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800315a:	2100      	movs	r1, #0
 800315c:	2077      	movs	r0, #119	; 0x77
 800315e:	f7ff feee 	bl	8002f3e <SD_SendCmd>
 8003162:	0003      	movs	r3, r0
 8003164:	2b01      	cmp	r3, #1
 8003166:	d808      	bhi.n	800317a <SD_disk_initialize+0x162>
 8003168:	2100      	movs	r1, #0
 800316a:	2069      	movs	r0, #105	; 0x69
 800316c:	f7ff fee7 	bl	8002f3e <SD_SendCmd>
 8003170:	0003      	movs	r3, r0
 8003172:	2b01      	cmp	r3, #1
 8003174:	d801      	bhi.n	800317a <SD_disk_initialize+0x162>
 8003176:	2202      	movs	r2, #2
 8003178:	e000      	b.n	800317c <SD_disk_initialize+0x164>
 800317a:	2201      	movs	r2, #1
 800317c:	230e      	movs	r3, #14
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	701a      	strb	r2, [r3, #0]
      do
      {
        if (type == CT_SD1)
 8003182:	230e      	movs	r3, #14
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d10d      	bne.n	80031a8 <SD_disk_initialize+0x190>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800318c:	2100      	movs	r1, #0
 800318e:	2077      	movs	r0, #119	; 0x77
 8003190:	f7ff fed5 	bl	8002f3e <SD_SendCmd>
 8003194:	0003      	movs	r3, r0
 8003196:	2b01      	cmp	r3, #1
 8003198:	d80c      	bhi.n	80031b4 <SD_disk_initialize+0x19c>
 800319a:	2100      	movs	r1, #0
 800319c:	2069      	movs	r0, #105	; 0x69
 800319e:	f7ff fece 	bl	8002f3e <SD_SendCmd>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d106      	bne.n	80031b4 <SD_disk_initialize+0x19c>
 80031a6:	e00b      	b.n	80031c0 <SD_disk_initialize+0x1a8>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80031a8:	2100      	movs	r1, #0
 80031aa:	2041      	movs	r0, #65	; 0x41
 80031ac:	f7ff fec7 	bl	8002f3e <SD_SendCmd>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d004      	beq.n	80031be <SD_disk_initialize+0x1a6>
        }
      } while (Timer1);
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <SD_disk_initialize+0x20c>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e2      	bne.n	8003182 <SD_disk_initialize+0x16a>
 80031bc:	e000      	b.n	80031c0 <SD_disk_initialize+0x1a8>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80031be:	46c0      	nop			; (mov r8, r8)
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80031c0:	4b18      	ldr	r3, [pc, #96]	; (8003224 <SD_disk_initialize+0x20c>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <SD_disk_initialize+0x1c0>
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	0019      	movs	r1, r3
 80031ce:	2050      	movs	r0, #80	; 0x50
 80031d0:	f7ff feb5 	bl	8002f3e <SD_SendCmd>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d003      	beq.n	80031e0 <SD_disk_initialize+0x1c8>
 80031d8:	230e      	movs	r3, #14
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
    }
  }
  CardType = type;
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <SD_disk_initialize+0x210>)
 80031e2:	240e      	movs	r4, #14
 80031e4:	193a      	adds	r2, r7, r4
 80031e6:	7812      	ldrb	r2, [r2, #0]
 80031e8:	701a      	strb	r2, [r3, #0]
  /* Idle */
  DESELECT();
 80031ea:	f7ff fd38 	bl	8002c5e <DESELECT>
  SPI_RxByte();
 80031ee:	f7ff fd7b 	bl	8002ce8 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <SD_disk_initialize+0x1f4>
  {
    Stat &= ~STA_NOINIT;
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <SD_disk_initialize+0x208>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2201      	movs	r2, #1
 8003202:	4393      	bics	r3, r2
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <SD_disk_initialize+0x208>)
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e001      	b.n	8003210 <SD_disk_initialize+0x1f8>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800320c:	f7ff fdfc 	bl	8002e08 <SD_PowerOff>
  }
  return Stat;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <SD_disk_initialize+0x208>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
}
 8003216:	0018      	movs	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	b004      	add	sp, #16
 800321c:	bdb0      	pop	{r4, r5, r7, pc}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	20000000 	.word	0x20000000
 8003224:	20000208 	.word	0x20000208
 8003228:	2000020c 	.word	0x2000020c

0800322c <SD_disk_status>:
/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	0002      	movs	r2, r0
 8003234:	1dfb      	adds	r3, r7, #7
 8003236:	701a      	strb	r2, [r3, #0]
  if (drv) return STA_NOINIT;
 8003238:	1dfb      	adds	r3, r7, #7
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <SD_disk_status+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e002      	b.n	800324a <SD_disk_status+0x1e>
  return Stat;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <SD_disk_status+0x28>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b2db      	uxtb	r3, r3
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	20000000 	.word	0x20000000

08003258 <SD_disk_read>:
/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	210f      	movs	r1, #15
 8003266:	187b      	adds	r3, r7, r1
 8003268:	1c02      	adds	r2, r0, #0
 800326a:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800326c:	187b      	adds	r3, r7, r1
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <SD_disk_read+0x22>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <SD_disk_read+0x26>
 800327a:	2304      	movs	r3, #4
 800327c:	e053      	b.n	8003326 <SD_disk_read+0xce>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800327e:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <SD_disk_read+0xd8>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	001a      	movs	r2, r3
 8003286:	2301      	movs	r3, #1
 8003288:	4013      	ands	r3, r2
 800328a:	d001      	beq.n	8003290 <SD_disk_read+0x38>
 800328c:	2303      	movs	r3, #3
 800328e:	e04a      	b.n	8003326 <SD_disk_read+0xce>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003290:	4b28      	ldr	r3, [pc, #160]	; (8003334 <SD_disk_read+0xdc>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	001a      	movs	r2, r3
 8003296:	2304      	movs	r3, #4
 8003298:	4013      	ands	r3, r2
 800329a:	d102      	bne.n	80032a2 <SD_disk_read+0x4a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	025b      	lsls	r3, r3, #9
 80032a0:	607b      	str	r3, [r7, #4]
  SELECT();
 80032a2:	f7ff fccd 	bl	8002c40 <SELECT>
  if (count == 1)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d112      	bne.n	80032d2 <SD_disk_read+0x7a>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	0019      	movs	r1, r3
 80032b0:	2051      	movs	r0, #81	; 0x51
 80032b2:	f7ff fe44 	bl	8002f3e <SD_SendCmd>
 80032b6:	1e03      	subs	r3, r0, #0
 80032b8:	d12d      	bne.n	8003316 <SD_disk_read+0xbe>
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	009a      	lsls	r2, r3, #2
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	0011      	movs	r1, r2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff fdb4 	bl	8002e30 <SD_RxDataBlock>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d024      	beq.n	8003316 <SD_disk_read+0xbe>
 80032cc:	2300      	movs	r3, #0
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	e021      	b.n	8003316 <SD_disk_read+0xbe>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	0019      	movs	r1, r3
 80032d6:	2052      	movs	r0, #82	; 0x52
 80032d8:	f7ff fe31 	bl	8002f3e <SD_SendCmd>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d11a      	bne.n	8003316 <SD_disk_read+0xbe>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	009a      	lsls	r2, r3, #2
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fda1 	bl	8002e30 <SD_RxDataBlock>
 80032ee:	1e03      	subs	r3, r0, #0
 80032f0:	d00c      	beq.n	800330c <SD_disk_read+0xb4>
        buff += 512;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4694      	mov	ip, r2
 80032fa:	4463      	add	r3, ip
 80032fc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	3b01      	subs	r3, #1
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ea      	bne.n	80032e0 <SD_disk_read+0x88>
 800330a:	e000      	b.n	800330e <SD_disk_read+0xb6>
        if (!SD_RxDataBlock(buff, 512)) break;
 800330c:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800330e:	2100      	movs	r1, #0
 8003310:	204c      	movs	r0, #76	; 0x4c
 8003312:	f7ff fe14 	bl	8002f3e <SD_SendCmd>
    }
  }
  /* Idle */
  DESELECT();
 8003316:	f7ff fca2 	bl	8002c5e <DESELECT>
  SPI_RxByte();
 800331a:	f7ff fce5 	bl	8002ce8 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	1e5a      	subs	r2, r3, #1
 8003322:	4193      	sbcs	r3, r2
 8003324:	b2db      	uxtb	r3, r3
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	20000000 	.word	0x20000000
 8003334:	2000020c 	.word	0x2000020c

08003338 <SD_disk_write>:
/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	210f      	movs	r1, #15
 8003346:	187b      	adds	r3, r7, r1
 8003348:	1c02      	adds	r2, r0, #0
 800334a:	701a      	strb	r2, [r3, #0]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800334c:	187b      	adds	r3, r7, r1
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <SD_disk_write+0x22>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <SD_disk_write+0x26>
 800335a:	2304      	movs	r3, #4
 800335c:	e06b      	b.n	8003436 <SD_disk_write+0xfe>
  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <SD_disk_write+0x108>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	001a      	movs	r2, r3
 8003366:	2301      	movs	r3, #1
 8003368:	4013      	ands	r3, r2
 800336a:	d001      	beq.n	8003370 <SD_disk_write+0x38>
 800336c:	2303      	movs	r3, #3
 800336e:	e062      	b.n	8003436 <SD_disk_write+0xfe>
  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8003370:	4b33      	ldr	r3, [pc, #204]	; (8003440 <SD_disk_write+0x108>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	001a      	movs	r2, r3
 8003378:	2304      	movs	r3, #4
 800337a:	4013      	ands	r3, r2
 800337c:	d001      	beq.n	8003382 <SD_disk_write+0x4a>
 800337e:	2302      	movs	r3, #2
 8003380:	e059      	b.n	8003436 <SD_disk_write+0xfe>
  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8003382:	4b30      	ldr	r3, [pc, #192]	; (8003444 <SD_disk_write+0x10c>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	001a      	movs	r2, r3
 8003388:	2304      	movs	r3, #4
 800338a:	4013      	ands	r3, r2
 800338c:	d102      	bne.n	8003394 <SD_disk_write+0x5c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	025b      	lsls	r3, r3, #9
 8003392:	607b      	str	r3, [r7, #4]
  SELECT();
 8003394:	f7ff fc54 	bl	8002c40 <SELECT>
  if (count == 1)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d110      	bne.n	80033c0 <SD_disk_write+0x88>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0019      	movs	r1, r3
 80033a2:	2058      	movs	r0, #88	; 0x58
 80033a4:	f7ff fdcb 	bl	8002f3e <SD_SendCmd>
 80033a8:	1e03      	subs	r3, r0, #0
 80033aa:	d13c      	bne.n	8003426 <SD_disk_write+0xee>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	21fe      	movs	r1, #254	; 0xfe
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff fd71 	bl	8002e98 <SD_TxDataBlock>
 80033b6:	1e03      	subs	r3, r0, #0
 80033b8:	d035      	beq.n	8003426 <SD_disk_write+0xee>
      count = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	e032      	b.n	8003426 <SD_disk_write+0xee>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <SD_disk_write+0x10c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	001a      	movs	r2, r3
 80033c6:	2302      	movs	r3, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	d008      	beq.n	80033de <SD_disk_write+0xa6>
    {
      SD_SendCmd(CMD55, 0);
 80033cc:	2100      	movs	r1, #0
 80033ce:	2077      	movs	r0, #119	; 0x77
 80033d0:	f7ff fdb5 	bl	8002f3e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	0019      	movs	r1, r3
 80033d8:	2057      	movs	r0, #87	; 0x57
 80033da:	f7ff fdb0 	bl	8002f3e <SD_SendCmd>
    }
    if (SD_SendCmd(CMD25, sector) == 0)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0019      	movs	r1, r3
 80033e2:	2059      	movs	r0, #89	; 0x59
 80033e4:	f7ff fdab 	bl	8002f3e <SD_SendCmd>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	d11c      	bne.n	8003426 <SD_disk_write+0xee>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	21fc      	movs	r1, #252	; 0xfc
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff fd51 	bl	8002e98 <SD_TxDataBlock>
 80033f6:	1e03      	subs	r3, r0, #0
 80033f8:	d00c      	beq.n	8003414 <SD_disk_write+0xdc>
        buff += 512;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	0092      	lsls	r2, r2, #2
 8003400:	4694      	mov	ip, r2
 8003402:	4463      	add	r3, ip
 8003404:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ec      	bne.n	80033ec <SD_disk_write+0xb4>
 8003412:	e000      	b.n	8003416 <SD_disk_write+0xde>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8003414:	46c0      	nop			; (mov r8, r8)
      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8003416:	21fd      	movs	r1, #253	; 0xfd
 8003418:	2000      	movs	r0, #0
 800341a:	f7ff fd3d 	bl	8002e98 <SD_TxDataBlock>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d101      	bne.n	8003426 <SD_disk_write+0xee>
      {
        count = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	603b      	str	r3, [r7, #0]
      }
    }
  }
  /* Idle */
  DESELECT();
 8003426:	f7ff fc1a 	bl	8002c5e <DESELECT>
  SPI_RxByte();
 800342a:	f7ff fc5d 	bl	8002ce8 <SPI_RxByte>
  return count ? RES_ERROR : RES_OK;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	1e5a      	subs	r2, r3, #1
 8003432:	4193      	sbcs	r3, r2
 8003434:	b2db      	uxtb	r3, r3
}
 8003436:	0018      	movs	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	b004      	add	sp, #16
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	20000000 	.word	0x20000000
 8003444:	2000020c 	.word	0x2000020c

08003448 <SD_disk_ioctl>:
#endif /* _USE_WRITE */
/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	603a      	str	r2, [r7, #0]
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	1c02      	adds	r2, r0, #0
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	1dbb      	adds	r3, r7, #6
 8003458:	1c0a      	adds	r2, r1, #0
 800345a:	701a      	strb	r2, [r3, #0]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	623b      	str	r3, [r7, #32]
  WORD csize;
  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8003460:	1dfb      	adds	r3, r7, #7
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <SD_disk_ioctl+0x24>
 8003468:	2304      	movs	r3, #4
 800346a:	e11b      	b.n	80036a4 <SD_disk_ioctl+0x25c>
  res = RES_ERROR;
 800346c:	2327      	movs	r3, #39	; 0x27
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
  if (ctrl == CTRL_POWER)
 8003474:	1dbb      	adds	r3, r7, #6
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d127      	bne.n	80034cc <SD_disk_ioctl+0x84>
  {
    switch (*ptr)
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d013      	beq.n	80034ac <SD_disk_ioctl+0x64>
 8003484:	dc1d      	bgt.n	80034c2 <SD_disk_ioctl+0x7a>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <SD_disk_ioctl+0x48>
 800348a:	2b01      	cmp	r3, #1
 800348c:	d007      	beq.n	800349e <SD_disk_ioctl+0x56>
 800348e:	e018      	b.n	80034c2 <SD_disk_ioctl+0x7a>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8003490:	f7ff fcba 	bl	8002e08 <SD_PowerOff>
      res = RES_OK;
 8003494:	2327      	movs	r3, #39	; 0x27
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
      break;
 800349c:	e0ff      	b.n	800369e <SD_disk_ioctl+0x256>
    case 1:
      SD_PowerOn();   /* Power On */
 800349e:	f7ff fc6b 	bl	8002d78 <SD_PowerOn>
      res = RES_OK;
 80034a2:	2327      	movs	r3, #39	; 0x27
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
      break;
 80034aa:	e0f8      	b.n	800369e <SD_disk_ioctl+0x256>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	1c5c      	adds	r4, r3, #1
 80034b0:	f7ff fcb4 	bl	8002e1c <SD_CheckPower>
 80034b4:	0003      	movs	r3, r0
 80034b6:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 80034b8:	2327      	movs	r3, #39	; 0x27
 80034ba:	18fb      	adds	r3, r7, r3
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
      break;
 80034c0:	e0ed      	b.n	800369e <SD_disk_ioctl+0x256>
    default:
      res = RES_PARERR;
 80034c2:	2327      	movs	r3, #39	; 0x27
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	2204      	movs	r2, #4
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e0e8      	b.n	800369e <SD_disk_ioctl+0x256>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80034cc:	4b77      	ldr	r3, [pc, #476]	; (80036ac <SD_disk_ioctl+0x264>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	001a      	movs	r2, r3
 80034d4:	2301      	movs	r3, #1
 80034d6:	4013      	ands	r3, r2
 80034d8:	d001      	beq.n	80034de <SD_disk_ioctl+0x96>
 80034da:	2303      	movs	r3, #3
 80034dc:	e0e2      	b.n	80036a4 <SD_disk_ioctl+0x25c>
    SELECT();
 80034de:	f7ff fbaf 	bl	8002c40 <SELECT>
    switch (ctrl)
 80034e2:	1dbb      	adds	r3, r7, #6
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b0d      	cmp	r3, #13
 80034e8:	d900      	bls.n	80034ec <SD_disk_ioctl+0xa4>
 80034ea:	e0c8      	b.n	800367e <SD_disk_ioctl+0x236>
 80034ec:	009a      	lsls	r2, r3, #2
 80034ee:	4b70      	ldr	r3, [pc, #448]	; (80036b0 <SD_disk_ioctl+0x268>)
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	469f      	mov	pc, r3
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80034f6:	2100      	movs	r1, #0
 80034f8:	2049      	movs	r0, #73	; 0x49
 80034fa:	f7ff fd20 	bl	8002f3e <SD_SendCmd>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d000      	beq.n	8003504 <SD_disk_ioctl+0xbc>
 8003502:	e0c1      	b.n	8003688 <SD_disk_ioctl+0x240>
 8003504:	240c      	movs	r4, #12
 8003506:	193b      	adds	r3, r7, r4
 8003508:	2110      	movs	r1, #16
 800350a:	0018      	movs	r0, r3
 800350c:	f7ff fc90 	bl	8002e30 <SD_RxDataBlock>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d100      	bne.n	8003516 <SD_disk_ioctl+0xce>
 8003514:	e0b8      	b.n	8003688 <SD_disk_ioctl+0x240>
      {
        if ((csd[0] >> 6) == 1)
 8003516:	0022      	movs	r2, r4
 8003518:	18bb      	adds	r3, r7, r2
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d114      	bne.n	800354e <SD_disk_ioctl+0x106>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8003524:	0011      	movs	r1, r2
 8003526:	18bb      	adds	r3, r7, r2
 8003528:	7a5b      	ldrb	r3, [r3, #9]
 800352a:	b29a      	uxth	r2, r3
 800352c:	187b      	adds	r3, r7, r1
 800352e:	7a1b      	ldrb	r3, [r3, #8]
 8003530:	b29b      	uxth	r3, r3
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	b29b      	uxth	r3, r3
 8003536:	18d3      	adds	r3, r2, r3
 8003538:	b29a      	uxth	r2, r3
 800353a:	211e      	movs	r1, #30
 800353c:	187b      	adds	r3, r7, r1
 800353e:	3201      	adds	r2, #1
 8003540:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << 10;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	029a      	lsls	r2, r3, #10
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	601a      	str	r2, [r3, #0]
 800354c:	e03a      	b.n	80035c4 <SD_disk_ioctl+0x17c>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800354e:	200c      	movs	r0, #12
 8003550:	183b      	adds	r3, r7, r0
 8003552:	795b      	ldrb	r3, [r3, #5]
 8003554:	220f      	movs	r2, #15
 8003556:	4013      	ands	r3, r2
 8003558:	b2da      	uxtb	r2, r3
 800355a:	183b      	adds	r3, r7, r0
 800355c:	7a9b      	ldrb	r3, [r3, #10]
 800355e:	09db      	lsrs	r3, r3, #7
 8003560:	b2db      	uxtb	r3, r3
 8003562:	18d3      	adds	r3, r2, r3
 8003564:	b2da      	uxtb	r2, r3
 8003566:	183b      	adds	r3, r7, r0
 8003568:	7a5b      	ldrb	r3, [r3, #9]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2106      	movs	r1, #6
 8003570:	400b      	ands	r3, r1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	18d3      	adds	r3, r2, r3
 8003576:	b2da      	uxtb	r2, r3
 8003578:	2426      	movs	r4, #38	; 0x26
 800357a:	193b      	adds	r3, r7, r4
 800357c:	3202      	adds	r2, #2
 800357e:	701a      	strb	r2, [r3, #0]
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8003580:	183b      	adds	r3, r7, r0
 8003582:	7a1b      	ldrb	r3, [r3, #8]
 8003584:	099b      	lsrs	r3, r3, #6
 8003586:	b2db      	uxtb	r3, r3
 8003588:	b29a      	uxth	r2, r3
 800358a:	183b      	adds	r3, r7, r0
 800358c:	79db      	ldrb	r3, [r3, #7]
 800358e:	b29b      	uxth	r3, r3
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	b29b      	uxth	r3, r3
 8003594:	18d3      	adds	r3, r2, r3
 8003596:	b29a      	uxth	r2, r3
 8003598:	183b      	adds	r3, r7, r0
 800359a:	799b      	ldrb	r3, [r3, #6]
 800359c:	029b      	lsls	r3, r3, #10
 800359e:	b299      	uxth	r1, r3
 80035a0:	23c0      	movs	r3, #192	; 0xc0
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	400b      	ands	r3, r1
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	18d3      	adds	r3, r2, r3
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	211e      	movs	r1, #30
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	3201      	adds	r2, #1
 80035b2:	801a      	strh	r2, [r3, #0]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	881a      	ldrh	r2, [r3, #0]
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	3b09      	subs	r3, #9
 80035be:	409a      	lsls	r2, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 80035c4:	2327      	movs	r3, #39	; 0x27
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
      }
      break;
 80035cc:	e05c      	b.n	8003688 <SD_disk_ioctl+0x240>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80035d6:	2327      	movs	r3, #39	; 0x27
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
      break;
 80035de:	e05a      	b.n	8003696 <SD_disk_ioctl+0x24e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80035e0:	f7ff fbae 	bl	8002d40 <SD_ReadyWait>
 80035e4:	0003      	movs	r3, r0
 80035e6:	2bff      	cmp	r3, #255	; 0xff
 80035e8:	d150      	bne.n	800368c <SD_disk_ioctl+0x244>
 80035ea:	2327      	movs	r3, #39	; 0x27
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
      break;
 80035f2:	e04b      	b.n	800368c <SD_disk_ioctl+0x244>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80035f4:	2100      	movs	r1, #0
 80035f6:	2049      	movs	r0, #73	; 0x49
 80035f8:	f7ff fca1 	bl	8002f3e <SD_SendCmd>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d147      	bne.n	8003690 <SD_disk_ioctl+0x248>
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2110      	movs	r1, #16
 8003604:	0018      	movs	r0, r3
 8003606:	f7ff fc13 	bl	8002e30 <SD_RxDataBlock>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d040      	beq.n	8003690 <SD_disk_ioctl+0x248>
 800360e:	2327      	movs	r3, #39	; 0x27
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
      break;
 8003616:	e03b      	b.n	8003690 <SD_disk_ioctl+0x248>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8003618:	2100      	movs	r1, #0
 800361a:	204a      	movs	r0, #74	; 0x4a
 800361c:	f7ff fc8f 	bl	8002f3e <SD_SendCmd>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d137      	bne.n	8003694 <SD_disk_ioctl+0x24c>
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	2110      	movs	r1, #16
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff fc01 	bl	8002e30 <SD_RxDataBlock>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d030      	beq.n	8003694 <SD_disk_ioctl+0x24c>
 8003632:	2327      	movs	r3, #39	; 0x27
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
      break;
 800363a:	e02b      	b.n	8003694 <SD_disk_ioctl+0x24c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800363c:	2100      	movs	r1, #0
 800363e:	207a      	movs	r0, #122	; 0x7a
 8003640:	f7ff fc7d 	bl	8002f3e <SD_SendCmd>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d11a      	bne.n	800367e <SD_disk_ioctl+0x236>
      {
        for (n = 0; n < 4; n++)
 8003648:	2326      	movs	r3, #38	; 0x26
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e00c      	b.n	800366c <SD_disk_ioctl+0x224>
        {
          *ptr++ = SPI_RxByte();
 8003652:	6a3c      	ldr	r4, [r7, #32]
 8003654:	1c63      	adds	r3, r4, #1
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	f7ff fb46 	bl	8002ce8 <SPI_RxByte>
 800365c:	0003      	movs	r3, r0
 800365e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8003660:	2126      	movs	r1, #38	; 0x26
 8003662:	187b      	adds	r3, r7, r1
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	187b      	adds	r3, r7, r1
 8003668:	3201      	adds	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	2326      	movs	r3, #38	; 0x26
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d9ed      	bls.n	8003652 <SD_disk_ioctl+0x20a>
        }
        res = RES_OK;
 8003676:	2327      	movs	r3, #39	; 0x27
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
      }
    default:
      res = RES_PARERR;
 800367e:	2327      	movs	r3, #39	; 0x27
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2204      	movs	r2, #4
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e006      	b.n	8003696 <SD_disk_ioctl+0x24e>
      break;
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	e004      	b.n	8003696 <SD_disk_ioctl+0x24e>
      break;
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	e002      	b.n	8003696 <SD_disk_ioctl+0x24e>
      break;
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	e000      	b.n	8003696 <SD_disk_ioctl+0x24e>
      break;
 8003694:	46c0      	nop			; (mov r8, r8)
    }
    DESELECT();
 8003696:	f7ff fae2 	bl	8002c5e <DESELECT>
    SPI_RxByte();
 800369a:	f7ff fb25 	bl	8002ce8 <SPI_RxByte>
  }
  return res;
 800369e:	2327      	movs	r3, #39	; 0x27
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	781b      	ldrb	r3, [r3, #0]
}
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b00b      	add	sp, #44	; 0x2c
 80036aa:	bd90      	pop	{r4, r7, pc}
 80036ac:	20000000 	.word	0x20000000
 80036b0:	0800e7b8 	.word	0x0800e7b8

080036b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036ba:	f000 ff2b 	bl	8004514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036be:	f000 f849 	bl	8003754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036c2:	f000 f92d 	bl	8003920 <MX_GPIO_Init>
  MX_SPI1_Init();
 80036c6:	f000 f8f3 	bl	80038b0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80036ca:	f003 f867 	bl	800679c <MX_FATFS_Init>
  MX_ADC_Init();
 80036ce:	f000 f89d 	bl	800380c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  start_time_ms = HAL_GetTick();
 80036d2:	f000 ff85 	bl	80045e0 <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <main+0x94>)
 80036da:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 80036dc:	23a0      	movs	r3, #160	; 0xa0
 80036de:	05db      	lsls	r3, r3, #23
 80036e0:	2101      	movs	r1, #1
 80036e2:	0018      	movs	r0, r3
 80036e4:	f001 fe30 	bl	8005348 <HAL_GPIO_ReadPin>
 80036e8:	0003      	movs	r3, r0
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d123      	bne.n	8003736 <main+0x82>
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_SET);
 80036ee:	23a0      	movs	r3, #160	; 0xa0
 80036f0:	05db      	lsls	r3, r3, #23
 80036f2:	2201      	movs	r2, #1
 80036f4:	2102      	movs	r1, #2
 80036f6:	0018      	movs	r0, r3
 80036f8:	f001 fe43 	bl	8005382 <HAL_GPIO_WritePin>
	 			  uint32_t current_time_ms = HAL_GetTick();
 80036fc:	f000 ff70 	bl	80045e0 <HAL_GetTick>
 8003700:	0003      	movs	r3, r0
 8003702:	607b      	str	r3, [r7, #4]
	 			  seconds_since_start = (current_time_ms - start_time_ms) / 1000.0f;
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <main+0x94>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	0018      	movs	r0, r3
 800370e:	f7fd fb0f 	bl	8000d30 <__aeabi_ui2f>
 8003712:	1c03      	adds	r3, r0, #0
 8003714:	490d      	ldr	r1, [pc, #52]	; (800374c <main+0x98>)
 8003716:	1c18      	adds	r0, r3, #0
 8003718:	f7fd f850 	bl	80007bc <__aeabi_fdiv>
 800371c:	1c03      	adds	r3, r0, #0
 800371e:	1c1a      	adds	r2, r3, #0
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <main+0x9c>)
 8003722:	601a      	str	r2, [r3, #0]
	 			  readNumber();
 8003724:	f000 fb56 	bl	8003dd4 <readNumber>
	 			  Measurement_of_ADC_Voltage_18650();
 8003728:	f000 fa2c 	bl	8003b84 <Measurement_of_ADC_Voltage_18650>
	 			  //Measurement_of_ADC_Voltage_CMOS();
	 			  //Measurement_of_ADC_Current_CMOS();
	 			  Measurement_of_ADC_Current_18650();
 800372c:	f000 fa7a 	bl	8003c24 <Measurement_of_ADC_Current_18650>

	 			  process_SD_card();
 8003730:	f000 f984 	bl	8003a3c <process_SD_card>
 8003734:	e7d2      	b.n	80036dc <main+0x28>
	 		  }
	 		  else
	 		  {
	 			  HAL_GPIO_WritePin(SD_CardDetect_Output_GPIO_Port, SD_CardDetect_Output_Pin, GPIO_PIN_RESET);
 8003736:	23a0      	movs	r3, #160	; 0xa0
 8003738:	05db      	lsls	r3, r3, #23
 800373a:	2200      	movs	r2, #0
 800373c:	2102      	movs	r1, #2
 800373e:	0018      	movs	r0, r3
 8003740:	f001 fe1f 	bl	8005382 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(SD_CardDetect_Input_GPIO_Port, SD_CardDetect_Input_Pin) == GPIO_PIN_SET)
 8003744:	e7ca      	b.n	80036dc <main+0x28>
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	200002d8 	.word	0x200002d8
 800374c:	447a0000 	.word	0x447a0000
 8003750:	200002d4 	.word	0x200002d4

08003754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003754:	b590      	push	{r4, r7, lr}
 8003756:	b093      	sub	sp, #76	; 0x4c
 8003758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800375a:	2414      	movs	r4, #20
 800375c:	193b      	adds	r3, r7, r4
 800375e:	0018      	movs	r0, r3
 8003760:	2334      	movs	r3, #52	; 0x34
 8003762:	001a      	movs	r2, r3
 8003764:	2100      	movs	r1, #0
 8003766:	f007 fa9f 	bl	800aca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800376a:	003b      	movs	r3, r7
 800376c:	0018      	movs	r0, r3
 800376e:	2314      	movs	r3, #20
 8003770:	001a      	movs	r2, r3
 8003772:	2100      	movs	r1, #0
 8003774:	f007 fa98 	bl	800aca8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003778:	4b22      	ldr	r3, [pc, #136]	; (8003804 <SystemClock_Config+0xb0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a22      	ldr	r2, [pc, #136]	; (8003808 <SystemClock_Config+0xb4>)
 800377e:	401a      	ands	r2, r3
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <SystemClock_Config+0xb0>)
 8003782:	2180      	movs	r1, #128	; 0x80
 8003784:	0109      	lsls	r1, r1, #4
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800378a:	0021      	movs	r1, r4
 800378c:	187b      	adds	r3, r7, r1
 800378e:	2202      	movs	r2, #2
 8003790:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2201      	movs	r2, #1
 8003796:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003798:	187b      	adds	r3, r7, r1
 800379a:	2210      	movs	r2, #16
 800379c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800379e:	187b      	adds	r3, r7, r1
 80037a0:	2202      	movs	r2, #2
 80037a2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	2200      	movs	r2, #0
 80037a8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	2280      	movs	r2, #128	; 0x80
 80037ae:	02d2      	lsls	r2, r2, #11
 80037b0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80037b2:	187b      	adds	r3, r7, r1
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	03d2      	lsls	r2, r2, #15
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	0018      	movs	r0, r3
 80037be:	f001 fdfd 	bl	80053bc <HAL_RCC_OscConfig>
 80037c2:	1e03      	subs	r3, r0, #0
 80037c4:	d001      	beq.n	80037ca <SystemClock_Config+0x76>
  {
    Error_Handler();
 80037c6:	f000 fcb5 	bl	8004134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ca:	003b      	movs	r3, r7
 80037cc:	220f      	movs	r2, #15
 80037ce:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037d0:	003b      	movs	r3, r7
 80037d2:	2203      	movs	r2, #3
 80037d4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d6:	003b      	movs	r3, r7
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037dc:	003b      	movs	r3, r7
 80037de:	2200      	movs	r2, #0
 80037e0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037e2:	003b      	movs	r3, r7
 80037e4:	2200      	movs	r2, #0
 80037e6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037e8:	003b      	movs	r3, r7
 80037ea:	2101      	movs	r1, #1
 80037ec:	0018      	movs	r0, r3
 80037ee:	f002 f961 	bl	8005ab4 <HAL_RCC_ClockConfig>
 80037f2:	1e03      	subs	r3, r0, #0
 80037f4:	d001      	beq.n	80037fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80037f6:	f000 fc9d 	bl	8004134 <Error_Handler>
  }
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b013      	add	sp, #76	; 0x4c
 8003800:	bd90      	pop	{r4, r7, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	40007000 	.word	0x40007000
 8003808:	ffffe7ff 	.word	0xffffe7ff

0800380c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */
	ADC_Select_Voltage18650();
 8003810:	f000 fa58 	bl	8003cc4 <ADC_Select_Voltage18650>
	ADC_Select_VoltageCMOS();
 8003814:	f000 fa78 	bl	8003d08 <ADC_Select_VoltageCMOS>
	ADC_Select_Current18650();
 8003818:	f000 fa98 	bl	8003d4c <ADC_Select_Current18650>
	ADC_Select_CurrentCMOS();
 800381c:	f000 fab8 	bl	8003d90 <ADC_Select_CurrentCMOS>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003822:	4a22      	ldr	r2, [pc, #136]	; (80038ac <MX_ADC_Init+0xa0>)
 8003824:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003828:	2200      	movs	r2, #0
 800382a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800382c:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <MX_ADC_Init+0x9c>)
 800382e:	2280      	movs	r2, #128	; 0x80
 8003830:	0612      	lsls	r2, r2, #24
 8003832:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <MX_ADC_Init+0x9c>)
 800383c:	2201      	movs	r2, #1
 800383e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003842:	2201      	movs	r2, #1
 8003844:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003848:	2200      	movs	r2, #0
 800384a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <MX_ADC_Init+0x9c>)
 800384e:	2220      	movs	r2, #32
 8003850:	2101      	movs	r1, #1
 8003852:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003856:	2221      	movs	r2, #33	; 0x21
 8003858:	2100      	movs	r1, #0
 800385a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <MX_ADC_Init+0x9c>)
 800385e:	2200      	movs	r2, #0
 8003860:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003864:	22c2      	movs	r2, #194	; 0xc2
 8003866:	32ff      	adds	r2, #255	; 0xff
 8003868:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800386a:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <MX_ADC_Init+0x9c>)
 800386c:	222c      	movs	r2, #44	; 0x2c
 800386e:	2100      	movs	r1, #0
 8003870:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003874:	2204      	movs	r2, #4
 8003876:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <MX_ADC_Init+0x9c>)
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003880:	2200      	movs	r2, #0
 8003882:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003886:	2200      	movs	r2, #0
 8003888:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <MX_ADC_Init+0x9c>)
 800388c:	2200      	movs	r2, #0
 800388e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <MX_ADC_Init+0x9c>)
 8003892:	0018      	movs	r0, r3
 8003894:	f000 fed2 	bl	800463c <HAL_ADC_Init>
 8003898:	1e03      	subs	r3, r0, #0
 800389a:	d001      	beq.n	80038a0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800389c:	f000 fc4a 	bl	8004134 <Error_Handler>

  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	20000210 	.word	0x20000210
 80038ac:	40012400 	.word	0x40012400

080038b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <MX_SPI1_Init+0x68>)
 80038b6:	4a19      	ldr	r2, [pc, #100]	; (800391c <MX_SPI1_Init+0x6c>)
 80038b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038ba:	4b17      	ldr	r3, [pc, #92]	; (8003918 <MX_SPI1_Init+0x68>)
 80038bc:	2282      	movs	r2, #130	; 0x82
 80038be:	0052      	lsls	r2, r2, #1
 80038c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <MX_SPI1_Init+0x68>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <MX_SPI1_Init+0x68>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <MX_SPI1_Init+0x68>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <MX_SPI1_Init+0x68>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <MX_SPI1_Init+0x68>)
 80038dc:	2280      	movs	r2, #128	; 0x80
 80038de:	0092      	lsls	r2, r2, #2
 80038e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038e2:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <MX_SPI1_Init+0x68>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <MX_SPI1_Init+0x68>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038ee:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <MX_SPI1_Init+0x68>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <MX_SPI1_Init+0x68>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80038fa:	4b07      	ldr	r3, [pc, #28]	; (8003918 <MX_SPI1_Init+0x68>)
 80038fc:	2207      	movs	r2, #7
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <MX_SPI1_Init+0x68>)
 8003902:	0018      	movs	r0, r3
 8003904:	f002 fac4 	bl	8005e90 <HAL_SPI_Init>
 8003908:	1e03      	subs	r3, r0, #0
 800390a:	d001      	beq.n	8003910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800390c:	f000 fc12 	bl	8004134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	2000026c 	.word	0x2000026c
 800391c:	40013000 	.word	0x40013000

08003920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003920:	b590      	push	{r4, r7, lr}
 8003922:	b089      	sub	sp, #36	; 0x24
 8003924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003926:	240c      	movs	r4, #12
 8003928:	193b      	adds	r3, r7, r4
 800392a:	0018      	movs	r0, r3
 800392c:	2314      	movs	r3, #20
 800392e:	001a      	movs	r2, r3
 8003930:	2100      	movs	r1, #0
 8003932:	f007 f9b9 	bl	800aca8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003936:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <MX_GPIO_Init+0xf8>)
 8003938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393a:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <MX_GPIO_Init+0xf8>)
 800393c:	2104      	movs	r1, #4
 800393e:	430a      	orrs	r2, r1
 8003940:	62da      	str	r2, [r3, #44]	; 0x2c
 8003942:	4b35      	ldr	r3, [pc, #212]	; (8003a18 <MX_GPIO_Init+0xf8>)
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	2204      	movs	r2, #4
 8003948:	4013      	ands	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800394e:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <MX_GPIO_Init+0xf8>)
 8003950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003952:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <MX_GPIO_Init+0xf8>)
 8003954:	2101      	movs	r1, #1
 8003956:	430a      	orrs	r2, r1
 8003958:	62da      	str	r2, [r3, #44]	; 0x2c
 800395a:	4b2f      	ldr	r3, [pc, #188]	; (8003a18 <MX_GPIO_Init+0xf8>)
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	2201      	movs	r2, #1
 8003960:	4013      	ands	r3, r2
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003966:	4b2c      	ldr	r3, [pc, #176]	; (8003a18 <MX_GPIO_Init+0xf8>)
 8003968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396a:	4b2b      	ldr	r3, [pc, #172]	; (8003a18 <MX_GPIO_Init+0xf8>)
 800396c:	2102      	movs	r1, #2
 800396e:	430a      	orrs	r2, r1
 8003970:	62da      	str	r2, [r3, #44]	; 0x2c
 8003972:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <MX_GPIO_Init+0xf8>)
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	2202      	movs	r2, #2
 8003978:	4013      	ands	r3, r2
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Red_Pin|User_Input_Status_Light_Green_Pin
 800397e:	4927      	ldr	r1, [pc, #156]	; (8003a1c <MX_GPIO_Init+0xfc>)
 8003980:	23a0      	movs	r3, #160	; 0xa0
 8003982:	05db      	lsls	r3, r3, #23
 8003984:	2200      	movs	r2, #0
 8003986:	0018      	movs	r0, r3
 8003988:	f001 fcfb 	bl	8005382 <HAL_GPIO_WritePin>
                          |User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Discrete_Bit_0_Pin Discrete_Bit_1_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_0_Pin|Discrete_Bit_1_Pin;
 800398c:	193b      	adds	r3, r7, r4
 800398e:	2203      	movs	r2, #3
 8003990:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003992:	193b      	adds	r3, r7, r4
 8003994:	2200      	movs	r2, #0
 8003996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	193b      	adds	r3, r7, r4
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	4a1f      	ldr	r2, [pc, #124]	; (8003a20 <MX_GPIO_Init+0x100>)
 80039a2:	0019      	movs	r1, r3
 80039a4:	0010      	movs	r0, r2
 80039a6:	f001 fb51 	bl	800504c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CardDetect_Input_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Input_Pin;
 80039aa:	193b      	adds	r3, r7, r4
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039b0:	193b      	adds	r3, r7, r4
 80039b2:	2200      	movs	r2, #0
 80039b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b6:	193b      	adds	r3, r7, r4
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SD_CardDetect_Input_GPIO_Port, &GPIO_InitStruct);
 80039bc:	193a      	adds	r2, r7, r4
 80039be:	23a0      	movs	r3, #160	; 0xa0
 80039c0:	05db      	lsls	r3, r3, #23
 80039c2:	0011      	movs	r1, r2
 80039c4:	0018      	movs	r0, r3
 80039c6:	f001 fb41 	bl	800504c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CardDetect_Output_Pin PA4 User_Input_Status_Light_Red_Pin User_Input_Status_Light_Green_Pin
                           User_Input_Status_Light_Blue_Pin */
  GPIO_InitStruct.Pin = SD_CardDetect_Output_Pin|GPIO_PIN_4|User_Input_Status_Light_Red_Pin|User_Input_Status_Light_Green_Pin
 80039ca:	193b      	adds	r3, r7, r4
 80039cc:	4a13      	ldr	r2, [pc, #76]	; (8003a1c <MX_GPIO_Init+0xfc>)
 80039ce:	601a      	str	r2, [r3, #0]
                          |User_Input_Status_Light_Blue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d0:	193b      	adds	r3, r7, r4
 80039d2:	2201      	movs	r2, #1
 80039d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039dc:	193b      	adds	r3, r7, r4
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e2:	193a      	adds	r2, r7, r4
 80039e4:	23a0      	movs	r3, #160	; 0xa0
 80039e6:	05db      	lsls	r3, r3, #23
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f001 fb2e 	bl	800504c <HAL_GPIO_Init>

  /*Configure GPIO pin : Discrete_Bit_2_Pin */
  GPIO_InitStruct.Pin = Discrete_Bit_2_Pin;
 80039f0:	193b      	adds	r3, r7, r4
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039f6:	193b      	adds	r3, r7, r4
 80039f8:	2200      	movs	r2, #0
 80039fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	193b      	adds	r3, r7, r4
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Discrete_Bit_2_GPIO_Port, &GPIO_InitStruct);
 8003a02:	193b      	adds	r3, r7, r4
 8003a04:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <MX_GPIO_Init+0x104>)
 8003a06:	0019      	movs	r1, r3
 8003a08:	0010      	movs	r0, r2
 8003a0a:	f001 fb1f 	bl	800504c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	46bd      	mov	sp, r7
 8003a12:	b009      	add	sp, #36	; 0x24
 8003a14:	bd90      	pop	{r4, r7, pc}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	00000712 	.word	0x00000712
 8003a20:	50000800 	.word	0x50000800
 8003a24:	50000400 	.word	0x50000400

08003a28 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  //HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
  return ch;
 8003a30:	687b      	ldr	r3, [r7, #4]
}
 8003a32:	0018      	movs	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b002      	add	sp, #8
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <process_SD_card>:

void process_SD_card(void)
{
 8003a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a3e:	4c44      	ldr	r4, [pc, #272]	; (8003b50 <process_SD_card+0x114>)
 8003a40:	44a5      	add	sp, r4
 8003a42:	af0c      	add	r7, sp, #48	; 0x30

    // Buffer for storing the complete string to write
    char writeBuffer[500]; // Adjust the size based on your needs

    // Attempt to mount the SD Card
    fres = f_mount(&FatFs, "", 1); // 1=mount now
 8003a44:	4d43      	ldr	r5, [pc, #268]	; (8003b54 <process_SD_card+0x118>)
 8003a46:	2618      	movs	r6, #24
 8003a48:	19ab      	adds	r3, r5, r6
 8003a4a:	19dc      	adds	r4, r3, r7
 8003a4c:	4942      	ldr	r1, [pc, #264]	; (8003b58 <process_SD_card+0x11c>)
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <process_SD_card+0x120>)
 8003a50:	199b      	adds	r3, r3, r6
 8003a52:	19db      	adds	r3, r3, r7
 8003a54:	2201      	movs	r2, #1
 8003a56:	0018      	movs	r0, r3
 8003a58:	f005 fa90 	bl	8008f7c <f_mount>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK) return; // Exit if fail to mount
 8003a60:	19ab      	adds	r3, r5, r6
 8003a62:	19db      	adds	r3, r3, r7
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d16d      	bne.n	8003b46 <process_SD_card+0x10a>

    // Open or create the file and append data
    fres = f_open(&fil, "TestingReadings.csv", FA_WRITE | FA_READ | FA_OPEN_APPEND);
 8003a6a:	19ab      	adds	r3, r5, r6
 8003a6c:	19dc      	adds	r4, r3, r7
 8003a6e:	493c      	ldr	r1, [pc, #240]	; (8003b60 <process_SD_card+0x124>)
 8003a70:	23fa      	movs	r3, #250	; 0xfa
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	199b      	adds	r3, r3, r6
 8003a76:	19db      	adds	r3, r3, r7
 8003a78:	2233      	movs	r2, #51	; 0x33
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f005 faca 	bl	8009014 <f_open>
 8003a80:	0003      	movs	r3, r0
 8003a82:	7023      	strb	r3, [r4, #0]
    if (fres != FR_OK) {
 8003a84:	19ab      	adds	r3, r5, r6
 8003a86:	19db      	adds	r3, r3, r7
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d006      	beq.n	8003a9c <process_SD_card+0x60>
        f_mount(NULL, "", 0); // Dismount the SD card if fail to open
 8003a8e:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <process_SD_card+0x11c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	0019      	movs	r1, r3
 8003a94:	2000      	movs	r0, #0
 8003a96:	f005 fa71 	bl	8008f7c <f_mount>
        return; // Exit if fail to open/create the file
 8003a9a:	e055      	b.n	8003b48 <process_SD_card+0x10c>
    }

    // Prepare the data string
    snprintf(writeBuffer, sizeof(writeBuffer),
 8003a9c:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <process_SD_card+0x128>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	1c18      	adds	r0, r3, #0
 8003aa2:	f7fe ffd5 	bl	8002a50 <__aeabi_f2d>
 8003aa6:	0004      	movs	r4, r0
 8003aa8:	000d      	movs	r5, r1
 8003aaa:	4b2f      	ldr	r3, [pc, #188]	; (8003b68 <process_SD_card+0x12c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	1c18      	adds	r0, r3, #0
 8003ab0:	f7fe ffce 	bl	8002a50 <__aeabi_f2d>
 8003ab4:	6138      	str	r0, [r7, #16]
 8003ab6:	6179      	str	r1, [r7, #20]
 8003ab8:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <process_SD_card+0x130>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	1c18      	adds	r0, r3, #0
 8003abe:	f7fe ffc7 	bl	8002a50 <__aeabi_f2d>
 8003ac2:	60b8      	str	r0, [r7, #8]
 8003ac4:	60f9      	str	r1, [r7, #12]
 8003ac6:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <process_SD_card+0x134>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	1c18      	adds	r0, r3, #0
 8003acc:	f7fe ffc0 	bl	8002a50 <__aeabi_f2d>
 8003ad0:	6038      	str	r0, [r7, #0]
 8003ad2:	6079      	str	r1, [r7, #4]
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <process_SD_card+0x138>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1c18      	adds	r0, r3, #0
 8003ada:	f7fe ffb9 	bl	8002a50 <__aeabi_f2d>
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <process_SD_card+0x13c>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <process_SD_card+0x140>)
 8003ae4:	469c      	mov	ip, r3
 8003ae6:	23fa      	movs	r3, #250	; 0xfa
 8003ae8:	005e      	lsls	r6, r3, #1
 8003aea:	2318      	movs	r3, #24
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	920a      	str	r2, [sp, #40]	; 0x28
 8003af0:	9008      	str	r0, [sp, #32]
 8003af2:	9109      	str	r1, [sp, #36]	; 0x24
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	9106      	str	r1, [sp, #24]
 8003afa:	9207      	str	r2, [sp, #28]
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	9104      	str	r1, [sp, #16]
 8003b02:	9205      	str	r2, [sp, #20]
 8003b04:	6939      	ldr	r1, [r7, #16]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	9102      	str	r1, [sp, #8]
 8003b0a:	9203      	str	r2, [sp, #12]
 8003b0c:	9400      	str	r4, [sp, #0]
 8003b0e:	9501      	str	r5, [sp, #4]
 8003b10:	4662      	mov	r2, ip
 8003b12:	0031      	movs	r1, r6
 8003b14:	0018      	movs	r0, r3
 8003b16:	f007 f827 	bl	800ab68 <sniprintf>
             V_CMOS, // CMOS Voltage
             C_CMOS, // CMOS Current
			 valueToAdjust); // Switch State

    // Write the prepared string to the file
    f_puts(writeBuffer, &fil);
 8003b1a:	24fa      	movs	r4, #250	; 0xfa
 8003b1c:	0064      	lsls	r4, r4, #1
 8003b1e:	2518      	movs	r5, #24
 8003b20:	1963      	adds	r3, r4, r5
 8003b22:	19da      	adds	r2, r3, r7
 8003b24:	197b      	adds	r3, r7, r5
 8003b26:	0011      	movs	r1, r2
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f005 ff48 	bl	80099be <f_puts>

    // Close the file to ensure data is written to the SD card
    f_close(&fil);
 8003b2e:	1963      	adds	r3, r4, r5
 8003b30:	19db      	adds	r3, r3, r7
 8003b32:	0018      	movs	r0, r3
 8003b34:	f005 fe97 	bl	8009866 <f_close>

    // Dismount the SD card
    f_mount(NULL, "", 0);
 8003b38:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <process_SD_card+0x11c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f005 fa1c 	bl	8008f7c <f_mount>
 8003b44:	e000      	b.n	8003b48 <process_SD_card+0x10c>
    if (fres != FR_OK) return; // Exit if fail to mount
 8003b46:	46c0      	nop			; (mov r8, r8)
}
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <process_SD_card+0x144>)
 8003b4c:	449d      	add	sp, r3
 8003b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b50:	ffffdd54 	.word	0xffffdd54
 8003b54:	0000225f 	.word	0x0000225f
 8003b58:	0800e678 	.word	0x0800e678
 8003b5c:	00001224 	.word	0x00001224
 8003b60:	0800e67c 	.word	0x0800e67c
 8003b64:	200002d4 	.word	0x200002d4
 8003b68:	200002c4 	.word	0x200002c4
 8003b6c:	200002d0 	.word	0x200002d0
 8003b70:	200002c8 	.word	0x200002c8
 8003b74:	200002cc 	.word	0x200002cc
 8003b78:	200002dc 	.word	0x200002dc
 8003b7c:	0800e690 	.word	0x0800e690
 8003b80:	0000227c 	.word	0x0000227c

08003b84 <Measurement_of_ADC_Voltage_18650>:


void Measurement_of_ADC_Voltage_18650(){
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc);
 8003b8a:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <Measurement_of_ADC_Voltage_18650+0x8c>)
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f000 ff1d 	bl	80049cc <HAL_ADC_Stop>
	HAL_ADC_Init(&hadc);
 8003b92:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <Measurement_of_ADC_Voltage_18650+0x8c>)
 8003b94:	0018      	movs	r0, r3
 8003b96:	f000 fd51 	bl	800463c <HAL_ADC_Init>
	float V_ref = 3.3;  // This is known for each micro controller from data
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <Measurement_of_ADC_Voltage_18650+0x90>)
 8003b9c:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <Measurement_of_ADC_Voltage_18650+0x94>)
 8003ba0:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f7fc fe09 	bl	80007bc <__aeabi_fdiv>
 8003baa:	1c03      	adds	r3, r0, #0
 8003bac:	607b      	str	r3, [r7, #4]
		// ADC
	    /* Start ADC Conversion for ADC1 */
		ADC1->CHSELR = 0x8000;
 8003bae:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <Measurement_of_ADC_Voltage_18650+0x98>)
 8003bb0:	2280      	movs	r2, #128	; 0x80
 8003bb2:	0212      	lsls	r2, r2, #8
 8003bb4:	629a      	str	r2, [r3, #40]	; 0x28
	    ADC_Select_Voltage18650();
 8003bb6:	f000 f885 	bl	8003cc4 <ADC_Select_Voltage18650>
	    HAL_ADC_Start(&hadc);
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <Measurement_of_ADC_Voltage_18650+0x8c>)
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f000 feb1 	bl	8004924 <HAL_ADC_Start>
	    uint16_t rawValue1;
	       if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	425a      	negs	r2, r3
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <Measurement_of_ADC_Voltage_18650+0x8c>)
 8003bc8:	0011      	movs	r1, r2
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 ff3e 	bl	8004a4c <HAL_ADC_PollForConversion>
 8003bd0:	1e03      	subs	r3, r0, #0
 8003bd2:	d114      	bne.n	8003bfe <Measurement_of_ADC_Voltage_18650+0x7a>
	           /* Read the ADC1 value */
	           rawValue1 = HAL_ADC_GetValue(&hadc);
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <Measurement_of_ADC_Voltage_18650+0x8c>)
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 ffd4 	bl	8004b84 <HAL_ADC_GetValue>
 8003bdc:	0002      	movs	r2, r0
 8003bde:	1cbb      	adds	r3, r7, #2
 8003be0:	801a      	strh	r2, [r3, #0]
	           V_18650 = ((rawValue1 * V_stepSize));
 8003be2:	1cbb      	adds	r3, r7, #2
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7fd f850 	bl	8000c8c <__aeabi_i2f>
 8003bec:	1c03      	adds	r3, r0, #0
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	1c18      	adds	r0, r3, #0
 8003bf2:	f7fc fefd 	bl	80009f0 <__aeabi_fmul>
 8003bf6:	1c03      	adds	r3, r0, #0
 8003bf8:	1c1a      	adds	r2, r3, #0
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <Measurement_of_ADC_Voltage_18650+0x9c>)
 8003bfc:	601a      	str	r2, [r3, #0]
	       }
	    HAL_ADC_Stop(&hadc);
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <Measurement_of_ADC_Voltage_18650+0x8c>)
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 fee3 	bl	80049cc <HAL_ADC_Stop>
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b004      	add	sp, #16
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	20000210 	.word	0x20000210
 8003c14:	40533333 	.word	0x40533333
 8003c18:	457ff000 	.word	0x457ff000
 8003c1c:	40012400 	.word	0x40012400
 8003c20:	200002c4 	.word	0x200002c4

08003c24 <Measurement_of_ADC_Current_18650>:

	       }
	    HAL_ADC_Stop(&hadc);
}

void Measurement_of_ADC_Current_18650(){
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
	HAL_ADC_Stop(&hadc);
 8003c2a:	4b21      	ldr	r3, [pc, #132]	; (8003cb0 <Measurement_of_ADC_Current_18650+0x8c>)
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f000 fecd 	bl	80049cc <HAL_ADC_Stop>
	HAL_ADC_Init(&hadc);
 8003c32:	4b1f      	ldr	r3, [pc, #124]	; (8003cb0 <Measurement_of_ADC_Current_18650+0x8c>)
 8003c34:	0018      	movs	r0, r3
 8003c36:	f000 fd01 	bl	800463c <HAL_ADC_Init>
	float V_ref = 3.3;  // This is known for each micro controller from data
 8003c3a:	4b1e      	ldr	r3, [pc, #120]	; (8003cb4 <Measurement_of_ADC_Current_18650+0x90>)
 8003c3c:	60fb      	str	r3, [r7, #12]
		// sheet, V_ref = power supply in
		float ADC_resolution = (4096 - 1);  // 2^12 - 1
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <Measurement_of_ADC_Current_18650+0x94>)
 8003c40:	60bb      	str	r3, [r7, #8]
		float V_stepSize = V_ref / ADC_resolution;
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7fc fdb9 	bl	80007bc <__aeabi_fdiv>
 8003c4a:	1c03      	adds	r3, r0, #0
 8003c4c:	607b      	str	r3, [r7, #4]
		// ADC
	    /* Start ADC Conversion for ADC1 */
		ADC1->CHSELR = 0x0200;
 8003c4e:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <Measurement_of_ADC_Current_18650+0x98>)
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	0092      	lsls	r2, r2, #2
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
	    ADC_Select_Current18650();
 8003c56:	f000 f879 	bl	8003d4c <ADC_Select_Current18650>
	    HAL_ADC_Start(&hadc);
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <Measurement_of_ADC_Current_18650+0x8c>)
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 fe61 	bl	8004924 <HAL_ADC_Start>
	    uint16_t rawValue3;
	       if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 8003c62:	2301      	movs	r3, #1
 8003c64:	425a      	negs	r2, r3
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <Measurement_of_ADC_Current_18650+0x8c>)
 8003c68:	0011      	movs	r1, r2
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 feee 	bl	8004a4c <HAL_ADC_PollForConversion>
 8003c70:	1e03      	subs	r3, r0, #0
 8003c72:	d114      	bne.n	8003c9e <Measurement_of_ADC_Current_18650+0x7a>
	           /* Read the ADC1 value */
	           rawValue3 = HAL_ADC_GetValue(&hadc);
 8003c74:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <Measurement_of_ADC_Current_18650+0x8c>)
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 ff84 	bl	8004b84 <HAL_ADC_GetValue>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	1cbb      	adds	r3, r7, #2
 8003c80:	801a      	strh	r2, [r3, #0]
	           C_18650 = ((rawValue3 * V_stepSize));
 8003c82:	1cbb      	adds	r3, r7, #2
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	0018      	movs	r0, r3
 8003c88:	f7fd f800 	bl	8000c8c <__aeabi_i2f>
 8003c8c:	1c03      	adds	r3, r0, #0
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	1c18      	adds	r0, r3, #0
 8003c92:	f7fc fead 	bl	80009f0 <__aeabi_fmul>
 8003c96:	1c03      	adds	r3, r0, #0
 8003c98:	1c1a      	adds	r2, r3, #0
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <Measurement_of_ADC_Current_18650+0x9c>)
 8003c9c:	601a      	str	r2, [r3, #0]
	        		   //50)/.0299562); //I_load = ((V_ADC / 50 gain) / .03 calibrated shunt)
	       }
	    HAL_ADC_Stop(&hadc);
 8003c9e:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <Measurement_of_ADC_Current_18650+0x8c>)
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 fe93 	bl	80049cc <HAL_ADC_Stop>
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b004      	add	sp, #16
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	20000210 	.word	0x20000210
 8003cb4:	40533333 	.word	0x40533333
 8003cb8:	457ff000 	.word	0x457ff000
 8003cbc:	40012400 	.word	0x40012400
 8003cc0:	200002d0 	.word	0x200002d0

08003cc4 <ADC_Select_Voltage18650>:
	       }
	    HAL_ADC_Stop(&hadc);
}


void ADC_Select_Voltage18650(){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8003cca:	003b      	movs	r3, r7
 8003ccc:	0018      	movs	r0, r3
 8003cce:	2308      	movs	r3, #8
 8003cd0:	001a      	movs	r2, r3
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f006 ffe8 	bl	800aca8 <memset>
sConfig.Channel = ADC_CHANNEL_15;
 8003cd8:	003b      	movs	r3, r7
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <ADC_Select_Voltage18650+0x3c>)
 8003cdc:	601a      	str	r2, [r3, #0]
sConfig.Rank = 0;
 8003cde:	003b      	movs	r3, r7
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	605a      	str	r2, [r3, #4]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003ce4:	003a      	movs	r2, r7
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <ADC_Select_Voltage18650+0x40>)
 8003ce8:	0011      	movs	r1, r2
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 ff56 	bl	8004b9c <HAL_ADC_ConfigChannel>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d001      	beq.n	8003cf8 <ADC_Select_Voltage18650+0x34>
{
  Error_Handler();
 8003cf4:	f000 fa1e 	bl	8004134 <Error_Handler>
}
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	3c008000 	.word	0x3c008000
 8003d04:	20000210 	.word	0x20000210

08003d08 <ADC_Select_VoltageCMOS>:

void ADC_Select_VoltageCMOS(){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8003d0e:	003b      	movs	r3, r7
 8003d10:	0018      	movs	r0, r3
 8003d12:	2308      	movs	r3, #8
 8003d14:	001a      	movs	r2, r3
 8003d16:	2100      	movs	r1, #0
 8003d18:	f006 ffc6 	bl	800aca8 <memset>
sConfig.Channel = ADC_CHANNEL_13;
 8003d1c:	003b      	movs	r3, r7
 8003d1e:	4a09      	ldr	r2, [pc, #36]	; (8003d44 <ADC_Select_VoltageCMOS+0x3c>)
 8003d20:	601a      	str	r2, [r3, #0]
sConfig.Rank = 0;
 8003d22:	003b      	movs	r3, r7
 8003d24:	2200      	movs	r2, #0
 8003d26:	605a      	str	r2, [r3, #4]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003d28:	003a      	movs	r2, r7
 8003d2a:	4b07      	ldr	r3, [pc, #28]	; (8003d48 <ADC_Select_VoltageCMOS+0x40>)
 8003d2c:	0011      	movs	r1, r2
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f000 ff34 	bl	8004b9c <HAL_ADC_ConfigChannel>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d001      	beq.n	8003d3c <ADC_Select_VoltageCMOS+0x34>
{
Error_Handler();
 8003d38:	f000 f9fc 	bl	8004134 <Error_Handler>
}

}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b002      	add	sp, #8
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	34002000 	.word	0x34002000
 8003d48:	20000210 	.word	0x20000210

08003d4c <ADC_Select_Current18650>:

void ADC_Select_Current18650(){
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8003d52:	003b      	movs	r3, r7
 8003d54:	0018      	movs	r0, r3
 8003d56:	2308      	movs	r3, #8
 8003d58:	001a      	movs	r2, r3
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	f006 ffa4 	bl	800aca8 <memset>
sConfig.Channel = ADC_CHANNEL_9;
 8003d60:	003b      	movs	r3, r7
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <ADC_Select_Current18650+0x3c>)
 8003d64:	601a      	str	r2, [r3, #0]
sConfig.Rank = 0;
 8003d66:	003b      	movs	r3, r7
 8003d68:	2200      	movs	r2, #0
 8003d6a:	605a      	str	r2, [r3, #4]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003d6c:	003a      	movs	r2, r7
 8003d6e:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <ADC_Select_Current18650+0x40>)
 8003d70:	0011      	movs	r1, r2
 8003d72:	0018      	movs	r0, r3
 8003d74:	f000 ff12 	bl	8004b9c <HAL_ADC_ConfigChannel>
 8003d78:	1e03      	subs	r3, r0, #0
 8003d7a:	d001      	beq.n	8003d80 <ADC_Select_Current18650+0x34>
{
	    Error_Handler();
 8003d7c:	f000 f9da 	bl	8004134 <Error_Handler>
}

}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	24000200 	.word	0x24000200
 8003d8c:	20000210 	.word	0x20000210

08003d90 <ADC_Select_CurrentCMOS>:

void ADC_Select_CurrentCMOS(){
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
ADC_ChannelConfTypeDef sConfig = {0};
 8003d96:	003b      	movs	r3, r7
 8003d98:	0018      	movs	r0, r3
 8003d9a:	2308      	movs	r3, #8
 8003d9c:	001a      	movs	r2, r3
 8003d9e:	2100      	movs	r1, #0
 8003da0:	f006 ff82 	bl	800aca8 <memset>
sConfig.Channel = ADC_CHANNEL_12;
 8003da4:	003b      	movs	r3, r7
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <ADC_Select_CurrentCMOS+0x3c>)
 8003da8:	601a      	str	r2, [r3, #0]
sConfig.Rank = 0;
 8003daa:	003b      	movs	r3, r7
 8003dac:	2200      	movs	r2, #0
 8003dae:	605a      	str	r2, [r3, #4]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003db0:	003a      	movs	r2, r7
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <ADC_Select_CurrentCMOS+0x40>)
 8003db4:	0011      	movs	r1, r2
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 fef0 	bl	8004b9c <HAL_ADC_ConfigChannel>
 8003dbc:	1e03      	subs	r3, r0, #0
 8003dbe:	d001      	beq.n	8003dc4 <ADC_Select_CurrentCMOS+0x34>
{
Error_Handler();
 8003dc0:	f000 f9b8 	bl	8004134 <Error_Handler>
}

}
 8003dc4:	46c0      	nop			; (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	30001000 	.word	0x30001000
 8003dd0:	20000210 	.word	0x20000210

08003dd4 <readNumber>:

void readNumber() {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003dd8:	4bd3      	ldr	r3, [pc, #844]	; (8004128 <readNumber+0x354>)
 8003dda:	2101      	movs	r1, #1
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f001 fab3 	bl	8005348 <HAL_GPIO_ReadPin>
 8003de2:	1e03      	subs	r3, r0, #0
 8003de4:	d12b      	bne.n	8003e3e <readNumber+0x6a>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003de6:	4bd0      	ldr	r3, [pc, #832]	; (8004128 <readNumber+0x354>)
 8003de8:	2102      	movs	r1, #2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f001 faac 	bl	8005348 <HAL_GPIO_ReadPin>
 8003df0:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003df2:	d124      	bne.n	8003e3e <readNumber+0x6a>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003df4:	4bcd      	ldr	r3, [pc, #820]	; (800412c <readNumber+0x358>)
 8003df6:	2101      	movs	r1, #1
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f001 faa5 	bl	8005348 <HAL_GPIO_ReadPin>
 8003dfe:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003e00:	d11d      	bne.n	8003e3e <readNumber+0x6a>
		HAL_Delay(5);
 8003e02:	2005      	movs	r0, #5
 8003e04:	f000 fbf6 	bl	80045f4 <HAL_Delay>
		valueToAdjust = 0;
 8003e08:	4bc9      	ldr	r3, [pc, #804]	; (8004130 <readNumber+0x35c>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
		// Set LED to Off
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	0059      	lsls	r1, r3, #1
 8003e12:	23a0      	movs	r3, #160	; 0xa0
 8003e14:	05db      	lsls	r3, r3, #23
 8003e16:	2200      	movs	r2, #0
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f001 fab2 	bl	8005382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	0099      	lsls	r1, r3, #2
 8003e22:	23a0      	movs	r3, #160	; 0xa0
 8003e24:	05db      	lsls	r3, r3, #23
 8003e26:	2200      	movs	r2, #0
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f001 faaa 	bl	8005382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	00d9      	lsls	r1, r3, #3
 8003e32:	23a0      	movs	r3, #160	; 0xa0
 8003e34:	05db      	lsls	r3, r3, #23
 8003e36:	2200      	movs	r2, #0
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f001 faa2 	bl	8005382 <HAL_GPIO_WritePin>

		}

	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003e3e:	4bba      	ldr	r3, [pc, #744]	; (8004128 <readNumber+0x354>)
 8003e40:	2101      	movs	r1, #1
 8003e42:	0018      	movs	r0, r3
 8003e44:	f001 fa80 	bl	8005348 <HAL_GPIO_ReadPin>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d12b      	bne.n	8003ea6 <readNumber+0xd2>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003e4e:	4bb6      	ldr	r3, [pc, #728]	; (8004128 <readNumber+0x354>)
 8003e50:	2102      	movs	r1, #2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f001 fa78 	bl	8005348 <HAL_GPIO_ReadPin>
 8003e58:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003e5a:	d124      	bne.n	8003ea6 <readNumber+0xd2>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003e5c:	4bb3      	ldr	r3, [pc, #716]	; (800412c <readNumber+0x358>)
 8003e5e:	2101      	movs	r1, #1
 8003e60:	0018      	movs	r0, r3
 8003e62:	f001 fa71 	bl	8005348 <HAL_GPIO_ReadPin>
 8003e66:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003e68:	d11d      	bne.n	8003ea6 <readNumber+0xd2>
		HAL_Delay(5);
 8003e6a:	2005      	movs	r0, #5
 8003e6c:	f000 fbc2 	bl	80045f4 <HAL_Delay>
		valueToAdjust = 1;
 8003e70:	4baf      	ldr	r3, [pc, #700]	; (8004130 <readNumber+0x35c>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
		// Set Red
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	0059      	lsls	r1, r3, #1
 8003e7a:	23a0      	movs	r3, #160	; 0xa0
 8003e7c:	05db      	lsls	r3, r3, #23
 8003e7e:	2201      	movs	r2, #1
 8003e80:	0018      	movs	r0, r3
 8003e82:	f001 fa7e 	bl	8005382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8003e86:	2380      	movs	r3, #128	; 0x80
 8003e88:	0099      	lsls	r1, r3, #2
 8003e8a:	23a0      	movs	r3, #160	; 0xa0
 8003e8c:	05db      	lsls	r3, r3, #23
 8003e8e:	2200      	movs	r2, #0
 8003e90:	0018      	movs	r0, r3
 8003e92:	f001 fa76 	bl	8005382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	00d9      	lsls	r1, r3, #3
 8003e9a:	23a0      	movs	r3, #160	; 0xa0
 8003e9c:	05db      	lsls	r3, r3, #23
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f001 fa6e 	bl	8005382 <HAL_GPIO_WritePin>

	}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003ea6:	4ba0      	ldr	r3, [pc, #640]	; (8004128 <readNumber+0x354>)
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f001 fa4c 	bl	8005348 <HAL_GPIO_ReadPin>
 8003eb0:	1e03      	subs	r3, r0, #0
 8003eb2:	d12c      	bne.n	8003f0e <readNumber+0x13a>
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003eb4:	4b9c      	ldr	r3, [pc, #624]	; (8004128 <readNumber+0x354>)
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f001 fa45 	bl	8005348 <HAL_GPIO_ReadPin>
 8003ebe:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d124      	bne.n	8003f0e <readNumber+0x13a>
		HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003ec4:	4b99      	ldr	r3, [pc, #612]	; (800412c <readNumber+0x358>)
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f001 fa3d 	bl	8005348 <HAL_GPIO_ReadPin>
 8003ece:	1e03      	subs	r3, r0, #0
		HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003ed0:	d11d      	bne.n	8003f0e <readNumber+0x13a>
		HAL_Delay(5);
 8003ed2:	2005      	movs	r0, #5
 8003ed4:	f000 fb8e 	bl	80045f4 <HAL_Delay>
		valueToAdjust = 2;
 8003ed8:	4b95      	ldr	r3, [pc, #596]	; (8004130 <readNumber+0x35c>)
 8003eda:	2202      	movs	r2, #2
 8003edc:	601a      	str	r2, [r3, #0]
		// Set Yellow
		HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	0059      	lsls	r1, r3, #1
 8003ee2:	23a0      	movs	r3, #160	; 0xa0
 8003ee4:	05db      	lsls	r3, r3, #23
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f001 fa4a 	bl	8005382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	0099      	lsls	r1, r3, #2
 8003ef2:	23a0      	movs	r3, #160	; 0xa0
 8003ef4:	05db      	lsls	r3, r3, #23
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f001 fa42 	bl	8005382 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003efe:	2380      	movs	r3, #128	; 0x80
 8003f00:	00d9      	lsls	r1, r3, #3
 8003f02:	23a0      	movs	r3, #160	; 0xa0
 8003f04:	05db      	lsls	r3, r3, #23
 8003f06:	2200      	movs	r2, #0
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f001 fa3a 	bl	8005382 <HAL_GPIO_WritePin>

	}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003f0e:	4b86      	ldr	r3, [pc, #536]	; (8004128 <readNumber+0x354>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	0018      	movs	r0, r3
 8003f14:	f001 fa18 	bl	8005348 <HAL_GPIO_ReadPin>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d12c      	bne.n	8003f78 <readNumber+0x1a4>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003f1e:	4b82      	ldr	r3, [pc, #520]	; (8004128 <readNumber+0x354>)
 8003f20:	2102      	movs	r1, #2
 8003f22:	0018      	movs	r0, r3
 8003f24:	f001 fa10 	bl	8005348 <HAL_GPIO_ReadPin>
 8003f28:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d124      	bne.n	8003f78 <readNumber+0x1a4>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 0 ) {
 8003f2e:	4b7f      	ldr	r3, [pc, #508]	; (800412c <readNumber+0x358>)
 8003f30:	2101      	movs	r1, #1
 8003f32:	0018      	movs	r0, r3
 8003f34:	f001 fa08 	bl	8005348 <HAL_GPIO_ReadPin>
 8003f38:	1e03      	subs	r3, r0, #0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8003f3a:	d11d      	bne.n	8003f78 <readNumber+0x1a4>
			HAL_Delay(5);
 8003f3c:	2005      	movs	r0, #5
 8003f3e:	f000 fb59 	bl	80045f4 <HAL_Delay>
			valueToAdjust = 3;
 8003f42:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <readNumber+0x35c>)
 8003f44:	2203      	movs	r2, #3
 8003f46:	601a      	str	r2, [r3, #0]
			// Set Green
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	0059      	lsls	r1, r3, #1
 8003f4c:	23a0      	movs	r3, #160	; 0xa0
 8003f4e:	05db      	lsls	r3, r3, #23
 8003f50:	2200      	movs	r2, #0
 8003f52:	0018      	movs	r0, r3
 8003f54:	f001 fa15 	bl	8005382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	0099      	lsls	r1, r3, #2
 8003f5c:	23a0      	movs	r3, #160	; 0xa0
 8003f5e:	05db      	lsls	r3, r3, #23
 8003f60:	2201      	movs	r2, #1
 8003f62:	0018      	movs	r0, r3
 8003f64:	f001 fa0d 	bl	8005382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_RESET);
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	00d9      	lsls	r1, r3, #3
 8003f6c:	23a0      	movs	r3, #160	; 0xa0
 8003f6e:	05db      	lsls	r3, r3, #23
 8003f70:	2200      	movs	r2, #0
 8003f72:	0018      	movs	r0, r3
 8003f74:	f001 fa05 	bl	8005382 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003f78:	4b6b      	ldr	r3, [pc, #428]	; (8004128 <readNumber+0x354>)
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f001 f9e3 	bl	8005348 <HAL_GPIO_ReadPin>
 8003f82:	1e03      	subs	r3, r0, #0
 8003f84:	d12c      	bne.n	8003fe0 <readNumber+0x20c>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003f86:	4b68      	ldr	r3, [pc, #416]	; (8004128 <readNumber+0x354>)
 8003f88:	2102      	movs	r1, #2
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f001 f9dc 	bl	8005348 <HAL_GPIO_ReadPin>
 8003f90:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8003f92:	d125      	bne.n	8003fe0 <readNumber+0x20c>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8003f94:	4b65      	ldr	r3, [pc, #404]	; (800412c <readNumber+0x358>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f001 f9d5 	bl	8005348 <HAL_GPIO_ReadPin>
 8003f9e:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d11d      	bne.n	8003fe0 <readNumber+0x20c>
			HAL_Delay(5);
 8003fa4:	2005      	movs	r0, #5
 8003fa6:	f000 fb25 	bl	80045f4 <HAL_Delay>
			valueToAdjust = 4;
 8003faa:	4b61      	ldr	r3, [pc, #388]	; (8004130 <readNumber+0x35c>)
 8003fac:	2204      	movs	r2, #4
 8003fae:	601a      	str	r2, [r3, #0]
			// Set Cyan
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	0059      	lsls	r1, r3, #1
 8003fb4:	23a0      	movs	r3, #160	; 0xa0
 8003fb6:	05db      	lsls	r3, r3, #23
 8003fb8:	2200      	movs	r2, #0
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f001 f9e1 	bl	8005382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	0099      	lsls	r1, r3, #2
 8003fc4:	23a0      	movs	r3, #160	; 0xa0
 8003fc6:	05db      	lsls	r3, r3, #23
 8003fc8:	2201      	movs	r2, #1
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f001 f9d9 	bl	8005382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	00d9      	lsls	r1, r3, #3
 8003fd4:	23a0      	movs	r3, #160	; 0xa0
 8003fd6:	05db      	lsls	r3, r3, #23
 8003fd8:	2201      	movs	r2, #1
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f001 f9d1 	bl	8005382 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003fe0:	4b51      	ldr	r3, [pc, #324]	; (8004128 <readNumber+0x354>)
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f001 f9af 	bl	8005348 <HAL_GPIO_ReadPin>
 8003fea:	0003      	movs	r3, r0
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d12c      	bne.n	800404a <readNumber+0x276>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 8003ff0:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <readNumber+0x354>)
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f001 f9a7 	bl	8005348 <HAL_GPIO_ReadPin>
 8003ffa:	1e03      	subs	r3, r0, #0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 8003ffc:	d125      	bne.n	800404a <readNumber+0x276>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8003ffe:	4b4b      	ldr	r3, [pc, #300]	; (800412c <readNumber+0x358>)
 8004000:	2101      	movs	r1, #1
 8004002:	0018      	movs	r0, r3
 8004004:	f001 f9a0 	bl	8005348 <HAL_GPIO_ReadPin>
 8004008:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 0 &&
 800400a:	2b01      	cmp	r3, #1
 800400c:	d11d      	bne.n	800404a <readNumber+0x276>
			HAL_Delay(5);
 800400e:	2005      	movs	r0, #5
 8004010:	f000 faf0 	bl	80045f4 <HAL_Delay>
			valueToAdjust = 5;
 8004014:	4b46      	ldr	r3, [pc, #280]	; (8004130 <readNumber+0x35c>)
 8004016:	2205      	movs	r2, #5
 8004018:	601a      	str	r2, [r3, #0]
			// Set Blue
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_RESET);
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	0059      	lsls	r1, r3, #1
 800401e:	23a0      	movs	r3, #160	; 0xa0
 8004020:	05db      	lsls	r3, r3, #23
 8004022:	2200      	movs	r2, #0
 8004024:	0018      	movs	r0, r3
 8004026:	f001 f9ac 	bl	8005382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	0099      	lsls	r1, r3, #2
 800402e:	23a0      	movs	r3, #160	; 0xa0
 8004030:	05db      	lsls	r3, r3, #23
 8004032:	2200      	movs	r2, #0
 8004034:	0018      	movs	r0, r3
 8004036:	f001 f9a4 	bl	8005382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	00d9      	lsls	r1, r3, #3
 800403e:	23a0      	movs	r3, #160	; 0xa0
 8004040:	05db      	lsls	r3, r3, #23
 8004042:	2201      	movs	r2, #1
 8004044:	0018      	movs	r0, r3
 8004046:	f001 f99c 	bl	8005382 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 800404a:	4b37      	ldr	r3, [pc, #220]	; (8004128 <readNumber+0x354>)
 800404c:	2101      	movs	r1, #1
 800404e:	0018      	movs	r0, r3
 8004050:	f001 f97a 	bl	8005348 <HAL_GPIO_ReadPin>
 8004054:	1e03      	subs	r3, r0, #0
 8004056:	d12d      	bne.n	80040b4 <readNumber+0x2e0>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8004058:	4b33      	ldr	r3, [pc, #204]	; (8004128 <readNumber+0x354>)
 800405a:	2102      	movs	r1, #2
 800405c:	0018      	movs	r0, r3
 800405e:	f001 f973 	bl	8005348 <HAL_GPIO_ReadPin>
 8004062:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 0 &&
 8004064:	2b01      	cmp	r3, #1
 8004066:	d125      	bne.n	80040b4 <readNumber+0x2e0>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 8004068:	4b30      	ldr	r3, [pc, #192]	; (800412c <readNumber+0x358>)
 800406a:	2101      	movs	r1, #1
 800406c:	0018      	movs	r0, r3
 800406e:	f001 f96b 	bl	8005348 <HAL_GPIO_ReadPin>
 8004072:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 8004074:	2b01      	cmp	r3, #1
 8004076:	d11d      	bne.n	80040b4 <readNumber+0x2e0>
			HAL_Delay(5);
 8004078:	2005      	movs	r0, #5
 800407a:	f000 fabb 	bl	80045f4 <HAL_Delay>
			valueToAdjust = 6;
 800407e:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <readNumber+0x35c>)
 8004080:	2206      	movs	r2, #6
 8004082:	601a      	str	r2, [r3, #0]
			// Set Magenta
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	0059      	lsls	r1, r3, #1
 8004088:	23a0      	movs	r3, #160	; 0xa0
 800408a:	05db      	lsls	r3, r3, #23
 800408c:	2201      	movs	r2, #1
 800408e:	0018      	movs	r0, r3
 8004090:	f001 f977 	bl	8005382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_RESET);
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	0099      	lsls	r1, r3, #2
 8004098:	23a0      	movs	r3, #160	; 0xa0
 800409a:	05db      	lsls	r3, r3, #23
 800409c:	2200      	movs	r2, #0
 800409e:	0018      	movs	r0, r3
 80040a0:	f001 f96f 	bl	8005382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	00d9      	lsls	r1, r3, #3
 80040a8:	23a0      	movs	r3, #160	; 0xa0
 80040aa:	05db      	lsls	r3, r3, #23
 80040ac:	2201      	movs	r2, #1
 80040ae:	0018      	movs	r0, r3
 80040b0:	f001 f967 	bl	8005382 <HAL_GPIO_WritePin>

		}
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 80040b4:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <readNumber+0x354>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	0018      	movs	r0, r3
 80040ba:	f001 f945 	bl	8005348 <HAL_GPIO_ReadPin>
 80040be:	0003      	movs	r3, r0
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d12d      	bne.n	8004120 <readNumber+0x34c>
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80040c4:	4b18      	ldr	r3, [pc, #96]	; (8004128 <readNumber+0x354>)
 80040c6:	2102      	movs	r1, #2
 80040c8:	0018      	movs	r0, r3
 80040ca:	f001 f93d 	bl	8005348 <HAL_GPIO_ReadPin>
 80040ce:	0003      	movs	r3, r0
	if (HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_0_Pin) == 1 &&
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d125      	bne.n	8004120 <readNumber+0x34c>
			HAL_GPIO_ReadPin(GPIOB, Discrete_Bit_2_Pin) == 1 ) {
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <readNumber+0x358>)
 80040d6:	2101      	movs	r1, #1
 80040d8:	0018      	movs	r0, r3
 80040da:	f001 f935 	bl	8005348 <HAL_GPIO_ReadPin>
 80040de:	0003      	movs	r3, r0
			HAL_GPIO_ReadPin(GPIOC, Discrete_Bit_1_Pin) == 1 &&
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d11d      	bne.n	8004120 <readNumber+0x34c>
			HAL_Delay(5);
 80040e4:	2005      	movs	r0, #5
 80040e6:	f000 fa85 	bl	80045f4 <HAL_Delay>
			valueToAdjust = 7;
 80040ea:	4b11      	ldr	r3, [pc, #68]	; (8004130 <readNumber+0x35c>)
 80040ec:	2207      	movs	r2, #7
 80040ee:	601a      	str	r2, [r3, #0]
			// Set White
			HAL_GPIO_WritePin(User_Input_Status_Light_Red_GPIO_Port, User_Input_Status_Light_Red_Pin, GPIO_PIN_SET);
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	0059      	lsls	r1, r3, #1
 80040f4:	23a0      	movs	r3, #160	; 0xa0
 80040f6:	05db      	lsls	r3, r3, #23
 80040f8:	2201      	movs	r2, #1
 80040fa:	0018      	movs	r0, r3
 80040fc:	f001 f941 	bl	8005382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Green_GPIO_Port, User_Input_Status_Light_Green_Pin, GPIO_PIN_SET);
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	0099      	lsls	r1, r3, #2
 8004104:	23a0      	movs	r3, #160	; 0xa0
 8004106:	05db      	lsls	r3, r3, #23
 8004108:	2201      	movs	r2, #1
 800410a:	0018      	movs	r0, r3
 800410c:	f001 f939 	bl	8005382 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(User_Input_Status_Light_Blue_GPIO_Port, User_Input_Status_Light_Blue_Pin, GPIO_PIN_SET);
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	00d9      	lsls	r1, r3, #3
 8004114:	23a0      	movs	r3, #160	; 0xa0
 8004116:	05db      	lsls	r3, r3, #23
 8004118:	2201      	movs	r2, #1
 800411a:	0018      	movs	r0, r3
 800411c:	f001 f931 	bl	8005382 <HAL_GPIO_WritePin>

		}
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	50000800 	.word	0x50000800
 800412c:	50000400 	.word	0x50000400
 8004130:	200002dc 	.word	0x200002dc

08004134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004138:	b672      	cpsid	i
}
 800413a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800413c:	e7fe      	b.n	800413c <Error_Handler+0x8>
	...

08004140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <HAL_MspInit+0x24>)
 8004146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <HAL_MspInit+0x24>)
 800414a:	2101      	movs	r1, #1
 800414c:	430a      	orrs	r2, r1
 800414e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <HAL_MspInit+0x24>)
 8004152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <HAL_MspInit+0x24>)
 8004156:	2180      	movs	r1, #128	; 0x80
 8004158:	0549      	lsls	r1, r1, #21
 800415a:	430a      	orrs	r2, r1
 800415c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40021000 	.word	0x40021000

08004168 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b08b      	sub	sp, #44	; 0x2c
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	2414      	movs	r4, #20
 8004172:	193b      	adds	r3, r7, r4
 8004174:	0018      	movs	r0, r3
 8004176:	2314      	movs	r3, #20
 8004178:	001a      	movs	r2, r3
 800417a:	2100      	movs	r1, #0
 800417c:	f006 fd94 	bl	800aca8 <memset>
  if(hadc->Instance==ADC1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a22      	ldr	r2, [pc, #136]	; (8004210 <HAL_ADC_MspInit+0xa8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d13d      	bne.n	8004206 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <HAL_ADC_MspInit+0xac>)
 800418c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418e:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_ADC_MspInit+0xac>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	0089      	lsls	r1, r1, #2
 8004194:	430a      	orrs	r2, r1
 8004196:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004198:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <HAL_ADC_MspInit+0xac>)
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_ADC_MspInit+0xac>)
 800419e:	2104      	movs	r1, #4
 80041a0:	430a      	orrs	r2, r1
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_ADC_MspInit+0xac>)
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2204      	movs	r2, #4
 80041aa:	4013      	ands	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b0:	4b18      	ldr	r3, [pc, #96]	; (8004214 <HAL_ADC_MspInit+0xac>)
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	4b17      	ldr	r3, [pc, #92]	; (8004214 <HAL_ADC_MspInit+0xac>)
 80041b6:	2102      	movs	r1, #2
 80041b8:	430a      	orrs	r2, r1
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80041bc:	4b15      	ldr	r3, [pc, #84]	; (8004214 <HAL_ADC_MspInit+0xac>)
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	2202      	movs	r2, #2
 80041c2:	4013      	ands	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC_IN12
    PC3     ------> ADC_IN13
    PC5     ------> ADC_IN15
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Current_ADC_CMOS_Pin|Voltage_ADC_CMOS_Pin|Voltage_ADC_18650_Pin;
 80041c8:	193b      	adds	r3, r7, r4
 80041ca:	222c      	movs	r2, #44	; 0x2c
 80041cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041ce:	193b      	adds	r3, r7, r4
 80041d0:	2203      	movs	r2, #3
 80041d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d4:	193b      	adds	r3, r7, r4
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041da:	193b      	adds	r3, r7, r4
 80041dc:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <HAL_ADC_MspInit+0xb0>)
 80041de:	0019      	movs	r1, r3
 80041e0:	0010      	movs	r0, r2
 80041e2:	f000 ff33 	bl	800504c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Current_ADC_18650_Pin;
 80041e6:	0021      	movs	r1, r4
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	2202      	movs	r2, #2
 80041ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041ee:	187b      	adds	r3, r7, r1
 80041f0:	2203      	movs	r2, #3
 80041f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	187b      	adds	r3, r7, r1
 80041f6:	2200      	movs	r2, #0
 80041f8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Current_ADC_18650_GPIO_Port, &GPIO_InitStruct);
 80041fa:	187b      	adds	r3, r7, r1
 80041fc:	4a07      	ldr	r2, [pc, #28]	; (800421c <HAL_ADC_MspInit+0xb4>)
 80041fe:	0019      	movs	r1, r3
 8004200:	0010      	movs	r0, r2
 8004202:	f000 ff23 	bl	800504c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	46bd      	mov	sp, r7
 800420a:	b00b      	add	sp, #44	; 0x2c
 800420c:	bd90      	pop	{r4, r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	40012400 	.word	0x40012400
 8004214:	40021000 	.word	0x40021000
 8004218:	50000800 	.word	0x50000800
 800421c:	50000400 	.word	0x50000400

08004220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b089      	sub	sp, #36	; 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004228:	240c      	movs	r4, #12
 800422a:	193b      	adds	r3, r7, r4
 800422c:	0018      	movs	r0, r3
 800422e:	2314      	movs	r3, #20
 8004230:	001a      	movs	r2, r3
 8004232:	2100      	movs	r1, #0
 8004234:	f006 fd38 	bl	800aca8 <memset>
  if(hspi->Instance==SPI1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <HAL_SPI_MspInit+0x80>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d129      	bne.n	8004296 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004242:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <HAL_SPI_MspInit+0x84>)
 8004244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <HAL_SPI_MspInit+0x84>)
 8004248:	2180      	movs	r1, #128	; 0x80
 800424a:	0149      	lsls	r1, r1, #5
 800424c:	430a      	orrs	r2, r1
 800424e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004250:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <HAL_SPI_MspInit+0x84>)
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_SPI_MspInit+0x84>)
 8004256:	2101      	movs	r1, #1
 8004258:	430a      	orrs	r2, r1
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <HAL_SPI_MspInit+0x84>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	2201      	movs	r2, #1
 8004262:	4013      	ands	r3, r2
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004268:	0021      	movs	r1, r4
 800426a:	187b      	adds	r3, r7, r1
 800426c:	22e0      	movs	r2, #224	; 0xe0
 800426e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004270:	187b      	adds	r3, r7, r1
 8004272:	2202      	movs	r2, #2
 8004274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	187b      	adds	r3, r7, r1
 8004278:	2200      	movs	r2, #0
 800427a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427c:	187b      	adds	r3, r7, r1
 800427e:	2203      	movs	r2, #3
 8004280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004282:	187b      	adds	r3, r7, r1
 8004284:	2200      	movs	r2, #0
 8004286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004288:	187a      	adds	r2, r7, r1
 800428a:	23a0      	movs	r3, #160	; 0xa0
 800428c:	05db      	lsls	r3, r3, #23
 800428e:	0011      	movs	r1, r2
 8004290:	0018      	movs	r0, r3
 8004292:	f000 fedb 	bl	800504c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004296:	46c0      	nop			; (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	b009      	add	sp, #36	; 0x24
 800429c:	bd90      	pop	{r4, r7, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	40013000 	.word	0x40013000
 80042a4:	40021000 	.word	0x40021000

080042a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042ac:	e7fe      	b.n	80042ac <NMI_Handler+0x4>

080042ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042b2:	e7fe      	b.n	80042b2 <HardFault_Handler+0x4>

080042b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
	if(Timer1 > 0)
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <PendSV_Handler+0x34>)
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <PendSV_Handler+0x18>
	  Timer1--;
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <PendSV_Handler+0x34>)
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <PendSV_Handler+0x34>)
 80042d6:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <PendSV_Handler+0x38>)
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <PendSV_Handler+0x2c>
	  Timer2--;
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <PendSV_Handler+0x38>)
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <PendSV_Handler+0x38>)
 80042ea:	801a      	strh	r2, [r3, #0]
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	20000208 	.word	0x20000208
 80042f8:	2000020a 	.word	0x2000020a

080042fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004300:	f000 f95c 	bl	80045bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	af00      	add	r7, sp, #0
  return 1;
 800430e:	2301      	movs	r3, #1
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <_kill>:

int _kill(int pid, int sig)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004320:	f006 fd1c 	bl	800ad5c <__errno>
 8004324:	0003      	movs	r3, r0
 8004326:	2216      	movs	r2, #22
 8004328:	601a      	str	r2, [r3, #0]
  return -1;
 800432a:	2301      	movs	r3, #1
 800432c:	425b      	negs	r3, r3
}
 800432e:	0018      	movs	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	b002      	add	sp, #8
 8004334:	bd80      	pop	{r7, pc}

08004336 <_exit>:

void _exit (int status)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800433e:	2301      	movs	r3, #1
 8004340:	425a      	negs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0011      	movs	r1, r2
 8004346:	0018      	movs	r0, r3
 8004348:	f7ff ffe5 	bl	8004316 <_kill>
  while (1) {}    /* Make sure we hang here */
 800434c:	e7fe      	b.n	800434c <_exit+0x16>

0800434e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e00a      	b.n	8004376 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004360:	e000      	b.n	8004364 <_read+0x16>
 8004362:	bf00      	nop
 8004364:	0001      	movs	r1, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	60ba      	str	r2, [r7, #8]
 800436c:	b2ca      	uxtb	r2, r1
 800436e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3301      	adds	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	dbf0      	blt.n	8004360 <_read+0x12>
  }

  return len;
 800437e:	687b      	ldr	r3, [r7, #4]
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b006      	add	sp, #24
 8004386:	bd80      	pop	{r7, pc}

08004388 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e009      	b.n	80043ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	60ba      	str	r2, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff fb40 	bl	8003a28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3301      	adds	r3, #1
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	dbf1      	blt.n	800439a <_write+0x12>
  }
  return len;
 80043b6:	687b      	ldr	r3, [r7, #4]
}
 80043b8:	0018      	movs	r0, r3
 80043ba:	46bd      	mov	sp, r7
 80043bc:	b006      	add	sp, #24
 80043be:	bd80      	pop	{r7, pc}

080043c0 <_close>:

int _close(int file)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043c8:	2301      	movs	r3, #1
 80043ca:	425b      	negs	r3, r3
}
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b002      	add	sp, #8
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2280      	movs	r2, #128	; 0x80
 80043e2:	0192      	lsls	r2, r2, #6
 80043e4:	605a      	str	r2, [r3, #4]
  return 0;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <_isatty>:

int _isatty(int file)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043f8:	2301      	movs	r3, #1
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b002      	add	sp, #8
 8004400:	bd80      	pop	{r7, pc}

08004402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800440e:	2300      	movs	r3, #0
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b004      	add	sp, #16
 8004416:	bd80      	pop	{r7, pc}

08004418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004420:	4a14      	ldr	r2, [pc, #80]	; (8004474 <_sbrk+0x5c>)
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <_sbrk+0x60>)
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800442c:	4b13      	ldr	r3, [pc, #76]	; (800447c <_sbrk+0x64>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <_sbrk+0x64>)
 8004436:	4a12      	ldr	r2, [pc, #72]	; (8004480 <_sbrk+0x68>)
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800443a:	4b10      	ldr	r3, [pc, #64]	; (800447c <_sbrk+0x64>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	18d3      	adds	r3, r2, r3
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d207      	bcs.n	8004458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004448:	f006 fc88 	bl	800ad5c <__errno>
 800444c:	0003      	movs	r3, r0
 800444e:	220c      	movs	r2, #12
 8004450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004452:	2301      	movs	r3, #1
 8004454:	425b      	negs	r3, r3
 8004456:	e009      	b.n	800446c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004458:	4b08      	ldr	r3, [pc, #32]	; (800447c <_sbrk+0x64>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <_sbrk+0x64>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	18d2      	adds	r2, r2, r3
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <_sbrk+0x64>)
 8004468:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	0018      	movs	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	b006      	add	sp, #24
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20005000 	.word	0x20005000
 8004478:	00000400 	.word	0x00000400
 800447c:	200002e0 	.word	0x200002e0
 8004480:	20000670 	.word	0x20000670

08004484 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
	...

08004490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004490:	4813      	ldr	r0, [pc, #76]	; (80044e0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004492:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004494:	f7ff fff6 	bl	8004484 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8004498:	4812      	ldr	r0, [pc, #72]	; (80044e4 <LoopForever+0x6>)
    LDR R1, [R0]
 800449a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 800449c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800449e:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <LoopForever+0xa>)
    CMP R1, R2
 80044a0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80044a2:	d105      	bne.n	80044b0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80044a4:	4811      	ldr	r0, [pc, #68]	; (80044ec <LoopForever+0xe>)
    LDR R1,=0x00000001
 80044a6:	4912      	ldr	r1, [pc, #72]	; (80044f0 <LoopForever+0x12>)
    STR R1, [R0]
 80044a8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80044aa:	4812      	ldr	r0, [pc, #72]	; (80044f4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80044ac:	4912      	ldr	r1, [pc, #72]	; (80044f8 <LoopForever+0x1a>)
    STR R1, [R0]
 80044ae:	6001      	str	r1, [r0, #0]

080044b0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044b0:	4812      	ldr	r0, [pc, #72]	; (80044fc <LoopForever+0x1e>)
  ldr r1, =_edata
 80044b2:	4913      	ldr	r1, [pc, #76]	; (8004500 <LoopForever+0x22>)
  ldr r2, =_sidata
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <LoopForever+0x26>)
  movs r3, #0
 80044b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044b8:	e002      	b.n	80044c0 <LoopCopyDataInit>

080044ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044be:	3304      	adds	r3, #4

080044c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044c4:	d3f9      	bcc.n	80044ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044c6:	4a10      	ldr	r2, [pc, #64]	; (8004508 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80044c8:	4c10      	ldr	r4, [pc, #64]	; (800450c <LoopForever+0x2e>)
  movs r3, #0
 80044ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044cc:	e001      	b.n	80044d2 <LoopFillZerobss>

080044ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044d0:	3204      	adds	r2, #4

080044d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044d4:	d3fb      	bcc.n	80044ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044d6:	f006 fc47 	bl	800ad68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044da:	f7ff f8eb 	bl	80036b4 <main>

080044de <LoopForever>:

LoopForever:
    b LoopForever
 80044de:	e7fe      	b.n	80044de <LoopForever>
   ldr   r0, =_estack
 80044e0:	20005000 	.word	0x20005000
    LDR R0,=0x00000004
 80044e4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80044e8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 80044ec:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 80044f0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80044f4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80044f8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80044fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004500:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004504:	0800f0a8 	.word	0x0800f0a8
  ldr r2, =_sbss
 8004508:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800450c:	20000670 	.word	0x20000670

08004510 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004510:	e7fe      	b.n	8004510 <ADC1_IRQHandler>
	...

08004514 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800451a:	1dfb      	adds	r3, r7, #7
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_Init+0x3c>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_Init+0x3c>)
 8004526:	2140      	movs	r1, #64	; 0x40
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800452c:	2003      	movs	r0, #3
 800452e:	f000 f811 	bl	8004554 <HAL_InitTick>
 8004532:	1e03      	subs	r3, r0, #0
 8004534:	d003      	beq.n	800453e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004536:	1dfb      	adds	r3, r7, #7
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	e001      	b.n	8004542 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800453e:	f7ff fdff 	bl	8004140 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004542:	1dfb      	adds	r3, r7, #7
 8004544:	781b      	ldrb	r3, [r3, #0]
}
 8004546:	0018      	movs	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	b002      	add	sp, #8
 800454c:	bd80      	pop	{r7, pc}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	40022000 	.word	0x40022000

08004554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <HAL_InitTick+0x5c>)
 800455e:	681c      	ldr	r4, [r3, #0]
 8004560:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <HAL_InitTick+0x60>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	0019      	movs	r1, r3
 8004566:	23fa      	movs	r3, #250	; 0xfa
 8004568:	0098      	lsls	r0, r3, #2
 800456a:	f7fb fde9 	bl	8000140 <__udivsi3>
 800456e:	0003      	movs	r3, r0
 8004570:	0019      	movs	r1, r3
 8004572:	0020      	movs	r0, r4
 8004574:	f7fb fde4 	bl	8000140 <__udivsi3>
 8004578:	0003      	movs	r3, r0
 800457a:	0018      	movs	r0, r3
 800457c:	f000 fd59 	bl	8005032 <HAL_SYSTICK_Config>
 8004580:	1e03      	subs	r3, r0, #0
 8004582:	d001      	beq.n	8004588 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e00f      	b.n	80045a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d80b      	bhi.n	80045a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	2301      	movs	r3, #1
 8004592:	425b      	negs	r3, r3
 8004594:	2200      	movs	r2, #0
 8004596:	0018      	movs	r0, r3
 8004598:	f000 fd36 	bl	8005008 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_InitTick+0x64>)
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b003      	add	sp, #12
 80045ae:	bd90      	pop	{r4, r7, pc}
 80045b0:	20000004 	.word	0x20000004
 80045b4:	2000000c 	.word	0x2000000c
 80045b8:	20000008 	.word	0x20000008

080045bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_IncTick+0x1c>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	001a      	movs	r2, r3
 80045c6:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_IncTick+0x20>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	18d2      	adds	r2, r2, r3
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_IncTick+0x20>)
 80045ce:	601a      	str	r2, [r3, #0]
}
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	2000000c 	.word	0x2000000c
 80045dc:	200002e4 	.word	0x200002e4

080045e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  return uwTick;
 80045e4:	4b02      	ldr	r3, [pc, #8]	; (80045f0 <HAL_GetTick+0x10>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	0018      	movs	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	200002e4 	.word	0x200002e4

080045f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045fc:	f7ff fff0 	bl	80045e0 <HAL_GetTick>
 8004600:	0003      	movs	r3, r0
 8004602:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3301      	adds	r3, #1
 800460c:	d005      	beq.n	800461a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800460e:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <HAL_Delay+0x44>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	001a      	movs	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	189b      	adds	r3, r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	f7ff ffe0 	bl	80045e0 <HAL_GetTick>
 8004620:	0002      	movs	r2, r0
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	429a      	cmp	r2, r3
 800462a:	d8f7      	bhi.n	800461c <HAL_Delay+0x28>
  {
  }
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	b004      	add	sp, #16
 8004634:	bd80      	pop	{r7, pc}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	2000000c 	.word	0x2000000c

0800463c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e159      	b.n	8004902 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2250      	movs	r2, #80	; 0x50
 8004660:	2100      	movs	r1, #0
 8004662:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	0018      	movs	r0, r3
 8004668:	f7ff fd7e 	bl	8004168 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	2210      	movs	r2, #16
 8004672:	4013      	ands	r3, r2
 8004674:	2b10      	cmp	r3, #16
 8004676:	d005      	beq.n	8004684 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2204      	movs	r2, #4
 8004680:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004682:	d00b      	beq.n	800469c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	2210      	movs	r2, #16
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2250      	movs	r2, #80	; 0x50
 8004694:	2100      	movs	r1, #0
 8004696:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e132      	b.n	8004902 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a0:	4a9a      	ldr	r2, [pc, #616]	; (800490c <HAL_ADC_Init+0x2d0>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	2202      	movs	r2, #2
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2203      	movs	r2, #3
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d108      	bne.n	80046cc <HAL_ADC_Init+0x90>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2201      	movs	r2, #1
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_Init+0x90>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_ADC_Init+0x92>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d149      	bne.n	8004766 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	23c0      	movs	r3, #192	; 0xc0
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	429a      	cmp	r2, r3
 80046dc:	d00b      	beq.n	80046f6 <HAL_ADC_Init+0xba>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	05db      	lsls	r3, r3, #23
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d005      	beq.n	80046f6 <HAL_ADC_Init+0xba>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	061b      	lsls	r3, r3, #24
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d111      	bne.n	800471a <HAL_ADC_Init+0xde>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	0092      	lsls	r2, r2, #2
 8004702:	0892      	lsrs	r2, r2, #2
 8004704:	611a      	str	r2, [r3, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6919      	ldr	r1, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	611a      	str	r2, [r3, #16]
 8004718:	e014      	b.n	8004744 <HAL_ADC_Init+0x108>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0092      	lsls	r2, r2, #2
 8004726:	0892      	lsrs	r2, r2, #2
 8004728:	611a      	str	r2, [r3, #16]
 800472a:	4b79      	ldr	r3, [pc, #484]	; (8004910 <HAL_ADC_Init+0x2d4>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b78      	ldr	r3, [pc, #480]	; (8004910 <HAL_ADC_Init+0x2d4>)
 8004730:	4978      	ldr	r1, [pc, #480]	; (8004914 <HAL_ADC_Init+0x2d8>)
 8004732:	400a      	ands	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	4b76      	ldr	r3, [pc, #472]	; (8004910 <HAL_ADC_Init+0x2d4>)
 8004738:	6819      	ldr	r1, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	4b74      	ldr	r3, [pc, #464]	; (8004910 <HAL_ADC_Init+0x2d4>)
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2118      	movs	r1, #24
 8004750:	438a      	bics	r2, r1
 8004752:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68d9      	ldr	r1, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004766:	4b6a      	ldr	r3, [pc, #424]	; (8004910 <HAL_ADC_Init+0x2d4>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b69      	ldr	r3, [pc, #420]	; (8004910 <HAL_ADC_Init+0x2d4>)
 800476c:	496a      	ldr	r1, [pc, #424]	; (8004918 <HAL_ADC_Init+0x2dc>)
 800476e:	400a      	ands	r2, r1
 8004770:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8004772:	4b67      	ldr	r3, [pc, #412]	; (8004910 <HAL_ADC_Init+0x2d4>)
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	065a      	lsls	r2, r3, #25
 800477c:	4b64      	ldr	r3, [pc, #400]	; (8004910 <HAL_ADC_Init+0x2d4>)
 800477e:	430a      	orrs	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	055b      	lsls	r3, r3, #21
 800478c:	4013      	ands	r3, r2
 800478e:	d108      	bne.n	80047a2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2180      	movs	r1, #128	; 0x80
 800479c:	0549      	lsls	r1, r1, #21
 800479e:	430a      	orrs	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	495b      	ldr	r1, [pc, #364]	; (800491c <HAL_ADC_Init+0x2e0>)
 80047ae:	400a      	ands	r2, r1
 80047b0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68d9      	ldr	r1, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d101      	bne.n	80047c8 <HAL_ADC_Init+0x18c>
 80047c4:	2304      	movs	r3, #4
 80047c6:	e000      	b.n	80047ca <HAL_ADC_Init+0x18e>
 80047c8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80047ca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2020      	movs	r0, #32
 80047d0:	5c1b      	ldrb	r3, [r3, r0]
 80047d2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80047d4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	202c      	movs	r0, #44	; 0x2c
 80047da:	5c1b      	ldrb	r3, [r3, r0]
 80047dc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80047de:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80047e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80047ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80047f4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004802:	23c2      	movs	r3, #194	; 0xc2
 8004804:	33ff      	adds	r3, #255	; 0xff
 8004806:	429a      	cmp	r2, r3
 8004808:	d00b      	beq.n	8004822 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68d9      	ldr	r1, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2221      	movs	r2, #33	; 0x21
 8004826:	5c9b      	ldrb	r3, [r3, r2]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d11a      	bne.n	8004862 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2220      	movs	r2, #32
 8004830:	5c9b      	ldrb	r3, [r3, r2]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d109      	bne.n	800484a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	0249      	lsls	r1, r1, #9
 8004844:	430a      	orrs	r2, r1
 8004846:	60da      	str	r2, [r3, #12]
 8004848:	e00b      	b.n	8004862 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	2220      	movs	r2, #32
 8004850:	431a      	orrs	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485a:	2201      	movs	r2, #1
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d11f      	bne.n	80048aa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	492a      	ldr	r1, [pc, #168]	; (8004920 <HAL_ADC_Init+0x2e4>)
 8004876:	400a      	ands	r2, r1
 8004878:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6919      	ldr	r1, [r3, #16]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004888:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800488e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691a      	ldr	r2, [r3, #16]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2101      	movs	r1, #1
 80048a4:	430a      	orrs	r2, r1
 80048a6:	611a      	str	r2, [r3, #16]
 80048a8:	e00e      	b.n	80048c8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2201      	movs	r2, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d107      	bne.n	80048c8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2101      	movs	r1, #1
 80048c4:	438a      	bics	r2, r1
 80048c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2107      	movs	r1, #7
 80048d4:	438a      	bics	r2, r1
 80048d6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6959      	ldr	r1, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	2203      	movs	r2, #3
 80048f6:	4393      	bics	r3, r2
 80048f8:	2201      	movs	r2, #1
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	0018      	movs	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	b002      	add	sp, #8
 8004908:	bd80      	pop	{r7, pc}
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	fffffefd 	.word	0xfffffefd
 8004910:	40012708 	.word	0x40012708
 8004914:	ffc3ffff 	.word	0xffc3ffff
 8004918:	fdffffff 	.word	0xfdffffff
 800491c:	fffe0219 	.word	0xfffe0219
 8004920:	fffffc03 	.word	0xfffffc03

08004924 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800492c:	230f      	movs	r3, #15
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2204      	movs	r2, #4
 800493c:	4013      	ands	r3, r2
 800493e:	d138      	bne.n	80049b2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2250      	movs	r2, #80	; 0x50
 8004944:	5c9b      	ldrb	r3, [r3, r2]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_ADC_Start+0x2a>
 800494a:	2302      	movs	r3, #2
 800494c:	e038      	b.n	80049c0 <HAL_ADC_Start+0x9c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2250      	movs	r2, #80	; 0x50
 8004952:	2101      	movs	r1, #1
 8004954:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d007      	beq.n	800496e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800495e:	230f      	movs	r3, #15
 8004960:	18fc      	adds	r4, r7, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0018      	movs	r0, r3
 8004966:	f000 f981 	bl	8004c6c <ADC_Enable>
 800496a:	0003      	movs	r3, r0
 800496c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800496e:	230f      	movs	r3, #15
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d120      	bne.n	80049ba <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <HAL_ADC_Start+0xa4>)
 800497e:	4013      	ands	r3, r2
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	0052      	lsls	r2, r2, #1
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2250      	movs	r2, #80	; 0x50
 8004994:	2100      	movs	r1, #0
 8004996:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	221c      	movs	r2, #28
 800499e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2104      	movs	r1, #4
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]
 80049b0:	e003      	b.n	80049ba <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049b2:	230f      	movs	r3, #15
 80049b4:	18fb      	adds	r3, r7, r3
 80049b6:	2202      	movs	r2, #2
 80049b8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80049ba:	230f      	movs	r3, #15
 80049bc:	18fb      	adds	r3, r7, r3
 80049be:	781b      	ldrb	r3, [r3, #0]
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b005      	add	sp, #20
 80049c6:	bd90      	pop	{r4, r7, pc}
 80049c8:	fffff0fe 	.word	0xfffff0fe

080049cc <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80049cc:	b5b0      	push	{r4, r5, r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049d4:	230f      	movs	r3, #15
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2250      	movs	r2, #80	; 0x50
 80049e0:	5c9b      	ldrb	r3, [r3, r2]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_ADC_Stop+0x1e>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e029      	b.n	8004a3e <HAL_ADC_Stop+0x72>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2250      	movs	r2, #80	; 0x50
 80049ee:	2101      	movs	r1, #1
 80049f0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80049f2:	250f      	movs	r5, #15
 80049f4:	197c      	adds	r4, r7, r5
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	0018      	movs	r0, r3
 80049fa:	f000 fa06 	bl	8004e0a <ADC_ConversionStop>
 80049fe:	0003      	movs	r3, r0
 8004a00:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004a02:	197b      	adds	r3, r7, r5
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d112      	bne.n	8004a30 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004a0a:	197c      	adds	r4, r7, r5
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 f994 	bl	8004d3c <ADC_Disable>
 8004a14:	0003      	movs	r3, r0
 8004a16:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004a18:	197b      	adds	r3, r7, r5
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d107      	bne.n	8004a30 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <HAL_ADC_Stop+0x7c>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	2201      	movs	r2, #1
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2250      	movs	r2, #80	; 0x50
 8004a34:	2100      	movs	r1, #0
 8004a36:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8004a38:	230f      	movs	r3, #15
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	781b      	ldrb	r3, [r3, #0]
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b004      	add	sp, #16
 8004a44:	bdb0      	pop	{r4, r5, r7, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	fffffefe 	.word	0xfffffefe

08004a4c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d102      	bne.n	8004a6c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004a66:	2308      	movs	r3, #8
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e014      	b.n	8004a96 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2201      	movs	r2, #1
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d10b      	bne.n	8004a92 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	2220      	movs	r2, #32
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2250      	movs	r2, #80	; 0x50
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e072      	b.n	8004b78 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004a92:	230c      	movs	r3, #12
 8004a94:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004a96:	f7ff fda3 	bl	80045e0 <HAL_GetTick>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004a9e:	e01f      	b.n	8004ae0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	d01c      	beq.n	8004ae0 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d007      	beq.n	8004abc <HAL_ADC_PollForConversion+0x70>
 8004aac:	f7ff fd98 	bl	80045e0 <HAL_GetTick>
 8004ab0:	0002      	movs	r2, r0
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d211      	bcs.n	8004ae0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004acc:	2204      	movs	r2, #4
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2250      	movs	r2, #80	; 0x50
 8004ad8:	2100      	movs	r1, #0
 8004ada:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e04b      	b.n	8004b78 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d0d9      	beq.n	8004aa0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	2280      	movs	r2, #128	; 0x80
 8004af2:	0092      	lsls	r2, r2, #2
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	23c0      	movs	r3, #192	; 0xc0
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	4013      	ands	r3, r2
 8004b06:	d12e      	bne.n	8004b66 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d129      	bne.n	8004b66 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2208      	movs	r2, #8
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	d122      	bne.n	8004b66 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2204      	movs	r2, #4
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d110      	bne.n	8004b4e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	210c      	movs	r1, #12
 8004b38:	438a      	bics	r2, r1
 8004b3a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	4a0f      	ldr	r2, [pc, #60]	; (8004b80 <HAL_ADC_PollForConversion+0x134>)
 8004b42:	4013      	ands	r3, r2
 8004b44:	2201      	movs	r2, #1
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	655a      	str	r2, [r3, #84]	; 0x54
 8004b4c:	e00b      	b.n	8004b66 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b52:	2220      	movs	r2, #32
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	2201      	movs	r2, #1
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d103      	bne.n	8004b76 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	220c      	movs	r2, #12
 8004b74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	0018      	movs	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	b004      	add	sp, #16
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	fffffefe 	.word	0xfffffefe

08004b84 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004b92:	0018      	movs	r0, r3
 8004b94:	46bd      	mov	sp, r7
 8004b96:	b002      	add	sp, #8
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2250      	movs	r2, #80	; 0x50
 8004baa:	5c9b      	ldrb	r3, [r3, r2]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x18>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e050      	b.n	8004c56 <HAL_ADC_ConfigChannel+0xba>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2250      	movs	r2, #80	; 0x50
 8004bb8:	2101      	movs	r1, #1
 8004bba:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d00b      	beq.n	8004be0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	2220      	movs	r2, #32
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2250      	movs	r2, #80	; 0x50
 8004bd8:	2100      	movs	r1, #0
 8004bda:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e03a      	b.n	8004c56 <HAL_ADC_ConfigChannel+0xba>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4a1e      	ldr	r2, [pc, #120]	; (8004c60 <HAL_ADC_ConfigChannel+0xc4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <HAL_ADC_ConfigChannel+0x80>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	035b      	lsls	r3, r3, #13
 8004bf6:	0b5a      	lsrs	r2, r3, #13
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	629a      	str	r2, [r3, #40]	; 0x28
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	029b      	lsls	r3, r3, #10
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d01f      	beq.n	8004c4c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8004c0c:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <HAL_ADC_ConfigChannel+0xc8>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <HAL_ADC_ConfigChannel+0xc8>)
 8004c12:	2180      	movs	r1, #128	; 0x80
 8004c14:	03c9      	lsls	r1, r1, #15
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e017      	b.n	8004c4c <HAL_ADC_ConfigChannel+0xb0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	035b      	lsls	r3, r3, #13
 8004c28:	0b5b      	lsrs	r3, r3, #13
 8004c2a:	43d9      	mvns	r1, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	400a      	ands	r2, r1
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28
      ADC->CCR &= ~ADC_CCR_TSEN;
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	029b      	lsls	r3, r3, #10
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d005      	beq.n	8004c4c <HAL_ADC_ConfigChannel+0xb0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8004c40:	4b08      	ldr	r3, [pc, #32]	; (8004c64 <HAL_ADC_ConfigChannel+0xc8>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <HAL_ADC_ConfigChannel+0xc8>)
 8004c46:	4908      	ldr	r1, [pc, #32]	; (8004c68 <HAL_ADC_ConfigChannel+0xcc>)
 8004c48:	400a      	ands	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2250      	movs	r2, #80	; 0x50
 8004c50:	2100      	movs	r1, #0
 8004c52:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	0018      	movs	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b002      	add	sp, #8
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	00001001 	.word	0x00001001
 8004c64:	40012708 	.word	0x40012708
 8004c68:	ffbfffff 	.word	0xffbfffff

08004c6c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	4013      	ands	r3, r2
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d108      	bne.n	8004c98 <ADC_Enable+0x2c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d101      	bne.n	8004c98 <ADC_Enable+0x2c>
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <ADC_Enable+0x2e>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d146      	bne.n	8004d2c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4a24      	ldr	r2, [pc, #144]	; (8004d38 <ADC_Enable+0xcc>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	d00d      	beq.n	8004cc6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	2210      	movs	r2, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cba:	2201      	movs	r2, #1
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e033      	b.n	8004d2e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	f000 f8e4 	bl	8004ea4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cdc:	f7ff fc80 	bl	80045e0 <HAL_GetTick>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ce4:	e01b      	b.n	8004d1e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ce6:	f7ff fc7b 	bl	80045e0 <HAL_GetTick>
 8004cea:	0002      	movs	r2, r0
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b0a      	cmp	r3, #10
 8004cf2:	d914      	bls.n	8004d1e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d00d      	beq.n	8004d1e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	2210      	movs	r2, #16
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d12:	2201      	movs	r2, #1
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e007      	b.n	8004d2e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d1dc      	bne.n	8004ce6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b004      	add	sp, #16
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	80000017 	.word	0x80000017

08004d3c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2203      	movs	r2, #3
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d108      	bne.n	8004d68 <ADC_Disable+0x2c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <ADC_Disable+0x2c>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <ADC_Disable+0x2e>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d048      	beq.n	8004e00 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2205      	movs	r2, #5
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d110      	bne.n	8004d9e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2102      	movs	r1, #2
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2203      	movs	r2, #3
 8004d92:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d94:	f7ff fc24 	bl	80045e0 <HAL_GetTick>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004d9c:	e029      	b.n	8004df2 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	2210      	movs	r2, #16
 8004da4:	431a      	orrs	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	2201      	movs	r2, #1
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e023      	b.n	8004e02 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004dba:	f7ff fc11 	bl	80045e0 <HAL_GetTick>
 8004dbe:	0002      	movs	r2, r0
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b0a      	cmp	r3, #10
 8004dc6:	d914      	bls.n	8004df2 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d10d      	bne.n	8004df2 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	2210      	movs	r2, #16
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de6:	2201      	movs	r2, #1
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e007      	b.n	8004e02 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d0dc      	beq.n	8004dba <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b004      	add	sp, #16
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d03a      	beq.n	8004e98 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2204      	movs	r2, #4
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d10d      	bne.n	8004e4c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2202      	movs	r2, #2
 8004e38:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8004e3a:	d107      	bne.n	8004e4c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2110      	movs	r1, #16
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e4c:	f7ff fbc8 	bl	80045e0 <HAL_GetTick>
 8004e50:	0003      	movs	r3, r0
 8004e52:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004e54:	e01a      	b.n	8004e8c <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004e56:	f7ff fbc3 	bl	80045e0 <HAL_GetTick>
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b0a      	cmp	r3, #10
 8004e62:	d913      	bls.n	8004e8c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d00d      	beq.n	8004e8c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e74:	2210      	movs	r2, #16
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	2201      	movs	r2, #1
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e006      	b.n	8004e9a <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2204      	movs	r2, #4
 8004e94:	4013      	ands	r3, r2
 8004e96:	d1de      	bne.n	8004e56 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b004      	add	sp, #16
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <ADC_DelayMicroSecond+0x38>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	490b      	ldr	r1, [pc, #44]	; (8004ee0 <ADC_DelayMicroSecond+0x3c>)
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f7fb f944 	bl	8000140 <__udivsi3>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	001a      	movs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4353      	muls	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8004ec2:	e002      	b.n	8004eca <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f9      	bne.n	8004ec4 <ADC_DelayMicroSecond+0x20>
  }
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	20000004 	.word	0x20000004
 8004ee0:	000f4240 	.word	0x000f4240

08004ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	0002      	movs	r2, r0
 8004eec:	6039      	str	r1, [r7, #0]
 8004eee:	1dfb      	adds	r3, r7, #7
 8004ef0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ef2:	1dfb      	adds	r3, r7, #7
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef8:	d828      	bhi.n	8004f4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004efa:	4a2f      	ldr	r2, [pc, #188]	; (8004fb8 <__NVIC_SetPriority+0xd4>)
 8004efc:	1dfb      	adds	r3, r7, #7
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	089b      	lsrs	r3, r3, #2
 8004f04:	33c0      	adds	r3, #192	; 0xc0
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	589b      	ldr	r3, [r3, r2]
 8004f0a:	1dfa      	adds	r2, r7, #7
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	0011      	movs	r1, r2
 8004f10:	2203      	movs	r2, #3
 8004f12:	400a      	ands	r2, r1
 8004f14:	00d2      	lsls	r2, r2, #3
 8004f16:	21ff      	movs	r1, #255	; 0xff
 8004f18:	4091      	lsls	r1, r2
 8004f1a:	000a      	movs	r2, r1
 8004f1c:	43d2      	mvns	r2, r2
 8004f1e:	401a      	ands	r2, r3
 8004f20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	22ff      	movs	r2, #255	; 0xff
 8004f28:	401a      	ands	r2, r3
 8004f2a:	1dfb      	adds	r3, r7, #7
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	2303      	movs	r3, #3
 8004f32:	4003      	ands	r3, r0
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f38:	481f      	ldr	r0, [pc, #124]	; (8004fb8 <__NVIC_SetPriority+0xd4>)
 8004f3a:	1dfb      	adds	r3, r7, #7
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	b25b      	sxtb	r3, r3
 8004f40:	089b      	lsrs	r3, r3, #2
 8004f42:	430a      	orrs	r2, r1
 8004f44:	33c0      	adds	r3, #192	; 0xc0
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004f4a:	e031      	b.n	8004fb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <__NVIC_SetPriority+0xd8>)
 8004f4e:	1dfb      	adds	r3, r7, #7
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	0019      	movs	r1, r3
 8004f54:	230f      	movs	r3, #15
 8004f56:	400b      	ands	r3, r1
 8004f58:	3b08      	subs	r3, #8
 8004f5a:	089b      	lsrs	r3, r3, #2
 8004f5c:	3306      	adds	r3, #6
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	18d3      	adds	r3, r2, r3
 8004f62:	3304      	adds	r3, #4
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	1dfa      	adds	r2, r7, #7
 8004f68:	7812      	ldrb	r2, [r2, #0]
 8004f6a:	0011      	movs	r1, r2
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	400a      	ands	r2, r1
 8004f70:	00d2      	lsls	r2, r2, #3
 8004f72:	21ff      	movs	r1, #255	; 0xff
 8004f74:	4091      	lsls	r1, r2
 8004f76:	000a      	movs	r2, r1
 8004f78:	43d2      	mvns	r2, r2
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	019b      	lsls	r3, r3, #6
 8004f82:	22ff      	movs	r2, #255	; 0xff
 8004f84:	401a      	ands	r2, r3
 8004f86:	1dfb      	adds	r3, r7, #7
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	4003      	ands	r3, r0
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f94:	4809      	ldr	r0, [pc, #36]	; (8004fbc <__NVIC_SetPriority+0xd8>)
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	001c      	movs	r4, r3
 8004f9c:	230f      	movs	r3, #15
 8004f9e:	4023      	ands	r3, r4
 8004fa0:	3b08      	subs	r3, #8
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	3306      	adds	r3, #6
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	18c3      	adds	r3, r0, r3
 8004fac:	3304      	adds	r3, #4
 8004fae:	601a      	str	r2, [r3, #0]
}
 8004fb0:	46c0      	nop			; (mov r8, r8)
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b003      	add	sp, #12
 8004fb6:	bd90      	pop	{r4, r7, pc}
 8004fb8:	e000e100 	.word	0xe000e100
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	1e5a      	subs	r2, r3, #1
 8004fcc:	2380      	movs	r3, #128	; 0x80
 8004fce:	045b      	lsls	r3, r3, #17
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d301      	bcc.n	8004fd8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e010      	b.n	8004ffa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <SysTick_Config+0x44>)
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	3a01      	subs	r2, #1
 8004fde:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	425b      	negs	r3, r3
 8004fe4:	2103      	movs	r1, #3
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7ff ff7c 	bl	8004ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <SysTick_Config+0x44>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ff2:	4b04      	ldr	r3, [pc, #16]	; (8005004 <SysTick_Config+0x44>)
 8004ff4:	2207      	movs	r2, #7
 8004ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b002      	add	sp, #8
 8005000:	bd80      	pop	{r7, pc}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	e000e010 	.word	0xe000e010

08005008 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	210f      	movs	r1, #15
 8005014:	187b      	adds	r3, r7, r1
 8005016:	1c02      	adds	r2, r0, #0
 8005018:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	187b      	adds	r3, r7, r1
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	b25b      	sxtb	r3, r3
 8005022:	0011      	movs	r1, r2
 8005024:	0018      	movs	r0, r3
 8005026:	f7ff ff5d 	bl	8004ee4 <__NVIC_SetPriority>
}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	46bd      	mov	sp, r7
 800502e:	b004      	add	sp, #16
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f7ff ffbf 	bl	8004fc0 <SysTick_Config>
 8005042:	0003      	movs	r3, r0
}
 8005044:	0018      	movs	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	b002      	add	sp, #8
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005062:	e155      	b.n	8005310 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2101      	movs	r1, #1
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4091      	lsls	r1, r2
 800506e:	000a      	movs	r2, r1
 8005070:	4013      	ands	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d100      	bne.n	800507c <HAL_GPIO_Init+0x30>
 800507a:	e146      	b.n	800530a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2203      	movs	r2, #3
 8005082:	4013      	ands	r3, r2
 8005084:	2b01      	cmp	r3, #1
 8005086:	d005      	beq.n	8005094 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2203      	movs	r2, #3
 800508e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005090:	2b02      	cmp	r3, #2
 8005092:	d130      	bne.n	80050f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	2203      	movs	r2, #3
 80050a0:	409a      	lsls	r2, r3
 80050a2:	0013      	movs	r3, r2
 80050a4:	43da      	mvns	r2, r3
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4013      	ands	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	409a      	lsls	r2, r3
 80050b6:	0013      	movs	r3, r2
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050ca:	2201      	movs	r2, #1
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	409a      	lsls	r2, r3
 80050d0:	0013      	movs	r3, r2
 80050d2:	43da      	mvns	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4013      	ands	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	091b      	lsrs	r3, r3, #4
 80050e0:	2201      	movs	r2, #1
 80050e2:	401a      	ands	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	409a      	lsls	r2, r3
 80050e8:	0013      	movs	r3, r2
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2203      	movs	r2, #3
 80050fc:	4013      	ands	r3, r2
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d017      	beq.n	8005132 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	2203      	movs	r2, #3
 800510e:	409a      	lsls	r2, r3
 8005110:	0013      	movs	r3, r2
 8005112:	43da      	mvns	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	4013      	ands	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	409a      	lsls	r2, r3
 8005124:	0013      	movs	r3, r2
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2203      	movs	r2, #3
 8005138:	4013      	ands	r3, r2
 800513a:	2b02      	cmp	r3, #2
 800513c:	d123      	bne.n	8005186 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	08da      	lsrs	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3208      	adds	r2, #8
 8005146:	0092      	lsls	r2, r2, #2
 8005148:	58d3      	ldr	r3, [r2, r3]
 800514a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2207      	movs	r2, #7
 8005150:	4013      	ands	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	220f      	movs	r2, #15
 8005156:	409a      	lsls	r2, r3
 8005158:	0013      	movs	r3, r2
 800515a:	43da      	mvns	r2, r3
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	4013      	ands	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2107      	movs	r1, #7
 800516a:	400b      	ands	r3, r1
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	409a      	lsls	r2, r3
 8005170:	0013      	movs	r3, r2
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	08da      	lsrs	r2, r3, #3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3208      	adds	r2, #8
 8005180:	0092      	lsls	r2, r2, #2
 8005182:	6939      	ldr	r1, [r7, #16]
 8005184:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	2203      	movs	r2, #3
 8005192:	409a      	lsls	r2, r3
 8005194:	0013      	movs	r3, r2
 8005196:	43da      	mvns	r2, r3
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4013      	ands	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2203      	movs	r2, #3
 80051a4:	401a      	ands	r2, r3
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	409a      	lsls	r2, r3
 80051ac:	0013      	movs	r3, r2
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	23c0      	movs	r3, #192	; 0xc0
 80051c0:	029b      	lsls	r3, r3, #10
 80051c2:	4013      	ands	r3, r2
 80051c4:	d100      	bne.n	80051c8 <HAL_GPIO_Init+0x17c>
 80051c6:	e0a0      	b.n	800530a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051c8:	4b57      	ldr	r3, [pc, #348]	; (8005328 <HAL_GPIO_Init+0x2dc>)
 80051ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051cc:	4b56      	ldr	r3, [pc, #344]	; (8005328 <HAL_GPIO_Init+0x2dc>)
 80051ce:	2101      	movs	r1, #1
 80051d0:	430a      	orrs	r2, r1
 80051d2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80051d4:	4a55      	ldr	r2, [pc, #340]	; (800532c <HAL_GPIO_Init+0x2e0>)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	3302      	adds	r3, #2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	589b      	ldr	r3, [r3, r2]
 80051e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2203      	movs	r2, #3
 80051e6:	4013      	ands	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	220f      	movs	r2, #15
 80051ec:	409a      	lsls	r2, r3
 80051ee:	0013      	movs	r3, r2
 80051f0:	43da      	mvns	r2, r3
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4013      	ands	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	23a0      	movs	r3, #160	; 0xa0
 80051fc:	05db      	lsls	r3, r3, #23
 80051fe:	429a      	cmp	r2, r3
 8005200:	d01f      	beq.n	8005242 <HAL_GPIO_Init+0x1f6>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a4a      	ldr	r2, [pc, #296]	; (8005330 <HAL_GPIO_Init+0x2e4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d019      	beq.n	800523e <HAL_GPIO_Init+0x1f2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a49      	ldr	r2, [pc, #292]	; (8005334 <HAL_GPIO_Init+0x2e8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d013      	beq.n	800523a <HAL_GPIO_Init+0x1ee>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a48      	ldr	r2, [pc, #288]	; (8005338 <HAL_GPIO_Init+0x2ec>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00d      	beq.n	8005236 <HAL_GPIO_Init+0x1ea>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a47      	ldr	r2, [pc, #284]	; (800533c <HAL_GPIO_Init+0x2f0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <HAL_GPIO_Init+0x1e6>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a46      	ldr	r2, [pc, #280]	; (8005340 <HAL_GPIO_Init+0x2f4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d101      	bne.n	800522e <HAL_GPIO_Init+0x1e2>
 800522a:	2305      	movs	r3, #5
 800522c:	e00a      	b.n	8005244 <HAL_GPIO_Init+0x1f8>
 800522e:	2306      	movs	r3, #6
 8005230:	e008      	b.n	8005244 <HAL_GPIO_Init+0x1f8>
 8005232:	2304      	movs	r3, #4
 8005234:	e006      	b.n	8005244 <HAL_GPIO_Init+0x1f8>
 8005236:	2303      	movs	r3, #3
 8005238:	e004      	b.n	8005244 <HAL_GPIO_Init+0x1f8>
 800523a:	2302      	movs	r3, #2
 800523c:	e002      	b.n	8005244 <HAL_GPIO_Init+0x1f8>
 800523e:	2301      	movs	r3, #1
 8005240:	e000      	b.n	8005244 <HAL_GPIO_Init+0x1f8>
 8005242:	2300      	movs	r3, #0
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	2103      	movs	r1, #3
 8005248:	400a      	ands	r2, r1
 800524a:	0092      	lsls	r2, r2, #2
 800524c:	4093      	lsls	r3, r2
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005254:	4935      	ldr	r1, [pc, #212]	; (800532c <HAL_GPIO_Init+0x2e0>)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	089b      	lsrs	r3, r3, #2
 800525a:	3302      	adds	r3, #2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005262:	4b38      	ldr	r3, [pc, #224]	; (8005344 <HAL_GPIO_Init+0x2f8>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	43da      	mvns	r2, r3
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4013      	ands	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	035b      	lsls	r3, r3, #13
 800527a:	4013      	ands	r3, r2
 800527c:	d003      	beq.n	8005286 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005286:	4b2f      	ldr	r3, [pc, #188]	; (8005344 <HAL_GPIO_Init+0x2f8>)
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800528c:	4b2d      	ldr	r3, [pc, #180]	; (8005344 <HAL_GPIO_Init+0x2f8>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	43da      	mvns	r2, r3
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4013      	ands	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	039b      	lsls	r3, r3, #14
 80052a4:	4013      	ands	r3, r2
 80052a6:	d003      	beq.n	80052b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80052b0:	4b24      	ldr	r3, [pc, #144]	; (8005344 <HAL_GPIO_Init+0x2f8>)
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80052b6:	4b23      	ldr	r3, [pc, #140]	; (8005344 <HAL_GPIO_Init+0x2f8>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	43da      	mvns	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	2380      	movs	r3, #128	; 0x80
 80052cc:	029b      	lsls	r3, r3, #10
 80052ce:	4013      	ands	r3, r2
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80052da:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <HAL_GPIO_Init+0x2f8>)
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052e0:	4b18      	ldr	r3, [pc, #96]	; (8005344 <HAL_GPIO_Init+0x2f8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	43da      	mvns	r2, r3
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4013      	ands	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	025b      	lsls	r3, r3, #9
 80052f8:	4013      	ands	r3, r2
 80052fa:	d003      	beq.n	8005304 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005304:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <HAL_GPIO_Init+0x2f8>)
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3301      	adds	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	40da      	lsrs	r2, r3
 8005318:	1e13      	subs	r3, r2, #0
 800531a:	d000      	beq.n	800531e <HAL_GPIO_Init+0x2d2>
 800531c:	e6a2      	b.n	8005064 <HAL_GPIO_Init+0x18>
  }
}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	46c0      	nop			; (mov r8, r8)
 8005322:	46bd      	mov	sp, r7
 8005324:	b006      	add	sp, #24
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40021000 	.word	0x40021000
 800532c:	40010000 	.word	0x40010000
 8005330:	50000400 	.word	0x50000400
 8005334:	50000800 	.word	0x50000800
 8005338:	50000c00 	.word	0x50000c00
 800533c:	50001000 	.word	0x50001000
 8005340:	50001c00 	.word	0x50001c00
 8005344:	40010400 	.word	0x40010400

08005348 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	000a      	movs	r2, r1
 8005352:	1cbb      	adds	r3, r7, #2
 8005354:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	1cba      	adds	r2, r7, #2
 800535c:	8812      	ldrh	r2, [r2, #0]
 800535e:	4013      	ands	r3, r2
 8005360:	d004      	beq.n	800536c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005362:	230f      	movs	r3, #15
 8005364:	18fb      	adds	r3, r7, r3
 8005366:	2201      	movs	r2, #1
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	e003      	b.n	8005374 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800536c:	230f      	movs	r3, #15
 800536e:	18fb      	adds	r3, r7, r3
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005374:	230f      	movs	r3, #15
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	781b      	ldrb	r3, [r3, #0]
}
 800537a:	0018      	movs	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	b004      	add	sp, #16
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b082      	sub	sp, #8
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	0008      	movs	r0, r1
 800538c:	0011      	movs	r1, r2
 800538e:	1cbb      	adds	r3, r7, #2
 8005390:	1c02      	adds	r2, r0, #0
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	1c7b      	adds	r3, r7, #1
 8005396:	1c0a      	adds	r2, r1, #0
 8005398:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800539a:	1c7b      	adds	r3, r7, #1
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d004      	beq.n	80053ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053a2:	1cbb      	adds	r3, r7, #2
 80053a4:	881a      	ldrh	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80053aa:	e003      	b.n	80053b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80053ac:	1cbb      	adds	r3, r7, #2
 80053ae:	881a      	ldrh	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053b4:	46c0      	nop			; (mov r8, r8)
 80053b6:	46bd      	mov	sp, r7
 80053b8:	b002      	add	sp, #8
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053bc:	b5b0      	push	{r4, r5, r7, lr}
 80053be:	b08a      	sub	sp, #40	; 0x28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d102      	bne.n	80053d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f000 fb6c 	bl	8005aa8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d0:	4bc8      	ldr	r3, [pc, #800]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	220c      	movs	r2, #12
 80053d6:	4013      	ands	r3, r2
 80053d8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053da:	4bc6      	ldr	r3, [pc, #792]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	025b      	lsls	r3, r3, #9
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2201      	movs	r2, #1
 80053ec:	4013      	ands	r3, r2
 80053ee:	d100      	bne.n	80053f2 <HAL_RCC_OscConfig+0x36>
 80053f0:	e07d      	b.n	80054ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d007      	beq.n	8005408 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d112      	bne.n	8005424 <HAL_RCC_OscConfig+0x68>
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	025b      	lsls	r3, r3, #9
 8005404:	429a      	cmp	r2, r3
 8005406:	d10d      	bne.n	8005424 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005408:	4bba      	ldr	r3, [pc, #744]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	2380      	movs	r3, #128	; 0x80
 800540e:	029b      	lsls	r3, r3, #10
 8005410:	4013      	ands	r3, r2
 8005412:	d100      	bne.n	8005416 <HAL_RCC_OscConfig+0x5a>
 8005414:	e06a      	b.n	80054ec <HAL_RCC_OscConfig+0x130>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d166      	bne.n	80054ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	f000 fb42 	bl	8005aa8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	025b      	lsls	r3, r3, #9
 800542c:	429a      	cmp	r2, r3
 800542e:	d107      	bne.n	8005440 <HAL_RCC_OscConfig+0x84>
 8005430:	4bb0      	ldr	r3, [pc, #704]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4baf      	ldr	r3, [pc, #700]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005436:	2180      	movs	r1, #128	; 0x80
 8005438:	0249      	lsls	r1, r1, #9
 800543a:	430a      	orrs	r2, r1
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	e027      	b.n	8005490 <HAL_RCC_OscConfig+0xd4>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	23a0      	movs	r3, #160	; 0xa0
 8005446:	02db      	lsls	r3, r3, #11
 8005448:	429a      	cmp	r2, r3
 800544a:	d10e      	bne.n	800546a <HAL_RCC_OscConfig+0xae>
 800544c:	4ba9      	ldr	r3, [pc, #676]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4ba8      	ldr	r3, [pc, #672]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005452:	2180      	movs	r1, #128	; 0x80
 8005454:	02c9      	lsls	r1, r1, #11
 8005456:	430a      	orrs	r2, r1
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	4ba6      	ldr	r3, [pc, #664]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4ba5      	ldr	r3, [pc, #660]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005460:	2180      	movs	r1, #128	; 0x80
 8005462:	0249      	lsls	r1, r1, #9
 8005464:	430a      	orrs	r2, r1
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e012      	b.n	8005490 <HAL_RCC_OscConfig+0xd4>
 800546a:	4ba2      	ldr	r3, [pc, #648]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4ba1      	ldr	r3, [pc, #644]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005470:	49a1      	ldr	r1, [pc, #644]	; (80056f8 <HAL_RCC_OscConfig+0x33c>)
 8005472:	400a      	ands	r2, r1
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	4b9f      	ldr	r3, [pc, #636]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	2380      	movs	r3, #128	; 0x80
 800547c:	025b      	lsls	r3, r3, #9
 800547e:	4013      	ands	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4b9b      	ldr	r3, [pc, #620]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	4b9a      	ldr	r3, [pc, #616]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800548a:	499c      	ldr	r1, [pc, #624]	; (80056fc <HAL_RCC_OscConfig+0x340>)
 800548c:	400a      	ands	r2, r1
 800548e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d014      	beq.n	80054c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7ff f8a2 	bl	80045e0 <HAL_GetTick>
 800549c:	0003      	movs	r3, r0
 800549e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a2:	f7ff f89d 	bl	80045e0 <HAL_GetTick>
 80054a6:	0002      	movs	r2, r0
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b64      	cmp	r3, #100	; 0x64
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e2f9      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054b4:	4b8f      	ldr	r3, [pc, #572]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	029b      	lsls	r3, r3, #10
 80054bc:	4013      	ands	r3, r2
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0xe6>
 80054c0:	e015      	b.n	80054ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c2:	f7ff f88d 	bl	80045e0 <HAL_GetTick>
 80054c6:	0003      	movs	r3, r0
 80054c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054cc:	f7ff f888 	bl	80045e0 <HAL_GetTick>
 80054d0:	0002      	movs	r2, r0
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	; 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e2e4      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054de:	4b85      	ldr	r3, [pc, #532]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	2380      	movs	r3, #128	; 0x80
 80054e4:	029b      	lsls	r3, r3, #10
 80054e6:	4013      	ands	r3, r2
 80054e8:	d1f0      	bne.n	80054cc <HAL_RCC_OscConfig+0x110>
 80054ea:	e000      	b.n	80054ee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2202      	movs	r2, #2
 80054f4:	4013      	ands	r3, r2
 80054f6:	d100      	bne.n	80054fa <HAL_RCC_OscConfig+0x13e>
 80054f8:	e099      	b.n	800562e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	2220      	movs	r2, #32
 8005504:	4013      	ands	r3, r2
 8005506:	d009      	beq.n	800551c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005508:	4b7a      	ldr	r3, [pc, #488]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b79      	ldr	r3, [pc, #484]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800550e:	2120      	movs	r1, #32
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	2220      	movs	r2, #32
 8005518:	4393      	bics	r3, r2
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	2b04      	cmp	r3, #4
 8005520:	d005      	beq.n	800552e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b0c      	cmp	r3, #12
 8005526:	d13e      	bne.n	80055a6 <HAL_RCC_OscConfig+0x1ea>
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d13b      	bne.n	80055a6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800552e:	4b71      	ldr	r3, [pc, #452]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2204      	movs	r2, #4
 8005534:	4013      	ands	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_RCC_OscConfig+0x186>
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e2b2      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005542:	4b6c      	ldr	r3, [pc, #432]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4a6e      	ldr	r2, [pc, #440]	; (8005700 <HAL_RCC_OscConfig+0x344>)
 8005548:	4013      	ands	r3, r2
 800554a:	0019      	movs	r1, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	021a      	lsls	r2, r3, #8
 8005552:	4b68      	ldr	r3, [pc, #416]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005554:	430a      	orrs	r2, r1
 8005556:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005558:	4b66      	ldr	r3, [pc, #408]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2209      	movs	r2, #9
 800555e:	4393      	bics	r3, r2
 8005560:	0019      	movs	r1, r3
 8005562:	4b64      	ldr	r3, [pc, #400]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005566:	430a      	orrs	r2, r1
 8005568:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800556a:	f000 fbeb 	bl	8005d44 <HAL_RCC_GetSysClockFreq>
 800556e:	0001      	movs	r1, r0
 8005570:	4b60      	ldr	r3, [pc, #384]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	091b      	lsrs	r3, r3, #4
 8005576:	220f      	movs	r2, #15
 8005578:	4013      	ands	r3, r2
 800557a:	4a62      	ldr	r2, [pc, #392]	; (8005704 <HAL_RCC_OscConfig+0x348>)
 800557c:	5cd3      	ldrb	r3, [r2, r3]
 800557e:	000a      	movs	r2, r1
 8005580:	40da      	lsrs	r2, r3
 8005582:	4b61      	ldr	r3, [pc, #388]	; (8005708 <HAL_RCC_OscConfig+0x34c>)
 8005584:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005586:	4b61      	ldr	r3, [pc, #388]	; (800570c <HAL_RCC_OscConfig+0x350>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2513      	movs	r5, #19
 800558c:	197c      	adds	r4, r7, r5
 800558e:	0018      	movs	r0, r3
 8005590:	f7fe ffe0 	bl	8004554 <HAL_InitTick>
 8005594:	0003      	movs	r3, r0
 8005596:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005598:	197b      	adds	r3, r7, r5
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d046      	beq.n	800562e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80055a0:	197b      	adds	r3, r7, r5
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	e280      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d027      	beq.n	80055fc <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80055ac:	4b51      	ldr	r3, [pc, #324]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2209      	movs	r2, #9
 80055b2:	4393      	bics	r3, r2
 80055b4:	0019      	movs	r1, r3
 80055b6:	4b4f      	ldr	r3, [pc, #316]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80055b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055be:	f7ff f80f 	bl	80045e0 <HAL_GetTick>
 80055c2:	0003      	movs	r3, r0
 80055c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055c8:	f7ff f80a 	bl	80045e0 <HAL_GetTick>
 80055cc:	0002      	movs	r2, r0
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e266      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055da:	4b46      	ldr	r3, [pc, #280]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2204      	movs	r2, #4
 80055e0:	4013      	ands	r3, r2
 80055e2:	d0f1      	beq.n	80055c8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e4:	4b43      	ldr	r3, [pc, #268]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4a45      	ldr	r2, [pc, #276]	; (8005700 <HAL_RCC_OscConfig+0x344>)
 80055ea:	4013      	ands	r3, r2
 80055ec:	0019      	movs	r1, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	021a      	lsls	r2, r3, #8
 80055f4:	4b3f      	ldr	r3, [pc, #252]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
 80055fa:	e018      	b.n	800562e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055fc:	4b3d      	ldr	r3, [pc, #244]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4b3c      	ldr	r3, [pc, #240]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005602:	2101      	movs	r1, #1
 8005604:	438a      	bics	r2, r1
 8005606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005608:	f7fe ffea 	bl	80045e0 <HAL_GetTick>
 800560c:	0003      	movs	r3, r0
 800560e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005612:	f7fe ffe5 	bl	80045e0 <HAL_GetTick>
 8005616:	0002      	movs	r2, r0
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e241      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005624:	4b33      	ldr	r3, [pc, #204]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2204      	movs	r2, #4
 800562a:	4013      	ands	r3, r2
 800562c:	d1f1      	bne.n	8005612 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2210      	movs	r2, #16
 8005634:	4013      	ands	r3, r2
 8005636:	d100      	bne.n	800563a <HAL_RCC_OscConfig+0x27e>
 8005638:	e0a1      	b.n	800577e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d140      	bne.n	80056c2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005640:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	2380      	movs	r3, #128	; 0x80
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4013      	ands	r3, r2
 800564a:	d005      	beq.n	8005658 <HAL_RCC_OscConfig+0x29c>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e227      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005658:	4b26      	ldr	r3, [pc, #152]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4a2c      	ldr	r2, [pc, #176]	; (8005710 <HAL_RCC_OscConfig+0x354>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1a      	ldr	r2, [r3, #32]
 8005666:	4b23      	ldr	r3, [pc, #140]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800566c:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	0a19      	lsrs	r1, r3, #8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	061a      	lsls	r2, r3, #24
 800567a:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 800567c:	430a      	orrs	r2, r1
 800567e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	0b5b      	lsrs	r3, r3, #13
 8005686:	3301      	adds	r3, #1
 8005688:	2280      	movs	r2, #128	; 0x80
 800568a:	0212      	lsls	r2, r2, #8
 800568c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800568e:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	091b      	lsrs	r3, r3, #4
 8005694:	210f      	movs	r1, #15
 8005696:	400b      	ands	r3, r1
 8005698:	491a      	ldr	r1, [pc, #104]	; (8005704 <HAL_RCC_OscConfig+0x348>)
 800569a:	5ccb      	ldrb	r3, [r1, r3]
 800569c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800569e:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <HAL_RCC_OscConfig+0x34c>)
 80056a0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80056a2:	4b1a      	ldr	r3, [pc, #104]	; (800570c <HAL_RCC_OscConfig+0x350>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2513      	movs	r5, #19
 80056a8:	197c      	adds	r4, r7, r5
 80056aa:	0018      	movs	r0, r3
 80056ac:	f7fe ff52 	bl	8004554 <HAL_InitTick>
 80056b0:	0003      	movs	r3, r0
 80056b2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80056b4:	197b      	adds	r3, r7, r5
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d060      	beq.n	800577e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80056bc:	197b      	adds	r3, r7, r5
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	e1f2      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d03f      	beq.n	800574a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <HAL_RCC_OscConfig+0x338>)
 80056d0:	2180      	movs	r1, #128	; 0x80
 80056d2:	0049      	lsls	r1, r1, #1
 80056d4:	430a      	orrs	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fe ff82 	bl	80045e0 <HAL_GetTick>
 80056dc:	0003      	movs	r3, r0
 80056de:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80056e0:	e018      	b.n	8005714 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056e2:	f7fe ff7d 	bl	80045e0 <HAL_GetTick>
 80056e6:	0002      	movs	r2, r0
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d911      	bls.n	8005714 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e1d9      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
 80056f4:	40021000 	.word	0x40021000
 80056f8:	fffeffff 	.word	0xfffeffff
 80056fc:	fffbffff 	.word	0xfffbffff
 8005700:	ffffe0ff 	.word	0xffffe0ff
 8005704:	0800e7f0 	.word	0x0800e7f0
 8005708:	20000004 	.word	0x20000004
 800570c:	20000008 	.word	0x20000008
 8005710:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005714:	4bc9      	ldr	r3, [pc, #804]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	2380      	movs	r3, #128	; 0x80
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4013      	ands	r3, r2
 800571e:	d0e0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005720:	4bc6      	ldr	r3, [pc, #792]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	4ac6      	ldr	r2, [pc, #792]	; (8005a40 <HAL_RCC_OscConfig+0x684>)
 8005726:	4013      	ands	r3, r2
 8005728:	0019      	movs	r1, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1a      	ldr	r2, [r3, #32]
 800572e:	4bc3      	ldr	r3, [pc, #780]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005730:	430a      	orrs	r2, r1
 8005732:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005734:	4bc1      	ldr	r3, [pc, #772]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	021b      	lsls	r3, r3, #8
 800573a:	0a19      	lsrs	r1, r3, #8
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	061a      	lsls	r2, r3, #24
 8005742:	4bbe      	ldr	r3, [pc, #760]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005744:	430a      	orrs	r2, r1
 8005746:	605a      	str	r2, [r3, #4]
 8005748:	e019      	b.n	800577e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800574a:	4bbc      	ldr	r3, [pc, #752]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	4bbb      	ldr	r3, [pc, #748]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005750:	49bc      	ldr	r1, [pc, #752]	; (8005a44 <HAL_RCC_OscConfig+0x688>)
 8005752:	400a      	ands	r2, r1
 8005754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005756:	f7fe ff43 	bl	80045e0 <HAL_GetTick>
 800575a:	0003      	movs	r3, r0
 800575c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005760:	f7fe ff3e 	bl	80045e0 <HAL_GetTick>
 8005764:	0002      	movs	r2, r0
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e19a      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005772:	4bb2      	ldr	r3, [pc, #712]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	2380      	movs	r3, #128	; 0x80
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4013      	ands	r3, r2
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2208      	movs	r2, #8
 8005784:	4013      	ands	r3, r2
 8005786:	d036      	beq.n	80057f6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d019      	beq.n	80057c4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005790:	4baa      	ldr	r3, [pc, #680]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005794:	4ba9      	ldr	r3, [pc, #676]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005796:	2101      	movs	r1, #1
 8005798:	430a      	orrs	r2, r1
 800579a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800579c:	f7fe ff20 	bl	80045e0 <HAL_GetTick>
 80057a0:	0003      	movs	r3, r0
 80057a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057a6:	f7fe ff1b 	bl	80045e0 <HAL_GetTick>
 80057aa:	0002      	movs	r2, r0
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e177      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057b8:	4ba0      	ldr	r3, [pc, #640]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80057ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057bc:	2202      	movs	r2, #2
 80057be:	4013      	ands	r3, r2
 80057c0:	d0f1      	beq.n	80057a6 <HAL_RCC_OscConfig+0x3ea>
 80057c2:	e018      	b.n	80057f6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c4:	4b9d      	ldr	r3, [pc, #628]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80057c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057c8:	4b9c      	ldr	r3, [pc, #624]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80057ca:	2101      	movs	r1, #1
 80057cc:	438a      	bics	r2, r1
 80057ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d0:	f7fe ff06 	bl	80045e0 <HAL_GetTick>
 80057d4:	0003      	movs	r3, r0
 80057d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057da:	f7fe ff01 	bl	80045e0 <HAL_GetTick>
 80057de:	0002      	movs	r2, r0
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e15d      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057ec:	4b93      	ldr	r3, [pc, #588]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80057ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f0:	2202      	movs	r2, #2
 80057f2:	4013      	ands	r3, r2
 80057f4:	d1f1      	bne.n	80057da <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2204      	movs	r2, #4
 80057fc:	4013      	ands	r3, r2
 80057fe:	d100      	bne.n	8005802 <HAL_RCC_OscConfig+0x446>
 8005800:	e0ae      	b.n	8005960 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005802:	2023      	movs	r0, #35	; 0x23
 8005804:	183b      	adds	r3, r7, r0
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800580a:	4b8c      	ldr	r3, [pc, #560]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 800580c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800580e:	2380      	movs	r3, #128	; 0x80
 8005810:	055b      	lsls	r3, r3, #21
 8005812:	4013      	ands	r3, r2
 8005814:	d109      	bne.n	800582a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005816:	4b89      	ldr	r3, [pc, #548]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800581a:	4b88      	ldr	r3, [pc, #544]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 800581c:	2180      	movs	r1, #128	; 0x80
 800581e:	0549      	lsls	r1, r1, #21
 8005820:	430a      	orrs	r2, r1
 8005822:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005824:	183b      	adds	r3, r7, r0
 8005826:	2201      	movs	r2, #1
 8005828:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582a:	4b87      	ldr	r3, [pc, #540]	; (8005a48 <HAL_RCC_OscConfig+0x68c>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	4013      	ands	r3, r2
 8005834:	d11a      	bne.n	800586c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005836:	4b84      	ldr	r3, [pc, #528]	; (8005a48 <HAL_RCC_OscConfig+0x68c>)
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b83      	ldr	r3, [pc, #524]	; (8005a48 <HAL_RCC_OscConfig+0x68c>)
 800583c:	2180      	movs	r1, #128	; 0x80
 800583e:	0049      	lsls	r1, r1, #1
 8005840:	430a      	orrs	r2, r1
 8005842:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005844:	f7fe fecc 	bl	80045e0 <HAL_GetTick>
 8005848:	0003      	movs	r3, r0
 800584a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584e:	f7fe fec7 	bl	80045e0 <HAL_GetTick>
 8005852:	0002      	movs	r2, r0
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b64      	cmp	r3, #100	; 0x64
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e123      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005860:	4b79      	ldr	r3, [pc, #484]	; (8005a48 <HAL_RCC_OscConfig+0x68c>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	2380      	movs	r3, #128	; 0x80
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4013      	ands	r3, r2
 800586a:	d0f0      	beq.n	800584e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	2380      	movs	r3, #128	; 0x80
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	429a      	cmp	r2, r3
 8005876:	d107      	bne.n	8005888 <HAL_RCC_OscConfig+0x4cc>
 8005878:	4b70      	ldr	r3, [pc, #448]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 800587a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800587c:	4b6f      	ldr	r3, [pc, #444]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 800587e:	2180      	movs	r1, #128	; 0x80
 8005880:	0049      	lsls	r1, r1, #1
 8005882:	430a      	orrs	r2, r1
 8005884:	651a      	str	r2, [r3, #80]	; 0x50
 8005886:	e031      	b.n	80058ec <HAL_RCC_OscConfig+0x530>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10c      	bne.n	80058aa <HAL_RCC_OscConfig+0x4ee>
 8005890:	4b6a      	ldr	r3, [pc, #424]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005892:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005894:	4b69      	ldr	r3, [pc, #420]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005896:	496b      	ldr	r1, [pc, #428]	; (8005a44 <HAL_RCC_OscConfig+0x688>)
 8005898:	400a      	ands	r2, r1
 800589a:	651a      	str	r2, [r3, #80]	; 0x50
 800589c:	4b67      	ldr	r3, [pc, #412]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 800589e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058a0:	4b66      	ldr	r3, [pc, #408]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80058a2:	496a      	ldr	r1, [pc, #424]	; (8005a4c <HAL_RCC_OscConfig+0x690>)
 80058a4:	400a      	ands	r2, r1
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50
 80058a8:	e020      	b.n	80058ec <HAL_RCC_OscConfig+0x530>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	23a0      	movs	r3, #160	; 0xa0
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d10e      	bne.n	80058d4 <HAL_RCC_OscConfig+0x518>
 80058b6:	4b61      	ldr	r3, [pc, #388]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80058b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058ba:	4b60      	ldr	r3, [pc, #384]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80058bc:	2180      	movs	r1, #128	; 0x80
 80058be:	00c9      	lsls	r1, r1, #3
 80058c0:	430a      	orrs	r2, r1
 80058c2:	651a      	str	r2, [r3, #80]	; 0x50
 80058c4:	4b5d      	ldr	r3, [pc, #372]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80058c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058c8:	4b5c      	ldr	r3, [pc, #368]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80058ca:	2180      	movs	r1, #128	; 0x80
 80058cc:	0049      	lsls	r1, r1, #1
 80058ce:	430a      	orrs	r2, r1
 80058d0:	651a      	str	r2, [r3, #80]	; 0x50
 80058d2:	e00b      	b.n	80058ec <HAL_RCC_OscConfig+0x530>
 80058d4:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80058d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058d8:	4b58      	ldr	r3, [pc, #352]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80058da:	495a      	ldr	r1, [pc, #360]	; (8005a44 <HAL_RCC_OscConfig+0x688>)
 80058dc:	400a      	ands	r2, r1
 80058de:	651a      	str	r2, [r3, #80]	; 0x50
 80058e0:	4b56      	ldr	r3, [pc, #344]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80058e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80058e4:	4b55      	ldr	r3, [pc, #340]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80058e6:	4959      	ldr	r1, [pc, #356]	; (8005a4c <HAL_RCC_OscConfig+0x690>)
 80058e8:	400a      	ands	r2, r1
 80058ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d015      	beq.n	8005920 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058f4:	f7fe fe74 	bl	80045e0 <HAL_GetTick>
 80058f8:	0003      	movs	r3, r0
 80058fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058fc:	e009      	b.n	8005912 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058fe:	f7fe fe6f 	bl	80045e0 <HAL_GetTick>
 8005902:	0002      	movs	r2, r0
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	4a51      	ldr	r2, [pc, #324]	; (8005a50 <HAL_RCC_OscConfig+0x694>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e0ca      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005912:	4b4a      	ldr	r3, [pc, #296]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4013      	ands	r3, r2
 800591c:	d0ef      	beq.n	80058fe <HAL_RCC_OscConfig+0x542>
 800591e:	e014      	b.n	800594a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005920:	f7fe fe5e 	bl	80045e0 <HAL_GetTick>
 8005924:	0003      	movs	r3, r0
 8005926:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005928:	e009      	b.n	800593e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592a:	f7fe fe59 	bl	80045e0 <HAL_GetTick>
 800592e:	0002      	movs	r2, r0
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	4a46      	ldr	r2, [pc, #280]	; (8005a50 <HAL_RCC_OscConfig+0x694>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e0b4      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800593e:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4013      	ands	r3, r2
 8005948:	d1ef      	bne.n	800592a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800594a:	2323      	movs	r3, #35	; 0x23
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005954:	4b39      	ldr	r3, [pc, #228]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005958:	4b38      	ldr	r3, [pc, #224]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 800595a:	493e      	ldr	r1, [pc, #248]	; (8005a54 <HAL_RCC_OscConfig+0x698>)
 800595c:	400a      	ands	r2, r1
 800595e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d100      	bne.n	800596a <HAL_RCC_OscConfig+0x5ae>
 8005968:	e09d      	b.n	8005aa6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b0c      	cmp	r3, #12
 800596e:	d100      	bne.n	8005972 <HAL_RCC_OscConfig+0x5b6>
 8005970:	e076      	b.n	8005a60 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	2b02      	cmp	r3, #2
 8005978:	d145      	bne.n	8005a06 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800597a:	4b30      	ldr	r3, [pc, #192]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b2f      	ldr	r3, [pc, #188]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005980:	4935      	ldr	r1, [pc, #212]	; (8005a58 <HAL_RCC_OscConfig+0x69c>)
 8005982:	400a      	ands	r2, r1
 8005984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005986:	f7fe fe2b 	bl	80045e0 <HAL_GetTick>
 800598a:	0003      	movs	r3, r0
 800598c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005990:	f7fe fe26 	bl	80045e0 <HAL_GetTick>
 8005994:	0002      	movs	r2, r0
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e082      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80059a2:	4b26      	ldr	r3, [pc, #152]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	2380      	movs	r3, #128	; 0x80
 80059a8:	049b      	lsls	r3, r3, #18
 80059aa:	4013      	ands	r3, r2
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059ae:	4b23      	ldr	r3, [pc, #140]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <HAL_RCC_OscConfig+0x6a0>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	0019      	movs	r1, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	431a      	orrs	r2, r3
 80059c8:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80059ca:	430a      	orrs	r2, r1
 80059cc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ce:	4b1b      	ldr	r3, [pc, #108]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80059d4:	2180      	movs	r1, #128	; 0x80
 80059d6:	0449      	lsls	r1, r1, #17
 80059d8:	430a      	orrs	r2, r1
 80059da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fe fe00 	bl	80045e0 <HAL_GetTick>
 80059e0:	0003      	movs	r3, r0
 80059e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e6:	f7fe fdfb 	bl	80045e0 <HAL_GetTick>
 80059ea:	0002      	movs	r2, r0
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e057      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80059f8:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	049b      	lsls	r3, r3, #18
 8005a00:	4013      	ands	r3, r2
 8005a02:	d0f0      	beq.n	80059e6 <HAL_RCC_OscConfig+0x62a>
 8005a04:	e04f      	b.n	8005aa6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005a0c:	4912      	ldr	r1, [pc, #72]	; (8005a58 <HAL_RCC_OscConfig+0x69c>)
 8005a0e:	400a      	ands	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a12:	f7fe fde5 	bl	80045e0 <HAL_GetTick>
 8005a16:	0003      	movs	r3, r0
 8005a18:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fe fde0 	bl	80045e0 <HAL_GetTick>
 8005a20:	0002      	movs	r2, r0
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e03c      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005a2e:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <HAL_RCC_OscConfig+0x680>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	049b      	lsls	r3, r3, #18
 8005a36:	4013      	ands	r3, r2
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x660>
 8005a3a:	e034      	b.n	8005aa6 <HAL_RCC_OscConfig+0x6ea>
 8005a3c:	40021000 	.word	0x40021000
 8005a40:	ffff1fff 	.word	0xffff1fff
 8005a44:	fffffeff 	.word	0xfffffeff
 8005a48:	40007000 	.word	0x40007000
 8005a4c:	fffffbff 	.word	0xfffffbff
 8005a50:	00001388 	.word	0x00001388
 8005a54:	efffffff 	.word	0xefffffff
 8005a58:	feffffff 	.word	0xfeffffff
 8005a5c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e01d      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a6c:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <HAL_RCC_OscConfig+0x6f4>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	2380      	movs	r3, #128	; 0x80
 8005a76:	025b      	lsls	r3, r3, #9
 8005a78:	401a      	ands	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d10f      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	23f0      	movs	r3, #240	; 0xf0
 8005a86:	039b      	lsls	r3, r3, #14
 8005a88:	401a      	ands	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	23c0      	movs	r3, #192	; 0xc0
 8005a96:	041b      	lsls	r3, r3, #16
 8005a98:	401a      	ands	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d001      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b00a      	add	sp, #40	; 0x28
 8005aae:	bdb0      	pop	{r4, r5, r7, pc}
 8005ab0:	40021000 	.word	0x40021000

08005ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab4:	b5b0      	push	{r4, r5, r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e128      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac8:	4b96      	ldr	r3, [pc, #600]	; (8005d24 <HAL_RCC_ClockConfig+0x270>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2201      	movs	r2, #1
 8005ace:	4013      	ands	r3, r2
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d91e      	bls.n	8005b14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ad6:	4b93      	ldr	r3, [pc, #588]	; (8005d24 <HAL_RCC_ClockConfig+0x270>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2201      	movs	r2, #1
 8005adc:	4393      	bics	r3, r2
 8005ade:	0019      	movs	r1, r3
 8005ae0:	4b90      	ldr	r3, [pc, #576]	; (8005d24 <HAL_RCC_ClockConfig+0x270>)
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ae8:	f7fe fd7a 	bl	80045e0 <HAL_GetTick>
 8005aec:	0003      	movs	r3, r0
 8005aee:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af0:	e009      	b.n	8005b06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af2:	f7fe fd75 	bl	80045e0 <HAL_GetTick>
 8005af6:	0002      	movs	r2, r0
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	4a8a      	ldr	r2, [pc, #552]	; (8005d28 <HAL_RCC_ClockConfig+0x274>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d901      	bls.n	8005b06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e109      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b06:	4b87      	ldr	r3, [pc, #540]	; (8005d24 <HAL_RCC_ClockConfig+0x270>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d1ee      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b1e:	4b83      	ldr	r3, [pc, #524]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	22f0      	movs	r2, #240	; 0xf0
 8005b24:	4393      	bics	r3, r2
 8005b26:	0019      	movs	r1, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689a      	ldr	r2, [r3, #8]
 8005b2c:	4b7f      	ldr	r3, [pc, #508]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2201      	movs	r2, #1
 8005b38:	4013      	ands	r3, r2
 8005b3a:	d100      	bne.n	8005b3e <HAL_RCC_ClockConfig+0x8a>
 8005b3c:	e089      	b.n	8005c52 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b46:	4b79      	ldr	r3, [pc, #484]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	029b      	lsls	r3, r3, #10
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d120      	bne.n	8005b94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e0e1      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b03      	cmp	r3, #3
 8005b5c:	d107      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b5e:	4b73      	ldr	r3, [pc, #460]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	049b      	lsls	r3, r3, #18
 8005b66:	4013      	ands	r3, r2
 8005b68:	d114      	bne.n	8005b94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e0d5      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d106      	bne.n	8005b84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b76:	4b6d      	ldr	r3, [pc, #436]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d109      	bne.n	8005b94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e0ca      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005b84:	4b69      	ldr	r3, [pc, #420]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0c2      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b94:	4b65      	ldr	r3, [pc, #404]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2203      	movs	r2, #3
 8005b9a:	4393      	bics	r3, r2
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	4b62      	ldr	r3, [pc, #392]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ba8:	f7fe fd1a 	bl	80045e0 <HAL_GetTick>
 8005bac:	0003      	movs	r3, r0
 8005bae:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d111      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bb8:	e009      	b.n	8005bce <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bba:	f7fe fd11 	bl	80045e0 <HAL_GetTick>
 8005bbe:	0002      	movs	r2, r0
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	4a58      	ldr	r2, [pc, #352]	; (8005d28 <HAL_RCC_ClockConfig+0x274>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e0a5      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005bce:	4b57      	ldr	r3, [pc, #348]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	220c      	movs	r2, #12
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d1ef      	bne.n	8005bba <HAL_RCC_ClockConfig+0x106>
 8005bda:	e03a      	b.n	8005c52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d111      	bne.n	8005c08 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005be4:	e009      	b.n	8005bfa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be6:	f7fe fcfb 	bl	80045e0 <HAL_GetTick>
 8005bea:	0002      	movs	r2, r0
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	4a4d      	ldr	r2, [pc, #308]	; (8005d28 <HAL_RCC_ClockConfig+0x274>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e08f      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	220c      	movs	r2, #12
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d1ef      	bne.n	8005be6 <HAL_RCC_ClockConfig+0x132>
 8005c06:	e024      	b.n	8005c52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d11b      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c10:	e009      	b.n	8005c26 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c12:	f7fe fce5 	bl	80045e0 <HAL_GetTick>
 8005c16:	0002      	movs	r2, r0
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	4a42      	ldr	r2, [pc, #264]	; (8005d28 <HAL_RCC_ClockConfig+0x274>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e079      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c26:	4b41      	ldr	r3, [pc, #260]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	220c      	movs	r2, #12
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d1ef      	bne.n	8005c12 <HAL_RCC_ClockConfig+0x15e>
 8005c32:	e00e      	b.n	8005c52 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c34:	f7fe fcd4 	bl	80045e0 <HAL_GetTick>
 8005c38:	0002      	movs	r2, r0
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	4a3a      	ldr	r2, [pc, #232]	; (8005d28 <HAL_RCC_ClockConfig+0x274>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e068      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c48:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	220c      	movs	r2, #12
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c52:	4b34      	ldr	r3, [pc, #208]	; (8005d24 <HAL_RCC_ClockConfig+0x270>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2201      	movs	r2, #1
 8005c58:	4013      	ands	r3, r2
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d21e      	bcs.n	8005c9e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c60:	4b30      	ldr	r3, [pc, #192]	; (8005d24 <HAL_RCC_ClockConfig+0x270>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2201      	movs	r2, #1
 8005c66:	4393      	bics	r3, r2
 8005c68:	0019      	movs	r1, r3
 8005c6a:	4b2e      	ldr	r3, [pc, #184]	; (8005d24 <HAL_RCC_ClockConfig+0x270>)
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c72:	f7fe fcb5 	bl	80045e0 <HAL_GetTick>
 8005c76:	0003      	movs	r3, r0
 8005c78:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7a:	e009      	b.n	8005c90 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c7c:	f7fe fcb0 	bl	80045e0 <HAL_GetTick>
 8005c80:	0002      	movs	r2, r0
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	4a28      	ldr	r2, [pc, #160]	; (8005d28 <HAL_RCC_ClockConfig+0x274>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e044      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c90:	4b24      	ldr	r3, [pc, #144]	; (8005d24 <HAL_RCC_ClockConfig+0x270>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2201      	movs	r2, #1
 8005c96:	4013      	ands	r3, r2
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d1ee      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ca8:	4b20      	ldr	r3, [pc, #128]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a20      	ldr	r2, [pc, #128]	; (8005d30 <HAL_RCC_ClockConfig+0x27c>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d00a      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cc6:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <HAL_RCC_ClockConfig+0x280>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	0019      	movs	r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	00da      	lsls	r2, r3, #3
 8005cd6:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005cdc:	f000 f832 	bl	8005d44 <HAL_RCC_GetSysClockFreq>
 8005ce0:	0001      	movs	r1, r0
 8005ce2:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <HAL_RCC_ClockConfig+0x278>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	091b      	lsrs	r3, r3, #4
 8005ce8:	220f      	movs	r2, #15
 8005cea:	4013      	ands	r3, r2
 8005cec:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <HAL_RCC_ClockConfig+0x284>)
 8005cee:	5cd3      	ldrb	r3, [r2, r3]
 8005cf0:	000a      	movs	r2, r1
 8005cf2:	40da      	lsrs	r2, r3
 8005cf4:	4b11      	ldr	r3, [pc, #68]	; (8005d3c <HAL_RCC_ClockConfig+0x288>)
 8005cf6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005cf8:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_RCC_ClockConfig+0x28c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	250b      	movs	r5, #11
 8005cfe:	197c      	adds	r4, r7, r5
 8005d00:	0018      	movs	r0, r3
 8005d02:	f7fe fc27 	bl	8004554 <HAL_InitTick>
 8005d06:	0003      	movs	r3, r0
 8005d08:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005d0a:	197b      	adds	r3, r7, r5
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005d12:	197b      	adds	r3, r7, r5
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	e000      	b.n	8005d1a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b004      	add	sp, #16
 8005d20:	bdb0      	pop	{r4, r5, r7, pc}
 8005d22:	46c0      	nop			; (mov r8, r8)
 8005d24:	40022000 	.word	0x40022000
 8005d28:	00001388 	.word	0x00001388
 8005d2c:	40021000 	.word	0x40021000
 8005d30:	fffff8ff 	.word	0xfffff8ff
 8005d34:	ffffc7ff 	.word	0xffffc7ff
 8005d38:	0800e7f0 	.word	0x0800e7f0
 8005d3c:	20000004 	.word	0x20000004
 8005d40:	20000008 	.word	0x20000008

08005d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d44:	b5b0      	push	{r4, r5, r7, lr}
 8005d46:	b08e      	sub	sp, #56	; 0x38
 8005d48:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005d4a:	4b4c      	ldr	r3, [pc, #304]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d52:	230c      	movs	r3, #12
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b0c      	cmp	r3, #12
 8005d58:	d014      	beq.n	8005d84 <HAL_RCC_GetSysClockFreq+0x40>
 8005d5a:	d900      	bls.n	8005d5e <HAL_RCC_GetSysClockFreq+0x1a>
 8005d5c:	e07b      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0x112>
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d002      	beq.n	8005d68 <HAL_RCC_GetSysClockFreq+0x24>
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d00b      	beq.n	8005d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d66:	e076      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005d68:	4b44      	ldr	r3, [pc, #272]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2210      	movs	r2, #16
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d002      	beq.n	8005d78 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005d72:	4b43      	ldr	r3, [pc, #268]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005d74:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005d76:	e07c      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005d78:	4b42      	ldr	r3, [pc, #264]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x140>)
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d7c:	e079      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005d7e:	4b42      	ldr	r3, [pc, #264]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x144>)
 8005d80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005d82:	e076      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	0c9a      	lsrs	r2, r3, #18
 8005d88:	230f      	movs	r3, #15
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	4b3f      	ldr	r3, [pc, #252]	; (8005e8c <HAL_RCC_GetSysClockFreq+0x148>)
 8005d8e:	5c9b      	ldrb	r3, [r3, r2]
 8005d90:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	0d9a      	lsrs	r2, r3, #22
 8005d96:	2303      	movs	r3, #3
 8005d98:	4013      	ands	r3, r2
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d9e:	4b37      	ldr	r3, [pc, #220]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	2380      	movs	r3, #128	; 0x80
 8005da4:	025b      	lsls	r3, r3, #9
 8005da6:	4013      	ands	r3, r2
 8005da8:	d01a      	beq.n	8005de0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	61bb      	str	r3, [r7, #24]
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
 8005db2:	4a35      	ldr	r2, [pc, #212]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x144>)
 8005db4:	2300      	movs	r3, #0
 8005db6:	69b8      	ldr	r0, [r7, #24]
 8005db8:	69f9      	ldr	r1, [r7, #28]
 8005dba:	f7fa fb95 	bl	80004e8 <__aeabi_lmul>
 8005dbe:	0002      	movs	r2, r0
 8005dc0:	000b      	movs	r3, r1
 8005dc2:	0010      	movs	r0, r2
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f7fa fb69 	bl	80004a8 <__aeabi_uldivmod>
 8005dd6:	0002      	movs	r2, r0
 8005dd8:	000b      	movs	r3, r1
 8005dda:	0013      	movs	r3, r2
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dde:	e037      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005de0:	4b26      	ldr	r3, [pc, #152]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2210      	movs	r2, #16
 8005de6:	4013      	ands	r3, r2
 8005de8:	d01a      	beq.n	8005e20 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	4a23      	ldr	r2, [pc, #140]	; (8005e80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005df4:	2300      	movs	r3, #0
 8005df6:	68b8      	ldr	r0, [r7, #8]
 8005df8:	68f9      	ldr	r1, [r7, #12]
 8005dfa:	f7fa fb75 	bl	80004e8 <__aeabi_lmul>
 8005dfe:	0002      	movs	r2, r0
 8005e00:	000b      	movs	r3, r1
 8005e02:	0010      	movs	r0, r2
 8005e04:	0019      	movs	r1, r3
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	603b      	str	r3, [r7, #0]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	607b      	str	r3, [r7, #4]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f7fa fb49 	bl	80004a8 <__aeabi_uldivmod>
 8005e16:	0002      	movs	r2, r0
 8005e18:	000b      	movs	r3, r1
 8005e1a:	0013      	movs	r3, r2
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e1e:	e017      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e22:	0018      	movs	r0, r3
 8005e24:	2300      	movs	r3, #0
 8005e26:	0019      	movs	r1, r3
 8005e28:	4a16      	ldr	r2, [pc, #88]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x140>)
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f7fa fb5c 	bl	80004e8 <__aeabi_lmul>
 8005e30:	0002      	movs	r2, r0
 8005e32:	000b      	movs	r3, r1
 8005e34:	0010      	movs	r0, r2
 8005e36:	0019      	movs	r1, r3
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	001c      	movs	r4, r3
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	001d      	movs	r5, r3
 8005e40:	0022      	movs	r2, r4
 8005e42:	002b      	movs	r3, r5
 8005e44:	f7fa fb30 	bl	80004a8 <__aeabi_uldivmod>
 8005e48:	0002      	movs	r2, r0
 8005e4a:	000b      	movs	r3, r1
 8005e4c:	0013      	movs	r3, r2
 8005e4e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e54:	e00d      	b.n	8005e72 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	0b5b      	lsrs	r3, r3, #13
 8005e5c:	2207      	movs	r2, #7
 8005e5e:	4013      	ands	r3, r2
 8005e60:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	3301      	adds	r3, #1
 8005e66:	2280      	movs	r2, #128	; 0x80
 8005e68:	0212      	lsls	r2, r2, #8
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	0013      	movs	r3, r2
 8005e6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005e70:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005e74:	0018      	movs	r0, r3
 8005e76:	46bd      	mov	sp, r7
 8005e78:	b00e      	add	sp, #56	; 0x38
 8005e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	003d0900 	.word	0x003d0900
 8005e84:	00f42400 	.word	0x00f42400
 8005e88:	007a1200 	.word	0x007a1200
 8005e8c:	0800e800 	.word	0x0800e800

08005e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e07b      	b.n	8005f9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	2382      	movs	r3, #130	; 0x82
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d009      	beq.n	8005eca <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	61da      	str	r2, [r3, #28]
 8005ebc:	e005      	b.n	8005eca <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2251      	movs	r2, #81	; 0x51
 8005ed4:	5c9b      	ldrb	r3, [r3, r2]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d107      	bne.n	8005eec <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2250      	movs	r2, #80	; 0x50
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f7fe f99a 	bl	8004220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2251      	movs	r2, #81	; 0x51
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2140      	movs	r1, #64	; 0x40
 8005f00:	438a      	bics	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	2382      	movs	r3, #130	; 0x82
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	401a      	ands	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6899      	ldr	r1, [r3, #8]
 8005f12:	2384      	movs	r3, #132	; 0x84
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	400b      	ands	r3, r1
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68d9      	ldr	r1, [r3, #12]
 8005f1e:	2380      	movs	r3, #128	; 0x80
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	400b      	ands	r3, r1
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2102      	movs	r1, #2
 8005f2c:	400b      	ands	r3, r1
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	2101      	movs	r1, #1
 8005f36:	400b      	ands	r3, r1
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	400b      	ands	r3, r1
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69db      	ldr	r3, [r3, #28]
 8005f4a:	2138      	movs	r1, #56	; 0x38
 8005f4c:	400b      	ands	r3, r1
 8005f4e:	431a      	orrs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	2180      	movs	r1, #128	; 0x80
 8005f56:	400b      	ands	r3, r1
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	0011      	movs	r1, r2
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f60:	2380      	movs	r3, #128	; 0x80
 8005f62:	019b      	lsls	r3, r3, #6
 8005f64:	401a      	ands	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	0c1b      	lsrs	r3, r3, #16
 8005f74:	2204      	movs	r2, #4
 8005f76:	4013      	ands	r3, r2
 8005f78:	0019      	movs	r1, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	2210      	movs	r2, #16
 8005f80:	401a      	ands	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2251      	movs	r2, #81	; 0x51
 8005f94:	2101      	movs	r1, #1
 8005f96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	b002      	add	sp, #8
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b088      	sub	sp, #32
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	1dbb      	adds	r3, r7, #6
 8005fb0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fb2:	231f      	movs	r3, #31
 8005fb4:	18fb      	adds	r3, r7, r3
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2250      	movs	r2, #80	; 0x50
 8005fbe:	5c9b      	ldrb	r3, [r3, r2]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_SPI_Transmit+0x26>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e145      	b.n	8006254 <HAL_SPI_Transmit+0x2b2>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2250      	movs	r2, #80	; 0x50
 8005fcc:	2101      	movs	r1, #1
 8005fce:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fd0:	f7fe fb06 	bl	80045e0 <HAL_GetTick>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005fd8:	2316      	movs	r3, #22
 8005fda:	18fb      	adds	r3, r7, r3
 8005fdc:	1dba      	adds	r2, r7, #6
 8005fde:	8812      	ldrh	r2, [r2, #0]
 8005fe0:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2251      	movs	r2, #81	; 0x51
 8005fe6:	5c9b      	ldrb	r3, [r3, r2]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d004      	beq.n	8005ff8 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005fee:	231f      	movs	r3, #31
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	701a      	strb	r2, [r3, #0]
    goto error;
 8005ff6:	e126      	b.n	8006246 <HAL_SPI_Transmit+0x2a4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_SPI_Transmit+0x64>
 8005ffe:	1dbb      	adds	r3, r7, #6
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006006:	231f      	movs	r3, #31
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	2201      	movs	r2, #1
 800600c:	701a      	strb	r2, [r3, #0]
    goto error;
 800600e:	e11a      	b.n	8006246 <HAL_SPI_Transmit+0x2a4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2251      	movs	r2, #81	; 0x51
 8006014:	2103      	movs	r1, #3
 8006016:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	1dba      	adds	r2, r7, #6
 8006028:	8812      	ldrh	r2, [r2, #0]
 800602a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	1dba      	adds	r2, r7, #6
 8006030:	8812      	ldrh	r2, [r2, #0]
 8006032:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	429a      	cmp	r2, r3
 800605c:	d110      	bne.n	8006080 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2140      	movs	r1, #64	; 0x40
 800606a:	438a      	bics	r2, r1
 800606c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2180      	movs	r1, #128	; 0x80
 800607a:	01c9      	lsls	r1, r1, #7
 800607c:	430a      	orrs	r2, r1
 800607e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2240      	movs	r2, #64	; 0x40
 8006088:	4013      	ands	r3, r2
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d007      	beq.n	800609e <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2140      	movs	r1, #64	; 0x40
 800609a:	430a      	orrs	r2, r1
 800609c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	2380      	movs	r3, #128	; 0x80
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d152      	bne.n	8006150 <HAL_SPI_Transmit+0x1ae>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d004      	beq.n	80060bc <HAL_SPI_Transmit+0x11a>
 80060b2:	2316      	movs	r3, #22
 80060b4:	18fb      	adds	r3, r7, r3
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d143      	bne.n	8006144 <HAL_SPI_Transmit+0x1a2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	881a      	ldrh	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060e0:	e030      	b.n	8006144 <HAL_SPI_Transmit+0x1a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2202      	movs	r2, #2
 80060ea:	4013      	ands	r3, r2
 80060ec:	2b02      	cmp	r3, #2
 80060ee:	d112      	bne.n	8006116 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	881a      	ldrh	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	86da      	strh	r2, [r3, #54]	; 0x36
 8006114:	e016      	b.n	8006144 <HAL_SPI_Transmit+0x1a2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006116:	f7fe fa63 	bl	80045e0 <HAL_GetTick>
 800611a:	0002      	movs	r2, r0
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	683a      	ldr	r2, [r7, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d802      	bhi.n	800612c <HAL_SPI_Transmit+0x18a>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	3301      	adds	r3, #1
 800612a:	d102      	bne.n	8006132 <HAL_SPI_Transmit+0x190>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d108      	bne.n	8006144 <HAL_SPI_Transmit+0x1a2>
        {
          errorcode = HAL_TIMEOUT;
 8006132:	231f      	movs	r3, #31
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	2203      	movs	r2, #3
 8006138:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2251      	movs	r2, #81	; 0x51
 800613e:	2101      	movs	r1, #1
 8006140:	5499      	strb	r1, [r3, r2]
          goto error;
 8006142:	e080      	b.n	8006246 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1c9      	bne.n	80060e2 <HAL_SPI_Transmit+0x140>
 800614e:	e053      	b.n	80061f8 <HAL_SPI_Transmit+0x256>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <HAL_SPI_Transmit+0x1c0>
 8006158:	2316      	movs	r3, #22
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d145      	bne.n	80061ee <HAL_SPI_Transmit+0x24c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	330c      	adds	r3, #12
 800616c:	7812      	ldrb	r2, [r2, #0]
 800616e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006188:	e031      	b.n	80061ee <HAL_SPI_Transmit+0x24c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	2202      	movs	r2, #2
 8006192:	4013      	ands	r3, r2
 8006194:	2b02      	cmp	r3, #2
 8006196:	d113      	bne.n	80061c0 <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	7812      	ldrb	r2, [r2, #0]
 80061a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80061be:	e016      	b.n	80061ee <HAL_SPI_Transmit+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061c0:	f7fe fa0e 	bl	80045e0 <HAL_GetTick>
 80061c4:	0002      	movs	r2, r0
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d802      	bhi.n	80061d6 <HAL_SPI_Transmit+0x234>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	3301      	adds	r3, #1
 80061d4:	d102      	bne.n	80061dc <HAL_SPI_Transmit+0x23a>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d108      	bne.n	80061ee <HAL_SPI_Transmit+0x24c>
        {
          errorcode = HAL_TIMEOUT;
 80061dc:	231f      	movs	r3, #31
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	2203      	movs	r2, #3
 80061e2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2251      	movs	r2, #81	; 0x51
 80061e8:	2101      	movs	r1, #1
 80061ea:	5499      	strb	r1, [r3, r2]
          goto error;
 80061ec:	e02b      	b.n	8006246 <HAL_SPI_Transmit+0x2a4>
    while (hspi->TxXferCount > 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1c8      	bne.n	800618a <HAL_SPI_Transmit+0x1e8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	0018      	movs	r0, r3
 8006200:	f000 fa86 	bl	8006710 <SPI_EndRxTxTransaction>
 8006204:	1e03      	subs	r3, r0, #0
 8006206:	d002      	beq.n	800620e <HAL_SPI_Transmit+0x26c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <HAL_SPI_Transmit+0x28a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <HAL_SPI_Transmit+0x29c>
  {
    errorcode = HAL_ERROR;
 8006234:	231f      	movs	r3, #31
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	2201      	movs	r2, #1
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	e003      	b.n	8006246 <HAL_SPI_Transmit+0x2a4>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2251      	movs	r2, #81	; 0x51
 8006242:	2101      	movs	r1, #1
 8006244:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2250      	movs	r2, #80	; 0x50
 800624a:	2100      	movs	r1, #0
 800624c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800624e:	231f      	movs	r3, #31
 8006250:	18fb      	adds	r3, r7, r3
 8006252:	781b      	ldrb	r3, [r3, #0]
}
 8006254:	0018      	movs	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	b008      	add	sp, #32
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	; 0x30
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
 8006268:	001a      	movs	r2, r3
 800626a:	1cbb      	adds	r3, r7, #2
 800626c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800626e:	2301      	movs	r3, #1
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006272:	232b      	movs	r3, #43	; 0x2b
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2250      	movs	r2, #80	; 0x50
 800627e:	5c9b      	ldrb	r3, [r3, r2]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_SPI_TransmitReceive+0x2c>
 8006284:	2302      	movs	r3, #2
 8006286:	e1b0      	b.n	80065ea <HAL_SPI_TransmitReceive+0x38e>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2250      	movs	r2, #80	; 0x50
 800628c:	2101      	movs	r1, #1
 800628e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006290:	f7fe f9a6 	bl	80045e0 <HAL_GetTick>
 8006294:	0003      	movs	r3, r0
 8006296:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006298:	2023      	movs	r0, #35	; 0x23
 800629a:	183b      	adds	r3, r7, r0
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	2151      	movs	r1, #81	; 0x51
 80062a0:	5c52      	ldrb	r2, [r2, r1]
 80062a2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80062aa:	231a      	movs	r3, #26
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	1cba      	adds	r2, r7, #2
 80062b0:	8812      	ldrh	r2, [r2, #0]
 80062b2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062b4:	183b      	adds	r3, r7, r0
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d011      	beq.n	80062e0 <HAL_SPI_TransmitReceive+0x84>
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	2382      	movs	r3, #130	; 0x82
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d107      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d103      	bne.n	80062d6 <HAL_SPI_TransmitReceive+0x7a>
 80062ce:	183b      	adds	r3, r7, r0
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	d004      	beq.n	80062e0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80062d6:	232b      	movs	r3, #43	; 0x2b
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	2202      	movs	r2, #2
 80062dc:	701a      	strb	r2, [r3, #0]
    goto error;
 80062de:	e17d      	b.n	80065dc <HAL_SPI_TransmitReceive+0x380>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d006      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0x98>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0x98>
 80062ec:	1cbb      	adds	r3, r7, #2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80062f4:	232b      	movs	r3, #43	; 0x2b
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	2201      	movs	r2, #1
 80062fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80062fc:	e16e      	b.n	80065dc <HAL_SPI_TransmitReceive+0x380>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2251      	movs	r2, #81	; 0x51
 8006302:	5c9b      	ldrb	r3, [r3, r2]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b04      	cmp	r3, #4
 8006308:	d003      	beq.n	8006312 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2251      	movs	r2, #81	; 0x51
 800630e:	2105      	movs	r1, #5
 8006310:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1cba      	adds	r2, r7, #2
 8006322:	8812      	ldrh	r2, [r2, #0]
 8006324:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	1cba      	adds	r2, r7, #2
 800632a:	8812      	ldrh	r2, [r2, #0]
 800632c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	1cba      	adds	r2, r7, #2
 8006338:	8812      	ldrh	r2, [r2, #0]
 800633a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	1cba      	adds	r2, r7, #2
 8006340:	8812      	ldrh	r2, [r2, #0]
 8006342:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	4013      	ands	r3, r2
 800635a:	2b40      	cmp	r3, #64	; 0x40
 800635c:	d007      	beq.n	800636e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2140      	movs	r1, #64	; 0x40
 800636a:	430a      	orrs	r2, r1
 800636c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	2380      	movs	r3, #128	; 0x80
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	429a      	cmp	r2, r3
 8006378:	d000      	beq.n	800637c <HAL_SPI_TransmitReceive+0x120>
 800637a:	e07f      	b.n	800647c <HAL_SPI_TransmitReceive+0x220>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <HAL_SPI_TransmitReceive+0x134>
 8006384:	231a      	movs	r3, #26
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d000      	beq.n	8006390 <HAL_SPI_TransmitReceive+0x134>
 800638e:	e06a      	b.n	8006466 <HAL_SPI_TransmitReceive+0x20a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	881a      	ldrh	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a0:	1c9a      	adds	r2, r3, #2
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063b4:	e057      	b.n	8006466 <HAL_SPI_TransmitReceive+0x20a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2202      	movs	r2, #2
 80063be:	4013      	ands	r3, r2
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d11b      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x1a0>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d016      	beq.n	80063fc <HAL_SPI_TransmitReceive+0x1a0>
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d113      	bne.n	80063fc <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	881a      	ldrh	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	1c9a      	adds	r2, r3, #2
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	2201      	movs	r2, #1
 8006404:	4013      	ands	r3, r2
 8006406:	2b01      	cmp	r3, #1
 8006408:	d119      	bne.n	800643e <HAL_SPI_TransmitReceive+0x1e2>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d014      	beq.n	800643e <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	b292      	uxth	r2, r2
 8006420:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	1c9a      	adds	r2, r3, #2
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800643a:	2301      	movs	r3, #1
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800643e:	f7fe f8cf 	bl	80045e0 <HAL_GetTick>
 8006442:	0002      	movs	r2, r0
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800644a:	429a      	cmp	r2, r3
 800644c:	d80b      	bhi.n	8006466 <HAL_SPI_TransmitReceive+0x20a>
 800644e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006450:	3301      	adds	r3, #1
 8006452:	d008      	beq.n	8006466 <HAL_SPI_TransmitReceive+0x20a>
      {
        errorcode = HAL_TIMEOUT;
 8006454:	232b      	movs	r3, #43	; 0x2b
 8006456:	18fb      	adds	r3, r7, r3
 8006458:	2203      	movs	r2, #3
 800645a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2251      	movs	r2, #81	; 0x51
 8006460:	2101      	movs	r1, #1
 8006462:	5499      	strb	r1, [r3, r2]
        goto error;
 8006464:	e0ba      	b.n	80065dc <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1a2      	bne.n	80063b6 <HAL_SPI_TransmitReceive+0x15a>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d19d      	bne.n	80063b6 <HAL_SPI_TransmitReceive+0x15a>
 800647a:	e083      	b.n	8006584 <HAL_SPI_TransmitReceive+0x328>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <HAL_SPI_TransmitReceive+0x234>
 8006484:	231a      	movs	r3, #26
 8006486:	18fb      	adds	r3, r7, r3
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d000      	beq.n	8006490 <HAL_SPI_TransmitReceive+0x234>
 800648e:	e06f      	b.n	8006570 <HAL_SPI_TransmitReceive+0x314>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	330c      	adds	r3, #12
 800649a:	7812      	ldrb	r2, [r2, #0]
 800649c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064b6:	e05b      	b.n	8006570 <HAL_SPI_TransmitReceive+0x314>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2202      	movs	r2, #2
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d11c      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x2a4>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d017      	beq.n	8006500 <HAL_SPI_TransmitReceive+0x2a4>
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d114      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x2a4>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330c      	adds	r3, #12
 80064e0:	7812      	ldrb	r2, [r2, #0]
 80064e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	2201      	movs	r2, #1
 8006508:	4013      	ands	r3, r2
 800650a:	2b01      	cmp	r3, #1
 800650c:	d119      	bne.n	8006542 <HAL_SPI_TransmitReceive+0x2e6>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d014      	beq.n	8006542 <HAL_SPI_TransmitReceive+0x2e6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800653e:	2301      	movs	r3, #1
 8006540:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006542:	f7fe f84d 	bl	80045e0 <HAL_GetTick>
 8006546:	0002      	movs	r2, r0
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800654e:	429a      	cmp	r2, r3
 8006550:	d802      	bhi.n	8006558 <HAL_SPI_TransmitReceive+0x2fc>
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	3301      	adds	r3, #1
 8006556:	d102      	bne.n	800655e <HAL_SPI_TransmitReceive+0x302>
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	2b00      	cmp	r3, #0
 800655c:	d108      	bne.n	8006570 <HAL_SPI_TransmitReceive+0x314>
      {
        errorcode = HAL_TIMEOUT;
 800655e:	232b      	movs	r3, #43	; 0x2b
 8006560:	18fb      	adds	r3, r7, r3
 8006562:	2203      	movs	r2, #3
 8006564:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2251      	movs	r2, #81	; 0x51
 800656a:	2101      	movs	r1, #1
 800656c:	5499      	strb	r1, [r3, r2]
        goto error;
 800656e:	e035      	b.n	80065dc <HAL_SPI_TransmitReceive+0x380>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d19e      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x25c>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d199      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x25c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006586:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	0018      	movs	r0, r3
 800658c:	f000 f8c0 	bl	8006710 <SPI_EndRxTxTransaction>
 8006590:	1e03      	subs	r3, r0, #0
 8006592:	d007      	beq.n	80065a4 <HAL_SPI_TransmitReceive+0x348>
  {
    errorcode = HAL_ERROR;
 8006594:	232b      	movs	r3, #43	; 0x2b
 8006596:	18fb      	adds	r3, r7, r3
 8006598:	2201      	movs	r2, #1
 800659a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80065a2:	e01b      	b.n	80065dc <HAL_SPI_TransmitReceive+0x380>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <HAL_SPI_TransmitReceive+0x366>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065ac:	2300      	movs	r3, #0
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <HAL_SPI_TransmitReceive+0x378>
  {
    errorcode = HAL_ERROR;
 80065ca:	232b      	movs	r3, #43	; 0x2b
 80065cc:	18fb      	adds	r3, r7, r3
 80065ce:	2201      	movs	r2, #1
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	e003      	b.n	80065dc <HAL_SPI_TransmitReceive+0x380>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2251      	movs	r2, #81	; 0x51
 80065d8:	2101      	movs	r1, #1
 80065da:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2250      	movs	r2, #80	; 0x50
 80065e0:	2100      	movs	r1, #0
 80065e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80065e4:	232b      	movs	r3, #43	; 0x2b
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	781b      	ldrb	r3, [r3, #0]
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b00c      	add	sp, #48	; 0x30
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b088      	sub	sp, #32
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	1dfb      	adds	r3, r7, #7
 8006602:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006604:	f7fd ffec 	bl	80045e0 <HAL_GetTick>
 8006608:	0002      	movs	r2, r0
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	1a9b      	subs	r3, r3, r2
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	18d3      	adds	r3, r2, r3
 8006612:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006614:	f7fd ffe4 	bl	80045e0 <HAL_GetTick>
 8006618:	0003      	movs	r3, r0
 800661a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800661c:	4b3a      	ldr	r3, [pc, #232]	; (8006708 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	015b      	lsls	r3, r3, #5
 8006622:	0d1b      	lsrs	r3, r3, #20
 8006624:	69fa      	ldr	r2, [r7, #28]
 8006626:	4353      	muls	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800662a:	e058      	b.n	80066de <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	3301      	adds	r3, #1
 8006630:	d055      	beq.n	80066de <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006632:	f7fd ffd5 	bl	80045e0 <HAL_GetTick>
 8006636:	0002      	movs	r2, r0
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	429a      	cmp	r2, r3
 8006640:	d902      	bls.n	8006648 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d142      	bne.n	80066ce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	21e0      	movs	r1, #224	; 0xe0
 8006654:	438a      	bics	r2, r1
 8006656:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	2382      	movs	r3, #130	; 0x82
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	429a      	cmp	r2, r3
 8006662:	d113      	bne.n	800668c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	689a      	ldr	r2, [r3, #8]
 8006668:	2380      	movs	r3, #128	; 0x80
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	429a      	cmp	r2, r3
 800666e:	d005      	beq.n	800667c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	2380      	movs	r3, #128	; 0x80
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	429a      	cmp	r2, r3
 800667a:	d107      	bne.n	800668c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2140      	movs	r1, #64	; 0x40
 8006688:	438a      	bics	r2, r1
 800668a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006690:	2380      	movs	r3, #128	; 0x80
 8006692:	019b      	lsls	r3, r3, #6
 8006694:	429a      	cmp	r2, r3
 8006696:	d110      	bne.n	80066ba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	491a      	ldr	r1, [pc, #104]	; (800670c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80066a4:	400a      	ands	r2, r1
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2180      	movs	r1, #128	; 0x80
 80066b4:	0189      	lsls	r1, r1, #6
 80066b6:	430a      	orrs	r2, r1
 80066b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2251      	movs	r2, #81	; 0x51
 80066be:	2101      	movs	r1, #1
 80066c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2250      	movs	r2, #80	; 0x50
 80066c6:	2100      	movs	r1, #0
 80066c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e017      	b.n	80066fe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	3b01      	subs	r3, #1
 80066dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	4013      	ands	r3, r2
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	425a      	negs	r2, r3
 80066ee:	4153      	adcs	r3, r2
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	001a      	movs	r2, r3
 80066f4:	1dfb      	adds	r3, r7, #7
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d197      	bne.n	800662c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	0018      	movs	r0, r3
 8006700:	46bd      	mov	sp, r7
 8006702:	b008      	add	sp, #32
 8006704:	bd80      	pop	{r7, pc}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	20000004 	.word	0x20000004
 800670c:	ffffdfff 	.word	0xffffdfff

08006710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800671c:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <SPI_EndRxTxTransaction+0x84>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	491d      	ldr	r1, [pc, #116]	; (8006798 <SPI_EndRxTxTransaction+0x88>)
 8006722:	0018      	movs	r0, r3
 8006724:	f7f9 fd0c 	bl	8000140 <__udivsi3>
 8006728:	0003      	movs	r3, r0
 800672a:	001a      	movs	r2, r3
 800672c:	0013      	movs	r3, r2
 800672e:	015b      	lsls	r3, r3, #5
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	189b      	adds	r3, r3, r2
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	2382      	movs	r3, #130	; 0x82
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	429a      	cmp	r2, r3
 8006744:	d112      	bne.n	800676c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	0013      	movs	r3, r2
 8006750:	2200      	movs	r2, #0
 8006752:	2180      	movs	r1, #128	; 0x80
 8006754:	f7ff ff4e 	bl	80065f4 <SPI_WaitFlagStateUntilTimeout>
 8006758:	1e03      	subs	r3, r0, #0
 800675a:	d016      	beq.n	800678a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006760:	2220      	movs	r2, #32
 8006762:	431a      	orrs	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e00f      	b.n	800678c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	3b01      	subs	r3, #1
 8006776:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	2280      	movs	r2, #128	; 0x80
 8006780:	4013      	ands	r3, r2
 8006782:	2b80      	cmp	r3, #128	; 0x80
 8006784:	d0f2      	beq.n	800676c <SPI_EndRxTxTransaction+0x5c>
 8006786:	e000      	b.n	800678a <SPI_EndRxTxTransaction+0x7a>
        break;
 8006788:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	0018      	movs	r0, r3
 800678e:	46bd      	mov	sp, r7
 8006790:	b006      	add	sp, #24
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000004 	.word	0x20000004
 8006798:	016e3600 	.word	0x016e3600

0800679c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80067a0:	4a06      	ldr	r2, [pc, #24]	; (80067bc <MX_FATFS_Init+0x20>)
 80067a2:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <MX_FATFS_Init+0x24>)
 80067a4:	0011      	movs	r1, r2
 80067a6:	0018      	movs	r0, r3
 80067a8:	f003 f982 	bl	8009ab0 <FATFS_LinkDriver>
 80067ac:	0003      	movs	r3, r0
 80067ae:	001a      	movs	r2, r3
 80067b0:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <MX_FATFS_Init+0x28>)
 80067b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80067b4:	46c0      	nop			; (mov r8, r8)
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	46c0      	nop			; (mov r8, r8)
 80067bc:	200002ec 	.word	0x200002ec
 80067c0:	20000010 	.word	0x20000010
 80067c4:	200002e8 	.word	0x200002e8

080067c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80067cc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80067ce:	0018      	movs	r0, r3
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	0002      	movs	r2, r0
 80067dc:	1dfb      	adds	r3, r7, #7
 80067de:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80067e0:	1dfb      	adds	r3, r7, #7
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	0018      	movs	r0, r3
 80067e6:	f7fc fc17 	bl	8003018 <SD_disk_initialize>
 80067ea:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 80067ec:	0018      	movs	r0, r3
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b002      	add	sp, #8
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	0002      	movs	r2, r0
 80067fc:	1dfb      	adds	r3, r7, #7
 80067fe:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006800:	1dfb      	adds	r3, r7, #7
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	0018      	movs	r0, r3
 8006806:	f7fc fd11 	bl	800322c <SD_disk_status>
 800680a:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 800680c:	0018      	movs	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	b002      	add	sp, #8
 8006812:	bd80      	pop	{r7, pc}

08006814 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006814:	b5b0      	push	{r4, r5, r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	607a      	str	r2, [r7, #4]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	250f      	movs	r5, #15
 8006822:	197b      	adds	r3, r7, r5
 8006824:	1c02      	adds	r2, r0, #0
 8006826:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006828:	683c      	ldr	r4, [r7, #0]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	197b      	adds	r3, r7, r5
 8006830:	7818      	ldrb	r0, [r3, #0]
 8006832:	0023      	movs	r3, r4
 8006834:	f7fc fd10 	bl	8003258 <SD_disk_read>
 8006838:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 800683a:	0018      	movs	r0, r3
 800683c:	46bd      	mov	sp, r7
 800683e:	b004      	add	sp, #16
 8006840:	bdb0      	pop	{r4, r5, r7, pc}

08006842 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006842:	b5b0      	push	{r4, r5, r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	250f      	movs	r5, #15
 8006850:	197b      	adds	r3, r7, r5
 8006852:	1c02      	adds	r2, r0, #0
 8006854:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006856:	683c      	ldr	r4, [r7, #0]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	197b      	adds	r3, r7, r5
 800685e:	7818      	ldrb	r0, [r3, #0]
 8006860:	0023      	movs	r3, r4
 8006862:	f7fc fd69 	bl	8003338 <SD_disk_write>
 8006866:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8006868:	0018      	movs	r0, r3
 800686a:	46bd      	mov	sp, r7
 800686c:	b004      	add	sp, #16
 800686e:	bdb0      	pop	{r4, r5, r7, pc}

08006870 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	603a      	str	r2, [r7, #0]
 8006878:	1dfb      	adds	r3, r7, #7
 800687a:	1c02      	adds	r2, r0, #0
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	1dbb      	adds	r3, r7, #6
 8006880:	1c0a      	adds	r2, r1, #0
 8006882:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	1dbb      	adds	r3, r7, #6
 8006888:	7819      	ldrb	r1, [r3, #0]
 800688a:	1dfb      	adds	r3, r7, #7
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	0018      	movs	r0, r3
 8006890:	f7fc fdda 	bl	8003448 <SD_disk_ioctl>
 8006894:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8006896:	0018      	movs	r0, r3
 8006898:	46bd      	mov	sp, r7
 800689a:	b002      	add	sp, #8
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80068a0:	b5b0      	push	{r4, r5, r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	0002      	movs	r2, r0
 80068a8:	1dfb      	adds	r3, r7, #7
 80068aa:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80068ac:	1dfb      	adds	r3, r7, #7
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	4a0b      	ldr	r2, [pc, #44]	; (80068e0 <disk_status+0x40>)
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	18d3      	adds	r3, r2, r3
 80068b6:	3304      	adds	r3, #4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	1dfa      	adds	r2, r7, #7
 80068be:	7812      	ldrb	r2, [r2, #0]
 80068c0:	4907      	ldr	r1, [pc, #28]	; (80068e0 <disk_status+0x40>)
 80068c2:	188a      	adds	r2, r1, r2
 80068c4:	7a12      	ldrb	r2, [r2, #8]
 80068c6:	250f      	movs	r5, #15
 80068c8:	197c      	adds	r4, r7, r5
 80068ca:	0010      	movs	r0, r2
 80068cc:	4798      	blx	r3
 80068ce:	0003      	movs	r3, r0
 80068d0:	7023      	strb	r3, [r4, #0]
  return stat;
 80068d2:	197b      	adds	r3, r7, r5
 80068d4:	781b      	ldrb	r3, [r3, #0]
}
 80068d6:	0018      	movs	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	b004      	add	sp, #16
 80068dc:	bdb0      	pop	{r4, r5, r7, pc}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	20000518 	.word	0x20000518

080068e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80068e4:	b590      	push	{r4, r7, lr}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	0002      	movs	r2, r0
 80068ec:	1dfb      	adds	r3, r7, #7
 80068ee:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80068f0:	200f      	movs	r0, #15
 80068f2:	183b      	adds	r3, r7, r0
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80068f8:	1dfb      	adds	r3, r7, #7
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	4a10      	ldr	r2, [pc, #64]	; (8006940 <disk_initialize+0x5c>)
 80068fe:	5cd3      	ldrb	r3, [r2, r3]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d116      	bne.n	8006932 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8006904:	1dfb      	adds	r3, r7, #7
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	4a0d      	ldr	r2, [pc, #52]	; (8006940 <disk_initialize+0x5c>)
 800690a:	2101      	movs	r1, #1
 800690c:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800690e:	1dfb      	adds	r3, r7, #7
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	4a0b      	ldr	r2, [pc, #44]	; (8006940 <disk_initialize+0x5c>)
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	18d3      	adds	r3, r2, r3
 8006918:	3304      	adds	r3, #4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	1dfa      	adds	r2, r7, #7
 8006920:	7812      	ldrb	r2, [r2, #0]
 8006922:	4907      	ldr	r1, [pc, #28]	; (8006940 <disk_initialize+0x5c>)
 8006924:	188a      	adds	r2, r1, r2
 8006926:	7a12      	ldrb	r2, [r2, #8]
 8006928:	183c      	adds	r4, r7, r0
 800692a:	0010      	movs	r0, r2
 800692c:	4798      	blx	r3
 800692e:	0003      	movs	r3, r0
 8006930:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8006932:	230f      	movs	r3, #15
 8006934:	18fb      	adds	r3, r7, r3
 8006936:	781b      	ldrb	r3, [r3, #0]
}
 8006938:	0018      	movs	r0, r3
 800693a:	46bd      	mov	sp, r7
 800693c:	b005      	add	sp, #20
 800693e:	bd90      	pop	{r4, r7, pc}
 8006940:	20000518 	.word	0x20000518

08006944 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	210f      	movs	r1, #15
 8006952:	187b      	adds	r3, r7, r1
 8006954:	1c02      	adds	r2, r0, #0
 8006956:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006958:	187b      	adds	r3, r7, r1
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	4a0c      	ldr	r2, [pc, #48]	; (8006990 <disk_read+0x4c>)
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	18d3      	adds	r3, r2, r3
 8006962:	3304      	adds	r3, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689d      	ldr	r5, [r3, #8]
 8006968:	187b      	adds	r3, r7, r1
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	4a08      	ldr	r2, [pc, #32]	; (8006990 <disk_read+0x4c>)
 800696e:	18d3      	adds	r3, r2, r3
 8006970:	7a18      	ldrb	r0, [r3, #8]
 8006972:	2617      	movs	r6, #23
 8006974:	19bc      	adds	r4, r7, r6
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	47a8      	blx	r5
 800697e:	0003      	movs	r3, r0
 8006980:	7023      	strb	r3, [r4, #0]
  return res;
 8006982:	19bb      	adds	r3, r7, r6
 8006984:	781b      	ldrb	r3, [r3, #0]
}
 8006986:	0018      	movs	r0, r3
 8006988:	46bd      	mov	sp, r7
 800698a:	b007      	add	sp, #28
 800698c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	20000518 	.word	0x20000518

08006994 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	210f      	movs	r1, #15
 80069a2:	187b      	adds	r3, r7, r1
 80069a4:	1c02      	adds	r2, r0, #0
 80069a6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80069a8:	187b      	adds	r3, r7, r1
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	4a0c      	ldr	r2, [pc, #48]	; (80069e0 <disk_write+0x4c>)
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	18d3      	adds	r3, r2, r3
 80069b2:	3304      	adds	r3, #4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68dd      	ldr	r5, [r3, #12]
 80069b8:	187b      	adds	r3, r7, r1
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	4a08      	ldr	r2, [pc, #32]	; (80069e0 <disk_write+0x4c>)
 80069be:	18d3      	adds	r3, r2, r3
 80069c0:	7a18      	ldrb	r0, [r3, #8]
 80069c2:	2617      	movs	r6, #23
 80069c4:	19bc      	adds	r4, r7, r6
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	47a8      	blx	r5
 80069ce:	0003      	movs	r3, r0
 80069d0:	7023      	strb	r3, [r4, #0]
  return res;
 80069d2:	19bb      	adds	r3, r7, r6
 80069d4:	781b      	ldrb	r3, [r3, #0]
}
 80069d6:	0018      	movs	r0, r3
 80069d8:	46bd      	mov	sp, r7
 80069da:	b007      	add	sp, #28
 80069dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	20000518 	.word	0x20000518

080069e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80069e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	603a      	str	r2, [r7, #0]
 80069ec:	1dfb      	adds	r3, r7, #7
 80069ee:	1c02      	adds	r2, r0, #0
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	1dbb      	adds	r3, r7, #6
 80069f4:	1c0a      	adds	r2, r1, #0
 80069f6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80069f8:	1dfb      	adds	r3, r7, #7
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	4a0c      	ldr	r2, [pc, #48]	; (8006a30 <disk_ioctl+0x4c>)
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	18d3      	adds	r3, r2, r3
 8006a02:	3304      	adds	r3, #4
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	1dfa      	adds	r2, r7, #7
 8006a0a:	7812      	ldrb	r2, [r2, #0]
 8006a0c:	4908      	ldr	r1, [pc, #32]	; (8006a30 <disk_ioctl+0x4c>)
 8006a0e:	188a      	adds	r2, r1, r2
 8006a10:	7a10      	ldrb	r0, [r2, #8]
 8006a12:	260f      	movs	r6, #15
 8006a14:	19bc      	adds	r4, r7, r6
 8006a16:	683d      	ldr	r5, [r7, #0]
 8006a18:	1dba      	adds	r2, r7, #6
 8006a1a:	7811      	ldrb	r1, [r2, #0]
 8006a1c:	002a      	movs	r2, r5
 8006a1e:	4798      	blx	r3
 8006a20:	0003      	movs	r3, r0
 8006a22:	7023      	strb	r3, [r4, #0]
  return res;
 8006a24:	19bb      	adds	r3, r7, r6
 8006a26:	781b      	ldrb	r3, [r3, #0]
}
 8006a28:	0018      	movs	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b005      	add	sp, #20
 8006a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a30:	20000518 	.word	0x20000518

08006a34 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	781a      	ldrb	r2, [r3, #0]
 8006a42:	210e      	movs	r1, #14
 8006a44:	187b      	adds	r3, r7, r1
 8006a46:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8006a48:	187b      	adds	r3, r7, r1
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	b21a      	sxth	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	b21b      	sxth	r3, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b21a      	sxth	r2, r3
 8006a5a:	187b      	adds	r3, r7, r1
 8006a5c:	801a      	strh	r2, [r3, #0]
	return rv;
 8006a5e:	187b      	adds	r3, r7, r1
 8006a60:	881b      	ldrh	r3, [r3, #0]
}
 8006a62:	0018      	movs	r0, r3
 8006a64:	46bd      	mov	sp, r7
 8006a66:	b004      	add	sp, #16
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3303      	adds	r3, #3
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	3202      	adds	r2, #2
 8006a82:	7812      	ldrb	r2, [r2, #0]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	3201      	adds	r2, #1
 8006a90:	7812      	ldrb	r2, [r2, #0]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	7812      	ldrb	r2, [r2, #0]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
	return rv;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b004      	add	sp, #16
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	000a      	movs	r2, r1
 8006ab6:	1cbb      	adds	r3, r7, #2
 8006ab8:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	1cba      	adds	r2, r7, #2
 8006ac2:	8812      	ldrh	r2, [r2, #0]
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	1cbb      	adds	r3, r7, #2
 8006aca:	1cba      	adds	r2, r7, #2
 8006acc:	8812      	ldrh	r2, [r2, #0]
 8006ace:	0a12      	lsrs	r2, r2, #8
 8006ad0:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	1cba      	adds	r2, r7, #2
 8006ada:	8812      	ldrh	r2, [r2, #0]
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
}
 8006ae0:	46c0      	nop			; (mov r8, r8)
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b002      	add	sp, #8
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	0a1b      	lsrs	r3, r3, #8
 8006b02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	1c5a      	adds	r2, r3, #1
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	701a      	strb	r2, [r3, #0]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	0a1b      	lsrs	r3, r3, #8
 8006b14:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]
}
 8006b34:	46c0      	nop			; (mov r8, r8)
 8006b36:	46bd      	mov	sp, r7
 8006b38:	b002      	add	sp, #8
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00d      	beq.n	8006b72 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	1c53      	adds	r3, r2, #1
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	1c59      	adds	r1, r3, #1
 8006b60:	6179      	str	r1, [r7, #20]
 8006b62:	7812      	ldrb	r2, [r2, #0]
 8006b64:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f1      	bne.n	8006b56 <mem_cpy+0x1a>
	}
}
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	46bd      	mov	sp, r7
 8006b76:	b006      	add	sp, #24
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b086      	sub	sp, #24
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	60b9      	str	r1, [r7, #8]
 8006b84:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	617a      	str	r2, [r7, #20]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f3      	bne.n	8006b8a <mem_set+0x10>
}
 8006ba2:	46c0      	nop			; (mov r8, r8)
 8006ba4:	46c0      	nop			; (mov r8, r8)
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b006      	add	sp, #24
 8006baa:	bd80      	pop	{r7, pc}

08006bac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	61fb      	str	r3, [r7, #28]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	61fa      	str	r2, [r7, #28]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	0019      	movs	r1, r3
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	61ba      	str	r2, [r7, #24]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	1acb      	subs	r3, r1, r3
 8006bd8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <mem_cmp+0x40>
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0eb      	beq.n	8006bc4 <mem_cmp+0x18>

	return r;
 8006bec:	697b      	ldr	r3, [r7, #20]
}
 8006bee:	0018      	movs	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	b008      	add	sp, #32
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b082      	sub	sp, #8
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006c00:	e002      	b.n	8006c08 <chk_chr+0x12>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3301      	adds	r3, #1
 8006c06:	607b      	str	r3, [r7, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <chk_chr+0x26>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	001a      	movs	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d1f2      	bne.n	8006c02 <chk_chr+0xc>
	return *str;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	781b      	ldrb	r3, [r3, #0]
}
 8006c20:	0018      	movs	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b002      	add	sp, #8
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e027      	b.n	8006c8c <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8006c3c:	4b25      	ldr	r3, [pc, #148]	; (8006cd4 <chk_lock+0xac>)
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	0112      	lsls	r2, r2, #4
 8006c42:	58d3      	ldr	r3, [r2, r3]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01c      	beq.n	8006c82 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c48:	4b22      	ldr	r3, [pc, #136]	; (8006cd4 <chk_lock+0xac>)
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	0112      	lsls	r2, r2, #4
 8006c4e:	58d2      	ldr	r2, [r2, r3]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d116      	bne.n	8006c86 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8006c58:	4a1e      	ldr	r2, [pc, #120]	; (8006cd4 <chk_lock+0xac>)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	18d3      	adds	r3, r2, r3
 8006c60:	3304      	adds	r3, #4
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d10c      	bne.n	8006c86 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006c6c:	4a19      	ldr	r2, [pc, #100]	; (8006cd4 <chk_lock+0xac>)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	18d3      	adds	r3, r2, r3
 8006c74:	3308      	adds	r3, #8
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d102      	bne.n	8006c86 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006c80:	e007      	b.n	8006c92 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8006c82:	2301      	movs	r3, #1
 8006c84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d9d4      	bls.n	8006c3c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d109      	bne.n	8006cac <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d102      	bne.n	8006ca4 <chk_lock+0x7c>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d101      	bne.n	8006ca8 <chk_lock+0x80>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	e011      	b.n	8006ccc <chk_lock+0xa4>
 8006ca8:	2312      	movs	r3, #18
 8006caa:	e00f      	b.n	8006ccc <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <chk_lock+0x9e>
 8006cb2:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <chk_lock+0xac>)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	18d3      	adds	r3, r2, r3
 8006cba:	330c      	adds	r3, #12
 8006cbc:	881a      	ldrh	r2, [r3, #0]
 8006cbe:	2380      	movs	r3, #128	; 0x80
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d101      	bne.n	8006cca <chk_lock+0xa2>
 8006cc6:	2310      	movs	r3, #16
 8006cc8:	e000      	b.n	8006ccc <chk_lock+0xa4>
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	0018      	movs	r0, r3
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b004      	add	sp, #16
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	200002f8 	.word	0x200002f8

08006cd8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]
 8006ce2:	e002      	b.n	8006cea <enq_lock+0x12>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d805      	bhi.n	8006cfc <enq_lock+0x24>
 8006cf0:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <enq_lock+0x38>)
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	0112      	lsls	r2, r2, #4
 8006cf6:	58d3      	ldr	r3, [r2, r3]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f3      	bne.n	8006ce4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3b02      	subs	r3, #2
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	4193      	sbcs	r3, r2
 8006d04:	b2db      	uxtb	r3, r3
}
 8006d06:	0018      	movs	r0, r3
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b002      	add	sp, #8
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	200002f8 	.word	0x200002f8

08006d14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	e01e      	b.n	8006d62 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8006d24:	4b3f      	ldr	r3, [pc, #252]	; (8006e24 <inc_lock+0x110>)
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	0112      	lsls	r2, r2, #4
 8006d2a:	58d2      	ldr	r2, [r2, r3]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d113      	bne.n	8006d5c <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8006d34:	4a3b      	ldr	r2, [pc, #236]	; (8006e24 <inc_lock+0x110>)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	18d3      	adds	r3, r2, r3
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d109      	bne.n	8006d5c <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8006d48:	4a36      	ldr	r2, [pc, #216]	; (8006e24 <inc_lock+0x110>)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	18d3      	adds	r3, r2, r3
 8006d50:	3308      	adds	r3, #8
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d006      	beq.n	8006d6a <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d9dd      	bls.n	8006d24 <inc_lock+0x10>
 8006d68:	e000      	b.n	8006d6c <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8006d6a:	46c0      	nop			; (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d130      	bne.n	8006dd4 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	e002      	b.n	8006d7e <inc_lock+0x6a>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d805      	bhi.n	8006d90 <inc_lock+0x7c>
 8006d84:	4b27      	ldr	r3, [pc, #156]	; (8006e24 <inc_lock+0x110>)
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	0112      	lsls	r2, r2, #4
 8006d8a:	58d3      	ldr	r3, [r2, r3]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1f3      	bne.n	8006d78 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d101      	bne.n	8006d9a <inc_lock+0x86>
 8006d96:	2300      	movs	r3, #0
 8006d98:	e03f      	b.n	8006e1a <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6819      	ldr	r1, [r3, #0]
 8006d9e:	4b21      	ldr	r3, [pc, #132]	; (8006e24 <inc_lock+0x110>)
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	0112      	lsls	r2, r2, #4
 8006da4:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	491e      	ldr	r1, [pc, #120]	; (8006e24 <inc_lock+0x110>)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	18cb      	adds	r3, r1, r3
 8006db2:	3304      	adds	r3, #4
 8006db4:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	695a      	ldr	r2, [r3, #20]
 8006dba:	491a      	ldr	r1, [pc, #104]	; (8006e24 <inc_lock+0x110>)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	18cb      	adds	r3, r1, r3
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006dc6:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <inc_lock+0x110>)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	18d3      	adds	r3, r2, r3
 8006dce:	330c      	adds	r3, #12
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d009      	beq.n	8006dee <inc_lock+0xda>
 8006dda:	4a12      	ldr	r2, [pc, #72]	; (8006e24 <inc_lock+0x110>)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	18d3      	adds	r3, r2, r3
 8006de2:	330c      	adds	r3, #12
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <inc_lock+0xda>
 8006dea:	2300      	movs	r3, #0
 8006dec:	e015      	b.n	8006e1a <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d108      	bne.n	8006e06 <inc_lock+0xf2>
 8006df4:	4a0b      	ldr	r2, [pc, #44]	; (8006e24 <inc_lock+0x110>)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	18d3      	adds	r3, r2, r3
 8006dfc:	330c      	adds	r3, #12
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	e001      	b.n	8006e0a <inc_lock+0xf6>
 8006e06:	2380      	movs	r3, #128	; 0x80
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	4906      	ldr	r1, [pc, #24]	; (8006e24 <inc_lock+0x110>)
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	0112      	lsls	r2, r2, #4
 8006e10:	188a      	adds	r2, r1, r2
 8006e12:	320c      	adds	r2, #12
 8006e14:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
}
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b004      	add	sp, #16
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	200002f8 	.word	0x200002f8

08006e28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d832      	bhi.n	8006ea2 <dec_lock+0x7a>
		n = Files[i].ctr;
 8006e3c:	200e      	movs	r0, #14
 8006e3e:	183b      	adds	r3, r7, r0
 8006e40:	491d      	ldr	r1, [pc, #116]	; (8006eb8 <dec_lock+0x90>)
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	0112      	lsls	r2, r2, #4
 8006e46:	188a      	adds	r2, r1, r2
 8006e48:	320c      	adds	r2, #12
 8006e4a:	8812      	ldrh	r2, [r2, #0]
 8006e4c:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006e4e:	183b      	adds	r3, r7, r0
 8006e50:	881a      	ldrh	r2, [r3, #0]
 8006e52:	2380      	movs	r3, #128	; 0x80
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d102      	bne.n	8006e60 <dec_lock+0x38>
 8006e5a:	183b      	adds	r3, r7, r0
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006e60:	210e      	movs	r1, #14
 8006e62:	187b      	adds	r3, r7, r1
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d004      	beq.n	8006e74 <dec_lock+0x4c>
 8006e6a:	187b      	adds	r3, r7, r1
 8006e6c:	881a      	ldrh	r2, [r3, #0]
 8006e6e:	187b      	adds	r3, r7, r1
 8006e70:	3a01      	subs	r2, #1
 8006e72:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8006e74:	4a10      	ldr	r2, [pc, #64]	; (8006eb8 <dec_lock+0x90>)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	011b      	lsls	r3, r3, #4
 8006e7a:	18d3      	adds	r3, r2, r3
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	210e      	movs	r1, #14
 8006e80:	187a      	adds	r2, r7, r1
 8006e82:	8812      	ldrh	r2, [r2, #0]
 8006e84:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006e86:	187b      	adds	r3, r7, r1
 8006e88:	881b      	ldrh	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d104      	bne.n	8006e98 <dec_lock+0x70>
 8006e8e:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <dec_lock+0x90>)
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	0112      	lsls	r2, r2, #4
 8006e94:	2100      	movs	r1, #0
 8006e96:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8006e98:	230d      	movs	r3, #13
 8006e9a:	18fb      	adds	r3, r7, r3
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	701a      	strb	r2, [r3, #0]
 8006ea0:	e003      	b.n	8006eaa <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006ea2:	230d      	movs	r3, #13
 8006ea4:	18fb      	adds	r3, r7, r3
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8006eaa:	230d      	movs	r3, #13
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	781b      	ldrb	r3, [r3, #0]
}
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	b004      	add	sp, #16
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	200002f8 	.word	0x200002f8

08006ebc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	60fb      	str	r3, [r7, #12]
 8006ec8:	e00e      	b.n	8006ee8 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006eca:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <clear_lock+0x3c>)
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	0112      	lsls	r2, r2, #4
 8006ed0:	58d3      	ldr	r3, [r2, r3]
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d104      	bne.n	8006ee2 <clear_lock+0x26>
 8006ed8:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <clear_lock+0x3c>)
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	0112      	lsls	r2, r2, #4
 8006ede:	2100      	movs	r1, #0
 8006ee0:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d9ed      	bls.n	8006eca <clear_lock+0xe>
	}
}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	46c0      	nop			; (mov r8, r8)
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	b004      	add	sp, #16
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	200002f8 	.word	0x200002f8

08006efc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006efc:	b590      	push	{r4, r7, lr}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006f04:	240f      	movs	r4, #15
 8006f06:	193b      	adds	r3, r7, r4
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	78db      	ldrb	r3, [r3, #3]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d034      	beq.n	8006f7e <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f18:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	7858      	ldrb	r0, [r3, #1]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3338      	adds	r3, #56	; 0x38
 8006f22:	0019      	movs	r1, r3
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	2301      	movs	r3, #1
 8006f28:	f7ff fd34 	bl	8006994 <disk_write>
 8006f2c:	1e03      	subs	r3, r0, #0
 8006f2e:	d003      	beq.n	8006f38 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8006f30:	193b      	adds	r3, r7, r4
 8006f32:	2201      	movs	r2, #1
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	e022      	b.n	8006f7e <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	1ad2      	subs	r2, r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d217      	bcs.n	8006f7e <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	789b      	ldrb	r3, [r3, #2]
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	e010      	b.n	8006f78 <sync_window+0x7c>
					wsect += fs->fsize;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	18d3      	adds	r3, r2, r3
 8006f5e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	7858      	ldrb	r0, [r3, #1]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3338      	adds	r3, #56	; 0x38
 8006f68:	0019      	movs	r1, r3
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	f7ff fd11 	bl	8006994 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d8eb      	bhi.n	8006f56 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8006f7e:	230f      	movs	r3, #15
 8006f80:	18fb      	adds	r3, r7, r3
 8006f82:	781b      	ldrb	r3, [r3, #0]
}
 8006f84:	0018      	movs	r0, r3
 8006f86:	46bd      	mov	sp, r7
 8006f88:	b007      	add	sp, #28
 8006f8a:	bd90      	pop	{r4, r7, pc}

08006f8c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006f8c:	b5b0      	push	{r4, r5, r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006f96:	250f      	movs	r5, #15
 8006f98:	197b      	adds	r3, r7, r5
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d01f      	beq.n	8006fe8 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006fa8:	197c      	adds	r4, r7, r5
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	0018      	movs	r0, r3
 8006fae:	f7ff ffa5 	bl	8006efc <sync_window>
 8006fb2:	0003      	movs	r3, r0
 8006fb4:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006fb6:	002c      	movs	r4, r5
 8006fb8:	193b      	adds	r3, r7, r4
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d113      	bne.n	8006fe8 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	7858      	ldrb	r0, [r3, #1]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3338      	adds	r3, #56	; 0x38
 8006fc8:	0019      	movs	r1, r3
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f7ff fcb9 	bl	8006944 <disk_read>
 8006fd2:	1e03      	subs	r3, r0, #0
 8006fd4:	d005      	beq.n	8006fe2 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	425b      	negs	r3, r3
 8006fda:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006fdc:	193b      	adds	r3, r7, r4
 8006fde:	2201      	movs	r2, #1
 8006fe0:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8006fe8:	230f      	movs	r3, #15
 8006fea:	18fb      	adds	r3, r7, r3
 8006fec:	781b      	ldrb	r3, [r3, #0]
}
 8006fee:	0018      	movs	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	b004      	add	sp, #16
 8006ff4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006ff8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006ff8:	b5b0      	push	{r4, r5, r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007000:	250f      	movs	r5, #15
 8007002:	197c      	adds	r4, r7, r5
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	0018      	movs	r0, r3
 8007008:	f7ff ff78 	bl	8006efc <sync_window>
 800700c:	0003      	movs	r3, r0
 800700e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007010:	197b      	adds	r3, r7, r5
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d15e      	bne.n	80070d6 <sync_fs+0xde>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d14d      	bne.n	80070bc <sync_fs+0xc4>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	791b      	ldrb	r3, [r3, #4]
 8007024:	2b01      	cmp	r3, #1
 8007026:	d149      	bne.n	80070bc <sync_fs+0xc4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	3338      	adds	r3, #56	; 0x38
 800702c:	0018      	movs	r0, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	899b      	ldrh	r3, [r3, #12]
 8007032:	001a      	movs	r2, r3
 8007034:	2100      	movs	r1, #0
 8007036:	f7ff fda0 	bl	8006b7a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3338      	adds	r3, #56	; 0x38
 800703e:	33ff      	adds	r3, #255	; 0xff
 8007040:	33ff      	adds	r3, #255	; 0xff
 8007042:	4a28      	ldr	r2, [pc, #160]	; (80070e4 <sync_fs+0xec>)
 8007044:	0011      	movs	r1, r2
 8007046:	0018      	movs	r0, r3
 8007048:	f7ff fd30 	bl	8006aac <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3338      	adds	r3, #56	; 0x38
 8007050:	4a25      	ldr	r2, [pc, #148]	; (80070e8 <sync_fs+0xf0>)
 8007052:	0011      	movs	r1, r2
 8007054:	0018      	movs	r0, r3
 8007056:	f7ff fd47 	bl	8006ae8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3338      	adds	r3, #56	; 0x38
 800705e:	33e5      	adds	r3, #229	; 0xe5
 8007060:	33ff      	adds	r3, #255	; 0xff
 8007062:	4a22      	ldr	r2, [pc, #136]	; (80070ec <sync_fs+0xf4>)
 8007064:	0011      	movs	r1, r2
 8007066:	0018      	movs	r0, r3
 8007068:	f7ff fd3e 	bl	8006ae8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3338      	adds	r3, #56	; 0x38
 8007070:	33e9      	adds	r3, #233	; 0xe9
 8007072:	33ff      	adds	r3, #255	; 0xff
 8007074:	001a      	movs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	0019      	movs	r1, r3
 800707c:	0010      	movs	r0, r2
 800707e:	f7ff fd33 	bl	8006ae8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3338      	adds	r3, #56	; 0x38
 8007086:	33ed      	adds	r3, #237	; 0xed
 8007088:	33ff      	adds	r3, #255	; 0xff
 800708a:	001a      	movs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	0019      	movs	r1, r3
 8007092:	0010      	movs	r0, r2
 8007094:	f7ff fd28 	bl	8006ae8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7858      	ldrb	r0, [r3, #1]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3338      	adds	r3, #56	; 0x38
 80070aa:	0019      	movs	r1, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070b0:	2301      	movs	r3, #1
 80070b2:	f7ff fc6f 	bl	8006994 <disk_write>
			fs->fsi_flag = 0;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	785b      	ldrb	r3, [r3, #1]
 80070c0:	2200      	movs	r2, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7ff fc8d 	bl	80069e4 <disk_ioctl>
 80070ca:	1e03      	subs	r3, r0, #0
 80070cc:	d003      	beq.n	80070d6 <sync_fs+0xde>
 80070ce:	230f      	movs	r3, #15
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	2201      	movs	r2, #1
 80070d4:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80070d6:	230f      	movs	r3, #15
 80070d8:	18fb      	adds	r3, r7, r3
 80070da:	781b      	ldrb	r3, [r3, #0]
}
 80070dc:	0018      	movs	r0, r3
 80070de:	46bd      	mov	sp, r7
 80070e0:	b004      	add	sp, #16
 80070e2:	bdb0      	pop	{r4, r5, r7, pc}
 80070e4:	0000aa55 	.word	0x0000aa55
 80070e8:	41615252 	.word	0x41615252
 80070ec:	61417272 	.word	0x61417272

080070f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	3b02      	subs	r3, #2
 80070fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	3b02      	subs	r3, #2
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d301      	bcc.n	8007110 <clust2sect+0x20>
 800710c:	2300      	movs	r3, #0
 800710e:	e007      	b.n	8007120 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	895b      	ldrh	r3, [r3, #10]
 8007114:	001a      	movs	r2, r3
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	435a      	muls	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	18d3      	adds	r3, r2, r3
}
 8007120:	0018      	movs	r0, r3
 8007122:	46bd      	mov	sp, r7
 8007124:	b002      	add	sp, #8
 8007126:	bd80      	pop	{r7, pc}

08007128 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007128:	b590      	push	{r4, r7, lr}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d904      	bls.n	8007148 <get_fat+0x20>
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d302      	bcc.n	800714e <get_fat+0x26>
		val = 1;	/* Internal error */
 8007148:	2301      	movs	r3, #1
 800714a:	617b      	str	r3, [r7, #20]
 800714c:	e0c2      	b.n	80072d4 <get_fat+0x1ac>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800714e:	2301      	movs	r3, #1
 8007150:	425b      	negs	r3, r3
 8007152:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d100      	bne.n	800715e <get_fat+0x36>
 800715c:	e088      	b.n	8007270 <get_fat+0x148>
 800715e:	dd00      	ble.n	8007162 <get_fat+0x3a>
 8007160:	e0ae      	b.n	80072c0 <get_fat+0x198>
 8007162:	2b01      	cmp	r3, #1
 8007164:	d002      	beq.n	800716c <get_fat+0x44>
 8007166:	2b02      	cmp	r3, #2
 8007168:	d05c      	beq.n	8007224 <get_fat+0xfc>
 800716a:	e0a9      	b.n	80072c0 <get_fat+0x198>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	085b      	lsrs	r3, r3, #1
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	18d3      	adds	r3, r2, r3
 8007178:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	899b      	ldrh	r3, [r3, #12]
 8007182:	0019      	movs	r1, r3
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7f8 ffdb 	bl	8000140 <__udivsi3>
 800718a:	0003      	movs	r3, r0
 800718c:	18e2      	adds	r2, r4, r3
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	0011      	movs	r1, r2
 8007192:	0018      	movs	r0, r3
 8007194:	f7ff fefa 	bl	8006f8c <move_window>
 8007198:	1e03      	subs	r3, r0, #0
 800719a:	d000      	beq.n	800719e <get_fat+0x76>
 800719c:	e093      	b.n	80072c6 <get_fat+0x19e>
			wc = fs->win[bc++ % SS(fs)];
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	60fa      	str	r2, [r7, #12]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	8992      	ldrh	r2, [r2, #12]
 80071a8:	0011      	movs	r1, r2
 80071aa:	0018      	movs	r0, r3
 80071ac:	f7f9 f84e 	bl	800024c <__aeabi_uidivmod>
 80071b0:	000b      	movs	r3, r1
 80071b2:	0019      	movs	r1, r3
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2238      	movs	r2, #56	; 0x38
 80071b8:	185b      	adds	r3, r3, r1
 80071ba:	189b      	adds	r3, r3, r2
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	899b      	ldrh	r3, [r3, #12]
 80071c8:	0019      	movs	r1, r3
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7f8 ffb8 	bl	8000140 <__udivsi3>
 80071d0:	0003      	movs	r3, r0
 80071d2:	18e2      	adds	r2, r4, r3
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	0011      	movs	r1, r2
 80071d8:	0018      	movs	r0, r3
 80071da:	f7ff fed7 	bl	8006f8c <move_window>
 80071de:	1e03      	subs	r3, r0, #0
 80071e0:	d000      	beq.n	80071e4 <get_fat+0xbc>
 80071e2:	e072      	b.n	80072ca <get_fat+0x1a2>
			wc |= fs->win[bc % SS(fs)] << 8;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	899b      	ldrh	r3, [r3, #12]
 80071e8:	001a      	movs	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	0011      	movs	r1, r2
 80071ee:	0018      	movs	r0, r3
 80071f0:	f7f9 f82c 	bl	800024c <__aeabi_uidivmod>
 80071f4:	000b      	movs	r3, r1
 80071f6:	0019      	movs	r1, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	2238      	movs	r2, #56	; 0x38
 80071fc:	185b      	adds	r3, r3, r1
 80071fe:	189b      	adds	r3, r3, r2
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	021b      	lsls	r3, r3, #8
 8007204:	001a      	movs	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	4313      	orrs	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2201      	movs	r2, #1
 8007210:	4013      	ands	r3, r2
 8007212:	d002      	beq.n	800721a <get_fat+0xf2>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	e002      	b.n	8007220 <get_fat+0xf8>
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	051b      	lsls	r3, r3, #20
 800721e:	0d1b      	lsrs	r3, r3, #20
 8007220:	617b      	str	r3, [r7, #20]
			break;
 8007222:	e057      	b.n	80072d4 <get_fat+0x1ac>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	899b      	ldrh	r3, [r3, #12]
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	b29b      	uxth	r3, r3
 8007230:	0019      	movs	r1, r3
 8007232:	6838      	ldr	r0, [r7, #0]
 8007234:	f7f8 ff84 	bl	8000140 <__udivsi3>
 8007238:	0003      	movs	r3, r0
 800723a:	18e2      	adds	r2, r4, r3
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	0011      	movs	r1, r2
 8007240:	0018      	movs	r0, r3
 8007242:	f7ff fea3 	bl	8006f8c <move_window>
 8007246:	1e03      	subs	r3, r0, #0
 8007248:	d141      	bne.n	80072ce <get_fat+0x1a6>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	3338      	adds	r3, #56	; 0x38
 800724e:	001c      	movs	r4, r3
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	005a      	lsls	r2, r3, #1
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	899b      	ldrh	r3, [r3, #12]
 8007258:	0019      	movs	r1, r3
 800725a:	0010      	movs	r0, r2
 800725c:	f7f8 fff6 	bl	800024c <__aeabi_uidivmod>
 8007260:	000b      	movs	r3, r1
 8007262:	18e3      	adds	r3, r4, r3
 8007264:	0018      	movs	r0, r3
 8007266:	f7ff fbe5 	bl	8006a34 <ld_word>
 800726a:	0003      	movs	r3, r0
 800726c:	617b      	str	r3, [r7, #20]
			break;
 800726e:	e031      	b.n	80072d4 <get_fat+0x1ac>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	899b      	ldrh	r3, [r3, #12]
 8007278:	089b      	lsrs	r3, r3, #2
 800727a:	b29b      	uxth	r3, r3
 800727c:	0019      	movs	r1, r3
 800727e:	6838      	ldr	r0, [r7, #0]
 8007280:	f7f8 ff5e 	bl	8000140 <__udivsi3>
 8007284:	0003      	movs	r3, r0
 8007286:	18e2      	adds	r2, r4, r3
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	0011      	movs	r1, r2
 800728c:	0018      	movs	r0, r3
 800728e:	f7ff fe7d 	bl	8006f8c <move_window>
 8007292:	1e03      	subs	r3, r0, #0
 8007294:	d11d      	bne.n	80072d2 <get_fat+0x1aa>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	3338      	adds	r3, #56	; 0x38
 800729a:	001c      	movs	r4, r3
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	009a      	lsls	r2, r3, #2
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	899b      	ldrh	r3, [r3, #12]
 80072a4:	0019      	movs	r1, r3
 80072a6:	0010      	movs	r0, r2
 80072a8:	f7f8 ffd0 	bl	800024c <__aeabi_uidivmod>
 80072ac:	000b      	movs	r3, r1
 80072ae:	18e3      	adds	r3, r4, r3
 80072b0:	0018      	movs	r0, r3
 80072b2:	f7ff fbda 	bl	8006a6a <ld_dword>
 80072b6:	0003      	movs	r3, r0
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	091b      	lsrs	r3, r3, #4
 80072bc:	617b      	str	r3, [r7, #20]
			break;
 80072be:	e009      	b.n	80072d4 <get_fat+0x1ac>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80072c0:	2301      	movs	r3, #1
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	e006      	b.n	80072d4 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	e004      	b.n	80072d4 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	e002      	b.n	80072d4 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	e000      	b.n	80072d4 <get_fat+0x1ac>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80072d2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return val;
 80072d4:	697b      	ldr	r3, [r7, #20]
}
 80072d6:	0018      	movs	r0, r3
 80072d8:	46bd      	mov	sp, r7
 80072da:	b007      	add	sp, #28
 80072dc:	bd90      	pop	{r4, r7, pc}

080072de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80072de:	b5b0      	push	{r4, r5, r7, lr}
 80072e0:	b088      	sub	sp, #32
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	60f8      	str	r0, [r7, #12]
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80072ea:	231f      	movs	r3, #31
 80072ec:	18fb      	adds	r3, r7, r3
 80072ee:	2202      	movs	r2, #2
 80072f0:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d800      	bhi.n	80072fa <put_fat+0x1c>
 80072f8:	e11a      	b.n	8007530 <put_fat+0x252>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	429a      	cmp	r2, r3
 8007302:	d300      	bcc.n	8007306 <put_fat+0x28>
 8007304:	e114      	b.n	8007530 <put_fat+0x252>
		switch (fs->fs_type) {
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b03      	cmp	r3, #3
 800730c:	d100      	bne.n	8007310 <put_fat+0x32>
 800730e:	e0c1      	b.n	8007494 <put_fat+0x1b6>
 8007310:	dd00      	ble.n	8007314 <put_fat+0x36>
 8007312:	e10d      	b.n	8007530 <put_fat+0x252>
 8007314:	2b01      	cmp	r3, #1
 8007316:	d003      	beq.n	8007320 <put_fat+0x42>
 8007318:	2b02      	cmp	r3, #2
 800731a:	d100      	bne.n	800731e <put_fat+0x40>
 800731c:	e08a      	b.n	8007434 <put_fat+0x156>
 800731e:	e107      	b.n	8007530 <put_fat+0x252>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	61bb      	str	r3, [r7, #24]
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	085b      	lsrs	r3, r3, #1
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	18d3      	adds	r3, r2, r3
 800732c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	899b      	ldrh	r3, [r3, #12]
 8007336:	0019      	movs	r1, r3
 8007338:	69b8      	ldr	r0, [r7, #24]
 800733a:	f7f8 ff01 	bl	8000140 <__udivsi3>
 800733e:	0003      	movs	r3, r0
 8007340:	18e2      	adds	r2, r4, r3
 8007342:	251f      	movs	r5, #31
 8007344:	197c      	adds	r4, r7, r5
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	0011      	movs	r1, r2
 800734a:	0018      	movs	r0, r3
 800734c:	f7ff fe1e 	bl	8006f8c <move_window>
 8007350:	0003      	movs	r3, r0
 8007352:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007354:	197b      	adds	r3, r7, r5
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d000      	beq.n	800735e <put_fat+0x80>
 800735c:	e0e1      	b.n	8007522 <put_fat+0x244>
			p = fs->win + bc++ % SS(fs);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3338      	adds	r3, #56	; 0x38
 8007362:	001c      	movs	r4, r3
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	61ba      	str	r2, [r7, #24]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	8992      	ldrh	r2, [r2, #12]
 800736e:	0011      	movs	r1, r2
 8007370:	0018      	movs	r0, r3
 8007372:	f7f8 ff6b 	bl	800024c <__aeabi_uidivmod>
 8007376:	000b      	movs	r3, r1
 8007378:	18e3      	adds	r3, r4, r3
 800737a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2201      	movs	r2, #1
 8007380:	4013      	ands	r3, r2
 8007382:	d00d      	beq.n	80073a0 <put_fat+0xc2>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	b25b      	sxtb	r3, r3
 800738a:	220f      	movs	r2, #15
 800738c:	4013      	ands	r3, r2
 800738e:	b25a      	sxtb	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	b2db      	uxtb	r3, r3
 8007394:	011b      	lsls	r3, r3, #4
 8007396:	b25b      	sxtb	r3, r3
 8007398:	4313      	orrs	r3, r2
 800739a:	b25b      	sxtb	r3, r3
 800739c:	b2db      	uxtb	r3, r3
 800739e:	e001      	b.n	80073a4 <put_fat+0xc6>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2201      	movs	r2, #1
 80073ac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	899b      	ldrh	r3, [r3, #12]
 80073b6:	0019      	movs	r1, r3
 80073b8:	69b8      	ldr	r0, [r7, #24]
 80073ba:	f7f8 fec1 	bl	8000140 <__udivsi3>
 80073be:	0003      	movs	r3, r0
 80073c0:	18e2      	adds	r2, r4, r3
 80073c2:	251f      	movs	r5, #31
 80073c4:	197c      	adds	r4, r7, r5
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	0011      	movs	r1, r2
 80073ca:	0018      	movs	r0, r3
 80073cc:	f7ff fdde 	bl	8006f8c <move_window>
 80073d0:	0003      	movs	r3, r0
 80073d2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80073d4:	197b      	adds	r3, r7, r5
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d000      	beq.n	80073de <put_fat+0x100>
 80073dc:	e0a3      	b.n	8007526 <put_fat+0x248>
			p = fs->win + bc % SS(fs);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3338      	adds	r3, #56	; 0x38
 80073e2:	001c      	movs	r4, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	899b      	ldrh	r3, [r3, #12]
 80073e8:	001a      	movs	r2, r3
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	0011      	movs	r1, r2
 80073ee:	0018      	movs	r0, r3
 80073f0:	f7f8 ff2c 	bl	800024c <__aeabi_uidivmod>
 80073f4:	000b      	movs	r3, r1
 80073f6:	18e3      	adds	r3, r4, r3
 80073f8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2201      	movs	r2, #1
 80073fe:	4013      	ands	r3, r2
 8007400:	d003      	beq.n	800740a <put_fat+0x12c>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	091b      	lsrs	r3, r3, #4
 8007406:	b2db      	uxtb	r3, r3
 8007408:	e00e      	b.n	8007428 <put_fat+0x14a>
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	b25b      	sxtb	r3, r3
 8007410:	220f      	movs	r2, #15
 8007412:	4393      	bics	r3, r2
 8007414:	b25a      	sxtb	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	b25b      	sxtb	r3, r3
 800741c:	210f      	movs	r1, #15
 800741e:	400b      	ands	r3, r1
 8007420:	b25b      	sxtb	r3, r3
 8007422:	4313      	orrs	r3, r2
 8007424:	b25b      	sxtb	r3, r3
 8007426:	b2db      	uxtb	r3, r3
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2201      	movs	r2, #1
 8007430:	70da      	strb	r2, [r3, #3]
			break;
 8007432:	e07d      	b.n	8007530 <put_fat+0x252>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	899b      	ldrh	r3, [r3, #12]
 800743c:	085b      	lsrs	r3, r3, #1
 800743e:	b29b      	uxth	r3, r3
 8007440:	0019      	movs	r1, r3
 8007442:	68b8      	ldr	r0, [r7, #8]
 8007444:	f7f8 fe7c 	bl	8000140 <__udivsi3>
 8007448:	0003      	movs	r3, r0
 800744a:	18e2      	adds	r2, r4, r3
 800744c:	251f      	movs	r5, #31
 800744e:	197c      	adds	r4, r7, r5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	0011      	movs	r1, r2
 8007454:	0018      	movs	r0, r3
 8007456:	f7ff fd99 	bl	8006f8c <move_window>
 800745a:	0003      	movs	r3, r0
 800745c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800745e:	197b      	adds	r3, r7, r5
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d161      	bne.n	800752a <put_fat+0x24c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	3338      	adds	r3, #56	; 0x38
 800746a:	001c      	movs	r4, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	005a      	lsls	r2, r3, #1
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	899b      	ldrh	r3, [r3, #12]
 8007474:	0019      	movs	r1, r3
 8007476:	0010      	movs	r0, r2
 8007478:	f7f8 fee8 	bl	800024c <__aeabi_uidivmod>
 800747c:	000b      	movs	r3, r1
 800747e:	18e3      	adds	r3, r4, r3
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	b292      	uxth	r2, r2
 8007484:	0011      	movs	r1, r2
 8007486:	0018      	movs	r0, r3
 8007488:	f7ff fb10 	bl	8006aac <st_word>
			fs->wflag = 1;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2201      	movs	r2, #1
 8007490:	70da      	strb	r2, [r3, #3]
			break;
 8007492:	e04d      	b.n	8007530 <put_fat+0x252>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	899b      	ldrh	r3, [r3, #12]
 800749c:	089b      	lsrs	r3, r3, #2
 800749e:	b29b      	uxth	r3, r3
 80074a0:	0019      	movs	r1, r3
 80074a2:	68b8      	ldr	r0, [r7, #8]
 80074a4:	f7f8 fe4c 	bl	8000140 <__udivsi3>
 80074a8:	0003      	movs	r3, r0
 80074aa:	18e2      	adds	r2, r4, r3
 80074ac:	251f      	movs	r5, #31
 80074ae:	197c      	adds	r4, r7, r5
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	0011      	movs	r1, r2
 80074b4:	0018      	movs	r0, r3
 80074b6:	f7ff fd69 	bl	8006f8c <move_window>
 80074ba:	0003      	movs	r3, r0
 80074bc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80074be:	197b      	adds	r3, r7, r5
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d133      	bne.n	800752e <put_fat+0x250>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	091c      	lsrs	r4, r3, #4
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3338      	adds	r3, #56	; 0x38
 80074d0:	001d      	movs	r5, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	009a      	lsls	r2, r3, #2
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	899b      	ldrh	r3, [r3, #12]
 80074da:	0019      	movs	r1, r3
 80074dc:	0010      	movs	r0, r2
 80074de:	f7f8 feb5 	bl	800024c <__aeabi_uidivmod>
 80074e2:	000b      	movs	r3, r1
 80074e4:	18eb      	adds	r3, r5, r3
 80074e6:	0018      	movs	r0, r3
 80074e8:	f7ff fabf 	bl	8006a6a <ld_dword>
 80074ec:	0003      	movs	r3, r0
 80074ee:	0f1b      	lsrs	r3, r3, #28
 80074f0:	071b      	lsls	r3, r3, #28
 80074f2:	4323      	orrs	r3, r4
 80074f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3338      	adds	r3, #56	; 0x38
 80074fa:	001c      	movs	r4, r3
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	009a      	lsls	r2, r3, #2
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	899b      	ldrh	r3, [r3, #12]
 8007504:	0019      	movs	r1, r3
 8007506:	0010      	movs	r0, r2
 8007508:	f7f8 fea0 	bl	800024c <__aeabi_uidivmod>
 800750c:	000b      	movs	r3, r1
 800750e:	18e3      	adds	r3, r4, r3
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	0011      	movs	r1, r2
 8007514:	0018      	movs	r0, r3
 8007516:	f7ff fae7 	bl	8006ae8 <st_dword>
			fs->wflag = 1;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	70da      	strb	r2, [r3, #3]
			break;
 8007520:	e006      	b.n	8007530 <put_fat+0x252>
			if (res != FR_OK) break;
 8007522:	46c0      	nop			; (mov r8, r8)
 8007524:	e004      	b.n	8007530 <put_fat+0x252>
			if (res != FR_OK) break;
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	e002      	b.n	8007530 <put_fat+0x252>
			if (res != FR_OK) break;
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	e000      	b.n	8007530 <put_fat+0x252>
			if (res != FR_OK) break;
 800752e:	46c0      	nop			; (mov r8, r8)
		}
	}
	return res;
 8007530:	231f      	movs	r3, #31
 8007532:	18fb      	adds	r3, r7, r3
 8007534:	781b      	ldrb	r3, [r3, #0]
}
 8007536:	0018      	movs	r0, r3
 8007538:	46bd      	mov	sp, r7
 800753a:	b008      	add	sp, #32
 800753c:	bdb0      	pop	{r4, r5, r7, pc}

0800753e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800753e:	b5b0      	push	{r4, r5, r7, lr}
 8007540:	b088      	sub	sp, #32
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800754a:	231f      	movs	r3, #31
 800754c:	18fb      	adds	r3, r7, r3
 800754e:	2200      	movs	r2, #0
 8007550:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d904      	bls.n	8007568 <remove_chain+0x2a>
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	429a      	cmp	r2, r3
 8007566:	d301      	bcc.n	800756c <remove_chain+0x2e>
 8007568:	2302      	movs	r3, #2
 800756a:	e057      	b.n	800761c <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d011      	beq.n	8007596 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007572:	251f      	movs	r5, #31
 8007574:	197c      	adds	r4, r7, r5
 8007576:	2301      	movs	r3, #1
 8007578:	425a      	negs	r2, r3
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	0018      	movs	r0, r3
 8007580:	f7ff fead 	bl	80072de <put_fat>
 8007584:	0003      	movs	r3, r0
 8007586:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8007588:	197b      	adds	r3, r7, r5
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <remove_chain+0x58>
 8007590:	197b      	adds	r3, r7, r5
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	e042      	b.n	800761c <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	0011      	movs	r1, r2
 800759c:	0018      	movs	r0, r3
 800759e:	f7ff fdc3 	bl	8007128 <get_fat>
 80075a2:	0003      	movs	r3, r0
 80075a4:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d035      	beq.n	8007618 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <remove_chain+0x78>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e032      	b.n	800761c <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	3301      	adds	r3, #1
 80075ba:	d101      	bne.n	80075c0 <remove_chain+0x82>
 80075bc:	2301      	movs	r3, #1
 80075be:	e02d      	b.n	800761c <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80075c0:	251f      	movs	r5, #31
 80075c2:	197c      	adds	r4, r7, r5
 80075c4:	68b9      	ldr	r1, [r7, #8]
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2200      	movs	r2, #0
 80075ca:	0018      	movs	r0, r3
 80075cc:	f7ff fe87 	bl	80072de <put_fat>
 80075d0:	0003      	movs	r3, r0
 80075d2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 80075d4:	197b      	adds	r3, r7, r5
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <remove_chain+0xa4>
 80075dc:	197b      	adds	r3, r7, r5
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	e01c      	b.n	800761c <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	3b02      	subs	r3, #2
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d20b      	bcs.n	8007608 <remove_chain+0xca>
			fs->free_clst++;
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	791b      	ldrb	r3, [r3, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	4313      	orrs	r3, r2
 8007602:	b2da      	uxtb	r2, r3
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	d3bf      	bcc.n	8007596 <remove_chain+0x58>
 8007616:	e000      	b.n	800761a <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8007618:	46c0      	nop			; (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	0018      	movs	r0, r3
 800761e:	46bd      	mov	sp, r7
 8007620:	b008      	add	sp, #32
 8007622:	bdb0      	pop	{r4, r5, r7, pc}

08007624 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007624:	b5b0      	push	{r4, r5, r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10d      	bne.n	8007656 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <create_chain+0x2c>
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	429a      	cmp	r2, r3
 800764e:	d31d      	bcc.n	800768c <create_chain+0x68>
 8007650:	2301      	movs	r3, #1
 8007652:	61bb      	str	r3, [r7, #24]
 8007654:	e01a      	b.n	800768c <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	0011      	movs	r1, r2
 800765c:	0018      	movs	r0, r3
 800765e:	f7ff fd63 	bl	8007128 <get_fat>
 8007662:	0003      	movs	r3, r0
 8007664:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d801      	bhi.n	8007670 <create_chain+0x4c>
 800766c:	2301      	movs	r3, #1
 800766e:	e07b      	b.n	8007768 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	d101      	bne.n	800767a <create_chain+0x56>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	e076      	b.n	8007768 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	429a      	cmp	r2, r3
 8007682:	d201      	bcs.n	8007688 <create_chain+0x64>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	e06f      	b.n	8007768 <create_chain+0x144>
		scl = clst;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	3301      	adds	r3, #1
 8007694:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	429a      	cmp	r2, r3
 800769e:	d307      	bcc.n	80076b0 <create_chain+0x8c>
				ncl = 2;
 80076a0:	2302      	movs	r3, #2
 80076a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d901      	bls.n	80076b0 <create_chain+0x8c>
 80076ac:	2300      	movs	r3, #0
 80076ae:	e05b      	b.n	8007768 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	0011      	movs	r1, r2
 80076b6:	0018      	movs	r0, r3
 80076b8:	f7ff fd36 	bl	8007128 <get_fat>
 80076bc:	0003      	movs	r3, r0
 80076be:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00d      	beq.n	80076e2 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d002      	beq.n	80076d2 <create_chain+0xae>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3301      	adds	r3, #1
 80076d0:	d101      	bne.n	80076d6 <create_chain+0xb2>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	e048      	b.n	8007768 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d1d8      	bne.n	8007690 <create_chain+0x6c>
 80076de:	2300      	movs	r3, #0
 80076e0:	e042      	b.n	8007768 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 80076e2:	46c0      	nop			; (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80076e4:	2517      	movs	r5, #23
 80076e6:	197c      	adds	r4, r7, r5
 80076e8:	2301      	movs	r3, #1
 80076ea:	425a      	negs	r2, r3
 80076ec:	69f9      	ldr	r1, [r7, #28]
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	0018      	movs	r0, r3
 80076f2:	f7ff fdf4 	bl	80072de <put_fat>
 80076f6:	0003      	movs	r3, r0
 80076f8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 80076fa:	197b      	adds	r3, r7, r5
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10b      	bne.n	800771a <create_chain+0xf6>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d008      	beq.n	800771a <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007708:	197c      	adds	r4, r7, r5
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	0018      	movs	r0, r3
 8007712:	f7ff fde4 	bl	80072de <put_fat>
 8007716:	0003      	movs	r3, r0
 8007718:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800771a:	2317      	movs	r3, #23
 800771c:	18fb      	adds	r3, r7, r3
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d116      	bne.n	8007752 <create_chain+0x12e>
		fs->last_clst = ncl;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	3b02      	subs	r3, #2
 8007734:	429a      	cmp	r2, r3
 8007736:	d804      	bhi.n	8007742 <create_chain+0x11e>
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	1e5a      	subs	r2, r3, #1
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	791b      	ldrb	r3, [r3, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	4313      	orrs	r3, r2
 800774a:	b2da      	uxtb	r2, r3
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	711a      	strb	r2, [r3, #4]
 8007750:	e009      	b.n	8007766 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007752:	2317      	movs	r3, #23
 8007754:	18fb      	adds	r3, r7, r3
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d102      	bne.n	8007762 <create_chain+0x13e>
 800775c:	2301      	movs	r3, #1
 800775e:	425b      	negs	r3, r3
 8007760:	e000      	b.n	8007764 <create_chain+0x140>
 8007762:	2301      	movs	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007766:	69fb      	ldr	r3, [r7, #28]
}
 8007768:	0018      	movs	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	b008      	add	sp, #32
 800776e:	bdb0      	pop	{r4, r5, r7, pc}

08007770 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	3304      	adds	r3, #4
 8007786:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	899b      	ldrh	r3, [r3, #12]
 800778c:	0019      	movs	r1, r3
 800778e:	6838      	ldr	r0, [r7, #0]
 8007790:	f7f8 fcd6 	bl	8000140 <__udivsi3>
 8007794:	0003      	movs	r3, r0
 8007796:	001a      	movs	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	895b      	ldrh	r3, [r3, #10]
 800779c:	0019      	movs	r1, r3
 800779e:	0010      	movs	r0, r2
 80077a0:	f7f8 fcce 	bl	8000140 <__udivsi3>
 80077a4:	0003      	movs	r3, r0
 80077a6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	1d1a      	adds	r2, r3, #4
 80077ac:	613a      	str	r2, [r7, #16]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <clmt_clust+0x4c>
 80077b8:	2300      	movs	r3, #0
 80077ba:	e010      	b.n	80077de <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d307      	bcc.n	80077d4 <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	3304      	adds	r3, #4
 80077d0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80077d2:	e7e9      	b.n	80077a8 <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 80077d4:	46c0      	nop			; (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	18d3      	adds	r3, r2, r3
}
 80077de:	0018      	movs	r0, r3
 80077e0:	46bd      	mov	sp, r7
 80077e2:	b006      	add	sp, #24
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80077e6:	b590      	push	{r4, r7, lr}
 80077e8:	b087      	sub	sp, #28
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	2380      	movs	r3, #128	; 0x80
 80077fa:	039b      	lsls	r3, r3, #14
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d203      	bcs.n	8007808 <dir_sdi+0x22>
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	221f      	movs	r2, #31
 8007804:	4013      	ands	r3, r2
 8007806:	d001      	beq.n	800780c <dir_sdi+0x26>
		return FR_INT_ERR;
 8007808:	2302      	movs	r3, #2
 800780a:	e074      	b.n	80078f6 <dir_sdi+0x110>
	}
	dp->dptr = ofs;				/* Set current offset */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d106      	bne.n	800782c <dir_sdi+0x46>
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d902      	bls.n	800782c <dir_sdi+0x46>
		clst = fs->dirbase;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d10c      	bne.n	800784c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	8912      	ldrh	r2, [r2, #8]
 800783a:	4293      	cmp	r3, r2
 800783c:	d301      	bcc.n	8007842 <dir_sdi+0x5c>
 800783e:	2302      	movs	r3, #2
 8007840:	e059      	b.n	80078f6 <dir_sdi+0x110>
		dp->sect = fs->dirbase;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	61da      	str	r2, [r3, #28]
 800784a:	e02f      	b.n	80078ac <dir_sdi+0xc6>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	895b      	ldrh	r3, [r3, #10]
 8007850:	001a      	movs	r2, r3
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	899b      	ldrh	r3, [r3, #12]
 8007856:	4353      	muls	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800785a:	e01a      	b.n	8007892 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	0011      	movs	r1, r2
 8007862:	0018      	movs	r0, r3
 8007864:	f7ff fc60 	bl	8007128 <get_fat>
 8007868:	0003      	movs	r3, r0
 800786a:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	3301      	adds	r3, #1
 8007870:	d101      	bne.n	8007876 <dir_sdi+0x90>
 8007872:	2301      	movs	r3, #1
 8007874:	e03f      	b.n	80078f6 <dir_sdi+0x110>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d904      	bls.n	8007886 <dir_sdi+0xa0>
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	429a      	cmp	r2, r3
 8007884:	d301      	bcc.n	800788a <dir_sdi+0xa4>
 8007886:	2302      	movs	r3, #2
 8007888:	e035      	b.n	80078f6 <dir_sdi+0x110>
			ofs -= csz;
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	429a      	cmp	r2, r3
 8007898:	d2e0      	bcs.n	800785c <dir_sdi+0x76>
		}
		dp->sect = clust2sect(fs, clst);
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	0011      	movs	r1, r2
 80078a0:	0018      	movs	r0, r3
 80078a2:	f7ff fc25 	bl	80070f0 <clust2sect>
 80078a6:	0002      	movs	r2, r0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <dir_sdi+0xd8>
 80078ba:	2302      	movs	r3, #2
 80078bc:	e01b      	b.n	80078f6 <dir_sdi+0x110>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	69dc      	ldr	r4, [r3, #28]
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	899b      	ldrh	r3, [r3, #12]
 80078c6:	0019      	movs	r1, r3
 80078c8:	6838      	ldr	r0, [r7, #0]
 80078ca:	f7f8 fc39 	bl	8000140 <__udivsi3>
 80078ce:	0003      	movs	r3, r0
 80078d0:	18e2      	adds	r2, r4, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	3338      	adds	r3, #56	; 0x38
 80078da:	001c      	movs	r4, r3
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	899b      	ldrh	r3, [r3, #12]
 80078e0:	001a      	movs	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	0011      	movs	r1, r2
 80078e6:	0018      	movs	r0, r3
 80078e8:	f7f8 fcb0 	bl	800024c <__aeabi_uidivmod>
 80078ec:	000b      	movs	r3, r1
 80078ee:	18e2      	adds	r2, r4, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	0018      	movs	r0, r3
 80078f8:	46bd      	mov	sp, r7
 80078fa:	b007      	add	sp, #28
 80078fc:	bd90      	pop	{r4, r7, pc}

080078fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80078fe:	b590      	push	{r4, r7, lr}
 8007900:	b087      	sub	sp, #28
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	3320      	adds	r3, #32
 8007914:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d004      	beq.n	8007928 <dir_next+0x2a>
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	039b      	lsls	r3, r3, #14
 8007924:	429a      	cmp	r2, r3
 8007926:	d301      	bcc.n	800792c <dir_next+0x2e>
 8007928:	2304      	movs	r3, #4
 800792a:	e0c0      	b.n	8007aae <dir_next+0x1b0>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	899b      	ldrh	r3, [r3, #12]
 8007930:	001a      	movs	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	0011      	movs	r1, r2
 8007936:	0018      	movs	r0, r3
 8007938:	f7f8 fc88 	bl	800024c <__aeabi_uidivmod>
 800793c:	1e0b      	subs	r3, r1, #0
 800793e:	d000      	beq.n	8007942 <dir_next+0x44>
 8007940:	e0a2      	b.n	8007a88 <dir_next+0x18a>
		dp->sect++;				/* Next sector */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10b      	bne.n	800796c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	095b      	lsrs	r3, r3, #5
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	8912      	ldrh	r2, [r2, #8]
 800795c:	4293      	cmp	r3, r2
 800795e:	d200      	bcs.n	8007962 <dir_next+0x64>
 8007960:	e092      	b.n	8007a88 <dir_next+0x18a>
				dp->sect = 0; return FR_NO_FILE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	61da      	str	r2, [r3, #28]
 8007968:	2304      	movs	r3, #4
 800796a:	e0a0      	b.n	8007aae <dir_next+0x1b0>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	899b      	ldrh	r3, [r3, #12]
 8007970:	0019      	movs	r1, r3
 8007972:	68b8      	ldr	r0, [r7, #8]
 8007974:	f7f8 fbe4 	bl	8000140 <__udivsi3>
 8007978:	0003      	movs	r3, r0
 800797a:	001a      	movs	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	895b      	ldrh	r3, [r3, #10]
 8007980:	3b01      	subs	r3, #1
 8007982:	4013      	ands	r3, r2
 8007984:	d000      	beq.n	8007988 <dir_next+0x8a>
 8007986:	e07f      	b.n	8007a88 <dir_next+0x18a>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	0019      	movs	r1, r3
 8007990:	0010      	movs	r0, r2
 8007992:	f7ff fbc9 	bl	8007128 <get_fat>
 8007996:	0003      	movs	r3, r0
 8007998:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d801      	bhi.n	80079a4 <dir_next+0xa6>
 80079a0:	2302      	movs	r3, #2
 80079a2:	e084      	b.n	8007aae <dir_next+0x1b0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	3301      	adds	r3, #1
 80079a8:	d101      	bne.n	80079ae <dir_next+0xb0>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e07f      	b.n	8007aae <dir_next+0x1b0>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d35b      	bcc.n	8007a70 <dir_next+0x172>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d104      	bne.n	80079c8 <dir_next+0xca>
						dp->sect = 0; return FR_NO_FILE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	61da      	str	r2, [r3, #28]
 80079c4:	2304      	movs	r3, #4
 80079c6:	e072      	b.n	8007aae <dir_next+0x1b0>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	0019      	movs	r1, r3
 80079d0:	0010      	movs	r0, r2
 80079d2:	f7ff fe27 	bl	8007624 <create_chain>
 80079d6:	0003      	movs	r3, r0
 80079d8:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <dir_next+0xe6>
 80079e0:	2307      	movs	r3, #7
 80079e2:	e064      	b.n	8007aae <dir_next+0x1b0>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <dir_next+0xf0>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e05f      	b.n	8007aae <dir_next+0x1b0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	3301      	adds	r3, #1
 80079f2:	d101      	bne.n	80079f8 <dir_next+0xfa>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e05a      	b.n	8007aae <dir_next+0x1b0>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	0018      	movs	r0, r3
 80079fc:	f7ff fa7e 	bl	8006efc <sync_window>
 8007a00:	1e03      	subs	r3, r0, #0
 8007a02:	d001      	beq.n	8007a08 <dir_next+0x10a>
 8007a04:	2301      	movs	r3, #1
 8007a06:	e052      	b.n	8007aae <dir_next+0x1b0>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3338      	adds	r3, #56	; 0x38
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	899b      	ldrh	r3, [r3, #12]
 8007a12:	001a      	movs	r2, r3
 8007a14:	2100      	movs	r1, #0
 8007a16:	f7ff f8b0 	bl	8006b7a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	0011      	movs	r1, r2
 8007a24:	0018      	movs	r0, r3
 8007a26:	f7ff fb63 	bl	80070f0 <clust2sect>
 8007a2a:	0002      	movs	r2, r0
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	635a      	str	r2, [r3, #52]	; 0x34
 8007a30:	e012      	b.n	8007a58 <dir_next+0x15a>
						fs->wflag = 1;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f7ff fa5e 	bl	8006efc <sync_window>
 8007a40:	1e03      	subs	r3, r0, #0
 8007a42:	d001      	beq.n	8007a48 <dir_next+0x14a>
 8007a44:	2301      	movs	r3, #1
 8007a46:	e032      	b.n	8007aae <dir_next+0x1b0>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	613b      	str	r3, [r7, #16]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	635a      	str	r2, [r3, #52]	; 0x34
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	895b      	ldrh	r3, [r3, #10]
 8007a5c:	001a      	movs	r2, r3
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d3e6      	bcc.n	8007a32 <dir_next+0x134>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	1ad2      	subs	r2, r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	0011      	movs	r1, r2
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	f7ff fb37 	bl	80070f0 <clust2sect>
 8007a82:	0002      	movs	r2, r0
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3338      	adds	r3, #56	; 0x38
 8007a92:	001c      	movs	r4, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	899b      	ldrh	r3, [r3, #12]
 8007a98:	001a      	movs	r2, r3
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	0011      	movs	r1, r2
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f7f8 fbd4 	bl	800024c <__aeabi_uidivmod>
 8007aa4:	000b      	movs	r3, r1
 8007aa6:	18e2      	adds	r2, r4, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	0018      	movs	r0, r3
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	b007      	add	sp, #28
 8007ab4:	bd90      	pop	{r4, r7, pc}

08007ab6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007ab6:	b5b0      	push	{r4, r5, r7, lr}
 8007ab8:	b086      	sub	sp, #24
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007ac6:	2517      	movs	r5, #23
 8007ac8:	197c      	adds	r4, r7, r5
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2100      	movs	r1, #0
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f7ff fe89 	bl	80077e6 <dir_sdi>
 8007ad4:	0003      	movs	r3, r0
 8007ad6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007ad8:	197b      	adds	r3, r7, r5
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d133      	bne.n	8007b48 <dir_alloc+0x92>
		n = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	2517      	movs	r5, #23
 8007aea:	197c      	adds	r4, r7, r5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	0011      	movs	r1, r2
 8007af0:	0018      	movs	r0, r3
 8007af2:	f7ff fa4b 	bl	8006f8c <move_window>
 8007af6:	0003      	movs	r3, r0
 8007af8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007afa:	197b      	adds	r3, r7, r5
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d121      	bne.n	8007b46 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2be5      	cmp	r3, #229	; 0xe5
 8007b0a:	d004      	beq.n	8007b16 <dir_alloc+0x60>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d107      	bne.n	8007b26 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d102      	bne.n	8007b2a <dir_alloc+0x74>
 8007b24:	e010      	b.n	8007b48 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007b26:	2300      	movs	r3, #0
 8007b28:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007b2a:	2517      	movs	r5, #23
 8007b2c:	197c      	adds	r4, r7, r5
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2101      	movs	r1, #1
 8007b32:	0018      	movs	r0, r3
 8007b34:	f7ff fee3 	bl	80078fe <dir_next>
 8007b38:	0003      	movs	r3, r0
 8007b3a:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007b3c:	197b      	adds	r3, r7, r5
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0cf      	beq.n	8007ae4 <dir_alloc+0x2e>
 8007b44:	e000      	b.n	8007b48 <dir_alloc+0x92>
			if (res != FR_OK) break;
 8007b46:	46c0      	nop			; (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007b48:	2217      	movs	r2, #23
 8007b4a:	18bb      	adds	r3, r7, r2
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d102      	bne.n	8007b58 <dir_alloc+0xa2>
 8007b52:	18bb      	adds	r3, r7, r2
 8007b54:	2207      	movs	r2, #7
 8007b56:	701a      	strb	r2, [r3, #0]
	return res;
 8007b58:	2317      	movs	r3, #23
 8007b5a:	18fb      	adds	r3, r7, r3
 8007b5c:	781b      	ldrb	r3, [r3, #0]
}
 8007b5e:	0018      	movs	r0, r3
 8007b60:	46bd      	mov	sp, r7
 8007b62:	b006      	add	sp, #24
 8007b64:	bdb0      	pop	{r4, r5, r7, pc}

08007b66 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	331a      	adds	r3, #26
 8007b74:	0018      	movs	r0, r3
 8007b76:	f7fe ff5d 	bl	8006a34 <ld_word>
 8007b7a:	0003      	movs	r3, r0
 8007b7c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d109      	bne.n	8007b9a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	3314      	adds	r3, #20
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f7fe ff52 	bl	8006a34 <ld_word>
 8007b90:	0003      	movs	r3, r0
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
}
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	b004      	add	sp, #16
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	331a      	adds	r3, #26
 8007bb4:	687a      	ldr	r2, [r7, #4]
 8007bb6:	b292      	uxth	r2, r2
 8007bb8:	0011      	movs	r1, r2
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f7fe ff76 	bl	8006aac <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d109      	bne.n	8007bdc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	3314      	adds	r3, #20
 8007bcc:	001a      	movs	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	0019      	movs	r1, r3
 8007bd6:	0010      	movs	r0, r2
 8007bd8:	f7fe ff68 	bl	8006aac <st_word>
	}
}
 8007bdc:	46c0      	nop			; (mov r8, r8)
 8007bde:	46bd      	mov	sp, r7
 8007be0:	b004      	add	sp, #16
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007be4:	b5b0      	push	{r4, r5, r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	331a      	adds	r3, #26
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	f7fe ff1e 	bl	8006a34 <ld_word>
 8007bf8:	1e03      	subs	r3, r0, #0
 8007bfa:	d001      	beq.n	8007c00 <cmp_lfn+0x1c>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	e068      	b.n	8007cd2 <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	001a      	movs	r2, r3
 8007c06:	233f      	movs	r3, #63	; 0x3f
 8007c08:	4013      	ands	r3, r2
 8007c0a:	1e5a      	subs	r2, r3, #1
 8007c0c:	0013      	movs	r3, r2
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	189b      	adds	r3, r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	189b      	adds	r3, r3, r2
 8007c16:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007c18:	230e      	movs	r3, #14
 8007c1a:	18fb      	adds	r3, r7, r3
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	801a      	strh	r2, [r3, #0]
 8007c20:	2300      	movs	r3, #0
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	e03d      	b.n	8007ca2 <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007c26:	4a2d      	ldr	r2, [pc, #180]	; (8007cdc <cmp_lfn+0xf8>)
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	18d3      	adds	r3, r2, r3
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	001a      	movs	r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	189b      	adds	r3, r3, r2
 8007c34:	250c      	movs	r5, #12
 8007c36:	197c      	adds	r4, r7, r5
 8007c38:	0018      	movs	r0, r3
 8007c3a:	f7fe fefb 	bl	8006a34 <ld_word>
 8007c3e:	0003      	movs	r3, r0
 8007c40:	8023      	strh	r3, [r4, #0]
		if (wc) {
 8007c42:	230e      	movs	r3, #14
 8007c44:	18fb      	adds	r3, r7, r3
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01f      	beq.n	8007c8c <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2bfe      	cmp	r3, #254	; 0xfe
 8007c50:	d813      	bhi.n	8007c7a <cmp_lfn+0x96>
 8007c52:	197b      	adds	r3, r7, r5
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	0018      	movs	r0, r3
 8007c58:	f001 ff8c 	bl	8009b74 <ff_wtoupper>
 8007c5c:	0003      	movs	r3, r0
 8007c5e:	001c      	movs	r4, r3
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	1c5a      	adds	r2, r3, #1
 8007c64:	617a      	str	r2, [r7, #20]
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	18d3      	adds	r3, r2, r3
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f001 ff80 	bl	8009b74 <ff_wtoupper>
 8007c74:	0003      	movs	r3, r0
 8007c76:	429c      	cmp	r4, r3
 8007c78:	d001      	beq.n	8007c7e <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	e029      	b.n	8007cd2 <cmp_lfn+0xee>
			}
			wc = uc;
 8007c7e:	230e      	movs	r3, #14
 8007c80:	18fb      	adds	r3, r7, r3
 8007c82:	220c      	movs	r2, #12
 8007c84:	18ba      	adds	r2, r7, r2
 8007c86:	8812      	ldrh	r2, [r2, #0]
 8007c88:	801a      	strh	r2, [r3, #0]
 8007c8a:	e007      	b.n	8007c9c <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007c8c:	230c      	movs	r3, #12
 8007c8e:	18fb      	adds	r3, r7, r3
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	4a13      	ldr	r2, [pc, #76]	; (8007ce0 <cmp_lfn+0xfc>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d001      	beq.n	8007c9c <cmp_lfn+0xb8>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e01a      	b.n	8007cd2 <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	613b      	str	r3, [r7, #16]
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	2b0c      	cmp	r3, #12
 8007ca6:	d9be      	bls.n	8007c26 <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	001a      	movs	r2, r3
 8007cae:	2340      	movs	r3, #64	; 0x40
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	d00d      	beq.n	8007cd0 <cmp_lfn+0xec>
 8007cb4:	230e      	movs	r3, #14
 8007cb6:	18fb      	adds	r3, r7, r3
 8007cb8:	881b      	ldrh	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <cmp_lfn+0xec>
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	18d3      	adds	r3, r2, r3
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <cmp_lfn+0xec>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	e000      	b.n	8007cd2 <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 8007cd0:	2301      	movs	r3, #1
}
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b006      	add	sp, #24
 8007cd8:	bdb0      	pop	{r4, r5, r7, pc}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	0800e88c 	.word	0x0800e88c
 8007ce0:	0000ffff 	.word	0x0000ffff

08007ce4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007ce4:	b590      	push	{r4, r7, lr}
 8007ce6:	b089      	sub	sp, #36	; 0x24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	0019      	movs	r1, r3
 8007cf0:	1dfb      	adds	r3, r7, #7
 8007cf2:	701a      	strb	r2, [r3, #0]
 8007cf4:	1dbb      	adds	r3, r7, #6
 8007cf6:	1c0a      	adds	r2, r1, #0
 8007cf8:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	330d      	adds	r3, #13
 8007cfe:	1dba      	adds	r2, r7, #6
 8007d00:	7812      	ldrb	r2, [r2, #0]
 8007d02:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	330b      	adds	r3, #11
 8007d08:	220f      	movs	r2, #15
 8007d0a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	330c      	adds	r3, #12
 8007d10:	2200      	movs	r2, #0
 8007d12:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	331a      	adds	r3, #26
 8007d18:	2100      	movs	r1, #0
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f7fe fec6 	bl	8006aac <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007d20:	1dfb      	adds	r3, r7, #7
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	1e5a      	subs	r2, r3, #1
 8007d26:	0013      	movs	r3, r2
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	189b      	adds	r3, r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	189b      	adds	r3, r3, r2
 8007d30:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007d32:	2316      	movs	r3, #22
 8007d34:	18fb      	adds	r3, r7, r3
 8007d36:	2200      	movs	r2, #0
 8007d38:	801a      	strh	r2, [r3, #0]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007d3e:	2116      	movs	r1, #22
 8007d40:	187b      	adds	r3, r7, r1
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	4a21      	ldr	r2, [pc, #132]	; (8007dcc <put_lfn+0xe8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d008      	beq.n	8007d5c <put_lfn+0x78>
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	61fa      	str	r2, [r7, #28]
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	18d2      	adds	r2, r2, r3
 8007d56:	187b      	adds	r3, r7, r1
 8007d58:	8812      	ldrh	r2, [r2, #0]
 8007d5a:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007d5c:	4a1c      	ldr	r2, [pc, #112]	; (8007dd0 <put_lfn+0xec>)
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	18d3      	adds	r3, r2, r3
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	001a      	movs	r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	189a      	adds	r2, r3, r2
 8007d6a:	2416      	movs	r4, #22
 8007d6c:	193b      	adds	r3, r7, r4
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	0019      	movs	r1, r3
 8007d72:	0010      	movs	r0, r2
 8007d74:	f7fe fe9a 	bl	8006aac <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007d78:	0022      	movs	r2, r4
 8007d7a:	18bb      	adds	r3, r7, r2
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d103      	bne.n	8007d8a <put_lfn+0xa6>
 8007d82:	18bb      	adds	r3, r7, r2
 8007d84:	2201      	movs	r2, #1
 8007d86:	4252      	negs	r2, r2
 8007d88:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	2b0c      	cmp	r3, #12
 8007d94:	d9d3      	bls.n	8007d3e <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007d96:	2316      	movs	r3, #22
 8007d98:	18fb      	adds	r3, r7, r3
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	4a0b      	ldr	r2, [pc, #44]	; (8007dcc <put_lfn+0xe8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d006      	beq.n	8007db0 <put_lfn+0xcc>
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	18d3      	adds	r3, r2, r3
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d105      	bne.n	8007dbc <put_lfn+0xd8>
 8007db0:	1dfb      	adds	r3, r7, #7
 8007db2:	1dfa      	adds	r2, r7, #7
 8007db4:	7812      	ldrb	r2, [r2, #0]
 8007db6:	2140      	movs	r1, #64	; 0x40
 8007db8:	430a      	orrs	r2, r1
 8007dba:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	1dfa      	adds	r2, r7, #7
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	701a      	strb	r2, [r3, #0]
}
 8007dc4:	46c0      	nop			; (mov r8, r8)
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	b009      	add	sp, #36	; 0x24
 8007dca:	bd90      	pop	{r4, r7, pc}
 8007dcc:	0000ffff 	.word	0x0000ffff
 8007dd0:	0800e88c 	.word	0x0800e88c

08007dd4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08c      	sub	sp, #48	; 0x30
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007de2:	68b9      	ldr	r1, [r7, #8]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	220b      	movs	r2, #11
 8007de8:	0018      	movs	r0, r3
 8007dea:	f7fe fea7 	bl	8006b3c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b05      	cmp	r3, #5
 8007df2:	d92f      	bls.n	8007e54 <gen_numname+0x80>
		sr = seq;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007df8:	e026      	b.n	8007e48 <gen_numname+0x74>
			wc = *lfn++;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	1c9a      	adds	r2, r3, #2
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	2222      	movs	r2, #34	; 0x22
 8007e02:	18ba      	adds	r2, r7, r2
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 8007e08:	2300      	movs	r3, #0
 8007e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e0c:	e019      	b.n	8007e42 <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	005a      	lsls	r2, r3, #1
 8007e12:	2022      	movs	r0, #34	; 0x22
 8007e14:	183b      	adds	r3, r7, r0
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	2101      	movs	r1, #1
 8007e1a:	400b      	ands	r3, r1
 8007e1c:	18d3      	adds	r3, r2, r3
 8007e1e:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007e20:	183b      	adds	r3, r7, r0
 8007e22:	183a      	adds	r2, r7, r0
 8007e24:	8812      	ldrh	r2, [r2, #0]
 8007e26:	0852      	lsrs	r2, r2, #1
 8007e28:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	2380      	movs	r3, #128	; 0x80
 8007e2e:	025b      	lsls	r3, r3, #9
 8007e30:	4013      	ands	r3, r2
 8007e32:	d003      	beq.n	8007e3c <gen_numname+0x68>
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	4a30      	ldr	r2, [pc, #192]	; (8007ef8 <gen_numname+0x124>)
 8007e38:	4053      	eors	r3, r2
 8007e3a:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	3301      	adds	r3, #1
 8007e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e44:	2b0f      	cmp	r3, #15
 8007e46:	d9e2      	bls.n	8007e0e <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1d4      	bne.n	8007dfa <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007e54:	2307      	movs	r3, #7
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	220f      	movs	r2, #15
 8007e5e:	4013      	ands	r3, r2
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	212f      	movs	r1, #47	; 0x2f
 8007e64:	187b      	adds	r3, r7, r1
 8007e66:	3230      	adds	r2, #48	; 0x30
 8007e68:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8007e6a:	187b      	adds	r3, r7, r1
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b39      	cmp	r3, #57	; 0x39
 8007e70:	d904      	bls.n	8007e7c <gen_numname+0xa8>
 8007e72:	187b      	adds	r3, r7, r1
 8007e74:	187a      	adds	r2, r7, r1
 8007e76:	7812      	ldrb	r2, [r2, #0]
 8007e78:	3207      	adds	r2, #7
 8007e7a:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	1e5a      	subs	r2, r3, #1
 8007e80:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e82:	2014      	movs	r0, #20
 8007e84:	183a      	adds	r2, r7, r0
 8007e86:	212f      	movs	r1, #47	; 0x2f
 8007e88:	1879      	adds	r1, r7, r1
 8007e8a:	7809      	ldrb	r1, [r1, #0]
 8007e8c:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	091b      	lsrs	r3, r3, #4
 8007e92:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1de      	bne.n	8007e58 <gen_numname+0x84>
	ns[i] = '~';
 8007e9a:	183a      	adds	r2, r7, r0
 8007e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9e:	18d3      	adds	r3, r2, r3
 8007ea0:	227e      	movs	r2, #126	; 0x7e
 8007ea2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea8:	e002      	b.n	8007eb0 <gen_numname+0xdc>
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	3301      	adds	r3, #1
 8007eae:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d205      	bcs.n	8007ec4 <gen_numname+0xf0>
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	18d3      	adds	r3, r2, r3
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d1f2      	bne.n	8007eaa <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	2b07      	cmp	r3, #7
 8007ec8:	d806      	bhi.n	8007ed8 <gen_numname+0x104>
 8007eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ecc:	1c5a      	adds	r2, r3, #1
 8007ece:	62ba      	str	r2, [r7, #40]	; 0x28
 8007ed0:	2214      	movs	r2, #20
 8007ed2:	18ba      	adds	r2, r7, r2
 8007ed4:	5cd1      	ldrb	r1, [r2, r3]
 8007ed6:	e000      	b.n	8007eda <gen_numname+0x106>
 8007ed8:	2120      	movs	r1, #32
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	627a      	str	r2, [r7, #36]	; 0x24
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	18d3      	adds	r3, r2, r3
 8007ee4:	1c0a      	adds	r2, r1, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2b07      	cmp	r3, #7
 8007eec:	d9ea      	bls.n	8007ec4 <gen_numname+0xf0>
}
 8007eee:	46c0      	nop			; (mov r8, r8)
 8007ef0:	46c0      	nop			; (mov r8, r8)
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b00c      	add	sp, #48	; 0x30
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	00011021 	.word	0x00011021

08007efc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007f04:	230f      	movs	r3, #15
 8007f06:	18fb      	adds	r3, r7, r3
 8007f08:	2200      	movs	r2, #0
 8007f0a:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 8007f0c:	230b      	movs	r3, #11
 8007f0e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007f10:	200f      	movs	r0, #15
 8007f12:	183b      	adds	r3, r7, r0
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	0852      	lsrs	r2, r2, #1
 8007f1a:	01db      	lsls	r3, r3, #7
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	b2d9      	uxtb	r1, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	607a      	str	r2, [r7, #4]
 8007f26:	781a      	ldrb	r2, [r3, #0]
 8007f28:	183b      	adds	r3, r7, r0
 8007f2a:	188a      	adds	r2, r1, r2
 8007f2c:	701a      	strb	r2, [r3, #0]
	} while (--n);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	60bb      	str	r3, [r7, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1ea      	bne.n	8007f10 <sum_sfn+0x14>
	return sum;
 8007f3a:	183b      	adds	r3, r7, r0
 8007f3c:	781b      	ldrb	r3, [r3, #0]
}
 8007f3e:	0018      	movs	r0, r3
 8007f40:	46bd      	mov	sp, r7
 8007f42:	b004      	add	sp, #16
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007f46:	b5b0      	push	{r4, r5, r7, lr}
 8007f48:	b086      	sub	sp, #24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007f54:	2517      	movs	r5, #23
 8007f56:	197c      	adds	r4, r7, r5
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f7ff fc42 	bl	80077e6 <dir_sdi>
 8007f62:	0003      	movs	r3, r0
 8007f64:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8007f66:	197b      	adds	r3, r7, r5
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <dir_find+0x2e>
 8007f6e:	197b      	adds	r3, r7, r5
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	e0df      	b.n	8008134 <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007f74:	2114      	movs	r1, #20
 8007f76:	187b      	adds	r3, r7, r1
 8007f78:	22ff      	movs	r2, #255	; 0xff
 8007f7a:	701a      	strb	r2, [r3, #0]
 8007f7c:	2315      	movs	r3, #21
 8007f7e:	18fb      	adds	r3, r7, r3
 8007f80:	187a      	adds	r2, r7, r1
 8007f82:	7812      	ldrb	r2, [r2, #0]
 8007f84:	701a      	strb	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	4252      	negs	r2, r2
 8007f8c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	69da      	ldr	r2, [r3, #28]
 8007f92:	2517      	movs	r5, #23
 8007f94:	197c      	adds	r4, r7, r5
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	0011      	movs	r1, r2
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	f7fe fff6 	bl	8006f8c <move_window>
 8007fa0:	0003      	movs	r3, r0
 8007fa2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8007fa4:	0029      	movs	r1, r5
 8007fa6:	187b      	adds	r3, r7, r1
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d000      	beq.n	8007fb0 <dir_find+0x6a>
 8007fae:	e0b9      	b.n	8008124 <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a1a      	ldr	r2, [r3, #32]
 8007fb4:	2016      	movs	r0, #22
 8007fb6:	183b      	adds	r3, r7, r0
 8007fb8:	7812      	ldrb	r2, [r2, #0]
 8007fba:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007fbc:	183b      	adds	r3, r7, r0
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d103      	bne.n	8007fcc <dir_find+0x86>
 8007fc4:	187b      	adds	r3, r7, r1
 8007fc6:	2204      	movs	r2, #4
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	e0b0      	b.n	800812e <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	330b      	adds	r3, #11
 8007fd2:	781a      	ldrb	r2, [r3, #0]
 8007fd4:	200f      	movs	r0, #15
 8007fd6:	183b      	adds	r3, r7, r0
 8007fd8:	213f      	movs	r1, #63	; 0x3f
 8007fda:	400a      	ands	r2, r1
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	0001      	movs	r1, r0
 8007fe2:	187a      	adds	r2, r7, r1
 8007fe4:	7812      	ldrb	r2, [r2, #0]
 8007fe6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007fe8:	2316      	movs	r3, #22
 8007fea:	18fb      	adds	r3, r7, r3
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2be5      	cmp	r3, #229	; 0xe5
 8007ff0:	d008      	beq.n	8008004 <dir_find+0xbe>
 8007ff2:	187b      	adds	r3, r7, r1
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2208      	movs	r2, #8
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	d00c      	beq.n	8008016 <dir_find+0xd0>
 8007ffc:	187b      	adds	r3, r7, r1
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	2b0f      	cmp	r3, #15
 8008002:	d008      	beq.n	8008016 <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008004:	2315      	movs	r3, #21
 8008006:	18fb      	adds	r3, r7, r3
 8008008:	22ff      	movs	r2, #255	; 0xff
 800800a:	701a      	strb	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	4252      	negs	r2, r2
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
 8008014:	e077      	b.n	8008106 <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008016:	230f      	movs	r3, #15
 8008018:	18fb      	adds	r3, r7, r3
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b0f      	cmp	r3, #15
 800801e:	d148      	bne.n	80080b2 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	222f      	movs	r2, #47	; 0x2f
 8008024:	5c9b      	ldrb	r3, [r3, r2]
 8008026:	001a      	movs	r2, r3
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	4013      	ands	r3, r2
 800802c:	d000      	beq.n	8008030 <dir_find+0xea>
 800802e:	e06a      	b.n	8008106 <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008030:	2116      	movs	r1, #22
 8008032:	187b      	adds	r3, r7, r1
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2240      	movs	r2, #64	; 0x40
 8008038:	4013      	ands	r3, r2
 800803a:	d015      	beq.n	8008068 <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a1a      	ldr	r2, [r3, #32]
 8008040:	2314      	movs	r3, #20
 8008042:	18fb      	adds	r3, r7, r3
 8008044:	7b52      	ldrb	r2, [r2, #13]
 8008046:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008048:	187b      	adds	r3, r7, r1
 800804a:	0008      	movs	r0, r1
 800804c:	187a      	adds	r2, r7, r1
 800804e:	7812      	ldrb	r2, [r2, #0]
 8008050:	2140      	movs	r1, #64	; 0x40
 8008052:	438a      	bics	r2, r1
 8008054:	701a      	strb	r2, [r3, #0]
 8008056:	2315      	movs	r3, #21
 8008058:	18fb      	adds	r3, r7, r3
 800805a:	183a      	adds	r2, r7, r0
 800805c:	7812      	ldrb	r2, [r2, #0]
 800805e:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	695a      	ldr	r2, [r3, #20]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008068:	2316      	movs	r3, #22
 800806a:	18fa      	adds	r2, r7, r3
 800806c:	2415      	movs	r4, #21
 800806e:	193b      	adds	r3, r7, r4
 8008070:	7812      	ldrb	r2, [r2, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d117      	bne.n	80080a8 <dir_find+0x162>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	330d      	adds	r3, #13
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2214      	movs	r2, #20
 8008082:	18ba      	adds	r2, r7, r2
 8008084:	7812      	ldrb	r2, [r2, #0]
 8008086:	429a      	cmp	r2, r3
 8008088:	d10e      	bne.n	80080a8 <dir_find+0x162>
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	691a      	ldr	r2, [r3, #16]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	0019      	movs	r1, r3
 8008094:	0010      	movs	r0, r2
 8008096:	f7ff fda5 	bl	8007be4 <cmp_lfn>
 800809a:	1e03      	subs	r3, r0, #0
 800809c:	d004      	beq.n	80080a8 <dir_find+0x162>
 800809e:	193b      	adds	r3, r7, r4
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	e000      	b.n	80080aa <dir_find+0x164>
 80080a8:	22ff      	movs	r2, #255	; 0xff
 80080aa:	2315      	movs	r3, #21
 80080ac:	18fb      	adds	r3, r7, r3
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	e029      	b.n	8008106 <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80080b2:	2315      	movs	r3, #21
 80080b4:	18fb      	adds	r3, r7, r3
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10b      	bne.n	80080d4 <dir_find+0x18e>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	0018      	movs	r0, r3
 80080c2:	f7ff ff1b 	bl	8007efc <sum_sfn>
 80080c6:	0003      	movs	r3, r0
 80080c8:	001a      	movs	r2, r3
 80080ca:	2314      	movs	r3, #20
 80080cc:	18fb      	adds	r3, r7, r3
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d029      	beq.n	8008128 <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	222f      	movs	r2, #47	; 0x2f
 80080d8:	5c9b      	ldrb	r3, [r3, r2]
 80080da:	001a      	movs	r2, r3
 80080dc:	2301      	movs	r3, #1
 80080de:	4013      	ands	r3, r2
 80080e0:	d109      	bne.n	80080f6 <dir_find+0x1b0>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a18      	ldr	r0, [r3, #32]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3324      	adds	r3, #36	; 0x24
 80080ea:	220b      	movs	r2, #11
 80080ec:	0019      	movs	r1, r3
 80080ee:	f7fe fd5d 	bl	8006bac <mem_cmp>
 80080f2:	1e03      	subs	r3, r0, #0
 80080f4:	d01a      	beq.n	800812c <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80080f6:	2315      	movs	r3, #21
 80080f8:	18fb      	adds	r3, r7, r3
 80080fa:	22ff      	movs	r2, #255	; 0xff
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	4252      	negs	r2, r2
 8008104:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008106:	2517      	movs	r5, #23
 8008108:	197c      	adds	r4, r7, r5
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2100      	movs	r1, #0
 800810e:	0018      	movs	r0, r3
 8008110:	f7ff fbf5 	bl	80078fe <dir_next>
 8008114:	0003      	movs	r3, r0
 8008116:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8008118:	197b      	adds	r3, r7, r5
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d100      	bne.n	8008122 <dir_find+0x1dc>
 8008120:	e735      	b.n	8007f8e <dir_find+0x48>
 8008122:	e004      	b.n	800812e <dir_find+0x1e8>
		if (res != FR_OK) break;
 8008124:	46c0      	nop			; (mov r8, r8)
 8008126:	e002      	b.n	800812e <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008128:	46c0      	nop			; (mov r8, r8)
 800812a:	e000      	b.n	800812e <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800812c:	46c0      	nop			; (mov r8, r8)

	return res;
 800812e:	2317      	movs	r3, #23
 8008130:	18fb      	adds	r3, r7, r3
 8008132:	781b      	ldrb	r3, [r3, #0]
}
 8008134:	0018      	movs	r0, r3
 8008136:	46bd      	mov	sp, r7
 8008138:	b006      	add	sp, #24
 800813a:	bdb0      	pop	{r4, r5, r7, pc}

0800813c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800813c:	b5b0      	push	{r4, r5, r7, lr}
 800813e:	b08c      	sub	sp, #48	; 0x30
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	222f      	movs	r2, #47	; 0x2f
 800814e:	5c9b      	ldrb	r3, [r3, r2]
 8008150:	001a      	movs	r2, r3
 8008152:	23a0      	movs	r3, #160	; 0xa0
 8008154:	4013      	ands	r3, r2
 8008156:	d001      	beq.n	800815c <dir_register+0x20>
 8008158:	2306      	movs	r3, #6
 800815a:	e0fb      	b.n	8008354 <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800815c:	2300      	movs	r3, #0
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
 8008160:	e002      	b.n	8008168 <dir_register+0x2c>
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	3301      	adds	r3, #1
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	691a      	ldr	r2, [r3, #16]
 800816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	18d3      	adds	r3, r2, r3
 8008172:	881b      	ldrh	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f4      	bne.n	8008162 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3324      	adds	r3, #36	; 0x24
 800817c:	0019      	movs	r1, r3
 800817e:	240c      	movs	r4, #12
 8008180:	193b      	adds	r3, r7, r4
 8008182:	220c      	movs	r2, #12
 8008184:	0018      	movs	r0, r3
 8008186:	f7fe fcd9 	bl	8006b3c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800818a:	193b      	adds	r3, r7, r4
 800818c:	7adb      	ldrb	r3, [r3, #11]
 800818e:	001a      	movs	r2, r3
 8008190:	2301      	movs	r3, #1
 8008192:	4013      	ands	r3, r2
 8008194:	d037      	beq.n	8008206 <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	222f      	movs	r2, #47	; 0x2f
 800819a:	2140      	movs	r1, #64	; 0x40
 800819c:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 800819e:	2301      	movs	r3, #1
 80081a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081a2:	e018      	b.n	80081d6 <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	3324      	adds	r3, #36	; 0x24
 80081a8:	0018      	movs	r0, r3
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	691a      	ldr	r2, [r3, #16]
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	210c      	movs	r1, #12
 80081b2:	1879      	adds	r1, r7, r1
 80081b4:	f7ff fe0e 	bl	8007dd4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80081b8:	252f      	movs	r5, #47	; 0x2f
 80081ba:	197c      	adds	r4, r7, r5
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	0018      	movs	r0, r3
 80081c0:	f7ff fec1 	bl	8007f46 <dir_find>
 80081c4:	0003      	movs	r3, r0
 80081c6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80081c8:	197b      	adds	r3, r7, r5
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	3301      	adds	r3, #1
 80081d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	2b63      	cmp	r3, #99	; 0x63
 80081da:	d9e3      	bls.n	80081a4 <dir_register+0x68>
 80081dc:	e000      	b.n	80081e0 <dir_register+0xa4>
			if (res != FR_OK) break;
 80081de:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	2b64      	cmp	r3, #100	; 0x64
 80081e4:	d101      	bne.n	80081ea <dir_register+0xae>
 80081e6:	2307      	movs	r3, #7
 80081e8:	e0b4      	b.n	8008354 <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80081ea:	222f      	movs	r2, #47	; 0x2f
 80081ec:	18bb      	adds	r3, r7, r2
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	2b04      	cmp	r3, #4
 80081f2:	d002      	beq.n	80081fa <dir_register+0xbe>
 80081f4:	18bb      	adds	r3, r7, r2
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	e0ac      	b.n	8008354 <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80081fa:	230c      	movs	r3, #12
 80081fc:	18fb      	adds	r3, r7, r3
 80081fe:	7ad9      	ldrb	r1, [r3, #11]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	222f      	movs	r2, #47	; 0x2f
 8008204:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008206:	230c      	movs	r3, #12
 8008208:	18fb      	adds	r3, r7, r3
 800820a:	7adb      	ldrb	r3, [r3, #11]
 800820c:	001a      	movs	r2, r3
 800820e:	2302      	movs	r3, #2
 8008210:	4013      	ands	r3, r2
 8008212:	d008      	beq.n	8008226 <dir_register+0xea>
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	330c      	adds	r3, #12
 8008218:	210d      	movs	r1, #13
 800821a:	0018      	movs	r0, r3
 800821c:	f7f7 ff90 	bl	8000140 <__udivsi3>
 8008220:	0003      	movs	r3, r0
 8008222:	3301      	adds	r3, #1
 8008224:	e000      	b.n	8008228 <dir_register+0xec>
 8008226:	2301      	movs	r3, #1
 8008228:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800822a:	252f      	movs	r5, #47	; 0x2f
 800822c:	197c      	adds	r4, r7, r5
 800822e:	6a3a      	ldr	r2, [r7, #32]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	0011      	movs	r1, r2
 8008234:	0018      	movs	r0, r3
 8008236:	f7ff fc3e 	bl	8007ab6 <dir_alloc>
 800823a:	0003      	movs	r3, r0
 800823c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800823e:	0029      	movs	r1, r5
 8008240:	187b      	adds	r3, r7, r1
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d153      	bne.n	80082f0 <dir_register+0x1b4>
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	3b01      	subs	r3, #1
 800824c:	623b      	str	r3, [r7, #32]
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d04d      	beq.n	80082f0 <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	695a      	ldr	r2, [r3, #20]
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	015b      	lsls	r3, r3, #5
 800825c:	1ad2      	subs	r2, r2, r3
 800825e:	000d      	movs	r5, r1
 8008260:	187c      	adds	r4, r7, r1
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	0011      	movs	r1, r2
 8008266:	0018      	movs	r0, r3
 8008268:	f7ff fabd 	bl	80077e6 <dir_sdi>
 800826c:	0003      	movs	r3, r0
 800826e:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008270:	197b      	adds	r3, r7, r5
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d13b      	bne.n	80082f0 <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3324      	adds	r3, #36	; 0x24
 800827c:	221b      	movs	r2, #27
 800827e:	18bc      	adds	r4, r7, r2
 8008280:	0018      	movs	r0, r3
 8008282:	f7ff fe3b 	bl	8007efc <sum_sfn>
 8008286:	0003      	movs	r3, r0
 8008288:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69da      	ldr	r2, [r3, #28]
 800828e:	252f      	movs	r5, #47	; 0x2f
 8008290:	197c      	adds	r4, r7, r5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	0011      	movs	r1, r2
 8008296:	0018      	movs	r0, r3
 8008298:	f7fe fe78 	bl	8006f8c <move_window>
 800829c:	0003      	movs	r3, r0
 800829e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 80082a0:	002c      	movs	r4, r5
 80082a2:	193b      	adds	r3, r7, r4
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d121      	bne.n	80082ee <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	6918      	ldr	r0, [r3, #16]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a19      	ldr	r1, [r3, #32]
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	231b      	movs	r3, #27
 80082b8:	18fb      	adds	r3, r7, r3
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	f7ff fd12 	bl	8007ce4 <put_lfn>
				fs->wflag = 1;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	2201      	movs	r2, #1
 80082c4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80082c6:	0025      	movs	r5, r4
 80082c8:	193c      	adds	r4, r7, r4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2100      	movs	r1, #0
 80082ce:	0018      	movs	r0, r3
 80082d0:	f7ff fb15 	bl	80078fe <dir_next>
 80082d4:	0003      	movs	r3, r0
 80082d6:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 80082d8:	197b      	adds	r3, r7, r5
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d107      	bne.n	80082f0 <dir_register+0x1b4>
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	623b      	str	r3, [r7, #32]
 80082e6:	6a3b      	ldr	r3, [r7, #32]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1ce      	bne.n	800828a <dir_register+0x14e>
 80082ec:	e000      	b.n	80082f0 <dir_register+0x1b4>
				if (res != FR_OK) break;
 80082ee:	46c0      	nop			; (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80082f0:	252f      	movs	r5, #47	; 0x2f
 80082f2:	197b      	adds	r3, r7, r5
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d129      	bne.n	800834e <dir_register+0x212>
		res = move_window(fs, dp->sect);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	69da      	ldr	r2, [r3, #28]
 80082fe:	197c      	adds	r4, r7, r5
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	0011      	movs	r1, r2
 8008304:	0018      	movs	r0, r3
 8008306:	f7fe fe41 	bl	8006f8c <move_window>
 800830a:	0003      	movs	r3, r0
 800830c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800830e:	197b      	adds	r3, r7, r5
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d11b      	bne.n	800834e <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	2220      	movs	r2, #32
 800831c:	2100      	movs	r1, #0
 800831e:	0018      	movs	r0, r3
 8008320:	f7fe fc2b 	bl	8006b7a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a18      	ldr	r0, [r3, #32]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3324      	adds	r3, #36	; 0x24
 800832c:	220b      	movs	r2, #11
 800832e:	0019      	movs	r1, r3
 8008330:	f7fe fc04 	bl	8006b3c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	222f      	movs	r2, #47	; 0x2f
 8008338:	5c9a      	ldrb	r2, [r3, r2]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a1b      	ldr	r3, [r3, #32]
 800833e:	330c      	adds	r3, #12
 8008340:	2118      	movs	r1, #24
 8008342:	400a      	ands	r2, r1
 8008344:	b2d2      	uxtb	r2, r2
 8008346:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	2201      	movs	r2, #1
 800834c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800834e:	232f      	movs	r3, #47	; 0x2f
 8008350:	18fb      	adds	r3, r7, r3
 8008352:	781b      	ldrb	r3, [r3, #0]
}
 8008354:	0018      	movs	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	b00c      	add	sp, #48	; 0x30
 800835a:	bdb0      	pop	{r4, r5, r7, pc}

0800835c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800835c:	b5b0      	push	{r4, r5, r7, lr}
 800835e:	b08a      	sub	sp, #40	; 0x28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	2300      	movs	r3, #0
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	61ba      	str	r2, [r7, #24]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	18d3      	adds	r3, r2, r3
 8008386:	781a      	ldrb	r2, [r3, #0]
 8008388:	2124      	movs	r1, #36	; 0x24
 800838a:	187b      	adds	r3, r7, r1
 800838c:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 800838e:	000a      	movs	r2, r1
 8008390:	18bb      	adds	r3, r7, r2
 8008392:	881b      	ldrh	r3, [r3, #0]
 8008394:	2b1f      	cmp	r3, #31
 8008396:	d94e      	bls.n	8008436 <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008398:	18bb      	adds	r3, r7, r2
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	2b2f      	cmp	r3, #47	; 0x2f
 800839e:	d007      	beq.n	80083b0 <create_name+0x54>
 80083a0:	18bb      	adds	r3, r7, r2
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	2b5c      	cmp	r3, #92	; 0x5c
 80083a6:	d110      	bne.n	80083ca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80083a8:	e002      	b.n	80083b0 <create_name+0x54>
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	3301      	adds	r3, #1
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	18d3      	adds	r3, r2, r3
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b2f      	cmp	r3, #47	; 0x2f
 80083ba:	d0f6      	beq.n	80083aa <create_name+0x4e>
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	18d3      	adds	r3, r2, r3
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b5c      	cmp	r3, #92	; 0x5c
 80083c6:	d0f0      	beq.n	80083aa <create_name+0x4e>
			break;
 80083c8:	e036      	b.n	8008438 <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2bfe      	cmp	r3, #254	; 0xfe
 80083ce:	d901      	bls.n	80083d4 <create_name+0x78>
 80083d0:	2306      	movs	r3, #6
 80083d2:	e1c2      	b.n	800875a <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 80083d4:	2524      	movs	r5, #36	; 0x24
 80083d6:	197b      	adds	r3, r7, r5
 80083d8:	197a      	adds	r2, r7, r5
 80083da:	8812      	ldrh	r2, [r2, #0]
 80083dc:	21ff      	movs	r1, #255	; 0xff
 80083de:	400a      	ands	r2, r1
 80083e0:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80083e2:	197c      	adds	r4, r7, r5
 80083e4:	197b      	adds	r3, r7, r5
 80083e6:	881b      	ldrh	r3, [r3, #0]
 80083e8:	2101      	movs	r1, #1
 80083ea:	0018      	movs	r0, r3
 80083ec:	f001 fb70 	bl	8009ad0 <ff_convert>
 80083f0:	0003      	movs	r3, r0
 80083f2:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80083f4:	197b      	adds	r3, r7, r5
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <create_name+0xa4>
 80083fc:	2306      	movs	r3, #6
 80083fe:	e1ac      	b.n	800875a <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008400:	2224      	movs	r2, #36	; 0x24
 8008402:	18bb      	adds	r3, r7, r2
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	2b7f      	cmp	r3, #127	; 0x7f
 8008408:	d80a      	bhi.n	8008420 <create_name+0xc4>
 800840a:	18bb      	adds	r3, r7, r2
 800840c:	881a      	ldrh	r2, [r3, #0]
 800840e:	4ba7      	ldr	r3, [pc, #668]	; (80086ac <create_name+0x350>)
 8008410:	0011      	movs	r1, r2
 8008412:	0018      	movs	r0, r3
 8008414:	f7fe fbef 	bl	8006bf6 <chk_chr>
 8008418:	1e03      	subs	r3, r0, #0
 800841a:	d001      	beq.n	8008420 <create_name+0xc4>
 800841c:	2306      	movs	r3, #6
 800841e:	e19c      	b.n	800875a <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	617a      	str	r2, [r7, #20]
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	18d3      	adds	r3, r2, r3
 800842c:	2224      	movs	r2, #36	; 0x24
 800842e:	18ba      	adds	r2, r7, r2
 8008430:	8812      	ldrh	r2, [r2, #0]
 8008432:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008434:	e7a2      	b.n	800837c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008436:	46c0      	nop			; (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	18d2      	adds	r2, r2, r3
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008442:	2324      	movs	r3, #36	; 0x24
 8008444:	18fb      	adds	r3, r7, r3
 8008446:	881b      	ldrh	r3, [r3, #0]
 8008448:	2b1f      	cmp	r3, #31
 800844a:	d801      	bhi.n	8008450 <create_name+0xf4>
 800844c:	2204      	movs	r2, #4
 800844e:	e000      	b.n	8008452 <create_name+0xf6>
 8008450:	2200      	movs	r2, #0
 8008452:	2327      	movs	r3, #39	; 0x27
 8008454:	18fb      	adds	r3, r7, r3
 8008456:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008458:	e016      	b.n	8008488 <create_name+0x12c>
		w = lfn[di - 1];
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	4a94      	ldr	r2, [pc, #592]	; (80086b0 <create_name+0x354>)
 800845e:	4694      	mov	ip, r2
 8008460:	4463      	add	r3, ip
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	18d2      	adds	r2, r2, r3
 8008468:	2124      	movs	r1, #36	; 0x24
 800846a:	187b      	adds	r3, r7, r1
 800846c:	8812      	ldrh	r2, [r2, #0]
 800846e:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8008470:	000a      	movs	r2, r1
 8008472:	18bb      	adds	r3, r7, r2
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	2b20      	cmp	r3, #32
 8008478:	d003      	beq.n	8008482 <create_name+0x126>
 800847a:	18bb      	adds	r3, r7, r2
 800847c:	881b      	ldrh	r3, [r3, #0]
 800847e:	2b2e      	cmp	r3, #46	; 0x2e
 8008480:	d106      	bne.n	8008490 <create_name+0x134>
		di--;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	3b01      	subs	r3, #1
 8008486:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e5      	bne.n	800845a <create_name+0xfe>
 800848e:	e000      	b.n	8008492 <create_name+0x136>
		if (w != ' ' && w != '.') break;
 8008490:	46c0      	nop			; (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	18d3      	adds	r3, r2, r3
 800849a:	2200      	movs	r2, #0
 800849c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <create_name+0x14c>
 80084a4:	2306      	movs	r3, #6
 80084a6:	e158      	b.n	800875a <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3324      	adds	r3, #36	; 0x24
 80084ac:	220b      	movs	r2, #11
 80084ae:	2120      	movs	r1, #32
 80084b0:	0018      	movs	r0, r3
 80084b2:	f7fe fb62 	bl	8006b7a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80084b6:	2300      	movs	r3, #0
 80084b8:	61bb      	str	r3, [r7, #24]
 80084ba:	e002      	b.n	80084c2 <create_name+0x166>
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	3301      	adds	r3, #1
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	18d3      	adds	r3, r2, r3
 80084ca:	881b      	ldrh	r3, [r3, #0]
 80084cc:	2b20      	cmp	r3, #32
 80084ce:	d0f5      	beq.n	80084bc <create_name+0x160>
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	005b      	lsls	r3, r3, #1
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	18d3      	adds	r3, r2, r3
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	2b2e      	cmp	r3, #46	; 0x2e
 80084dc:	d0ee      	beq.n	80084bc <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <create_name+0x19e>
 80084e4:	2227      	movs	r2, #39	; 0x27
 80084e6:	18bb      	adds	r3, r7, r2
 80084e8:	18ba      	adds	r2, r7, r2
 80084ea:	7812      	ldrb	r2, [r2, #0]
 80084ec:	2103      	movs	r1, #3
 80084ee:	430a      	orrs	r2, r1
 80084f0:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80084f2:	e002      	b.n	80084fa <create_name+0x19e>
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	617b      	str	r3, [r7, #20]
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <create_name+0x1b8>
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	4a6b      	ldr	r2, [pc, #428]	; (80086b0 <create_name+0x354>)
 8008504:	4694      	mov	ip, r2
 8008506:	4463      	add	r3, ip
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	18d3      	adds	r3, r2, r3
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	2b2e      	cmp	r3, #46	; 0x2e
 8008512:	d1ef      	bne.n	80084f4 <create_name+0x198>

	i = b = 0; ni = 8;
 8008514:	2326      	movs	r3, #38	; 0x26
 8008516:	18fb      	adds	r3, r7, r3
 8008518:	2200      	movs	r2, #0
 800851a:	701a      	strb	r2, [r3, #0]
 800851c:	2300      	movs	r3, #0
 800851e:	623b      	str	r3, [r7, #32]
 8008520:	2308      	movs	r3, #8
 8008522:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	61ba      	str	r2, [r7, #24]
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	18d2      	adds	r2, r2, r3
 8008530:	2124      	movs	r1, #36	; 0x24
 8008532:	187b      	adds	r3, r7, r1
 8008534:	8812      	ldrh	r2, [r2, #0]
 8008536:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 8008538:	000a      	movs	r2, r1
 800853a:	18bb      	adds	r3, r7, r2
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d100      	bne.n	8008544 <create_name+0x1e8>
 8008542:	e0b1      	b.n	80086a8 <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008544:	18bb      	adds	r3, r7, r2
 8008546:	881b      	ldrh	r3, [r3, #0]
 8008548:	2b20      	cmp	r3, #32
 800854a:	d007      	beq.n	800855c <create_name+0x200>
 800854c:	18bb      	adds	r3, r7, r2
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	2b2e      	cmp	r3, #46	; 0x2e
 8008552:	d10b      	bne.n	800856c <create_name+0x210>
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	429a      	cmp	r2, r3
 800855a:	d007      	beq.n	800856c <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 800855c:	2227      	movs	r2, #39	; 0x27
 800855e:	18bb      	adds	r3, r7, r2
 8008560:	18ba      	adds	r2, r7, r2
 8008562:	7812      	ldrb	r2, [r2, #0]
 8008564:	2103      	movs	r1, #3
 8008566:	430a      	orrs	r2, r1
 8008568:	701a      	strb	r2, [r3, #0]
 800856a:	e09c      	b.n	80086a6 <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800856c:	6a3a      	ldr	r2, [r7, #32]
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	429a      	cmp	r2, r3
 8008572:	d203      	bcs.n	800857c <create_name+0x220>
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	429a      	cmp	r2, r3
 800857a:	d127      	bne.n	80085cc <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	2b0b      	cmp	r3, #11
 8008580:	d107      	bne.n	8008592 <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 8008582:	2227      	movs	r2, #39	; 0x27
 8008584:	18bb      	adds	r3, r7, r2
 8008586:	18ba      	adds	r2, r7, r2
 8008588:	7812      	ldrb	r2, [r2, #0]
 800858a:	2103      	movs	r1, #3
 800858c:	430a      	orrs	r2, r1
 800858e:	701a      	strb	r2, [r3, #0]
 8008590:	e095      	b.n	80086be <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008592:	69ba      	ldr	r2, [r7, #24]
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	429a      	cmp	r2, r3
 8008598:	d006      	beq.n	80085a8 <create_name+0x24c>
 800859a:	2227      	movs	r2, #39	; 0x27
 800859c:	18bb      	adds	r3, r7, r2
 800859e:	18ba      	adds	r2, r7, r2
 80085a0:	7812      	ldrb	r2, [r2, #0]
 80085a2:	2103      	movs	r1, #3
 80085a4:	430a      	orrs	r2, r1
 80085a6:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d900      	bls.n	80085b2 <create_name+0x256>
 80085b0:	e084      	b.n	80086bc <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	61bb      	str	r3, [r7, #24]
 80085b6:	2308      	movs	r3, #8
 80085b8:	623b      	str	r3, [r7, #32]
 80085ba:	230b      	movs	r3, #11
 80085bc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80085be:	2226      	movs	r2, #38	; 0x26
 80085c0:	18bb      	adds	r3, r7, r2
 80085c2:	18ba      	adds	r2, r7, r2
 80085c4:	7812      	ldrb	r2, [r2, #0]
 80085c6:	0092      	lsls	r2, r2, #2
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	e06c      	b.n	80086a6 <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80085cc:	2524      	movs	r5, #36	; 0x24
 80085ce:	197b      	adds	r3, r7, r5
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	2b7f      	cmp	r3, #127	; 0x7f
 80085d4:	d91a      	bls.n	800860c <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80085d6:	197c      	adds	r4, r7, r5
 80085d8:	197b      	adds	r3, r7, r5
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	2100      	movs	r1, #0
 80085de:	0018      	movs	r0, r3
 80085e0:	f001 fa76 	bl	8009ad0 <ff_convert>
 80085e4:	0003      	movs	r3, r0
 80085e6:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80085e8:	197b      	adds	r3, r7, r5
 80085ea:	881b      	ldrh	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d006      	beq.n	80085fe <create_name+0x2a2>
 80085f0:	197b      	adds	r3, r7, r5
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	3b80      	subs	r3, #128	; 0x80
 80085f6:	4a2f      	ldr	r2, [pc, #188]	; (80086b4 <create_name+0x358>)
 80085f8:	5cd2      	ldrb	r2, [r2, r3]
 80085fa:	197b      	adds	r3, r7, r5
 80085fc:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80085fe:	2227      	movs	r2, #39	; 0x27
 8008600:	18bb      	adds	r3, r7, r2
 8008602:	18ba      	adds	r2, r7, r2
 8008604:	7812      	ldrb	r2, [r2, #0]
 8008606:	2102      	movs	r1, #2
 8008608:	430a      	orrs	r2, r1
 800860a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800860c:	2224      	movs	r2, #36	; 0x24
 800860e:	18bb      	adds	r3, r7, r2
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d008      	beq.n	8008628 <create_name+0x2cc>
 8008616:	18bb      	adds	r3, r7, r2
 8008618:	881a      	ldrh	r2, [r3, #0]
 800861a:	4b27      	ldr	r3, [pc, #156]	; (80086b8 <create_name+0x35c>)
 800861c:	0011      	movs	r1, r2
 800861e:	0018      	movs	r0, r3
 8008620:	f7fe fae9 	bl	8006bf6 <chk_chr>
 8008624:	1e03      	subs	r3, r0, #0
 8008626:	d00b      	beq.n	8008640 <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008628:	2324      	movs	r3, #36	; 0x24
 800862a:	18fb      	adds	r3, r7, r3
 800862c:	225f      	movs	r2, #95	; 0x5f
 800862e:	801a      	strh	r2, [r3, #0]
 8008630:	2227      	movs	r2, #39	; 0x27
 8008632:	18bb      	adds	r3, r7, r2
 8008634:	18ba      	adds	r2, r7, r2
 8008636:	7812      	ldrb	r2, [r2, #0]
 8008638:	2103      	movs	r1, #3
 800863a:	430a      	orrs	r2, r1
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	e025      	b.n	800868c <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008640:	2224      	movs	r2, #36	; 0x24
 8008642:	18bb      	adds	r3, r7, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	2b40      	cmp	r3, #64	; 0x40
 8008648:	d90b      	bls.n	8008662 <create_name+0x306>
 800864a:	18bb      	adds	r3, r7, r2
 800864c:	881b      	ldrh	r3, [r3, #0]
 800864e:	2b5a      	cmp	r3, #90	; 0x5a
 8008650:	d807      	bhi.n	8008662 <create_name+0x306>
					b |= 2;
 8008652:	2226      	movs	r2, #38	; 0x26
 8008654:	18bb      	adds	r3, r7, r2
 8008656:	18ba      	adds	r2, r7, r2
 8008658:	7812      	ldrb	r2, [r2, #0]
 800865a:	2102      	movs	r1, #2
 800865c:	430a      	orrs	r2, r1
 800865e:	701a      	strb	r2, [r3, #0]
 8008660:	e014      	b.n	800868c <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008662:	2024      	movs	r0, #36	; 0x24
 8008664:	183b      	adds	r3, r7, r0
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	2b60      	cmp	r3, #96	; 0x60
 800866a:	d90f      	bls.n	800868c <create_name+0x330>
 800866c:	183b      	adds	r3, r7, r0
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	2b7a      	cmp	r3, #122	; 0x7a
 8008672:	d80b      	bhi.n	800868c <create_name+0x330>
						b |= 1; w -= 0x20;
 8008674:	2226      	movs	r2, #38	; 0x26
 8008676:	18bb      	adds	r3, r7, r2
 8008678:	18ba      	adds	r2, r7, r2
 800867a:	7812      	ldrb	r2, [r2, #0]
 800867c:	2101      	movs	r1, #1
 800867e:	430a      	orrs	r2, r1
 8008680:	701a      	strb	r2, [r3, #0]
 8008682:	183b      	adds	r3, r7, r0
 8008684:	183a      	adds	r2, r7, r0
 8008686:	8812      	ldrh	r2, [r2, #0]
 8008688:	3a20      	subs	r2, #32
 800868a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	623a      	str	r2, [r7, #32]
 8008692:	2224      	movs	r2, #36	; 0x24
 8008694:	18ba      	adds	r2, r7, r2
 8008696:	8812      	ldrh	r2, [r2, #0]
 8008698:	b2d0      	uxtb	r0, r2
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	2124      	movs	r1, #36	; 0x24
 800869e:	18d3      	adds	r3, r2, r3
 80086a0:	185b      	adds	r3, r3, r1
 80086a2:	1c02      	adds	r2, r0, #0
 80086a4:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 80086a6:	e73d      	b.n	8008524 <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 80086a8:	46c0      	nop			; (mov r8, r8)
 80086aa:	e008      	b.n	80086be <create_name+0x362>
 80086ac:	0800e6b0 	.word	0x0800e6b0
 80086b0:	7fffffff 	.word	0x7fffffff
 80086b4:	0800e80c 	.word	0x0800e80c
 80086b8:	0800e6bc 	.word	0x0800e6bc
			if (si > di) break;			/* No extension */
 80086bc:	46c0      	nop			; (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2224      	movs	r2, #36	; 0x24
 80086c2:	5c9b      	ldrb	r3, [r3, r2]
 80086c4:	2be5      	cmp	r3, #229	; 0xe5
 80086c6:	d103      	bne.n	80086d0 <create_name+0x374>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2224      	movs	r2, #36	; 0x24
 80086cc:	2105      	movs	r1, #5
 80086ce:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	2b08      	cmp	r3, #8
 80086d4:	d105      	bne.n	80086e2 <create_name+0x386>
 80086d6:	2226      	movs	r2, #38	; 0x26
 80086d8:	18bb      	adds	r3, r7, r2
 80086da:	18ba      	adds	r2, r7, r2
 80086dc:	7812      	ldrb	r2, [r2, #0]
 80086de:	0092      	lsls	r2, r2, #2
 80086e0:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80086e2:	2126      	movs	r1, #38	; 0x26
 80086e4:	187b      	adds	r3, r7, r1
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	220c      	movs	r2, #12
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b0c      	cmp	r3, #12
 80086ee:	d005      	beq.n	80086fc <create_name+0x3a0>
 80086f0:	187b      	adds	r3, r7, r1
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2203      	movs	r2, #3
 80086f6:	4013      	ands	r3, r2
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d106      	bne.n	800870a <create_name+0x3ae>
 80086fc:	2227      	movs	r2, #39	; 0x27
 80086fe:	18bb      	adds	r3, r7, r2
 8008700:	18ba      	adds	r2, r7, r2
 8008702:	7812      	ldrb	r2, [r2, #0]
 8008704:	2102      	movs	r1, #2
 8008706:	430a      	orrs	r2, r1
 8008708:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800870a:	2127      	movs	r1, #39	; 0x27
 800870c:	187b      	adds	r3, r7, r1
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2202      	movs	r2, #2
 8008712:	4013      	ands	r3, r2
 8008714:	d11a      	bne.n	800874c <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008716:	2326      	movs	r3, #38	; 0x26
 8008718:	18fb      	adds	r3, r7, r3
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2203      	movs	r2, #3
 800871e:	4013      	ands	r3, r2
 8008720:	2b01      	cmp	r3, #1
 8008722:	d105      	bne.n	8008730 <create_name+0x3d4>
 8008724:	187b      	adds	r3, r7, r1
 8008726:	187a      	adds	r2, r7, r1
 8008728:	7812      	ldrb	r2, [r2, #0]
 800872a:	2110      	movs	r1, #16
 800872c:	430a      	orrs	r2, r1
 800872e:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008730:	2326      	movs	r3, #38	; 0x26
 8008732:	18fb      	adds	r3, r7, r3
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	220c      	movs	r2, #12
 8008738:	4013      	ands	r3, r2
 800873a:	2b04      	cmp	r3, #4
 800873c:	d106      	bne.n	800874c <create_name+0x3f0>
 800873e:	2227      	movs	r2, #39	; 0x27
 8008740:	18bb      	adds	r3, r7, r2
 8008742:	18ba      	adds	r2, r7, r2
 8008744:	7812      	ldrb	r2, [r2, #0]
 8008746:	2108      	movs	r1, #8
 8008748:	430a      	orrs	r2, r1
 800874a:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2227      	movs	r2, #39	; 0x27
 8008750:	18ba      	adds	r2, r7, r2
 8008752:	212f      	movs	r1, #47	; 0x2f
 8008754:	7812      	ldrb	r2, [r2, #0]
 8008756:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 8008758:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800875a:	0018      	movs	r0, r3
 800875c:	46bd      	mov	sp, r7
 800875e:	b00a      	add	sp, #40	; 0x28
 8008760:	bdb0      	pop	{r4, r5, r7, pc}
 8008762:	46c0      	nop			; (mov r8, r8)

08008764 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008764:	b5b0      	push	{r4, r5, r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008778:	e002      	b.n	8008780 <follow_path+0x1c>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	3301      	adds	r3, #1
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	2b2f      	cmp	r3, #47	; 0x2f
 8008786:	d0f8      	beq.n	800877a <follow_path+0x16>
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b5c      	cmp	r3, #92	; 0x5c
 800878e:	d0f4      	beq.n	800877a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2200      	movs	r2, #0
 8008794:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b1f      	cmp	r3, #31
 800879c:	d80d      	bhi.n	80087ba <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	222f      	movs	r2, #47	; 0x2f
 80087a2:	2180      	movs	r1, #128	; 0x80
 80087a4:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 80087a6:	2317      	movs	r3, #23
 80087a8:	18fc      	adds	r4, r7, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2100      	movs	r1, #0
 80087ae:	0018      	movs	r0, r3
 80087b0:	f7ff f819 	bl	80077e6 <dir_sdi>
 80087b4:	0003      	movs	r3, r0
 80087b6:	7023      	strb	r3, [r4, #0]
 80087b8:	e057      	b.n	800886a <follow_path+0x106>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80087ba:	2517      	movs	r5, #23
 80087bc:	197c      	adds	r4, r7, r5
 80087be:	003a      	movs	r2, r7
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	0011      	movs	r1, r2
 80087c4:	0018      	movs	r0, r3
 80087c6:	f7ff fdc9 	bl	800835c <create_name>
 80087ca:	0003      	movs	r3, r0
 80087cc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80087ce:	197b      	adds	r3, r7, r5
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d144      	bne.n	8008860 <follow_path+0xfc>
			res = dir_find(dp);				/* Find an object with the segment name */
 80087d6:	197c      	adds	r4, r7, r5
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	0018      	movs	r0, r3
 80087dc:	f7ff fbb3 	bl	8007f46 <dir_find>
 80087e0:	0003      	movs	r3, r0
 80087e2:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80087e4:	200b      	movs	r0, #11
 80087e6:	183b      	adds	r3, r7, r0
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	212f      	movs	r1, #47	; 0x2f
 80087ec:	5c52      	ldrb	r2, [r2, r1]
 80087ee:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80087f0:	197b      	adds	r3, r7, r5
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00c      	beq.n	8008812 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80087f8:	197b      	adds	r3, r7, r5
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b04      	cmp	r3, #4
 80087fe:	d131      	bne.n	8008864 <follow_path+0x100>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008800:	183b      	adds	r3, r7, r0
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2204      	movs	r2, #4
 8008806:	4013      	ands	r3, r2
 8008808:	d12c      	bne.n	8008864 <follow_path+0x100>
 800880a:	197b      	adds	r3, r7, r5
 800880c:	2205      	movs	r2, #5
 800880e:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8008810:	e028      	b.n	8008864 <follow_path+0x100>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008812:	230b      	movs	r3, #11
 8008814:	18fb      	adds	r3, r7, r3
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2204      	movs	r2, #4
 800881a:	4013      	ands	r3, r2
 800881c:	d124      	bne.n	8008868 <follow_path+0x104>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	799b      	ldrb	r3, [r3, #6]
 8008822:	001a      	movs	r2, r3
 8008824:	2310      	movs	r3, #16
 8008826:	4013      	ands	r3, r2
 8008828:	d104      	bne.n	8008834 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 800882a:	2317      	movs	r3, #23
 800882c:	18fb      	adds	r3, r7, r3
 800882e:	2205      	movs	r2, #5
 8008830:	701a      	strb	r2, [r3, #0]
 8008832:	e01a      	b.n	800886a <follow_path+0x106>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3338      	adds	r3, #56	; 0x38
 8008838:	001c      	movs	r4, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	695a      	ldr	r2, [r3, #20]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	899b      	ldrh	r3, [r3, #12]
 8008842:	0019      	movs	r1, r3
 8008844:	0010      	movs	r0, r2
 8008846:	f7f7 fd01 	bl	800024c <__aeabi_uidivmod>
 800884a:	000b      	movs	r3, r1
 800884c:	18e2      	adds	r2, r4, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	0011      	movs	r1, r2
 8008852:	0018      	movs	r0, r3
 8008854:	f7ff f987 	bl	8007b66 <ld_clust>
 8008858:	0002      	movs	r2, r0
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800885e:	e7ac      	b.n	80087ba <follow_path+0x56>
			if (res != FR_OK) break;
 8008860:	46c0      	nop			; (mov r8, r8)
 8008862:	e002      	b.n	800886a <follow_path+0x106>
				break;
 8008864:	46c0      	nop			; (mov r8, r8)
 8008866:	e000      	b.n	800886a <follow_path+0x106>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008868:	46c0      	nop			; (mov r8, r8)
			}
		}
	}

	return res;
 800886a:	2317      	movs	r3, #23
 800886c:	18fb      	adds	r3, r7, r3
 800886e:	781b      	ldrb	r3, [r3, #0]
}
 8008870:	0018      	movs	r0, r3
 8008872:	46bd      	mov	sp, r7
 8008874:	b006      	add	sp, #24
 8008876:	bdb0      	pop	{r4, r5, r7, pc}

08008878 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008880:	2301      	movs	r3, #1
 8008882:	425b      	negs	r3, r3
 8008884:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d031      	beq.n	80088f2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	617b      	str	r3, [r7, #20]
 8008894:	e002      	b.n	800889c <get_ldnumber+0x24>
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	3301      	adds	r3, #1
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	2b1f      	cmp	r3, #31
 80088a2:	d903      	bls.n	80088ac <get_ldnumber+0x34>
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b3a      	cmp	r3, #58	; 0x3a
 80088aa:	d1f4      	bne.n	8008896 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b3a      	cmp	r3, #58	; 0x3a
 80088b2:	d11c      	bne.n	80088ee <get_ldnumber+0x76>
			tp = *path;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	60fa      	str	r2, [r7, #12]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	3b30      	subs	r3, #48	; 0x30
 80088c4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b09      	cmp	r3, #9
 80088ca:	d80e      	bhi.n	80088ea <get_ldnumber+0x72>
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d10a      	bne.n	80088ea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d107      	bne.n	80088ea <get_ldnumber+0x72>
					vol = (int)i;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	3301      	adds	r3, #1
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	e002      	b.n	80088f4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80088ee:	2300      	movs	r3, #0
 80088f0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80088f2:	693b      	ldr	r3, [r7, #16]
}
 80088f4:	0018      	movs	r0, r3
 80088f6:	46bd      	mov	sp, r7
 80088f8:	b006      	add	sp, #24
 80088fa:	bd80      	pop	{r7, pc}

080088fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	70da      	strb	r2, [r3, #3]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	4252      	negs	r2, r2
 8008912:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	0011      	movs	r1, r2
 800891a:	0018      	movs	r0, r3
 800891c:	f7fe fb36 	bl	8006f8c <move_window>
 8008920:	1e03      	subs	r3, r0, #0
 8008922:	d001      	beq.n	8008928 <check_fs+0x2c>
 8008924:	2304      	movs	r3, #4
 8008926:	e037      	b.n	8008998 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3338      	adds	r3, #56	; 0x38
 800892c:	33ff      	adds	r3, #255	; 0xff
 800892e:	33ff      	adds	r3, #255	; 0xff
 8008930:	0018      	movs	r0, r3
 8008932:	f7fe f87f 	bl	8006a34 <ld_word>
 8008936:	0003      	movs	r3, r0
 8008938:	001a      	movs	r2, r3
 800893a:	4b19      	ldr	r3, [pc, #100]	; (80089a0 <check_fs+0xa4>)
 800893c:	429a      	cmp	r2, r3
 800893e:	d001      	beq.n	8008944 <check_fs+0x48>
 8008940:	2303      	movs	r3, #3
 8008942:	e029      	b.n	8008998 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2238      	movs	r2, #56	; 0x38
 8008948:	5c9b      	ldrb	r3, [r3, r2]
 800894a:	2be9      	cmp	r3, #233	; 0xe9
 800894c:	d009      	beq.n	8008962 <check_fs+0x66>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2238      	movs	r2, #56	; 0x38
 8008952:	5c9b      	ldrb	r3, [r3, r2]
 8008954:	2beb      	cmp	r3, #235	; 0xeb
 8008956:	d11e      	bne.n	8008996 <check_fs+0x9a>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	223a      	movs	r2, #58	; 0x3a
 800895c:	5c9b      	ldrb	r3, [r3, r2]
 800895e:	2b90      	cmp	r3, #144	; 0x90
 8008960:	d119      	bne.n	8008996 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	3338      	adds	r3, #56	; 0x38
 8008966:	3336      	adds	r3, #54	; 0x36
 8008968:	0018      	movs	r0, r3
 800896a:	f7fe f87e 	bl	8006a6a <ld_dword>
 800896e:	0003      	movs	r3, r0
 8008970:	021b      	lsls	r3, r3, #8
 8008972:	0a1b      	lsrs	r3, r3, #8
 8008974:	4a0b      	ldr	r2, [pc, #44]	; (80089a4 <check_fs+0xa8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d101      	bne.n	800897e <check_fs+0x82>
 800897a:	2300      	movs	r3, #0
 800897c:	e00c      	b.n	8008998 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3338      	adds	r3, #56	; 0x38
 8008982:	3352      	adds	r3, #82	; 0x52
 8008984:	0018      	movs	r0, r3
 8008986:	f7fe f870 	bl	8006a6a <ld_dword>
 800898a:	0003      	movs	r3, r0
 800898c:	4a06      	ldr	r2, [pc, #24]	; (80089a8 <check_fs+0xac>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d101      	bne.n	8008996 <check_fs+0x9a>
 8008992:	2300      	movs	r3, #0
 8008994:	e000      	b.n	8008998 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008996:	2302      	movs	r3, #2
}
 8008998:	0018      	movs	r0, r3
 800899a:	46bd      	mov	sp, r7
 800899c:	b002      	add	sp, #8
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	0000aa55 	.word	0x0000aa55
 80089a4:	00544146 	.word	0x00544146
 80089a8:	33544146 	.word	0x33544146

080089ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80089ac:	b5b0      	push	{r4, r5, r7, lr}
 80089ae:	b096      	sub	sp, #88	; 0x58
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	1dfb      	adds	r3, r7, #7
 80089b8:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	0018      	movs	r0, r3
 80089c4:	f7ff ff58 	bl	8008878 <get_ldnumber>
 80089c8:	0003      	movs	r3, r0
 80089ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80089cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da01      	bge.n	80089d6 <find_volume+0x2a>
 80089d2:	230b      	movs	r3, #11
 80089d4:	e283      	b.n	8008ede <find_volume+0x532>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80089d6:	4bc2      	ldr	r3, [pc, #776]	; (8008ce0 <find_volume+0x334>)
 80089d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80089da:	0092      	lsls	r2, r2, #2
 80089dc:	58d3      	ldr	r3, [r2, r3]
 80089de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80089e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <find_volume+0x3e>
 80089e6:	230c      	movs	r3, #12
 80089e8:	e279      	b.n	8008ede <find_volume+0x532>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80089f0:	1dfb      	adds	r3, r7, #7
 80089f2:	1dfa      	adds	r2, r7, #7
 80089f4:	7812      	ldrb	r2, [r2, #0]
 80089f6:	2101      	movs	r1, #1
 80089f8:	438a      	bics	r2, r1
 80089fa:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80089fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d01b      	beq.n	8008a3c <find_volume+0x90>
		stat = disk_status(fs->drv);
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	785b      	ldrb	r3, [r3, #1]
 8008a08:	2537      	movs	r5, #55	; 0x37
 8008a0a:	197c      	adds	r4, r7, r5
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7fd ff47 	bl	80068a0 <disk_status>
 8008a12:	0003      	movs	r3, r0
 8008a14:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a16:	0029      	movs	r1, r5
 8008a18:	187b      	adds	r3, r7, r1
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	4013      	ands	r3, r2
 8008a20:	d10c      	bne.n	8008a3c <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008a22:	1dfb      	adds	r3, r7, #7
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d006      	beq.n	8008a38 <find_volume+0x8c>
 8008a2a:	187b      	adds	r3, r7, r1
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2204      	movs	r2, #4
 8008a30:	4013      	ands	r3, r2
 8008a32:	d001      	beq.n	8008a38 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8008a34:	230a      	movs	r3, #10
 8008a36:	e252      	b.n	8008ede <find_volume+0x532>
			}
			return FR_OK;				/* The file system object is valid */
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e250      	b.n	8008ede <find_volume+0x532>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	2200      	movs	r2, #0
 8008a40:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4c:	785b      	ldrb	r3, [r3, #1]
 8008a4e:	2537      	movs	r5, #55	; 0x37
 8008a50:	197c      	adds	r4, r7, r5
 8008a52:	0018      	movs	r0, r3
 8008a54:	f7fd ff46 	bl	80068e4 <disk_initialize>
 8008a58:	0003      	movs	r3, r0
 8008a5a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008a5c:	197b      	adds	r3, r7, r5
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2201      	movs	r2, #1
 8008a62:	4013      	ands	r3, r2
 8008a64:	d001      	beq.n	8008a6a <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a66:	2303      	movs	r3, #3
 8008a68:	e239      	b.n	8008ede <find_volume+0x532>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008a6a:	1dfb      	adds	r3, r7, #7
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d007      	beq.n	8008a82 <find_volume+0xd6>
 8008a72:	2337      	movs	r3, #55	; 0x37
 8008a74:	18fb      	adds	r3, r7, r3
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2204      	movs	r2, #4
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	d001      	beq.n	8008a82 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8008a7e:	230a      	movs	r3, #10
 8008a80:	e22d      	b.n	8008ede <find_volume+0x532>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	7858      	ldrb	r0, [r3, #1]
 8008a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a88:	330c      	adds	r3, #12
 8008a8a:	001a      	movs	r2, r3
 8008a8c:	2102      	movs	r1, #2
 8008a8e:	f7fd ffa9 	bl	80069e4 <disk_ioctl>
 8008a92:	1e03      	subs	r3, r0, #0
 8008a94:	d001      	beq.n	8008a9a <find_volume+0xee>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e221      	b.n	8008ede <find_volume+0x532>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9c:	899a      	ldrh	r2, [r3, #12]
 8008a9e:	2380      	movs	r3, #128	; 0x80
 8008aa0:	015b      	lsls	r3, r3, #5
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d80d      	bhi.n	8008ac2 <find_volume+0x116>
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	899a      	ldrh	r2, [r3, #12]
 8008aaa:	2380      	movs	r3, #128	; 0x80
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d307      	bcc.n	8008ac2 <find_volume+0x116>
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab4:	899b      	ldrh	r3, [r3, #12]
 8008ab6:	001a      	movs	r2, r3
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	899b      	ldrh	r3, [r3, #12]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	4013      	ands	r3, r2
 8008ac0:	d001      	beq.n	8008ac6 <find_volume+0x11a>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e20b      	b.n	8008ede <find_volume+0x532>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008aca:	2557      	movs	r5, #87	; 0x57
 8008acc:	197c      	adds	r4, r7, r5
 8008ace:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad2:	0011      	movs	r1, r2
 8008ad4:	0018      	movs	r0, r3
 8008ad6:	f7ff ff11 	bl	80088fc <check_fs>
 8008ada:	0003      	movs	r3, r0
 8008adc:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ade:	197b      	adds	r3, r7, r5
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d14b      	bne.n	8008b7e <find_volume+0x1d2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	643b      	str	r3, [r7, #64]	; 0x40
 8008aea:	e01d      	b.n	8008b28 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aee:	3338      	adds	r3, #56	; 0x38
 8008af0:	001a      	movs	r2, r3
 8008af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	33bf      	adds	r3, #191	; 0xbf
 8008af8:	33ff      	adds	r3, #255	; 0xff
 8008afa:	18d3      	adds	r3, r2, r3
 8008afc:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b00:	3304      	adds	r3, #4
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d006      	beq.n	8008b16 <find_volume+0x16a>
 8008b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f7fd ffac 	bl	8006a6a <ld_dword>
 8008b12:	0003      	movs	r3, r0
 8008b14:	e000      	b.n	8008b18 <find_volume+0x16c>
 8008b16:	2300      	movs	r3, #0
 8008b18:	2214      	movs	r2, #20
 8008b1a:	18ba      	adds	r2, r7, r2
 8008b1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b1e:	0089      	lsls	r1, r1, #2
 8008b20:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b24:	3301      	adds	r3, #1
 8008b26:	643b      	str	r3, [r7, #64]	; 0x40
 8008b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d9de      	bls.n	8008aec <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008b2e:	2300      	movs	r3, #0
 8008b30:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <find_volume+0x192>
 8008b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b3e:	2314      	movs	r3, #20
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b44:	0092      	lsls	r2, r2, #2
 8008b46:	58d3      	ldr	r3, [r2, r3]
 8008b48:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d008      	beq.n	8008b62 <find_volume+0x1b6>
 8008b50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b54:	0011      	movs	r1, r2
 8008b56:	0018      	movs	r0, r3
 8008b58:	f7ff fed0 	bl	80088fc <check_fs>
 8008b5c:	0003      	movs	r3, r0
 8008b5e:	001a      	movs	r2, r3
 8008b60:	e000      	b.n	8008b64 <find_volume+0x1b8>
 8008b62:	2203      	movs	r2, #3
 8008b64:	2157      	movs	r1, #87	; 0x57
 8008b66:	187b      	adds	r3, r7, r1
 8008b68:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b6a:	187b      	adds	r3, r7, r1
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d905      	bls.n	8008b7e <find_volume+0x1d2>
 8008b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b74:	3301      	adds	r3, #1
 8008b76:	643b      	str	r3, [r7, #64]	; 0x40
 8008b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d9df      	bls.n	8008b3e <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b7e:	2357      	movs	r3, #87	; 0x57
 8008b80:	18fb      	adds	r3, r7, r3
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d101      	bne.n	8008b8c <find_volume+0x1e0>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e1a8      	b.n	8008ede <find_volume+0x532>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b8c:	2357      	movs	r3, #87	; 0x57
 8008b8e:	18fb      	adds	r3, r7, r3
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d901      	bls.n	8008b9a <find_volume+0x1ee>
 8008b96:	230d      	movs	r3, #13
 8008b98:	e1a1      	b.n	8008ede <find_volume+0x532>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9c:	3338      	adds	r3, #56	; 0x38
 8008b9e:	330b      	adds	r3, #11
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f7fd ff47 	bl	8006a34 <ld_word>
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	001a      	movs	r2, r3
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	899b      	ldrh	r3, [r3, #12]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d001      	beq.n	8008bb6 <find_volume+0x20a>
 8008bb2:	230d      	movs	r3, #13
 8008bb4:	e193      	b.n	8008ede <find_volume+0x532>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb8:	3338      	adds	r3, #56	; 0x38
 8008bba:	3316      	adds	r3, #22
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f7fd ff39 	bl	8006a34 <ld_word>
 8008bc2:	0003      	movs	r3, r0
 8008bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d107      	bne.n	8008bdc <find_volume+0x230>
 8008bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bce:	3338      	adds	r3, #56	; 0x38
 8008bd0:	3324      	adds	r3, #36	; 0x24
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f7fd ff49 	bl	8006a6a <ld_dword>
 8008bd8:	0003      	movs	r3, r0
 8008bda:	64fb      	str	r3, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008be0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	2248      	movs	r2, #72	; 0x48
 8008be6:	5c9a      	ldrb	r2, [r3, r2]
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bee:	789b      	ldrb	r3, [r3, #2]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d005      	beq.n	8008c00 <find_volume+0x254>
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	789b      	ldrb	r3, [r3, #2]
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d001      	beq.n	8008c00 <find_volume+0x254>
 8008bfc:	230d      	movs	r3, #13
 8008bfe:	e16e      	b.n	8008ede <find_volume+0x532>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	789b      	ldrb	r3, [r3, #2]
 8008c04:	001a      	movs	r2, r3
 8008c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c08:	4353      	muls	r3, r2
 8008c0a:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	2245      	movs	r2, #69	; 0x45
 8008c10:	5c9b      	ldrb	r3, [r3, r2]
 8008c12:	b29a      	uxth	r2, r3
 8008c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c16:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	895b      	ldrh	r3, [r3, #10]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d007      	beq.n	8008c30 <find_volume+0x284>
 8008c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c22:	895b      	ldrh	r3, [r3, #10]
 8008c24:	001a      	movs	r2, r3
 8008c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c28:	895b      	ldrh	r3, [r3, #10]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	d001      	beq.n	8008c34 <find_volume+0x288>
 8008c30:	230d      	movs	r3, #13
 8008c32:	e154      	b.n	8008ede <find_volume+0x532>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c36:	3338      	adds	r3, #56	; 0x38
 8008c38:	3311      	adds	r3, #17
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f7fd fefa 	bl	8006a34 <ld_word>
 8008c40:	0003      	movs	r3, r0
 8008c42:	001a      	movs	r2, r3
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4a:	891a      	ldrh	r2, [r3, #8]
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4e:	899b      	ldrh	r3, [r3, #12]
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	0019      	movs	r1, r3
 8008c56:	0010      	movs	r0, r2
 8008c58:	f7f7 faf8 	bl	800024c <__aeabi_uidivmod>
 8008c5c:	000b      	movs	r3, r1
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <find_volume+0x2bc>
 8008c64:	230d      	movs	r3, #13
 8008c66:	e13a      	b.n	8008ede <find_volume+0x532>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	3338      	adds	r3, #56	; 0x38
 8008c6c:	3313      	adds	r3, #19
 8008c6e:	0018      	movs	r0, r3
 8008c70:	f7fd fee0 	bl	8006a34 <ld_word>
 8008c74:	0003      	movs	r3, r0
 8008c76:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d107      	bne.n	8008c8e <find_volume+0x2e2>
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c80:	3338      	adds	r3, #56	; 0x38
 8008c82:	3320      	adds	r3, #32
 8008c84:	0018      	movs	r0, r3
 8008c86:	f7fd fef0 	bl	8006a6a <ld_dword>
 8008c8a:	0003      	movs	r3, r0
 8008c8c:	64bb      	str	r3, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	3338      	adds	r3, #56	; 0x38
 8008c92:	330e      	adds	r3, #14
 8008c94:	252e      	movs	r5, #46	; 0x2e
 8008c96:	197c      	adds	r4, r7, r5
 8008c98:	0018      	movs	r0, r3
 8008c9a:	f7fd fecb 	bl	8006a34 <ld_word>
 8008c9e:	0003      	movs	r3, r0
 8008ca0:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008ca2:	197b      	adds	r3, r7, r5
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <find_volume+0x302>
 8008caa:	230d      	movs	r3, #13
 8008cac:	e117      	b.n	8008ede <find_volume+0x532>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008cae:	232e      	movs	r3, #46	; 0x2e
 8008cb0:	18fb      	adds	r3, r7, r3
 8008cb2:	881a      	ldrh	r2, [r3, #0]
 8008cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb6:	18d4      	adds	r4, r2, r3
 8008cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cba:	891a      	ldrh	r2, [r3, #8]
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbe:	899b      	ldrh	r3, [r3, #12]
 8008cc0:	095b      	lsrs	r3, r3, #5
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	0019      	movs	r1, r3
 8008cc6:	0010      	movs	r0, r2
 8008cc8:	f7f7 fa3a 	bl	8000140 <__udivsi3>
 8008ccc:	0003      	movs	r3, r0
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	18e3      	adds	r3, r4, r3
 8008cd2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d203      	bcs.n	8008ce4 <find_volume+0x338>
 8008cdc:	230d      	movs	r3, #13
 8008cde:	e0fe      	b.n	8008ede <find_volume+0x532>
 8008ce0:	200002f0 	.word	0x200002f0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce8:	1ad2      	subs	r2, r2, r3
 8008cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cec:	895b      	ldrh	r3, [r3, #10]
 8008cee:	0019      	movs	r1, r3
 8008cf0:	0010      	movs	r0, r2
 8008cf2:	f7f7 fa25 	bl	8000140 <__udivsi3>
 8008cf6:	0003      	movs	r3, r0
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <find_volume+0x358>
 8008d00:	230d      	movs	r3, #13
 8008d02:	e0ec      	b.n	8008ede <find_volume+0x532>
		fmt = FS_FAT32;
 8008d04:	2157      	movs	r1, #87	; 0x57
 8008d06:	187b      	adds	r3, r7, r1
 8008d08:	2203      	movs	r2, #3
 8008d0a:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	4a76      	ldr	r2, [pc, #472]	; (8008ee8 <find_volume+0x53c>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d802      	bhi.n	8008d1a <find_volume+0x36e>
 8008d14:	187b      	adds	r3, r7, r1
 8008d16:	2202      	movs	r2, #2
 8008d18:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	4a73      	ldr	r2, [pc, #460]	; (8008eec <find_volume+0x540>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d803      	bhi.n	8008d2a <find_volume+0x37e>
 8008d22:	2357      	movs	r3, #87	; 0x57
 8008d24:	18fb      	adds	r3, r7, r3
 8008d26:	2201      	movs	r2, #1
 8008d28:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2c:	1c9a      	adds	r2, r3, #2
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d36:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008d38:	232e      	movs	r3, #46	; 0x2e
 8008d3a:	18fb      	adds	r3, r7, r3
 8008d3c:	881a      	ldrh	r2, [r3, #0]
 8008d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d40:	18d2      	adds	r2, r2, r3
 8008d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d44:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008d46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4a:	18d2      	adds	r2, r2, r3
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008d50:	2357      	movs	r3, #87	; 0x57
 8008d52:	18fb      	adds	r3, r7, r3
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d11d      	bne.n	8008d96 <find_volume+0x3ea>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	3338      	adds	r3, #56	; 0x38
 8008d5e:	332a      	adds	r3, #42	; 0x2a
 8008d60:	0018      	movs	r0, r3
 8008d62:	f7fd fe67 	bl	8006a34 <ld_word>
 8008d66:	1e03      	subs	r3, r0, #0
 8008d68:	d001      	beq.n	8008d6e <find_volume+0x3c2>
 8008d6a:	230d      	movs	r3, #13
 8008d6c:	e0b7      	b.n	8008ede <find_volume+0x532>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	891b      	ldrh	r3, [r3, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <find_volume+0x3ce>
 8008d76:	230d      	movs	r3, #13
 8008d78:	e0b1      	b.n	8008ede <find_volume+0x532>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	3338      	adds	r3, #56	; 0x38
 8008d7e:	332c      	adds	r3, #44	; 0x2c
 8008d80:	0018      	movs	r0, r3
 8008d82:	f7fd fe72 	bl	8006a6a <ld_dword>
 8008d86:	0002      	movs	r2, r0
 8008d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	647b      	str	r3, [r7, #68]	; 0x44
 8008d94:	e020      	b.n	8008dd8 <find_volume+0x42c>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d98:	891b      	ldrh	r3, [r3, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <find_volume+0x3f6>
 8008d9e:	230d      	movs	r3, #13
 8008da0:	e09d      	b.n	8008ede <find_volume+0x532>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da8:	18d2      	adds	r2, r2, r3
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008dae:	2357      	movs	r3, #87	; 0x57
 8008db0:	18fb      	adds	r3, r7, r3
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d103      	bne.n	8008dc0 <find_volume+0x414>
 8008db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dba:	69db      	ldr	r3, [r3, #28]
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	e00a      	b.n	8008dd6 <find_volume+0x42a>
 8008dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc2:	69da      	ldr	r2, [r3, #28]
 8008dc4:	0013      	movs	r3, r2
 8008dc6:	005b      	lsls	r3, r3, #1
 8008dc8:	189b      	adds	r3, r3, r2
 8008dca:	085a      	lsrs	r2, r3, #1
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	400b      	ands	r3, r1
 8008dd4:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008dd6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dda:	6a1c      	ldr	r4, [r3, #32]
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	899b      	ldrh	r3, [r3, #12]
 8008de0:	001a      	movs	r2, r3
 8008de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de4:	18d3      	adds	r3, r2, r3
 8008de6:	1e5a      	subs	r2, r3, #1
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	899b      	ldrh	r3, [r3, #12]
 8008dec:	0019      	movs	r1, r3
 8008dee:	0010      	movs	r0, r2
 8008df0:	f7f7 f9a6 	bl	8000140 <__udivsi3>
 8008df4:	0003      	movs	r3, r0
 8008df6:	429c      	cmp	r4, r3
 8008df8:	d201      	bcs.n	8008dfe <find_volume+0x452>
 8008dfa:	230d      	movs	r3, #13
 8008dfc:	e06f      	b.n	8008ede <find_volume+0x532>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e00:	2201      	movs	r2, #1
 8008e02:	4252      	negs	r2, r2
 8008e04:	619a      	str	r2, [r3, #24]
 8008e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e08:	699a      	ldr	r2, [r3, #24]
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e10:	2280      	movs	r2, #128	; 0x80
 8008e12:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e14:	2357      	movs	r3, #87	; 0x57
 8008e16:	18fb      	adds	r3, r7, r3
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d148      	bne.n	8008eb0 <find_volume+0x504>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	3338      	adds	r3, #56	; 0x38
 8008e22:	3330      	adds	r3, #48	; 0x30
 8008e24:	0018      	movs	r0, r3
 8008e26:	f7fd fe05 	bl	8006a34 <ld_word>
 8008e2a:	0003      	movs	r3, r0
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d13f      	bne.n	8008eb0 <find_volume+0x504>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	0011      	movs	r1, r2
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f7fe f8a7 	bl	8006f8c <move_window>
 8008e3e:	1e03      	subs	r3, r0, #0
 8008e40:	d136      	bne.n	8008eb0 <find_volume+0x504>
		{
			fs->fsi_flag = 0;
 8008e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e44:	2200      	movs	r2, #0
 8008e46:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	3338      	adds	r3, #56	; 0x38
 8008e4c:	33ff      	adds	r3, #255	; 0xff
 8008e4e:	33ff      	adds	r3, #255	; 0xff
 8008e50:	0018      	movs	r0, r3
 8008e52:	f7fd fdef 	bl	8006a34 <ld_word>
 8008e56:	0003      	movs	r3, r0
 8008e58:	001a      	movs	r2, r3
 8008e5a:	4b25      	ldr	r3, [pc, #148]	; (8008ef0 <find_volume+0x544>)
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d127      	bne.n	8008eb0 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e62:	3338      	adds	r3, #56	; 0x38
 8008e64:	0018      	movs	r0, r3
 8008e66:	f7fd fe00 	bl	8006a6a <ld_dword>
 8008e6a:	0003      	movs	r3, r0
 8008e6c:	4a21      	ldr	r2, [pc, #132]	; (8008ef4 <find_volume+0x548>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d11e      	bne.n	8008eb0 <find_volume+0x504>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	3338      	adds	r3, #56	; 0x38
 8008e76:	33e5      	adds	r3, #229	; 0xe5
 8008e78:	33ff      	adds	r3, #255	; 0xff
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	f7fd fdf5 	bl	8006a6a <ld_dword>
 8008e80:	0003      	movs	r3, r0
 8008e82:	4a1d      	ldr	r2, [pc, #116]	; (8008ef8 <find_volume+0x54c>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d113      	bne.n	8008eb0 <find_volume+0x504>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8a:	3338      	adds	r3, #56	; 0x38
 8008e8c:	33e9      	adds	r3, #233	; 0xe9
 8008e8e:	33ff      	adds	r3, #255	; 0xff
 8008e90:	0018      	movs	r0, r3
 8008e92:	f7fd fdea 	bl	8006a6a <ld_dword>
 8008e96:	0002      	movs	r2, r0
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	3338      	adds	r3, #56	; 0x38
 8008ea0:	33ed      	adds	r3, #237	; 0xed
 8008ea2:	33ff      	adds	r3, #255	; 0xff
 8008ea4:	0018      	movs	r0, r3
 8008ea6:	f7fd fde0 	bl	8006a6a <ld_dword>
 8008eaa:	0002      	movs	r2, r0
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb2:	2257      	movs	r2, #87	; 0x57
 8008eb4:	18ba      	adds	r2, r7, r2
 8008eb6:	7812      	ldrb	r2, [r2, #0]
 8008eb8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008eba:	4b10      	ldr	r3, [pc, #64]	; (8008efc <find_volume+0x550>)
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	4b0e      	ldr	r3, [pc, #56]	; (8008efc <find_volume+0x550>)
 8008ec4:	801a      	strh	r2, [r3, #0]
 8008ec6:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <find_volume+0x550>)
 8008ec8:	881a      	ldrh	r2, [r3, #0]
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed0:	4a0b      	ldr	r2, [pc, #44]	; (8008f00 <find_volume+0x554>)
 8008ed2:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f7fd fff0 	bl	8006ebc <clear_lock>
#endif
	return FR_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	0018      	movs	r0, r3
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	b016      	add	sp, #88	; 0x58
 8008ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ee6:	46c0      	nop			; (mov r8, r8)
 8008ee8:	0000fff5 	.word	0x0000fff5
 8008eec:	00000ff5 	.word	0x00000ff5
 8008ef0:	0000aa55 	.word	0x0000aa55
 8008ef4:	41615252 	.word	0x41615252
 8008ef8:	61417272 	.word	0x61417272
 8008efc:	200002f4 	.word	0x200002f4
 8008f00:	20000318 	.word	0x20000318

08008f04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008f04:	b590      	push	{r4, r7, lr}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008f0e:	240f      	movs	r4, #15
 8008f10:	193b      	adds	r3, r7, r4
 8008f12:	2209      	movs	r2, #9
 8008f14:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d01d      	beq.n	8008f58 <validate+0x54>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d019      	beq.n	8008f58 <validate+0x54>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d014      	beq.n	8008f58 <validate+0x54>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	889a      	ldrh	r2, [r3, #4]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	88db      	ldrh	r3, [r3, #6]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d10d      	bne.n	8008f58 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	785b      	ldrb	r3, [r3, #1]
 8008f42:	0018      	movs	r0, r3
 8008f44:	f7fd fcac 	bl	80068a0 <disk_status>
 8008f48:	0003      	movs	r3, r0
 8008f4a:	001a      	movs	r2, r3
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	4013      	ands	r3, r2
 8008f50:	d102      	bne.n	8008f58 <validate+0x54>
			res = FR_OK;
 8008f52:	193b      	adds	r3, r7, r4
 8008f54:	2200      	movs	r2, #0
 8008f56:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008f58:	230f      	movs	r3, #15
 8008f5a:	18fb      	adds	r3, r7, r3
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d102      	bne.n	8008f68 <validate+0x64>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	e000      	b.n	8008f6a <validate+0x66>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	601a      	str	r2, [r3, #0]
	return res;
 8008f6e:	230f      	movs	r3, #15
 8008f70:	18fb      	adds	r3, r7, r3
 8008f72:	781b      	ldrb	r3, [r3, #0]
}
 8008f74:	0018      	movs	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	b005      	add	sp, #20
 8008f7a:	bd90      	pop	{r4, r7, pc}

08008f7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f7c:	b5b0      	push	{r4, r5, r7, lr}
 8008f7e:	b088      	sub	sp, #32
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	1dfb      	adds	r3, r7, #7
 8008f88:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008f8e:	2310      	movs	r3, #16
 8008f90:	18fb      	adds	r3, r7, r3
 8008f92:	0018      	movs	r0, r3
 8008f94:	f7ff fc70 	bl	8008878 <get_ldnumber>
 8008f98:	0003      	movs	r3, r0
 8008f9a:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	da01      	bge.n	8008fa6 <f_mount+0x2a>
 8008fa2:	230b      	movs	r3, #11
 8008fa4:	e030      	b.n	8009008 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008fa6:	4b1a      	ldr	r3, [pc, #104]	; (8009010 <f_mount+0x94>)
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	0092      	lsls	r2, r2, #2
 8008fac:	58d3      	ldr	r3, [r2, r3]
 8008fae:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d006      	beq.n	8008fc4 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f7fd ff7f 	bl	8006ebc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008fd0:	68f9      	ldr	r1, [r7, #12]
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <f_mount+0x94>)
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	0092      	lsls	r2, r2, #2
 8008fd8:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d003      	beq.n	8008fe8 <f_mount+0x6c>
 8008fe0:	1dfb      	adds	r3, r7, #7
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d001      	beq.n	8008fec <f_mount+0x70>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e00d      	b.n	8009008 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008fec:	2517      	movs	r5, #23
 8008fee:	197c      	adds	r4, r7, r5
 8008ff0:	230c      	movs	r3, #12
 8008ff2:	18f9      	adds	r1, r7, r3
 8008ff4:	2308      	movs	r3, #8
 8008ff6:	18fb      	adds	r3, r7, r3
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	0018      	movs	r0, r3
 8008ffc:	f7ff fcd6 	bl	80089ac <find_volume>
 8009000:	0003      	movs	r3, r0
 8009002:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8009004:	197b      	adds	r3, r7, r5
 8009006:	781b      	ldrb	r3, [r3, #0]
}
 8009008:	0018      	movs	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	b008      	add	sp, #32
 800900e:	bdb0      	pop	{r4, r5, r7, pc}
 8009010:	200002f0 	.word	0x200002f0

08009014 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009016:	b09b      	sub	sp, #108	; 0x6c
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	1dfb      	adds	r3, r7, #7
 8009020:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <f_open+0x18>
 8009028:	2309      	movs	r3, #9
 800902a:	e1f4      	b.n	8009416 <f_open+0x402>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800902c:	1dfb      	adds	r3, r7, #7
 800902e:	1dfa      	adds	r2, r7, #7
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	213f      	movs	r1, #63	; 0x3f
 8009034:	400a      	ands	r2, r1
 8009036:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8009038:	2567      	movs	r5, #103	; 0x67
 800903a:	197c      	adds	r4, r7, r5
 800903c:	1dfb      	adds	r3, r7, #7
 800903e:	781a      	ldrb	r2, [r3, #0]
 8009040:	2314      	movs	r3, #20
 8009042:	18f9      	adds	r1, r7, r3
 8009044:	2308      	movs	r3, #8
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	0018      	movs	r0, r3
 800904a:	f7ff fcaf 	bl	80089ac <find_volume>
 800904e:	0003      	movs	r3, r0
 8009050:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009052:	197b      	adds	r3, r7, r5
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d000      	beq.n	800905c <f_open+0x48>
 800905a:	e1d1      	b.n	8009400 <f_open+0x3ec>
		dj.obj.fs = fs;
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	2618      	movs	r6, #24
 8009060:	19bb      	adds	r3, r7, r6
 8009062:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	197c      	adds	r4, r7, r5
 8009068:	19bb      	adds	r3, r7, r6
 800906a:	0011      	movs	r1, r2
 800906c:	0018      	movs	r0, r3
 800906e:	f7ff fb79 	bl	8008764 <follow_path>
 8009072:	0003      	movs	r3, r0
 8009074:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009076:	0029      	movs	r1, r5
 8009078:	197b      	adds	r3, r7, r5
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d11b      	bne.n	80090b8 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009080:	19bb      	adds	r3, r7, r6
 8009082:	222f      	movs	r2, #47	; 0x2f
 8009084:	5c9b      	ldrb	r3, [r3, r2]
 8009086:	b25b      	sxtb	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	da03      	bge.n	8009094 <f_open+0x80>
				res = FR_INVALID_NAME;
 800908c:	187b      	adds	r3, r7, r1
 800908e:	2206      	movs	r2, #6
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	e011      	b.n	80090b8 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009094:	1dfb      	adds	r3, r7, #7
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2201      	movs	r2, #1
 800909a:	4393      	bics	r3, r2
 800909c:	1e5a      	subs	r2, r3, #1
 800909e:	4193      	sbcs	r3, r2
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	001a      	movs	r2, r3
 80090a4:	2367      	movs	r3, #103	; 0x67
 80090a6:	18fc      	adds	r4, r7, r3
 80090a8:	2318      	movs	r3, #24
 80090aa:	18fb      	adds	r3, r7, r3
 80090ac:	0011      	movs	r1, r2
 80090ae:	0018      	movs	r0, r3
 80090b0:	f7fd fdba 	bl	8006c28 <chk_lock>
 80090b4:	0003      	movs	r3, r0
 80090b6:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80090b8:	1dfb      	adds	r3, r7, #7
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	221c      	movs	r2, #28
 80090be:	4013      	ands	r3, r2
 80090c0:	d100      	bne.n	80090c4 <f_open+0xb0>
 80090c2:	e096      	b.n	80091f2 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 80090c4:	2267      	movs	r2, #103	; 0x67
 80090c6:	18bb      	adds	r3, r7, r2
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01a      	beq.n	8009104 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80090ce:	18bb      	adds	r3, r7, r2
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d10f      	bne.n	80090f6 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80090d6:	f7fd fdff 	bl	8006cd8 <enq_lock>
 80090da:	1e03      	subs	r3, r0, #0
 80090dc:	d007      	beq.n	80090ee <f_open+0xda>
 80090de:	2318      	movs	r3, #24
 80090e0:	18fb      	adds	r3, r7, r3
 80090e2:	0018      	movs	r0, r3
 80090e4:	f7ff f82a 	bl	800813c <dir_register>
 80090e8:	0003      	movs	r3, r0
 80090ea:	001a      	movs	r2, r3
 80090ec:	e000      	b.n	80090f0 <f_open+0xdc>
 80090ee:	2212      	movs	r2, #18
 80090f0:	2367      	movs	r3, #103	; 0x67
 80090f2:	18fb      	adds	r3, r7, r3
 80090f4:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80090f6:	1dfb      	adds	r3, r7, #7
 80090f8:	1dfa      	adds	r2, r7, #7
 80090fa:	7812      	ldrb	r2, [r2, #0]
 80090fc:	2108      	movs	r1, #8
 80090fe:	430a      	orrs	r2, r1
 8009100:	701a      	strb	r2, [r3, #0]
 8009102:	e014      	b.n	800912e <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009104:	2318      	movs	r3, #24
 8009106:	18fb      	adds	r3, r7, r3
 8009108:	799b      	ldrb	r3, [r3, #6]
 800910a:	001a      	movs	r2, r3
 800910c:	2311      	movs	r3, #17
 800910e:	4013      	ands	r3, r2
 8009110:	d004      	beq.n	800911c <f_open+0x108>
					res = FR_DENIED;
 8009112:	2367      	movs	r3, #103	; 0x67
 8009114:	18fb      	adds	r3, r7, r3
 8009116:	2207      	movs	r2, #7
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	e008      	b.n	800912e <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800911c:	1dfb      	adds	r3, r7, #7
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	2204      	movs	r2, #4
 8009122:	4013      	ands	r3, r2
 8009124:	d003      	beq.n	800912e <f_open+0x11a>
 8009126:	2367      	movs	r3, #103	; 0x67
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	2208      	movs	r2, #8
 800912c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800912e:	2467      	movs	r4, #103	; 0x67
 8009130:	193b      	adds	r3, r7, r4
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d000      	beq.n	800913a <f_open+0x126>
 8009138:	e07b      	b.n	8009232 <f_open+0x21e>
 800913a:	1dfb      	adds	r3, r7, #7
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2208      	movs	r2, #8
 8009140:	4013      	ands	r3, r2
 8009142:	d100      	bne.n	8009146 <f_open+0x132>
 8009144:	e075      	b.n	8009232 <f_open+0x21e>
				dw = GET_FATTIME();
 8009146:	f7fd fb3f 	bl	80067c8 <get_fattime>
 800914a:	0003      	movs	r3, r0
 800914c:	65bb      	str	r3, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800914e:	2518      	movs	r5, #24
 8009150:	197b      	adds	r3, r7, r5
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	330e      	adds	r3, #14
 8009156:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009158:	0011      	movs	r1, r2
 800915a:	0018      	movs	r0, r3
 800915c:	f7fd fcc4 	bl	8006ae8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009160:	197b      	adds	r3, r7, r5
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	3316      	adds	r3, #22
 8009166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009168:	0011      	movs	r1, r2
 800916a:	0018      	movs	r0, r3
 800916c:	f7fd fcbc 	bl	8006ae8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009170:	197b      	adds	r3, r7, r5
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	330b      	adds	r3, #11
 8009176:	2220      	movs	r2, #32
 8009178:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	197b      	adds	r3, r7, r5
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	0019      	movs	r1, r3
 8009182:	0010      	movs	r0, r2
 8009184:	f7fe fcef 	bl	8007b66 <ld_clust>
 8009188:	0003      	movs	r3, r0
 800918a:	657b      	str	r3, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800918c:	6978      	ldr	r0, [r7, #20]
 800918e:	197b      	adds	r3, r7, r5
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	2200      	movs	r2, #0
 8009194:	0019      	movs	r1, r3
 8009196:	f7fe fd05 	bl	8007ba4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800919a:	197b      	adds	r3, r7, r5
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	331c      	adds	r3, #28
 80091a0:	2100      	movs	r1, #0
 80091a2:	0018      	movs	r0, r3
 80091a4:	f7fd fca0 	bl	8006ae8 <st_dword>
					fs->wflag = 1;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2201      	movs	r2, #1
 80091ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80091ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d03e      	beq.n	8009232 <f_open+0x21e>
						dw = fs->winsect;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80091ba:	0026      	movs	r6, r4
 80091bc:	193c      	adds	r4, r7, r4
 80091be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091c0:	197b      	adds	r3, r7, r5
 80091c2:	2200      	movs	r2, #0
 80091c4:	0018      	movs	r0, r3
 80091c6:	f7fe f9ba 	bl	800753e <remove_chain>
 80091ca:	0003      	movs	r3, r0
 80091cc:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 80091ce:	19bb      	adds	r3, r7, r6
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d12d      	bne.n	8009232 <f_open+0x21e>
							res = move_window(fs, dw);
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	19bc      	adds	r4, r7, r6
 80091da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091dc:	0011      	movs	r1, r2
 80091de:	0018      	movs	r0, r3
 80091e0:	f7fd fed4 	bl	8006f8c <move_window>
 80091e4:	0003      	movs	r3, r0
 80091e6:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091ec:	3a01      	subs	r2, #1
 80091ee:	615a      	str	r2, [r3, #20]
 80091f0:	e01f      	b.n	8009232 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80091f2:	2167      	movs	r1, #103	; 0x67
 80091f4:	187b      	adds	r3, r7, r1
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d11a      	bne.n	8009232 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80091fc:	2318      	movs	r3, #24
 80091fe:	18fb      	adds	r3, r7, r3
 8009200:	799b      	ldrb	r3, [r3, #6]
 8009202:	001a      	movs	r2, r3
 8009204:	2310      	movs	r3, #16
 8009206:	4013      	ands	r3, r2
 8009208:	d003      	beq.n	8009212 <f_open+0x1fe>
					res = FR_NO_FILE;
 800920a:	187b      	adds	r3, r7, r1
 800920c:	2204      	movs	r2, #4
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	e00f      	b.n	8009232 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009212:	1dfb      	adds	r3, r7, #7
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2202      	movs	r2, #2
 8009218:	4013      	ands	r3, r2
 800921a:	d00a      	beq.n	8009232 <f_open+0x21e>
 800921c:	2318      	movs	r3, #24
 800921e:	18fb      	adds	r3, r7, r3
 8009220:	799b      	ldrb	r3, [r3, #6]
 8009222:	001a      	movs	r2, r3
 8009224:	2301      	movs	r3, #1
 8009226:	4013      	ands	r3, r2
 8009228:	d003      	beq.n	8009232 <f_open+0x21e>
						res = FR_DENIED;
 800922a:	2367      	movs	r3, #103	; 0x67
 800922c:	18fb      	adds	r3, r7, r3
 800922e:	2207      	movs	r2, #7
 8009230:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 8009232:	2367      	movs	r3, #103	; 0x67
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d12b      	bne.n	8009294 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800923c:	1dfb      	adds	r3, r7, #7
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2208      	movs	r2, #8
 8009242:	4013      	ands	r3, r2
 8009244:	d005      	beq.n	8009252 <f_open+0x23e>
				mode |= FA_MODIFIED;
 8009246:	1dfb      	adds	r3, r7, #7
 8009248:	1dfa      	adds	r2, r7, #7
 800924a:	7812      	ldrb	r2, [r2, #0]
 800924c:	2140      	movs	r1, #64	; 0x40
 800924e:	430a      	orrs	r2, r1
 8009250:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800925a:	2118      	movs	r1, #24
 800925c:	187b      	adds	r3, r7, r1
 800925e:	6a1a      	ldr	r2, [r3, #32]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009264:	1dfb      	adds	r3, r7, #7
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2201      	movs	r2, #1
 800926a:	4393      	bics	r3, r2
 800926c:	1e5a      	subs	r2, r3, #1
 800926e:	4193      	sbcs	r3, r2
 8009270:	b2db      	uxtb	r3, r3
 8009272:	001a      	movs	r2, r3
 8009274:	187b      	adds	r3, r7, r1
 8009276:	0011      	movs	r1, r2
 8009278:	0018      	movs	r0, r3
 800927a:	f7fd fd4b 	bl	8006d14 <inc_lock>
 800927e:	0002      	movs	r2, r0
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d103      	bne.n	8009294 <f_open+0x280>
 800928c:	2367      	movs	r3, #103	; 0x67
 800928e:	18fb      	adds	r3, r7, r3
 8009290:	2202      	movs	r2, #2
 8009292:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009294:	2367      	movs	r3, #103	; 0x67
 8009296:	18fb      	adds	r3, r7, r3
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d000      	beq.n	80092a0 <f_open+0x28c>
 800929e:	e0af      	b.n	8009400 <f_open+0x3ec>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	2418      	movs	r4, #24
 80092a4:	193b      	adds	r3, r7, r4
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	0019      	movs	r1, r3
 80092aa:	0010      	movs	r0, r2
 80092ac:	f7fe fc5b 	bl	8007b66 <ld_clust>
 80092b0:	0002      	movs	r2, r0
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80092b6:	193b      	adds	r3, r7, r4
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	331c      	adds	r3, #28
 80092bc:	0018      	movs	r0, r3
 80092be:	f7fd fbd4 	bl	8006a6a <ld_dword>
 80092c2:	0002      	movs	r2, r0
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	88da      	ldrh	r2, [r3, #6]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	1dfa      	adds	r2, r7, #7
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3330      	adds	r3, #48	; 0x30
 80092fa:	2280      	movs	r2, #128	; 0x80
 80092fc:	0152      	lsls	r2, r2, #5
 80092fe:	2100      	movs	r1, #0
 8009300:	0018      	movs	r0, r3
 8009302:	f7fd fc3a 	bl	8006b7a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009306:	1dfb      	adds	r3, r7, #7
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2220      	movs	r2, #32
 800930c:	4013      	ands	r3, r2
 800930e:	d100      	bne.n	8009312 <f_open+0x2fe>
 8009310:	e076      	b.n	8009400 <f_open+0x3ec>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d100      	bne.n	800931c <f_open+0x308>
 800931a:	e071      	b.n	8009400 <f_open+0x3ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	68da      	ldr	r2, [r3, #12]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	895b      	ldrh	r3, [r3, #10]
 8009328:	001a      	movs	r2, r3
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	899b      	ldrh	r3, [r3, #12]
 800932e:	4353      	muls	r3, r2
 8009330:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800933e:	e019      	b.n	8009374 <f_open+0x360>
					clst = get_fat(&fp->obj, clst);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009344:	0011      	movs	r1, r2
 8009346:	0018      	movs	r0, r3
 8009348:	f7fd feee 	bl	8007128 <get_fat>
 800934c:	0003      	movs	r3, r0
 800934e:	663b      	str	r3, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009352:	2b01      	cmp	r3, #1
 8009354:	d803      	bhi.n	800935e <f_open+0x34a>
 8009356:	2367      	movs	r3, #103	; 0x67
 8009358:	18fb      	adds	r3, r7, r3
 800935a:	2202      	movs	r2, #2
 800935c:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800935e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009360:	3301      	adds	r3, #1
 8009362:	d103      	bne.n	800936c <f_open+0x358>
 8009364:	2367      	movs	r3, #103	; 0x67
 8009366:	18fb      	adds	r3, r7, r3
 8009368:	2201      	movs	r2, #1
 800936a:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800936c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800936e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009374:	2367      	movs	r3, #103	; 0x67
 8009376:	18fb      	adds	r3, r7, r3
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d103      	bne.n	8009386 <f_open+0x372>
 800937e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009382:	429a      	cmp	r2, r3
 8009384:	d8dc      	bhi.n	8009340 <f_open+0x32c>
				}
				fp->clust = clst;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800938a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800938c:	2467      	movs	r4, #103	; 0x67
 800938e:	193b      	adds	r3, r7, r4
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d134      	bne.n	8009400 <f_open+0x3ec>
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	899b      	ldrh	r3, [r3, #12]
 800939a:	001a      	movs	r2, r3
 800939c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800939e:	0011      	movs	r1, r2
 80093a0:	0018      	movs	r0, r3
 80093a2:	f7f6 ff53 	bl	800024c <__aeabi_uidivmod>
 80093a6:	1e0b      	subs	r3, r1, #0
 80093a8:	d02a      	beq.n	8009400 <f_open+0x3ec>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093ae:	0011      	movs	r1, r2
 80093b0:	0018      	movs	r0, r3
 80093b2:	f7fd fe9d 	bl	80070f0 <clust2sect>
 80093b6:	0003      	movs	r3, r0
 80093b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d103      	bne.n	80093c8 <f_open+0x3b4>
						res = FR_INT_ERR;
 80093c0:	193b      	adds	r3, r7, r4
 80093c2:	2202      	movs	r2, #2
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	e01b      	b.n	8009400 <f_open+0x3ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	899b      	ldrh	r3, [r3, #12]
 80093cc:	0019      	movs	r1, r3
 80093ce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80093d0:	f7f6 feb6 	bl	8000140 <__udivsi3>
 80093d4:	0003      	movs	r3, r0
 80093d6:	001a      	movs	r2, r3
 80093d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093da:	18d2      	adds	r2, r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	7858      	ldrb	r0, [r3, #1]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3330      	adds	r3, #48	; 0x30
 80093e8:	0019      	movs	r1, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6a1a      	ldr	r2, [r3, #32]
 80093ee:	2301      	movs	r3, #1
 80093f0:	f7fd faa8 	bl	8006944 <disk_read>
 80093f4:	1e03      	subs	r3, r0, #0
 80093f6:	d003      	beq.n	8009400 <f_open+0x3ec>
 80093f8:	2367      	movs	r3, #103	; 0x67
 80093fa:	18fb      	adds	r3, r7, r3
 80093fc:	2201      	movs	r2, #1
 80093fe:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009400:	2367      	movs	r3, #103	; 0x67
 8009402:	18fb      	adds	r3, r7, r3
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <f_open+0x3fc>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009410:	2367      	movs	r3, #103	; 0x67
 8009412:	18fb      	adds	r3, r7, r3
 8009414:	781b      	ldrb	r3, [r3, #0]
}
 8009416:	0018      	movs	r0, r3
 8009418:	46bd      	mov	sp, r7
 800941a:	b01b      	add	sp, #108	; 0x6c
 800941c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800941e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800941e:	b5b0      	push	{r4, r5, r7, lr}
 8009420:	b08c      	sub	sp, #48	; 0x30
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	607a      	str	r2, [r7, #4]
 800942a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	2200      	movs	r2, #0
 8009434:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	252f      	movs	r5, #47	; 0x2f
 800943a:	197c      	adds	r4, r7, r5
 800943c:	2210      	movs	r2, #16
 800943e:	18ba      	adds	r2, r7, r2
 8009440:	0011      	movs	r1, r2
 8009442:	0018      	movs	r0, r3
 8009444:	f7ff fd5e 	bl	8008f04 <validate>
 8009448:	0003      	movs	r3, r0
 800944a:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800944c:	197b      	adds	r3, r7, r5
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d107      	bne.n	8009464 <f_write+0x46>
 8009454:	197b      	adds	r3, r7, r5
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	7d52      	ldrb	r2, [r2, #21]
 800945a:	701a      	strb	r2, [r3, #0]
 800945c:	197b      	adds	r3, r7, r5
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <f_write+0x4e>
 8009464:	232f      	movs	r3, #47	; 0x2f
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	e16f      	b.n	800974c <f_write+0x32e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	7d1b      	ldrb	r3, [r3, #20]
 8009470:	001a      	movs	r2, r3
 8009472:	2302      	movs	r3, #2
 8009474:	4013      	ands	r3, r2
 8009476:	d101      	bne.n	800947c <f_write+0x5e>
 8009478:	2307      	movs	r3, #7
 800947a:	e167      	b.n	800974c <f_write+0x32e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	699a      	ldr	r2, [r3, #24]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	18d2      	adds	r2, r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	429a      	cmp	r2, r3
 800948a:	d300      	bcc.n	800948e <f_write+0x70>
 800948c:	e150      	b.n	8009730 <f_write+0x312>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	43db      	mvns	r3, r3
 8009494:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009496:	e14b      	b.n	8009730 <f_write+0x312>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	699a      	ldr	r2, [r3, #24]
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	899b      	ldrh	r3, [r3, #12]
 80094a0:	0019      	movs	r1, r3
 80094a2:	0010      	movs	r0, r2
 80094a4:	f7f6 fed2 	bl	800024c <__aeabi_uidivmod>
 80094a8:	1e0b      	subs	r3, r1, #0
 80094aa:	d000      	beq.n	80094ae <f_write+0x90>
 80094ac:	e0f4      	b.n	8009698 <f_write+0x27a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	899b      	ldrh	r3, [r3, #12]
 80094b6:	0019      	movs	r1, r3
 80094b8:	0010      	movs	r0, r2
 80094ba:	f7f6 fe41 	bl	8000140 <__udivsi3>
 80094be:	0003      	movs	r3, r0
 80094c0:	001a      	movs	r2, r3
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	895b      	ldrh	r3, [r3, #10]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4013      	ands	r3, r2
 80094ca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d146      	bne.n	8009560 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10d      	bne.n	80094f6 <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80094e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d11e      	bne.n	8009524 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2100      	movs	r1, #0
 80094ea:	0018      	movs	r0, r3
 80094ec:	f7fe f89a 	bl	8007624 <create_chain>
 80094f0:	0003      	movs	r3, r0
 80094f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80094f4:	e016      	b.n	8009524 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d009      	beq.n	8009512 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	699a      	ldr	r2, [r3, #24]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	0011      	movs	r1, r2
 8009506:	0018      	movs	r0, r3
 8009508:	f7fe f932 	bl	8007770 <clmt_clust>
 800950c:	0003      	movs	r3, r0
 800950e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009510:	e008      	b.n	8009524 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	0019      	movs	r1, r3
 800951a:	0010      	movs	r0, r2
 800951c:	f7fe f882 	bl	8007624 <create_chain>
 8009520:	0003      	movs	r3, r0
 8009522:	62bb      	str	r3, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	2b00      	cmp	r3, #0
 8009528:	d100      	bne.n	800952c <f_write+0x10e>
 800952a:	e106      	b.n	800973a <f_write+0x31c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952e:	2b01      	cmp	r3, #1
 8009530:	d104      	bne.n	800953c <f_write+0x11e>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2202      	movs	r2, #2
 8009536:	755a      	strb	r2, [r3, #21]
 8009538:	2302      	movs	r3, #2
 800953a:	e107      	b.n	800974c <f_write+0x32e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	3301      	adds	r3, #1
 8009540:	d104      	bne.n	800954c <f_write+0x12e>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	755a      	strb	r2, [r3, #21]
 8009548:	2301      	movs	r3, #1
 800954a:	e0ff      	b.n	800974c <f_write+0x32e>
				fp->clust = clst;			/* Update current cluster */
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009550:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d102      	bne.n	8009560 <f_write+0x142>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800955e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	7d1b      	ldrb	r3, [r3, #20]
 8009564:	b25b      	sxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	da17      	bge.n	800959a <f_write+0x17c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	7858      	ldrb	r0, [r3, #1]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3330      	adds	r3, #48	; 0x30
 8009572:	0019      	movs	r1, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6a1a      	ldr	r2, [r3, #32]
 8009578:	2301      	movs	r3, #1
 800957a:	f7fd fa0b 	bl	8006994 <disk_write>
 800957e:	1e03      	subs	r3, r0, #0
 8009580:	d004      	beq.n	800958c <f_write+0x16e>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2201      	movs	r2, #1
 8009586:	755a      	strb	r2, [r3, #21]
 8009588:	2301      	movs	r3, #1
 800958a:	e0df      	b.n	800974c <f_write+0x32e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	7d1b      	ldrb	r3, [r3, #20]
 8009590:	227f      	movs	r2, #127	; 0x7f
 8009592:	4013      	ands	r3, r2
 8009594:	b2da      	uxtb	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	69db      	ldr	r3, [r3, #28]
 80095a0:	0019      	movs	r1, r3
 80095a2:	0010      	movs	r0, r2
 80095a4:	f7fd fda4 	bl	80070f0 <clust2sect>
 80095a8:	0003      	movs	r3, r0
 80095aa:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d104      	bne.n	80095bc <f_write+0x19e>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2202      	movs	r2, #2
 80095b6:	755a      	strb	r2, [r3, #21]
 80095b8:	2302      	movs	r3, #2
 80095ba:	e0c7      	b.n	800974c <f_write+0x32e>
			sect += csect;
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	18d3      	adds	r3, r2, r3
 80095c2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	899b      	ldrh	r3, [r3, #12]
 80095c8:	0019      	movs	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7f6 fdb8 	bl	8000140 <__udivsi3>
 80095d0:	0003      	movs	r3, r0
 80095d2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d040      	beq.n	800965c <f_write+0x23e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	6a3b      	ldr	r3, [r7, #32]
 80095de:	18d3      	adds	r3, r2, r3
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	8952      	ldrh	r2, [r2, #10]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d905      	bls.n	80095f4 <f_write+0x1d6>
					cc = fs->csize - csect;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	895b      	ldrh	r3, [r3, #10]
 80095ec:	001a      	movs	r2, r3
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	7858      	ldrb	r0, [r3, #1]
 80095f8:	6a3b      	ldr	r3, [r7, #32]
 80095fa:	697a      	ldr	r2, [r7, #20]
 80095fc:	69f9      	ldr	r1, [r7, #28]
 80095fe:	f7fd f9c9 	bl	8006994 <disk_write>
 8009602:	1e03      	subs	r3, r0, #0
 8009604:	d004      	beq.n	8009610 <f_write+0x1f2>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	755a      	strb	r2, [r3, #21]
 800960c:	2301      	movs	r3, #1
 800960e:	e09d      	b.n	800974c <f_write+0x32e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a1a      	ldr	r2, [r3, #32]
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	6a3a      	ldr	r2, [r7, #32]
 800961a:	429a      	cmp	r2, r3
 800961c:	d917      	bls.n	800964e <f_write+0x230>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3330      	adds	r3, #48	; 0x30
 8009622:	0018      	movs	r0, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a1a      	ldr	r2, [r3, #32]
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	693a      	ldr	r2, [r7, #16]
 800962e:	8992      	ldrh	r2, [r2, #12]
 8009630:	4353      	muls	r3, r2
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	18d1      	adds	r1, r2, r3
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	899b      	ldrh	r3, [r3, #12]
 800963a:	001a      	movs	r2, r3
 800963c:	f7fd fa7e 	bl	8006b3c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	7d1b      	ldrb	r3, [r3, #20]
 8009644:	227f      	movs	r2, #127	; 0x7f
 8009646:	4013      	ands	r3, r2
 8009648:	b2da      	uxtb	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	899b      	ldrh	r3, [r3, #12]
 8009652:	001a      	movs	r2, r3
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	4353      	muls	r3, r2
 8009658:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800965a:	e04b      	b.n	80096f4 <f_write+0x2d6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6a1b      	ldr	r3, [r3, #32]
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	429a      	cmp	r2, r3
 8009664:	d015      	beq.n	8009692 <f_write+0x274>
				fp->fptr < fp->obj.objsize &&
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800966e:	429a      	cmp	r2, r3
 8009670:	d20f      	bcs.n	8009692 <f_write+0x274>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	7858      	ldrb	r0, [r3, #1]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3330      	adds	r3, #48	; 0x30
 800967a:	0019      	movs	r1, r3
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	2301      	movs	r3, #1
 8009680:	f7fd f960 	bl	8006944 <disk_read>
 8009684:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8009686:	d004      	beq.n	8009692 <f_write+0x274>
					ABORT(fs, FR_DISK_ERR);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2201      	movs	r2, #1
 800968c:	755a      	strb	r2, [r3, #21]
 800968e:	2301      	movs	r3, #1
 8009690:	e05c      	b.n	800974c <f_write+0x32e>
			}
#endif
			fp->sect = sect;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	899b      	ldrh	r3, [r3, #12]
 800969c:	001c      	movs	r4, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	899b      	ldrh	r3, [r3, #12]
 80096a6:	0019      	movs	r1, r3
 80096a8:	0010      	movs	r0, r2
 80096aa:	f7f6 fdcf 	bl	800024c <__aeabi_uidivmod>
 80096ae:	000b      	movs	r3, r1
 80096b0:	1ae3      	subs	r3, r4, r3
 80096b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80096b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d901      	bls.n	80096c0 <f_write+0x2a2>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	3330      	adds	r3, #48	; 0x30
 80096c4:	001c      	movs	r4, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	699a      	ldr	r2, [r3, #24]
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	899b      	ldrh	r3, [r3, #12]
 80096ce:	0019      	movs	r1, r3
 80096d0:	0010      	movs	r0, r2
 80096d2:	f7f6 fdbb 	bl	800024c <__aeabi_uidivmod>
 80096d6:	000b      	movs	r3, r1
 80096d8:	18e3      	adds	r3, r4, r3
 80096da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096dc:	69f9      	ldr	r1, [r7, #28]
 80096de:	0018      	movs	r0, r3
 80096e0:	f7fd fa2c 	bl	8006b3c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	7d1b      	ldrb	r3, [r3, #20]
 80096e8:	2280      	movs	r2, #128	; 0x80
 80096ea:	4252      	negs	r2, r2
 80096ec:	4313      	orrs	r3, r2
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	18d3      	adds	r3, r2, r3
 80096fa:	61fb      	str	r3, [r7, #28]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	699a      	ldr	r2, [r3, #24]
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	18d2      	adds	r2, r2, r3
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	619a      	str	r2, [r3, #24]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	68d9      	ldr	r1, [r3, #12]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	699a      	ldr	r2, [r3, #24]
 8009710:	000b      	movs	r3, r1
 8009712:	4293      	cmp	r3, r2
 8009714:	d200      	bcs.n	8009718 <f_write+0x2fa>
 8009716:	0013      	movs	r3, r2
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	60d3      	str	r3, [r2, #12]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	18d2      	adds	r2, r2, r3
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	601a      	str	r2, [r3, #0]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d000      	beq.n	8009738 <f_write+0x31a>
 8009736:	e6af      	b.n	8009498 <f_write+0x7a>
 8009738:	e000      	b.n	800973c <f_write+0x31e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800973a:	46c0      	nop			; (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	7d1b      	ldrb	r3, [r3, #20]
 8009740:	2240      	movs	r2, #64	; 0x40
 8009742:	4313      	orrs	r3, r2
 8009744:	b2da      	uxtb	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800974a:	2300      	movs	r3, #0
}
 800974c:	0018      	movs	r0, r3
 800974e:	46bd      	mov	sp, r7
 8009750:	b00c      	add	sp, #48	; 0x30
 8009752:	bdb0      	pop	{r4, r5, r7, pc}

08009754 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009754:	b5b0      	push	{r4, r5, r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2517      	movs	r5, #23
 8009760:	197c      	adds	r4, r7, r5
 8009762:	2208      	movs	r2, #8
 8009764:	18ba      	adds	r2, r7, r2
 8009766:	0011      	movs	r1, r2
 8009768:	0018      	movs	r0, r3
 800976a:	f7ff fbcb 	bl	8008f04 <validate>
 800976e:	0003      	movs	r3, r0
 8009770:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009772:	197b      	adds	r3, r7, r5
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d16e      	bne.n	8009858 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	7d1b      	ldrb	r3, [r3, #20]
 800977e:	001a      	movs	r2, r3
 8009780:	2340      	movs	r3, #64	; 0x40
 8009782:	4013      	ands	r3, r2
 8009784:	d068      	beq.n	8009858 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	7d1b      	ldrb	r3, [r3, #20]
 800978a:	b25b      	sxtb	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	da14      	bge.n	80097ba <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	7858      	ldrb	r0, [r3, #1]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3330      	adds	r3, #48	; 0x30
 8009798:	0019      	movs	r1, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1a      	ldr	r2, [r3, #32]
 800979e:	2301      	movs	r3, #1
 80097a0:	f7fd f8f8 	bl	8006994 <disk_write>
 80097a4:	1e03      	subs	r3, r0, #0
 80097a6:	d001      	beq.n	80097ac <f_sync+0x58>
 80097a8:	2301      	movs	r3, #1
 80097aa:	e058      	b.n	800985e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	7d1b      	ldrb	r3, [r3, #20]
 80097b0:	227f      	movs	r2, #127	; 0x7f
 80097b2:	4013      	ands	r3, r2
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80097ba:	f7fd f805 	bl	80067c8 <get_fattime>
 80097be:	0003      	movs	r3, r0
 80097c0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	2517      	movs	r5, #23
 80097ca:	197c      	adds	r4, r7, r5
 80097cc:	0019      	movs	r1, r3
 80097ce:	0010      	movs	r0, r2
 80097d0:	f7fd fbdc 	bl	8006f8c <move_window>
 80097d4:	0003      	movs	r3, r0
 80097d6:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 80097d8:	002c      	movs	r4, r5
 80097da:	193b      	adds	r3, r7, r4
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d13a      	bne.n	8009858 <f_sync+0x104>
					dir = fp->dir_ptr;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	330b      	adds	r3, #11
 80097ec:	781a      	ldrb	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	330b      	adds	r3, #11
 80097f2:	2120      	movs	r1, #32
 80097f4:	430a      	orrs	r2, r1
 80097f6:	b2d2      	uxtb	r2, r2
 80097f8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	0019      	movs	r1, r3
 8009806:	f7fe f9cd 	bl	8007ba4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	331c      	adds	r3, #28
 800980e:	001a      	movs	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	0019      	movs	r1, r3
 8009816:	0010      	movs	r0, r2
 8009818:	f7fd f966 	bl	8006ae8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	3316      	adds	r3, #22
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	0011      	movs	r1, r2
 8009824:	0018      	movs	r0, r3
 8009826:	f7fd f95f 	bl	8006ae8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3312      	adds	r3, #18
 800982e:	2100      	movs	r1, #0
 8009830:	0018      	movs	r0, r3
 8009832:	f7fd f93b 	bl	8006aac <st_word>
					fs->wflag = 1;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2201      	movs	r2, #1
 800983a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	193c      	adds	r4, r7, r4
 8009840:	0018      	movs	r0, r3
 8009842:	f7fd fbd9 	bl	8006ff8 <sync_fs>
 8009846:	0003      	movs	r3, r0
 8009848:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	7d1b      	ldrb	r3, [r3, #20]
 800984e:	2240      	movs	r2, #64	; 0x40
 8009850:	4393      	bics	r3, r2
 8009852:	b2da      	uxtb	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009858:	2317      	movs	r3, #23
 800985a:	18fb      	adds	r3, r7, r3
 800985c:	781b      	ldrb	r3, [r3, #0]
}
 800985e:	0018      	movs	r0, r3
 8009860:	46bd      	mov	sp, r7
 8009862:	b006      	add	sp, #24
 8009864:	bdb0      	pop	{r4, r5, r7, pc}

08009866 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009866:	b5b0      	push	{r4, r5, r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800986e:	250f      	movs	r5, #15
 8009870:	197c      	adds	r4, r7, r5
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	0018      	movs	r0, r3
 8009876:	f7ff ff6d 	bl	8009754 <f_sync>
 800987a:	0003      	movs	r3, r0
 800987c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800987e:	197b      	adds	r3, r7, r5
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d11c      	bne.n	80098c0 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	197c      	adds	r4, r7, r5
 800988a:	2208      	movs	r2, #8
 800988c:	18ba      	adds	r2, r7, r2
 800988e:	0011      	movs	r1, r2
 8009890:	0018      	movs	r0, r3
 8009892:	f7ff fb37 	bl	8008f04 <validate>
 8009896:	0003      	movs	r3, r0
 8009898:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800989a:	197b      	adds	r3, r7, r5
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10e      	bne.n	80098c0 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	197c      	adds	r4, r7, r5
 80098a8:	0018      	movs	r0, r3
 80098aa:	f7fd fabd 	bl	8006e28 <dec_lock>
 80098ae:	0003      	movs	r3, r0
 80098b0:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 80098b2:	197b      	adds	r3, r7, r5
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80098c0:	230f      	movs	r3, #15
 80098c2:	18fb      	adds	r3, r7, r3
 80098c4:	781b      	ldrb	r3, [r3, #0]
}
 80098c6:	0018      	movs	r0, r3
 80098c8:	46bd      	mov	sp, r7
 80098ca:	b004      	add	sp, #16
 80098cc:	bdb0      	pop	{r4, r5, r7, pc}

080098ce <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	000a      	movs	r2, r1
 80098d8:	1cfb      	adds	r3, r7, #3
 80098da:	701a      	strb	r2, [r3, #0]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80098dc:	1cfb      	adds	r3, r7, #3
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b0a      	cmp	r3, #10
 80098e2:	d104      	bne.n	80098ee <putc_bfd+0x20>
		putc_bfd(pb, '\r');
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	210d      	movs	r1, #13
 80098e8:	0018      	movs	r0, r3
 80098ea:	f7ff fff0 	bl	80098ce <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	db26      	blt.n	8009948 <putc_bfd+0x7a>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	60fa      	str	r2, [r7, #12]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	18d3      	adds	r3, r2, r3
 8009904:	1cfa      	adds	r2, r7, #3
 8009906:	7812      	ldrb	r2, [r2, #0]
 8009908:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b3c      	cmp	r3, #60	; 0x3c
 800990e:	dd12      	ble.n	8009936 <putc_bfd+0x68>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6818      	ldr	r0, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	330c      	adds	r3, #12
 8009918:	0019      	movs	r1, r3
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	2308      	movs	r3, #8
 800991e:	18fb      	adds	r3, r7, r3
 8009920:	f7ff fd7d 	bl	800941e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	429a      	cmp	r2, r3
 800992a:	d101      	bne.n	8009930 <putc_bfd+0x62>
 800992c:	2300      	movs	r3, #0
 800992e:	e001      	b.n	8009934 <putc_bfd+0x66>
 8009930:	2301      	movs	r3, #1
 8009932:	425b      	negs	r3, r3
 8009934:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	1c5a      	adds	r2, r3, #1
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	609a      	str	r2, [r3, #8]
 8009946:	e000      	b.n	800994a <putc_bfd+0x7c>
	if (i < 0) return;
 8009948:	46c0      	nop			; (mov r8, r8)
}
 800994a:	46bd      	mov	sp, r7
 800994c:	b004      	add	sp, #16
 800994e:	bd80      	pop	{r7, pc}

08009950 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	db15      	blt.n	800998c <putc_flush+0x3c>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6818      	ldr	r0, [r3, #0]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	330c      	adds	r3, #12
 8009968:	0019      	movs	r1, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	001a      	movs	r2, r3
 8009970:	230c      	movs	r3, #12
 8009972:	18fb      	adds	r3, r7, r3
 8009974:	f7ff fd53 	bl	800941e <f_write>
 8009978:	1e03      	subs	r3, r0, #0
 800997a:	d107      	bne.n	800998c <putc_flush+0x3c>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	4293      	cmp	r3, r2
 8009984:	d102      	bne.n	800998c <putc_flush+0x3c>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	e001      	b.n	8009990 <putc_flush+0x40>
	return EOF;
 800998c:	2301      	movs	r3, #1
 800998e:	425b      	negs	r3, r3
}
 8009990:	0018      	movs	r0, r3
 8009992:	46bd      	mov	sp, r7
 8009994:	b004      	add	sp, #16
 8009996:	bd80      	pop	{r7, pc}

08009998 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	605a      	str	r2, [r3, #4]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685a      	ldr	r2, [r3, #4]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	609a      	str	r2, [r3, #8]
}
 80099b6:	46c0      	nop			; (mov r8, r8)
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b002      	add	sp, #8
 80099bc:	bd80      	pop	{r7, pc}

080099be <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b096      	sub	sp, #88	; 0x58
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	230c      	movs	r3, #12
 80099cc:	18fb      	adds	r3, r7, r3
 80099ce:	0011      	movs	r1, r2
 80099d0:	0018      	movs	r0, r3
 80099d2:	f7ff ffe1 	bl	8009998 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80099d6:	e009      	b.n	80099ec <f_puts+0x2e>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	1c5a      	adds	r2, r3, #1
 80099dc:	607a      	str	r2, [r7, #4]
 80099de:	781a      	ldrb	r2, [r3, #0]
 80099e0:	230c      	movs	r3, #12
 80099e2:	18fb      	adds	r3, r7, r3
 80099e4:	0011      	movs	r1, r2
 80099e6:	0018      	movs	r0, r3
 80099e8:	f7ff ff71 	bl	80098ce <putc_bfd>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1f1      	bne.n	80099d8 <f_puts+0x1a>
	return putc_flush(&pb);
 80099f4:	230c      	movs	r3, #12
 80099f6:	18fb      	adds	r3, r7, r3
 80099f8:	0018      	movs	r0, r3
 80099fa:	f7ff ffa9 	bl	8009950 <putc_flush>
 80099fe:	0003      	movs	r3, r0
}
 8009a00:	0018      	movs	r0, r3
 8009a02:	46bd      	mov	sp, r7
 8009a04:	b016      	add	sp, #88	; 0x58
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a08:	b590      	push	{r4, r7, lr}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	1dfb      	adds	r3, r7, #7
 8009a14:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8009a16:	2417      	movs	r4, #23
 8009a18:	193b      	adds	r3, r7, r4
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8009a1e:	2016      	movs	r0, #22
 8009a20:	183b      	adds	r3, r7, r0
 8009a22:	2200      	movs	r2, #0
 8009a24:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8009a26:	4b21      	ldr	r3, [pc, #132]	; (8009aac <FATFS_LinkDriverEx+0xa4>)
 8009a28:	7a5b      	ldrb	r3, [r3, #9]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d136      	bne.n	8009a9e <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a30:	4b1e      	ldr	r3, [pc, #120]	; (8009aac <FATFS_LinkDriverEx+0xa4>)
 8009a32:	7a5b      	ldrb	r3, [r3, #9]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	001a      	movs	r2, r3
 8009a38:	4b1c      	ldr	r3, [pc, #112]	; (8009aac <FATFS_LinkDriverEx+0xa4>)
 8009a3a:	2100      	movs	r1, #0
 8009a3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a3e:	4b1b      	ldr	r3, [pc, #108]	; (8009aac <FATFS_LinkDriverEx+0xa4>)
 8009a40:	7a5b      	ldrb	r3, [r3, #9]
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	4a19      	ldr	r2, [pc, #100]	; (8009aac <FATFS_LinkDriverEx+0xa4>)
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	18d3      	adds	r3, r2, r3
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8009a50:	4b16      	ldr	r3, [pc, #88]	; (8009aac <FATFS_LinkDriverEx+0xa4>)
 8009a52:	7a5b      	ldrb	r3, [r3, #9]
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	001a      	movs	r2, r3
 8009a58:	4b14      	ldr	r3, [pc, #80]	; (8009aac <FATFS_LinkDriverEx+0xa4>)
 8009a5a:	189b      	adds	r3, r3, r2
 8009a5c:	1dfa      	adds	r2, r7, #7
 8009a5e:	7812      	ldrb	r2, [r2, #0]
 8009a60:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009a62:	4b12      	ldr	r3, [pc, #72]	; (8009aac <FATFS_LinkDriverEx+0xa4>)
 8009a64:	7a5b      	ldrb	r3, [r3, #9]
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	1c5a      	adds	r2, r3, #1
 8009a6a:	b2d1      	uxtb	r1, r2
 8009a6c:	4a0f      	ldr	r2, [pc, #60]	; (8009aac <FATFS_LinkDriverEx+0xa4>)
 8009a6e:	7251      	strb	r1, [r2, #9]
 8009a70:	183a      	adds	r2, r7, r0
 8009a72:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8009a74:	183b      	adds	r3, r7, r0
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	3330      	adds	r3, #48	; 0x30
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	3301      	adds	r3, #1
 8009a84:	223a      	movs	r2, #58	; 0x3a
 8009a86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	3302      	adds	r3, #2
 8009a8c:	222f      	movs	r2, #47	; 0x2f
 8009a8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	3303      	adds	r3, #3
 8009a94:	2200      	movs	r2, #0
 8009a96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a98:	193b      	adds	r3, r7, r4
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009a9e:	2317      	movs	r3, #23
 8009aa0:	18fb      	adds	r3, r7, r3
 8009aa2:	781b      	ldrb	r3, [r3, #0]
}
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	b007      	add	sp, #28
 8009aaa:	bd90      	pop	{r4, r7, pc}
 8009aac:	20000518 	.word	0x20000518

08009ab0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f7ff ffa1 	bl	8009a08 <FATFS_LinkDriverEx>
 8009ac6:	0003      	movs	r3, r0
}
 8009ac8:	0018      	movs	r0, r3
 8009aca:	46bd      	mov	sp, r7
 8009acc:	b002      	add	sp, #8
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	0002      	movs	r2, r0
 8009ad8:	6039      	str	r1, [r7, #0]
 8009ada:	1dbb      	adds	r3, r7, #6
 8009adc:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009ade:	1dbb      	adds	r3, r7, #6
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8009ae4:	d805      	bhi.n	8009af2 <ff_convert+0x22>
		c = chr;
 8009ae6:	230e      	movs	r3, #14
 8009ae8:	18fb      	adds	r3, r7, r3
 8009aea:	1dba      	adds	r2, r7, #6
 8009aec:	8812      	ldrh	r2, [r2, #0]
 8009aee:	801a      	strh	r2, [r3, #0]
 8009af0:	e037      	b.n	8009b62 <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d010      	beq.n	8009b1a <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009af8:	1dbb      	adds	r3, r7, #6
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	2bff      	cmp	r3, #255	; 0xff
 8009afe:	d807      	bhi.n	8009b10 <ff_convert+0x40>
 8009b00:	1dbb      	adds	r3, r7, #6
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	3b80      	subs	r3, #128	; 0x80
 8009b06:	001a      	movs	r2, r3
 8009b08:	4b19      	ldr	r3, [pc, #100]	; (8009b70 <ff_convert+0xa0>)
 8009b0a:	0052      	lsls	r2, r2, #1
 8009b0c:	5ad2      	ldrh	r2, [r2, r3]
 8009b0e:	e000      	b.n	8009b12 <ff_convert+0x42>
 8009b10:	2200      	movs	r2, #0
 8009b12:	230e      	movs	r3, #14
 8009b14:	18fb      	adds	r3, r7, r3
 8009b16:	801a      	strh	r2, [r3, #0]
 8009b18:	e023      	b.n	8009b62 <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009b1a:	230e      	movs	r3, #14
 8009b1c:	18fb      	adds	r3, r7, r3
 8009b1e:	2200      	movs	r2, #0
 8009b20:	801a      	strh	r2, [r3, #0]
 8009b22:	e00e      	b.n	8009b42 <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 8009b24:	210e      	movs	r1, #14
 8009b26:	187b      	adds	r3, r7, r1
 8009b28:	881a      	ldrh	r2, [r3, #0]
 8009b2a:	4b11      	ldr	r3, [pc, #68]	; (8009b70 <ff_convert+0xa0>)
 8009b2c:	0052      	lsls	r2, r2, #1
 8009b2e:	5ad3      	ldrh	r3, [r2, r3]
 8009b30:	1dba      	adds	r2, r7, #6
 8009b32:	8812      	ldrh	r2, [r2, #0]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d00a      	beq.n	8009b4e <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 8009b38:	187b      	adds	r3, r7, r1
 8009b3a:	881a      	ldrh	r2, [r3, #0]
 8009b3c:	187b      	adds	r3, r7, r1
 8009b3e:	3201      	adds	r2, #1
 8009b40:	801a      	strh	r2, [r3, #0]
 8009b42:	230e      	movs	r3, #14
 8009b44:	18fb      	adds	r3, r7, r3
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	2b7f      	cmp	r3, #127	; 0x7f
 8009b4a:	d9eb      	bls.n	8009b24 <ff_convert+0x54>
 8009b4c:	e000      	b.n	8009b50 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 8009b4e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 8009b50:	210e      	movs	r1, #14
 8009b52:	187b      	adds	r3, r7, r1
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	3380      	adds	r3, #128	; 0x80
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	187b      	adds	r3, r7, r1
 8009b5c:	21ff      	movs	r1, #255	; 0xff
 8009b5e:	400a      	ands	r2, r1
 8009b60:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 8009b62:	230e      	movs	r3, #14
 8009b64:	18fb      	adds	r3, r7, r3
 8009b66:	881b      	ldrh	r3, [r3, #0]
}
 8009b68:	0018      	movs	r0, r3
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	b004      	add	sp, #16
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	0800e89c 	.word	0x0800e89c

08009b74 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009b74:	b5b0      	push	{r4, r5, r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	0002      	movs	r2, r0
 8009b7c:	1dbb      	adds	r3, r7, #6
 8009b7e:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009b80:	1dbb      	adds	r3, r7, #6
 8009b82:	881a      	ldrh	r2, [r3, #0]
 8009b84:	2380      	movs	r3, #128	; 0x80
 8009b86:	015b      	lsls	r3, r3, #5
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d201      	bcs.n	8009b90 <ff_wtoupper+0x1c>
 8009b8c:	4b4d      	ldr	r3, [pc, #308]	; (8009cc4 <ff_wtoupper+0x150>)
 8009b8e:	e000      	b.n	8009b92 <ff_wtoupper+0x1e>
 8009b90:	4b4d      	ldr	r3, [pc, #308]	; (8009cc8 <ff_wtoupper+0x154>)
 8009b92:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	1c9a      	adds	r2, r3, #2
 8009b98:	617a      	str	r2, [r7, #20]
 8009b9a:	2412      	movs	r4, #18
 8009b9c:	193a      	adds	r2, r7, r4
 8009b9e:	881b      	ldrh	r3, [r3, #0]
 8009ba0:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 8009ba2:	193b      	adds	r3, r7, r4
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d100      	bne.n	8009bac <ff_wtoupper+0x38>
 8009baa:	e084      	b.n	8009cb6 <ff_wtoupper+0x142>
 8009bac:	1dba      	adds	r2, r7, #6
 8009bae:	193b      	adds	r3, r7, r4
 8009bb0:	8812      	ldrh	r2, [r2, #0]
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d200      	bcs.n	8009bba <ff_wtoupper+0x46>
 8009bb8:	e07d      	b.n	8009cb6 <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	1c9a      	adds	r2, r3, #2
 8009bbe:	617a      	str	r2, [r7, #20]
 8009bc0:	2010      	movs	r0, #16
 8009bc2:	183a      	adds	r2, r7, r0
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	8013      	strh	r3, [r2, #0]
 8009bc8:	250e      	movs	r5, #14
 8009bca:	197b      	adds	r3, r7, r5
 8009bcc:	183a      	adds	r2, r7, r0
 8009bce:	8812      	ldrh	r2, [r2, #0]
 8009bd0:	0a12      	lsrs	r2, r2, #8
 8009bd2:	801a      	strh	r2, [r3, #0]
 8009bd4:	183b      	adds	r3, r7, r0
 8009bd6:	183a      	adds	r2, r7, r0
 8009bd8:	8812      	ldrh	r2, [r2, #0]
 8009bda:	21ff      	movs	r1, #255	; 0xff
 8009bdc:	400a      	ands	r2, r1
 8009bde:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 8009be0:	1dbb      	adds	r3, r7, #6
 8009be2:	881a      	ldrh	r2, [r3, #0]
 8009be4:	193b      	adds	r3, r7, r4
 8009be6:	8819      	ldrh	r1, [r3, #0]
 8009be8:	183b      	adds	r3, r7, r0
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	18cb      	adds	r3, r1, r3
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	da52      	bge.n	8009c98 <ff_wtoupper+0x124>
			switch (cmd) {
 8009bf2:	197b      	adds	r3, r7, r5
 8009bf4:	881b      	ldrh	r3, [r3, #0]
 8009bf6:	2b08      	cmp	r3, #8
 8009bf8:	d85c      	bhi.n	8009cb4 <ff_wtoupper+0x140>
 8009bfa:	009a      	lsls	r2, r3, #2
 8009bfc:	4b33      	ldr	r3, [pc, #204]	; (8009ccc <ff_wtoupper+0x158>)
 8009bfe:	18d3      	adds	r3, r2, r3
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009c04:	1dbb      	adds	r3, r7, #6
 8009c06:	881a      	ldrh	r2, [r3, #0]
 8009c08:	2312      	movs	r3, #18
 8009c0a:	18fb      	adds	r3, r7, r3
 8009c0c:	881b      	ldrh	r3, [r3, #0]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	18d2      	adds	r2, r2, r3
 8009c16:	1dbb      	adds	r3, r7, #6
 8009c18:	8812      	ldrh	r2, [r2, #0]
 8009c1a:	801a      	strh	r2, [r3, #0]
 8009c1c:	e03b      	b.n	8009c96 <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009c1e:	1dba      	adds	r2, r7, #6
 8009c20:	2312      	movs	r3, #18
 8009c22:	18fb      	adds	r3, r7, r3
 8009c24:	8812      	ldrh	r2, [r2, #0]
 8009c26:	881b      	ldrh	r3, [r3, #0]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	4013      	ands	r3, r2
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	1dbb      	adds	r3, r7, #6
 8009c34:	1db9      	adds	r1, r7, #6
 8009c36:	8809      	ldrh	r1, [r1, #0]
 8009c38:	1a8a      	subs	r2, r1, r2
 8009c3a:	801a      	strh	r2, [r3, #0]
 8009c3c:	e02b      	b.n	8009c96 <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009c3e:	1dbb      	adds	r3, r7, #6
 8009c40:	1dba      	adds	r2, r7, #6
 8009c42:	8812      	ldrh	r2, [r2, #0]
 8009c44:	3a10      	subs	r2, #16
 8009c46:	801a      	strh	r2, [r3, #0]
 8009c48:	e025      	b.n	8009c96 <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009c4a:	1dbb      	adds	r3, r7, #6
 8009c4c:	1dba      	adds	r2, r7, #6
 8009c4e:	8812      	ldrh	r2, [r2, #0]
 8009c50:	3a20      	subs	r2, #32
 8009c52:	801a      	strh	r2, [r3, #0]
 8009c54:	e01f      	b.n	8009c96 <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009c56:	1dbb      	adds	r3, r7, #6
 8009c58:	1dba      	adds	r2, r7, #6
 8009c5a:	8812      	ldrh	r2, [r2, #0]
 8009c5c:	3a30      	subs	r2, #48	; 0x30
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	e019      	b.n	8009c96 <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009c62:	1dbb      	adds	r3, r7, #6
 8009c64:	1dba      	adds	r2, r7, #6
 8009c66:	8812      	ldrh	r2, [r2, #0]
 8009c68:	3a1a      	subs	r2, #26
 8009c6a:	801a      	strh	r2, [r3, #0]
 8009c6c:	e013      	b.n	8009c96 <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009c6e:	1dbb      	adds	r3, r7, #6
 8009c70:	1dba      	adds	r2, r7, #6
 8009c72:	8812      	ldrh	r2, [r2, #0]
 8009c74:	3208      	adds	r2, #8
 8009c76:	801a      	strh	r2, [r3, #0]
 8009c78:	e00d      	b.n	8009c96 <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009c7a:	1dbb      	adds	r3, r7, #6
 8009c7c:	1dba      	adds	r2, r7, #6
 8009c7e:	8812      	ldrh	r2, [r2, #0]
 8009c80:	3a50      	subs	r2, #80	; 0x50
 8009c82:	801a      	strh	r2, [r3, #0]
 8009c84:	e007      	b.n	8009c96 <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009c86:	1dbb      	adds	r3, r7, #6
 8009c88:	1dba      	adds	r2, r7, #6
 8009c8a:	8812      	ldrh	r2, [r2, #0]
 8009c8c:	4910      	ldr	r1, [pc, #64]	; (8009cd0 <ff_wtoupper+0x15c>)
 8009c8e:	468c      	mov	ip, r1
 8009c90:	4462      	add	r2, ip
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	46c0      	nop			; (mov r8, r8)
			}
			break;
 8009c96:	e00d      	b.n	8009cb4 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 8009c98:	230e      	movs	r3, #14
 8009c9a:	18fb      	adds	r3, r7, r3
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d000      	beq.n	8009ca4 <ff_wtoupper+0x130>
 8009ca2:	e777      	b.n	8009b94 <ff_wtoupper+0x20>
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	18fb      	adds	r3, r7, r3
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	005b      	lsls	r3, r3, #1
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	18d3      	adds	r3, r2, r3
 8009cb0:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009cb2:	e76f      	b.n	8009b94 <ff_wtoupper+0x20>
			break;
 8009cb4:	46c0      	nop			; (mov r8, r8)
	}

	return chr;
 8009cb6:	1dbb      	adds	r3, r7, #6
 8009cb8:	881b      	ldrh	r3, [r3, #0]
}
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	b006      	add	sp, #24
 8009cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8009cc2:	46c0      	nop			; (mov r8, r8)
 8009cc4:	0800e9c0 	.word	0x0800e9c0
 8009cc8:	0800ebb4 	.word	0x0800ebb4
 8009ccc:	0800e99c 	.word	0x0800e99c
 8009cd0:	ffffe3a0 	.word	0xffffe3a0

08009cd4 <__cvt>:
 8009cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cd6:	001e      	movs	r6, r3
 8009cd8:	2300      	movs	r3, #0
 8009cda:	0014      	movs	r4, r2
 8009cdc:	b08b      	sub	sp, #44	; 0x2c
 8009cde:	429e      	cmp	r6, r3
 8009ce0:	da04      	bge.n	8009cec <__cvt+0x18>
 8009ce2:	2180      	movs	r1, #128	; 0x80
 8009ce4:	0609      	lsls	r1, r1, #24
 8009ce6:	1873      	adds	r3, r6, r1
 8009ce8:	001e      	movs	r6, r3
 8009cea:	232d      	movs	r3, #45	; 0x2d
 8009cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009cf0:	7013      	strb	r3, [r2, #0]
 8009cf2:	2320      	movs	r3, #32
 8009cf4:	2203      	movs	r2, #3
 8009cf6:	439f      	bics	r7, r3
 8009cf8:	2f46      	cmp	r7, #70	; 0x46
 8009cfa:	d007      	beq.n	8009d0c <__cvt+0x38>
 8009cfc:	003b      	movs	r3, r7
 8009cfe:	3b45      	subs	r3, #69	; 0x45
 8009d00:	4259      	negs	r1, r3
 8009d02:	414b      	adcs	r3, r1
 8009d04:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009d06:	3a01      	subs	r2, #1
 8009d08:	18cb      	adds	r3, r1, r3
 8009d0a:	9310      	str	r3, [sp, #64]	; 0x40
 8009d0c:	ab09      	add	r3, sp, #36	; 0x24
 8009d0e:	9304      	str	r3, [sp, #16]
 8009d10:	ab08      	add	r3, sp, #32
 8009d12:	9303      	str	r3, [sp, #12]
 8009d14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d16:	9200      	str	r2, [sp, #0]
 8009d18:	9302      	str	r3, [sp, #8]
 8009d1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d1c:	0022      	movs	r2, r4
 8009d1e:	9301      	str	r3, [sp, #4]
 8009d20:	0033      	movs	r3, r6
 8009d22:	f001 f8e7 	bl	800aef4 <_dtoa_r>
 8009d26:	0005      	movs	r5, r0
 8009d28:	2f47      	cmp	r7, #71	; 0x47
 8009d2a:	d102      	bne.n	8009d32 <__cvt+0x5e>
 8009d2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d2e:	07db      	lsls	r3, r3, #31
 8009d30:	d528      	bpl.n	8009d84 <__cvt+0xb0>
 8009d32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d34:	18eb      	adds	r3, r5, r3
 8009d36:	9307      	str	r3, [sp, #28]
 8009d38:	2f46      	cmp	r7, #70	; 0x46
 8009d3a:	d114      	bne.n	8009d66 <__cvt+0x92>
 8009d3c:	782b      	ldrb	r3, [r5, #0]
 8009d3e:	2b30      	cmp	r3, #48	; 0x30
 8009d40:	d10c      	bne.n	8009d5c <__cvt+0x88>
 8009d42:	2200      	movs	r2, #0
 8009d44:	2300      	movs	r3, #0
 8009d46:	0020      	movs	r0, r4
 8009d48:	0031      	movs	r1, r6
 8009d4a:	f7f6 fb7f 	bl	800044c <__aeabi_dcmpeq>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d104      	bne.n	8009d5c <__cvt+0x88>
 8009d52:	2301      	movs	r3, #1
 8009d54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d56:	1a9b      	subs	r3, r3, r2
 8009d58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d5e:	9a07      	ldr	r2, [sp, #28]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	18d3      	adds	r3, r2, r3
 8009d64:	9307      	str	r3, [sp, #28]
 8009d66:	2200      	movs	r2, #0
 8009d68:	2300      	movs	r3, #0
 8009d6a:	0020      	movs	r0, r4
 8009d6c:	0031      	movs	r1, r6
 8009d6e:	f7f6 fb6d 	bl	800044c <__aeabi_dcmpeq>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	d001      	beq.n	8009d7a <__cvt+0xa6>
 8009d76:	9b07      	ldr	r3, [sp, #28]
 8009d78:	9309      	str	r3, [sp, #36]	; 0x24
 8009d7a:	2230      	movs	r2, #48	; 0x30
 8009d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d7e:	9907      	ldr	r1, [sp, #28]
 8009d80:	428b      	cmp	r3, r1
 8009d82:	d306      	bcc.n	8009d92 <__cvt+0xbe>
 8009d84:	0028      	movs	r0, r5
 8009d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d8a:	1b5b      	subs	r3, r3, r5
 8009d8c:	6013      	str	r3, [r2, #0]
 8009d8e:	b00b      	add	sp, #44	; 0x2c
 8009d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d92:	1c59      	adds	r1, r3, #1
 8009d94:	9109      	str	r1, [sp, #36]	; 0x24
 8009d96:	701a      	strb	r2, [r3, #0]
 8009d98:	e7f0      	b.n	8009d7c <__cvt+0xa8>

08009d9a <__exponent>:
 8009d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d9c:	1c83      	adds	r3, r0, #2
 8009d9e:	b087      	sub	sp, #28
 8009da0:	9303      	str	r3, [sp, #12]
 8009da2:	0005      	movs	r5, r0
 8009da4:	000c      	movs	r4, r1
 8009da6:	232b      	movs	r3, #43	; 0x2b
 8009da8:	7002      	strb	r2, [r0, #0]
 8009daa:	2900      	cmp	r1, #0
 8009dac:	da01      	bge.n	8009db2 <__exponent+0x18>
 8009dae:	424c      	negs	r4, r1
 8009db0:	3302      	adds	r3, #2
 8009db2:	706b      	strb	r3, [r5, #1]
 8009db4:	2c09      	cmp	r4, #9
 8009db6:	dd2f      	ble.n	8009e18 <__exponent+0x7e>
 8009db8:	270a      	movs	r7, #10
 8009dba:	ab04      	add	r3, sp, #16
 8009dbc:	1dde      	adds	r6, r3, #7
 8009dbe:	0020      	movs	r0, r4
 8009dc0:	0039      	movs	r1, r7
 8009dc2:	9601      	str	r6, [sp, #4]
 8009dc4:	f7f6 fb2c 	bl	8000420 <__aeabi_idivmod>
 8009dc8:	3e01      	subs	r6, #1
 8009dca:	3130      	adds	r1, #48	; 0x30
 8009dcc:	0020      	movs	r0, r4
 8009dce:	7031      	strb	r1, [r6, #0]
 8009dd0:	0039      	movs	r1, r7
 8009dd2:	9402      	str	r4, [sp, #8]
 8009dd4:	f7f6 fa3e 	bl	8000254 <__divsi3>
 8009dd8:	9b02      	ldr	r3, [sp, #8]
 8009dda:	0004      	movs	r4, r0
 8009ddc:	2b63      	cmp	r3, #99	; 0x63
 8009dde:	dcee      	bgt.n	8009dbe <__exponent+0x24>
 8009de0:	9b01      	ldr	r3, [sp, #4]
 8009de2:	3430      	adds	r4, #48	; 0x30
 8009de4:	1e9a      	subs	r2, r3, #2
 8009de6:	0013      	movs	r3, r2
 8009de8:	9903      	ldr	r1, [sp, #12]
 8009dea:	7014      	strb	r4, [r2, #0]
 8009dec:	a804      	add	r0, sp, #16
 8009dee:	3007      	adds	r0, #7
 8009df0:	4298      	cmp	r0, r3
 8009df2:	d80c      	bhi.n	8009e0e <__exponent+0x74>
 8009df4:	2300      	movs	r3, #0
 8009df6:	4282      	cmp	r2, r0
 8009df8:	d804      	bhi.n	8009e04 <__exponent+0x6a>
 8009dfa:	aa04      	add	r2, sp, #16
 8009dfc:	3309      	adds	r3, #9
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	9a01      	ldr	r2, [sp, #4]
 8009e02:	1a9b      	subs	r3, r3, r2
 8009e04:	9a03      	ldr	r2, [sp, #12]
 8009e06:	18d3      	adds	r3, r2, r3
 8009e08:	1b58      	subs	r0, r3, r5
 8009e0a:	b007      	add	sp, #28
 8009e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e0e:	7818      	ldrb	r0, [r3, #0]
 8009e10:	3301      	adds	r3, #1
 8009e12:	7008      	strb	r0, [r1, #0]
 8009e14:	3101      	adds	r1, #1
 8009e16:	e7e9      	b.n	8009dec <__exponent+0x52>
 8009e18:	2330      	movs	r3, #48	; 0x30
 8009e1a:	3430      	adds	r4, #48	; 0x30
 8009e1c:	70ab      	strb	r3, [r5, #2]
 8009e1e:	70ec      	strb	r4, [r5, #3]
 8009e20:	1d2b      	adds	r3, r5, #4
 8009e22:	e7f1      	b.n	8009e08 <__exponent+0x6e>

08009e24 <_printf_float>:
 8009e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e26:	b095      	sub	sp, #84	; 0x54
 8009e28:	000c      	movs	r4, r1
 8009e2a:	9208      	str	r2, [sp, #32]
 8009e2c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e30:	0007      	movs	r7, r0
 8009e32:	f000 ff41 	bl	800acb8 <_localeconv_r>
 8009e36:	6803      	ldr	r3, [r0, #0]
 8009e38:	0018      	movs	r0, r3
 8009e3a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e3c:	f7f6 f964 	bl	8000108 <strlen>
 8009e40:	2300      	movs	r3, #0
 8009e42:	9312      	str	r3, [sp, #72]	; 0x48
 8009e44:	7e23      	ldrb	r3, [r4, #24]
 8009e46:	2207      	movs	r2, #7
 8009e48:	930a      	str	r3, [sp, #40]	; 0x28
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	900d      	str	r0, [sp, #52]	; 0x34
 8009e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e52:	682b      	ldr	r3, [r5, #0]
 8009e54:	05c9      	lsls	r1, r1, #23
 8009e56:	d547      	bpl.n	8009ee8 <_printf_float+0xc4>
 8009e58:	189b      	adds	r3, r3, r2
 8009e5a:	4393      	bics	r3, r2
 8009e5c:	001a      	movs	r2, r3
 8009e5e:	3208      	adds	r2, #8
 8009e60:	602a      	str	r2, [r5, #0]
 8009e62:	681e      	ldr	r6, [r3, #0]
 8009e64:	685d      	ldr	r5, [r3, #4]
 8009e66:	0032      	movs	r2, r6
 8009e68:	002b      	movs	r3, r5
 8009e6a:	64a2      	str	r2, [r4, #72]	; 0x48
 8009e6c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009e6e:	2201      	movs	r2, #1
 8009e70:	006b      	lsls	r3, r5, #1
 8009e72:	085b      	lsrs	r3, r3, #1
 8009e74:	930e      	str	r3, [sp, #56]	; 0x38
 8009e76:	0030      	movs	r0, r6
 8009e78:	4bab      	ldr	r3, [pc, #684]	; (800a128 <_printf_float+0x304>)
 8009e7a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e7c:	4252      	negs	r2, r2
 8009e7e:	f7f8 fd3d 	bl	80028fc <__aeabi_dcmpun>
 8009e82:	2800      	cmp	r0, #0
 8009e84:	d132      	bne.n	8009eec <_printf_float+0xc8>
 8009e86:	2201      	movs	r2, #1
 8009e88:	0030      	movs	r0, r6
 8009e8a:	4ba7      	ldr	r3, [pc, #668]	; (800a128 <_printf_float+0x304>)
 8009e8c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009e8e:	4252      	negs	r2, r2
 8009e90:	f7f6 faec 	bl	800046c <__aeabi_dcmple>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d129      	bne.n	8009eec <_printf_float+0xc8>
 8009e98:	2200      	movs	r2, #0
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	0030      	movs	r0, r6
 8009e9e:	0029      	movs	r1, r5
 8009ea0:	f7f6 fada 	bl	8000458 <__aeabi_dcmplt>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d003      	beq.n	8009eb0 <_printf_float+0x8c>
 8009ea8:	0023      	movs	r3, r4
 8009eaa:	222d      	movs	r2, #45	; 0x2d
 8009eac:	3343      	adds	r3, #67	; 0x43
 8009eae:	701a      	strb	r2, [r3, #0]
 8009eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb2:	4d9e      	ldr	r5, [pc, #632]	; (800a12c <_printf_float+0x308>)
 8009eb4:	2b47      	cmp	r3, #71	; 0x47
 8009eb6:	d900      	bls.n	8009eba <_printf_float+0x96>
 8009eb8:	4d9d      	ldr	r5, [pc, #628]	; (800a130 <_printf_float+0x30c>)
 8009eba:	2303      	movs	r3, #3
 8009ebc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ebe:	6123      	str	r3, [r4, #16]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	439a      	bics	r2, r3
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	6022      	str	r2, [r4, #0]
 8009ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ecc:	0021      	movs	r1, r4
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	0038      	movs	r0, r7
 8009ed2:	9b08      	ldr	r3, [sp, #32]
 8009ed4:	aa13      	add	r2, sp, #76	; 0x4c
 8009ed6:	f000 f9fb 	bl	800a2d0 <_printf_common>
 8009eda:	3001      	adds	r0, #1
 8009edc:	d000      	beq.n	8009ee0 <_printf_float+0xbc>
 8009ede:	e0a3      	b.n	800a028 <_printf_float+0x204>
 8009ee0:	2001      	movs	r0, #1
 8009ee2:	4240      	negs	r0, r0
 8009ee4:	b015      	add	sp, #84	; 0x54
 8009ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ee8:	3307      	adds	r3, #7
 8009eea:	e7b6      	b.n	8009e5a <_printf_float+0x36>
 8009eec:	0032      	movs	r2, r6
 8009eee:	002b      	movs	r3, r5
 8009ef0:	0030      	movs	r0, r6
 8009ef2:	0029      	movs	r1, r5
 8009ef4:	f7f8 fd02 	bl	80028fc <__aeabi_dcmpun>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	d00b      	beq.n	8009f14 <_printf_float+0xf0>
 8009efc:	2d00      	cmp	r5, #0
 8009efe:	da03      	bge.n	8009f08 <_printf_float+0xe4>
 8009f00:	0023      	movs	r3, r4
 8009f02:	222d      	movs	r2, #45	; 0x2d
 8009f04:	3343      	adds	r3, #67	; 0x43
 8009f06:	701a      	strb	r2, [r3, #0]
 8009f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f0a:	4d8a      	ldr	r5, [pc, #552]	; (800a134 <_printf_float+0x310>)
 8009f0c:	2b47      	cmp	r3, #71	; 0x47
 8009f0e:	d9d4      	bls.n	8009eba <_printf_float+0x96>
 8009f10:	4d89      	ldr	r5, [pc, #548]	; (800a138 <_printf_float+0x314>)
 8009f12:	e7d2      	b.n	8009eba <_printf_float+0x96>
 8009f14:	2220      	movs	r2, #32
 8009f16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f18:	6863      	ldr	r3, [r4, #4]
 8009f1a:	4391      	bics	r1, r2
 8009f1c:	910e      	str	r1, [sp, #56]	; 0x38
 8009f1e:	1c5a      	adds	r2, r3, #1
 8009f20:	d14a      	bne.n	8009fb8 <_printf_float+0x194>
 8009f22:	3307      	adds	r3, #7
 8009f24:	6063      	str	r3, [r4, #4]
 8009f26:	2380      	movs	r3, #128	; 0x80
 8009f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	9206      	str	r2, [sp, #24]
 8009f32:	aa12      	add	r2, sp, #72	; 0x48
 8009f34:	9205      	str	r2, [sp, #20]
 8009f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	9204      	str	r2, [sp, #16]
 8009f3c:	aa11      	add	r2, sp, #68	; 0x44
 8009f3e:	9203      	str	r2, [sp, #12]
 8009f40:	2223      	movs	r2, #35	; 0x23
 8009f42:	a908      	add	r1, sp, #32
 8009f44:	9301      	str	r3, [sp, #4]
 8009f46:	6863      	ldr	r3, [r4, #4]
 8009f48:	1852      	adds	r2, r2, r1
 8009f4a:	9202      	str	r2, [sp, #8]
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	0032      	movs	r2, r6
 8009f50:	002b      	movs	r3, r5
 8009f52:	0038      	movs	r0, r7
 8009f54:	f7ff febe 	bl	8009cd4 <__cvt>
 8009f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f5a:	0005      	movs	r5, r0
 8009f5c:	2b47      	cmp	r3, #71	; 0x47
 8009f5e:	d109      	bne.n	8009f74 <_printf_float+0x150>
 8009f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f62:	1cda      	adds	r2, r3, #3
 8009f64:	db02      	blt.n	8009f6c <_printf_float+0x148>
 8009f66:	6862      	ldr	r2, [r4, #4]
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	dd49      	ble.n	800a000 <_printf_float+0x1dc>
 8009f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f6e:	3b02      	subs	r3, #2
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	930a      	str	r3, [sp, #40]	; 0x28
 8009f74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f76:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009f78:	2b65      	cmp	r3, #101	; 0x65
 8009f7a:	d824      	bhi.n	8009fc6 <_printf_float+0x1a2>
 8009f7c:	0020      	movs	r0, r4
 8009f7e:	001a      	movs	r2, r3
 8009f80:	3901      	subs	r1, #1
 8009f82:	3050      	adds	r0, #80	; 0x50
 8009f84:	9111      	str	r1, [sp, #68]	; 0x44
 8009f86:	f7ff ff08 	bl	8009d9a <__exponent>
 8009f8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f8e:	1813      	adds	r3, r2, r0
 8009f90:	6123      	str	r3, [r4, #16]
 8009f92:	2a01      	cmp	r2, #1
 8009f94:	dc02      	bgt.n	8009f9c <_printf_float+0x178>
 8009f96:	6822      	ldr	r2, [r4, #0]
 8009f98:	07d2      	lsls	r2, r2, #31
 8009f9a:	d501      	bpl.n	8009fa0 <_printf_float+0x17c>
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	6123      	str	r3, [r4, #16]
 8009fa0:	2323      	movs	r3, #35	; 0x23
 8009fa2:	aa08      	add	r2, sp, #32
 8009fa4:	189b      	adds	r3, r3, r2
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d100      	bne.n	8009fae <_printf_float+0x18a>
 8009fac:	e78d      	b.n	8009eca <_printf_float+0xa6>
 8009fae:	0023      	movs	r3, r4
 8009fb0:	222d      	movs	r2, #45	; 0x2d
 8009fb2:	3343      	adds	r3, #67	; 0x43
 8009fb4:	701a      	strb	r2, [r3, #0]
 8009fb6:	e788      	b.n	8009eca <_printf_float+0xa6>
 8009fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fba:	2a47      	cmp	r2, #71	; 0x47
 8009fbc:	d1b3      	bne.n	8009f26 <_printf_float+0x102>
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1b1      	bne.n	8009f26 <_printf_float+0x102>
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	e7ae      	b.n	8009f24 <_printf_float+0x100>
 8009fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc8:	2b66      	cmp	r3, #102	; 0x66
 8009fca:	d11b      	bne.n	800a004 <_printf_float+0x1e0>
 8009fcc:	6863      	ldr	r3, [r4, #4]
 8009fce:	2900      	cmp	r1, #0
 8009fd0:	dd09      	ble.n	8009fe6 <_printf_float+0x1c2>
 8009fd2:	6121      	str	r1, [r4, #16]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d102      	bne.n	8009fde <_printf_float+0x1ba>
 8009fd8:	6822      	ldr	r2, [r4, #0]
 8009fda:	07d2      	lsls	r2, r2, #31
 8009fdc:	d50b      	bpl.n	8009ff6 <_printf_float+0x1d2>
 8009fde:	3301      	adds	r3, #1
 8009fe0:	185b      	adds	r3, r3, r1
 8009fe2:	6123      	str	r3, [r4, #16]
 8009fe4:	e007      	b.n	8009ff6 <_printf_float+0x1d2>
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d103      	bne.n	8009ff2 <_printf_float+0x1ce>
 8009fea:	2201      	movs	r2, #1
 8009fec:	6821      	ldr	r1, [r4, #0]
 8009fee:	4211      	tst	r1, r2
 8009ff0:	d000      	beq.n	8009ff4 <_printf_float+0x1d0>
 8009ff2:	1c9a      	adds	r2, r3, #2
 8009ff4:	6122      	str	r2, [r4, #16]
 8009ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ff8:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ffe:	e7cf      	b.n	8009fa0 <_printf_float+0x17c>
 800a000:	2367      	movs	r3, #103	; 0x67
 800a002:	930a      	str	r3, [sp, #40]	; 0x28
 800a004:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a006:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a008:	4299      	cmp	r1, r3
 800a00a:	db06      	blt.n	800a01a <_printf_float+0x1f6>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	6121      	str	r1, [r4, #16]
 800a010:	07db      	lsls	r3, r3, #31
 800a012:	d5f0      	bpl.n	8009ff6 <_printf_float+0x1d2>
 800a014:	3101      	adds	r1, #1
 800a016:	6121      	str	r1, [r4, #16]
 800a018:	e7ed      	b.n	8009ff6 <_printf_float+0x1d2>
 800a01a:	2201      	movs	r2, #1
 800a01c:	2900      	cmp	r1, #0
 800a01e:	dc01      	bgt.n	800a024 <_printf_float+0x200>
 800a020:	1892      	adds	r2, r2, r2
 800a022:	1a52      	subs	r2, r2, r1
 800a024:	189b      	adds	r3, r3, r2
 800a026:	e7dc      	b.n	8009fe2 <_printf_float+0x1be>
 800a028:	6822      	ldr	r2, [r4, #0]
 800a02a:	0553      	lsls	r3, r2, #21
 800a02c:	d408      	bmi.n	800a040 <_printf_float+0x21c>
 800a02e:	6923      	ldr	r3, [r4, #16]
 800a030:	002a      	movs	r2, r5
 800a032:	0038      	movs	r0, r7
 800a034:	9908      	ldr	r1, [sp, #32]
 800a036:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a038:	47a8      	blx	r5
 800a03a:	3001      	adds	r0, #1
 800a03c:	d12a      	bne.n	800a094 <_printf_float+0x270>
 800a03e:	e74f      	b.n	8009ee0 <_printf_float+0xbc>
 800a040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a042:	2b65      	cmp	r3, #101	; 0x65
 800a044:	d800      	bhi.n	800a048 <_printf_float+0x224>
 800a046:	e0ec      	b.n	800a222 <_printf_float+0x3fe>
 800a048:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a04a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a04c:	2200      	movs	r2, #0
 800a04e:	2300      	movs	r3, #0
 800a050:	f7f6 f9fc 	bl	800044c <__aeabi_dcmpeq>
 800a054:	2800      	cmp	r0, #0
 800a056:	d034      	beq.n	800a0c2 <_printf_float+0x29e>
 800a058:	2301      	movs	r3, #1
 800a05a:	0038      	movs	r0, r7
 800a05c:	4a37      	ldr	r2, [pc, #220]	; (800a13c <_printf_float+0x318>)
 800a05e:	9908      	ldr	r1, [sp, #32]
 800a060:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a062:	47a8      	blx	r5
 800a064:	3001      	adds	r0, #1
 800a066:	d100      	bne.n	800a06a <_printf_float+0x246>
 800a068:	e73a      	b.n	8009ee0 <_printf_float+0xbc>
 800a06a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a06c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a06e:	429a      	cmp	r2, r3
 800a070:	db02      	blt.n	800a078 <_printf_float+0x254>
 800a072:	6823      	ldr	r3, [r4, #0]
 800a074:	07db      	lsls	r3, r3, #31
 800a076:	d50d      	bpl.n	800a094 <_printf_float+0x270>
 800a078:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a07a:	0038      	movs	r0, r7
 800a07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a07e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a080:	9908      	ldr	r1, [sp, #32]
 800a082:	47a8      	blx	r5
 800a084:	2500      	movs	r5, #0
 800a086:	3001      	adds	r0, #1
 800a088:	d100      	bne.n	800a08c <_printf_float+0x268>
 800a08a:	e729      	b.n	8009ee0 <_printf_float+0xbc>
 800a08c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a08e:	3b01      	subs	r3, #1
 800a090:	42ab      	cmp	r3, r5
 800a092:	dc0a      	bgt.n	800a0aa <_printf_float+0x286>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	079b      	lsls	r3, r3, #30
 800a098:	d500      	bpl.n	800a09c <_printf_float+0x278>
 800a09a:	e116      	b.n	800a2ca <_printf_float+0x4a6>
 800a09c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a09e:	68e0      	ldr	r0, [r4, #12]
 800a0a0:	4298      	cmp	r0, r3
 800a0a2:	db00      	blt.n	800a0a6 <_printf_float+0x282>
 800a0a4:	e71e      	b.n	8009ee4 <_printf_float+0xc0>
 800a0a6:	0018      	movs	r0, r3
 800a0a8:	e71c      	b.n	8009ee4 <_printf_float+0xc0>
 800a0aa:	0022      	movs	r2, r4
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	0038      	movs	r0, r7
 800a0b0:	9908      	ldr	r1, [sp, #32]
 800a0b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a0b4:	321a      	adds	r2, #26
 800a0b6:	47b0      	blx	r6
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d100      	bne.n	800a0be <_printf_float+0x29a>
 800a0bc:	e710      	b.n	8009ee0 <_printf_float+0xbc>
 800a0be:	3501      	adds	r5, #1
 800a0c0:	e7e4      	b.n	800a08c <_printf_float+0x268>
 800a0c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dc3b      	bgt.n	800a140 <_printf_float+0x31c>
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	0038      	movs	r0, r7
 800a0cc:	4a1b      	ldr	r2, [pc, #108]	; (800a13c <_printf_float+0x318>)
 800a0ce:	9908      	ldr	r1, [sp, #32]
 800a0d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a0d2:	47b0      	blx	r6
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	d100      	bne.n	800a0da <_printf_float+0x2b6>
 800a0d8:	e702      	b.n	8009ee0 <_printf_float+0xbc>
 800a0da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	d102      	bne.n	800a0e8 <_printf_float+0x2c4>
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	07db      	lsls	r3, r3, #31
 800a0e6:	d5d5      	bpl.n	800a094 <_printf_float+0x270>
 800a0e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0ea:	0038      	movs	r0, r7
 800a0ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0ee:	9908      	ldr	r1, [sp, #32]
 800a0f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a0f2:	47b0      	blx	r6
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	d100      	bne.n	800a0fc <_printf_float+0x2d8>
 800a0fa:	e6f1      	b.n	8009ee0 <_printf_float+0xbc>
 800a0fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a0fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a102:	425b      	negs	r3, r3
 800a104:	4293      	cmp	r3, r2
 800a106:	dc01      	bgt.n	800a10c <_printf_float+0x2e8>
 800a108:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a10a:	e791      	b.n	800a030 <_printf_float+0x20c>
 800a10c:	0022      	movs	r2, r4
 800a10e:	2301      	movs	r3, #1
 800a110:	0038      	movs	r0, r7
 800a112:	9908      	ldr	r1, [sp, #32]
 800a114:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a116:	321a      	adds	r2, #26
 800a118:	47b0      	blx	r6
 800a11a:	3001      	adds	r0, #1
 800a11c:	d100      	bne.n	800a120 <_printf_float+0x2fc>
 800a11e:	e6df      	b.n	8009ee0 <_printf_float+0xbc>
 800a120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a122:	3301      	adds	r3, #1
 800a124:	e7ea      	b.n	800a0fc <_printf_float+0x2d8>
 800a126:	46c0      	nop			; (mov r8, r8)
 800a128:	7fefffff 	.word	0x7fefffff
 800a12c:	0800ec70 	.word	0x0800ec70
 800a130:	0800ec74 	.word	0x0800ec74
 800a134:	0800ec78 	.word	0x0800ec78
 800a138:	0800ec7c 	.word	0x0800ec7c
 800a13c:	0800ec80 	.word	0x0800ec80
 800a140:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a144:	920a      	str	r2, [sp, #40]	; 0x28
 800a146:	429a      	cmp	r2, r3
 800a148:	dd00      	ble.n	800a14c <_printf_float+0x328>
 800a14a:	930a      	str	r3, [sp, #40]	; 0x28
 800a14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a14e:	2b00      	cmp	r3, #0
 800a150:	dc3d      	bgt.n	800a1ce <_printf_float+0x3aa>
 800a152:	2300      	movs	r3, #0
 800a154:	930e      	str	r3, [sp, #56]	; 0x38
 800a156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a158:	43db      	mvns	r3, r3
 800a15a:	17db      	asrs	r3, r3, #31
 800a15c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a15e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a162:	930b      	str	r3, [sp, #44]	; 0x2c
 800a164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a166:	4013      	ands	r3, r2
 800a168:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a16e:	4293      	cmp	r3, r2
 800a170:	dc36      	bgt.n	800a1e0 <_printf_float+0x3bc>
 800a172:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a174:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a176:	429a      	cmp	r2, r3
 800a178:	db40      	blt.n	800a1fc <_printf_float+0x3d8>
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	07db      	lsls	r3, r3, #31
 800a17e:	d43d      	bmi.n	800a1fc <_printf_float+0x3d8>
 800a180:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a182:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a186:	1af3      	subs	r3, r6, r3
 800a188:	1ab6      	subs	r6, r6, r2
 800a18a:	429e      	cmp	r6, r3
 800a18c:	dd00      	ble.n	800a190 <_printf_float+0x36c>
 800a18e:	001e      	movs	r6, r3
 800a190:	2e00      	cmp	r6, #0
 800a192:	dc3c      	bgt.n	800a20e <_printf_float+0x3ea>
 800a194:	2300      	movs	r3, #0
 800a196:	930a      	str	r3, [sp, #40]	; 0x28
 800a198:	43f3      	mvns	r3, r6
 800a19a:	17db      	asrs	r3, r3, #31
 800a19c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a19e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a1a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1a2:	1a9b      	subs	r3, r3, r2
 800a1a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1a6:	4032      	ands	r2, r6
 800a1a8:	1a9b      	subs	r3, r3, r2
 800a1aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	dc00      	bgt.n	800a1b2 <_printf_float+0x38e>
 800a1b0:	e770      	b.n	800a094 <_printf_float+0x270>
 800a1b2:	0022      	movs	r2, r4
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	0038      	movs	r0, r7
 800a1b8:	9908      	ldr	r1, [sp, #32]
 800a1ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a1bc:	321a      	adds	r2, #26
 800a1be:	47a8      	blx	r5
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d100      	bne.n	800a1c6 <_printf_float+0x3a2>
 800a1c4:	e68c      	b.n	8009ee0 <_printf_float+0xbc>
 800a1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a1cc:	e7e7      	b.n	800a19e <_printf_float+0x37a>
 800a1ce:	002a      	movs	r2, r5
 800a1d0:	0038      	movs	r0, r7
 800a1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d4:	9908      	ldr	r1, [sp, #32]
 800a1d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1d8:	47b0      	blx	r6
 800a1da:	3001      	adds	r0, #1
 800a1dc:	d1b9      	bne.n	800a152 <_printf_float+0x32e>
 800a1de:	e67f      	b.n	8009ee0 <_printf_float+0xbc>
 800a1e0:	0022      	movs	r2, r4
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	0038      	movs	r0, r7
 800a1e6:	9908      	ldr	r1, [sp, #32]
 800a1e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1ea:	321a      	adds	r2, #26
 800a1ec:	47b0      	blx	r6
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	d100      	bne.n	800a1f4 <_printf_float+0x3d0>
 800a1f2:	e675      	b.n	8009ee0 <_printf_float+0xbc>
 800a1f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	930e      	str	r3, [sp, #56]	; 0x38
 800a1fa:	e7b0      	b.n	800a15e <_printf_float+0x33a>
 800a1fc:	0038      	movs	r0, r7
 800a1fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a200:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a202:	9908      	ldr	r1, [sp, #32]
 800a204:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a206:	47b0      	blx	r6
 800a208:	3001      	adds	r0, #1
 800a20a:	d1b9      	bne.n	800a180 <_printf_float+0x35c>
 800a20c:	e668      	b.n	8009ee0 <_printf_float+0xbc>
 800a20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a210:	0038      	movs	r0, r7
 800a212:	18ea      	adds	r2, r5, r3
 800a214:	9908      	ldr	r1, [sp, #32]
 800a216:	0033      	movs	r3, r6
 800a218:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a21a:	47a8      	blx	r5
 800a21c:	3001      	adds	r0, #1
 800a21e:	d1b9      	bne.n	800a194 <_printf_float+0x370>
 800a220:	e65e      	b.n	8009ee0 <_printf_float+0xbc>
 800a222:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a224:	2b01      	cmp	r3, #1
 800a226:	dc02      	bgt.n	800a22e <_printf_float+0x40a>
 800a228:	2301      	movs	r3, #1
 800a22a:	421a      	tst	r2, r3
 800a22c:	d03a      	beq.n	800a2a4 <_printf_float+0x480>
 800a22e:	2301      	movs	r3, #1
 800a230:	002a      	movs	r2, r5
 800a232:	0038      	movs	r0, r7
 800a234:	9908      	ldr	r1, [sp, #32]
 800a236:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a238:	47b0      	blx	r6
 800a23a:	3001      	adds	r0, #1
 800a23c:	d100      	bne.n	800a240 <_printf_float+0x41c>
 800a23e:	e64f      	b.n	8009ee0 <_printf_float+0xbc>
 800a240:	0038      	movs	r0, r7
 800a242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a246:	9908      	ldr	r1, [sp, #32]
 800a248:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a24a:	47b0      	blx	r6
 800a24c:	3001      	adds	r0, #1
 800a24e:	d100      	bne.n	800a252 <_printf_float+0x42e>
 800a250:	e646      	b.n	8009ee0 <_printf_float+0xbc>
 800a252:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a254:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a256:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a258:	2200      	movs	r2, #0
 800a25a:	001e      	movs	r6, r3
 800a25c:	2300      	movs	r3, #0
 800a25e:	f7f6 f8f5 	bl	800044c <__aeabi_dcmpeq>
 800a262:	2800      	cmp	r0, #0
 800a264:	d11c      	bne.n	800a2a0 <_printf_float+0x47c>
 800a266:	0033      	movs	r3, r6
 800a268:	1c6a      	adds	r2, r5, #1
 800a26a:	3b01      	subs	r3, #1
 800a26c:	0038      	movs	r0, r7
 800a26e:	9908      	ldr	r1, [sp, #32]
 800a270:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a272:	47a8      	blx	r5
 800a274:	3001      	adds	r0, #1
 800a276:	d10f      	bne.n	800a298 <_printf_float+0x474>
 800a278:	e632      	b.n	8009ee0 <_printf_float+0xbc>
 800a27a:	0022      	movs	r2, r4
 800a27c:	2301      	movs	r3, #1
 800a27e:	0038      	movs	r0, r7
 800a280:	9908      	ldr	r1, [sp, #32]
 800a282:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a284:	321a      	adds	r2, #26
 800a286:	47b0      	blx	r6
 800a288:	3001      	adds	r0, #1
 800a28a:	d100      	bne.n	800a28e <_printf_float+0x46a>
 800a28c:	e628      	b.n	8009ee0 <_printf_float+0xbc>
 800a28e:	3501      	adds	r5, #1
 800a290:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a292:	3b01      	subs	r3, #1
 800a294:	42ab      	cmp	r3, r5
 800a296:	dcf0      	bgt.n	800a27a <_printf_float+0x456>
 800a298:	0022      	movs	r2, r4
 800a29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a29c:	3250      	adds	r2, #80	; 0x50
 800a29e:	e6c8      	b.n	800a032 <_printf_float+0x20e>
 800a2a0:	2500      	movs	r5, #0
 800a2a2:	e7f5      	b.n	800a290 <_printf_float+0x46c>
 800a2a4:	002a      	movs	r2, r5
 800a2a6:	e7e1      	b.n	800a26c <_printf_float+0x448>
 800a2a8:	0022      	movs	r2, r4
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	0038      	movs	r0, r7
 800a2ae:	9908      	ldr	r1, [sp, #32]
 800a2b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2b2:	3219      	adds	r2, #25
 800a2b4:	47b0      	blx	r6
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	d100      	bne.n	800a2bc <_printf_float+0x498>
 800a2ba:	e611      	b.n	8009ee0 <_printf_float+0xbc>
 800a2bc:	3501      	adds	r5, #1
 800a2be:	68e3      	ldr	r3, [r4, #12]
 800a2c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2c2:	1a9b      	subs	r3, r3, r2
 800a2c4:	42ab      	cmp	r3, r5
 800a2c6:	dcef      	bgt.n	800a2a8 <_printf_float+0x484>
 800a2c8:	e6e8      	b.n	800a09c <_printf_float+0x278>
 800a2ca:	2500      	movs	r5, #0
 800a2cc:	e7f7      	b.n	800a2be <_printf_float+0x49a>
 800a2ce:	46c0      	nop			; (mov r8, r8)

0800a2d0 <_printf_common>:
 800a2d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2d2:	0016      	movs	r6, r2
 800a2d4:	9301      	str	r3, [sp, #4]
 800a2d6:	688a      	ldr	r2, [r1, #8]
 800a2d8:	690b      	ldr	r3, [r1, #16]
 800a2da:	000c      	movs	r4, r1
 800a2dc:	9000      	str	r0, [sp, #0]
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	da00      	bge.n	800a2e4 <_printf_common+0x14>
 800a2e2:	0013      	movs	r3, r2
 800a2e4:	0022      	movs	r2, r4
 800a2e6:	6033      	str	r3, [r6, #0]
 800a2e8:	3243      	adds	r2, #67	; 0x43
 800a2ea:	7812      	ldrb	r2, [r2, #0]
 800a2ec:	2a00      	cmp	r2, #0
 800a2ee:	d001      	beq.n	800a2f4 <_printf_common+0x24>
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	6033      	str	r3, [r6, #0]
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	069b      	lsls	r3, r3, #26
 800a2f8:	d502      	bpl.n	800a300 <_printf_common+0x30>
 800a2fa:	6833      	ldr	r3, [r6, #0]
 800a2fc:	3302      	adds	r3, #2
 800a2fe:	6033      	str	r3, [r6, #0]
 800a300:	6822      	ldr	r2, [r4, #0]
 800a302:	2306      	movs	r3, #6
 800a304:	0015      	movs	r5, r2
 800a306:	401d      	ands	r5, r3
 800a308:	421a      	tst	r2, r3
 800a30a:	d027      	beq.n	800a35c <_printf_common+0x8c>
 800a30c:	0023      	movs	r3, r4
 800a30e:	3343      	adds	r3, #67	; 0x43
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	1e5a      	subs	r2, r3, #1
 800a314:	4193      	sbcs	r3, r2
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	0692      	lsls	r2, r2, #26
 800a31a:	d430      	bmi.n	800a37e <_printf_common+0xae>
 800a31c:	0022      	movs	r2, r4
 800a31e:	9901      	ldr	r1, [sp, #4]
 800a320:	9800      	ldr	r0, [sp, #0]
 800a322:	9d08      	ldr	r5, [sp, #32]
 800a324:	3243      	adds	r2, #67	; 0x43
 800a326:	47a8      	blx	r5
 800a328:	3001      	adds	r0, #1
 800a32a:	d025      	beq.n	800a378 <_printf_common+0xa8>
 800a32c:	2206      	movs	r2, #6
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	2500      	movs	r5, #0
 800a332:	4013      	ands	r3, r2
 800a334:	2b04      	cmp	r3, #4
 800a336:	d105      	bne.n	800a344 <_printf_common+0x74>
 800a338:	6833      	ldr	r3, [r6, #0]
 800a33a:	68e5      	ldr	r5, [r4, #12]
 800a33c:	1aed      	subs	r5, r5, r3
 800a33e:	43eb      	mvns	r3, r5
 800a340:	17db      	asrs	r3, r3, #31
 800a342:	401d      	ands	r5, r3
 800a344:	68a3      	ldr	r3, [r4, #8]
 800a346:	6922      	ldr	r2, [r4, #16]
 800a348:	4293      	cmp	r3, r2
 800a34a:	dd01      	ble.n	800a350 <_printf_common+0x80>
 800a34c:	1a9b      	subs	r3, r3, r2
 800a34e:	18ed      	adds	r5, r5, r3
 800a350:	2600      	movs	r6, #0
 800a352:	42b5      	cmp	r5, r6
 800a354:	d120      	bne.n	800a398 <_printf_common+0xc8>
 800a356:	2000      	movs	r0, #0
 800a358:	e010      	b.n	800a37c <_printf_common+0xac>
 800a35a:	3501      	adds	r5, #1
 800a35c:	68e3      	ldr	r3, [r4, #12]
 800a35e:	6832      	ldr	r2, [r6, #0]
 800a360:	1a9b      	subs	r3, r3, r2
 800a362:	42ab      	cmp	r3, r5
 800a364:	ddd2      	ble.n	800a30c <_printf_common+0x3c>
 800a366:	0022      	movs	r2, r4
 800a368:	2301      	movs	r3, #1
 800a36a:	9901      	ldr	r1, [sp, #4]
 800a36c:	9800      	ldr	r0, [sp, #0]
 800a36e:	9f08      	ldr	r7, [sp, #32]
 800a370:	3219      	adds	r2, #25
 800a372:	47b8      	blx	r7
 800a374:	3001      	adds	r0, #1
 800a376:	d1f0      	bne.n	800a35a <_printf_common+0x8a>
 800a378:	2001      	movs	r0, #1
 800a37a:	4240      	negs	r0, r0
 800a37c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a37e:	2030      	movs	r0, #48	; 0x30
 800a380:	18e1      	adds	r1, r4, r3
 800a382:	3143      	adds	r1, #67	; 0x43
 800a384:	7008      	strb	r0, [r1, #0]
 800a386:	0021      	movs	r1, r4
 800a388:	1c5a      	adds	r2, r3, #1
 800a38a:	3145      	adds	r1, #69	; 0x45
 800a38c:	7809      	ldrb	r1, [r1, #0]
 800a38e:	18a2      	adds	r2, r4, r2
 800a390:	3243      	adds	r2, #67	; 0x43
 800a392:	3302      	adds	r3, #2
 800a394:	7011      	strb	r1, [r2, #0]
 800a396:	e7c1      	b.n	800a31c <_printf_common+0x4c>
 800a398:	0022      	movs	r2, r4
 800a39a:	2301      	movs	r3, #1
 800a39c:	9901      	ldr	r1, [sp, #4]
 800a39e:	9800      	ldr	r0, [sp, #0]
 800a3a0:	9f08      	ldr	r7, [sp, #32]
 800a3a2:	321a      	adds	r2, #26
 800a3a4:	47b8      	blx	r7
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d0e6      	beq.n	800a378 <_printf_common+0xa8>
 800a3aa:	3601      	adds	r6, #1
 800a3ac:	e7d1      	b.n	800a352 <_printf_common+0x82>
	...

0800a3b0 <_printf_i>:
 800a3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3b2:	b08b      	sub	sp, #44	; 0x2c
 800a3b4:	9206      	str	r2, [sp, #24]
 800a3b6:	000a      	movs	r2, r1
 800a3b8:	3243      	adds	r2, #67	; 0x43
 800a3ba:	9307      	str	r3, [sp, #28]
 800a3bc:	9005      	str	r0, [sp, #20]
 800a3be:	9204      	str	r2, [sp, #16]
 800a3c0:	7e0a      	ldrb	r2, [r1, #24]
 800a3c2:	000c      	movs	r4, r1
 800a3c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3c6:	2a78      	cmp	r2, #120	; 0x78
 800a3c8:	d809      	bhi.n	800a3de <_printf_i+0x2e>
 800a3ca:	2a62      	cmp	r2, #98	; 0x62
 800a3cc:	d80b      	bhi.n	800a3e6 <_printf_i+0x36>
 800a3ce:	2a00      	cmp	r2, #0
 800a3d0:	d100      	bne.n	800a3d4 <_printf_i+0x24>
 800a3d2:	e0be      	b.n	800a552 <_printf_i+0x1a2>
 800a3d4:	497c      	ldr	r1, [pc, #496]	; (800a5c8 <_printf_i+0x218>)
 800a3d6:	9103      	str	r1, [sp, #12]
 800a3d8:	2a58      	cmp	r2, #88	; 0x58
 800a3da:	d100      	bne.n	800a3de <_printf_i+0x2e>
 800a3dc:	e093      	b.n	800a506 <_printf_i+0x156>
 800a3de:	0026      	movs	r6, r4
 800a3e0:	3642      	adds	r6, #66	; 0x42
 800a3e2:	7032      	strb	r2, [r6, #0]
 800a3e4:	e022      	b.n	800a42c <_printf_i+0x7c>
 800a3e6:	0010      	movs	r0, r2
 800a3e8:	3863      	subs	r0, #99	; 0x63
 800a3ea:	2815      	cmp	r0, #21
 800a3ec:	d8f7      	bhi.n	800a3de <_printf_i+0x2e>
 800a3ee:	f7f5 fe9d 	bl	800012c <__gnu_thumb1_case_shi>
 800a3f2:	0016      	.short	0x0016
 800a3f4:	fff6001f 	.word	0xfff6001f
 800a3f8:	fff6fff6 	.word	0xfff6fff6
 800a3fc:	001ffff6 	.word	0x001ffff6
 800a400:	fff6fff6 	.word	0xfff6fff6
 800a404:	fff6fff6 	.word	0xfff6fff6
 800a408:	003600a3 	.word	0x003600a3
 800a40c:	fff60083 	.word	0xfff60083
 800a410:	00b4fff6 	.word	0x00b4fff6
 800a414:	0036fff6 	.word	0x0036fff6
 800a418:	fff6fff6 	.word	0xfff6fff6
 800a41c:	0087      	.short	0x0087
 800a41e:	0026      	movs	r6, r4
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	3642      	adds	r6, #66	; 0x42
 800a424:	1d11      	adds	r1, r2, #4
 800a426:	6019      	str	r1, [r3, #0]
 800a428:	6813      	ldr	r3, [r2, #0]
 800a42a:	7033      	strb	r3, [r6, #0]
 800a42c:	2301      	movs	r3, #1
 800a42e:	e0a2      	b.n	800a576 <_printf_i+0x1c6>
 800a430:	6818      	ldr	r0, [r3, #0]
 800a432:	6809      	ldr	r1, [r1, #0]
 800a434:	1d02      	adds	r2, r0, #4
 800a436:	060d      	lsls	r5, r1, #24
 800a438:	d50b      	bpl.n	800a452 <_printf_i+0xa2>
 800a43a:	6805      	ldr	r5, [r0, #0]
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	2d00      	cmp	r5, #0
 800a440:	da03      	bge.n	800a44a <_printf_i+0x9a>
 800a442:	232d      	movs	r3, #45	; 0x2d
 800a444:	9a04      	ldr	r2, [sp, #16]
 800a446:	426d      	negs	r5, r5
 800a448:	7013      	strb	r3, [r2, #0]
 800a44a:	4b5f      	ldr	r3, [pc, #380]	; (800a5c8 <_printf_i+0x218>)
 800a44c:	270a      	movs	r7, #10
 800a44e:	9303      	str	r3, [sp, #12]
 800a450:	e01b      	b.n	800a48a <_printf_i+0xda>
 800a452:	6805      	ldr	r5, [r0, #0]
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	0649      	lsls	r1, r1, #25
 800a458:	d5f1      	bpl.n	800a43e <_printf_i+0x8e>
 800a45a:	b22d      	sxth	r5, r5
 800a45c:	e7ef      	b.n	800a43e <_printf_i+0x8e>
 800a45e:	680d      	ldr	r5, [r1, #0]
 800a460:	6819      	ldr	r1, [r3, #0]
 800a462:	1d08      	adds	r0, r1, #4
 800a464:	6018      	str	r0, [r3, #0]
 800a466:	062e      	lsls	r6, r5, #24
 800a468:	d501      	bpl.n	800a46e <_printf_i+0xbe>
 800a46a:	680d      	ldr	r5, [r1, #0]
 800a46c:	e003      	b.n	800a476 <_printf_i+0xc6>
 800a46e:	066d      	lsls	r5, r5, #25
 800a470:	d5fb      	bpl.n	800a46a <_printf_i+0xba>
 800a472:	680d      	ldr	r5, [r1, #0]
 800a474:	b2ad      	uxth	r5, r5
 800a476:	4b54      	ldr	r3, [pc, #336]	; (800a5c8 <_printf_i+0x218>)
 800a478:	2708      	movs	r7, #8
 800a47a:	9303      	str	r3, [sp, #12]
 800a47c:	2a6f      	cmp	r2, #111	; 0x6f
 800a47e:	d000      	beq.n	800a482 <_printf_i+0xd2>
 800a480:	3702      	adds	r7, #2
 800a482:	0023      	movs	r3, r4
 800a484:	2200      	movs	r2, #0
 800a486:	3343      	adds	r3, #67	; 0x43
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	6863      	ldr	r3, [r4, #4]
 800a48c:	60a3      	str	r3, [r4, #8]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	db03      	blt.n	800a49a <_printf_i+0xea>
 800a492:	2104      	movs	r1, #4
 800a494:	6822      	ldr	r2, [r4, #0]
 800a496:	438a      	bics	r2, r1
 800a498:	6022      	str	r2, [r4, #0]
 800a49a:	2d00      	cmp	r5, #0
 800a49c:	d102      	bne.n	800a4a4 <_printf_i+0xf4>
 800a49e:	9e04      	ldr	r6, [sp, #16]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00c      	beq.n	800a4be <_printf_i+0x10e>
 800a4a4:	9e04      	ldr	r6, [sp, #16]
 800a4a6:	0028      	movs	r0, r5
 800a4a8:	0039      	movs	r1, r7
 800a4aa:	f7f5 fecf 	bl	800024c <__aeabi_uidivmod>
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	3e01      	subs	r6, #1
 800a4b2:	5c5b      	ldrb	r3, [r3, r1]
 800a4b4:	7033      	strb	r3, [r6, #0]
 800a4b6:	002b      	movs	r3, r5
 800a4b8:	0005      	movs	r5, r0
 800a4ba:	429f      	cmp	r7, r3
 800a4bc:	d9f3      	bls.n	800a4a6 <_printf_i+0xf6>
 800a4be:	2f08      	cmp	r7, #8
 800a4c0:	d109      	bne.n	800a4d6 <_printf_i+0x126>
 800a4c2:	6823      	ldr	r3, [r4, #0]
 800a4c4:	07db      	lsls	r3, r3, #31
 800a4c6:	d506      	bpl.n	800a4d6 <_printf_i+0x126>
 800a4c8:	6862      	ldr	r2, [r4, #4]
 800a4ca:	6923      	ldr	r3, [r4, #16]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	dc02      	bgt.n	800a4d6 <_printf_i+0x126>
 800a4d0:	2330      	movs	r3, #48	; 0x30
 800a4d2:	3e01      	subs	r6, #1
 800a4d4:	7033      	strb	r3, [r6, #0]
 800a4d6:	9b04      	ldr	r3, [sp, #16]
 800a4d8:	1b9b      	subs	r3, r3, r6
 800a4da:	6123      	str	r3, [r4, #16]
 800a4dc:	9b07      	ldr	r3, [sp, #28]
 800a4de:	0021      	movs	r1, r4
 800a4e0:	9300      	str	r3, [sp, #0]
 800a4e2:	9805      	ldr	r0, [sp, #20]
 800a4e4:	9b06      	ldr	r3, [sp, #24]
 800a4e6:	aa09      	add	r2, sp, #36	; 0x24
 800a4e8:	f7ff fef2 	bl	800a2d0 <_printf_common>
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d147      	bne.n	800a580 <_printf_i+0x1d0>
 800a4f0:	2001      	movs	r0, #1
 800a4f2:	4240      	negs	r0, r0
 800a4f4:	b00b      	add	sp, #44	; 0x2c
 800a4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	6809      	ldr	r1, [r1, #0]
 800a4fc:	430a      	orrs	r2, r1
 800a4fe:	6022      	str	r2, [r4, #0]
 800a500:	2278      	movs	r2, #120	; 0x78
 800a502:	4932      	ldr	r1, [pc, #200]	; (800a5cc <_printf_i+0x21c>)
 800a504:	9103      	str	r1, [sp, #12]
 800a506:	0021      	movs	r1, r4
 800a508:	3145      	adds	r1, #69	; 0x45
 800a50a:	700a      	strb	r2, [r1, #0]
 800a50c:	6819      	ldr	r1, [r3, #0]
 800a50e:	6822      	ldr	r2, [r4, #0]
 800a510:	c920      	ldmia	r1!, {r5}
 800a512:	0610      	lsls	r0, r2, #24
 800a514:	d402      	bmi.n	800a51c <_printf_i+0x16c>
 800a516:	0650      	lsls	r0, r2, #25
 800a518:	d500      	bpl.n	800a51c <_printf_i+0x16c>
 800a51a:	b2ad      	uxth	r5, r5
 800a51c:	6019      	str	r1, [r3, #0]
 800a51e:	07d3      	lsls	r3, r2, #31
 800a520:	d502      	bpl.n	800a528 <_printf_i+0x178>
 800a522:	2320      	movs	r3, #32
 800a524:	4313      	orrs	r3, r2
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	2710      	movs	r7, #16
 800a52a:	2d00      	cmp	r5, #0
 800a52c:	d1a9      	bne.n	800a482 <_printf_i+0xd2>
 800a52e:	2220      	movs	r2, #32
 800a530:	6823      	ldr	r3, [r4, #0]
 800a532:	4393      	bics	r3, r2
 800a534:	6023      	str	r3, [r4, #0]
 800a536:	e7a4      	b.n	800a482 <_printf_i+0xd2>
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	680d      	ldr	r5, [r1, #0]
 800a53c:	1d10      	adds	r0, r2, #4
 800a53e:	6949      	ldr	r1, [r1, #20]
 800a540:	6018      	str	r0, [r3, #0]
 800a542:	6813      	ldr	r3, [r2, #0]
 800a544:	062e      	lsls	r6, r5, #24
 800a546:	d501      	bpl.n	800a54c <_printf_i+0x19c>
 800a548:	6019      	str	r1, [r3, #0]
 800a54a:	e002      	b.n	800a552 <_printf_i+0x1a2>
 800a54c:	066d      	lsls	r5, r5, #25
 800a54e:	d5fb      	bpl.n	800a548 <_printf_i+0x198>
 800a550:	8019      	strh	r1, [r3, #0]
 800a552:	2300      	movs	r3, #0
 800a554:	9e04      	ldr	r6, [sp, #16]
 800a556:	6123      	str	r3, [r4, #16]
 800a558:	e7c0      	b.n	800a4dc <_printf_i+0x12c>
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	1d11      	adds	r1, r2, #4
 800a55e:	6019      	str	r1, [r3, #0]
 800a560:	6816      	ldr	r6, [r2, #0]
 800a562:	2100      	movs	r1, #0
 800a564:	0030      	movs	r0, r6
 800a566:	6862      	ldr	r2, [r4, #4]
 800a568:	f000 fc25 	bl	800adb6 <memchr>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d001      	beq.n	800a574 <_printf_i+0x1c4>
 800a570:	1b80      	subs	r0, r0, r6
 800a572:	6060      	str	r0, [r4, #4]
 800a574:	6863      	ldr	r3, [r4, #4]
 800a576:	6123      	str	r3, [r4, #16]
 800a578:	2300      	movs	r3, #0
 800a57a:	9a04      	ldr	r2, [sp, #16]
 800a57c:	7013      	strb	r3, [r2, #0]
 800a57e:	e7ad      	b.n	800a4dc <_printf_i+0x12c>
 800a580:	0032      	movs	r2, r6
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	9906      	ldr	r1, [sp, #24]
 800a586:	9805      	ldr	r0, [sp, #20]
 800a588:	9d07      	ldr	r5, [sp, #28]
 800a58a:	47a8      	blx	r5
 800a58c:	3001      	adds	r0, #1
 800a58e:	d0af      	beq.n	800a4f0 <_printf_i+0x140>
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	079b      	lsls	r3, r3, #30
 800a594:	d415      	bmi.n	800a5c2 <_printf_i+0x212>
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	68e0      	ldr	r0, [r4, #12]
 800a59a:	4298      	cmp	r0, r3
 800a59c:	daaa      	bge.n	800a4f4 <_printf_i+0x144>
 800a59e:	0018      	movs	r0, r3
 800a5a0:	e7a8      	b.n	800a4f4 <_printf_i+0x144>
 800a5a2:	0022      	movs	r2, r4
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	9906      	ldr	r1, [sp, #24]
 800a5a8:	9805      	ldr	r0, [sp, #20]
 800a5aa:	9e07      	ldr	r6, [sp, #28]
 800a5ac:	3219      	adds	r2, #25
 800a5ae:	47b0      	blx	r6
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d09d      	beq.n	800a4f0 <_printf_i+0x140>
 800a5b4:	3501      	adds	r5, #1
 800a5b6:	68e3      	ldr	r3, [r4, #12]
 800a5b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ba:	1a9b      	subs	r3, r3, r2
 800a5bc:	42ab      	cmp	r3, r5
 800a5be:	dcf0      	bgt.n	800a5a2 <_printf_i+0x1f2>
 800a5c0:	e7e9      	b.n	800a596 <_printf_i+0x1e6>
 800a5c2:	2500      	movs	r5, #0
 800a5c4:	e7f7      	b.n	800a5b6 <_printf_i+0x206>
 800a5c6:	46c0      	nop			; (mov r8, r8)
 800a5c8:	0800ec82 	.word	0x0800ec82
 800a5cc:	0800ec93 	.word	0x0800ec93

0800a5d0 <_scanf_float>:
 800a5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5d2:	b08b      	sub	sp, #44	; 0x2c
 800a5d4:	0016      	movs	r6, r2
 800a5d6:	9002      	str	r0, [sp, #8]
 800a5d8:	22ae      	movs	r2, #174	; 0xae
 800a5da:	2000      	movs	r0, #0
 800a5dc:	9307      	str	r3, [sp, #28]
 800a5de:	688b      	ldr	r3, [r1, #8]
 800a5e0:	000f      	movs	r7, r1
 800a5e2:	1e59      	subs	r1, r3, #1
 800a5e4:	0052      	lsls	r2, r2, #1
 800a5e6:	9006      	str	r0, [sp, #24]
 800a5e8:	4291      	cmp	r1, r2
 800a5ea:	d905      	bls.n	800a5f8 <_scanf_float+0x28>
 800a5ec:	3b5e      	subs	r3, #94	; 0x5e
 800a5ee:	3bff      	subs	r3, #255	; 0xff
 800a5f0:	9306      	str	r3, [sp, #24]
 800a5f2:	235e      	movs	r3, #94	; 0x5e
 800a5f4:	33ff      	adds	r3, #255	; 0xff
 800a5f6:	60bb      	str	r3, [r7, #8]
 800a5f8:	23f0      	movs	r3, #240	; 0xf0
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	4313      	orrs	r3, r2
 800a600:	603b      	str	r3, [r7, #0]
 800a602:	003b      	movs	r3, r7
 800a604:	2400      	movs	r4, #0
 800a606:	331c      	adds	r3, #28
 800a608:	001d      	movs	r5, r3
 800a60a:	9304      	str	r3, [sp, #16]
 800a60c:	9403      	str	r4, [sp, #12]
 800a60e:	9409      	str	r4, [sp, #36]	; 0x24
 800a610:	9408      	str	r4, [sp, #32]
 800a612:	9401      	str	r4, [sp, #4]
 800a614:	9405      	str	r4, [sp, #20]
 800a616:	68ba      	ldr	r2, [r7, #8]
 800a618:	2a00      	cmp	r2, #0
 800a61a:	d00a      	beq.n	800a632 <_scanf_float+0x62>
 800a61c:	6833      	ldr	r3, [r6, #0]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	2b4e      	cmp	r3, #78	; 0x4e
 800a622:	d844      	bhi.n	800a6ae <_scanf_float+0xde>
 800a624:	0018      	movs	r0, r3
 800a626:	2b40      	cmp	r3, #64	; 0x40
 800a628:	d82c      	bhi.n	800a684 <_scanf_float+0xb4>
 800a62a:	382b      	subs	r0, #43	; 0x2b
 800a62c:	b2c1      	uxtb	r1, r0
 800a62e:	290e      	cmp	r1, #14
 800a630:	d92a      	bls.n	800a688 <_scanf_float+0xb8>
 800a632:	9b01      	ldr	r3, [sp, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d003      	beq.n	800a640 <_scanf_float+0x70>
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	4aa3      	ldr	r2, [pc, #652]	; (800a8c8 <_scanf_float+0x2f8>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	603b      	str	r3, [r7, #0]
 800a640:	9b03      	ldr	r3, [sp, #12]
 800a642:	3b01      	subs	r3, #1
 800a644:	2b01      	cmp	r3, #1
 800a646:	d900      	bls.n	800a64a <_scanf_float+0x7a>
 800a648:	e0f9      	b.n	800a83e <_scanf_float+0x26e>
 800a64a:	24be      	movs	r4, #190	; 0xbe
 800a64c:	0064      	lsls	r4, r4, #1
 800a64e:	9b04      	ldr	r3, [sp, #16]
 800a650:	429d      	cmp	r5, r3
 800a652:	d900      	bls.n	800a656 <_scanf_float+0x86>
 800a654:	e0e9      	b.n	800a82a <_scanf_float+0x25a>
 800a656:	2301      	movs	r3, #1
 800a658:	9303      	str	r3, [sp, #12]
 800a65a:	e183      	b.n	800a964 <_scanf_float+0x394>
 800a65c:	0018      	movs	r0, r3
 800a65e:	3861      	subs	r0, #97	; 0x61
 800a660:	280d      	cmp	r0, #13
 800a662:	d8e6      	bhi.n	800a632 <_scanf_float+0x62>
 800a664:	f7f5 fd62 	bl	800012c <__gnu_thumb1_case_shi>
 800a668:	ffe50083 	.word	0xffe50083
 800a66c:	ffe5ffe5 	.word	0xffe5ffe5
 800a670:	00a200b6 	.word	0x00a200b6
 800a674:	ffe5ffe5 	.word	0xffe5ffe5
 800a678:	ffe50089 	.word	0xffe50089
 800a67c:	ffe5ffe5 	.word	0xffe5ffe5
 800a680:	0065ffe5 	.word	0x0065ffe5
 800a684:	3841      	subs	r0, #65	; 0x41
 800a686:	e7eb      	b.n	800a660 <_scanf_float+0x90>
 800a688:	280e      	cmp	r0, #14
 800a68a:	d8d2      	bhi.n	800a632 <_scanf_float+0x62>
 800a68c:	f7f5 fd4e 	bl	800012c <__gnu_thumb1_case_shi>
 800a690:	ffd1004b 	.word	0xffd1004b
 800a694:	0098004b 	.word	0x0098004b
 800a698:	0020ffd1 	.word	0x0020ffd1
 800a69c:	00400040 	.word	0x00400040
 800a6a0:	00400040 	.word	0x00400040
 800a6a4:	00400040 	.word	0x00400040
 800a6a8:	00400040 	.word	0x00400040
 800a6ac:	0040      	.short	0x0040
 800a6ae:	2b6e      	cmp	r3, #110	; 0x6e
 800a6b0:	d809      	bhi.n	800a6c6 <_scanf_float+0xf6>
 800a6b2:	2b60      	cmp	r3, #96	; 0x60
 800a6b4:	d8d2      	bhi.n	800a65c <_scanf_float+0x8c>
 800a6b6:	2b54      	cmp	r3, #84	; 0x54
 800a6b8:	d07d      	beq.n	800a7b6 <_scanf_float+0x1e6>
 800a6ba:	2b59      	cmp	r3, #89	; 0x59
 800a6bc:	d1b9      	bne.n	800a632 <_scanf_float+0x62>
 800a6be:	2c07      	cmp	r4, #7
 800a6c0:	d1b7      	bne.n	800a632 <_scanf_float+0x62>
 800a6c2:	2408      	movs	r4, #8
 800a6c4:	e02c      	b.n	800a720 <_scanf_float+0x150>
 800a6c6:	2b74      	cmp	r3, #116	; 0x74
 800a6c8:	d075      	beq.n	800a7b6 <_scanf_float+0x1e6>
 800a6ca:	2b79      	cmp	r3, #121	; 0x79
 800a6cc:	d0f7      	beq.n	800a6be <_scanf_float+0xee>
 800a6ce:	e7b0      	b.n	800a632 <_scanf_float+0x62>
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	05c8      	lsls	r0, r1, #23
 800a6d4:	d51c      	bpl.n	800a710 <_scanf_float+0x140>
 800a6d6:	2380      	movs	r3, #128	; 0x80
 800a6d8:	4399      	bics	r1, r3
 800a6da:	9b01      	ldr	r3, [sp, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	9301      	str	r3, [sp, #4]
 800a6e2:	9b06      	ldr	r3, [sp, #24]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d003      	beq.n	800a6f0 <_scanf_float+0x120>
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	3201      	adds	r2, #1
 800a6ec:	9306      	str	r3, [sp, #24]
 800a6ee:	60ba      	str	r2, [r7, #8]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	60bb      	str	r3, [r7, #8]
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	613b      	str	r3, [r7, #16]
 800a6fc:	6873      	ldr	r3, [r6, #4]
 800a6fe:	3b01      	subs	r3, #1
 800a700:	6073      	str	r3, [r6, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dc00      	bgt.n	800a708 <_scanf_float+0x138>
 800a706:	e086      	b.n	800a816 <_scanf_float+0x246>
 800a708:	6833      	ldr	r3, [r6, #0]
 800a70a:	3301      	adds	r3, #1
 800a70c:	6033      	str	r3, [r6, #0]
 800a70e:	e782      	b.n	800a616 <_scanf_float+0x46>
 800a710:	9a03      	ldr	r2, [sp, #12]
 800a712:	1912      	adds	r2, r2, r4
 800a714:	2a00      	cmp	r2, #0
 800a716:	d18c      	bne.n	800a632 <_scanf_float+0x62>
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	496c      	ldr	r1, [pc, #432]	; (800a8cc <_scanf_float+0x2fc>)
 800a71c:	400a      	ands	r2, r1
 800a71e:	603a      	str	r2, [r7, #0]
 800a720:	702b      	strb	r3, [r5, #0]
 800a722:	3501      	adds	r5, #1
 800a724:	e7e4      	b.n	800a6f0 <_scanf_float+0x120>
 800a726:	2180      	movs	r1, #128	; 0x80
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	420a      	tst	r2, r1
 800a72c:	d081      	beq.n	800a632 <_scanf_float+0x62>
 800a72e:	438a      	bics	r2, r1
 800a730:	e7f5      	b.n	800a71e <_scanf_float+0x14e>
 800a732:	9a03      	ldr	r2, [sp, #12]
 800a734:	2a00      	cmp	r2, #0
 800a736:	d10f      	bne.n	800a758 <_scanf_float+0x188>
 800a738:	9a01      	ldr	r2, [sp, #4]
 800a73a:	2a00      	cmp	r2, #0
 800a73c:	d10f      	bne.n	800a75e <_scanf_float+0x18e>
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	21e0      	movs	r1, #224	; 0xe0
 800a742:	0010      	movs	r0, r2
 800a744:	00c9      	lsls	r1, r1, #3
 800a746:	4008      	ands	r0, r1
 800a748:	4288      	cmp	r0, r1
 800a74a:	d108      	bne.n	800a75e <_scanf_float+0x18e>
 800a74c:	4960      	ldr	r1, [pc, #384]	; (800a8d0 <_scanf_float+0x300>)
 800a74e:	400a      	ands	r2, r1
 800a750:	603a      	str	r2, [r7, #0]
 800a752:	2201      	movs	r2, #1
 800a754:	9203      	str	r2, [sp, #12]
 800a756:	e7e3      	b.n	800a720 <_scanf_float+0x150>
 800a758:	9a03      	ldr	r2, [sp, #12]
 800a75a:	2a02      	cmp	r2, #2
 800a75c:	d059      	beq.n	800a812 <_scanf_float+0x242>
 800a75e:	2c01      	cmp	r4, #1
 800a760:	d002      	beq.n	800a768 <_scanf_float+0x198>
 800a762:	2c04      	cmp	r4, #4
 800a764:	d000      	beq.n	800a768 <_scanf_float+0x198>
 800a766:	e764      	b.n	800a632 <_scanf_float+0x62>
 800a768:	3401      	adds	r4, #1
 800a76a:	b2e4      	uxtb	r4, r4
 800a76c:	e7d8      	b.n	800a720 <_scanf_float+0x150>
 800a76e:	9a03      	ldr	r2, [sp, #12]
 800a770:	2a01      	cmp	r2, #1
 800a772:	d000      	beq.n	800a776 <_scanf_float+0x1a6>
 800a774:	e75d      	b.n	800a632 <_scanf_float+0x62>
 800a776:	2202      	movs	r2, #2
 800a778:	e7ec      	b.n	800a754 <_scanf_float+0x184>
 800a77a:	2c00      	cmp	r4, #0
 800a77c:	d110      	bne.n	800a7a0 <_scanf_float+0x1d0>
 800a77e:	9a01      	ldr	r2, [sp, #4]
 800a780:	2a00      	cmp	r2, #0
 800a782:	d000      	beq.n	800a786 <_scanf_float+0x1b6>
 800a784:	e758      	b.n	800a638 <_scanf_float+0x68>
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	21e0      	movs	r1, #224	; 0xe0
 800a78a:	0010      	movs	r0, r2
 800a78c:	00c9      	lsls	r1, r1, #3
 800a78e:	4008      	ands	r0, r1
 800a790:	4288      	cmp	r0, r1
 800a792:	d000      	beq.n	800a796 <_scanf_float+0x1c6>
 800a794:	e754      	b.n	800a640 <_scanf_float+0x70>
 800a796:	494e      	ldr	r1, [pc, #312]	; (800a8d0 <_scanf_float+0x300>)
 800a798:	3401      	adds	r4, #1
 800a79a:	400a      	ands	r2, r1
 800a79c:	603a      	str	r2, [r7, #0]
 800a79e:	e7bf      	b.n	800a720 <_scanf_float+0x150>
 800a7a0:	21fd      	movs	r1, #253	; 0xfd
 800a7a2:	1ee2      	subs	r2, r4, #3
 800a7a4:	420a      	tst	r2, r1
 800a7a6:	d000      	beq.n	800a7aa <_scanf_float+0x1da>
 800a7a8:	e743      	b.n	800a632 <_scanf_float+0x62>
 800a7aa:	e7dd      	b.n	800a768 <_scanf_float+0x198>
 800a7ac:	2c02      	cmp	r4, #2
 800a7ae:	d000      	beq.n	800a7b2 <_scanf_float+0x1e2>
 800a7b0:	e73f      	b.n	800a632 <_scanf_float+0x62>
 800a7b2:	2403      	movs	r4, #3
 800a7b4:	e7b4      	b.n	800a720 <_scanf_float+0x150>
 800a7b6:	2c06      	cmp	r4, #6
 800a7b8:	d000      	beq.n	800a7bc <_scanf_float+0x1ec>
 800a7ba:	e73a      	b.n	800a632 <_scanf_float+0x62>
 800a7bc:	2407      	movs	r4, #7
 800a7be:	e7af      	b.n	800a720 <_scanf_float+0x150>
 800a7c0:	683a      	ldr	r2, [r7, #0]
 800a7c2:	0591      	lsls	r1, r2, #22
 800a7c4:	d400      	bmi.n	800a7c8 <_scanf_float+0x1f8>
 800a7c6:	e734      	b.n	800a632 <_scanf_float+0x62>
 800a7c8:	4942      	ldr	r1, [pc, #264]	; (800a8d4 <_scanf_float+0x304>)
 800a7ca:	400a      	ands	r2, r1
 800a7cc:	603a      	str	r2, [r7, #0]
 800a7ce:	9a01      	ldr	r2, [sp, #4]
 800a7d0:	9205      	str	r2, [sp, #20]
 800a7d2:	e7a5      	b.n	800a720 <_scanf_float+0x150>
 800a7d4:	21a0      	movs	r1, #160	; 0xa0
 800a7d6:	2080      	movs	r0, #128	; 0x80
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	00c9      	lsls	r1, r1, #3
 800a7dc:	4011      	ands	r1, r2
 800a7de:	00c0      	lsls	r0, r0, #3
 800a7e0:	4281      	cmp	r1, r0
 800a7e2:	d006      	beq.n	800a7f2 <_scanf_float+0x222>
 800a7e4:	4202      	tst	r2, r0
 800a7e6:	d100      	bne.n	800a7ea <_scanf_float+0x21a>
 800a7e8:	e723      	b.n	800a632 <_scanf_float+0x62>
 800a7ea:	9901      	ldr	r1, [sp, #4]
 800a7ec:	2900      	cmp	r1, #0
 800a7ee:	d100      	bne.n	800a7f2 <_scanf_float+0x222>
 800a7f0:	e726      	b.n	800a640 <_scanf_float+0x70>
 800a7f2:	0591      	lsls	r1, r2, #22
 800a7f4:	d404      	bmi.n	800a800 <_scanf_float+0x230>
 800a7f6:	9901      	ldr	r1, [sp, #4]
 800a7f8:	9805      	ldr	r0, [sp, #20]
 800a7fa:	9509      	str	r5, [sp, #36]	; 0x24
 800a7fc:	1a09      	subs	r1, r1, r0
 800a7fe:	9108      	str	r1, [sp, #32]
 800a800:	4933      	ldr	r1, [pc, #204]	; (800a8d0 <_scanf_float+0x300>)
 800a802:	400a      	ands	r2, r1
 800a804:	21c0      	movs	r1, #192	; 0xc0
 800a806:	0049      	lsls	r1, r1, #1
 800a808:	430a      	orrs	r2, r1
 800a80a:	603a      	str	r2, [r7, #0]
 800a80c:	2200      	movs	r2, #0
 800a80e:	9201      	str	r2, [sp, #4]
 800a810:	e786      	b.n	800a720 <_scanf_float+0x150>
 800a812:	2203      	movs	r2, #3
 800a814:	e79e      	b.n	800a754 <_scanf_float+0x184>
 800a816:	23c0      	movs	r3, #192	; 0xc0
 800a818:	005b      	lsls	r3, r3, #1
 800a81a:	0031      	movs	r1, r6
 800a81c:	58fb      	ldr	r3, [r7, r3]
 800a81e:	9802      	ldr	r0, [sp, #8]
 800a820:	4798      	blx	r3
 800a822:	2800      	cmp	r0, #0
 800a824:	d100      	bne.n	800a828 <_scanf_float+0x258>
 800a826:	e6f6      	b.n	800a616 <_scanf_float+0x46>
 800a828:	e703      	b.n	800a632 <_scanf_float+0x62>
 800a82a:	3d01      	subs	r5, #1
 800a82c:	593b      	ldr	r3, [r7, r4]
 800a82e:	0032      	movs	r2, r6
 800a830:	7829      	ldrb	r1, [r5, #0]
 800a832:	9802      	ldr	r0, [sp, #8]
 800a834:	4798      	blx	r3
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	3b01      	subs	r3, #1
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	e707      	b.n	800a64e <_scanf_float+0x7e>
 800a83e:	1e63      	subs	r3, r4, #1
 800a840:	2b06      	cmp	r3, #6
 800a842:	d80e      	bhi.n	800a862 <_scanf_float+0x292>
 800a844:	9503      	str	r5, [sp, #12]
 800a846:	2c02      	cmp	r4, #2
 800a848:	d920      	bls.n	800a88c <_scanf_float+0x2bc>
 800a84a:	1b63      	subs	r3, r4, r5
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	9306      	str	r3, [sp, #24]
 800a850:	9b03      	ldr	r3, [sp, #12]
 800a852:	9a06      	ldr	r2, [sp, #24]
 800a854:	189b      	adds	r3, r3, r2
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b03      	cmp	r3, #3
 800a85a:	d827      	bhi.n	800a8ac <_scanf_float+0x2dc>
 800a85c:	3c03      	subs	r4, #3
 800a85e:	b2e4      	uxtb	r4, r4
 800a860:	1b2d      	subs	r5, r5, r4
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	05da      	lsls	r2, r3, #23
 800a866:	d552      	bpl.n	800a90e <_scanf_float+0x33e>
 800a868:	055b      	lsls	r3, r3, #21
 800a86a:	d535      	bpl.n	800a8d8 <_scanf_float+0x308>
 800a86c:	24be      	movs	r4, #190	; 0xbe
 800a86e:	0064      	lsls	r4, r4, #1
 800a870:	9b04      	ldr	r3, [sp, #16]
 800a872:	429d      	cmp	r5, r3
 800a874:	d800      	bhi.n	800a878 <_scanf_float+0x2a8>
 800a876:	e6ee      	b.n	800a656 <_scanf_float+0x86>
 800a878:	3d01      	subs	r5, #1
 800a87a:	593b      	ldr	r3, [r7, r4]
 800a87c:	0032      	movs	r2, r6
 800a87e:	7829      	ldrb	r1, [r5, #0]
 800a880:	9802      	ldr	r0, [sp, #8]
 800a882:	4798      	blx	r3
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	3b01      	subs	r3, #1
 800a888:	613b      	str	r3, [r7, #16]
 800a88a:	e7f1      	b.n	800a870 <_scanf_float+0x2a0>
 800a88c:	24be      	movs	r4, #190	; 0xbe
 800a88e:	0064      	lsls	r4, r4, #1
 800a890:	9b04      	ldr	r3, [sp, #16]
 800a892:	429d      	cmp	r5, r3
 800a894:	d800      	bhi.n	800a898 <_scanf_float+0x2c8>
 800a896:	e6de      	b.n	800a656 <_scanf_float+0x86>
 800a898:	3d01      	subs	r5, #1
 800a89a:	593b      	ldr	r3, [r7, r4]
 800a89c:	0032      	movs	r2, r6
 800a89e:	7829      	ldrb	r1, [r5, #0]
 800a8a0:	9802      	ldr	r0, [sp, #8]
 800a8a2:	4798      	blx	r3
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	613b      	str	r3, [r7, #16]
 800a8aa:	e7f1      	b.n	800a890 <_scanf_float+0x2c0>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	0032      	movs	r2, r6
 800a8b0:	3b01      	subs	r3, #1
 800a8b2:	7819      	ldrb	r1, [r3, #0]
 800a8b4:	9303      	str	r3, [sp, #12]
 800a8b6:	23be      	movs	r3, #190	; 0xbe
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	58fb      	ldr	r3, [r7, r3]
 800a8bc:	9802      	ldr	r0, [sp, #8]
 800a8be:	4798      	blx	r3
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	613b      	str	r3, [r7, #16]
 800a8c6:	e7c3      	b.n	800a850 <_scanf_float+0x280>
 800a8c8:	fffffeff 	.word	0xfffffeff
 800a8cc:	fffffe7f 	.word	0xfffffe7f
 800a8d0:	fffff87f 	.word	0xfffff87f
 800a8d4:	fffffd7f 	.word	0xfffffd7f
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	1e6c      	subs	r4, r5, #1
 800a8dc:	7821      	ldrb	r1, [r4, #0]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	613b      	str	r3, [r7, #16]
 800a8e2:	2965      	cmp	r1, #101	; 0x65
 800a8e4:	d00c      	beq.n	800a900 <_scanf_float+0x330>
 800a8e6:	2945      	cmp	r1, #69	; 0x45
 800a8e8:	d00a      	beq.n	800a900 <_scanf_float+0x330>
 800a8ea:	23be      	movs	r3, #190	; 0xbe
 800a8ec:	005b      	lsls	r3, r3, #1
 800a8ee:	58fb      	ldr	r3, [r7, r3]
 800a8f0:	0032      	movs	r2, r6
 800a8f2:	9802      	ldr	r0, [sp, #8]
 800a8f4:	4798      	blx	r3
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	1eac      	subs	r4, r5, #2
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	7821      	ldrb	r1, [r4, #0]
 800a8fe:	613b      	str	r3, [r7, #16]
 800a900:	23be      	movs	r3, #190	; 0xbe
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	0032      	movs	r2, r6
 800a906:	58fb      	ldr	r3, [r7, r3]
 800a908:	9802      	ldr	r0, [sp, #8]
 800a90a:	4798      	blx	r3
 800a90c:	0025      	movs	r5, r4
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	2310      	movs	r3, #16
 800a912:	0011      	movs	r1, r2
 800a914:	4019      	ands	r1, r3
 800a916:	9103      	str	r1, [sp, #12]
 800a918:	421a      	tst	r2, r3
 800a91a:	d15b      	bne.n	800a9d4 <_scanf_float+0x404>
 800a91c:	22c0      	movs	r2, #192	; 0xc0
 800a91e:	7029      	strb	r1, [r5, #0]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	00d2      	lsls	r2, r2, #3
 800a924:	4013      	ands	r3, r2
 800a926:	2280      	movs	r2, #128	; 0x80
 800a928:	00d2      	lsls	r2, r2, #3
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d11d      	bne.n	800a96a <_scanf_float+0x39a>
 800a92e:	9b05      	ldr	r3, [sp, #20]
 800a930:	9a01      	ldr	r2, [sp, #4]
 800a932:	9901      	ldr	r1, [sp, #4]
 800a934:	1a9a      	subs	r2, r3, r2
 800a936:	428b      	cmp	r3, r1
 800a938:	d124      	bne.n	800a984 <_scanf_float+0x3b4>
 800a93a:	2200      	movs	r2, #0
 800a93c:	9904      	ldr	r1, [sp, #16]
 800a93e:	9802      	ldr	r0, [sp, #8]
 800a940:	f002 fccc 	bl	800d2dc <_strtod_r>
 800a944:	9b07      	ldr	r3, [sp, #28]
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	0004      	movs	r4, r0
 800a94a:	000d      	movs	r5, r1
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	0791      	lsls	r1, r2, #30
 800a950:	d525      	bpl.n	800a99e <_scanf_float+0x3ce>
 800a952:	9907      	ldr	r1, [sp, #28]
 800a954:	1d1a      	adds	r2, r3, #4
 800a956:	600a      	str	r2, [r1, #0]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	601c      	str	r4, [r3, #0]
 800a95c:	605d      	str	r5, [r3, #4]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3301      	adds	r3, #1
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	9803      	ldr	r0, [sp, #12]
 800a966:	b00b      	add	sp, #44	; 0x2c
 800a968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a96a:	9b08      	ldr	r3, [sp, #32]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d0e4      	beq.n	800a93a <_scanf_float+0x36a>
 800a970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a972:	9a03      	ldr	r2, [sp, #12]
 800a974:	1c59      	adds	r1, r3, #1
 800a976:	9802      	ldr	r0, [sp, #8]
 800a978:	230a      	movs	r3, #10
 800a97a:	f002 fd3d 	bl	800d3f8 <_strtol_r>
 800a97e:	9b08      	ldr	r3, [sp, #32]
 800a980:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a982:	1ac2      	subs	r2, r0, r3
 800a984:	003b      	movs	r3, r7
 800a986:	3370      	adds	r3, #112	; 0x70
 800a988:	33ff      	adds	r3, #255	; 0xff
 800a98a:	429d      	cmp	r5, r3
 800a98c:	d302      	bcc.n	800a994 <_scanf_float+0x3c4>
 800a98e:	003d      	movs	r5, r7
 800a990:	356f      	adds	r5, #111	; 0x6f
 800a992:	35ff      	adds	r5, #255	; 0xff
 800a994:	0028      	movs	r0, r5
 800a996:	4910      	ldr	r1, [pc, #64]	; (800a9d8 <_scanf_float+0x408>)
 800a998:	f000 f91a 	bl	800abd0 <siprintf>
 800a99c:	e7cd      	b.n	800a93a <_scanf_float+0x36a>
 800a99e:	1d19      	adds	r1, r3, #4
 800a9a0:	0752      	lsls	r2, r2, #29
 800a9a2:	d502      	bpl.n	800a9aa <_scanf_float+0x3da>
 800a9a4:	9a07      	ldr	r2, [sp, #28]
 800a9a6:	6011      	str	r1, [r2, #0]
 800a9a8:	e7d6      	b.n	800a958 <_scanf_float+0x388>
 800a9aa:	9a07      	ldr	r2, [sp, #28]
 800a9ac:	0020      	movs	r0, r4
 800a9ae:	6011      	str	r1, [r2, #0]
 800a9b0:	681e      	ldr	r6, [r3, #0]
 800a9b2:	0022      	movs	r2, r4
 800a9b4:	002b      	movs	r3, r5
 800a9b6:	0029      	movs	r1, r5
 800a9b8:	f7f7 ffa0 	bl	80028fc <__aeabi_dcmpun>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d004      	beq.n	800a9ca <_scanf_float+0x3fa>
 800a9c0:	4806      	ldr	r0, [pc, #24]	; (800a9dc <_scanf_float+0x40c>)
 800a9c2:	f000 fa03 	bl	800adcc <nanf>
 800a9c6:	6030      	str	r0, [r6, #0]
 800a9c8:	e7c9      	b.n	800a95e <_scanf_float+0x38e>
 800a9ca:	0020      	movs	r0, r4
 800a9cc:	0029      	movs	r1, r5
 800a9ce:	f7f8 f887 	bl	8002ae0 <__aeabi_d2f>
 800a9d2:	e7f8      	b.n	800a9c6 <_scanf_float+0x3f6>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	e63f      	b.n	800a658 <_scanf_float+0x88>
 800a9d8:	0800eca4 	.word	0x0800eca4
 800a9dc:	0800f035 	.word	0x0800f035

0800a9e0 <std>:
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	b510      	push	{r4, lr}
 800a9e4:	0004      	movs	r4, r0
 800a9e6:	6003      	str	r3, [r0, #0]
 800a9e8:	6043      	str	r3, [r0, #4]
 800a9ea:	6083      	str	r3, [r0, #8]
 800a9ec:	8181      	strh	r1, [r0, #12]
 800a9ee:	6643      	str	r3, [r0, #100]	; 0x64
 800a9f0:	81c2      	strh	r2, [r0, #14]
 800a9f2:	6103      	str	r3, [r0, #16]
 800a9f4:	6143      	str	r3, [r0, #20]
 800a9f6:	6183      	str	r3, [r0, #24]
 800a9f8:	0019      	movs	r1, r3
 800a9fa:	2208      	movs	r2, #8
 800a9fc:	305c      	adds	r0, #92	; 0x5c
 800a9fe:	f000 f953 	bl	800aca8 <memset>
 800aa02:	4b0b      	ldr	r3, [pc, #44]	; (800aa30 <std+0x50>)
 800aa04:	6224      	str	r4, [r4, #32]
 800aa06:	6263      	str	r3, [r4, #36]	; 0x24
 800aa08:	4b0a      	ldr	r3, [pc, #40]	; (800aa34 <std+0x54>)
 800aa0a:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa0c:	4b0a      	ldr	r3, [pc, #40]	; (800aa38 <std+0x58>)
 800aa0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa10:	4b0a      	ldr	r3, [pc, #40]	; (800aa3c <std+0x5c>)
 800aa12:	6323      	str	r3, [r4, #48]	; 0x30
 800aa14:	4b0a      	ldr	r3, [pc, #40]	; (800aa40 <std+0x60>)
 800aa16:	429c      	cmp	r4, r3
 800aa18:	d005      	beq.n	800aa26 <std+0x46>
 800aa1a:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <std+0x64>)
 800aa1c:	429c      	cmp	r4, r3
 800aa1e:	d002      	beq.n	800aa26 <std+0x46>
 800aa20:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <std+0x68>)
 800aa22:	429c      	cmp	r4, r3
 800aa24:	d103      	bne.n	800aa2e <std+0x4e>
 800aa26:	0020      	movs	r0, r4
 800aa28:	3058      	adds	r0, #88	; 0x58
 800aa2a:	f000 f9c1 	bl	800adb0 <__retarget_lock_init_recursive>
 800aa2e:	bd10      	pop	{r4, pc}
 800aa30:	0800ac11 	.word	0x0800ac11
 800aa34:	0800ac39 	.word	0x0800ac39
 800aa38:	0800ac71 	.word	0x0800ac71
 800aa3c:	0800ac9d 	.word	0x0800ac9d
 800aa40:	20000524 	.word	0x20000524
 800aa44:	2000058c 	.word	0x2000058c
 800aa48:	200005f4 	.word	0x200005f4

0800aa4c <stdio_exit_handler>:
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	4a03      	ldr	r2, [pc, #12]	; (800aa5c <stdio_exit_handler+0x10>)
 800aa50:	4903      	ldr	r1, [pc, #12]	; (800aa60 <stdio_exit_handler+0x14>)
 800aa52:	4804      	ldr	r0, [pc, #16]	; (800aa64 <stdio_exit_handler+0x18>)
 800aa54:	f000 f86c 	bl	800ab30 <_fwalk_sglue>
 800aa58:	bd10      	pop	{r4, pc}
 800aa5a:	46c0      	nop			; (mov r8, r8)
 800aa5c:	20000024 	.word	0x20000024
 800aa60:	0800d7d9 	.word	0x0800d7d9
 800aa64:	20000030 	.word	0x20000030

0800aa68 <cleanup_stdio>:
 800aa68:	6841      	ldr	r1, [r0, #4]
 800aa6a:	4b0b      	ldr	r3, [pc, #44]	; (800aa98 <cleanup_stdio+0x30>)
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	0004      	movs	r4, r0
 800aa70:	4299      	cmp	r1, r3
 800aa72:	d001      	beq.n	800aa78 <cleanup_stdio+0x10>
 800aa74:	f002 feb0 	bl	800d7d8 <_fflush_r>
 800aa78:	68a1      	ldr	r1, [r4, #8]
 800aa7a:	4b08      	ldr	r3, [pc, #32]	; (800aa9c <cleanup_stdio+0x34>)
 800aa7c:	4299      	cmp	r1, r3
 800aa7e:	d002      	beq.n	800aa86 <cleanup_stdio+0x1e>
 800aa80:	0020      	movs	r0, r4
 800aa82:	f002 fea9 	bl	800d7d8 <_fflush_r>
 800aa86:	68e1      	ldr	r1, [r4, #12]
 800aa88:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <cleanup_stdio+0x38>)
 800aa8a:	4299      	cmp	r1, r3
 800aa8c:	d002      	beq.n	800aa94 <cleanup_stdio+0x2c>
 800aa8e:	0020      	movs	r0, r4
 800aa90:	f002 fea2 	bl	800d7d8 <_fflush_r>
 800aa94:	bd10      	pop	{r4, pc}
 800aa96:	46c0      	nop			; (mov r8, r8)
 800aa98:	20000524 	.word	0x20000524
 800aa9c:	2000058c 	.word	0x2000058c
 800aaa0:	200005f4 	.word	0x200005f4

0800aaa4 <global_stdio_init.part.0>:
 800aaa4:	b510      	push	{r4, lr}
 800aaa6:	4b09      	ldr	r3, [pc, #36]	; (800aacc <global_stdio_init.part.0+0x28>)
 800aaa8:	4a09      	ldr	r2, [pc, #36]	; (800aad0 <global_stdio_init.part.0+0x2c>)
 800aaaa:	2104      	movs	r1, #4
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	4809      	ldr	r0, [pc, #36]	; (800aad4 <global_stdio_init.part.0+0x30>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	f7ff ff95 	bl	800a9e0 <std>
 800aab6:	2201      	movs	r2, #1
 800aab8:	2109      	movs	r1, #9
 800aaba:	4807      	ldr	r0, [pc, #28]	; (800aad8 <global_stdio_init.part.0+0x34>)
 800aabc:	f7ff ff90 	bl	800a9e0 <std>
 800aac0:	2202      	movs	r2, #2
 800aac2:	2112      	movs	r1, #18
 800aac4:	4805      	ldr	r0, [pc, #20]	; (800aadc <global_stdio_init.part.0+0x38>)
 800aac6:	f7ff ff8b 	bl	800a9e0 <std>
 800aaca:	bd10      	pop	{r4, pc}
 800aacc:	2000065c 	.word	0x2000065c
 800aad0:	0800aa4d 	.word	0x0800aa4d
 800aad4:	20000524 	.word	0x20000524
 800aad8:	2000058c 	.word	0x2000058c
 800aadc:	200005f4 	.word	0x200005f4

0800aae0 <__sfp_lock_acquire>:
 800aae0:	b510      	push	{r4, lr}
 800aae2:	4802      	ldr	r0, [pc, #8]	; (800aaec <__sfp_lock_acquire+0xc>)
 800aae4:	f000 f965 	bl	800adb2 <__retarget_lock_acquire_recursive>
 800aae8:	bd10      	pop	{r4, pc}
 800aaea:	46c0      	nop			; (mov r8, r8)
 800aaec:	20000665 	.word	0x20000665

0800aaf0 <__sfp_lock_release>:
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	4802      	ldr	r0, [pc, #8]	; (800aafc <__sfp_lock_release+0xc>)
 800aaf4:	f000 f95e 	bl	800adb4 <__retarget_lock_release_recursive>
 800aaf8:	bd10      	pop	{r4, pc}
 800aafa:	46c0      	nop			; (mov r8, r8)
 800aafc:	20000665 	.word	0x20000665

0800ab00 <__sinit>:
 800ab00:	b510      	push	{r4, lr}
 800ab02:	0004      	movs	r4, r0
 800ab04:	f7ff ffec 	bl	800aae0 <__sfp_lock_acquire>
 800ab08:	6a23      	ldr	r3, [r4, #32]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d002      	beq.n	800ab14 <__sinit+0x14>
 800ab0e:	f7ff ffef 	bl	800aaf0 <__sfp_lock_release>
 800ab12:	bd10      	pop	{r4, pc}
 800ab14:	4b04      	ldr	r3, [pc, #16]	; (800ab28 <__sinit+0x28>)
 800ab16:	6223      	str	r3, [r4, #32]
 800ab18:	4b04      	ldr	r3, [pc, #16]	; (800ab2c <__sinit+0x2c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1f6      	bne.n	800ab0e <__sinit+0xe>
 800ab20:	f7ff ffc0 	bl	800aaa4 <global_stdio_init.part.0>
 800ab24:	e7f3      	b.n	800ab0e <__sinit+0xe>
 800ab26:	46c0      	nop			; (mov r8, r8)
 800ab28:	0800aa69 	.word	0x0800aa69
 800ab2c:	2000065c 	.word	0x2000065c

0800ab30 <_fwalk_sglue>:
 800ab30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab32:	0014      	movs	r4, r2
 800ab34:	2600      	movs	r6, #0
 800ab36:	9000      	str	r0, [sp, #0]
 800ab38:	9101      	str	r1, [sp, #4]
 800ab3a:	68a5      	ldr	r5, [r4, #8]
 800ab3c:	6867      	ldr	r7, [r4, #4]
 800ab3e:	3f01      	subs	r7, #1
 800ab40:	d504      	bpl.n	800ab4c <_fwalk_sglue+0x1c>
 800ab42:	6824      	ldr	r4, [r4, #0]
 800ab44:	2c00      	cmp	r4, #0
 800ab46:	d1f8      	bne.n	800ab3a <_fwalk_sglue+0xa>
 800ab48:	0030      	movs	r0, r6
 800ab4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab4c:	89ab      	ldrh	r3, [r5, #12]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d908      	bls.n	800ab64 <_fwalk_sglue+0x34>
 800ab52:	220e      	movs	r2, #14
 800ab54:	5eab      	ldrsh	r3, [r5, r2]
 800ab56:	3301      	adds	r3, #1
 800ab58:	d004      	beq.n	800ab64 <_fwalk_sglue+0x34>
 800ab5a:	0029      	movs	r1, r5
 800ab5c:	9800      	ldr	r0, [sp, #0]
 800ab5e:	9b01      	ldr	r3, [sp, #4]
 800ab60:	4798      	blx	r3
 800ab62:	4306      	orrs	r6, r0
 800ab64:	3568      	adds	r5, #104	; 0x68
 800ab66:	e7ea      	b.n	800ab3e <_fwalk_sglue+0xe>

0800ab68 <sniprintf>:
 800ab68:	b40c      	push	{r2, r3}
 800ab6a:	b530      	push	{r4, r5, lr}
 800ab6c:	4b17      	ldr	r3, [pc, #92]	; (800abcc <sniprintf+0x64>)
 800ab6e:	000c      	movs	r4, r1
 800ab70:	681d      	ldr	r5, [r3, #0]
 800ab72:	b09d      	sub	sp, #116	; 0x74
 800ab74:	2900      	cmp	r1, #0
 800ab76:	da08      	bge.n	800ab8a <sniprintf+0x22>
 800ab78:	238b      	movs	r3, #139	; 0x8b
 800ab7a:	2001      	movs	r0, #1
 800ab7c:	602b      	str	r3, [r5, #0]
 800ab7e:	4240      	negs	r0, r0
 800ab80:	b01d      	add	sp, #116	; 0x74
 800ab82:	bc30      	pop	{r4, r5}
 800ab84:	bc08      	pop	{r3}
 800ab86:	b002      	add	sp, #8
 800ab88:	4718      	bx	r3
 800ab8a:	2382      	movs	r3, #130	; 0x82
 800ab8c:	466a      	mov	r2, sp
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	8293      	strh	r3, [r2, #20]
 800ab92:	2300      	movs	r3, #0
 800ab94:	9002      	str	r0, [sp, #8]
 800ab96:	9006      	str	r0, [sp, #24]
 800ab98:	4299      	cmp	r1, r3
 800ab9a:	d000      	beq.n	800ab9e <sniprintf+0x36>
 800ab9c:	1e4b      	subs	r3, r1, #1
 800ab9e:	9304      	str	r3, [sp, #16]
 800aba0:	9307      	str	r3, [sp, #28]
 800aba2:	2301      	movs	r3, #1
 800aba4:	466a      	mov	r2, sp
 800aba6:	425b      	negs	r3, r3
 800aba8:	82d3      	strh	r3, [r2, #22]
 800abaa:	0028      	movs	r0, r5
 800abac:	ab21      	add	r3, sp, #132	; 0x84
 800abae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800abb0:	a902      	add	r1, sp, #8
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	f002 fc86 	bl	800d4c4 <_svfiprintf_r>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	da01      	bge.n	800abc0 <sniprintf+0x58>
 800abbc:	238b      	movs	r3, #139	; 0x8b
 800abbe:	602b      	str	r3, [r5, #0]
 800abc0:	2c00      	cmp	r4, #0
 800abc2:	d0dd      	beq.n	800ab80 <sniprintf+0x18>
 800abc4:	2200      	movs	r2, #0
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	701a      	strb	r2, [r3, #0]
 800abca:	e7d9      	b.n	800ab80 <sniprintf+0x18>
 800abcc:	2000007c 	.word	0x2000007c

0800abd0 <siprintf>:
 800abd0:	b40e      	push	{r1, r2, r3}
 800abd2:	b500      	push	{lr}
 800abd4:	490b      	ldr	r1, [pc, #44]	; (800ac04 <siprintf+0x34>)
 800abd6:	b09c      	sub	sp, #112	; 0x70
 800abd8:	ab1d      	add	r3, sp, #116	; 0x74
 800abda:	9002      	str	r0, [sp, #8]
 800abdc:	9006      	str	r0, [sp, #24]
 800abde:	9107      	str	r1, [sp, #28]
 800abe0:	9104      	str	r1, [sp, #16]
 800abe2:	4809      	ldr	r0, [pc, #36]	; (800ac08 <siprintf+0x38>)
 800abe4:	4909      	ldr	r1, [pc, #36]	; (800ac0c <siprintf+0x3c>)
 800abe6:	cb04      	ldmia	r3!, {r2}
 800abe8:	9105      	str	r1, [sp, #20]
 800abea:	6800      	ldr	r0, [r0, #0]
 800abec:	a902      	add	r1, sp, #8
 800abee:	9301      	str	r3, [sp, #4]
 800abf0:	f002 fc68 	bl	800d4c4 <_svfiprintf_r>
 800abf4:	2200      	movs	r2, #0
 800abf6:	9b02      	ldr	r3, [sp, #8]
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	b01c      	add	sp, #112	; 0x70
 800abfc:	bc08      	pop	{r3}
 800abfe:	b003      	add	sp, #12
 800ac00:	4718      	bx	r3
 800ac02:	46c0      	nop			; (mov r8, r8)
 800ac04:	7fffffff 	.word	0x7fffffff
 800ac08:	2000007c 	.word	0x2000007c
 800ac0c:	ffff0208 	.word	0xffff0208

0800ac10 <__sread>:
 800ac10:	b570      	push	{r4, r5, r6, lr}
 800ac12:	000c      	movs	r4, r1
 800ac14:	250e      	movs	r5, #14
 800ac16:	5f49      	ldrsh	r1, [r1, r5]
 800ac18:	f000 f878 	bl	800ad0c <_read_r>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	db03      	blt.n	800ac28 <__sread+0x18>
 800ac20:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac22:	181b      	adds	r3, r3, r0
 800ac24:	6563      	str	r3, [r4, #84]	; 0x54
 800ac26:	bd70      	pop	{r4, r5, r6, pc}
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	4a02      	ldr	r2, [pc, #8]	; (800ac34 <__sread+0x24>)
 800ac2c:	4013      	ands	r3, r2
 800ac2e:	81a3      	strh	r3, [r4, #12]
 800ac30:	e7f9      	b.n	800ac26 <__sread+0x16>
 800ac32:	46c0      	nop			; (mov r8, r8)
 800ac34:	ffffefff 	.word	0xffffefff

0800ac38 <__swrite>:
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3a:	001f      	movs	r7, r3
 800ac3c:	898b      	ldrh	r3, [r1, #12]
 800ac3e:	0005      	movs	r5, r0
 800ac40:	000c      	movs	r4, r1
 800ac42:	0016      	movs	r6, r2
 800ac44:	05db      	lsls	r3, r3, #23
 800ac46:	d505      	bpl.n	800ac54 <__swrite+0x1c>
 800ac48:	230e      	movs	r3, #14
 800ac4a:	5ec9      	ldrsh	r1, [r1, r3]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2302      	movs	r3, #2
 800ac50:	f000 f848 	bl	800ace4 <_lseek_r>
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	4a05      	ldr	r2, [pc, #20]	; (800ac6c <__swrite+0x34>)
 800ac58:	0028      	movs	r0, r5
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	81a3      	strh	r3, [r4, #12]
 800ac5e:	0032      	movs	r2, r6
 800ac60:	230e      	movs	r3, #14
 800ac62:	5ee1      	ldrsh	r1, [r4, r3]
 800ac64:	003b      	movs	r3, r7
 800ac66:	f000 f865 	bl	800ad34 <_write_r>
 800ac6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac6c:	ffffefff 	.word	0xffffefff

0800ac70 <__sseek>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	000c      	movs	r4, r1
 800ac74:	250e      	movs	r5, #14
 800ac76:	5f49      	ldrsh	r1, [r1, r5]
 800ac78:	f000 f834 	bl	800ace4 <_lseek_r>
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	1c42      	adds	r2, r0, #1
 800ac80:	d103      	bne.n	800ac8a <__sseek+0x1a>
 800ac82:	4a05      	ldr	r2, [pc, #20]	; (800ac98 <__sseek+0x28>)
 800ac84:	4013      	ands	r3, r2
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	bd70      	pop	{r4, r5, r6, pc}
 800ac8a:	2280      	movs	r2, #128	; 0x80
 800ac8c:	0152      	lsls	r2, r2, #5
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	81a3      	strh	r3, [r4, #12]
 800ac92:	6560      	str	r0, [r4, #84]	; 0x54
 800ac94:	e7f8      	b.n	800ac88 <__sseek+0x18>
 800ac96:	46c0      	nop			; (mov r8, r8)
 800ac98:	ffffefff 	.word	0xffffefff

0800ac9c <__sclose>:
 800ac9c:	b510      	push	{r4, lr}
 800ac9e:	230e      	movs	r3, #14
 800aca0:	5ec9      	ldrsh	r1, [r1, r3]
 800aca2:	f000 f80d 	bl	800acc0 <_close_r>
 800aca6:	bd10      	pop	{r4, pc}

0800aca8 <memset>:
 800aca8:	0003      	movs	r3, r0
 800acaa:	1882      	adds	r2, r0, r2
 800acac:	4293      	cmp	r3, r2
 800acae:	d100      	bne.n	800acb2 <memset+0xa>
 800acb0:	4770      	bx	lr
 800acb2:	7019      	strb	r1, [r3, #0]
 800acb4:	3301      	adds	r3, #1
 800acb6:	e7f9      	b.n	800acac <memset+0x4>

0800acb8 <_localeconv_r>:
 800acb8:	4800      	ldr	r0, [pc, #0]	; (800acbc <_localeconv_r+0x4>)
 800acba:	4770      	bx	lr
 800acbc:	20000170 	.word	0x20000170

0800acc0 <_close_r>:
 800acc0:	2300      	movs	r3, #0
 800acc2:	b570      	push	{r4, r5, r6, lr}
 800acc4:	4d06      	ldr	r5, [pc, #24]	; (800ace0 <_close_r+0x20>)
 800acc6:	0004      	movs	r4, r0
 800acc8:	0008      	movs	r0, r1
 800acca:	602b      	str	r3, [r5, #0]
 800accc:	f7f9 fb78 	bl	80043c0 <_close>
 800acd0:	1c43      	adds	r3, r0, #1
 800acd2:	d103      	bne.n	800acdc <_close_r+0x1c>
 800acd4:	682b      	ldr	r3, [r5, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d000      	beq.n	800acdc <_close_r+0x1c>
 800acda:	6023      	str	r3, [r4, #0]
 800acdc:	bd70      	pop	{r4, r5, r6, pc}
 800acde:	46c0      	nop			; (mov r8, r8)
 800ace0:	20000660 	.word	0x20000660

0800ace4 <_lseek_r>:
 800ace4:	b570      	push	{r4, r5, r6, lr}
 800ace6:	0004      	movs	r4, r0
 800ace8:	0008      	movs	r0, r1
 800acea:	0011      	movs	r1, r2
 800acec:	001a      	movs	r2, r3
 800acee:	2300      	movs	r3, #0
 800acf0:	4d05      	ldr	r5, [pc, #20]	; (800ad08 <_lseek_r+0x24>)
 800acf2:	602b      	str	r3, [r5, #0]
 800acf4:	f7f9 fb85 	bl	8004402 <_lseek>
 800acf8:	1c43      	adds	r3, r0, #1
 800acfa:	d103      	bne.n	800ad04 <_lseek_r+0x20>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d000      	beq.n	800ad04 <_lseek_r+0x20>
 800ad02:	6023      	str	r3, [r4, #0]
 800ad04:	bd70      	pop	{r4, r5, r6, pc}
 800ad06:	46c0      	nop			; (mov r8, r8)
 800ad08:	20000660 	.word	0x20000660

0800ad0c <_read_r>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	0004      	movs	r4, r0
 800ad10:	0008      	movs	r0, r1
 800ad12:	0011      	movs	r1, r2
 800ad14:	001a      	movs	r2, r3
 800ad16:	2300      	movs	r3, #0
 800ad18:	4d05      	ldr	r5, [pc, #20]	; (800ad30 <_read_r+0x24>)
 800ad1a:	602b      	str	r3, [r5, #0]
 800ad1c:	f7f9 fb17 	bl	800434e <_read>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d103      	bne.n	800ad2c <_read_r+0x20>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d000      	beq.n	800ad2c <_read_r+0x20>
 800ad2a:	6023      	str	r3, [r4, #0]
 800ad2c:	bd70      	pop	{r4, r5, r6, pc}
 800ad2e:	46c0      	nop			; (mov r8, r8)
 800ad30:	20000660 	.word	0x20000660

0800ad34 <_write_r>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	0004      	movs	r4, r0
 800ad38:	0008      	movs	r0, r1
 800ad3a:	0011      	movs	r1, r2
 800ad3c:	001a      	movs	r2, r3
 800ad3e:	2300      	movs	r3, #0
 800ad40:	4d05      	ldr	r5, [pc, #20]	; (800ad58 <_write_r+0x24>)
 800ad42:	602b      	str	r3, [r5, #0]
 800ad44:	f7f9 fb20 	bl	8004388 <_write>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d103      	bne.n	800ad54 <_write_r+0x20>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d000      	beq.n	800ad54 <_write_r+0x20>
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	bd70      	pop	{r4, r5, r6, pc}
 800ad56:	46c0      	nop			; (mov r8, r8)
 800ad58:	20000660 	.word	0x20000660

0800ad5c <__errno>:
 800ad5c:	4b01      	ldr	r3, [pc, #4]	; (800ad64 <__errno+0x8>)
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	4770      	bx	lr
 800ad62:	46c0      	nop			; (mov r8, r8)
 800ad64:	2000007c 	.word	0x2000007c

0800ad68 <__libc_init_array>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	2600      	movs	r6, #0
 800ad6c:	4c0c      	ldr	r4, [pc, #48]	; (800ada0 <__libc_init_array+0x38>)
 800ad6e:	4d0d      	ldr	r5, [pc, #52]	; (800ada4 <__libc_init_array+0x3c>)
 800ad70:	1b64      	subs	r4, r4, r5
 800ad72:	10a4      	asrs	r4, r4, #2
 800ad74:	42a6      	cmp	r6, r4
 800ad76:	d109      	bne.n	800ad8c <__libc_init_array+0x24>
 800ad78:	2600      	movs	r6, #0
 800ad7a:	f003 fc71 	bl	800e660 <_init>
 800ad7e:	4c0a      	ldr	r4, [pc, #40]	; (800ada8 <__libc_init_array+0x40>)
 800ad80:	4d0a      	ldr	r5, [pc, #40]	; (800adac <__libc_init_array+0x44>)
 800ad82:	1b64      	subs	r4, r4, r5
 800ad84:	10a4      	asrs	r4, r4, #2
 800ad86:	42a6      	cmp	r6, r4
 800ad88:	d105      	bne.n	800ad96 <__libc_init_array+0x2e>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	00b3      	lsls	r3, r6, #2
 800ad8e:	58eb      	ldr	r3, [r5, r3]
 800ad90:	4798      	blx	r3
 800ad92:	3601      	adds	r6, #1
 800ad94:	e7ee      	b.n	800ad74 <__libc_init_array+0xc>
 800ad96:	00b3      	lsls	r3, r6, #2
 800ad98:	58eb      	ldr	r3, [r5, r3]
 800ad9a:	4798      	blx	r3
 800ad9c:	3601      	adds	r6, #1
 800ad9e:	e7f2      	b.n	800ad86 <__libc_init_array+0x1e>
 800ada0:	0800f0a0 	.word	0x0800f0a0
 800ada4:	0800f0a0 	.word	0x0800f0a0
 800ada8:	0800f0a4 	.word	0x0800f0a4
 800adac:	0800f0a0 	.word	0x0800f0a0

0800adb0 <__retarget_lock_init_recursive>:
 800adb0:	4770      	bx	lr

0800adb2 <__retarget_lock_acquire_recursive>:
 800adb2:	4770      	bx	lr

0800adb4 <__retarget_lock_release_recursive>:
 800adb4:	4770      	bx	lr

0800adb6 <memchr>:
 800adb6:	b2c9      	uxtb	r1, r1
 800adb8:	1882      	adds	r2, r0, r2
 800adba:	4290      	cmp	r0, r2
 800adbc:	d101      	bne.n	800adc2 <memchr+0xc>
 800adbe:	2000      	movs	r0, #0
 800adc0:	4770      	bx	lr
 800adc2:	7803      	ldrb	r3, [r0, #0]
 800adc4:	428b      	cmp	r3, r1
 800adc6:	d0fb      	beq.n	800adc0 <memchr+0xa>
 800adc8:	3001      	adds	r0, #1
 800adca:	e7f6      	b.n	800adba <memchr+0x4>

0800adcc <nanf>:
 800adcc:	4800      	ldr	r0, [pc, #0]	; (800add0 <nanf+0x4>)
 800adce:	4770      	bx	lr
 800add0:	7fc00000 	.word	0x7fc00000

0800add4 <quorem>:
 800add4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800add6:	6902      	ldr	r2, [r0, #16]
 800add8:	690b      	ldr	r3, [r1, #16]
 800adda:	b089      	sub	sp, #36	; 0x24
 800addc:	0007      	movs	r7, r0
 800adde:	9104      	str	r1, [sp, #16]
 800ade0:	2000      	movs	r0, #0
 800ade2:	429a      	cmp	r2, r3
 800ade4:	db69      	blt.n	800aeba <quorem+0xe6>
 800ade6:	3b01      	subs	r3, #1
 800ade8:	009c      	lsls	r4, r3, #2
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	000b      	movs	r3, r1
 800adee:	3314      	adds	r3, #20
 800adf0:	9306      	str	r3, [sp, #24]
 800adf2:	191b      	adds	r3, r3, r4
 800adf4:	9305      	str	r3, [sp, #20]
 800adf6:	003b      	movs	r3, r7
 800adf8:	3314      	adds	r3, #20
 800adfa:	9303      	str	r3, [sp, #12]
 800adfc:	191c      	adds	r4, r3, r4
 800adfe:	9b05      	ldr	r3, [sp, #20]
 800ae00:	6826      	ldr	r6, [r4, #0]
 800ae02:	681d      	ldr	r5, [r3, #0]
 800ae04:	0030      	movs	r0, r6
 800ae06:	3501      	adds	r5, #1
 800ae08:	0029      	movs	r1, r5
 800ae0a:	f7f5 f999 	bl	8000140 <__udivsi3>
 800ae0e:	9002      	str	r0, [sp, #8]
 800ae10:	42ae      	cmp	r6, r5
 800ae12:	d329      	bcc.n	800ae68 <quorem+0x94>
 800ae14:	9b06      	ldr	r3, [sp, #24]
 800ae16:	2600      	movs	r6, #0
 800ae18:	469c      	mov	ip, r3
 800ae1a:	9d03      	ldr	r5, [sp, #12]
 800ae1c:	9606      	str	r6, [sp, #24]
 800ae1e:	4662      	mov	r2, ip
 800ae20:	ca08      	ldmia	r2!, {r3}
 800ae22:	6828      	ldr	r0, [r5, #0]
 800ae24:	4694      	mov	ip, r2
 800ae26:	9a02      	ldr	r2, [sp, #8]
 800ae28:	b299      	uxth	r1, r3
 800ae2a:	4351      	muls	r1, r2
 800ae2c:	0c1b      	lsrs	r3, r3, #16
 800ae2e:	4353      	muls	r3, r2
 800ae30:	1989      	adds	r1, r1, r6
 800ae32:	0c0a      	lsrs	r2, r1, #16
 800ae34:	189b      	adds	r3, r3, r2
 800ae36:	9307      	str	r3, [sp, #28]
 800ae38:	0c1e      	lsrs	r6, r3, #16
 800ae3a:	9b06      	ldr	r3, [sp, #24]
 800ae3c:	b282      	uxth	r2, r0
 800ae3e:	18d2      	adds	r2, r2, r3
 800ae40:	466b      	mov	r3, sp
 800ae42:	b289      	uxth	r1, r1
 800ae44:	8b9b      	ldrh	r3, [r3, #28]
 800ae46:	1a52      	subs	r2, r2, r1
 800ae48:	0c01      	lsrs	r1, r0, #16
 800ae4a:	1ac9      	subs	r1, r1, r3
 800ae4c:	1413      	asrs	r3, r2, #16
 800ae4e:	18cb      	adds	r3, r1, r3
 800ae50:	1419      	asrs	r1, r3, #16
 800ae52:	b292      	uxth	r2, r2
 800ae54:	041b      	lsls	r3, r3, #16
 800ae56:	4313      	orrs	r3, r2
 800ae58:	c508      	stmia	r5!, {r3}
 800ae5a:	9b05      	ldr	r3, [sp, #20]
 800ae5c:	9106      	str	r1, [sp, #24]
 800ae5e:	4563      	cmp	r3, ip
 800ae60:	d2dd      	bcs.n	800ae1e <quorem+0x4a>
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d030      	beq.n	800aeca <quorem+0xf6>
 800ae68:	0038      	movs	r0, r7
 800ae6a:	9904      	ldr	r1, [sp, #16]
 800ae6c:	f001 fa2a 	bl	800c2c4 <__mcmp>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	db21      	blt.n	800aeb8 <quorem+0xe4>
 800ae74:	0038      	movs	r0, r7
 800ae76:	2600      	movs	r6, #0
 800ae78:	9b02      	ldr	r3, [sp, #8]
 800ae7a:	9c04      	ldr	r4, [sp, #16]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	9302      	str	r3, [sp, #8]
 800ae80:	3014      	adds	r0, #20
 800ae82:	3414      	adds	r4, #20
 800ae84:	6803      	ldr	r3, [r0, #0]
 800ae86:	cc02      	ldmia	r4!, {r1}
 800ae88:	b29d      	uxth	r5, r3
 800ae8a:	19ad      	adds	r5, r5, r6
 800ae8c:	b28a      	uxth	r2, r1
 800ae8e:	1aaa      	subs	r2, r5, r2
 800ae90:	0c09      	lsrs	r1, r1, #16
 800ae92:	0c1b      	lsrs	r3, r3, #16
 800ae94:	1a5b      	subs	r3, r3, r1
 800ae96:	1411      	asrs	r1, r2, #16
 800ae98:	185b      	adds	r3, r3, r1
 800ae9a:	141e      	asrs	r6, r3, #16
 800ae9c:	b292      	uxth	r2, r2
 800ae9e:	041b      	lsls	r3, r3, #16
 800aea0:	4313      	orrs	r3, r2
 800aea2:	c008      	stmia	r0!, {r3}
 800aea4:	9b05      	ldr	r3, [sp, #20]
 800aea6:	42a3      	cmp	r3, r4
 800aea8:	d2ec      	bcs.n	800ae84 <quorem+0xb0>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	9a03      	ldr	r2, [sp, #12]
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	18d3      	adds	r3, r2, r3
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	2a00      	cmp	r2, #0
 800aeb6:	d015      	beq.n	800aee4 <quorem+0x110>
 800aeb8:	9802      	ldr	r0, [sp, #8]
 800aeba:	b009      	add	sp, #36	; 0x24
 800aebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d106      	bne.n	800aed2 <quorem+0xfe>
 800aec4:	9b01      	ldr	r3, [sp, #4]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	9301      	str	r3, [sp, #4]
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	3c04      	subs	r4, #4
 800aece:	42a3      	cmp	r3, r4
 800aed0:	d3f5      	bcc.n	800aebe <quorem+0xea>
 800aed2:	9b01      	ldr	r3, [sp, #4]
 800aed4:	613b      	str	r3, [r7, #16]
 800aed6:	e7c7      	b.n	800ae68 <quorem+0x94>
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	2a00      	cmp	r2, #0
 800aedc:	d106      	bne.n	800aeec <quorem+0x118>
 800aede:	9a01      	ldr	r2, [sp, #4]
 800aee0:	3a01      	subs	r2, #1
 800aee2:	9201      	str	r2, [sp, #4]
 800aee4:	9a03      	ldr	r2, [sp, #12]
 800aee6:	3b04      	subs	r3, #4
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d3f5      	bcc.n	800aed8 <quorem+0x104>
 800aeec:	9b01      	ldr	r3, [sp, #4]
 800aeee:	613b      	str	r3, [r7, #16]
 800aef0:	e7e2      	b.n	800aeb8 <quorem+0xe4>
	...

0800aef4 <_dtoa_r>:
 800aef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef6:	0014      	movs	r4, r2
 800aef8:	001d      	movs	r5, r3
 800aefa:	69c6      	ldr	r6, [r0, #28]
 800aefc:	b09d      	sub	sp, #116	; 0x74
 800aefe:	9408      	str	r4, [sp, #32]
 800af00:	9509      	str	r5, [sp, #36]	; 0x24
 800af02:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800af04:	9004      	str	r0, [sp, #16]
 800af06:	2e00      	cmp	r6, #0
 800af08:	d10f      	bne.n	800af2a <_dtoa_r+0x36>
 800af0a:	2010      	movs	r0, #16
 800af0c:	f000 fe4a 	bl	800bba4 <malloc>
 800af10:	9b04      	ldr	r3, [sp, #16]
 800af12:	1e02      	subs	r2, r0, #0
 800af14:	61d8      	str	r0, [r3, #28]
 800af16:	d104      	bne.n	800af22 <_dtoa_r+0x2e>
 800af18:	21ef      	movs	r1, #239	; 0xef
 800af1a:	4bc6      	ldr	r3, [pc, #792]	; (800b234 <_dtoa_r+0x340>)
 800af1c:	48c6      	ldr	r0, [pc, #792]	; (800b238 <_dtoa_r+0x344>)
 800af1e:	f002 fccd 	bl	800d8bc <__assert_func>
 800af22:	6046      	str	r6, [r0, #4]
 800af24:	6086      	str	r6, [r0, #8]
 800af26:	6006      	str	r6, [r0, #0]
 800af28:	60c6      	str	r6, [r0, #12]
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	6819      	ldr	r1, [r3, #0]
 800af30:	2900      	cmp	r1, #0
 800af32:	d00b      	beq.n	800af4c <_dtoa_r+0x58>
 800af34:	685a      	ldr	r2, [r3, #4]
 800af36:	2301      	movs	r3, #1
 800af38:	4093      	lsls	r3, r2
 800af3a:	604a      	str	r2, [r1, #4]
 800af3c:	608b      	str	r3, [r1, #8]
 800af3e:	9804      	ldr	r0, [sp, #16]
 800af40:	f000 ff32 	bl	800bda8 <_Bfree>
 800af44:	2200      	movs	r2, #0
 800af46:	9b04      	ldr	r3, [sp, #16]
 800af48:	69db      	ldr	r3, [r3, #28]
 800af4a:	601a      	str	r2, [r3, #0]
 800af4c:	2d00      	cmp	r5, #0
 800af4e:	da1e      	bge.n	800af8e <_dtoa_r+0x9a>
 800af50:	2301      	movs	r3, #1
 800af52:	603b      	str	r3, [r7, #0]
 800af54:	006b      	lsls	r3, r5, #1
 800af56:	085b      	lsrs	r3, r3, #1
 800af58:	9309      	str	r3, [sp, #36]	; 0x24
 800af5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af5c:	4bb7      	ldr	r3, [pc, #732]	; (800b23c <_dtoa_r+0x348>)
 800af5e:	4ab7      	ldr	r2, [pc, #732]	; (800b23c <_dtoa_r+0x348>)
 800af60:	403b      	ands	r3, r7
 800af62:	4293      	cmp	r3, r2
 800af64:	d116      	bne.n	800af94 <_dtoa_r+0xa0>
 800af66:	4bb6      	ldr	r3, [pc, #728]	; (800b240 <_dtoa_r+0x34c>)
 800af68:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800af6a:	6013      	str	r3, [r2, #0]
 800af6c:	033b      	lsls	r3, r7, #12
 800af6e:	0b1b      	lsrs	r3, r3, #12
 800af70:	4323      	orrs	r3, r4
 800af72:	d101      	bne.n	800af78 <_dtoa_r+0x84>
 800af74:	f000 fdb5 	bl	800bae2 <_dtoa_r+0xbee>
 800af78:	4bb2      	ldr	r3, [pc, #712]	; (800b244 <_dtoa_r+0x350>)
 800af7a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800af7c:	9306      	str	r3, [sp, #24]
 800af7e:	2a00      	cmp	r2, #0
 800af80:	d002      	beq.n	800af88 <_dtoa_r+0x94>
 800af82:	4bb1      	ldr	r3, [pc, #708]	; (800b248 <_dtoa_r+0x354>)
 800af84:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	9806      	ldr	r0, [sp, #24]
 800af8a:	b01d      	add	sp, #116	; 0x74
 800af8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af8e:	2300      	movs	r3, #0
 800af90:	603b      	str	r3, [r7, #0]
 800af92:	e7e2      	b.n	800af5a <_dtoa_r+0x66>
 800af94:	9a08      	ldr	r2, [sp, #32]
 800af96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af98:	9210      	str	r2, [sp, #64]	; 0x40
 800af9a:	9311      	str	r3, [sp, #68]	; 0x44
 800af9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800af9e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800afa0:	2200      	movs	r2, #0
 800afa2:	2300      	movs	r3, #0
 800afa4:	f7f5 fa52 	bl	800044c <__aeabi_dcmpeq>
 800afa8:	1e06      	subs	r6, r0, #0
 800afaa:	d009      	beq.n	800afc0 <_dtoa_r+0xcc>
 800afac:	2301      	movs	r3, #1
 800afae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afb0:	6013      	str	r3, [r2, #0]
 800afb2:	4ba6      	ldr	r3, [pc, #664]	; (800b24c <_dtoa_r+0x358>)
 800afb4:	9306      	str	r3, [sp, #24]
 800afb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d0e5      	beq.n	800af88 <_dtoa_r+0x94>
 800afbc:	4ba4      	ldr	r3, [pc, #656]	; (800b250 <_dtoa_r+0x35c>)
 800afbe:	e7e1      	b.n	800af84 <_dtoa_r+0x90>
 800afc0:	ab1a      	add	r3, sp, #104	; 0x68
 800afc2:	9301      	str	r3, [sp, #4]
 800afc4:	ab1b      	add	r3, sp, #108	; 0x6c
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	9804      	ldr	r0, [sp, #16]
 800afca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afce:	f001 fa95 	bl	800c4fc <__d2b>
 800afd2:	007a      	lsls	r2, r7, #1
 800afd4:	9005      	str	r0, [sp, #20]
 800afd6:	0d52      	lsrs	r2, r2, #21
 800afd8:	d100      	bne.n	800afdc <_dtoa_r+0xe8>
 800afda:	e07b      	b.n	800b0d4 <_dtoa_r+0x1e0>
 800afdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afde:	9617      	str	r6, [sp, #92]	; 0x5c
 800afe0:	0319      	lsls	r1, r3, #12
 800afe2:	4b9c      	ldr	r3, [pc, #624]	; (800b254 <_dtoa_r+0x360>)
 800afe4:	0b09      	lsrs	r1, r1, #12
 800afe6:	430b      	orrs	r3, r1
 800afe8:	499b      	ldr	r1, [pc, #620]	; (800b258 <_dtoa_r+0x364>)
 800afea:	1857      	adds	r7, r2, r1
 800afec:	9810      	ldr	r0, [sp, #64]	; 0x40
 800afee:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aff0:	0019      	movs	r1, r3
 800aff2:	2200      	movs	r2, #0
 800aff4:	4b99      	ldr	r3, [pc, #612]	; (800b25c <_dtoa_r+0x368>)
 800aff6:	f7f7 f8ff 	bl	80021f8 <__aeabi_dsub>
 800affa:	4a99      	ldr	r2, [pc, #612]	; (800b260 <_dtoa_r+0x36c>)
 800affc:	4b99      	ldr	r3, [pc, #612]	; (800b264 <_dtoa_r+0x370>)
 800affe:	f7f6 fe39 	bl	8001c74 <__aeabi_dmul>
 800b002:	4a99      	ldr	r2, [pc, #612]	; (800b268 <_dtoa_r+0x374>)
 800b004:	4b99      	ldr	r3, [pc, #612]	; (800b26c <_dtoa_r+0x378>)
 800b006:	f7f5 fedb 	bl	8000dc0 <__aeabi_dadd>
 800b00a:	0004      	movs	r4, r0
 800b00c:	0038      	movs	r0, r7
 800b00e:	000d      	movs	r5, r1
 800b010:	f7f7 fcc8 	bl	80029a4 <__aeabi_i2d>
 800b014:	4a96      	ldr	r2, [pc, #600]	; (800b270 <_dtoa_r+0x37c>)
 800b016:	4b97      	ldr	r3, [pc, #604]	; (800b274 <_dtoa_r+0x380>)
 800b018:	f7f6 fe2c 	bl	8001c74 <__aeabi_dmul>
 800b01c:	0002      	movs	r2, r0
 800b01e:	000b      	movs	r3, r1
 800b020:	0020      	movs	r0, r4
 800b022:	0029      	movs	r1, r5
 800b024:	f7f5 fecc 	bl	8000dc0 <__aeabi_dadd>
 800b028:	0004      	movs	r4, r0
 800b02a:	000d      	movs	r5, r1
 800b02c:	f7f7 fc84 	bl	8002938 <__aeabi_d2iz>
 800b030:	2200      	movs	r2, #0
 800b032:	9003      	str	r0, [sp, #12]
 800b034:	2300      	movs	r3, #0
 800b036:	0020      	movs	r0, r4
 800b038:	0029      	movs	r1, r5
 800b03a:	f7f5 fa0d 	bl	8000458 <__aeabi_dcmplt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d00b      	beq.n	800b05a <_dtoa_r+0x166>
 800b042:	9803      	ldr	r0, [sp, #12]
 800b044:	f7f7 fcae 	bl	80029a4 <__aeabi_i2d>
 800b048:	002b      	movs	r3, r5
 800b04a:	0022      	movs	r2, r4
 800b04c:	f7f5 f9fe 	bl	800044c <__aeabi_dcmpeq>
 800b050:	4243      	negs	r3, r0
 800b052:	4158      	adcs	r0, r3
 800b054:	9b03      	ldr	r3, [sp, #12]
 800b056:	1a1b      	subs	r3, r3, r0
 800b058:	9303      	str	r3, [sp, #12]
 800b05a:	2301      	movs	r3, #1
 800b05c:	9316      	str	r3, [sp, #88]	; 0x58
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	2b16      	cmp	r3, #22
 800b062:	d810      	bhi.n	800b086 <_dtoa_r+0x192>
 800b064:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b066:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b068:	9a03      	ldr	r2, [sp, #12]
 800b06a:	4b83      	ldr	r3, [pc, #524]	; (800b278 <_dtoa_r+0x384>)
 800b06c:	00d2      	lsls	r2, r2, #3
 800b06e:	189b      	adds	r3, r3, r2
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	f7f5 f9f0 	bl	8000458 <__aeabi_dcmplt>
 800b078:	2800      	cmp	r0, #0
 800b07a:	d047      	beq.n	800b10c <_dtoa_r+0x218>
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	3b01      	subs	r3, #1
 800b080:	9303      	str	r3, [sp, #12]
 800b082:	2300      	movs	r3, #0
 800b084:	9316      	str	r3, [sp, #88]	; 0x58
 800b086:	2200      	movs	r2, #0
 800b088:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b08a:	920a      	str	r2, [sp, #40]	; 0x28
 800b08c:	1bdb      	subs	r3, r3, r7
 800b08e:	1e5a      	subs	r2, r3, #1
 800b090:	d53e      	bpl.n	800b110 <_dtoa_r+0x21c>
 800b092:	2201      	movs	r2, #1
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	930a      	str	r3, [sp, #40]	; 0x28
 800b098:	2300      	movs	r3, #0
 800b09a:	930c      	str	r3, [sp, #48]	; 0x30
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	db38      	blt.n	800b114 <_dtoa_r+0x220>
 800b0a2:	9a03      	ldr	r2, [sp, #12]
 800b0a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0a6:	4694      	mov	ip, r2
 800b0a8:	4463      	add	r3, ip
 800b0aa:	930c      	str	r3, [sp, #48]	; 0x30
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	9213      	str	r2, [sp, #76]	; 0x4c
 800b0b0:	930d      	str	r3, [sp, #52]	; 0x34
 800b0b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0b4:	2401      	movs	r4, #1
 800b0b6:	2b09      	cmp	r3, #9
 800b0b8:	d867      	bhi.n	800b18a <_dtoa_r+0x296>
 800b0ba:	2b05      	cmp	r3, #5
 800b0bc:	dd02      	ble.n	800b0c4 <_dtoa_r+0x1d0>
 800b0be:	2400      	movs	r4, #0
 800b0c0:	3b04      	subs	r3, #4
 800b0c2:	9322      	str	r3, [sp, #136]	; 0x88
 800b0c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0c6:	1e98      	subs	r0, r3, #2
 800b0c8:	2803      	cmp	r0, #3
 800b0ca:	d867      	bhi.n	800b19c <_dtoa_r+0x2a8>
 800b0cc:	f7f5 f824 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b0d0:	5b383a2b 	.word	0x5b383a2b
 800b0d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0d6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b0d8:	18f6      	adds	r6, r6, r3
 800b0da:	4b68      	ldr	r3, [pc, #416]	; (800b27c <_dtoa_r+0x388>)
 800b0dc:	18f2      	adds	r2, r6, r3
 800b0de:	2a20      	cmp	r2, #32
 800b0e0:	dd0f      	ble.n	800b102 <_dtoa_r+0x20e>
 800b0e2:	2340      	movs	r3, #64	; 0x40
 800b0e4:	1a9b      	subs	r3, r3, r2
 800b0e6:	409f      	lsls	r7, r3
 800b0e8:	4b65      	ldr	r3, [pc, #404]	; (800b280 <_dtoa_r+0x38c>)
 800b0ea:	0038      	movs	r0, r7
 800b0ec:	18f3      	adds	r3, r6, r3
 800b0ee:	40dc      	lsrs	r4, r3
 800b0f0:	4320      	orrs	r0, r4
 800b0f2:	f7f7 fc87 	bl	8002a04 <__aeabi_ui2d>
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4b62      	ldr	r3, [pc, #392]	; (800b284 <_dtoa_r+0x390>)
 800b0fa:	1e77      	subs	r7, r6, #1
 800b0fc:	18cb      	adds	r3, r1, r3
 800b0fe:	9217      	str	r2, [sp, #92]	; 0x5c
 800b100:	e776      	b.n	800aff0 <_dtoa_r+0xfc>
 800b102:	2320      	movs	r3, #32
 800b104:	0020      	movs	r0, r4
 800b106:	1a9b      	subs	r3, r3, r2
 800b108:	4098      	lsls	r0, r3
 800b10a:	e7f2      	b.n	800b0f2 <_dtoa_r+0x1fe>
 800b10c:	9016      	str	r0, [sp, #88]	; 0x58
 800b10e:	e7ba      	b.n	800b086 <_dtoa_r+0x192>
 800b110:	920c      	str	r2, [sp, #48]	; 0x30
 800b112:	e7c3      	b.n	800b09c <_dtoa_r+0x1a8>
 800b114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b116:	9a03      	ldr	r2, [sp, #12]
 800b118:	1a9b      	subs	r3, r3, r2
 800b11a:	930a      	str	r3, [sp, #40]	; 0x28
 800b11c:	4253      	negs	r3, r2
 800b11e:	930d      	str	r3, [sp, #52]	; 0x34
 800b120:	2300      	movs	r3, #0
 800b122:	9313      	str	r3, [sp, #76]	; 0x4c
 800b124:	e7c5      	b.n	800b0b2 <_dtoa_r+0x1be>
 800b126:	2300      	movs	r3, #0
 800b128:	930f      	str	r3, [sp, #60]	; 0x3c
 800b12a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b12c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b12e:	9307      	str	r3, [sp, #28]
 800b130:	2b00      	cmp	r3, #0
 800b132:	dc13      	bgt.n	800b15c <_dtoa_r+0x268>
 800b134:	2301      	movs	r3, #1
 800b136:	001a      	movs	r2, r3
 800b138:	930b      	str	r3, [sp, #44]	; 0x2c
 800b13a:	9307      	str	r3, [sp, #28]
 800b13c:	9223      	str	r2, [sp, #140]	; 0x8c
 800b13e:	e00d      	b.n	800b15c <_dtoa_r+0x268>
 800b140:	2301      	movs	r3, #1
 800b142:	e7f1      	b.n	800b128 <_dtoa_r+0x234>
 800b144:	2300      	movs	r3, #0
 800b146:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b148:	930f      	str	r3, [sp, #60]	; 0x3c
 800b14a:	4694      	mov	ip, r2
 800b14c:	9b03      	ldr	r3, [sp, #12]
 800b14e:	4463      	add	r3, ip
 800b150:	930b      	str	r3, [sp, #44]	; 0x2c
 800b152:	3301      	adds	r3, #1
 800b154:	9307      	str	r3, [sp, #28]
 800b156:	2b00      	cmp	r3, #0
 800b158:	dc00      	bgt.n	800b15c <_dtoa_r+0x268>
 800b15a:	2301      	movs	r3, #1
 800b15c:	9a04      	ldr	r2, [sp, #16]
 800b15e:	2100      	movs	r1, #0
 800b160:	69d0      	ldr	r0, [r2, #28]
 800b162:	2204      	movs	r2, #4
 800b164:	0015      	movs	r5, r2
 800b166:	3514      	adds	r5, #20
 800b168:	429d      	cmp	r5, r3
 800b16a:	d91b      	bls.n	800b1a4 <_dtoa_r+0x2b0>
 800b16c:	6041      	str	r1, [r0, #4]
 800b16e:	9804      	ldr	r0, [sp, #16]
 800b170:	f000 fdd6 	bl	800bd20 <_Balloc>
 800b174:	9006      	str	r0, [sp, #24]
 800b176:	2800      	cmp	r0, #0
 800b178:	d117      	bne.n	800b1aa <_dtoa_r+0x2b6>
 800b17a:	21b0      	movs	r1, #176	; 0xb0
 800b17c:	4b42      	ldr	r3, [pc, #264]	; (800b288 <_dtoa_r+0x394>)
 800b17e:	482e      	ldr	r0, [pc, #184]	; (800b238 <_dtoa_r+0x344>)
 800b180:	9a06      	ldr	r2, [sp, #24]
 800b182:	31ff      	adds	r1, #255	; 0xff
 800b184:	e6cb      	b.n	800af1e <_dtoa_r+0x2a>
 800b186:	2301      	movs	r3, #1
 800b188:	e7dd      	b.n	800b146 <_dtoa_r+0x252>
 800b18a:	2300      	movs	r3, #0
 800b18c:	940f      	str	r4, [sp, #60]	; 0x3c
 800b18e:	9322      	str	r3, [sp, #136]	; 0x88
 800b190:	3b01      	subs	r3, #1
 800b192:	930b      	str	r3, [sp, #44]	; 0x2c
 800b194:	9307      	str	r3, [sp, #28]
 800b196:	2200      	movs	r2, #0
 800b198:	3313      	adds	r3, #19
 800b19a:	e7cf      	b.n	800b13c <_dtoa_r+0x248>
 800b19c:	2301      	movs	r3, #1
 800b19e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1a0:	3b02      	subs	r3, #2
 800b1a2:	e7f6      	b.n	800b192 <_dtoa_r+0x29e>
 800b1a4:	3101      	adds	r1, #1
 800b1a6:	0052      	lsls	r2, r2, #1
 800b1a8:	e7dc      	b.n	800b164 <_dtoa_r+0x270>
 800b1aa:	9b04      	ldr	r3, [sp, #16]
 800b1ac:	9a06      	ldr	r2, [sp, #24]
 800b1ae:	69db      	ldr	r3, [r3, #28]
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	9b07      	ldr	r3, [sp, #28]
 800b1b4:	2b0e      	cmp	r3, #14
 800b1b6:	d900      	bls.n	800b1ba <_dtoa_r+0x2c6>
 800b1b8:	e0e5      	b.n	800b386 <_dtoa_r+0x492>
 800b1ba:	2c00      	cmp	r4, #0
 800b1bc:	d100      	bne.n	800b1c0 <_dtoa_r+0x2cc>
 800b1be:	e0e2      	b.n	800b386 <_dtoa_r+0x492>
 800b1c0:	9b03      	ldr	r3, [sp, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	dd64      	ble.n	800b290 <_dtoa_r+0x39c>
 800b1c6:	210f      	movs	r1, #15
 800b1c8:	9a03      	ldr	r2, [sp, #12]
 800b1ca:	4b2b      	ldr	r3, [pc, #172]	; (800b278 <_dtoa_r+0x384>)
 800b1cc:	400a      	ands	r2, r1
 800b1ce:	00d2      	lsls	r2, r2, #3
 800b1d0:	189b      	adds	r3, r3, r2
 800b1d2:	681e      	ldr	r6, [r3, #0]
 800b1d4:	685f      	ldr	r7, [r3, #4]
 800b1d6:	9b03      	ldr	r3, [sp, #12]
 800b1d8:	2402      	movs	r4, #2
 800b1da:	111d      	asrs	r5, r3, #4
 800b1dc:	05db      	lsls	r3, r3, #23
 800b1de:	d50a      	bpl.n	800b1f6 <_dtoa_r+0x302>
 800b1e0:	4b2a      	ldr	r3, [pc, #168]	; (800b28c <_dtoa_r+0x398>)
 800b1e2:	400d      	ands	r5, r1
 800b1e4:	6a1a      	ldr	r2, [r3, #32]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b1ea:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b1ec:	f7f6 f948 	bl	8001480 <__aeabi_ddiv>
 800b1f0:	9008      	str	r0, [sp, #32]
 800b1f2:	9109      	str	r1, [sp, #36]	; 0x24
 800b1f4:	3401      	adds	r4, #1
 800b1f6:	4b25      	ldr	r3, [pc, #148]	; (800b28c <_dtoa_r+0x398>)
 800b1f8:	930e      	str	r3, [sp, #56]	; 0x38
 800b1fa:	2d00      	cmp	r5, #0
 800b1fc:	d108      	bne.n	800b210 <_dtoa_r+0x31c>
 800b1fe:	9808      	ldr	r0, [sp, #32]
 800b200:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b202:	0032      	movs	r2, r6
 800b204:	003b      	movs	r3, r7
 800b206:	f7f6 f93b 	bl	8001480 <__aeabi_ddiv>
 800b20a:	9008      	str	r0, [sp, #32]
 800b20c:	9109      	str	r1, [sp, #36]	; 0x24
 800b20e:	e05a      	b.n	800b2c6 <_dtoa_r+0x3d2>
 800b210:	2301      	movs	r3, #1
 800b212:	421d      	tst	r5, r3
 800b214:	d009      	beq.n	800b22a <_dtoa_r+0x336>
 800b216:	18e4      	adds	r4, r4, r3
 800b218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b21a:	0030      	movs	r0, r6
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	0039      	movs	r1, r7
 800b222:	f7f6 fd27 	bl	8001c74 <__aeabi_dmul>
 800b226:	0006      	movs	r6, r0
 800b228:	000f      	movs	r7, r1
 800b22a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b22c:	106d      	asrs	r5, r5, #1
 800b22e:	3308      	adds	r3, #8
 800b230:	e7e2      	b.n	800b1f8 <_dtoa_r+0x304>
 800b232:	46c0      	nop			; (mov r8, r8)
 800b234:	0800ecb6 	.word	0x0800ecb6
 800b238:	0800eccd 	.word	0x0800eccd
 800b23c:	7ff00000 	.word	0x7ff00000
 800b240:	0000270f 	.word	0x0000270f
 800b244:	0800ecb2 	.word	0x0800ecb2
 800b248:	0800ecb5 	.word	0x0800ecb5
 800b24c:	0800ec80 	.word	0x0800ec80
 800b250:	0800ec81 	.word	0x0800ec81
 800b254:	3ff00000 	.word	0x3ff00000
 800b258:	fffffc01 	.word	0xfffffc01
 800b25c:	3ff80000 	.word	0x3ff80000
 800b260:	636f4361 	.word	0x636f4361
 800b264:	3fd287a7 	.word	0x3fd287a7
 800b268:	8b60c8b3 	.word	0x8b60c8b3
 800b26c:	3fc68a28 	.word	0x3fc68a28
 800b270:	509f79fb 	.word	0x509f79fb
 800b274:	3fd34413 	.word	0x3fd34413
 800b278:	0800edb8 	.word	0x0800edb8
 800b27c:	00000432 	.word	0x00000432
 800b280:	00000412 	.word	0x00000412
 800b284:	fe100000 	.word	0xfe100000
 800b288:	0800ed25 	.word	0x0800ed25
 800b28c:	0800ed90 	.word	0x0800ed90
 800b290:	9b03      	ldr	r3, [sp, #12]
 800b292:	2402      	movs	r4, #2
 800b294:	2b00      	cmp	r3, #0
 800b296:	d016      	beq.n	800b2c6 <_dtoa_r+0x3d2>
 800b298:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b29a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b29c:	220f      	movs	r2, #15
 800b29e:	425d      	negs	r5, r3
 800b2a0:	402a      	ands	r2, r5
 800b2a2:	4bdd      	ldr	r3, [pc, #884]	; (800b618 <_dtoa_r+0x724>)
 800b2a4:	00d2      	lsls	r2, r2, #3
 800b2a6:	189b      	adds	r3, r3, r2
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	f7f6 fce2 	bl	8001c74 <__aeabi_dmul>
 800b2b0:	2701      	movs	r7, #1
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9008      	str	r0, [sp, #32]
 800b2b6:	9109      	str	r1, [sp, #36]	; 0x24
 800b2b8:	4ed8      	ldr	r6, [pc, #864]	; (800b61c <_dtoa_r+0x728>)
 800b2ba:	112d      	asrs	r5, r5, #4
 800b2bc:	2d00      	cmp	r5, #0
 800b2be:	d000      	beq.n	800b2c2 <_dtoa_r+0x3ce>
 800b2c0:	e091      	b.n	800b3e6 <_dtoa_r+0x4f2>
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1a1      	bne.n	800b20a <_dtoa_r+0x316>
 800b2c6:	9e08      	ldr	r6, [sp, #32]
 800b2c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b2ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d100      	bne.n	800b2d2 <_dtoa_r+0x3de>
 800b2d0:	e094      	b.n	800b3fc <_dtoa_r+0x508>
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	0030      	movs	r0, r6
 800b2d6:	0039      	movs	r1, r7
 800b2d8:	4bd1      	ldr	r3, [pc, #836]	; (800b620 <_dtoa_r+0x72c>)
 800b2da:	f7f5 f8bd 	bl	8000458 <__aeabi_dcmplt>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d100      	bne.n	800b2e4 <_dtoa_r+0x3f0>
 800b2e2:	e08b      	b.n	800b3fc <_dtoa_r+0x508>
 800b2e4:	9b07      	ldr	r3, [sp, #28]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d100      	bne.n	800b2ec <_dtoa_r+0x3f8>
 800b2ea:	e087      	b.n	800b3fc <_dtoa_r+0x508>
 800b2ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	dd45      	ble.n	800b37e <_dtoa_r+0x48a>
 800b2f2:	9b03      	ldr	r3, [sp, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	930e      	str	r3, [sp, #56]	; 0x38
 800b2fa:	0030      	movs	r0, r6
 800b2fc:	4bc9      	ldr	r3, [pc, #804]	; (800b624 <_dtoa_r+0x730>)
 800b2fe:	0039      	movs	r1, r7
 800b300:	f7f6 fcb8 	bl	8001c74 <__aeabi_dmul>
 800b304:	9008      	str	r0, [sp, #32]
 800b306:	9109      	str	r1, [sp, #36]	; 0x24
 800b308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b30a:	3401      	adds	r4, #1
 800b30c:	0020      	movs	r0, r4
 800b30e:	9e08      	ldr	r6, [sp, #32]
 800b310:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b312:	9312      	str	r3, [sp, #72]	; 0x48
 800b314:	f7f7 fb46 	bl	80029a4 <__aeabi_i2d>
 800b318:	0032      	movs	r2, r6
 800b31a:	003b      	movs	r3, r7
 800b31c:	f7f6 fcaa 	bl	8001c74 <__aeabi_dmul>
 800b320:	2200      	movs	r2, #0
 800b322:	4bc1      	ldr	r3, [pc, #772]	; (800b628 <_dtoa_r+0x734>)
 800b324:	f7f5 fd4c 	bl	8000dc0 <__aeabi_dadd>
 800b328:	4ac0      	ldr	r2, [pc, #768]	; (800b62c <_dtoa_r+0x738>)
 800b32a:	9014      	str	r0, [sp, #80]	; 0x50
 800b32c:	9115      	str	r1, [sp, #84]	; 0x54
 800b32e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b330:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b332:	4694      	mov	ip, r2
 800b334:	9308      	str	r3, [sp, #32]
 800b336:	9409      	str	r4, [sp, #36]	; 0x24
 800b338:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b33a:	4463      	add	r3, ip
 800b33c:	9318      	str	r3, [sp, #96]	; 0x60
 800b33e:	9309      	str	r3, [sp, #36]	; 0x24
 800b340:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b342:	2b00      	cmp	r3, #0
 800b344:	d15e      	bne.n	800b404 <_dtoa_r+0x510>
 800b346:	2200      	movs	r2, #0
 800b348:	4bb9      	ldr	r3, [pc, #740]	; (800b630 <_dtoa_r+0x73c>)
 800b34a:	0030      	movs	r0, r6
 800b34c:	0039      	movs	r1, r7
 800b34e:	f7f6 ff53 	bl	80021f8 <__aeabi_dsub>
 800b352:	9a08      	ldr	r2, [sp, #32]
 800b354:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b356:	0004      	movs	r4, r0
 800b358:	000d      	movs	r5, r1
 800b35a:	f7f5 f891 	bl	8000480 <__aeabi_dcmpgt>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d000      	beq.n	800b364 <_dtoa_r+0x470>
 800b362:	e2b3      	b.n	800b8cc <_dtoa_r+0x9d8>
 800b364:	48b3      	ldr	r0, [pc, #716]	; (800b634 <_dtoa_r+0x740>)
 800b366:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b368:	4684      	mov	ip, r0
 800b36a:	4461      	add	r1, ip
 800b36c:	000b      	movs	r3, r1
 800b36e:	0020      	movs	r0, r4
 800b370:	0029      	movs	r1, r5
 800b372:	9a08      	ldr	r2, [sp, #32]
 800b374:	f7f5 f870 	bl	8000458 <__aeabi_dcmplt>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d000      	beq.n	800b37e <_dtoa_r+0x48a>
 800b37c:	e2a3      	b.n	800b8c6 <_dtoa_r+0x9d2>
 800b37e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b380:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b382:	9308      	str	r3, [sp, #32]
 800b384:	9409      	str	r4, [sp, #36]	; 0x24
 800b386:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b388:	2b00      	cmp	r3, #0
 800b38a:	da00      	bge.n	800b38e <_dtoa_r+0x49a>
 800b38c:	e179      	b.n	800b682 <_dtoa_r+0x78e>
 800b38e:	9a03      	ldr	r2, [sp, #12]
 800b390:	2a0e      	cmp	r2, #14
 800b392:	dd00      	ble.n	800b396 <_dtoa_r+0x4a2>
 800b394:	e175      	b.n	800b682 <_dtoa_r+0x78e>
 800b396:	4ba0      	ldr	r3, [pc, #640]	; (800b618 <_dtoa_r+0x724>)
 800b398:	00d2      	lsls	r2, r2, #3
 800b39a:	189b      	adds	r3, r3, r2
 800b39c:	681e      	ldr	r6, [r3, #0]
 800b39e:	685f      	ldr	r7, [r3, #4]
 800b3a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	db00      	blt.n	800b3a8 <_dtoa_r+0x4b4>
 800b3a6:	e0e5      	b.n	800b574 <_dtoa_r+0x680>
 800b3a8:	9b07      	ldr	r3, [sp, #28]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	dd00      	ble.n	800b3b0 <_dtoa_r+0x4bc>
 800b3ae:	e0e1      	b.n	800b574 <_dtoa_r+0x680>
 800b3b0:	d000      	beq.n	800b3b4 <_dtoa_r+0x4c0>
 800b3b2:	e288      	b.n	800b8c6 <_dtoa_r+0x9d2>
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	0030      	movs	r0, r6
 800b3b8:	0039      	movs	r1, r7
 800b3ba:	4b9d      	ldr	r3, [pc, #628]	; (800b630 <_dtoa_r+0x73c>)
 800b3bc:	f7f6 fc5a 	bl	8001c74 <__aeabi_dmul>
 800b3c0:	9a08      	ldr	r2, [sp, #32]
 800b3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c4:	f7f5 f866 	bl	8000494 <__aeabi_dcmpge>
 800b3c8:	9e07      	ldr	r6, [sp, #28]
 800b3ca:	0037      	movs	r7, r6
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d000      	beq.n	800b3d2 <_dtoa_r+0x4de>
 800b3d0:	e25f      	b.n	800b892 <_dtoa_r+0x99e>
 800b3d2:	9b06      	ldr	r3, [sp, #24]
 800b3d4:	9a06      	ldr	r2, [sp, #24]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	9308      	str	r3, [sp, #32]
 800b3da:	2331      	movs	r3, #49	; 0x31
 800b3dc:	7013      	strb	r3, [r2, #0]
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	9303      	str	r3, [sp, #12]
 800b3e4:	e25a      	b.n	800b89c <_dtoa_r+0x9a8>
 800b3e6:	423d      	tst	r5, r7
 800b3e8:	d005      	beq.n	800b3f6 <_dtoa_r+0x502>
 800b3ea:	6832      	ldr	r2, [r6, #0]
 800b3ec:	6873      	ldr	r3, [r6, #4]
 800b3ee:	f7f6 fc41 	bl	8001c74 <__aeabi_dmul>
 800b3f2:	003b      	movs	r3, r7
 800b3f4:	3401      	adds	r4, #1
 800b3f6:	106d      	asrs	r5, r5, #1
 800b3f8:	3608      	adds	r6, #8
 800b3fa:	e75f      	b.n	800b2bc <_dtoa_r+0x3c8>
 800b3fc:	9b03      	ldr	r3, [sp, #12]
 800b3fe:	930e      	str	r3, [sp, #56]	; 0x38
 800b400:	9b07      	ldr	r3, [sp, #28]
 800b402:	e783      	b.n	800b30c <_dtoa_r+0x418>
 800b404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b406:	4b84      	ldr	r3, [pc, #528]	; (800b618 <_dtoa_r+0x724>)
 800b408:	3a01      	subs	r2, #1
 800b40a:	00d2      	lsls	r2, r2, #3
 800b40c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b40e:	189b      	adds	r3, r3, r2
 800b410:	9c08      	ldr	r4, [sp, #32]
 800b412:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	2900      	cmp	r1, #0
 800b41a:	d051      	beq.n	800b4c0 <_dtoa_r+0x5cc>
 800b41c:	2000      	movs	r0, #0
 800b41e:	4986      	ldr	r1, [pc, #536]	; (800b638 <_dtoa_r+0x744>)
 800b420:	f7f6 f82e 	bl	8001480 <__aeabi_ddiv>
 800b424:	0022      	movs	r2, r4
 800b426:	002b      	movs	r3, r5
 800b428:	f7f6 fee6 	bl	80021f8 <__aeabi_dsub>
 800b42c:	9a06      	ldr	r2, [sp, #24]
 800b42e:	0004      	movs	r4, r0
 800b430:	4694      	mov	ip, r2
 800b432:	000d      	movs	r5, r1
 800b434:	9b06      	ldr	r3, [sp, #24]
 800b436:	9314      	str	r3, [sp, #80]	; 0x50
 800b438:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b43a:	4463      	add	r3, ip
 800b43c:	9318      	str	r3, [sp, #96]	; 0x60
 800b43e:	0039      	movs	r1, r7
 800b440:	0030      	movs	r0, r6
 800b442:	f7f7 fa79 	bl	8002938 <__aeabi_d2iz>
 800b446:	9012      	str	r0, [sp, #72]	; 0x48
 800b448:	f7f7 faac 	bl	80029a4 <__aeabi_i2d>
 800b44c:	0002      	movs	r2, r0
 800b44e:	000b      	movs	r3, r1
 800b450:	0030      	movs	r0, r6
 800b452:	0039      	movs	r1, r7
 800b454:	f7f6 fed0 	bl	80021f8 <__aeabi_dsub>
 800b458:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b45a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b45c:	3301      	adds	r3, #1
 800b45e:	9308      	str	r3, [sp, #32]
 800b460:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b462:	0006      	movs	r6, r0
 800b464:	3330      	adds	r3, #48	; 0x30
 800b466:	7013      	strb	r3, [r2, #0]
 800b468:	0022      	movs	r2, r4
 800b46a:	002b      	movs	r3, r5
 800b46c:	000f      	movs	r7, r1
 800b46e:	f7f4 fff3 	bl	8000458 <__aeabi_dcmplt>
 800b472:	2800      	cmp	r0, #0
 800b474:	d174      	bne.n	800b560 <_dtoa_r+0x66c>
 800b476:	0032      	movs	r2, r6
 800b478:	003b      	movs	r3, r7
 800b47a:	2000      	movs	r0, #0
 800b47c:	4968      	ldr	r1, [pc, #416]	; (800b620 <_dtoa_r+0x72c>)
 800b47e:	f7f6 febb 	bl	80021f8 <__aeabi_dsub>
 800b482:	0022      	movs	r2, r4
 800b484:	002b      	movs	r3, r5
 800b486:	f7f4 ffe7 	bl	8000458 <__aeabi_dcmplt>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d000      	beq.n	800b490 <_dtoa_r+0x59c>
 800b48e:	e0d7      	b.n	800b640 <_dtoa_r+0x74c>
 800b490:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b492:	9a08      	ldr	r2, [sp, #32]
 800b494:	4293      	cmp	r3, r2
 800b496:	d100      	bne.n	800b49a <_dtoa_r+0x5a6>
 800b498:	e771      	b.n	800b37e <_dtoa_r+0x48a>
 800b49a:	2200      	movs	r2, #0
 800b49c:	0020      	movs	r0, r4
 800b49e:	0029      	movs	r1, r5
 800b4a0:	4b60      	ldr	r3, [pc, #384]	; (800b624 <_dtoa_r+0x730>)
 800b4a2:	f7f6 fbe7 	bl	8001c74 <__aeabi_dmul>
 800b4a6:	4b5f      	ldr	r3, [pc, #380]	; (800b624 <_dtoa_r+0x730>)
 800b4a8:	0004      	movs	r4, r0
 800b4aa:	000d      	movs	r5, r1
 800b4ac:	0030      	movs	r0, r6
 800b4ae:	0039      	movs	r1, r7
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f7f6 fbdf 	bl	8001c74 <__aeabi_dmul>
 800b4b6:	9b08      	ldr	r3, [sp, #32]
 800b4b8:	0006      	movs	r6, r0
 800b4ba:	000f      	movs	r7, r1
 800b4bc:	9314      	str	r3, [sp, #80]	; 0x50
 800b4be:	e7be      	b.n	800b43e <_dtoa_r+0x54a>
 800b4c0:	0020      	movs	r0, r4
 800b4c2:	0029      	movs	r1, r5
 800b4c4:	f7f6 fbd6 	bl	8001c74 <__aeabi_dmul>
 800b4c8:	9a06      	ldr	r2, [sp, #24]
 800b4ca:	9b06      	ldr	r3, [sp, #24]
 800b4cc:	4694      	mov	ip, r2
 800b4ce:	9308      	str	r3, [sp, #32]
 800b4d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4d2:	9014      	str	r0, [sp, #80]	; 0x50
 800b4d4:	9115      	str	r1, [sp, #84]	; 0x54
 800b4d6:	4463      	add	r3, ip
 800b4d8:	9319      	str	r3, [sp, #100]	; 0x64
 800b4da:	0030      	movs	r0, r6
 800b4dc:	0039      	movs	r1, r7
 800b4de:	f7f7 fa2b 	bl	8002938 <__aeabi_d2iz>
 800b4e2:	9018      	str	r0, [sp, #96]	; 0x60
 800b4e4:	f7f7 fa5e 	bl	80029a4 <__aeabi_i2d>
 800b4e8:	0002      	movs	r2, r0
 800b4ea:	000b      	movs	r3, r1
 800b4ec:	0030      	movs	r0, r6
 800b4ee:	0039      	movs	r1, r7
 800b4f0:	f7f6 fe82 	bl	80021f8 <__aeabi_dsub>
 800b4f4:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b4f6:	9b08      	ldr	r3, [sp, #32]
 800b4f8:	3630      	adds	r6, #48	; 0x30
 800b4fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b4fc:	701e      	strb	r6, [r3, #0]
 800b4fe:	3301      	adds	r3, #1
 800b500:	0004      	movs	r4, r0
 800b502:	000d      	movs	r5, r1
 800b504:	9308      	str	r3, [sp, #32]
 800b506:	4293      	cmp	r3, r2
 800b508:	d12d      	bne.n	800b566 <_dtoa_r+0x672>
 800b50a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b50c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b50e:	9a06      	ldr	r2, [sp, #24]
 800b510:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b512:	4694      	mov	ip, r2
 800b514:	4463      	add	r3, ip
 800b516:	2200      	movs	r2, #0
 800b518:	9308      	str	r3, [sp, #32]
 800b51a:	4b47      	ldr	r3, [pc, #284]	; (800b638 <_dtoa_r+0x744>)
 800b51c:	f7f5 fc50 	bl	8000dc0 <__aeabi_dadd>
 800b520:	0002      	movs	r2, r0
 800b522:	000b      	movs	r3, r1
 800b524:	0020      	movs	r0, r4
 800b526:	0029      	movs	r1, r5
 800b528:	f7f4 ffaa 	bl	8000480 <__aeabi_dcmpgt>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d000      	beq.n	800b532 <_dtoa_r+0x63e>
 800b530:	e086      	b.n	800b640 <_dtoa_r+0x74c>
 800b532:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b536:	2000      	movs	r0, #0
 800b538:	493f      	ldr	r1, [pc, #252]	; (800b638 <_dtoa_r+0x744>)
 800b53a:	f7f6 fe5d 	bl	80021f8 <__aeabi_dsub>
 800b53e:	0002      	movs	r2, r0
 800b540:	000b      	movs	r3, r1
 800b542:	0020      	movs	r0, r4
 800b544:	0029      	movs	r1, r5
 800b546:	f7f4 ff87 	bl	8000458 <__aeabi_dcmplt>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d100      	bne.n	800b550 <_dtoa_r+0x65c>
 800b54e:	e716      	b.n	800b37e <_dtoa_r+0x48a>
 800b550:	9b08      	ldr	r3, [sp, #32]
 800b552:	001a      	movs	r2, r3
 800b554:	3a01      	subs	r2, #1
 800b556:	9208      	str	r2, [sp, #32]
 800b558:	7812      	ldrb	r2, [r2, #0]
 800b55a:	2a30      	cmp	r2, #48	; 0x30
 800b55c:	d0f8      	beq.n	800b550 <_dtoa_r+0x65c>
 800b55e:	9308      	str	r3, [sp, #32]
 800b560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b562:	9303      	str	r3, [sp, #12]
 800b564:	e046      	b.n	800b5f4 <_dtoa_r+0x700>
 800b566:	2200      	movs	r2, #0
 800b568:	4b2e      	ldr	r3, [pc, #184]	; (800b624 <_dtoa_r+0x730>)
 800b56a:	f7f6 fb83 	bl	8001c74 <__aeabi_dmul>
 800b56e:	0006      	movs	r6, r0
 800b570:	000f      	movs	r7, r1
 800b572:	e7b2      	b.n	800b4da <_dtoa_r+0x5e6>
 800b574:	9b06      	ldr	r3, [sp, #24]
 800b576:	9a06      	ldr	r2, [sp, #24]
 800b578:	930a      	str	r3, [sp, #40]	; 0x28
 800b57a:	9b07      	ldr	r3, [sp, #28]
 800b57c:	9c08      	ldr	r4, [sp, #32]
 800b57e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b580:	3b01      	subs	r3, #1
 800b582:	189b      	adds	r3, r3, r2
 800b584:	930b      	str	r3, [sp, #44]	; 0x2c
 800b586:	0032      	movs	r2, r6
 800b588:	003b      	movs	r3, r7
 800b58a:	0020      	movs	r0, r4
 800b58c:	0029      	movs	r1, r5
 800b58e:	f7f5 ff77 	bl	8001480 <__aeabi_ddiv>
 800b592:	f7f7 f9d1 	bl	8002938 <__aeabi_d2iz>
 800b596:	9007      	str	r0, [sp, #28]
 800b598:	f7f7 fa04 	bl	80029a4 <__aeabi_i2d>
 800b59c:	0032      	movs	r2, r6
 800b59e:	003b      	movs	r3, r7
 800b5a0:	f7f6 fb68 	bl	8001c74 <__aeabi_dmul>
 800b5a4:	0002      	movs	r2, r0
 800b5a6:	000b      	movs	r3, r1
 800b5a8:	0020      	movs	r0, r4
 800b5aa:	0029      	movs	r1, r5
 800b5ac:	f7f6 fe24 	bl	80021f8 <__aeabi_dsub>
 800b5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b2:	001a      	movs	r2, r3
 800b5b4:	3201      	adds	r2, #1
 800b5b6:	920a      	str	r2, [sp, #40]	; 0x28
 800b5b8:	9208      	str	r2, [sp, #32]
 800b5ba:	9a07      	ldr	r2, [sp, #28]
 800b5bc:	3230      	adds	r2, #48	; 0x30
 800b5be:	701a      	strb	r2, [r3, #0]
 800b5c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d14f      	bne.n	800b666 <_dtoa_r+0x772>
 800b5c6:	0002      	movs	r2, r0
 800b5c8:	000b      	movs	r3, r1
 800b5ca:	f7f5 fbf9 	bl	8000dc0 <__aeabi_dadd>
 800b5ce:	0032      	movs	r2, r6
 800b5d0:	003b      	movs	r3, r7
 800b5d2:	0004      	movs	r4, r0
 800b5d4:	000d      	movs	r5, r1
 800b5d6:	f7f4 ff53 	bl	8000480 <__aeabi_dcmpgt>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d12e      	bne.n	800b63c <_dtoa_r+0x748>
 800b5de:	0032      	movs	r2, r6
 800b5e0:	003b      	movs	r3, r7
 800b5e2:	0020      	movs	r0, r4
 800b5e4:	0029      	movs	r1, r5
 800b5e6:	f7f4 ff31 	bl	800044c <__aeabi_dcmpeq>
 800b5ea:	2800      	cmp	r0, #0
 800b5ec:	d002      	beq.n	800b5f4 <_dtoa_r+0x700>
 800b5ee:	9b07      	ldr	r3, [sp, #28]
 800b5f0:	07de      	lsls	r6, r3, #31
 800b5f2:	d423      	bmi.n	800b63c <_dtoa_r+0x748>
 800b5f4:	9905      	ldr	r1, [sp, #20]
 800b5f6:	9804      	ldr	r0, [sp, #16]
 800b5f8:	f000 fbd6 	bl	800bda8 <_Bfree>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	9a08      	ldr	r2, [sp, #32]
 800b600:	7013      	strb	r3, [r2, #0]
 800b602:	9b03      	ldr	r3, [sp, #12]
 800b604:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b606:	3301      	adds	r3, #1
 800b608:	6013      	str	r3, [r2, #0]
 800b60a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d100      	bne.n	800b612 <_dtoa_r+0x71e>
 800b610:	e4ba      	b.n	800af88 <_dtoa_r+0x94>
 800b612:	9a08      	ldr	r2, [sp, #32]
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	e4b7      	b.n	800af88 <_dtoa_r+0x94>
 800b618:	0800edb8 	.word	0x0800edb8
 800b61c:	0800ed90 	.word	0x0800ed90
 800b620:	3ff00000 	.word	0x3ff00000
 800b624:	40240000 	.word	0x40240000
 800b628:	401c0000 	.word	0x401c0000
 800b62c:	fcc00000 	.word	0xfcc00000
 800b630:	40140000 	.word	0x40140000
 800b634:	7cc00000 	.word	0x7cc00000
 800b638:	3fe00000 	.word	0x3fe00000
 800b63c:	9b03      	ldr	r3, [sp, #12]
 800b63e:	930e      	str	r3, [sp, #56]	; 0x38
 800b640:	9b08      	ldr	r3, [sp, #32]
 800b642:	9308      	str	r3, [sp, #32]
 800b644:	3b01      	subs	r3, #1
 800b646:	781a      	ldrb	r2, [r3, #0]
 800b648:	2a39      	cmp	r2, #57	; 0x39
 800b64a:	d108      	bne.n	800b65e <_dtoa_r+0x76a>
 800b64c:	9a06      	ldr	r2, [sp, #24]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d1f7      	bne.n	800b642 <_dtoa_r+0x74e>
 800b652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b654:	9906      	ldr	r1, [sp, #24]
 800b656:	3201      	adds	r2, #1
 800b658:	920e      	str	r2, [sp, #56]	; 0x38
 800b65a:	2230      	movs	r2, #48	; 0x30
 800b65c:	700a      	strb	r2, [r1, #0]
 800b65e:	781a      	ldrb	r2, [r3, #0]
 800b660:	3201      	adds	r2, #1
 800b662:	701a      	strb	r2, [r3, #0]
 800b664:	e77c      	b.n	800b560 <_dtoa_r+0x66c>
 800b666:	2200      	movs	r2, #0
 800b668:	4ba9      	ldr	r3, [pc, #676]	; (800b910 <_dtoa_r+0xa1c>)
 800b66a:	f7f6 fb03 	bl	8001c74 <__aeabi_dmul>
 800b66e:	2200      	movs	r2, #0
 800b670:	2300      	movs	r3, #0
 800b672:	0004      	movs	r4, r0
 800b674:	000d      	movs	r5, r1
 800b676:	f7f4 fee9 	bl	800044c <__aeabi_dcmpeq>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d100      	bne.n	800b680 <_dtoa_r+0x78c>
 800b67e:	e782      	b.n	800b586 <_dtoa_r+0x692>
 800b680:	e7b8      	b.n	800b5f4 <_dtoa_r+0x700>
 800b682:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b684:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b686:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b688:	2f00      	cmp	r7, #0
 800b68a:	d012      	beq.n	800b6b2 <_dtoa_r+0x7be>
 800b68c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b68e:	2a01      	cmp	r2, #1
 800b690:	dc6e      	bgt.n	800b770 <_dtoa_r+0x87c>
 800b692:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b694:	2a00      	cmp	r2, #0
 800b696:	d065      	beq.n	800b764 <_dtoa_r+0x870>
 800b698:	4a9e      	ldr	r2, [pc, #632]	; (800b914 <_dtoa_r+0xa20>)
 800b69a:	189b      	adds	r3, r3, r2
 800b69c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b69e:	2101      	movs	r1, #1
 800b6a0:	18d2      	adds	r2, r2, r3
 800b6a2:	920a      	str	r2, [sp, #40]	; 0x28
 800b6a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6a6:	9804      	ldr	r0, [sp, #16]
 800b6a8:	18d3      	adds	r3, r2, r3
 800b6aa:	930c      	str	r3, [sp, #48]	; 0x30
 800b6ac:	f000 fc78 	bl	800bfa0 <__i2b>
 800b6b0:	0007      	movs	r7, r0
 800b6b2:	2c00      	cmp	r4, #0
 800b6b4:	d00e      	beq.n	800b6d4 <_dtoa_r+0x7e0>
 800b6b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	dd0b      	ble.n	800b6d4 <_dtoa_r+0x7e0>
 800b6bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6be:	0023      	movs	r3, r4
 800b6c0:	4294      	cmp	r4, r2
 800b6c2:	dd00      	ble.n	800b6c6 <_dtoa_r+0x7d2>
 800b6c4:	0013      	movs	r3, r2
 800b6c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6c8:	1ae4      	subs	r4, r4, r3
 800b6ca:	1ad2      	subs	r2, r2, r3
 800b6cc:	920a      	str	r2, [sp, #40]	; 0x28
 800b6ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	930c      	str	r3, [sp, #48]	; 0x30
 800b6d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d01e      	beq.n	800b718 <_dtoa_r+0x824>
 800b6da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d05c      	beq.n	800b79a <_dtoa_r+0x8a6>
 800b6e0:	2d00      	cmp	r5, #0
 800b6e2:	dd10      	ble.n	800b706 <_dtoa_r+0x812>
 800b6e4:	0039      	movs	r1, r7
 800b6e6:	002a      	movs	r2, r5
 800b6e8:	9804      	ldr	r0, [sp, #16]
 800b6ea:	f000 fd21 	bl	800c130 <__pow5mult>
 800b6ee:	9a05      	ldr	r2, [sp, #20]
 800b6f0:	0001      	movs	r1, r0
 800b6f2:	0007      	movs	r7, r0
 800b6f4:	9804      	ldr	r0, [sp, #16]
 800b6f6:	f000 fc6b 	bl	800bfd0 <__multiply>
 800b6fa:	0006      	movs	r6, r0
 800b6fc:	9905      	ldr	r1, [sp, #20]
 800b6fe:	9804      	ldr	r0, [sp, #16]
 800b700:	f000 fb52 	bl	800bda8 <_Bfree>
 800b704:	9605      	str	r6, [sp, #20]
 800b706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b708:	1b5a      	subs	r2, r3, r5
 800b70a:	42ab      	cmp	r3, r5
 800b70c:	d004      	beq.n	800b718 <_dtoa_r+0x824>
 800b70e:	9905      	ldr	r1, [sp, #20]
 800b710:	9804      	ldr	r0, [sp, #16]
 800b712:	f000 fd0d 	bl	800c130 <__pow5mult>
 800b716:	9005      	str	r0, [sp, #20]
 800b718:	2101      	movs	r1, #1
 800b71a:	9804      	ldr	r0, [sp, #16]
 800b71c:	f000 fc40 	bl	800bfa0 <__i2b>
 800b720:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b722:	0006      	movs	r6, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	dd3a      	ble.n	800b79e <_dtoa_r+0x8aa>
 800b728:	001a      	movs	r2, r3
 800b72a:	0001      	movs	r1, r0
 800b72c:	9804      	ldr	r0, [sp, #16]
 800b72e:	f000 fcff 	bl	800c130 <__pow5mult>
 800b732:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b734:	0006      	movs	r6, r0
 800b736:	2500      	movs	r5, #0
 800b738:	2b01      	cmp	r3, #1
 800b73a:	dc38      	bgt.n	800b7ae <_dtoa_r+0x8ba>
 800b73c:	2500      	movs	r5, #0
 800b73e:	9b08      	ldr	r3, [sp, #32]
 800b740:	42ab      	cmp	r3, r5
 800b742:	d130      	bne.n	800b7a6 <_dtoa_r+0x8b2>
 800b744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b746:	031b      	lsls	r3, r3, #12
 800b748:	42ab      	cmp	r3, r5
 800b74a:	d12c      	bne.n	800b7a6 <_dtoa_r+0x8b2>
 800b74c:	4b72      	ldr	r3, [pc, #456]	; (800b918 <_dtoa_r+0xa24>)
 800b74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b750:	4213      	tst	r3, r2
 800b752:	d028      	beq.n	800b7a6 <_dtoa_r+0x8b2>
 800b754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b756:	3501      	adds	r5, #1
 800b758:	3301      	adds	r3, #1
 800b75a:	930a      	str	r3, [sp, #40]	; 0x28
 800b75c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b75e:	3301      	adds	r3, #1
 800b760:	930c      	str	r3, [sp, #48]	; 0x30
 800b762:	e020      	b.n	800b7a6 <_dtoa_r+0x8b2>
 800b764:	2336      	movs	r3, #54	; 0x36
 800b766:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b768:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b76a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b76c:	1a9b      	subs	r3, r3, r2
 800b76e:	e795      	b.n	800b69c <_dtoa_r+0x7a8>
 800b770:	9b07      	ldr	r3, [sp, #28]
 800b772:	1e5d      	subs	r5, r3, #1
 800b774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b776:	42ab      	cmp	r3, r5
 800b778:	db07      	blt.n	800b78a <_dtoa_r+0x896>
 800b77a:	1b5d      	subs	r5, r3, r5
 800b77c:	9b07      	ldr	r3, [sp, #28]
 800b77e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b780:	2b00      	cmp	r3, #0
 800b782:	da8b      	bge.n	800b69c <_dtoa_r+0x7a8>
 800b784:	1ae4      	subs	r4, r4, r3
 800b786:	2300      	movs	r3, #0
 800b788:	e788      	b.n	800b69c <_dtoa_r+0x7a8>
 800b78a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b78c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b78e:	1aeb      	subs	r3, r5, r3
 800b790:	18d3      	adds	r3, r2, r3
 800b792:	950d      	str	r5, [sp, #52]	; 0x34
 800b794:	9313      	str	r3, [sp, #76]	; 0x4c
 800b796:	2500      	movs	r5, #0
 800b798:	e7f0      	b.n	800b77c <_dtoa_r+0x888>
 800b79a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b79c:	e7b7      	b.n	800b70e <_dtoa_r+0x81a>
 800b79e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b7a0:	2500      	movs	r5, #0
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	ddca      	ble.n	800b73c <_dtoa_r+0x848>
 800b7a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7a8:	2001      	movs	r0, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d008      	beq.n	800b7c0 <_dtoa_r+0x8cc>
 800b7ae:	6933      	ldr	r3, [r6, #16]
 800b7b0:	3303      	adds	r3, #3
 800b7b2:	009b      	lsls	r3, r3, #2
 800b7b4:	18f3      	adds	r3, r6, r3
 800b7b6:	6858      	ldr	r0, [r3, #4]
 800b7b8:	f000 fbaa 	bl	800bf10 <__hi0bits>
 800b7bc:	2320      	movs	r3, #32
 800b7be:	1a18      	subs	r0, r3, r0
 800b7c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7c2:	1818      	adds	r0, r3, r0
 800b7c4:	0002      	movs	r2, r0
 800b7c6:	231f      	movs	r3, #31
 800b7c8:	401a      	ands	r2, r3
 800b7ca:	4218      	tst	r0, r3
 800b7cc:	d047      	beq.n	800b85e <_dtoa_r+0x96a>
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	1a9b      	subs	r3, r3, r2
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	dd3f      	ble.n	800b856 <_dtoa_r+0x962>
 800b7d6:	231c      	movs	r3, #28
 800b7d8:	1a9b      	subs	r3, r3, r2
 800b7da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7dc:	18e4      	adds	r4, r4, r3
 800b7de:	18d2      	adds	r2, r2, r3
 800b7e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b7e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7e4:	18d3      	adds	r3, r2, r3
 800b7e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	dd05      	ble.n	800b7fa <_dtoa_r+0x906>
 800b7ee:	001a      	movs	r2, r3
 800b7f0:	9905      	ldr	r1, [sp, #20]
 800b7f2:	9804      	ldr	r0, [sp, #16]
 800b7f4:	f000 fcf8 	bl	800c1e8 <__lshift>
 800b7f8:	9005      	str	r0, [sp, #20]
 800b7fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	dd05      	ble.n	800b80c <_dtoa_r+0x918>
 800b800:	0031      	movs	r1, r6
 800b802:	001a      	movs	r2, r3
 800b804:	9804      	ldr	r0, [sp, #16]
 800b806:	f000 fcef 	bl	800c1e8 <__lshift>
 800b80a:	0006      	movs	r6, r0
 800b80c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d027      	beq.n	800b862 <_dtoa_r+0x96e>
 800b812:	0031      	movs	r1, r6
 800b814:	9805      	ldr	r0, [sp, #20]
 800b816:	f000 fd55 	bl	800c2c4 <__mcmp>
 800b81a:	2800      	cmp	r0, #0
 800b81c:	da21      	bge.n	800b862 <_dtoa_r+0x96e>
 800b81e:	9b03      	ldr	r3, [sp, #12]
 800b820:	220a      	movs	r2, #10
 800b822:	3b01      	subs	r3, #1
 800b824:	9303      	str	r3, [sp, #12]
 800b826:	9905      	ldr	r1, [sp, #20]
 800b828:	2300      	movs	r3, #0
 800b82a:	9804      	ldr	r0, [sp, #16]
 800b82c:	f000 fae0 	bl	800bdf0 <__multadd>
 800b830:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b832:	9005      	str	r0, [sp, #20]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d100      	bne.n	800b83a <_dtoa_r+0x946>
 800b838:	e15d      	b.n	800baf6 <_dtoa_r+0xc02>
 800b83a:	2300      	movs	r3, #0
 800b83c:	0039      	movs	r1, r7
 800b83e:	220a      	movs	r2, #10
 800b840:	9804      	ldr	r0, [sp, #16]
 800b842:	f000 fad5 	bl	800bdf0 <__multadd>
 800b846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b848:	0007      	movs	r7, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	dc49      	bgt.n	800b8e2 <_dtoa_r+0x9ee>
 800b84e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b850:	2b02      	cmp	r3, #2
 800b852:	dc0e      	bgt.n	800b872 <_dtoa_r+0x97e>
 800b854:	e045      	b.n	800b8e2 <_dtoa_r+0x9ee>
 800b856:	2b04      	cmp	r3, #4
 800b858:	d0c6      	beq.n	800b7e8 <_dtoa_r+0x8f4>
 800b85a:	331c      	adds	r3, #28
 800b85c:	e7bd      	b.n	800b7da <_dtoa_r+0x8e6>
 800b85e:	0013      	movs	r3, r2
 800b860:	e7fb      	b.n	800b85a <_dtoa_r+0x966>
 800b862:	9b07      	ldr	r3, [sp, #28]
 800b864:	2b00      	cmp	r3, #0
 800b866:	dc36      	bgt.n	800b8d6 <_dtoa_r+0x9e2>
 800b868:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	dd33      	ble.n	800b8d6 <_dtoa_r+0x9e2>
 800b86e:	9b07      	ldr	r3, [sp, #28]
 800b870:	930b      	str	r3, [sp, #44]	; 0x2c
 800b872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10c      	bne.n	800b892 <_dtoa_r+0x99e>
 800b878:	0031      	movs	r1, r6
 800b87a:	2205      	movs	r2, #5
 800b87c:	9804      	ldr	r0, [sp, #16]
 800b87e:	f000 fab7 	bl	800bdf0 <__multadd>
 800b882:	0006      	movs	r6, r0
 800b884:	0001      	movs	r1, r0
 800b886:	9805      	ldr	r0, [sp, #20]
 800b888:	f000 fd1c 	bl	800c2c4 <__mcmp>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	dd00      	ble.n	800b892 <_dtoa_r+0x99e>
 800b890:	e59f      	b.n	800b3d2 <_dtoa_r+0x4de>
 800b892:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b894:	43db      	mvns	r3, r3
 800b896:	9303      	str	r3, [sp, #12]
 800b898:	9b06      	ldr	r3, [sp, #24]
 800b89a:	9308      	str	r3, [sp, #32]
 800b89c:	2500      	movs	r5, #0
 800b89e:	0031      	movs	r1, r6
 800b8a0:	9804      	ldr	r0, [sp, #16]
 800b8a2:	f000 fa81 	bl	800bda8 <_Bfree>
 800b8a6:	2f00      	cmp	r7, #0
 800b8a8:	d100      	bne.n	800b8ac <_dtoa_r+0x9b8>
 800b8aa:	e6a3      	b.n	800b5f4 <_dtoa_r+0x700>
 800b8ac:	2d00      	cmp	r5, #0
 800b8ae:	d005      	beq.n	800b8bc <_dtoa_r+0x9c8>
 800b8b0:	42bd      	cmp	r5, r7
 800b8b2:	d003      	beq.n	800b8bc <_dtoa_r+0x9c8>
 800b8b4:	0029      	movs	r1, r5
 800b8b6:	9804      	ldr	r0, [sp, #16]
 800b8b8:	f000 fa76 	bl	800bda8 <_Bfree>
 800b8bc:	0039      	movs	r1, r7
 800b8be:	9804      	ldr	r0, [sp, #16]
 800b8c0:	f000 fa72 	bl	800bda8 <_Bfree>
 800b8c4:	e696      	b.n	800b5f4 <_dtoa_r+0x700>
 800b8c6:	2600      	movs	r6, #0
 800b8c8:	0037      	movs	r7, r6
 800b8ca:	e7e2      	b.n	800b892 <_dtoa_r+0x99e>
 800b8cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8ce:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b8d0:	9303      	str	r3, [sp, #12]
 800b8d2:	0037      	movs	r7, r6
 800b8d4:	e57d      	b.n	800b3d2 <_dtoa_r+0x4de>
 800b8d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d100      	bne.n	800b8de <_dtoa_r+0x9ea>
 800b8dc:	e0c3      	b.n	800ba66 <_dtoa_r+0xb72>
 800b8de:	9b07      	ldr	r3, [sp, #28]
 800b8e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8e2:	2c00      	cmp	r4, #0
 800b8e4:	dd05      	ble.n	800b8f2 <_dtoa_r+0x9fe>
 800b8e6:	0039      	movs	r1, r7
 800b8e8:	0022      	movs	r2, r4
 800b8ea:	9804      	ldr	r0, [sp, #16]
 800b8ec:	f000 fc7c 	bl	800c1e8 <__lshift>
 800b8f0:	0007      	movs	r7, r0
 800b8f2:	0038      	movs	r0, r7
 800b8f4:	2d00      	cmp	r5, #0
 800b8f6:	d024      	beq.n	800b942 <_dtoa_r+0xa4e>
 800b8f8:	6879      	ldr	r1, [r7, #4]
 800b8fa:	9804      	ldr	r0, [sp, #16]
 800b8fc:	f000 fa10 	bl	800bd20 <_Balloc>
 800b900:	1e04      	subs	r4, r0, #0
 800b902:	d111      	bne.n	800b928 <_dtoa_r+0xa34>
 800b904:	0022      	movs	r2, r4
 800b906:	4b05      	ldr	r3, [pc, #20]	; (800b91c <_dtoa_r+0xa28>)
 800b908:	4805      	ldr	r0, [pc, #20]	; (800b920 <_dtoa_r+0xa2c>)
 800b90a:	4906      	ldr	r1, [pc, #24]	; (800b924 <_dtoa_r+0xa30>)
 800b90c:	f7ff fb07 	bl	800af1e <_dtoa_r+0x2a>
 800b910:	40240000 	.word	0x40240000
 800b914:	00000433 	.word	0x00000433
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	0800ed25 	.word	0x0800ed25
 800b920:	0800eccd 	.word	0x0800eccd
 800b924:	000002ef 	.word	0x000002ef
 800b928:	0039      	movs	r1, r7
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	310c      	adds	r1, #12
 800b92e:	3202      	adds	r2, #2
 800b930:	0092      	lsls	r2, r2, #2
 800b932:	300c      	adds	r0, #12
 800b934:	f001 ffb2 	bl	800d89c <memcpy>
 800b938:	2201      	movs	r2, #1
 800b93a:	0021      	movs	r1, r4
 800b93c:	9804      	ldr	r0, [sp, #16]
 800b93e:	f000 fc53 	bl	800c1e8 <__lshift>
 800b942:	9b06      	ldr	r3, [sp, #24]
 800b944:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b946:	9307      	str	r3, [sp, #28]
 800b948:	3b01      	subs	r3, #1
 800b94a:	189b      	adds	r3, r3, r2
 800b94c:	2201      	movs	r2, #1
 800b94e:	003d      	movs	r5, r7
 800b950:	0007      	movs	r7, r0
 800b952:	930e      	str	r3, [sp, #56]	; 0x38
 800b954:	9b08      	ldr	r3, [sp, #32]
 800b956:	4013      	ands	r3, r2
 800b958:	930d      	str	r3, [sp, #52]	; 0x34
 800b95a:	0031      	movs	r1, r6
 800b95c:	9805      	ldr	r0, [sp, #20]
 800b95e:	f7ff fa39 	bl	800add4 <quorem>
 800b962:	0029      	movs	r1, r5
 800b964:	0004      	movs	r4, r0
 800b966:	900b      	str	r0, [sp, #44]	; 0x2c
 800b968:	9805      	ldr	r0, [sp, #20]
 800b96a:	f000 fcab 	bl	800c2c4 <__mcmp>
 800b96e:	003a      	movs	r2, r7
 800b970:	900c      	str	r0, [sp, #48]	; 0x30
 800b972:	0031      	movs	r1, r6
 800b974:	9804      	ldr	r0, [sp, #16]
 800b976:	f000 fcc1 	bl	800c2fc <__mdiff>
 800b97a:	2201      	movs	r2, #1
 800b97c:	68c3      	ldr	r3, [r0, #12]
 800b97e:	3430      	adds	r4, #48	; 0x30
 800b980:	9008      	str	r0, [sp, #32]
 800b982:	920a      	str	r2, [sp, #40]	; 0x28
 800b984:	2b00      	cmp	r3, #0
 800b986:	d104      	bne.n	800b992 <_dtoa_r+0xa9e>
 800b988:	0001      	movs	r1, r0
 800b98a:	9805      	ldr	r0, [sp, #20]
 800b98c:	f000 fc9a 	bl	800c2c4 <__mcmp>
 800b990:	900a      	str	r0, [sp, #40]	; 0x28
 800b992:	9908      	ldr	r1, [sp, #32]
 800b994:	9804      	ldr	r0, [sp, #16]
 800b996:	f000 fa07 	bl	800bda8 <_Bfree>
 800b99a:	9b07      	ldr	r3, [sp, #28]
 800b99c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b99e:	3301      	adds	r3, #1
 800b9a0:	9308      	str	r3, [sp, #32]
 800b9a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	d109      	bne.n	800b9c0 <_dtoa_r+0xacc>
 800b9ac:	2c39      	cmp	r4, #57	; 0x39
 800b9ae:	d022      	beq.n	800b9f6 <_dtoa_r+0xb02>
 800b9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	dd01      	ble.n	800b9ba <_dtoa_r+0xac6>
 800b9b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b9b8:	3431      	adds	r4, #49	; 0x31
 800b9ba:	9b07      	ldr	r3, [sp, #28]
 800b9bc:	701c      	strb	r4, [r3, #0]
 800b9be:	e76e      	b.n	800b89e <_dtoa_r+0x9aa>
 800b9c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	db04      	blt.n	800b9d0 <_dtoa_r+0xadc>
 800b9c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	d11e      	bne.n	800ba0e <_dtoa_r+0xb1a>
 800b9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	ddf1      	ble.n	800b9ba <_dtoa_r+0xac6>
 800b9d6:	9905      	ldr	r1, [sp, #20]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	9804      	ldr	r0, [sp, #16]
 800b9dc:	f000 fc04 	bl	800c1e8 <__lshift>
 800b9e0:	0031      	movs	r1, r6
 800b9e2:	9005      	str	r0, [sp, #20]
 800b9e4:	f000 fc6e 	bl	800c2c4 <__mcmp>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	dc02      	bgt.n	800b9f2 <_dtoa_r+0xafe>
 800b9ec:	d1e5      	bne.n	800b9ba <_dtoa_r+0xac6>
 800b9ee:	07e3      	lsls	r3, r4, #31
 800b9f0:	d5e3      	bpl.n	800b9ba <_dtoa_r+0xac6>
 800b9f2:	2c39      	cmp	r4, #57	; 0x39
 800b9f4:	d1df      	bne.n	800b9b6 <_dtoa_r+0xac2>
 800b9f6:	2339      	movs	r3, #57	; 0x39
 800b9f8:	9a07      	ldr	r2, [sp, #28]
 800b9fa:	7013      	strb	r3, [r2, #0]
 800b9fc:	9b08      	ldr	r3, [sp, #32]
 800b9fe:	9308      	str	r3, [sp, #32]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	781a      	ldrb	r2, [r3, #0]
 800ba04:	2a39      	cmp	r2, #57	; 0x39
 800ba06:	d063      	beq.n	800bad0 <_dtoa_r+0xbdc>
 800ba08:	3201      	adds	r2, #1
 800ba0a:	701a      	strb	r2, [r3, #0]
 800ba0c:	e747      	b.n	800b89e <_dtoa_r+0x9aa>
 800ba0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	dd03      	ble.n	800ba1c <_dtoa_r+0xb28>
 800ba14:	2c39      	cmp	r4, #57	; 0x39
 800ba16:	d0ee      	beq.n	800b9f6 <_dtoa_r+0xb02>
 800ba18:	3401      	adds	r4, #1
 800ba1a:	e7ce      	b.n	800b9ba <_dtoa_r+0xac6>
 800ba1c:	9b07      	ldr	r3, [sp, #28]
 800ba1e:	9a07      	ldr	r2, [sp, #28]
 800ba20:	701c      	strb	r4, [r3, #0]
 800ba22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d03e      	beq.n	800baa6 <_dtoa_r+0xbb2>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	220a      	movs	r2, #10
 800ba2c:	9905      	ldr	r1, [sp, #20]
 800ba2e:	9804      	ldr	r0, [sp, #16]
 800ba30:	f000 f9de 	bl	800bdf0 <__multadd>
 800ba34:	2300      	movs	r3, #0
 800ba36:	9005      	str	r0, [sp, #20]
 800ba38:	220a      	movs	r2, #10
 800ba3a:	0029      	movs	r1, r5
 800ba3c:	9804      	ldr	r0, [sp, #16]
 800ba3e:	42bd      	cmp	r5, r7
 800ba40:	d106      	bne.n	800ba50 <_dtoa_r+0xb5c>
 800ba42:	f000 f9d5 	bl	800bdf0 <__multadd>
 800ba46:	0005      	movs	r5, r0
 800ba48:	0007      	movs	r7, r0
 800ba4a:	9b08      	ldr	r3, [sp, #32]
 800ba4c:	9307      	str	r3, [sp, #28]
 800ba4e:	e784      	b.n	800b95a <_dtoa_r+0xa66>
 800ba50:	f000 f9ce 	bl	800bdf0 <__multadd>
 800ba54:	0039      	movs	r1, r7
 800ba56:	0005      	movs	r5, r0
 800ba58:	2300      	movs	r3, #0
 800ba5a:	220a      	movs	r2, #10
 800ba5c:	9804      	ldr	r0, [sp, #16]
 800ba5e:	f000 f9c7 	bl	800bdf0 <__multadd>
 800ba62:	0007      	movs	r7, r0
 800ba64:	e7f1      	b.n	800ba4a <_dtoa_r+0xb56>
 800ba66:	9b07      	ldr	r3, [sp, #28]
 800ba68:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba6a:	2500      	movs	r5, #0
 800ba6c:	0031      	movs	r1, r6
 800ba6e:	9805      	ldr	r0, [sp, #20]
 800ba70:	f7ff f9b0 	bl	800add4 <quorem>
 800ba74:	9b06      	ldr	r3, [sp, #24]
 800ba76:	3030      	adds	r0, #48	; 0x30
 800ba78:	5558      	strb	r0, [r3, r5]
 800ba7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba7c:	3501      	adds	r5, #1
 800ba7e:	0004      	movs	r4, r0
 800ba80:	42ab      	cmp	r3, r5
 800ba82:	dd07      	ble.n	800ba94 <_dtoa_r+0xba0>
 800ba84:	2300      	movs	r3, #0
 800ba86:	220a      	movs	r2, #10
 800ba88:	9905      	ldr	r1, [sp, #20]
 800ba8a:	9804      	ldr	r0, [sp, #16]
 800ba8c:	f000 f9b0 	bl	800bdf0 <__multadd>
 800ba90:	9005      	str	r0, [sp, #20]
 800ba92:	e7eb      	b.n	800ba6c <_dtoa_r+0xb78>
 800ba94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba96:	2301      	movs	r3, #1
 800ba98:	2a00      	cmp	r2, #0
 800ba9a:	dd00      	ble.n	800ba9e <_dtoa_r+0xbaa>
 800ba9c:	0013      	movs	r3, r2
 800ba9e:	2500      	movs	r5, #0
 800baa0:	9a06      	ldr	r2, [sp, #24]
 800baa2:	18d3      	adds	r3, r2, r3
 800baa4:	9308      	str	r3, [sp, #32]
 800baa6:	9905      	ldr	r1, [sp, #20]
 800baa8:	2201      	movs	r2, #1
 800baaa:	9804      	ldr	r0, [sp, #16]
 800baac:	f000 fb9c 	bl	800c1e8 <__lshift>
 800bab0:	0031      	movs	r1, r6
 800bab2:	9005      	str	r0, [sp, #20]
 800bab4:	f000 fc06 	bl	800c2c4 <__mcmp>
 800bab8:	2800      	cmp	r0, #0
 800baba:	dc9f      	bgt.n	800b9fc <_dtoa_r+0xb08>
 800babc:	d101      	bne.n	800bac2 <_dtoa_r+0xbce>
 800babe:	07e4      	lsls	r4, r4, #31
 800bac0:	d49c      	bmi.n	800b9fc <_dtoa_r+0xb08>
 800bac2:	9b08      	ldr	r3, [sp, #32]
 800bac4:	9308      	str	r3, [sp, #32]
 800bac6:	3b01      	subs	r3, #1
 800bac8:	781a      	ldrb	r2, [r3, #0]
 800baca:	2a30      	cmp	r2, #48	; 0x30
 800bacc:	d0fa      	beq.n	800bac4 <_dtoa_r+0xbd0>
 800bace:	e6e6      	b.n	800b89e <_dtoa_r+0x9aa>
 800bad0:	9a06      	ldr	r2, [sp, #24]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d193      	bne.n	800b9fe <_dtoa_r+0xb0a>
 800bad6:	9b03      	ldr	r3, [sp, #12]
 800bad8:	3301      	adds	r3, #1
 800bada:	9303      	str	r3, [sp, #12]
 800badc:	2331      	movs	r3, #49	; 0x31
 800bade:	7013      	strb	r3, [r2, #0]
 800bae0:	e6dd      	b.n	800b89e <_dtoa_r+0x9aa>
 800bae2:	4b09      	ldr	r3, [pc, #36]	; (800bb08 <_dtoa_r+0xc14>)
 800bae4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bae6:	9306      	str	r3, [sp, #24]
 800bae8:	4b08      	ldr	r3, [pc, #32]	; (800bb0c <_dtoa_r+0xc18>)
 800baea:	2a00      	cmp	r2, #0
 800baec:	d001      	beq.n	800baf2 <_dtoa_r+0xbfe>
 800baee:	f7ff fa49 	bl	800af84 <_dtoa_r+0x90>
 800baf2:	f7ff fa49 	bl	800af88 <_dtoa_r+0x94>
 800baf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	dcb6      	bgt.n	800ba6a <_dtoa_r+0xb76>
 800bafc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	dd00      	ble.n	800bb04 <_dtoa_r+0xc10>
 800bb02:	e6b6      	b.n	800b872 <_dtoa_r+0x97e>
 800bb04:	e7b1      	b.n	800ba6a <_dtoa_r+0xb76>
 800bb06:	46c0      	nop			; (mov r8, r8)
 800bb08:	0800eca9 	.word	0x0800eca9
 800bb0c:	0800ecb1 	.word	0x0800ecb1

0800bb10 <_free_r>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	0005      	movs	r5, r0
 800bb14:	2900      	cmp	r1, #0
 800bb16:	d010      	beq.n	800bb3a <_free_r+0x2a>
 800bb18:	1f0c      	subs	r4, r1, #4
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	da00      	bge.n	800bb22 <_free_r+0x12>
 800bb20:	18e4      	adds	r4, r4, r3
 800bb22:	0028      	movs	r0, r5
 800bb24:	f000 f8ec 	bl	800bd00 <__malloc_lock>
 800bb28:	4a1d      	ldr	r2, [pc, #116]	; (800bba0 <_free_r+0x90>)
 800bb2a:	6813      	ldr	r3, [r2, #0]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d105      	bne.n	800bb3c <_free_r+0x2c>
 800bb30:	6063      	str	r3, [r4, #4]
 800bb32:	6014      	str	r4, [r2, #0]
 800bb34:	0028      	movs	r0, r5
 800bb36:	f000 f8eb 	bl	800bd10 <__malloc_unlock>
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
 800bb3c:	42a3      	cmp	r3, r4
 800bb3e:	d908      	bls.n	800bb52 <_free_r+0x42>
 800bb40:	6820      	ldr	r0, [r4, #0]
 800bb42:	1821      	adds	r1, r4, r0
 800bb44:	428b      	cmp	r3, r1
 800bb46:	d1f3      	bne.n	800bb30 <_free_r+0x20>
 800bb48:	6819      	ldr	r1, [r3, #0]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	1809      	adds	r1, r1, r0
 800bb4e:	6021      	str	r1, [r4, #0]
 800bb50:	e7ee      	b.n	800bb30 <_free_r+0x20>
 800bb52:	001a      	movs	r2, r3
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <_free_r+0x4e>
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	d9f9      	bls.n	800bb52 <_free_r+0x42>
 800bb5e:	6811      	ldr	r1, [r2, #0]
 800bb60:	1850      	adds	r0, r2, r1
 800bb62:	42a0      	cmp	r0, r4
 800bb64:	d10b      	bne.n	800bb7e <_free_r+0x6e>
 800bb66:	6820      	ldr	r0, [r4, #0]
 800bb68:	1809      	adds	r1, r1, r0
 800bb6a:	1850      	adds	r0, r2, r1
 800bb6c:	6011      	str	r1, [r2, #0]
 800bb6e:	4283      	cmp	r3, r0
 800bb70:	d1e0      	bne.n	800bb34 <_free_r+0x24>
 800bb72:	6818      	ldr	r0, [r3, #0]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	1841      	adds	r1, r0, r1
 800bb78:	6011      	str	r1, [r2, #0]
 800bb7a:	6053      	str	r3, [r2, #4]
 800bb7c:	e7da      	b.n	800bb34 <_free_r+0x24>
 800bb7e:	42a0      	cmp	r0, r4
 800bb80:	d902      	bls.n	800bb88 <_free_r+0x78>
 800bb82:	230c      	movs	r3, #12
 800bb84:	602b      	str	r3, [r5, #0]
 800bb86:	e7d5      	b.n	800bb34 <_free_r+0x24>
 800bb88:	6820      	ldr	r0, [r4, #0]
 800bb8a:	1821      	adds	r1, r4, r0
 800bb8c:	428b      	cmp	r3, r1
 800bb8e:	d103      	bne.n	800bb98 <_free_r+0x88>
 800bb90:	6819      	ldr	r1, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	1809      	adds	r1, r1, r0
 800bb96:	6021      	str	r1, [r4, #0]
 800bb98:	6063      	str	r3, [r4, #4]
 800bb9a:	6054      	str	r4, [r2, #4]
 800bb9c:	e7ca      	b.n	800bb34 <_free_r+0x24>
 800bb9e:	46c0      	nop			; (mov r8, r8)
 800bba0:	20000668 	.word	0x20000668

0800bba4 <malloc>:
 800bba4:	b510      	push	{r4, lr}
 800bba6:	4b03      	ldr	r3, [pc, #12]	; (800bbb4 <malloc+0x10>)
 800bba8:	0001      	movs	r1, r0
 800bbaa:	6818      	ldr	r0, [r3, #0]
 800bbac:	f000 f826 	bl	800bbfc <_malloc_r>
 800bbb0:	bd10      	pop	{r4, pc}
 800bbb2:	46c0      	nop			; (mov r8, r8)
 800bbb4:	2000007c 	.word	0x2000007c

0800bbb8 <sbrk_aligned>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	4e0f      	ldr	r6, [pc, #60]	; (800bbf8 <sbrk_aligned+0x40>)
 800bbbc:	000d      	movs	r5, r1
 800bbbe:	6831      	ldr	r1, [r6, #0]
 800bbc0:	0004      	movs	r4, r0
 800bbc2:	2900      	cmp	r1, #0
 800bbc4:	d102      	bne.n	800bbcc <sbrk_aligned+0x14>
 800bbc6:	f001 fe57 	bl	800d878 <_sbrk_r>
 800bbca:	6030      	str	r0, [r6, #0]
 800bbcc:	0029      	movs	r1, r5
 800bbce:	0020      	movs	r0, r4
 800bbd0:	f001 fe52 	bl	800d878 <_sbrk_r>
 800bbd4:	1c43      	adds	r3, r0, #1
 800bbd6:	d00a      	beq.n	800bbee <sbrk_aligned+0x36>
 800bbd8:	2303      	movs	r3, #3
 800bbda:	1cc5      	adds	r5, r0, #3
 800bbdc:	439d      	bics	r5, r3
 800bbde:	42a8      	cmp	r0, r5
 800bbe0:	d007      	beq.n	800bbf2 <sbrk_aligned+0x3a>
 800bbe2:	1a29      	subs	r1, r5, r0
 800bbe4:	0020      	movs	r0, r4
 800bbe6:	f001 fe47 	bl	800d878 <_sbrk_r>
 800bbea:	3001      	adds	r0, #1
 800bbec:	d101      	bne.n	800bbf2 <sbrk_aligned+0x3a>
 800bbee:	2501      	movs	r5, #1
 800bbf0:	426d      	negs	r5, r5
 800bbf2:	0028      	movs	r0, r5
 800bbf4:	bd70      	pop	{r4, r5, r6, pc}
 800bbf6:	46c0      	nop			; (mov r8, r8)
 800bbf8:	2000066c 	.word	0x2000066c

0800bbfc <_malloc_r>:
 800bbfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbfe:	2203      	movs	r2, #3
 800bc00:	1ccb      	adds	r3, r1, #3
 800bc02:	4393      	bics	r3, r2
 800bc04:	3308      	adds	r3, #8
 800bc06:	0006      	movs	r6, r0
 800bc08:	001f      	movs	r7, r3
 800bc0a:	2b0c      	cmp	r3, #12
 800bc0c:	d238      	bcs.n	800bc80 <_malloc_r+0x84>
 800bc0e:	270c      	movs	r7, #12
 800bc10:	42b9      	cmp	r1, r7
 800bc12:	d837      	bhi.n	800bc84 <_malloc_r+0x88>
 800bc14:	0030      	movs	r0, r6
 800bc16:	f000 f873 	bl	800bd00 <__malloc_lock>
 800bc1a:	4b38      	ldr	r3, [pc, #224]	; (800bcfc <_malloc_r+0x100>)
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	001c      	movs	r4, r3
 800bc22:	2c00      	cmp	r4, #0
 800bc24:	d133      	bne.n	800bc8e <_malloc_r+0x92>
 800bc26:	0039      	movs	r1, r7
 800bc28:	0030      	movs	r0, r6
 800bc2a:	f7ff ffc5 	bl	800bbb8 <sbrk_aligned>
 800bc2e:	0004      	movs	r4, r0
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d15e      	bne.n	800bcf2 <_malloc_r+0xf6>
 800bc34:	9b00      	ldr	r3, [sp, #0]
 800bc36:	681c      	ldr	r4, [r3, #0]
 800bc38:	0025      	movs	r5, r4
 800bc3a:	2d00      	cmp	r5, #0
 800bc3c:	d14e      	bne.n	800bcdc <_malloc_r+0xe0>
 800bc3e:	2c00      	cmp	r4, #0
 800bc40:	d051      	beq.n	800bce6 <_malloc_r+0xea>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	0029      	movs	r1, r5
 800bc46:	18e3      	adds	r3, r4, r3
 800bc48:	0030      	movs	r0, r6
 800bc4a:	9301      	str	r3, [sp, #4]
 800bc4c:	f001 fe14 	bl	800d878 <_sbrk_r>
 800bc50:	9b01      	ldr	r3, [sp, #4]
 800bc52:	4283      	cmp	r3, r0
 800bc54:	d147      	bne.n	800bce6 <_malloc_r+0xea>
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	0030      	movs	r0, r6
 800bc5a:	1aff      	subs	r7, r7, r3
 800bc5c:	0039      	movs	r1, r7
 800bc5e:	f7ff ffab 	bl	800bbb8 <sbrk_aligned>
 800bc62:	3001      	adds	r0, #1
 800bc64:	d03f      	beq.n	800bce6 <_malloc_r+0xea>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	19db      	adds	r3, r3, r7
 800bc6a:	6023      	str	r3, [r4, #0]
 800bc6c:	9b00      	ldr	r3, [sp, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d040      	beq.n	800bcf6 <_malloc_r+0xfa>
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	42a2      	cmp	r2, r4
 800bc78:	d133      	bne.n	800bce2 <_malloc_r+0xe6>
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	605a      	str	r2, [r3, #4]
 800bc7e:	e014      	b.n	800bcaa <_malloc_r+0xae>
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dac5      	bge.n	800bc10 <_malloc_r+0x14>
 800bc84:	230c      	movs	r3, #12
 800bc86:	2500      	movs	r5, #0
 800bc88:	6033      	str	r3, [r6, #0]
 800bc8a:	0028      	movs	r0, r5
 800bc8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc8e:	6821      	ldr	r1, [r4, #0]
 800bc90:	1bc9      	subs	r1, r1, r7
 800bc92:	d420      	bmi.n	800bcd6 <_malloc_r+0xda>
 800bc94:	290b      	cmp	r1, #11
 800bc96:	d918      	bls.n	800bcca <_malloc_r+0xce>
 800bc98:	19e2      	adds	r2, r4, r7
 800bc9a:	6027      	str	r7, [r4, #0]
 800bc9c:	42a3      	cmp	r3, r4
 800bc9e:	d112      	bne.n	800bcc6 <_malloc_r+0xca>
 800bca0:	9b00      	ldr	r3, [sp, #0]
 800bca2:	601a      	str	r2, [r3, #0]
 800bca4:	6863      	ldr	r3, [r4, #4]
 800bca6:	6011      	str	r1, [r2, #0]
 800bca8:	6053      	str	r3, [r2, #4]
 800bcaa:	0030      	movs	r0, r6
 800bcac:	0025      	movs	r5, r4
 800bcae:	f000 f82f 	bl	800bd10 <__malloc_unlock>
 800bcb2:	2207      	movs	r2, #7
 800bcb4:	350b      	adds	r5, #11
 800bcb6:	1d23      	adds	r3, r4, #4
 800bcb8:	4395      	bics	r5, r2
 800bcba:	1aea      	subs	r2, r5, r3
 800bcbc:	429d      	cmp	r5, r3
 800bcbe:	d0e4      	beq.n	800bc8a <_malloc_r+0x8e>
 800bcc0:	1b5b      	subs	r3, r3, r5
 800bcc2:	50a3      	str	r3, [r4, r2]
 800bcc4:	e7e1      	b.n	800bc8a <_malloc_r+0x8e>
 800bcc6:	605a      	str	r2, [r3, #4]
 800bcc8:	e7ec      	b.n	800bca4 <_malloc_r+0xa8>
 800bcca:	6862      	ldr	r2, [r4, #4]
 800bccc:	42a3      	cmp	r3, r4
 800bcce:	d1d5      	bne.n	800bc7c <_malloc_r+0x80>
 800bcd0:	9b00      	ldr	r3, [sp, #0]
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	e7e9      	b.n	800bcaa <_malloc_r+0xae>
 800bcd6:	0023      	movs	r3, r4
 800bcd8:	6864      	ldr	r4, [r4, #4]
 800bcda:	e7a2      	b.n	800bc22 <_malloc_r+0x26>
 800bcdc:	002c      	movs	r4, r5
 800bcde:	686d      	ldr	r5, [r5, #4]
 800bce0:	e7ab      	b.n	800bc3a <_malloc_r+0x3e>
 800bce2:	0013      	movs	r3, r2
 800bce4:	e7c4      	b.n	800bc70 <_malloc_r+0x74>
 800bce6:	230c      	movs	r3, #12
 800bce8:	0030      	movs	r0, r6
 800bcea:	6033      	str	r3, [r6, #0]
 800bcec:	f000 f810 	bl	800bd10 <__malloc_unlock>
 800bcf0:	e7cb      	b.n	800bc8a <_malloc_r+0x8e>
 800bcf2:	6027      	str	r7, [r4, #0]
 800bcf4:	e7d9      	b.n	800bcaa <_malloc_r+0xae>
 800bcf6:	605b      	str	r3, [r3, #4]
 800bcf8:	deff      	udf	#255	; 0xff
 800bcfa:	46c0      	nop			; (mov r8, r8)
 800bcfc:	20000668 	.word	0x20000668

0800bd00 <__malloc_lock>:
 800bd00:	b510      	push	{r4, lr}
 800bd02:	4802      	ldr	r0, [pc, #8]	; (800bd0c <__malloc_lock+0xc>)
 800bd04:	f7ff f855 	bl	800adb2 <__retarget_lock_acquire_recursive>
 800bd08:	bd10      	pop	{r4, pc}
 800bd0a:	46c0      	nop			; (mov r8, r8)
 800bd0c:	20000664 	.word	0x20000664

0800bd10 <__malloc_unlock>:
 800bd10:	b510      	push	{r4, lr}
 800bd12:	4802      	ldr	r0, [pc, #8]	; (800bd1c <__malloc_unlock+0xc>)
 800bd14:	f7ff f84e 	bl	800adb4 <__retarget_lock_release_recursive>
 800bd18:	bd10      	pop	{r4, pc}
 800bd1a:	46c0      	nop			; (mov r8, r8)
 800bd1c:	20000664 	.word	0x20000664

0800bd20 <_Balloc>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	69c5      	ldr	r5, [r0, #28]
 800bd24:	0006      	movs	r6, r0
 800bd26:	000c      	movs	r4, r1
 800bd28:	2d00      	cmp	r5, #0
 800bd2a:	d10e      	bne.n	800bd4a <_Balloc+0x2a>
 800bd2c:	2010      	movs	r0, #16
 800bd2e:	f7ff ff39 	bl	800bba4 <malloc>
 800bd32:	1e02      	subs	r2, r0, #0
 800bd34:	61f0      	str	r0, [r6, #28]
 800bd36:	d104      	bne.n	800bd42 <_Balloc+0x22>
 800bd38:	216b      	movs	r1, #107	; 0x6b
 800bd3a:	4b19      	ldr	r3, [pc, #100]	; (800bda0 <_Balloc+0x80>)
 800bd3c:	4819      	ldr	r0, [pc, #100]	; (800bda4 <_Balloc+0x84>)
 800bd3e:	f001 fdbd 	bl	800d8bc <__assert_func>
 800bd42:	6045      	str	r5, [r0, #4]
 800bd44:	6085      	str	r5, [r0, #8]
 800bd46:	6005      	str	r5, [r0, #0]
 800bd48:	60c5      	str	r5, [r0, #12]
 800bd4a:	69f5      	ldr	r5, [r6, #28]
 800bd4c:	68eb      	ldr	r3, [r5, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d013      	beq.n	800bd7a <_Balloc+0x5a>
 800bd52:	69f3      	ldr	r3, [r6, #28]
 800bd54:	00a2      	lsls	r2, r4, #2
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	189b      	adds	r3, r3, r2
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d118      	bne.n	800bd92 <_Balloc+0x72>
 800bd60:	2101      	movs	r1, #1
 800bd62:	000d      	movs	r5, r1
 800bd64:	40a5      	lsls	r5, r4
 800bd66:	1d6a      	adds	r2, r5, #5
 800bd68:	0030      	movs	r0, r6
 800bd6a:	0092      	lsls	r2, r2, #2
 800bd6c:	f001 fdc4 	bl	800d8f8 <_calloc_r>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d00c      	beq.n	800bd8e <_Balloc+0x6e>
 800bd74:	6044      	str	r4, [r0, #4]
 800bd76:	6085      	str	r5, [r0, #8]
 800bd78:	e00d      	b.n	800bd96 <_Balloc+0x76>
 800bd7a:	2221      	movs	r2, #33	; 0x21
 800bd7c:	2104      	movs	r1, #4
 800bd7e:	0030      	movs	r0, r6
 800bd80:	f001 fdba 	bl	800d8f8 <_calloc_r>
 800bd84:	69f3      	ldr	r3, [r6, #28]
 800bd86:	60e8      	str	r0, [r5, #12]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1e1      	bne.n	800bd52 <_Balloc+0x32>
 800bd8e:	2000      	movs	r0, #0
 800bd90:	bd70      	pop	{r4, r5, r6, pc}
 800bd92:	6802      	ldr	r2, [r0, #0]
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	2300      	movs	r3, #0
 800bd98:	6103      	str	r3, [r0, #16]
 800bd9a:	60c3      	str	r3, [r0, #12]
 800bd9c:	e7f8      	b.n	800bd90 <_Balloc+0x70>
 800bd9e:	46c0      	nop			; (mov r8, r8)
 800bda0:	0800ecb6 	.word	0x0800ecb6
 800bda4:	0800ed36 	.word	0x0800ed36

0800bda8 <_Bfree>:
 800bda8:	b570      	push	{r4, r5, r6, lr}
 800bdaa:	69c6      	ldr	r6, [r0, #28]
 800bdac:	0005      	movs	r5, r0
 800bdae:	000c      	movs	r4, r1
 800bdb0:	2e00      	cmp	r6, #0
 800bdb2:	d10e      	bne.n	800bdd2 <_Bfree+0x2a>
 800bdb4:	2010      	movs	r0, #16
 800bdb6:	f7ff fef5 	bl	800bba4 <malloc>
 800bdba:	1e02      	subs	r2, r0, #0
 800bdbc:	61e8      	str	r0, [r5, #28]
 800bdbe:	d104      	bne.n	800bdca <_Bfree+0x22>
 800bdc0:	218f      	movs	r1, #143	; 0x8f
 800bdc2:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <_Bfree+0x40>)
 800bdc4:	4809      	ldr	r0, [pc, #36]	; (800bdec <_Bfree+0x44>)
 800bdc6:	f001 fd79 	bl	800d8bc <__assert_func>
 800bdca:	6046      	str	r6, [r0, #4]
 800bdcc:	6086      	str	r6, [r0, #8]
 800bdce:	6006      	str	r6, [r0, #0]
 800bdd0:	60c6      	str	r6, [r0, #12]
 800bdd2:	2c00      	cmp	r4, #0
 800bdd4:	d007      	beq.n	800bde6 <_Bfree+0x3e>
 800bdd6:	69eb      	ldr	r3, [r5, #28]
 800bdd8:	6862      	ldr	r2, [r4, #4]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	0092      	lsls	r2, r2, #2
 800bdde:	189b      	adds	r3, r3, r2
 800bde0:	681a      	ldr	r2, [r3, #0]
 800bde2:	6022      	str	r2, [r4, #0]
 800bde4:	601c      	str	r4, [r3, #0]
 800bde6:	bd70      	pop	{r4, r5, r6, pc}
 800bde8:	0800ecb6 	.word	0x0800ecb6
 800bdec:	0800ed36 	.word	0x0800ed36

0800bdf0 <__multadd>:
 800bdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdf2:	000e      	movs	r6, r1
 800bdf4:	9001      	str	r0, [sp, #4]
 800bdf6:	000c      	movs	r4, r1
 800bdf8:	001d      	movs	r5, r3
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	690f      	ldr	r7, [r1, #16]
 800bdfe:	3614      	adds	r6, #20
 800be00:	6833      	ldr	r3, [r6, #0]
 800be02:	3001      	adds	r0, #1
 800be04:	b299      	uxth	r1, r3
 800be06:	4351      	muls	r1, r2
 800be08:	0c1b      	lsrs	r3, r3, #16
 800be0a:	4353      	muls	r3, r2
 800be0c:	1949      	adds	r1, r1, r5
 800be0e:	0c0d      	lsrs	r5, r1, #16
 800be10:	195b      	adds	r3, r3, r5
 800be12:	0c1d      	lsrs	r5, r3, #16
 800be14:	b289      	uxth	r1, r1
 800be16:	041b      	lsls	r3, r3, #16
 800be18:	185b      	adds	r3, r3, r1
 800be1a:	c608      	stmia	r6!, {r3}
 800be1c:	4287      	cmp	r7, r0
 800be1e:	dcef      	bgt.n	800be00 <__multadd+0x10>
 800be20:	2d00      	cmp	r5, #0
 800be22:	d022      	beq.n	800be6a <__multadd+0x7a>
 800be24:	68a3      	ldr	r3, [r4, #8]
 800be26:	42bb      	cmp	r3, r7
 800be28:	dc19      	bgt.n	800be5e <__multadd+0x6e>
 800be2a:	6861      	ldr	r1, [r4, #4]
 800be2c:	9801      	ldr	r0, [sp, #4]
 800be2e:	3101      	adds	r1, #1
 800be30:	f7ff ff76 	bl	800bd20 <_Balloc>
 800be34:	1e06      	subs	r6, r0, #0
 800be36:	d105      	bne.n	800be44 <__multadd+0x54>
 800be38:	0032      	movs	r2, r6
 800be3a:	21ba      	movs	r1, #186	; 0xba
 800be3c:	4b0c      	ldr	r3, [pc, #48]	; (800be70 <__multadd+0x80>)
 800be3e:	480d      	ldr	r0, [pc, #52]	; (800be74 <__multadd+0x84>)
 800be40:	f001 fd3c 	bl	800d8bc <__assert_func>
 800be44:	0021      	movs	r1, r4
 800be46:	6922      	ldr	r2, [r4, #16]
 800be48:	310c      	adds	r1, #12
 800be4a:	3202      	adds	r2, #2
 800be4c:	0092      	lsls	r2, r2, #2
 800be4e:	300c      	adds	r0, #12
 800be50:	f001 fd24 	bl	800d89c <memcpy>
 800be54:	0021      	movs	r1, r4
 800be56:	9801      	ldr	r0, [sp, #4]
 800be58:	f7ff ffa6 	bl	800bda8 <_Bfree>
 800be5c:	0034      	movs	r4, r6
 800be5e:	1d3b      	adds	r3, r7, #4
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	18e3      	adds	r3, r4, r3
 800be64:	605d      	str	r5, [r3, #4]
 800be66:	1c7b      	adds	r3, r7, #1
 800be68:	6123      	str	r3, [r4, #16]
 800be6a:	0020      	movs	r0, r4
 800be6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be6e:	46c0      	nop			; (mov r8, r8)
 800be70:	0800ed25 	.word	0x0800ed25
 800be74:	0800ed36 	.word	0x0800ed36

0800be78 <__s2b>:
 800be78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be7a:	0006      	movs	r6, r0
 800be7c:	0018      	movs	r0, r3
 800be7e:	000c      	movs	r4, r1
 800be80:	3008      	adds	r0, #8
 800be82:	2109      	movs	r1, #9
 800be84:	9301      	str	r3, [sp, #4]
 800be86:	0015      	movs	r5, r2
 800be88:	f7f4 f9e4 	bl	8000254 <__divsi3>
 800be8c:	2301      	movs	r3, #1
 800be8e:	2100      	movs	r1, #0
 800be90:	4283      	cmp	r3, r0
 800be92:	db0a      	blt.n	800beaa <__s2b+0x32>
 800be94:	0030      	movs	r0, r6
 800be96:	f7ff ff43 	bl	800bd20 <_Balloc>
 800be9a:	1e01      	subs	r1, r0, #0
 800be9c:	d108      	bne.n	800beb0 <__s2b+0x38>
 800be9e:	000a      	movs	r2, r1
 800bea0:	4b19      	ldr	r3, [pc, #100]	; (800bf08 <__s2b+0x90>)
 800bea2:	481a      	ldr	r0, [pc, #104]	; (800bf0c <__s2b+0x94>)
 800bea4:	31d3      	adds	r1, #211	; 0xd3
 800bea6:	f001 fd09 	bl	800d8bc <__assert_func>
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	3101      	adds	r1, #1
 800beae:	e7ef      	b.n	800be90 <__s2b+0x18>
 800beb0:	9b08      	ldr	r3, [sp, #32]
 800beb2:	6143      	str	r3, [r0, #20]
 800beb4:	2301      	movs	r3, #1
 800beb6:	6103      	str	r3, [r0, #16]
 800beb8:	2d09      	cmp	r5, #9
 800beba:	dd18      	ble.n	800beee <__s2b+0x76>
 800bebc:	0023      	movs	r3, r4
 800bebe:	3309      	adds	r3, #9
 800bec0:	001f      	movs	r7, r3
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	1964      	adds	r4, r4, r5
 800bec6:	783b      	ldrb	r3, [r7, #0]
 800bec8:	220a      	movs	r2, #10
 800beca:	0030      	movs	r0, r6
 800becc:	3b30      	subs	r3, #48	; 0x30
 800bece:	f7ff ff8f 	bl	800bdf0 <__multadd>
 800bed2:	3701      	adds	r7, #1
 800bed4:	0001      	movs	r1, r0
 800bed6:	42a7      	cmp	r7, r4
 800bed8:	d1f5      	bne.n	800bec6 <__s2b+0x4e>
 800beda:	002c      	movs	r4, r5
 800bedc:	9b00      	ldr	r3, [sp, #0]
 800bede:	3c08      	subs	r4, #8
 800bee0:	191c      	adds	r4, r3, r4
 800bee2:	002f      	movs	r7, r5
 800bee4:	9b01      	ldr	r3, [sp, #4]
 800bee6:	429f      	cmp	r7, r3
 800bee8:	db04      	blt.n	800bef4 <__s2b+0x7c>
 800beea:	0008      	movs	r0, r1
 800beec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800beee:	2509      	movs	r5, #9
 800bef0:	340a      	adds	r4, #10
 800bef2:	e7f6      	b.n	800bee2 <__s2b+0x6a>
 800bef4:	1b63      	subs	r3, r4, r5
 800bef6:	5ddb      	ldrb	r3, [r3, r7]
 800bef8:	220a      	movs	r2, #10
 800befa:	0030      	movs	r0, r6
 800befc:	3b30      	subs	r3, #48	; 0x30
 800befe:	f7ff ff77 	bl	800bdf0 <__multadd>
 800bf02:	3701      	adds	r7, #1
 800bf04:	0001      	movs	r1, r0
 800bf06:	e7ed      	b.n	800bee4 <__s2b+0x6c>
 800bf08:	0800ed25 	.word	0x0800ed25
 800bf0c:	0800ed36 	.word	0x0800ed36

0800bf10 <__hi0bits>:
 800bf10:	0003      	movs	r3, r0
 800bf12:	0c02      	lsrs	r2, r0, #16
 800bf14:	2000      	movs	r0, #0
 800bf16:	4282      	cmp	r2, r0
 800bf18:	d101      	bne.n	800bf1e <__hi0bits+0xe>
 800bf1a:	041b      	lsls	r3, r3, #16
 800bf1c:	3010      	adds	r0, #16
 800bf1e:	0e1a      	lsrs	r2, r3, #24
 800bf20:	d101      	bne.n	800bf26 <__hi0bits+0x16>
 800bf22:	3008      	adds	r0, #8
 800bf24:	021b      	lsls	r3, r3, #8
 800bf26:	0f1a      	lsrs	r2, r3, #28
 800bf28:	d101      	bne.n	800bf2e <__hi0bits+0x1e>
 800bf2a:	3004      	adds	r0, #4
 800bf2c:	011b      	lsls	r3, r3, #4
 800bf2e:	0f9a      	lsrs	r2, r3, #30
 800bf30:	d101      	bne.n	800bf36 <__hi0bits+0x26>
 800bf32:	3002      	adds	r0, #2
 800bf34:	009b      	lsls	r3, r3, #2
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	db03      	blt.n	800bf42 <__hi0bits+0x32>
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	d400      	bmi.n	800bf42 <__hi0bits+0x32>
 800bf40:	2020      	movs	r0, #32
 800bf42:	4770      	bx	lr

0800bf44 <__lo0bits>:
 800bf44:	6803      	ldr	r3, [r0, #0]
 800bf46:	0001      	movs	r1, r0
 800bf48:	2207      	movs	r2, #7
 800bf4a:	0018      	movs	r0, r3
 800bf4c:	4010      	ands	r0, r2
 800bf4e:	4213      	tst	r3, r2
 800bf50:	d00d      	beq.n	800bf6e <__lo0bits+0x2a>
 800bf52:	3a06      	subs	r2, #6
 800bf54:	2000      	movs	r0, #0
 800bf56:	4213      	tst	r3, r2
 800bf58:	d105      	bne.n	800bf66 <__lo0bits+0x22>
 800bf5a:	3002      	adds	r0, #2
 800bf5c:	4203      	tst	r3, r0
 800bf5e:	d003      	beq.n	800bf68 <__lo0bits+0x24>
 800bf60:	40d3      	lsrs	r3, r2
 800bf62:	0010      	movs	r0, r2
 800bf64:	600b      	str	r3, [r1, #0]
 800bf66:	4770      	bx	lr
 800bf68:	089b      	lsrs	r3, r3, #2
 800bf6a:	600b      	str	r3, [r1, #0]
 800bf6c:	e7fb      	b.n	800bf66 <__lo0bits+0x22>
 800bf6e:	b29a      	uxth	r2, r3
 800bf70:	2a00      	cmp	r2, #0
 800bf72:	d101      	bne.n	800bf78 <__lo0bits+0x34>
 800bf74:	2010      	movs	r0, #16
 800bf76:	0c1b      	lsrs	r3, r3, #16
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	2a00      	cmp	r2, #0
 800bf7c:	d101      	bne.n	800bf82 <__lo0bits+0x3e>
 800bf7e:	3008      	adds	r0, #8
 800bf80:	0a1b      	lsrs	r3, r3, #8
 800bf82:	071a      	lsls	r2, r3, #28
 800bf84:	d101      	bne.n	800bf8a <__lo0bits+0x46>
 800bf86:	3004      	adds	r0, #4
 800bf88:	091b      	lsrs	r3, r3, #4
 800bf8a:	079a      	lsls	r2, r3, #30
 800bf8c:	d101      	bne.n	800bf92 <__lo0bits+0x4e>
 800bf8e:	3002      	adds	r0, #2
 800bf90:	089b      	lsrs	r3, r3, #2
 800bf92:	07da      	lsls	r2, r3, #31
 800bf94:	d4e9      	bmi.n	800bf6a <__lo0bits+0x26>
 800bf96:	3001      	adds	r0, #1
 800bf98:	085b      	lsrs	r3, r3, #1
 800bf9a:	d1e6      	bne.n	800bf6a <__lo0bits+0x26>
 800bf9c:	2020      	movs	r0, #32
 800bf9e:	e7e2      	b.n	800bf66 <__lo0bits+0x22>

0800bfa0 <__i2b>:
 800bfa0:	b510      	push	{r4, lr}
 800bfa2:	000c      	movs	r4, r1
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	f7ff febb 	bl	800bd20 <_Balloc>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d107      	bne.n	800bfbe <__i2b+0x1e>
 800bfae:	2146      	movs	r1, #70	; 0x46
 800bfb0:	4c05      	ldr	r4, [pc, #20]	; (800bfc8 <__i2b+0x28>)
 800bfb2:	0002      	movs	r2, r0
 800bfb4:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <__i2b+0x2c>)
 800bfb6:	0020      	movs	r0, r4
 800bfb8:	31ff      	adds	r1, #255	; 0xff
 800bfba:	f001 fc7f 	bl	800d8bc <__assert_func>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	6144      	str	r4, [r0, #20]
 800bfc2:	6103      	str	r3, [r0, #16]
 800bfc4:	bd10      	pop	{r4, pc}
 800bfc6:	46c0      	nop			; (mov r8, r8)
 800bfc8:	0800ed36 	.word	0x0800ed36
 800bfcc:	0800ed25 	.word	0x0800ed25

0800bfd0 <__multiply>:
 800bfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd2:	0015      	movs	r5, r2
 800bfd4:	690a      	ldr	r2, [r1, #16]
 800bfd6:	692b      	ldr	r3, [r5, #16]
 800bfd8:	000c      	movs	r4, r1
 800bfda:	b08b      	sub	sp, #44	; 0x2c
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	da01      	bge.n	800bfe4 <__multiply+0x14>
 800bfe0:	002c      	movs	r4, r5
 800bfe2:	000d      	movs	r5, r1
 800bfe4:	6927      	ldr	r7, [r4, #16]
 800bfe6:	692e      	ldr	r6, [r5, #16]
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	19bb      	adds	r3, r7, r6
 800bfec:	9303      	str	r3, [sp, #12]
 800bfee:	68a3      	ldr	r3, [r4, #8]
 800bff0:	19ba      	adds	r2, r7, r6
 800bff2:	4293      	cmp	r3, r2
 800bff4:	da00      	bge.n	800bff8 <__multiply+0x28>
 800bff6:	3101      	adds	r1, #1
 800bff8:	f7ff fe92 	bl	800bd20 <_Balloc>
 800bffc:	9002      	str	r0, [sp, #8]
 800bffe:	2800      	cmp	r0, #0
 800c000:	d106      	bne.n	800c010 <__multiply+0x40>
 800c002:	21b1      	movs	r1, #177	; 0xb1
 800c004:	4b48      	ldr	r3, [pc, #288]	; (800c128 <__multiply+0x158>)
 800c006:	4849      	ldr	r0, [pc, #292]	; (800c12c <__multiply+0x15c>)
 800c008:	9a02      	ldr	r2, [sp, #8]
 800c00a:	0049      	lsls	r1, r1, #1
 800c00c:	f001 fc56 	bl	800d8bc <__assert_func>
 800c010:	9b02      	ldr	r3, [sp, #8]
 800c012:	2200      	movs	r2, #0
 800c014:	3314      	adds	r3, #20
 800c016:	469c      	mov	ip, r3
 800c018:	19bb      	adds	r3, r7, r6
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4463      	add	r3, ip
 800c01e:	9304      	str	r3, [sp, #16]
 800c020:	4663      	mov	r3, ip
 800c022:	9904      	ldr	r1, [sp, #16]
 800c024:	428b      	cmp	r3, r1
 800c026:	d32a      	bcc.n	800c07e <__multiply+0xae>
 800c028:	0023      	movs	r3, r4
 800c02a:	00bf      	lsls	r7, r7, #2
 800c02c:	3314      	adds	r3, #20
 800c02e:	3514      	adds	r5, #20
 800c030:	9308      	str	r3, [sp, #32]
 800c032:	00b6      	lsls	r6, r6, #2
 800c034:	19db      	adds	r3, r3, r7
 800c036:	9305      	str	r3, [sp, #20]
 800c038:	19ab      	adds	r3, r5, r6
 800c03a:	9309      	str	r3, [sp, #36]	; 0x24
 800c03c:	2304      	movs	r3, #4
 800c03e:	9306      	str	r3, [sp, #24]
 800c040:	0023      	movs	r3, r4
 800c042:	9a05      	ldr	r2, [sp, #20]
 800c044:	3315      	adds	r3, #21
 800c046:	9501      	str	r5, [sp, #4]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d305      	bcc.n	800c058 <__multiply+0x88>
 800c04c:	1b13      	subs	r3, r2, r4
 800c04e:	3b15      	subs	r3, #21
 800c050:	089b      	lsrs	r3, r3, #2
 800c052:	3301      	adds	r3, #1
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	9306      	str	r3, [sp, #24]
 800c058:	9b01      	ldr	r3, [sp, #4]
 800c05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d310      	bcc.n	800c082 <__multiply+0xb2>
 800c060:	9b03      	ldr	r3, [sp, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	dd05      	ble.n	800c072 <__multiply+0xa2>
 800c066:	9b04      	ldr	r3, [sp, #16]
 800c068:	3b04      	subs	r3, #4
 800c06a:	9304      	str	r3, [sp, #16]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d056      	beq.n	800c120 <__multiply+0x150>
 800c072:	9b02      	ldr	r3, [sp, #8]
 800c074:	9a03      	ldr	r2, [sp, #12]
 800c076:	0018      	movs	r0, r3
 800c078:	611a      	str	r2, [r3, #16]
 800c07a:	b00b      	add	sp, #44	; 0x2c
 800c07c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c07e:	c304      	stmia	r3!, {r2}
 800c080:	e7cf      	b.n	800c022 <__multiply+0x52>
 800c082:	9b01      	ldr	r3, [sp, #4]
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	b280      	uxth	r0, r0
 800c088:	2800      	cmp	r0, #0
 800c08a:	d01e      	beq.n	800c0ca <__multiply+0xfa>
 800c08c:	4667      	mov	r7, ip
 800c08e:	2500      	movs	r5, #0
 800c090:	9e08      	ldr	r6, [sp, #32]
 800c092:	ce02      	ldmia	r6!, {r1}
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	9307      	str	r3, [sp, #28]
 800c098:	b28b      	uxth	r3, r1
 800c09a:	4343      	muls	r3, r0
 800c09c:	001a      	movs	r2, r3
 800c09e:	466b      	mov	r3, sp
 800c0a0:	8b9b      	ldrh	r3, [r3, #28]
 800c0a2:	18d3      	adds	r3, r2, r3
 800c0a4:	195b      	adds	r3, r3, r5
 800c0a6:	0c0d      	lsrs	r5, r1, #16
 800c0a8:	4345      	muls	r5, r0
 800c0aa:	9a07      	ldr	r2, [sp, #28]
 800c0ac:	0c11      	lsrs	r1, r2, #16
 800c0ae:	1869      	adds	r1, r5, r1
 800c0b0:	0c1a      	lsrs	r2, r3, #16
 800c0b2:	188a      	adds	r2, r1, r2
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	0c15      	lsrs	r5, r2, #16
 800c0b8:	0412      	lsls	r2, r2, #16
 800c0ba:	431a      	orrs	r2, r3
 800c0bc:	9b05      	ldr	r3, [sp, #20]
 800c0be:	c704      	stmia	r7!, {r2}
 800c0c0:	42b3      	cmp	r3, r6
 800c0c2:	d8e6      	bhi.n	800c092 <__multiply+0xc2>
 800c0c4:	4663      	mov	r3, ip
 800c0c6:	9a06      	ldr	r2, [sp, #24]
 800c0c8:	509d      	str	r5, [r3, r2]
 800c0ca:	9b01      	ldr	r3, [sp, #4]
 800c0cc:	6818      	ldr	r0, [r3, #0]
 800c0ce:	0c00      	lsrs	r0, r0, #16
 800c0d0:	d020      	beq.n	800c114 <__multiply+0x144>
 800c0d2:	4663      	mov	r3, ip
 800c0d4:	0025      	movs	r5, r4
 800c0d6:	4661      	mov	r1, ip
 800c0d8:	2700      	movs	r7, #0
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	3514      	adds	r5, #20
 800c0de:	682a      	ldr	r2, [r5, #0]
 800c0e0:	680e      	ldr	r6, [r1, #0]
 800c0e2:	b292      	uxth	r2, r2
 800c0e4:	4342      	muls	r2, r0
 800c0e6:	0c36      	lsrs	r6, r6, #16
 800c0e8:	1992      	adds	r2, r2, r6
 800c0ea:	19d2      	adds	r2, r2, r7
 800c0ec:	0416      	lsls	r6, r2, #16
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	431e      	orrs	r6, r3
 800c0f2:	600e      	str	r6, [r1, #0]
 800c0f4:	cd40      	ldmia	r5!, {r6}
 800c0f6:	684b      	ldr	r3, [r1, #4]
 800c0f8:	0c36      	lsrs	r6, r6, #16
 800c0fa:	4346      	muls	r6, r0
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	0c12      	lsrs	r2, r2, #16
 800c100:	18f3      	adds	r3, r6, r3
 800c102:	189b      	adds	r3, r3, r2
 800c104:	9a05      	ldr	r2, [sp, #20]
 800c106:	0c1f      	lsrs	r7, r3, #16
 800c108:	3104      	adds	r1, #4
 800c10a:	42aa      	cmp	r2, r5
 800c10c:	d8e7      	bhi.n	800c0de <__multiply+0x10e>
 800c10e:	4662      	mov	r2, ip
 800c110:	9906      	ldr	r1, [sp, #24]
 800c112:	5053      	str	r3, [r2, r1]
 800c114:	9b01      	ldr	r3, [sp, #4]
 800c116:	3304      	adds	r3, #4
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	2304      	movs	r3, #4
 800c11c:	449c      	add	ip, r3
 800c11e:	e79b      	b.n	800c058 <__multiply+0x88>
 800c120:	9b03      	ldr	r3, [sp, #12]
 800c122:	3b01      	subs	r3, #1
 800c124:	9303      	str	r3, [sp, #12]
 800c126:	e79b      	b.n	800c060 <__multiply+0x90>
 800c128:	0800ed25 	.word	0x0800ed25
 800c12c:	0800ed36 	.word	0x0800ed36

0800c130 <__pow5mult>:
 800c130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c132:	2303      	movs	r3, #3
 800c134:	0015      	movs	r5, r2
 800c136:	0007      	movs	r7, r0
 800c138:	000e      	movs	r6, r1
 800c13a:	401a      	ands	r2, r3
 800c13c:	421d      	tst	r5, r3
 800c13e:	d008      	beq.n	800c152 <__pow5mult+0x22>
 800c140:	4925      	ldr	r1, [pc, #148]	; (800c1d8 <__pow5mult+0xa8>)
 800c142:	3a01      	subs	r2, #1
 800c144:	0092      	lsls	r2, r2, #2
 800c146:	5852      	ldr	r2, [r2, r1]
 800c148:	2300      	movs	r3, #0
 800c14a:	0031      	movs	r1, r6
 800c14c:	f7ff fe50 	bl	800bdf0 <__multadd>
 800c150:	0006      	movs	r6, r0
 800c152:	10ad      	asrs	r5, r5, #2
 800c154:	d03d      	beq.n	800c1d2 <__pow5mult+0xa2>
 800c156:	69fc      	ldr	r4, [r7, #28]
 800c158:	2c00      	cmp	r4, #0
 800c15a:	d10f      	bne.n	800c17c <__pow5mult+0x4c>
 800c15c:	2010      	movs	r0, #16
 800c15e:	f7ff fd21 	bl	800bba4 <malloc>
 800c162:	1e02      	subs	r2, r0, #0
 800c164:	61f8      	str	r0, [r7, #28]
 800c166:	d105      	bne.n	800c174 <__pow5mult+0x44>
 800c168:	21b4      	movs	r1, #180	; 0xb4
 800c16a:	4b1c      	ldr	r3, [pc, #112]	; (800c1dc <__pow5mult+0xac>)
 800c16c:	481c      	ldr	r0, [pc, #112]	; (800c1e0 <__pow5mult+0xb0>)
 800c16e:	31ff      	adds	r1, #255	; 0xff
 800c170:	f001 fba4 	bl	800d8bc <__assert_func>
 800c174:	6044      	str	r4, [r0, #4]
 800c176:	6084      	str	r4, [r0, #8]
 800c178:	6004      	str	r4, [r0, #0]
 800c17a:	60c4      	str	r4, [r0, #12]
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	689c      	ldr	r4, [r3, #8]
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	2c00      	cmp	r4, #0
 800c184:	d108      	bne.n	800c198 <__pow5mult+0x68>
 800c186:	0038      	movs	r0, r7
 800c188:	4916      	ldr	r1, [pc, #88]	; (800c1e4 <__pow5mult+0xb4>)
 800c18a:	f7ff ff09 	bl	800bfa0 <__i2b>
 800c18e:	9b01      	ldr	r3, [sp, #4]
 800c190:	0004      	movs	r4, r0
 800c192:	6098      	str	r0, [r3, #8]
 800c194:	2300      	movs	r3, #0
 800c196:	6003      	str	r3, [r0, #0]
 800c198:	2301      	movs	r3, #1
 800c19a:	421d      	tst	r5, r3
 800c19c:	d00a      	beq.n	800c1b4 <__pow5mult+0x84>
 800c19e:	0031      	movs	r1, r6
 800c1a0:	0022      	movs	r2, r4
 800c1a2:	0038      	movs	r0, r7
 800c1a4:	f7ff ff14 	bl	800bfd0 <__multiply>
 800c1a8:	0031      	movs	r1, r6
 800c1aa:	9001      	str	r0, [sp, #4]
 800c1ac:	0038      	movs	r0, r7
 800c1ae:	f7ff fdfb 	bl	800bda8 <_Bfree>
 800c1b2:	9e01      	ldr	r6, [sp, #4]
 800c1b4:	106d      	asrs	r5, r5, #1
 800c1b6:	d00c      	beq.n	800c1d2 <__pow5mult+0xa2>
 800c1b8:	6820      	ldr	r0, [r4, #0]
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d107      	bne.n	800c1ce <__pow5mult+0x9e>
 800c1be:	0022      	movs	r2, r4
 800c1c0:	0021      	movs	r1, r4
 800c1c2:	0038      	movs	r0, r7
 800c1c4:	f7ff ff04 	bl	800bfd0 <__multiply>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	6020      	str	r0, [r4, #0]
 800c1cc:	6003      	str	r3, [r0, #0]
 800c1ce:	0004      	movs	r4, r0
 800c1d0:	e7e2      	b.n	800c198 <__pow5mult+0x68>
 800c1d2:	0030      	movs	r0, r6
 800c1d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1d6:	46c0      	nop			; (mov r8, r8)
 800c1d8:	0800ee80 	.word	0x0800ee80
 800c1dc:	0800ecb6 	.word	0x0800ecb6
 800c1e0:	0800ed36 	.word	0x0800ed36
 800c1e4:	00000271 	.word	0x00000271

0800c1e8 <__lshift>:
 800c1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1ea:	000c      	movs	r4, r1
 800c1ec:	0017      	movs	r7, r2
 800c1ee:	6923      	ldr	r3, [r4, #16]
 800c1f0:	1155      	asrs	r5, r2, #5
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	18eb      	adds	r3, r5, r3
 800c1f6:	9302      	str	r3, [sp, #8]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	6849      	ldr	r1, [r1, #4]
 800c1fe:	68a3      	ldr	r3, [r4, #8]
 800c200:	9004      	str	r0, [sp, #16]
 800c202:	9a01      	ldr	r2, [sp, #4]
 800c204:	4293      	cmp	r3, r2
 800c206:	db10      	blt.n	800c22a <__lshift+0x42>
 800c208:	9804      	ldr	r0, [sp, #16]
 800c20a:	f7ff fd89 	bl	800bd20 <_Balloc>
 800c20e:	2300      	movs	r3, #0
 800c210:	0002      	movs	r2, r0
 800c212:	0006      	movs	r6, r0
 800c214:	0019      	movs	r1, r3
 800c216:	3214      	adds	r2, #20
 800c218:	4298      	cmp	r0, r3
 800c21a:	d10c      	bne.n	800c236 <__lshift+0x4e>
 800c21c:	31df      	adds	r1, #223	; 0xdf
 800c21e:	0032      	movs	r2, r6
 800c220:	4b26      	ldr	r3, [pc, #152]	; (800c2bc <__lshift+0xd4>)
 800c222:	4827      	ldr	r0, [pc, #156]	; (800c2c0 <__lshift+0xd8>)
 800c224:	31ff      	adds	r1, #255	; 0xff
 800c226:	f001 fb49 	bl	800d8bc <__assert_func>
 800c22a:	3101      	adds	r1, #1
 800c22c:	005b      	lsls	r3, r3, #1
 800c22e:	e7e8      	b.n	800c202 <__lshift+0x1a>
 800c230:	0098      	lsls	r0, r3, #2
 800c232:	5011      	str	r1, [r2, r0]
 800c234:	3301      	adds	r3, #1
 800c236:	42ab      	cmp	r3, r5
 800c238:	dbfa      	blt.n	800c230 <__lshift+0x48>
 800c23a:	43eb      	mvns	r3, r5
 800c23c:	17db      	asrs	r3, r3, #31
 800c23e:	401d      	ands	r5, r3
 800c240:	211f      	movs	r1, #31
 800c242:	0023      	movs	r3, r4
 800c244:	0038      	movs	r0, r7
 800c246:	00ad      	lsls	r5, r5, #2
 800c248:	1955      	adds	r5, r2, r5
 800c24a:	6922      	ldr	r2, [r4, #16]
 800c24c:	3314      	adds	r3, #20
 800c24e:	0092      	lsls	r2, r2, #2
 800c250:	4008      	ands	r0, r1
 800c252:	4684      	mov	ip, r0
 800c254:	189a      	adds	r2, r3, r2
 800c256:	420f      	tst	r7, r1
 800c258:	d02a      	beq.n	800c2b0 <__lshift+0xc8>
 800c25a:	3101      	adds	r1, #1
 800c25c:	1a09      	subs	r1, r1, r0
 800c25e:	9105      	str	r1, [sp, #20]
 800c260:	2100      	movs	r1, #0
 800c262:	9503      	str	r5, [sp, #12]
 800c264:	4667      	mov	r7, ip
 800c266:	6818      	ldr	r0, [r3, #0]
 800c268:	40b8      	lsls	r0, r7
 800c26a:	4308      	orrs	r0, r1
 800c26c:	9903      	ldr	r1, [sp, #12]
 800c26e:	c101      	stmia	r1!, {r0}
 800c270:	9103      	str	r1, [sp, #12]
 800c272:	9805      	ldr	r0, [sp, #20]
 800c274:	cb02      	ldmia	r3!, {r1}
 800c276:	40c1      	lsrs	r1, r0
 800c278:	429a      	cmp	r2, r3
 800c27a:	d8f3      	bhi.n	800c264 <__lshift+0x7c>
 800c27c:	0020      	movs	r0, r4
 800c27e:	3015      	adds	r0, #21
 800c280:	2304      	movs	r3, #4
 800c282:	4282      	cmp	r2, r0
 800c284:	d304      	bcc.n	800c290 <__lshift+0xa8>
 800c286:	1b13      	subs	r3, r2, r4
 800c288:	3b15      	subs	r3, #21
 800c28a:	089b      	lsrs	r3, r3, #2
 800c28c:	3301      	adds	r3, #1
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	50e9      	str	r1, [r5, r3]
 800c292:	2900      	cmp	r1, #0
 800c294:	d002      	beq.n	800c29c <__lshift+0xb4>
 800c296:	9b02      	ldr	r3, [sp, #8]
 800c298:	3302      	adds	r3, #2
 800c29a:	9301      	str	r3, [sp, #4]
 800c29c:	9b01      	ldr	r3, [sp, #4]
 800c29e:	9804      	ldr	r0, [sp, #16]
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	0021      	movs	r1, r4
 800c2a4:	6133      	str	r3, [r6, #16]
 800c2a6:	f7ff fd7f 	bl	800bda8 <_Bfree>
 800c2aa:	0030      	movs	r0, r6
 800c2ac:	b007      	add	sp, #28
 800c2ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b0:	cb02      	ldmia	r3!, {r1}
 800c2b2:	c502      	stmia	r5!, {r1}
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d8fb      	bhi.n	800c2b0 <__lshift+0xc8>
 800c2b8:	e7f0      	b.n	800c29c <__lshift+0xb4>
 800c2ba:	46c0      	nop			; (mov r8, r8)
 800c2bc:	0800ed25 	.word	0x0800ed25
 800c2c0:	0800ed36 	.word	0x0800ed36

0800c2c4 <__mcmp>:
 800c2c4:	b530      	push	{r4, r5, lr}
 800c2c6:	690b      	ldr	r3, [r1, #16]
 800c2c8:	6904      	ldr	r4, [r0, #16]
 800c2ca:	0002      	movs	r2, r0
 800c2cc:	1ae0      	subs	r0, r4, r3
 800c2ce:	429c      	cmp	r4, r3
 800c2d0:	d10e      	bne.n	800c2f0 <__mcmp+0x2c>
 800c2d2:	3214      	adds	r2, #20
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	3114      	adds	r1, #20
 800c2d8:	0014      	movs	r4, r2
 800c2da:	18c9      	adds	r1, r1, r3
 800c2dc:	18d2      	adds	r2, r2, r3
 800c2de:	3a04      	subs	r2, #4
 800c2e0:	3904      	subs	r1, #4
 800c2e2:	6815      	ldr	r5, [r2, #0]
 800c2e4:	680b      	ldr	r3, [r1, #0]
 800c2e6:	429d      	cmp	r5, r3
 800c2e8:	d003      	beq.n	800c2f2 <__mcmp+0x2e>
 800c2ea:	2001      	movs	r0, #1
 800c2ec:	429d      	cmp	r5, r3
 800c2ee:	d303      	bcc.n	800c2f8 <__mcmp+0x34>
 800c2f0:	bd30      	pop	{r4, r5, pc}
 800c2f2:	4294      	cmp	r4, r2
 800c2f4:	d3f3      	bcc.n	800c2de <__mcmp+0x1a>
 800c2f6:	e7fb      	b.n	800c2f0 <__mcmp+0x2c>
 800c2f8:	4240      	negs	r0, r0
 800c2fa:	e7f9      	b.n	800c2f0 <__mcmp+0x2c>

0800c2fc <__mdiff>:
 800c2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2fe:	000e      	movs	r6, r1
 800c300:	0007      	movs	r7, r0
 800c302:	0011      	movs	r1, r2
 800c304:	0030      	movs	r0, r6
 800c306:	b087      	sub	sp, #28
 800c308:	0014      	movs	r4, r2
 800c30a:	f7ff ffdb 	bl	800c2c4 <__mcmp>
 800c30e:	1e05      	subs	r5, r0, #0
 800c310:	d110      	bne.n	800c334 <__mdiff+0x38>
 800c312:	0001      	movs	r1, r0
 800c314:	0038      	movs	r0, r7
 800c316:	f7ff fd03 	bl	800bd20 <_Balloc>
 800c31a:	1e02      	subs	r2, r0, #0
 800c31c:	d104      	bne.n	800c328 <__mdiff+0x2c>
 800c31e:	4b3f      	ldr	r3, [pc, #252]	; (800c41c <__mdiff+0x120>)
 800c320:	483f      	ldr	r0, [pc, #252]	; (800c420 <__mdiff+0x124>)
 800c322:	4940      	ldr	r1, [pc, #256]	; (800c424 <__mdiff+0x128>)
 800c324:	f001 faca 	bl	800d8bc <__assert_func>
 800c328:	2301      	movs	r3, #1
 800c32a:	6145      	str	r5, [r0, #20]
 800c32c:	6103      	str	r3, [r0, #16]
 800c32e:	0010      	movs	r0, r2
 800c330:	b007      	add	sp, #28
 800c332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c334:	2301      	movs	r3, #1
 800c336:	9301      	str	r3, [sp, #4]
 800c338:	2800      	cmp	r0, #0
 800c33a:	db04      	blt.n	800c346 <__mdiff+0x4a>
 800c33c:	0023      	movs	r3, r4
 800c33e:	0034      	movs	r4, r6
 800c340:	001e      	movs	r6, r3
 800c342:	2300      	movs	r3, #0
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	0038      	movs	r0, r7
 800c348:	6861      	ldr	r1, [r4, #4]
 800c34a:	f7ff fce9 	bl	800bd20 <_Balloc>
 800c34e:	1e02      	subs	r2, r0, #0
 800c350:	d103      	bne.n	800c35a <__mdiff+0x5e>
 800c352:	4b32      	ldr	r3, [pc, #200]	; (800c41c <__mdiff+0x120>)
 800c354:	4832      	ldr	r0, [pc, #200]	; (800c420 <__mdiff+0x124>)
 800c356:	4934      	ldr	r1, [pc, #208]	; (800c428 <__mdiff+0x12c>)
 800c358:	e7e4      	b.n	800c324 <__mdiff+0x28>
 800c35a:	9b01      	ldr	r3, [sp, #4]
 800c35c:	2700      	movs	r7, #0
 800c35e:	60c3      	str	r3, [r0, #12]
 800c360:	6920      	ldr	r0, [r4, #16]
 800c362:	3414      	adds	r4, #20
 800c364:	0083      	lsls	r3, r0, #2
 800c366:	18e3      	adds	r3, r4, r3
 800c368:	0021      	movs	r1, r4
 800c36a:	9401      	str	r4, [sp, #4]
 800c36c:	0034      	movs	r4, r6
 800c36e:	9302      	str	r3, [sp, #8]
 800c370:	6933      	ldr	r3, [r6, #16]
 800c372:	3414      	adds	r4, #20
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	18e3      	adds	r3, r4, r3
 800c378:	9303      	str	r3, [sp, #12]
 800c37a:	0013      	movs	r3, r2
 800c37c:	3314      	adds	r3, #20
 800c37e:	469c      	mov	ip, r3
 800c380:	9305      	str	r3, [sp, #20]
 800c382:	9104      	str	r1, [sp, #16]
 800c384:	9b04      	ldr	r3, [sp, #16]
 800c386:	cc02      	ldmia	r4!, {r1}
 800c388:	cb20      	ldmia	r3!, {r5}
 800c38a:	9304      	str	r3, [sp, #16]
 800c38c:	b2ab      	uxth	r3, r5
 800c38e:	19df      	adds	r7, r3, r7
 800c390:	b28b      	uxth	r3, r1
 800c392:	1afb      	subs	r3, r7, r3
 800c394:	0c09      	lsrs	r1, r1, #16
 800c396:	0c2d      	lsrs	r5, r5, #16
 800c398:	1a6d      	subs	r5, r5, r1
 800c39a:	1419      	asrs	r1, r3, #16
 800c39c:	1869      	adds	r1, r5, r1
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	140f      	asrs	r7, r1, #16
 800c3a2:	0409      	lsls	r1, r1, #16
 800c3a4:	4319      	orrs	r1, r3
 800c3a6:	4663      	mov	r3, ip
 800c3a8:	c302      	stmia	r3!, {r1}
 800c3aa:	469c      	mov	ip, r3
 800c3ac:	9b03      	ldr	r3, [sp, #12]
 800c3ae:	42a3      	cmp	r3, r4
 800c3b0:	d8e8      	bhi.n	800c384 <__mdiff+0x88>
 800c3b2:	0031      	movs	r1, r6
 800c3b4:	9c03      	ldr	r4, [sp, #12]
 800c3b6:	3115      	adds	r1, #21
 800c3b8:	2304      	movs	r3, #4
 800c3ba:	428c      	cmp	r4, r1
 800c3bc:	d304      	bcc.n	800c3c8 <__mdiff+0xcc>
 800c3be:	1ba3      	subs	r3, r4, r6
 800c3c0:	3b15      	subs	r3, #21
 800c3c2:	089b      	lsrs	r3, r3, #2
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	9901      	ldr	r1, [sp, #4]
 800c3ca:	18cd      	adds	r5, r1, r3
 800c3cc:	9905      	ldr	r1, [sp, #20]
 800c3ce:	002e      	movs	r6, r5
 800c3d0:	18cb      	adds	r3, r1, r3
 800c3d2:	469c      	mov	ip, r3
 800c3d4:	9902      	ldr	r1, [sp, #8]
 800c3d6:	428e      	cmp	r6, r1
 800c3d8:	d310      	bcc.n	800c3fc <__mdiff+0x100>
 800c3da:	9e02      	ldr	r6, [sp, #8]
 800c3dc:	1ee9      	subs	r1, r5, #3
 800c3de:	2400      	movs	r4, #0
 800c3e0:	428e      	cmp	r6, r1
 800c3e2:	d304      	bcc.n	800c3ee <__mdiff+0xf2>
 800c3e4:	0031      	movs	r1, r6
 800c3e6:	3103      	adds	r1, #3
 800c3e8:	1b49      	subs	r1, r1, r5
 800c3ea:	0889      	lsrs	r1, r1, #2
 800c3ec:	008c      	lsls	r4, r1, #2
 800c3ee:	191b      	adds	r3, r3, r4
 800c3f0:	3b04      	subs	r3, #4
 800c3f2:	6819      	ldr	r1, [r3, #0]
 800c3f4:	2900      	cmp	r1, #0
 800c3f6:	d00f      	beq.n	800c418 <__mdiff+0x11c>
 800c3f8:	6110      	str	r0, [r2, #16]
 800c3fa:	e798      	b.n	800c32e <__mdiff+0x32>
 800c3fc:	ce02      	ldmia	r6!, {r1}
 800c3fe:	b28c      	uxth	r4, r1
 800c400:	19e4      	adds	r4, r4, r7
 800c402:	0c0f      	lsrs	r7, r1, #16
 800c404:	1421      	asrs	r1, r4, #16
 800c406:	1879      	adds	r1, r7, r1
 800c408:	b2a4      	uxth	r4, r4
 800c40a:	140f      	asrs	r7, r1, #16
 800c40c:	0409      	lsls	r1, r1, #16
 800c40e:	4321      	orrs	r1, r4
 800c410:	4664      	mov	r4, ip
 800c412:	c402      	stmia	r4!, {r1}
 800c414:	46a4      	mov	ip, r4
 800c416:	e7dd      	b.n	800c3d4 <__mdiff+0xd8>
 800c418:	3801      	subs	r0, #1
 800c41a:	e7e9      	b.n	800c3f0 <__mdiff+0xf4>
 800c41c:	0800ed25 	.word	0x0800ed25
 800c420:	0800ed36 	.word	0x0800ed36
 800c424:	00000237 	.word	0x00000237
 800c428:	00000245 	.word	0x00000245

0800c42c <__ulp>:
 800c42c:	2000      	movs	r0, #0
 800c42e:	4b0b      	ldr	r3, [pc, #44]	; (800c45c <__ulp+0x30>)
 800c430:	4019      	ands	r1, r3
 800c432:	4b0b      	ldr	r3, [pc, #44]	; (800c460 <__ulp+0x34>)
 800c434:	18c9      	adds	r1, r1, r3
 800c436:	4281      	cmp	r1, r0
 800c438:	dc06      	bgt.n	800c448 <__ulp+0x1c>
 800c43a:	4249      	negs	r1, r1
 800c43c:	150b      	asrs	r3, r1, #20
 800c43e:	2b13      	cmp	r3, #19
 800c440:	dc03      	bgt.n	800c44a <__ulp+0x1e>
 800c442:	2180      	movs	r1, #128	; 0x80
 800c444:	0309      	lsls	r1, r1, #12
 800c446:	4119      	asrs	r1, r3
 800c448:	4770      	bx	lr
 800c44a:	3b14      	subs	r3, #20
 800c44c:	2001      	movs	r0, #1
 800c44e:	2b1e      	cmp	r3, #30
 800c450:	dc02      	bgt.n	800c458 <__ulp+0x2c>
 800c452:	2080      	movs	r0, #128	; 0x80
 800c454:	0600      	lsls	r0, r0, #24
 800c456:	40d8      	lsrs	r0, r3
 800c458:	2100      	movs	r1, #0
 800c45a:	e7f5      	b.n	800c448 <__ulp+0x1c>
 800c45c:	7ff00000 	.word	0x7ff00000
 800c460:	fcc00000 	.word	0xfcc00000

0800c464 <__b2d>:
 800c464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c466:	0006      	movs	r6, r0
 800c468:	6903      	ldr	r3, [r0, #16]
 800c46a:	3614      	adds	r6, #20
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	18f3      	adds	r3, r6, r3
 800c470:	1f1d      	subs	r5, r3, #4
 800c472:	682c      	ldr	r4, [r5, #0]
 800c474:	000f      	movs	r7, r1
 800c476:	0020      	movs	r0, r4
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	f7ff fd49 	bl	800bf10 <__hi0bits>
 800c47e:	2220      	movs	r2, #32
 800c480:	1a12      	subs	r2, r2, r0
 800c482:	603a      	str	r2, [r7, #0]
 800c484:	0003      	movs	r3, r0
 800c486:	4a1c      	ldr	r2, [pc, #112]	; (800c4f8 <__b2d+0x94>)
 800c488:	280a      	cmp	r0, #10
 800c48a:	dc15      	bgt.n	800c4b8 <__b2d+0x54>
 800c48c:	210b      	movs	r1, #11
 800c48e:	0027      	movs	r7, r4
 800c490:	1a09      	subs	r1, r1, r0
 800c492:	40cf      	lsrs	r7, r1
 800c494:	433a      	orrs	r2, r7
 800c496:	468c      	mov	ip, r1
 800c498:	0011      	movs	r1, r2
 800c49a:	2200      	movs	r2, #0
 800c49c:	42ae      	cmp	r6, r5
 800c49e:	d202      	bcs.n	800c4a6 <__b2d+0x42>
 800c4a0:	9a01      	ldr	r2, [sp, #4]
 800c4a2:	3a08      	subs	r2, #8
 800c4a4:	6812      	ldr	r2, [r2, #0]
 800c4a6:	3315      	adds	r3, #21
 800c4a8:	409c      	lsls	r4, r3
 800c4aa:	4663      	mov	r3, ip
 800c4ac:	0027      	movs	r7, r4
 800c4ae:	40da      	lsrs	r2, r3
 800c4b0:	4317      	orrs	r7, r2
 800c4b2:	0038      	movs	r0, r7
 800c4b4:	b003      	add	sp, #12
 800c4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b8:	2700      	movs	r7, #0
 800c4ba:	42ae      	cmp	r6, r5
 800c4bc:	d202      	bcs.n	800c4c4 <__b2d+0x60>
 800c4be:	9d01      	ldr	r5, [sp, #4]
 800c4c0:	3d08      	subs	r5, #8
 800c4c2:	682f      	ldr	r7, [r5, #0]
 800c4c4:	210b      	movs	r1, #11
 800c4c6:	4249      	negs	r1, r1
 800c4c8:	468c      	mov	ip, r1
 800c4ca:	449c      	add	ip, r3
 800c4cc:	2b0b      	cmp	r3, #11
 800c4ce:	d010      	beq.n	800c4f2 <__b2d+0x8e>
 800c4d0:	4661      	mov	r1, ip
 800c4d2:	2320      	movs	r3, #32
 800c4d4:	408c      	lsls	r4, r1
 800c4d6:	1a5b      	subs	r3, r3, r1
 800c4d8:	0039      	movs	r1, r7
 800c4da:	40d9      	lsrs	r1, r3
 800c4dc:	430c      	orrs	r4, r1
 800c4de:	4322      	orrs	r2, r4
 800c4e0:	0011      	movs	r1, r2
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	42b5      	cmp	r5, r6
 800c4e6:	d901      	bls.n	800c4ec <__b2d+0x88>
 800c4e8:	3d04      	subs	r5, #4
 800c4ea:	682a      	ldr	r2, [r5, #0]
 800c4ec:	4664      	mov	r4, ip
 800c4ee:	40a7      	lsls	r7, r4
 800c4f0:	e7dd      	b.n	800c4ae <__b2d+0x4a>
 800c4f2:	4322      	orrs	r2, r4
 800c4f4:	0011      	movs	r1, r2
 800c4f6:	e7dc      	b.n	800c4b2 <__b2d+0x4e>
 800c4f8:	3ff00000 	.word	0x3ff00000

0800c4fc <__d2b>:
 800c4fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4fe:	2101      	movs	r1, #1
 800c500:	0014      	movs	r4, r2
 800c502:	001d      	movs	r5, r3
 800c504:	9f08      	ldr	r7, [sp, #32]
 800c506:	f7ff fc0b 	bl	800bd20 <_Balloc>
 800c50a:	1e06      	subs	r6, r0, #0
 800c50c:	d105      	bne.n	800c51a <__d2b+0x1e>
 800c50e:	0032      	movs	r2, r6
 800c510:	4b24      	ldr	r3, [pc, #144]	; (800c5a4 <__d2b+0xa8>)
 800c512:	4825      	ldr	r0, [pc, #148]	; (800c5a8 <__d2b+0xac>)
 800c514:	4925      	ldr	r1, [pc, #148]	; (800c5ac <__d2b+0xb0>)
 800c516:	f001 f9d1 	bl	800d8bc <__assert_func>
 800c51a:	032b      	lsls	r3, r5, #12
 800c51c:	006d      	lsls	r5, r5, #1
 800c51e:	0b1b      	lsrs	r3, r3, #12
 800c520:	0d6d      	lsrs	r5, r5, #21
 800c522:	d125      	bne.n	800c570 <__d2b+0x74>
 800c524:	9301      	str	r3, [sp, #4]
 800c526:	2c00      	cmp	r4, #0
 800c528:	d028      	beq.n	800c57c <__d2b+0x80>
 800c52a:	4668      	mov	r0, sp
 800c52c:	9400      	str	r4, [sp, #0]
 800c52e:	f7ff fd09 	bl	800bf44 <__lo0bits>
 800c532:	9b01      	ldr	r3, [sp, #4]
 800c534:	9900      	ldr	r1, [sp, #0]
 800c536:	2800      	cmp	r0, #0
 800c538:	d01e      	beq.n	800c578 <__d2b+0x7c>
 800c53a:	2220      	movs	r2, #32
 800c53c:	001c      	movs	r4, r3
 800c53e:	1a12      	subs	r2, r2, r0
 800c540:	4094      	lsls	r4, r2
 800c542:	0022      	movs	r2, r4
 800c544:	40c3      	lsrs	r3, r0
 800c546:	430a      	orrs	r2, r1
 800c548:	6172      	str	r2, [r6, #20]
 800c54a:	9301      	str	r3, [sp, #4]
 800c54c:	9c01      	ldr	r4, [sp, #4]
 800c54e:	61b4      	str	r4, [r6, #24]
 800c550:	1e63      	subs	r3, r4, #1
 800c552:	419c      	sbcs	r4, r3
 800c554:	3401      	adds	r4, #1
 800c556:	6134      	str	r4, [r6, #16]
 800c558:	2d00      	cmp	r5, #0
 800c55a:	d017      	beq.n	800c58c <__d2b+0x90>
 800c55c:	2435      	movs	r4, #53	; 0x35
 800c55e:	4b14      	ldr	r3, [pc, #80]	; (800c5b0 <__d2b+0xb4>)
 800c560:	18ed      	adds	r5, r5, r3
 800c562:	182d      	adds	r5, r5, r0
 800c564:	603d      	str	r5, [r7, #0]
 800c566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c568:	1a24      	subs	r4, r4, r0
 800c56a:	601c      	str	r4, [r3, #0]
 800c56c:	0030      	movs	r0, r6
 800c56e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c570:	2280      	movs	r2, #128	; 0x80
 800c572:	0352      	lsls	r2, r2, #13
 800c574:	4313      	orrs	r3, r2
 800c576:	e7d5      	b.n	800c524 <__d2b+0x28>
 800c578:	6171      	str	r1, [r6, #20]
 800c57a:	e7e7      	b.n	800c54c <__d2b+0x50>
 800c57c:	a801      	add	r0, sp, #4
 800c57e:	f7ff fce1 	bl	800bf44 <__lo0bits>
 800c582:	9b01      	ldr	r3, [sp, #4]
 800c584:	2401      	movs	r4, #1
 800c586:	6173      	str	r3, [r6, #20]
 800c588:	3020      	adds	r0, #32
 800c58a:	e7e4      	b.n	800c556 <__d2b+0x5a>
 800c58c:	4b09      	ldr	r3, [pc, #36]	; (800c5b4 <__d2b+0xb8>)
 800c58e:	18c0      	adds	r0, r0, r3
 800c590:	4b09      	ldr	r3, [pc, #36]	; (800c5b8 <__d2b+0xbc>)
 800c592:	6038      	str	r0, [r7, #0]
 800c594:	18e3      	adds	r3, r4, r3
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	18f3      	adds	r3, r6, r3
 800c59a:	6958      	ldr	r0, [r3, #20]
 800c59c:	f7ff fcb8 	bl	800bf10 <__hi0bits>
 800c5a0:	0164      	lsls	r4, r4, #5
 800c5a2:	e7e0      	b.n	800c566 <__d2b+0x6a>
 800c5a4:	0800ed25 	.word	0x0800ed25
 800c5a8:	0800ed36 	.word	0x0800ed36
 800c5ac:	0000030f 	.word	0x0000030f
 800c5b0:	fffffbcd 	.word	0xfffffbcd
 800c5b4:	fffffbce 	.word	0xfffffbce
 800c5b8:	3fffffff 	.word	0x3fffffff

0800c5bc <__ratio>:
 800c5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5be:	b087      	sub	sp, #28
 800c5c0:	000f      	movs	r7, r1
 800c5c2:	a904      	add	r1, sp, #16
 800c5c4:	0006      	movs	r6, r0
 800c5c6:	f7ff ff4d 	bl	800c464 <__b2d>
 800c5ca:	9000      	str	r0, [sp, #0]
 800c5cc:	9101      	str	r1, [sp, #4]
 800c5ce:	9c00      	ldr	r4, [sp, #0]
 800c5d0:	9d01      	ldr	r5, [sp, #4]
 800c5d2:	0038      	movs	r0, r7
 800c5d4:	a905      	add	r1, sp, #20
 800c5d6:	f7ff ff45 	bl	800c464 <__b2d>
 800c5da:	9002      	str	r0, [sp, #8]
 800c5dc:	9103      	str	r1, [sp, #12]
 800c5de:	9a02      	ldr	r2, [sp, #8]
 800c5e0:	9b03      	ldr	r3, [sp, #12]
 800c5e2:	6930      	ldr	r0, [r6, #16]
 800c5e4:	6939      	ldr	r1, [r7, #16]
 800c5e6:	9e04      	ldr	r6, [sp, #16]
 800c5e8:	1a40      	subs	r0, r0, r1
 800c5ea:	9905      	ldr	r1, [sp, #20]
 800c5ec:	0140      	lsls	r0, r0, #5
 800c5ee:	1a71      	subs	r1, r6, r1
 800c5f0:	1841      	adds	r1, r0, r1
 800c5f2:	0508      	lsls	r0, r1, #20
 800c5f4:	2900      	cmp	r1, #0
 800c5f6:	dd07      	ble.n	800c608 <__ratio+0x4c>
 800c5f8:	9901      	ldr	r1, [sp, #4]
 800c5fa:	1845      	adds	r5, r0, r1
 800c5fc:	0020      	movs	r0, r4
 800c5fe:	0029      	movs	r1, r5
 800c600:	f7f4 ff3e 	bl	8001480 <__aeabi_ddiv>
 800c604:	b007      	add	sp, #28
 800c606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c608:	9903      	ldr	r1, [sp, #12]
 800c60a:	1a0b      	subs	r3, r1, r0
 800c60c:	e7f6      	b.n	800c5fc <__ratio+0x40>

0800c60e <__copybits>:
 800c60e:	b570      	push	{r4, r5, r6, lr}
 800c610:	0014      	movs	r4, r2
 800c612:	0005      	movs	r5, r0
 800c614:	3901      	subs	r1, #1
 800c616:	6913      	ldr	r3, [r2, #16]
 800c618:	1149      	asrs	r1, r1, #5
 800c61a:	3101      	adds	r1, #1
 800c61c:	0089      	lsls	r1, r1, #2
 800c61e:	3414      	adds	r4, #20
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	1841      	adds	r1, r0, r1
 800c624:	18e3      	adds	r3, r4, r3
 800c626:	42a3      	cmp	r3, r4
 800c628:	d80d      	bhi.n	800c646 <__copybits+0x38>
 800c62a:	0014      	movs	r4, r2
 800c62c:	3411      	adds	r4, #17
 800c62e:	2500      	movs	r5, #0
 800c630:	429c      	cmp	r4, r3
 800c632:	d803      	bhi.n	800c63c <__copybits+0x2e>
 800c634:	1a9b      	subs	r3, r3, r2
 800c636:	3b11      	subs	r3, #17
 800c638:	089b      	lsrs	r3, r3, #2
 800c63a:	009d      	lsls	r5, r3, #2
 800c63c:	2300      	movs	r3, #0
 800c63e:	1940      	adds	r0, r0, r5
 800c640:	4281      	cmp	r1, r0
 800c642:	d803      	bhi.n	800c64c <__copybits+0x3e>
 800c644:	bd70      	pop	{r4, r5, r6, pc}
 800c646:	cc40      	ldmia	r4!, {r6}
 800c648:	c540      	stmia	r5!, {r6}
 800c64a:	e7ec      	b.n	800c626 <__copybits+0x18>
 800c64c:	c008      	stmia	r0!, {r3}
 800c64e:	e7f7      	b.n	800c640 <__copybits+0x32>

0800c650 <__any_on>:
 800c650:	0002      	movs	r2, r0
 800c652:	6900      	ldr	r0, [r0, #16]
 800c654:	b510      	push	{r4, lr}
 800c656:	3214      	adds	r2, #20
 800c658:	114b      	asrs	r3, r1, #5
 800c65a:	4298      	cmp	r0, r3
 800c65c:	db13      	blt.n	800c686 <__any_on+0x36>
 800c65e:	dd0c      	ble.n	800c67a <__any_on+0x2a>
 800c660:	241f      	movs	r4, #31
 800c662:	0008      	movs	r0, r1
 800c664:	4020      	ands	r0, r4
 800c666:	4221      	tst	r1, r4
 800c668:	d007      	beq.n	800c67a <__any_on+0x2a>
 800c66a:	0099      	lsls	r1, r3, #2
 800c66c:	588c      	ldr	r4, [r1, r2]
 800c66e:	0021      	movs	r1, r4
 800c670:	40c1      	lsrs	r1, r0
 800c672:	4081      	lsls	r1, r0
 800c674:	2001      	movs	r0, #1
 800c676:	428c      	cmp	r4, r1
 800c678:	d104      	bne.n	800c684 <__any_on+0x34>
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	18d3      	adds	r3, r2, r3
 800c67e:	4293      	cmp	r3, r2
 800c680:	d803      	bhi.n	800c68a <__any_on+0x3a>
 800c682:	2000      	movs	r0, #0
 800c684:	bd10      	pop	{r4, pc}
 800c686:	0003      	movs	r3, r0
 800c688:	e7f7      	b.n	800c67a <__any_on+0x2a>
 800c68a:	3b04      	subs	r3, #4
 800c68c:	6819      	ldr	r1, [r3, #0]
 800c68e:	2900      	cmp	r1, #0
 800c690:	d0f5      	beq.n	800c67e <__any_on+0x2e>
 800c692:	2001      	movs	r0, #1
 800c694:	e7f6      	b.n	800c684 <__any_on+0x34>
	...

0800c698 <sulp>:
 800c698:	b570      	push	{r4, r5, r6, lr}
 800c69a:	0016      	movs	r6, r2
 800c69c:	000d      	movs	r5, r1
 800c69e:	f7ff fec5 	bl	800c42c <__ulp>
 800c6a2:	2e00      	cmp	r6, #0
 800c6a4:	d00d      	beq.n	800c6c2 <sulp+0x2a>
 800c6a6:	236b      	movs	r3, #107	; 0x6b
 800c6a8:	006a      	lsls	r2, r5, #1
 800c6aa:	0d52      	lsrs	r2, r2, #21
 800c6ac:	1a9b      	subs	r3, r3, r2
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	dd07      	ble.n	800c6c2 <sulp+0x2a>
 800c6b2:	2400      	movs	r4, #0
 800c6b4:	4a03      	ldr	r2, [pc, #12]	; (800c6c4 <sulp+0x2c>)
 800c6b6:	051b      	lsls	r3, r3, #20
 800c6b8:	189d      	adds	r5, r3, r2
 800c6ba:	002b      	movs	r3, r5
 800c6bc:	0022      	movs	r2, r4
 800c6be:	f7f5 fad9 	bl	8001c74 <__aeabi_dmul>
 800c6c2:	bd70      	pop	{r4, r5, r6, pc}
 800c6c4:	3ff00000 	.word	0x3ff00000

0800c6c8 <_strtod_l>:
 800c6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6ca:	b0a1      	sub	sp, #132	; 0x84
 800c6cc:	9219      	str	r2, [sp, #100]	; 0x64
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	2600      	movs	r6, #0
 800c6d2:	2700      	movs	r7, #0
 800c6d4:	9004      	str	r0, [sp, #16]
 800c6d6:	9107      	str	r1, [sp, #28]
 800c6d8:	921c      	str	r2, [sp, #112]	; 0x70
 800c6da:	911b      	str	r1, [sp, #108]	; 0x6c
 800c6dc:	780a      	ldrb	r2, [r1, #0]
 800c6de:	2a2b      	cmp	r2, #43	; 0x2b
 800c6e0:	d055      	beq.n	800c78e <_strtod_l+0xc6>
 800c6e2:	d841      	bhi.n	800c768 <_strtod_l+0xa0>
 800c6e4:	2a0d      	cmp	r2, #13
 800c6e6:	d83b      	bhi.n	800c760 <_strtod_l+0x98>
 800c6e8:	2a08      	cmp	r2, #8
 800c6ea:	d83b      	bhi.n	800c764 <_strtod_l+0x9c>
 800c6ec:	2a00      	cmp	r2, #0
 800c6ee:	d044      	beq.n	800c77a <_strtod_l+0xb2>
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	920f      	str	r2, [sp, #60]	; 0x3c
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c6f8:	9109      	str	r1, [sp, #36]	; 0x24
 800c6fa:	782a      	ldrb	r2, [r5, #0]
 800c6fc:	2a30      	cmp	r2, #48	; 0x30
 800c6fe:	d000      	beq.n	800c702 <_strtod_l+0x3a>
 800c700:	e085      	b.n	800c80e <_strtod_l+0x146>
 800c702:	786a      	ldrb	r2, [r5, #1]
 800c704:	3120      	adds	r1, #32
 800c706:	438a      	bics	r2, r1
 800c708:	2a58      	cmp	r2, #88	; 0x58
 800c70a:	d000      	beq.n	800c70e <_strtod_l+0x46>
 800c70c:	e075      	b.n	800c7fa <_strtod_l+0x132>
 800c70e:	9302      	str	r3, [sp, #8]
 800c710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c712:	4a97      	ldr	r2, [pc, #604]	; (800c970 <_strtod_l+0x2a8>)
 800c714:	9301      	str	r3, [sp, #4]
 800c716:	ab1c      	add	r3, sp, #112	; 0x70
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	9804      	ldr	r0, [sp, #16]
 800c71c:	ab1d      	add	r3, sp, #116	; 0x74
 800c71e:	a91b      	add	r1, sp, #108	; 0x6c
 800c720:	f001 f982 	bl	800da28 <__gethex>
 800c724:	230f      	movs	r3, #15
 800c726:	0002      	movs	r2, r0
 800c728:	401a      	ands	r2, r3
 800c72a:	0004      	movs	r4, r0
 800c72c:	9205      	str	r2, [sp, #20]
 800c72e:	4218      	tst	r0, r3
 800c730:	d005      	beq.n	800c73e <_strtod_l+0x76>
 800c732:	2a06      	cmp	r2, #6
 800c734:	d12d      	bne.n	800c792 <_strtod_l+0xca>
 800c736:	1c6b      	adds	r3, r5, #1
 800c738:	931b      	str	r3, [sp, #108]	; 0x6c
 800c73a:	2300      	movs	r3, #0
 800c73c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c73e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <_strtod_l+0x82>
 800c744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c746:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c748:	6013      	str	r3, [r2, #0]
 800c74a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d01b      	beq.n	800c788 <_strtod_l+0xc0>
 800c750:	2380      	movs	r3, #128	; 0x80
 800c752:	0032      	movs	r2, r6
 800c754:	061b      	lsls	r3, r3, #24
 800c756:	18fb      	adds	r3, r7, r3
 800c758:	0010      	movs	r0, r2
 800c75a:	0019      	movs	r1, r3
 800c75c:	b021      	add	sp, #132	; 0x84
 800c75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c760:	2a20      	cmp	r2, #32
 800c762:	d1c5      	bne.n	800c6f0 <_strtod_l+0x28>
 800c764:	3101      	adds	r1, #1
 800c766:	e7b8      	b.n	800c6da <_strtod_l+0x12>
 800c768:	2a2d      	cmp	r2, #45	; 0x2d
 800c76a:	d1c1      	bne.n	800c6f0 <_strtod_l+0x28>
 800c76c:	3a2c      	subs	r2, #44	; 0x2c
 800c76e:	920f      	str	r2, [sp, #60]	; 0x3c
 800c770:	1c4a      	adds	r2, r1, #1
 800c772:	921b      	str	r2, [sp, #108]	; 0x6c
 800c774:	784a      	ldrb	r2, [r1, #1]
 800c776:	2a00      	cmp	r2, #0
 800c778:	d1bc      	bne.n	800c6f4 <_strtod_l+0x2c>
 800c77a:	9b07      	ldr	r3, [sp, #28]
 800c77c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c77e:	2300      	movs	r3, #0
 800c780:	930f      	str	r3, [sp, #60]	; 0x3c
 800c782:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c784:	2b00      	cmp	r3, #0
 800c786:	d1dd      	bne.n	800c744 <_strtod_l+0x7c>
 800c788:	0032      	movs	r2, r6
 800c78a:	003b      	movs	r3, r7
 800c78c:	e7e4      	b.n	800c758 <_strtod_l+0x90>
 800c78e:	2200      	movs	r2, #0
 800c790:	e7ed      	b.n	800c76e <_strtod_l+0xa6>
 800c792:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c794:	2a00      	cmp	r2, #0
 800c796:	d007      	beq.n	800c7a8 <_strtod_l+0xe0>
 800c798:	2135      	movs	r1, #53	; 0x35
 800c79a:	a81e      	add	r0, sp, #120	; 0x78
 800c79c:	f7ff ff37 	bl	800c60e <__copybits>
 800c7a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c7a2:	9804      	ldr	r0, [sp, #16]
 800c7a4:	f7ff fb00 	bl	800bda8 <_Bfree>
 800c7a8:	9805      	ldr	r0, [sp, #20]
 800c7aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c7ac:	3801      	subs	r0, #1
 800c7ae:	2804      	cmp	r0, #4
 800c7b0:	d806      	bhi.n	800c7c0 <_strtod_l+0xf8>
 800c7b2:	f7f3 fcb1 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c7b6:	0312      	.short	0x0312
 800c7b8:	1e1c      	.short	0x1e1c
 800c7ba:	12          	.byte	0x12
 800c7bb:	00          	.byte	0x00
 800c7bc:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c7be:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c7c0:	05e4      	lsls	r4, r4, #23
 800c7c2:	d502      	bpl.n	800c7ca <_strtod_l+0x102>
 800c7c4:	2380      	movs	r3, #128	; 0x80
 800c7c6:	061b      	lsls	r3, r3, #24
 800c7c8:	431f      	orrs	r7, r3
 800c7ca:	4b6a      	ldr	r3, [pc, #424]	; (800c974 <_strtod_l+0x2ac>)
 800c7cc:	423b      	tst	r3, r7
 800c7ce:	d1b6      	bne.n	800c73e <_strtod_l+0x76>
 800c7d0:	f7fe fac4 	bl	800ad5c <__errno>
 800c7d4:	2322      	movs	r3, #34	; 0x22
 800c7d6:	6003      	str	r3, [r0, #0]
 800c7d8:	e7b1      	b.n	800c73e <_strtod_l+0x76>
 800c7da:	4967      	ldr	r1, [pc, #412]	; (800c978 <_strtod_l+0x2b0>)
 800c7dc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c7de:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c7e0:	400a      	ands	r2, r1
 800c7e2:	4966      	ldr	r1, [pc, #408]	; (800c97c <_strtod_l+0x2b4>)
 800c7e4:	185b      	adds	r3, r3, r1
 800c7e6:	051b      	lsls	r3, r3, #20
 800c7e8:	431a      	orrs	r2, r3
 800c7ea:	0017      	movs	r7, r2
 800c7ec:	e7e8      	b.n	800c7c0 <_strtod_l+0xf8>
 800c7ee:	4f61      	ldr	r7, [pc, #388]	; (800c974 <_strtod_l+0x2ac>)
 800c7f0:	e7e6      	b.n	800c7c0 <_strtod_l+0xf8>
 800c7f2:	2601      	movs	r6, #1
 800c7f4:	4f62      	ldr	r7, [pc, #392]	; (800c980 <_strtod_l+0x2b8>)
 800c7f6:	4276      	negs	r6, r6
 800c7f8:	e7e2      	b.n	800c7c0 <_strtod_l+0xf8>
 800c7fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7fc:	1c5a      	adds	r2, r3, #1
 800c7fe:	921b      	str	r2, [sp, #108]	; 0x6c
 800c800:	785b      	ldrb	r3, [r3, #1]
 800c802:	2b30      	cmp	r3, #48	; 0x30
 800c804:	d0f9      	beq.n	800c7fa <_strtod_l+0x132>
 800c806:	2b00      	cmp	r3, #0
 800c808:	d099      	beq.n	800c73e <_strtod_l+0x76>
 800c80a:	2301      	movs	r3, #1
 800c80c:	9309      	str	r3, [sp, #36]	; 0x24
 800c80e:	2500      	movs	r5, #0
 800c810:	220a      	movs	r2, #10
 800c812:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c814:	950d      	str	r5, [sp, #52]	; 0x34
 800c816:	9310      	str	r3, [sp, #64]	; 0x40
 800c818:	9508      	str	r5, [sp, #32]
 800c81a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c81c:	7804      	ldrb	r4, [r0, #0]
 800c81e:	0023      	movs	r3, r4
 800c820:	3b30      	subs	r3, #48	; 0x30
 800c822:	b2d9      	uxtb	r1, r3
 800c824:	2909      	cmp	r1, #9
 800c826:	d927      	bls.n	800c878 <_strtod_l+0x1b0>
 800c828:	2201      	movs	r2, #1
 800c82a:	4956      	ldr	r1, [pc, #344]	; (800c984 <_strtod_l+0x2bc>)
 800c82c:	f001 f812 	bl	800d854 <strncmp>
 800c830:	2800      	cmp	r0, #0
 800c832:	d031      	beq.n	800c898 <_strtod_l+0x1d0>
 800c834:	2000      	movs	r0, #0
 800c836:	0023      	movs	r3, r4
 800c838:	4684      	mov	ip, r0
 800c83a:	9a08      	ldr	r2, [sp, #32]
 800c83c:	900c      	str	r0, [sp, #48]	; 0x30
 800c83e:	9205      	str	r2, [sp, #20]
 800c840:	2220      	movs	r2, #32
 800c842:	0019      	movs	r1, r3
 800c844:	4391      	bics	r1, r2
 800c846:	000a      	movs	r2, r1
 800c848:	2100      	movs	r1, #0
 800c84a:	9106      	str	r1, [sp, #24]
 800c84c:	2a45      	cmp	r2, #69	; 0x45
 800c84e:	d000      	beq.n	800c852 <_strtod_l+0x18a>
 800c850:	e0c2      	b.n	800c9d8 <_strtod_l+0x310>
 800c852:	9b05      	ldr	r3, [sp, #20]
 800c854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c856:	4303      	orrs	r3, r0
 800c858:	4313      	orrs	r3, r2
 800c85a:	428b      	cmp	r3, r1
 800c85c:	d08d      	beq.n	800c77a <_strtod_l+0xb2>
 800c85e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c860:	9307      	str	r3, [sp, #28]
 800c862:	3301      	adds	r3, #1
 800c864:	931b      	str	r3, [sp, #108]	; 0x6c
 800c866:	9b07      	ldr	r3, [sp, #28]
 800c868:	785b      	ldrb	r3, [r3, #1]
 800c86a:	2b2b      	cmp	r3, #43	; 0x2b
 800c86c:	d071      	beq.n	800c952 <_strtod_l+0x28a>
 800c86e:	000c      	movs	r4, r1
 800c870:	2b2d      	cmp	r3, #45	; 0x2d
 800c872:	d174      	bne.n	800c95e <_strtod_l+0x296>
 800c874:	2401      	movs	r4, #1
 800c876:	e06d      	b.n	800c954 <_strtod_l+0x28c>
 800c878:	9908      	ldr	r1, [sp, #32]
 800c87a:	2908      	cmp	r1, #8
 800c87c:	dc09      	bgt.n	800c892 <_strtod_l+0x1ca>
 800c87e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c880:	4351      	muls	r1, r2
 800c882:	185b      	adds	r3, r3, r1
 800c884:	930d      	str	r3, [sp, #52]	; 0x34
 800c886:	9b08      	ldr	r3, [sp, #32]
 800c888:	3001      	adds	r0, #1
 800c88a:	3301      	adds	r3, #1
 800c88c:	9308      	str	r3, [sp, #32]
 800c88e:	901b      	str	r0, [sp, #108]	; 0x6c
 800c890:	e7c3      	b.n	800c81a <_strtod_l+0x152>
 800c892:	4355      	muls	r5, r2
 800c894:	195d      	adds	r5, r3, r5
 800c896:	e7f6      	b.n	800c886 <_strtod_l+0x1be>
 800c898:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	921b      	str	r2, [sp, #108]	; 0x6c
 800c89e:	9a08      	ldr	r2, [sp, #32]
 800c8a0:	785b      	ldrb	r3, [r3, #1]
 800c8a2:	2a00      	cmp	r2, #0
 800c8a4:	d03a      	beq.n	800c91c <_strtod_l+0x254>
 800c8a6:	900c      	str	r0, [sp, #48]	; 0x30
 800c8a8:	9205      	str	r2, [sp, #20]
 800c8aa:	001a      	movs	r2, r3
 800c8ac:	3a30      	subs	r2, #48	; 0x30
 800c8ae:	2a09      	cmp	r2, #9
 800c8b0:	d912      	bls.n	800c8d8 <_strtod_l+0x210>
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	4694      	mov	ip, r2
 800c8b6:	e7c3      	b.n	800c840 <_strtod_l+0x178>
 800c8b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	1c5a      	adds	r2, r3, #1
 800c8be:	921b      	str	r2, [sp, #108]	; 0x6c
 800c8c0:	785b      	ldrb	r3, [r3, #1]
 800c8c2:	2b30      	cmp	r3, #48	; 0x30
 800c8c4:	d0f8      	beq.n	800c8b8 <_strtod_l+0x1f0>
 800c8c6:	001a      	movs	r2, r3
 800c8c8:	3a31      	subs	r2, #49	; 0x31
 800c8ca:	2a08      	cmp	r2, #8
 800c8cc:	d83c      	bhi.n	800c948 <_strtod_l+0x280>
 800c8ce:	900c      	str	r0, [sp, #48]	; 0x30
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c8d4:	9005      	str	r0, [sp, #20]
 800c8d6:	9210      	str	r2, [sp, #64]	; 0x40
 800c8d8:	001a      	movs	r2, r3
 800c8da:	1c41      	adds	r1, r0, #1
 800c8dc:	3a30      	subs	r2, #48	; 0x30
 800c8de:	2b30      	cmp	r3, #48	; 0x30
 800c8e0:	d016      	beq.n	800c910 <_strtod_l+0x248>
 800c8e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8e4:	185b      	adds	r3, r3, r1
 800c8e6:	930c      	str	r3, [sp, #48]	; 0x30
 800c8e8:	9b05      	ldr	r3, [sp, #20]
 800c8ea:	210a      	movs	r1, #10
 800c8ec:	469c      	mov	ip, r3
 800c8ee:	4484      	add	ip, r0
 800c8f0:	4563      	cmp	r3, ip
 800c8f2:	d115      	bne.n	800c920 <_strtod_l+0x258>
 800c8f4:	9905      	ldr	r1, [sp, #20]
 800c8f6:	9b05      	ldr	r3, [sp, #20]
 800c8f8:	3101      	adds	r1, #1
 800c8fa:	1809      	adds	r1, r1, r0
 800c8fc:	181b      	adds	r3, r3, r0
 800c8fe:	9105      	str	r1, [sp, #20]
 800c900:	2b08      	cmp	r3, #8
 800c902:	dc19      	bgt.n	800c938 <_strtod_l+0x270>
 800c904:	230a      	movs	r3, #10
 800c906:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c908:	434b      	muls	r3, r1
 800c90a:	2100      	movs	r1, #0
 800c90c:	18d3      	adds	r3, r2, r3
 800c90e:	930d      	str	r3, [sp, #52]	; 0x34
 800c910:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c912:	0008      	movs	r0, r1
 800c914:	1c5a      	adds	r2, r3, #1
 800c916:	921b      	str	r2, [sp, #108]	; 0x6c
 800c918:	785b      	ldrb	r3, [r3, #1]
 800c91a:	e7c6      	b.n	800c8aa <_strtod_l+0x1e2>
 800c91c:	9808      	ldr	r0, [sp, #32]
 800c91e:	e7d0      	b.n	800c8c2 <_strtod_l+0x1fa>
 800c920:	1c5c      	adds	r4, r3, #1
 800c922:	2b08      	cmp	r3, #8
 800c924:	dc04      	bgt.n	800c930 <_strtod_l+0x268>
 800c926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c928:	434b      	muls	r3, r1
 800c92a:	930d      	str	r3, [sp, #52]	; 0x34
 800c92c:	0023      	movs	r3, r4
 800c92e:	e7df      	b.n	800c8f0 <_strtod_l+0x228>
 800c930:	2c10      	cmp	r4, #16
 800c932:	dcfb      	bgt.n	800c92c <_strtod_l+0x264>
 800c934:	434d      	muls	r5, r1
 800c936:	e7f9      	b.n	800c92c <_strtod_l+0x264>
 800c938:	9b05      	ldr	r3, [sp, #20]
 800c93a:	2100      	movs	r1, #0
 800c93c:	2b10      	cmp	r3, #16
 800c93e:	dce7      	bgt.n	800c910 <_strtod_l+0x248>
 800c940:	230a      	movs	r3, #10
 800c942:	435d      	muls	r5, r3
 800c944:	1955      	adds	r5, r2, r5
 800c946:	e7e3      	b.n	800c910 <_strtod_l+0x248>
 800c948:	2200      	movs	r2, #0
 800c94a:	920c      	str	r2, [sp, #48]	; 0x30
 800c94c:	9205      	str	r2, [sp, #20]
 800c94e:	3201      	adds	r2, #1
 800c950:	e7b0      	b.n	800c8b4 <_strtod_l+0x1ec>
 800c952:	2400      	movs	r4, #0
 800c954:	9b07      	ldr	r3, [sp, #28]
 800c956:	3302      	adds	r3, #2
 800c958:	931b      	str	r3, [sp, #108]	; 0x6c
 800c95a:	9b07      	ldr	r3, [sp, #28]
 800c95c:	789b      	ldrb	r3, [r3, #2]
 800c95e:	001a      	movs	r2, r3
 800c960:	3a30      	subs	r2, #48	; 0x30
 800c962:	2a09      	cmp	r2, #9
 800c964:	d914      	bls.n	800c990 <_strtod_l+0x2c8>
 800c966:	9a07      	ldr	r2, [sp, #28]
 800c968:	921b      	str	r2, [sp, #108]	; 0x6c
 800c96a:	2200      	movs	r2, #0
 800c96c:	e033      	b.n	800c9d6 <_strtod_l+0x30e>
 800c96e:	46c0      	nop			; (mov r8, r8)
 800c970:	0800ee90 	.word	0x0800ee90
 800c974:	7ff00000 	.word	0x7ff00000
 800c978:	ffefffff 	.word	0xffefffff
 800c97c:	00000433 	.word	0x00000433
 800c980:	7fffffff 	.word	0x7fffffff
 800c984:	0800ee8c 	.word	0x0800ee8c
 800c988:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c98a:	1c5a      	adds	r2, r3, #1
 800c98c:	921b      	str	r2, [sp, #108]	; 0x6c
 800c98e:	785b      	ldrb	r3, [r3, #1]
 800c990:	2b30      	cmp	r3, #48	; 0x30
 800c992:	d0f9      	beq.n	800c988 <_strtod_l+0x2c0>
 800c994:	2200      	movs	r2, #0
 800c996:	9206      	str	r2, [sp, #24]
 800c998:	001a      	movs	r2, r3
 800c99a:	3a31      	subs	r2, #49	; 0x31
 800c99c:	2a08      	cmp	r2, #8
 800c99e:	d81b      	bhi.n	800c9d8 <_strtod_l+0x310>
 800c9a0:	3b30      	subs	r3, #48	; 0x30
 800c9a2:	930e      	str	r3, [sp, #56]	; 0x38
 800c9a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9a6:	9306      	str	r3, [sp, #24]
 800c9a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9aa:	1c59      	adds	r1, r3, #1
 800c9ac:	911b      	str	r1, [sp, #108]	; 0x6c
 800c9ae:	785b      	ldrb	r3, [r3, #1]
 800c9b0:	001a      	movs	r2, r3
 800c9b2:	3a30      	subs	r2, #48	; 0x30
 800c9b4:	2a09      	cmp	r2, #9
 800c9b6:	d93a      	bls.n	800ca2e <_strtod_l+0x366>
 800c9b8:	9a06      	ldr	r2, [sp, #24]
 800c9ba:	1a8a      	subs	r2, r1, r2
 800c9bc:	49b2      	ldr	r1, [pc, #712]	; (800cc88 <_strtod_l+0x5c0>)
 800c9be:	9106      	str	r1, [sp, #24]
 800c9c0:	2a08      	cmp	r2, #8
 800c9c2:	dc04      	bgt.n	800c9ce <_strtod_l+0x306>
 800c9c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9c6:	9206      	str	r2, [sp, #24]
 800c9c8:	428a      	cmp	r2, r1
 800c9ca:	dd00      	ble.n	800c9ce <_strtod_l+0x306>
 800c9cc:	9106      	str	r1, [sp, #24]
 800c9ce:	2c00      	cmp	r4, #0
 800c9d0:	d002      	beq.n	800c9d8 <_strtod_l+0x310>
 800c9d2:	9a06      	ldr	r2, [sp, #24]
 800c9d4:	4252      	negs	r2, r2
 800c9d6:	9206      	str	r2, [sp, #24]
 800c9d8:	9a05      	ldr	r2, [sp, #20]
 800c9da:	2a00      	cmp	r2, #0
 800c9dc:	d14d      	bne.n	800ca7a <_strtod_l+0x3b2>
 800c9de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9e0:	4310      	orrs	r0, r2
 800c9e2:	d000      	beq.n	800c9e6 <_strtod_l+0x31e>
 800c9e4:	e6ab      	b.n	800c73e <_strtod_l+0x76>
 800c9e6:	4662      	mov	r2, ip
 800c9e8:	2a00      	cmp	r2, #0
 800c9ea:	d000      	beq.n	800c9ee <_strtod_l+0x326>
 800c9ec:	e6c5      	b.n	800c77a <_strtod_l+0xb2>
 800c9ee:	2b69      	cmp	r3, #105	; 0x69
 800c9f0:	d027      	beq.n	800ca42 <_strtod_l+0x37a>
 800c9f2:	dc23      	bgt.n	800ca3c <_strtod_l+0x374>
 800c9f4:	2b49      	cmp	r3, #73	; 0x49
 800c9f6:	d024      	beq.n	800ca42 <_strtod_l+0x37a>
 800c9f8:	2b4e      	cmp	r3, #78	; 0x4e
 800c9fa:	d000      	beq.n	800c9fe <_strtod_l+0x336>
 800c9fc:	e6bd      	b.n	800c77a <_strtod_l+0xb2>
 800c9fe:	49a3      	ldr	r1, [pc, #652]	; (800cc8c <_strtod_l+0x5c4>)
 800ca00:	a81b      	add	r0, sp, #108	; 0x6c
 800ca02:	f001 fa47 	bl	800de94 <__match>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d100      	bne.n	800ca0c <_strtod_l+0x344>
 800ca0a:	e6b6      	b.n	800c77a <_strtod_l+0xb2>
 800ca0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b28      	cmp	r3, #40	; 0x28
 800ca12:	d12c      	bne.n	800ca6e <_strtod_l+0x3a6>
 800ca14:	499e      	ldr	r1, [pc, #632]	; (800cc90 <_strtod_l+0x5c8>)
 800ca16:	aa1e      	add	r2, sp, #120	; 0x78
 800ca18:	a81b      	add	r0, sp, #108	; 0x6c
 800ca1a:	f001 fa4f 	bl	800debc <__hexnan>
 800ca1e:	2805      	cmp	r0, #5
 800ca20:	d125      	bne.n	800ca6e <_strtod_l+0x3a6>
 800ca22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ca24:	4a9b      	ldr	r2, [pc, #620]	; (800cc94 <_strtod_l+0x5cc>)
 800ca26:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	0017      	movs	r7, r2
 800ca2c:	e687      	b.n	800c73e <_strtod_l+0x76>
 800ca2e:	220a      	movs	r2, #10
 800ca30:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ca32:	434a      	muls	r2, r1
 800ca34:	18d2      	adds	r2, r2, r3
 800ca36:	3a30      	subs	r2, #48	; 0x30
 800ca38:	920e      	str	r2, [sp, #56]	; 0x38
 800ca3a:	e7b5      	b.n	800c9a8 <_strtod_l+0x2e0>
 800ca3c:	2b6e      	cmp	r3, #110	; 0x6e
 800ca3e:	d0de      	beq.n	800c9fe <_strtod_l+0x336>
 800ca40:	e69b      	b.n	800c77a <_strtod_l+0xb2>
 800ca42:	4995      	ldr	r1, [pc, #596]	; (800cc98 <_strtod_l+0x5d0>)
 800ca44:	a81b      	add	r0, sp, #108	; 0x6c
 800ca46:	f001 fa25 	bl	800de94 <__match>
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	d100      	bne.n	800ca50 <_strtod_l+0x388>
 800ca4e:	e694      	b.n	800c77a <_strtod_l+0xb2>
 800ca50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca52:	4992      	ldr	r1, [pc, #584]	; (800cc9c <_strtod_l+0x5d4>)
 800ca54:	3b01      	subs	r3, #1
 800ca56:	a81b      	add	r0, sp, #108	; 0x6c
 800ca58:	931b      	str	r3, [sp, #108]	; 0x6c
 800ca5a:	f001 fa1b 	bl	800de94 <__match>
 800ca5e:	2800      	cmp	r0, #0
 800ca60:	d102      	bne.n	800ca68 <_strtod_l+0x3a0>
 800ca62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca64:	3301      	adds	r3, #1
 800ca66:	931b      	str	r3, [sp, #108]	; 0x6c
 800ca68:	2600      	movs	r6, #0
 800ca6a:	4f8a      	ldr	r7, [pc, #552]	; (800cc94 <_strtod_l+0x5cc>)
 800ca6c:	e667      	b.n	800c73e <_strtod_l+0x76>
 800ca6e:	488c      	ldr	r0, [pc, #560]	; (800cca0 <_strtod_l+0x5d8>)
 800ca70:	f000 ff1e 	bl	800d8b0 <nan>
 800ca74:	0006      	movs	r6, r0
 800ca76:	000f      	movs	r7, r1
 800ca78:	e661      	b.n	800c73e <_strtod_l+0x76>
 800ca7a:	9b06      	ldr	r3, [sp, #24]
 800ca7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca7e:	1a9b      	subs	r3, r3, r2
 800ca80:	9309      	str	r3, [sp, #36]	; 0x24
 800ca82:	9b08      	ldr	r3, [sp, #32]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <_strtod_l+0x3c4>
 800ca88:	9b05      	ldr	r3, [sp, #20]
 800ca8a:	9308      	str	r3, [sp, #32]
 800ca8c:	9c05      	ldr	r4, [sp, #20]
 800ca8e:	2c10      	cmp	r4, #16
 800ca90:	dd00      	ble.n	800ca94 <_strtod_l+0x3cc>
 800ca92:	2410      	movs	r4, #16
 800ca94:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ca96:	f7f5 ffb5 	bl	8002a04 <__aeabi_ui2d>
 800ca9a:	9b05      	ldr	r3, [sp, #20]
 800ca9c:	0006      	movs	r6, r0
 800ca9e:	000f      	movs	r7, r1
 800caa0:	2b09      	cmp	r3, #9
 800caa2:	dd15      	ble.n	800cad0 <_strtod_l+0x408>
 800caa4:	0022      	movs	r2, r4
 800caa6:	4b7f      	ldr	r3, [pc, #508]	; (800cca4 <_strtod_l+0x5dc>)
 800caa8:	3a09      	subs	r2, #9
 800caaa:	00d2      	lsls	r2, r2, #3
 800caac:	189b      	adds	r3, r3, r2
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	f7f5 f8df 	bl	8001c74 <__aeabi_dmul>
 800cab6:	0006      	movs	r6, r0
 800cab8:	0028      	movs	r0, r5
 800caba:	000f      	movs	r7, r1
 800cabc:	f7f5 ffa2 	bl	8002a04 <__aeabi_ui2d>
 800cac0:	0002      	movs	r2, r0
 800cac2:	000b      	movs	r3, r1
 800cac4:	0030      	movs	r0, r6
 800cac6:	0039      	movs	r1, r7
 800cac8:	f7f4 f97a 	bl	8000dc0 <__aeabi_dadd>
 800cacc:	0006      	movs	r6, r0
 800cace:	000f      	movs	r7, r1
 800cad0:	9b05      	ldr	r3, [sp, #20]
 800cad2:	2b0f      	cmp	r3, #15
 800cad4:	dc39      	bgt.n	800cb4a <_strtod_l+0x482>
 800cad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d100      	bne.n	800cade <_strtod_l+0x416>
 800cadc:	e62f      	b.n	800c73e <_strtod_l+0x76>
 800cade:	dd24      	ble.n	800cb2a <_strtod_l+0x462>
 800cae0:	2b16      	cmp	r3, #22
 800cae2:	dc09      	bgt.n	800caf8 <_strtod_l+0x430>
 800cae4:	496f      	ldr	r1, [pc, #444]	; (800cca4 <_strtod_l+0x5dc>)
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	18c9      	adds	r1, r1, r3
 800caea:	0032      	movs	r2, r6
 800caec:	6808      	ldr	r0, [r1, #0]
 800caee:	6849      	ldr	r1, [r1, #4]
 800caf0:	003b      	movs	r3, r7
 800caf2:	f7f5 f8bf 	bl	8001c74 <__aeabi_dmul>
 800caf6:	e7bd      	b.n	800ca74 <_strtod_l+0x3ac>
 800caf8:	2325      	movs	r3, #37	; 0x25
 800cafa:	9a05      	ldr	r2, [sp, #20]
 800cafc:	1a9b      	subs	r3, r3, r2
 800cafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb00:	4293      	cmp	r3, r2
 800cb02:	db22      	blt.n	800cb4a <_strtod_l+0x482>
 800cb04:	240f      	movs	r4, #15
 800cb06:	9b05      	ldr	r3, [sp, #20]
 800cb08:	4d66      	ldr	r5, [pc, #408]	; (800cca4 <_strtod_l+0x5dc>)
 800cb0a:	1ae4      	subs	r4, r4, r3
 800cb0c:	00e1      	lsls	r1, r4, #3
 800cb0e:	1869      	adds	r1, r5, r1
 800cb10:	0032      	movs	r2, r6
 800cb12:	6808      	ldr	r0, [r1, #0]
 800cb14:	6849      	ldr	r1, [r1, #4]
 800cb16:	003b      	movs	r3, r7
 800cb18:	f7f5 f8ac 	bl	8001c74 <__aeabi_dmul>
 800cb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb1e:	1b1c      	subs	r4, r3, r4
 800cb20:	00e4      	lsls	r4, r4, #3
 800cb22:	192d      	adds	r5, r5, r4
 800cb24:	682a      	ldr	r2, [r5, #0]
 800cb26:	686b      	ldr	r3, [r5, #4]
 800cb28:	e7e3      	b.n	800caf2 <_strtod_l+0x42a>
 800cb2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2c:	3316      	adds	r3, #22
 800cb2e:	db0c      	blt.n	800cb4a <_strtod_l+0x482>
 800cb30:	9906      	ldr	r1, [sp, #24]
 800cb32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb34:	4b5b      	ldr	r3, [pc, #364]	; (800cca4 <_strtod_l+0x5dc>)
 800cb36:	1a52      	subs	r2, r2, r1
 800cb38:	00d2      	lsls	r2, r2, #3
 800cb3a:	189b      	adds	r3, r3, r2
 800cb3c:	0030      	movs	r0, r6
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	0039      	movs	r1, r7
 800cb44:	f7f4 fc9c 	bl	8001480 <__aeabi_ddiv>
 800cb48:	e794      	b.n	800ca74 <_strtod_l+0x3ac>
 800cb4a:	9b05      	ldr	r3, [sp, #20]
 800cb4c:	1b1c      	subs	r4, r3, r4
 800cb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb50:	18e4      	adds	r4, r4, r3
 800cb52:	2c00      	cmp	r4, #0
 800cb54:	dd72      	ble.n	800cc3c <_strtod_l+0x574>
 800cb56:	220f      	movs	r2, #15
 800cb58:	0023      	movs	r3, r4
 800cb5a:	4013      	ands	r3, r2
 800cb5c:	4214      	tst	r4, r2
 800cb5e:	d00a      	beq.n	800cb76 <_strtod_l+0x4ae>
 800cb60:	4950      	ldr	r1, [pc, #320]	; (800cca4 <_strtod_l+0x5dc>)
 800cb62:	00db      	lsls	r3, r3, #3
 800cb64:	18c9      	adds	r1, r1, r3
 800cb66:	0032      	movs	r2, r6
 800cb68:	6808      	ldr	r0, [r1, #0]
 800cb6a:	6849      	ldr	r1, [r1, #4]
 800cb6c:	003b      	movs	r3, r7
 800cb6e:	f7f5 f881 	bl	8001c74 <__aeabi_dmul>
 800cb72:	0006      	movs	r6, r0
 800cb74:	000f      	movs	r7, r1
 800cb76:	230f      	movs	r3, #15
 800cb78:	439c      	bics	r4, r3
 800cb7a:	d04a      	beq.n	800cc12 <_strtod_l+0x54a>
 800cb7c:	3326      	adds	r3, #38	; 0x26
 800cb7e:	33ff      	adds	r3, #255	; 0xff
 800cb80:	429c      	cmp	r4, r3
 800cb82:	dd22      	ble.n	800cbca <_strtod_l+0x502>
 800cb84:	2300      	movs	r3, #0
 800cb86:	9305      	str	r3, [sp, #20]
 800cb88:	9306      	str	r3, [sp, #24]
 800cb8a:	930d      	str	r3, [sp, #52]	; 0x34
 800cb8c:	9308      	str	r3, [sp, #32]
 800cb8e:	2322      	movs	r3, #34	; 0x22
 800cb90:	2600      	movs	r6, #0
 800cb92:	9a04      	ldr	r2, [sp, #16]
 800cb94:	4f3f      	ldr	r7, [pc, #252]	; (800cc94 <_strtod_l+0x5cc>)
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb9a:	42b3      	cmp	r3, r6
 800cb9c:	d100      	bne.n	800cba0 <_strtod_l+0x4d8>
 800cb9e:	e5ce      	b.n	800c73e <_strtod_l+0x76>
 800cba0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cba2:	9804      	ldr	r0, [sp, #16]
 800cba4:	f7ff f900 	bl	800bda8 <_Bfree>
 800cba8:	9908      	ldr	r1, [sp, #32]
 800cbaa:	9804      	ldr	r0, [sp, #16]
 800cbac:	f7ff f8fc 	bl	800bda8 <_Bfree>
 800cbb0:	9906      	ldr	r1, [sp, #24]
 800cbb2:	9804      	ldr	r0, [sp, #16]
 800cbb4:	f7ff f8f8 	bl	800bda8 <_Bfree>
 800cbb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cbba:	9804      	ldr	r0, [sp, #16]
 800cbbc:	f7ff f8f4 	bl	800bda8 <_Bfree>
 800cbc0:	9905      	ldr	r1, [sp, #20]
 800cbc2:	9804      	ldr	r0, [sp, #16]
 800cbc4:	f7ff f8f0 	bl	800bda8 <_Bfree>
 800cbc8:	e5b9      	b.n	800c73e <_strtod_l+0x76>
 800cbca:	2300      	movs	r3, #0
 800cbcc:	0030      	movs	r0, r6
 800cbce:	0039      	movs	r1, r7
 800cbd0:	4d35      	ldr	r5, [pc, #212]	; (800cca8 <_strtod_l+0x5e0>)
 800cbd2:	1124      	asrs	r4, r4, #4
 800cbd4:	9307      	str	r3, [sp, #28]
 800cbd6:	2c01      	cmp	r4, #1
 800cbd8:	dc1e      	bgt.n	800cc18 <_strtod_l+0x550>
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <_strtod_l+0x51a>
 800cbde:	0006      	movs	r6, r0
 800cbe0:	000f      	movs	r7, r1
 800cbe2:	4b32      	ldr	r3, [pc, #200]	; (800ccac <_strtod_l+0x5e4>)
 800cbe4:	9a07      	ldr	r2, [sp, #28]
 800cbe6:	18ff      	adds	r7, r7, r3
 800cbe8:	4b2f      	ldr	r3, [pc, #188]	; (800cca8 <_strtod_l+0x5e0>)
 800cbea:	00d2      	lsls	r2, r2, #3
 800cbec:	189d      	adds	r5, r3, r2
 800cbee:	6828      	ldr	r0, [r5, #0]
 800cbf0:	6869      	ldr	r1, [r5, #4]
 800cbf2:	0032      	movs	r2, r6
 800cbf4:	003b      	movs	r3, r7
 800cbf6:	f7f5 f83d 	bl	8001c74 <__aeabi_dmul>
 800cbfa:	4b26      	ldr	r3, [pc, #152]	; (800cc94 <_strtod_l+0x5cc>)
 800cbfc:	4a2c      	ldr	r2, [pc, #176]	; (800ccb0 <_strtod_l+0x5e8>)
 800cbfe:	0006      	movs	r6, r0
 800cc00:	400b      	ands	r3, r1
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d8be      	bhi.n	800cb84 <_strtod_l+0x4bc>
 800cc06:	4a2b      	ldr	r2, [pc, #172]	; (800ccb4 <_strtod_l+0x5ec>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d913      	bls.n	800cc34 <_strtod_l+0x56c>
 800cc0c:	2601      	movs	r6, #1
 800cc0e:	4f2a      	ldr	r7, [pc, #168]	; (800ccb8 <_strtod_l+0x5f0>)
 800cc10:	4276      	negs	r6, r6
 800cc12:	2300      	movs	r3, #0
 800cc14:	9307      	str	r3, [sp, #28]
 800cc16:	e088      	b.n	800cd2a <_strtod_l+0x662>
 800cc18:	2201      	movs	r2, #1
 800cc1a:	4214      	tst	r4, r2
 800cc1c:	d004      	beq.n	800cc28 <_strtod_l+0x560>
 800cc1e:	682a      	ldr	r2, [r5, #0]
 800cc20:	686b      	ldr	r3, [r5, #4]
 800cc22:	f7f5 f827 	bl	8001c74 <__aeabi_dmul>
 800cc26:	2301      	movs	r3, #1
 800cc28:	9a07      	ldr	r2, [sp, #28]
 800cc2a:	1064      	asrs	r4, r4, #1
 800cc2c:	3201      	adds	r2, #1
 800cc2e:	9207      	str	r2, [sp, #28]
 800cc30:	3508      	adds	r5, #8
 800cc32:	e7d0      	b.n	800cbd6 <_strtod_l+0x50e>
 800cc34:	23d4      	movs	r3, #212	; 0xd4
 800cc36:	049b      	lsls	r3, r3, #18
 800cc38:	18cf      	adds	r7, r1, r3
 800cc3a:	e7ea      	b.n	800cc12 <_strtod_l+0x54a>
 800cc3c:	2c00      	cmp	r4, #0
 800cc3e:	d0e8      	beq.n	800cc12 <_strtod_l+0x54a>
 800cc40:	4264      	negs	r4, r4
 800cc42:	230f      	movs	r3, #15
 800cc44:	0022      	movs	r2, r4
 800cc46:	401a      	ands	r2, r3
 800cc48:	421c      	tst	r4, r3
 800cc4a:	d00a      	beq.n	800cc62 <_strtod_l+0x59a>
 800cc4c:	4b15      	ldr	r3, [pc, #84]	; (800cca4 <_strtod_l+0x5dc>)
 800cc4e:	00d2      	lsls	r2, r2, #3
 800cc50:	189b      	adds	r3, r3, r2
 800cc52:	0030      	movs	r0, r6
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	0039      	movs	r1, r7
 800cc5a:	f7f4 fc11 	bl	8001480 <__aeabi_ddiv>
 800cc5e:	0006      	movs	r6, r0
 800cc60:	000f      	movs	r7, r1
 800cc62:	1124      	asrs	r4, r4, #4
 800cc64:	d0d5      	beq.n	800cc12 <_strtod_l+0x54a>
 800cc66:	2c1f      	cmp	r4, #31
 800cc68:	dd28      	ble.n	800ccbc <_strtod_l+0x5f4>
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	9305      	str	r3, [sp, #20]
 800cc6e:	9306      	str	r3, [sp, #24]
 800cc70:	930d      	str	r3, [sp, #52]	; 0x34
 800cc72:	9308      	str	r3, [sp, #32]
 800cc74:	2322      	movs	r3, #34	; 0x22
 800cc76:	9a04      	ldr	r2, [sp, #16]
 800cc78:	2600      	movs	r6, #0
 800cc7a:	6013      	str	r3, [r2, #0]
 800cc7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc7e:	2700      	movs	r7, #0
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d18d      	bne.n	800cba0 <_strtod_l+0x4d8>
 800cc84:	e55b      	b.n	800c73e <_strtod_l+0x76>
 800cc86:	46c0      	nop			; (mov r8, r8)
 800cc88:	00004e1f 	.word	0x00004e1f
 800cc8c:	0800ec7d 	.word	0x0800ec7d
 800cc90:	0800eea4 	.word	0x0800eea4
 800cc94:	7ff00000 	.word	0x7ff00000
 800cc98:	0800ec75 	.word	0x0800ec75
 800cc9c:	0800ecac 	.word	0x0800ecac
 800cca0:	0800f035 	.word	0x0800f035
 800cca4:	0800edb8 	.word	0x0800edb8
 800cca8:	0800ed90 	.word	0x0800ed90
 800ccac:	fcb00000 	.word	0xfcb00000
 800ccb0:	7ca00000 	.word	0x7ca00000
 800ccb4:	7c900000 	.word	0x7c900000
 800ccb8:	7fefffff 	.word	0x7fefffff
 800ccbc:	2310      	movs	r3, #16
 800ccbe:	0022      	movs	r2, r4
 800ccc0:	401a      	ands	r2, r3
 800ccc2:	9207      	str	r2, [sp, #28]
 800ccc4:	421c      	tst	r4, r3
 800ccc6:	d001      	beq.n	800cccc <_strtod_l+0x604>
 800ccc8:	335a      	adds	r3, #90	; 0x5a
 800ccca:	9307      	str	r3, [sp, #28]
 800cccc:	0030      	movs	r0, r6
 800ccce:	0039      	movs	r1, r7
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	4dc4      	ldr	r5, [pc, #784]	; (800cfe4 <_strtod_l+0x91c>)
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	4214      	tst	r4, r2
 800ccd8:	d004      	beq.n	800cce4 <_strtod_l+0x61c>
 800ccda:	682a      	ldr	r2, [r5, #0]
 800ccdc:	686b      	ldr	r3, [r5, #4]
 800ccde:	f7f4 ffc9 	bl	8001c74 <__aeabi_dmul>
 800cce2:	2301      	movs	r3, #1
 800cce4:	1064      	asrs	r4, r4, #1
 800cce6:	3508      	adds	r5, #8
 800cce8:	2c00      	cmp	r4, #0
 800ccea:	d1f3      	bne.n	800ccd4 <_strtod_l+0x60c>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d001      	beq.n	800ccf4 <_strtod_l+0x62c>
 800ccf0:	0006      	movs	r6, r0
 800ccf2:	000f      	movs	r7, r1
 800ccf4:	9b07      	ldr	r3, [sp, #28]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00f      	beq.n	800cd1a <_strtod_l+0x652>
 800ccfa:	236b      	movs	r3, #107	; 0x6b
 800ccfc:	007a      	lsls	r2, r7, #1
 800ccfe:	0d52      	lsrs	r2, r2, #21
 800cd00:	0039      	movs	r1, r7
 800cd02:	1a9b      	subs	r3, r3, r2
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dd08      	ble.n	800cd1a <_strtod_l+0x652>
 800cd08:	2b1f      	cmp	r3, #31
 800cd0a:	dc00      	bgt.n	800cd0e <_strtod_l+0x646>
 800cd0c:	e121      	b.n	800cf52 <_strtod_l+0x88a>
 800cd0e:	2600      	movs	r6, #0
 800cd10:	2b34      	cmp	r3, #52	; 0x34
 800cd12:	dc00      	bgt.n	800cd16 <_strtod_l+0x64e>
 800cd14:	e116      	b.n	800cf44 <_strtod_l+0x87c>
 800cd16:	27dc      	movs	r7, #220	; 0xdc
 800cd18:	04bf      	lsls	r7, r7, #18
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	0030      	movs	r0, r6
 800cd20:	0039      	movs	r1, r7
 800cd22:	f7f3 fb93 	bl	800044c <__aeabi_dcmpeq>
 800cd26:	2800      	cmp	r0, #0
 800cd28:	d19f      	bne.n	800cc6a <_strtod_l+0x5a2>
 800cd2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd2c:	9a08      	ldr	r2, [sp, #32]
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cd32:	9b05      	ldr	r3, [sp, #20]
 800cd34:	9804      	ldr	r0, [sp, #16]
 800cd36:	f7ff f89f 	bl	800be78 <__s2b>
 800cd3a:	900d      	str	r0, [sp, #52]	; 0x34
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	d100      	bne.n	800cd42 <_strtod_l+0x67a>
 800cd40:	e720      	b.n	800cb84 <_strtod_l+0x4bc>
 800cd42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd44:	9906      	ldr	r1, [sp, #24]
 800cd46:	17da      	asrs	r2, r3, #31
 800cd48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd4a:	1a5b      	subs	r3, r3, r1
 800cd4c:	401a      	ands	r2, r3
 800cd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd50:	9215      	str	r2, [sp, #84]	; 0x54
 800cd52:	43db      	mvns	r3, r3
 800cd54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd56:	17db      	asrs	r3, r3, #31
 800cd58:	401a      	ands	r2, r3
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	9218      	str	r2, [sp, #96]	; 0x60
 800cd5e:	9305      	str	r3, [sp, #20]
 800cd60:	9306      	str	r3, [sp, #24]
 800cd62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd64:	9804      	ldr	r0, [sp, #16]
 800cd66:	6859      	ldr	r1, [r3, #4]
 800cd68:	f7fe ffda 	bl	800bd20 <_Balloc>
 800cd6c:	9008      	str	r0, [sp, #32]
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d100      	bne.n	800cd74 <_strtod_l+0x6ac>
 800cd72:	e70c      	b.n	800cb8e <_strtod_l+0x4c6>
 800cd74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd76:	300c      	adds	r0, #12
 800cd78:	0019      	movs	r1, r3
 800cd7a:	691a      	ldr	r2, [r3, #16]
 800cd7c:	310c      	adds	r1, #12
 800cd7e:	3202      	adds	r2, #2
 800cd80:	0092      	lsls	r2, r2, #2
 800cd82:	f000 fd8b 	bl	800d89c <memcpy>
 800cd86:	ab1e      	add	r3, sp, #120	; 0x78
 800cd88:	9301      	str	r3, [sp, #4]
 800cd8a:	ab1d      	add	r3, sp, #116	; 0x74
 800cd8c:	9300      	str	r3, [sp, #0]
 800cd8e:	0032      	movs	r2, r6
 800cd90:	003b      	movs	r3, r7
 800cd92:	9804      	ldr	r0, [sp, #16]
 800cd94:	9610      	str	r6, [sp, #64]	; 0x40
 800cd96:	9711      	str	r7, [sp, #68]	; 0x44
 800cd98:	f7ff fbb0 	bl	800c4fc <__d2b>
 800cd9c:	901c      	str	r0, [sp, #112]	; 0x70
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d100      	bne.n	800cda4 <_strtod_l+0x6dc>
 800cda2:	e6f4      	b.n	800cb8e <_strtod_l+0x4c6>
 800cda4:	2101      	movs	r1, #1
 800cda6:	9804      	ldr	r0, [sp, #16]
 800cda8:	f7ff f8fa 	bl	800bfa0 <__i2b>
 800cdac:	9006      	str	r0, [sp, #24]
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d100      	bne.n	800cdb4 <_strtod_l+0x6ec>
 800cdb2:	e6ec      	b.n	800cb8e <_strtod_l+0x4c6>
 800cdb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cdb6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cdb8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cdba:	1ad4      	subs	r4, r2, r3
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	db01      	blt.n	800cdc4 <_strtod_l+0x6fc>
 800cdc0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800cdc2:	195d      	adds	r5, r3, r5
 800cdc4:	9907      	ldr	r1, [sp, #28]
 800cdc6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cdc8:	1a5b      	subs	r3, r3, r1
 800cdca:	2136      	movs	r1, #54	; 0x36
 800cdcc:	189b      	adds	r3, r3, r2
 800cdce:	1a8a      	subs	r2, r1, r2
 800cdd0:	4985      	ldr	r1, [pc, #532]	; (800cfe8 <_strtod_l+0x920>)
 800cdd2:	2001      	movs	r0, #1
 800cdd4:	468c      	mov	ip, r1
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	9114      	str	r1, [sp, #80]	; 0x50
 800cddc:	9012      	str	r0, [sp, #72]	; 0x48
 800cdde:	4563      	cmp	r3, ip
 800cde0:	da07      	bge.n	800cdf2 <_strtod_l+0x72a>
 800cde2:	4661      	mov	r1, ip
 800cde4:	1ac9      	subs	r1, r1, r3
 800cde6:	1a52      	subs	r2, r2, r1
 800cde8:	291f      	cmp	r1, #31
 800cdea:	dd00      	ble.n	800cdee <_strtod_l+0x726>
 800cdec:	e0b6      	b.n	800cf5c <_strtod_l+0x894>
 800cdee:	4088      	lsls	r0, r1
 800cdf0:	9012      	str	r0, [sp, #72]	; 0x48
 800cdf2:	18ab      	adds	r3, r5, r2
 800cdf4:	930c      	str	r3, [sp, #48]	; 0x30
 800cdf6:	18a4      	adds	r4, r4, r2
 800cdf8:	9b07      	ldr	r3, [sp, #28]
 800cdfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdfc:	191c      	adds	r4, r3, r4
 800cdfe:	002b      	movs	r3, r5
 800ce00:	4295      	cmp	r5, r2
 800ce02:	dd00      	ble.n	800ce06 <_strtod_l+0x73e>
 800ce04:	0013      	movs	r3, r2
 800ce06:	42a3      	cmp	r3, r4
 800ce08:	dd00      	ble.n	800ce0c <_strtod_l+0x744>
 800ce0a:	0023      	movs	r3, r4
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	dd04      	ble.n	800ce1a <_strtod_l+0x752>
 800ce10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce12:	1ae4      	subs	r4, r4, r3
 800ce14:	1ad2      	subs	r2, r2, r3
 800ce16:	920c      	str	r2, [sp, #48]	; 0x30
 800ce18:	1aed      	subs	r5, r5, r3
 800ce1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	dd17      	ble.n	800ce50 <_strtod_l+0x788>
 800ce20:	001a      	movs	r2, r3
 800ce22:	9906      	ldr	r1, [sp, #24]
 800ce24:	9804      	ldr	r0, [sp, #16]
 800ce26:	f7ff f983 	bl	800c130 <__pow5mult>
 800ce2a:	9006      	str	r0, [sp, #24]
 800ce2c:	2800      	cmp	r0, #0
 800ce2e:	d100      	bne.n	800ce32 <_strtod_l+0x76a>
 800ce30:	e6ad      	b.n	800cb8e <_strtod_l+0x4c6>
 800ce32:	0001      	movs	r1, r0
 800ce34:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ce36:	9804      	ldr	r0, [sp, #16]
 800ce38:	f7ff f8ca 	bl	800bfd0 <__multiply>
 800ce3c:	900e      	str	r0, [sp, #56]	; 0x38
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	d100      	bne.n	800ce44 <_strtod_l+0x77c>
 800ce42:	e6a4      	b.n	800cb8e <_strtod_l+0x4c6>
 800ce44:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ce46:	9804      	ldr	r0, [sp, #16]
 800ce48:	f7fe ffae 	bl	800bda8 <_Bfree>
 800ce4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce4e:	931c      	str	r3, [sp, #112]	; 0x70
 800ce50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	dd00      	ble.n	800ce58 <_strtod_l+0x790>
 800ce56:	e087      	b.n	800cf68 <_strtod_l+0x8a0>
 800ce58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	dd08      	ble.n	800ce70 <_strtod_l+0x7a8>
 800ce5e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ce60:	9908      	ldr	r1, [sp, #32]
 800ce62:	9804      	ldr	r0, [sp, #16]
 800ce64:	f7ff f964 	bl	800c130 <__pow5mult>
 800ce68:	9008      	str	r0, [sp, #32]
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d100      	bne.n	800ce70 <_strtod_l+0x7a8>
 800ce6e:	e68e      	b.n	800cb8e <_strtod_l+0x4c6>
 800ce70:	2c00      	cmp	r4, #0
 800ce72:	dd08      	ble.n	800ce86 <_strtod_l+0x7be>
 800ce74:	0022      	movs	r2, r4
 800ce76:	9908      	ldr	r1, [sp, #32]
 800ce78:	9804      	ldr	r0, [sp, #16]
 800ce7a:	f7ff f9b5 	bl	800c1e8 <__lshift>
 800ce7e:	9008      	str	r0, [sp, #32]
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d100      	bne.n	800ce86 <_strtod_l+0x7be>
 800ce84:	e683      	b.n	800cb8e <_strtod_l+0x4c6>
 800ce86:	2d00      	cmp	r5, #0
 800ce88:	dd08      	ble.n	800ce9c <_strtod_l+0x7d4>
 800ce8a:	002a      	movs	r2, r5
 800ce8c:	9906      	ldr	r1, [sp, #24]
 800ce8e:	9804      	ldr	r0, [sp, #16]
 800ce90:	f7ff f9aa 	bl	800c1e8 <__lshift>
 800ce94:	9006      	str	r0, [sp, #24]
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d100      	bne.n	800ce9c <_strtod_l+0x7d4>
 800ce9a:	e678      	b.n	800cb8e <_strtod_l+0x4c6>
 800ce9c:	9a08      	ldr	r2, [sp, #32]
 800ce9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cea0:	9804      	ldr	r0, [sp, #16]
 800cea2:	f7ff fa2b 	bl	800c2fc <__mdiff>
 800cea6:	9005      	str	r0, [sp, #20]
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d100      	bne.n	800ceae <_strtod_l+0x7e6>
 800ceac:	e66f      	b.n	800cb8e <_strtod_l+0x4c6>
 800ceae:	2200      	movs	r2, #0
 800ceb0:	68c3      	ldr	r3, [r0, #12]
 800ceb2:	9906      	ldr	r1, [sp, #24]
 800ceb4:	60c2      	str	r2, [r0, #12]
 800ceb6:	930c      	str	r3, [sp, #48]	; 0x30
 800ceb8:	f7ff fa04 	bl	800c2c4 <__mcmp>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	da5d      	bge.n	800cf7c <_strtod_l+0x8b4>
 800cec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cec2:	4333      	orrs	r3, r6
 800cec4:	d000      	beq.n	800cec8 <_strtod_l+0x800>
 800cec6:	e088      	b.n	800cfda <_strtod_l+0x912>
 800cec8:	033b      	lsls	r3, r7, #12
 800ceca:	d000      	beq.n	800cece <_strtod_l+0x806>
 800cecc:	e085      	b.n	800cfda <_strtod_l+0x912>
 800cece:	22d6      	movs	r2, #214	; 0xd6
 800ced0:	4b46      	ldr	r3, [pc, #280]	; (800cfec <_strtod_l+0x924>)
 800ced2:	04d2      	lsls	r2, r2, #19
 800ced4:	403b      	ands	r3, r7
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d97f      	bls.n	800cfda <_strtod_l+0x912>
 800ceda:	9b05      	ldr	r3, [sp, #20]
 800cedc:	695b      	ldr	r3, [r3, #20]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d103      	bne.n	800ceea <_strtod_l+0x822>
 800cee2:	9b05      	ldr	r3, [sp, #20]
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	dd77      	ble.n	800cfda <_strtod_l+0x912>
 800ceea:	9905      	ldr	r1, [sp, #20]
 800ceec:	2201      	movs	r2, #1
 800ceee:	9804      	ldr	r0, [sp, #16]
 800cef0:	f7ff f97a 	bl	800c1e8 <__lshift>
 800cef4:	9906      	ldr	r1, [sp, #24]
 800cef6:	9005      	str	r0, [sp, #20]
 800cef8:	f7ff f9e4 	bl	800c2c4 <__mcmp>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	dd6c      	ble.n	800cfda <_strtod_l+0x912>
 800cf00:	9907      	ldr	r1, [sp, #28]
 800cf02:	003b      	movs	r3, r7
 800cf04:	4a39      	ldr	r2, [pc, #228]	; (800cfec <_strtod_l+0x924>)
 800cf06:	2900      	cmp	r1, #0
 800cf08:	d100      	bne.n	800cf0c <_strtod_l+0x844>
 800cf0a:	e094      	b.n	800d036 <_strtod_l+0x96e>
 800cf0c:	0011      	movs	r1, r2
 800cf0e:	20d6      	movs	r0, #214	; 0xd6
 800cf10:	4039      	ands	r1, r7
 800cf12:	04c0      	lsls	r0, r0, #19
 800cf14:	4281      	cmp	r1, r0
 800cf16:	dd00      	ble.n	800cf1a <_strtod_l+0x852>
 800cf18:	e08d      	b.n	800d036 <_strtod_l+0x96e>
 800cf1a:	23dc      	movs	r3, #220	; 0xdc
 800cf1c:	049b      	lsls	r3, r3, #18
 800cf1e:	4299      	cmp	r1, r3
 800cf20:	dc00      	bgt.n	800cf24 <_strtod_l+0x85c>
 800cf22:	e6a7      	b.n	800cc74 <_strtod_l+0x5ac>
 800cf24:	0030      	movs	r0, r6
 800cf26:	0039      	movs	r1, r7
 800cf28:	4b31      	ldr	r3, [pc, #196]	; (800cff0 <_strtod_l+0x928>)
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f7f4 fea2 	bl	8001c74 <__aeabi_dmul>
 800cf30:	4b2e      	ldr	r3, [pc, #184]	; (800cfec <_strtod_l+0x924>)
 800cf32:	0006      	movs	r6, r0
 800cf34:	000f      	movs	r7, r1
 800cf36:	420b      	tst	r3, r1
 800cf38:	d000      	beq.n	800cf3c <_strtod_l+0x874>
 800cf3a:	e631      	b.n	800cba0 <_strtod_l+0x4d8>
 800cf3c:	2322      	movs	r3, #34	; 0x22
 800cf3e:	9a04      	ldr	r2, [sp, #16]
 800cf40:	6013      	str	r3, [r2, #0]
 800cf42:	e62d      	b.n	800cba0 <_strtod_l+0x4d8>
 800cf44:	234b      	movs	r3, #75	; 0x4b
 800cf46:	1a9a      	subs	r2, r3, r2
 800cf48:	3b4c      	subs	r3, #76	; 0x4c
 800cf4a:	4093      	lsls	r3, r2
 800cf4c:	4019      	ands	r1, r3
 800cf4e:	000f      	movs	r7, r1
 800cf50:	e6e3      	b.n	800cd1a <_strtod_l+0x652>
 800cf52:	2201      	movs	r2, #1
 800cf54:	4252      	negs	r2, r2
 800cf56:	409a      	lsls	r2, r3
 800cf58:	4016      	ands	r6, r2
 800cf5a:	e6de      	b.n	800cd1a <_strtod_l+0x652>
 800cf5c:	4925      	ldr	r1, [pc, #148]	; (800cff4 <_strtod_l+0x92c>)
 800cf5e:	1acb      	subs	r3, r1, r3
 800cf60:	0001      	movs	r1, r0
 800cf62:	4099      	lsls	r1, r3
 800cf64:	9114      	str	r1, [sp, #80]	; 0x50
 800cf66:	e743      	b.n	800cdf0 <_strtod_l+0x728>
 800cf68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cf6c:	9804      	ldr	r0, [sp, #16]
 800cf6e:	f7ff f93b 	bl	800c1e8 <__lshift>
 800cf72:	901c      	str	r0, [sp, #112]	; 0x70
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d000      	beq.n	800cf7a <_strtod_l+0x8b2>
 800cf78:	e76e      	b.n	800ce58 <_strtod_l+0x790>
 800cf7a:	e608      	b.n	800cb8e <_strtod_l+0x4c6>
 800cf7c:	970e      	str	r7, [sp, #56]	; 0x38
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d177      	bne.n	800d072 <_strtod_l+0x9aa>
 800cf82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf84:	033b      	lsls	r3, r7, #12
 800cf86:	0b1b      	lsrs	r3, r3, #12
 800cf88:	2a00      	cmp	r2, #0
 800cf8a:	d039      	beq.n	800d000 <_strtod_l+0x938>
 800cf8c:	4a1a      	ldr	r2, [pc, #104]	; (800cff8 <_strtod_l+0x930>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d139      	bne.n	800d006 <_strtod_l+0x93e>
 800cf92:	2101      	movs	r1, #1
 800cf94:	9b07      	ldr	r3, [sp, #28]
 800cf96:	4249      	negs	r1, r1
 800cf98:	0032      	movs	r2, r6
 800cf9a:	0008      	movs	r0, r1
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d00b      	beq.n	800cfb8 <_strtod_l+0x8f0>
 800cfa0:	24d4      	movs	r4, #212	; 0xd4
 800cfa2:	4b12      	ldr	r3, [pc, #72]	; (800cfec <_strtod_l+0x924>)
 800cfa4:	0008      	movs	r0, r1
 800cfa6:	403b      	ands	r3, r7
 800cfa8:	04e4      	lsls	r4, r4, #19
 800cfaa:	42a3      	cmp	r3, r4
 800cfac:	d804      	bhi.n	800cfb8 <_strtod_l+0x8f0>
 800cfae:	306c      	adds	r0, #108	; 0x6c
 800cfb0:	0d1b      	lsrs	r3, r3, #20
 800cfb2:	1ac3      	subs	r3, r0, r3
 800cfb4:	4099      	lsls	r1, r3
 800cfb6:	0008      	movs	r0, r1
 800cfb8:	4282      	cmp	r2, r0
 800cfba:	d124      	bne.n	800d006 <_strtod_l+0x93e>
 800cfbc:	4b0f      	ldr	r3, [pc, #60]	; (800cffc <_strtod_l+0x934>)
 800cfbe:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cfc0:	4299      	cmp	r1, r3
 800cfc2:	d102      	bne.n	800cfca <_strtod_l+0x902>
 800cfc4:	3201      	adds	r2, #1
 800cfc6:	d100      	bne.n	800cfca <_strtod_l+0x902>
 800cfc8:	e5e1      	b.n	800cb8e <_strtod_l+0x4c6>
 800cfca:	4b08      	ldr	r3, [pc, #32]	; (800cfec <_strtod_l+0x924>)
 800cfcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfce:	2600      	movs	r6, #0
 800cfd0:	401a      	ands	r2, r3
 800cfd2:	0013      	movs	r3, r2
 800cfd4:	2280      	movs	r2, #128	; 0x80
 800cfd6:	0352      	lsls	r2, r2, #13
 800cfd8:	189f      	adds	r7, r3, r2
 800cfda:	9b07      	ldr	r3, [sp, #28]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d1a1      	bne.n	800cf24 <_strtod_l+0x85c>
 800cfe0:	e5de      	b.n	800cba0 <_strtod_l+0x4d8>
 800cfe2:	46c0      	nop			; (mov r8, r8)
 800cfe4:	0800eeb8 	.word	0x0800eeb8
 800cfe8:	fffffc02 	.word	0xfffffc02
 800cfec:	7ff00000 	.word	0x7ff00000
 800cff0:	39500000 	.word	0x39500000
 800cff4:	fffffbe2 	.word	0xfffffbe2
 800cff8:	000fffff 	.word	0x000fffff
 800cffc:	7fefffff 	.word	0x7fefffff
 800d000:	4333      	orrs	r3, r6
 800d002:	d100      	bne.n	800d006 <_strtod_l+0x93e>
 800d004:	e77c      	b.n	800cf00 <_strtod_l+0x838>
 800d006:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d01d      	beq.n	800d048 <_strtod_l+0x980>
 800d00c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d00e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d010:	4213      	tst	r3, r2
 800d012:	d0e2      	beq.n	800cfda <_strtod_l+0x912>
 800d014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d016:	0030      	movs	r0, r6
 800d018:	0039      	movs	r1, r7
 800d01a:	9a07      	ldr	r2, [sp, #28]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d017      	beq.n	800d050 <_strtod_l+0x988>
 800d020:	f7ff fb3a 	bl	800c698 <sulp>
 800d024:	0002      	movs	r2, r0
 800d026:	000b      	movs	r3, r1
 800d028:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d02a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d02c:	f7f3 fec8 	bl	8000dc0 <__aeabi_dadd>
 800d030:	0006      	movs	r6, r0
 800d032:	000f      	movs	r7, r1
 800d034:	e7d1      	b.n	800cfda <_strtod_l+0x912>
 800d036:	2601      	movs	r6, #1
 800d038:	4013      	ands	r3, r2
 800d03a:	4a98      	ldr	r2, [pc, #608]	; (800d29c <_strtod_l+0xbd4>)
 800d03c:	4276      	negs	r6, r6
 800d03e:	189b      	adds	r3, r3, r2
 800d040:	4a97      	ldr	r2, [pc, #604]	; (800d2a0 <_strtod_l+0xbd8>)
 800d042:	431a      	orrs	r2, r3
 800d044:	0017      	movs	r7, r2
 800d046:	e7c8      	b.n	800cfda <_strtod_l+0x912>
 800d048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d04a:	4233      	tst	r3, r6
 800d04c:	d0c5      	beq.n	800cfda <_strtod_l+0x912>
 800d04e:	e7e1      	b.n	800d014 <_strtod_l+0x94c>
 800d050:	f7ff fb22 	bl	800c698 <sulp>
 800d054:	0002      	movs	r2, r0
 800d056:	000b      	movs	r3, r1
 800d058:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d05a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d05c:	f7f5 f8cc 	bl	80021f8 <__aeabi_dsub>
 800d060:	2200      	movs	r2, #0
 800d062:	2300      	movs	r3, #0
 800d064:	0006      	movs	r6, r0
 800d066:	000f      	movs	r7, r1
 800d068:	f7f3 f9f0 	bl	800044c <__aeabi_dcmpeq>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d0b4      	beq.n	800cfda <_strtod_l+0x912>
 800d070:	e600      	b.n	800cc74 <_strtod_l+0x5ac>
 800d072:	9906      	ldr	r1, [sp, #24]
 800d074:	9805      	ldr	r0, [sp, #20]
 800d076:	f7ff faa1 	bl	800c5bc <__ratio>
 800d07a:	2380      	movs	r3, #128	; 0x80
 800d07c:	2200      	movs	r2, #0
 800d07e:	05db      	lsls	r3, r3, #23
 800d080:	0004      	movs	r4, r0
 800d082:	000d      	movs	r5, r1
 800d084:	f7f3 f9f2 	bl	800046c <__aeabi_dcmple>
 800d088:	2800      	cmp	r0, #0
 800d08a:	d06d      	beq.n	800d168 <_strtod_l+0xaa0>
 800d08c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d000      	beq.n	800d094 <_strtod_l+0x9cc>
 800d092:	e07e      	b.n	800d192 <_strtod_l+0xaca>
 800d094:	2e00      	cmp	r6, #0
 800d096:	d158      	bne.n	800d14a <_strtod_l+0xa82>
 800d098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d09a:	031b      	lsls	r3, r3, #12
 800d09c:	d000      	beq.n	800d0a0 <_strtod_l+0x9d8>
 800d09e:	e07f      	b.n	800d1a0 <_strtod_l+0xad8>
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	0020      	movs	r0, r4
 800d0a4:	0029      	movs	r1, r5
 800d0a6:	4b7f      	ldr	r3, [pc, #508]	; (800d2a4 <_strtod_l+0xbdc>)
 800d0a8:	f7f3 f9d6 	bl	8000458 <__aeabi_dcmplt>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d158      	bne.n	800d162 <_strtod_l+0xa9a>
 800d0b0:	0020      	movs	r0, r4
 800d0b2:	0029      	movs	r1, r5
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	4b7c      	ldr	r3, [pc, #496]	; (800d2a8 <_strtod_l+0xbe0>)
 800d0b8:	f7f4 fddc 	bl	8001c74 <__aeabi_dmul>
 800d0bc:	0004      	movs	r4, r0
 800d0be:	000d      	movs	r5, r1
 800d0c0:	2380      	movs	r3, #128	; 0x80
 800d0c2:	061b      	lsls	r3, r3, #24
 800d0c4:	940a      	str	r4, [sp, #40]	; 0x28
 800d0c6:	18eb      	adds	r3, r5, r3
 800d0c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0ce:	9212      	str	r2, [sp, #72]	; 0x48
 800d0d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d0d2:	4a76      	ldr	r2, [pc, #472]	; (800d2ac <_strtod_l+0xbe4>)
 800d0d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	9314      	str	r3, [sp, #80]	; 0x50
 800d0da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d0dc:	4b74      	ldr	r3, [pc, #464]	; (800d2b0 <_strtod_l+0xbe8>)
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d000      	beq.n	800d0e4 <_strtod_l+0xa1c>
 800d0e2:	e091      	b.n	800d208 <_strtod_l+0xb40>
 800d0e4:	4a73      	ldr	r2, [pc, #460]	; (800d2b4 <_strtod_l+0xbec>)
 800d0e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0e8:	4694      	mov	ip, r2
 800d0ea:	4463      	add	r3, ip
 800d0ec:	001f      	movs	r7, r3
 800d0ee:	0030      	movs	r0, r6
 800d0f0:	0019      	movs	r1, r3
 800d0f2:	f7ff f99b 	bl	800c42c <__ulp>
 800d0f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0fa:	f7f4 fdbb 	bl	8001c74 <__aeabi_dmul>
 800d0fe:	0032      	movs	r2, r6
 800d100:	003b      	movs	r3, r7
 800d102:	f7f3 fe5d 	bl	8000dc0 <__aeabi_dadd>
 800d106:	4a69      	ldr	r2, [pc, #420]	; (800d2ac <_strtod_l+0xbe4>)
 800d108:	4b6b      	ldr	r3, [pc, #428]	; (800d2b8 <_strtod_l+0xbf0>)
 800d10a:	0006      	movs	r6, r0
 800d10c:	400a      	ands	r2, r1
 800d10e:	429a      	cmp	r2, r3
 800d110:	d949      	bls.n	800d1a6 <_strtod_l+0xade>
 800d112:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d114:	4b69      	ldr	r3, [pc, #420]	; (800d2bc <_strtod_l+0xbf4>)
 800d116:	429a      	cmp	r2, r3
 800d118:	d103      	bne.n	800d122 <_strtod_l+0xa5a>
 800d11a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d11c:	3301      	adds	r3, #1
 800d11e:	d100      	bne.n	800d122 <_strtod_l+0xa5a>
 800d120:	e535      	b.n	800cb8e <_strtod_l+0x4c6>
 800d122:	2601      	movs	r6, #1
 800d124:	4f65      	ldr	r7, [pc, #404]	; (800d2bc <_strtod_l+0xbf4>)
 800d126:	4276      	negs	r6, r6
 800d128:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d12a:	9804      	ldr	r0, [sp, #16]
 800d12c:	f7fe fe3c 	bl	800bda8 <_Bfree>
 800d130:	9908      	ldr	r1, [sp, #32]
 800d132:	9804      	ldr	r0, [sp, #16]
 800d134:	f7fe fe38 	bl	800bda8 <_Bfree>
 800d138:	9906      	ldr	r1, [sp, #24]
 800d13a:	9804      	ldr	r0, [sp, #16]
 800d13c:	f7fe fe34 	bl	800bda8 <_Bfree>
 800d140:	9905      	ldr	r1, [sp, #20]
 800d142:	9804      	ldr	r0, [sp, #16]
 800d144:	f7fe fe30 	bl	800bda8 <_Bfree>
 800d148:	e60b      	b.n	800cd62 <_strtod_l+0x69a>
 800d14a:	2e01      	cmp	r6, #1
 800d14c:	d103      	bne.n	800d156 <_strtod_l+0xa8e>
 800d14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d150:	2b00      	cmp	r3, #0
 800d152:	d100      	bne.n	800d156 <_strtod_l+0xa8e>
 800d154:	e58e      	b.n	800cc74 <_strtod_l+0x5ac>
 800d156:	2300      	movs	r3, #0
 800d158:	4c59      	ldr	r4, [pc, #356]	; (800d2c0 <_strtod_l+0xbf8>)
 800d15a:	930a      	str	r3, [sp, #40]	; 0x28
 800d15c:	940b      	str	r4, [sp, #44]	; 0x2c
 800d15e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d160:	e01c      	b.n	800d19c <_strtod_l+0xad4>
 800d162:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d164:	4d50      	ldr	r5, [pc, #320]	; (800d2a8 <_strtod_l+0xbe0>)
 800d166:	e7ab      	b.n	800d0c0 <_strtod_l+0x9f8>
 800d168:	2200      	movs	r2, #0
 800d16a:	0020      	movs	r0, r4
 800d16c:	0029      	movs	r1, r5
 800d16e:	4b4e      	ldr	r3, [pc, #312]	; (800d2a8 <_strtod_l+0xbe0>)
 800d170:	f7f4 fd80 	bl	8001c74 <__aeabi_dmul>
 800d174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d176:	0004      	movs	r4, r0
 800d178:	000b      	movs	r3, r1
 800d17a:	000d      	movs	r5, r1
 800d17c:	2a00      	cmp	r2, #0
 800d17e:	d104      	bne.n	800d18a <_strtod_l+0xac2>
 800d180:	2280      	movs	r2, #128	; 0x80
 800d182:	0612      	lsls	r2, r2, #24
 800d184:	900a      	str	r0, [sp, #40]	; 0x28
 800d186:	188b      	adds	r3, r1, r2
 800d188:	e79e      	b.n	800d0c8 <_strtod_l+0xa00>
 800d18a:	0002      	movs	r2, r0
 800d18c:	920a      	str	r2, [sp, #40]	; 0x28
 800d18e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d190:	e79b      	b.n	800d0ca <_strtod_l+0xa02>
 800d192:	2300      	movs	r3, #0
 800d194:	4c43      	ldr	r4, [pc, #268]	; (800d2a4 <_strtod_l+0xbdc>)
 800d196:	930a      	str	r3, [sp, #40]	; 0x28
 800d198:	940b      	str	r4, [sp, #44]	; 0x2c
 800d19a:	2400      	movs	r4, #0
 800d19c:	4d41      	ldr	r5, [pc, #260]	; (800d2a4 <_strtod_l+0xbdc>)
 800d19e:	e794      	b.n	800d0ca <_strtod_l+0xa02>
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4c47      	ldr	r4, [pc, #284]	; (800d2c0 <_strtod_l+0xbf8>)
 800d1a4:	e7f7      	b.n	800d196 <_strtod_l+0xace>
 800d1a6:	23d4      	movs	r3, #212	; 0xd4
 800d1a8:	049b      	lsls	r3, r3, #18
 800d1aa:	18cf      	adds	r7, r1, r3
 800d1ac:	9b07      	ldr	r3, [sp, #28]
 800d1ae:	970e      	str	r7, [sp, #56]	; 0x38
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d1b9      	bne.n	800d128 <_strtod_l+0xa60>
 800d1b4:	4b3d      	ldr	r3, [pc, #244]	; (800d2ac <_strtod_l+0xbe4>)
 800d1b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1b8:	403b      	ands	r3, r7
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d1b4      	bne.n	800d128 <_strtod_l+0xa60>
 800d1be:	0020      	movs	r0, r4
 800d1c0:	0029      	movs	r1, r5
 800d1c2:	f7f3 f9dd 	bl	8000580 <__aeabi_d2lz>
 800d1c6:	f7f3 fa17 	bl	80005f8 <__aeabi_l2d>
 800d1ca:	0002      	movs	r2, r0
 800d1cc:	000b      	movs	r3, r1
 800d1ce:	0020      	movs	r0, r4
 800d1d0:	0029      	movs	r1, r5
 800d1d2:	f7f5 f811 	bl	80021f8 <__aeabi_dsub>
 800d1d6:	033b      	lsls	r3, r7, #12
 800d1d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d1da:	0b1b      	lsrs	r3, r3, #12
 800d1dc:	4333      	orrs	r3, r6
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	0004      	movs	r4, r0
 800d1e2:	000d      	movs	r5, r1
 800d1e4:	4a37      	ldr	r2, [pc, #220]	; (800d2c4 <_strtod_l+0xbfc>)
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d054      	beq.n	800d294 <_strtod_l+0xbcc>
 800d1ea:	4b37      	ldr	r3, [pc, #220]	; (800d2c8 <_strtod_l+0xc00>)
 800d1ec:	f7f3 f934 	bl	8000458 <__aeabi_dcmplt>
 800d1f0:	2800      	cmp	r0, #0
 800d1f2:	d000      	beq.n	800d1f6 <_strtod_l+0xb2e>
 800d1f4:	e4d4      	b.n	800cba0 <_strtod_l+0x4d8>
 800d1f6:	0020      	movs	r0, r4
 800d1f8:	0029      	movs	r1, r5
 800d1fa:	4a34      	ldr	r2, [pc, #208]	; (800d2cc <_strtod_l+0xc04>)
 800d1fc:	4b2a      	ldr	r3, [pc, #168]	; (800d2a8 <_strtod_l+0xbe0>)
 800d1fe:	f7f3 f93f 	bl	8000480 <__aeabi_dcmpgt>
 800d202:	2800      	cmp	r0, #0
 800d204:	d090      	beq.n	800d128 <_strtod_l+0xa60>
 800d206:	e4cb      	b.n	800cba0 <_strtod_l+0x4d8>
 800d208:	9b07      	ldr	r3, [sp, #28]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d02b      	beq.n	800d266 <_strtod_l+0xb9e>
 800d20e:	23d4      	movs	r3, #212	; 0xd4
 800d210:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d212:	04db      	lsls	r3, r3, #19
 800d214:	429a      	cmp	r2, r3
 800d216:	d826      	bhi.n	800d266 <_strtod_l+0xb9e>
 800d218:	0020      	movs	r0, r4
 800d21a:	0029      	movs	r1, r5
 800d21c:	4a2c      	ldr	r2, [pc, #176]	; (800d2d0 <_strtod_l+0xc08>)
 800d21e:	4b2d      	ldr	r3, [pc, #180]	; (800d2d4 <_strtod_l+0xc0c>)
 800d220:	f7f3 f924 	bl	800046c <__aeabi_dcmple>
 800d224:	2800      	cmp	r0, #0
 800d226:	d017      	beq.n	800d258 <_strtod_l+0xb90>
 800d228:	0020      	movs	r0, r4
 800d22a:	0029      	movs	r1, r5
 800d22c:	f7f3 f98a 	bl	8000544 <__aeabi_d2uiz>
 800d230:	2800      	cmp	r0, #0
 800d232:	d100      	bne.n	800d236 <_strtod_l+0xb6e>
 800d234:	3001      	adds	r0, #1
 800d236:	f7f5 fbe5 	bl	8002a04 <__aeabi_ui2d>
 800d23a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d23c:	0004      	movs	r4, r0
 800d23e:	000b      	movs	r3, r1
 800d240:	000d      	movs	r5, r1
 800d242:	2a00      	cmp	r2, #0
 800d244:	d122      	bne.n	800d28c <_strtod_l+0xbc4>
 800d246:	2280      	movs	r2, #128	; 0x80
 800d248:	0612      	lsls	r2, r2, #24
 800d24a:	188b      	adds	r3, r1, r2
 800d24c:	9016      	str	r0, [sp, #88]	; 0x58
 800d24e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d250:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d252:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d254:	9212      	str	r2, [sp, #72]	; 0x48
 800d256:	9313      	str	r3, [sp, #76]	; 0x4c
 800d258:	22d6      	movs	r2, #214	; 0xd6
 800d25a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d25c:	04d2      	lsls	r2, r2, #19
 800d25e:	189b      	adds	r3, r3, r2
 800d260:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d262:	1a9b      	subs	r3, r3, r2
 800d264:	9313      	str	r3, [sp, #76]	; 0x4c
 800d266:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d268:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d26a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d26c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d26e:	f7ff f8dd 	bl	800c42c <__ulp>
 800d272:	0002      	movs	r2, r0
 800d274:	000b      	movs	r3, r1
 800d276:	0030      	movs	r0, r6
 800d278:	0039      	movs	r1, r7
 800d27a:	f7f4 fcfb 	bl	8001c74 <__aeabi_dmul>
 800d27e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d280:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d282:	f7f3 fd9d 	bl	8000dc0 <__aeabi_dadd>
 800d286:	0006      	movs	r6, r0
 800d288:	000f      	movs	r7, r1
 800d28a:	e78f      	b.n	800d1ac <_strtod_l+0xae4>
 800d28c:	0002      	movs	r2, r0
 800d28e:	9216      	str	r2, [sp, #88]	; 0x58
 800d290:	9317      	str	r3, [sp, #92]	; 0x5c
 800d292:	e7dd      	b.n	800d250 <_strtod_l+0xb88>
 800d294:	4b10      	ldr	r3, [pc, #64]	; (800d2d8 <_strtod_l+0xc10>)
 800d296:	f7f3 f8df 	bl	8000458 <__aeabi_dcmplt>
 800d29a:	e7b2      	b.n	800d202 <_strtod_l+0xb3a>
 800d29c:	fff00000 	.word	0xfff00000
 800d2a0:	000fffff 	.word	0x000fffff
 800d2a4:	3ff00000 	.word	0x3ff00000
 800d2a8:	3fe00000 	.word	0x3fe00000
 800d2ac:	7ff00000 	.word	0x7ff00000
 800d2b0:	7fe00000 	.word	0x7fe00000
 800d2b4:	fcb00000 	.word	0xfcb00000
 800d2b8:	7c9fffff 	.word	0x7c9fffff
 800d2bc:	7fefffff 	.word	0x7fefffff
 800d2c0:	bff00000 	.word	0xbff00000
 800d2c4:	94a03595 	.word	0x94a03595
 800d2c8:	3fdfffff 	.word	0x3fdfffff
 800d2cc:	35afe535 	.word	0x35afe535
 800d2d0:	ffc00000 	.word	0xffc00000
 800d2d4:	41dfffff 	.word	0x41dfffff
 800d2d8:	3fcfffff 	.word	0x3fcfffff

0800d2dc <_strtod_r>:
 800d2dc:	b510      	push	{r4, lr}
 800d2de:	4b02      	ldr	r3, [pc, #8]	; (800d2e8 <_strtod_r+0xc>)
 800d2e0:	f7ff f9f2 	bl	800c6c8 <_strtod_l>
 800d2e4:	bd10      	pop	{r4, pc}
 800d2e6:	46c0      	nop			; (mov r8, r8)
 800d2e8:	20000080 	.word	0x20000080

0800d2ec <_strtol_l.constprop.0>:
 800d2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ee:	b087      	sub	sp, #28
 800d2f0:	001e      	movs	r6, r3
 800d2f2:	9005      	str	r0, [sp, #20]
 800d2f4:	9101      	str	r1, [sp, #4]
 800d2f6:	9202      	str	r2, [sp, #8]
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d048      	beq.n	800d38e <_strtol_l.constprop.0+0xa2>
 800d2fc:	000b      	movs	r3, r1
 800d2fe:	2e24      	cmp	r6, #36	; 0x24
 800d300:	d845      	bhi.n	800d38e <_strtol_l.constprop.0+0xa2>
 800d302:	4a3b      	ldr	r2, [pc, #236]	; (800d3f0 <_strtol_l.constprop.0+0x104>)
 800d304:	2108      	movs	r1, #8
 800d306:	4694      	mov	ip, r2
 800d308:	001a      	movs	r2, r3
 800d30a:	4660      	mov	r0, ip
 800d30c:	7814      	ldrb	r4, [r2, #0]
 800d30e:	3301      	adds	r3, #1
 800d310:	5d00      	ldrb	r0, [r0, r4]
 800d312:	001d      	movs	r5, r3
 800d314:	0007      	movs	r7, r0
 800d316:	400f      	ands	r7, r1
 800d318:	4208      	tst	r0, r1
 800d31a:	d1f5      	bne.n	800d308 <_strtol_l.constprop.0+0x1c>
 800d31c:	2c2d      	cmp	r4, #45	; 0x2d
 800d31e:	d13d      	bne.n	800d39c <_strtol_l.constprop.0+0xb0>
 800d320:	2701      	movs	r7, #1
 800d322:	781c      	ldrb	r4, [r3, #0]
 800d324:	1c95      	adds	r5, r2, #2
 800d326:	2e00      	cmp	r6, #0
 800d328:	d05e      	beq.n	800d3e8 <_strtol_l.constprop.0+0xfc>
 800d32a:	2e10      	cmp	r6, #16
 800d32c:	d109      	bne.n	800d342 <_strtol_l.constprop.0+0x56>
 800d32e:	2c30      	cmp	r4, #48	; 0x30
 800d330:	d107      	bne.n	800d342 <_strtol_l.constprop.0+0x56>
 800d332:	2220      	movs	r2, #32
 800d334:	782b      	ldrb	r3, [r5, #0]
 800d336:	4393      	bics	r3, r2
 800d338:	2b58      	cmp	r3, #88	; 0x58
 800d33a:	d150      	bne.n	800d3de <_strtol_l.constprop.0+0xf2>
 800d33c:	2610      	movs	r6, #16
 800d33e:	786c      	ldrb	r4, [r5, #1]
 800d340:	3502      	adds	r5, #2
 800d342:	4b2c      	ldr	r3, [pc, #176]	; (800d3f4 <_strtol_l.constprop.0+0x108>)
 800d344:	0031      	movs	r1, r6
 800d346:	18fb      	adds	r3, r7, r3
 800d348:	0018      	movs	r0, r3
 800d34a:	9303      	str	r3, [sp, #12]
 800d34c:	f7f2 ff7e 	bl	800024c <__aeabi_uidivmod>
 800d350:	2200      	movs	r2, #0
 800d352:	9104      	str	r1, [sp, #16]
 800d354:	2101      	movs	r1, #1
 800d356:	4684      	mov	ip, r0
 800d358:	0010      	movs	r0, r2
 800d35a:	4249      	negs	r1, r1
 800d35c:	0023      	movs	r3, r4
 800d35e:	3b30      	subs	r3, #48	; 0x30
 800d360:	2b09      	cmp	r3, #9
 800d362:	d903      	bls.n	800d36c <_strtol_l.constprop.0+0x80>
 800d364:	3b11      	subs	r3, #17
 800d366:	2b19      	cmp	r3, #25
 800d368:	d81d      	bhi.n	800d3a6 <_strtol_l.constprop.0+0xba>
 800d36a:	330a      	adds	r3, #10
 800d36c:	429e      	cmp	r6, r3
 800d36e:	dd1e      	ble.n	800d3ae <_strtol_l.constprop.0+0xc2>
 800d370:	1c54      	adds	r4, r2, #1
 800d372:	d009      	beq.n	800d388 <_strtol_l.constprop.0+0x9c>
 800d374:	000a      	movs	r2, r1
 800d376:	4584      	cmp	ip, r0
 800d378:	d306      	bcc.n	800d388 <_strtol_l.constprop.0+0x9c>
 800d37a:	d102      	bne.n	800d382 <_strtol_l.constprop.0+0x96>
 800d37c:	9c04      	ldr	r4, [sp, #16]
 800d37e:	429c      	cmp	r4, r3
 800d380:	db02      	blt.n	800d388 <_strtol_l.constprop.0+0x9c>
 800d382:	2201      	movs	r2, #1
 800d384:	4370      	muls	r0, r6
 800d386:	1818      	adds	r0, r3, r0
 800d388:	782c      	ldrb	r4, [r5, #0]
 800d38a:	3501      	adds	r5, #1
 800d38c:	e7e6      	b.n	800d35c <_strtol_l.constprop.0+0x70>
 800d38e:	f7fd fce5 	bl	800ad5c <__errno>
 800d392:	2316      	movs	r3, #22
 800d394:	6003      	str	r3, [r0, #0]
 800d396:	2000      	movs	r0, #0
 800d398:	b007      	add	sp, #28
 800d39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d39c:	2c2b      	cmp	r4, #43	; 0x2b
 800d39e:	d1c2      	bne.n	800d326 <_strtol_l.constprop.0+0x3a>
 800d3a0:	781c      	ldrb	r4, [r3, #0]
 800d3a2:	1c95      	adds	r5, r2, #2
 800d3a4:	e7bf      	b.n	800d326 <_strtol_l.constprop.0+0x3a>
 800d3a6:	0023      	movs	r3, r4
 800d3a8:	3b61      	subs	r3, #97	; 0x61
 800d3aa:	2b19      	cmp	r3, #25
 800d3ac:	d9dd      	bls.n	800d36a <_strtol_l.constprop.0+0x7e>
 800d3ae:	1c53      	adds	r3, r2, #1
 800d3b0:	d109      	bne.n	800d3c6 <_strtol_l.constprop.0+0xda>
 800d3b2:	2322      	movs	r3, #34	; 0x22
 800d3b4:	9a05      	ldr	r2, [sp, #20]
 800d3b6:	9803      	ldr	r0, [sp, #12]
 800d3b8:	6013      	str	r3, [r2, #0]
 800d3ba:	9b02      	ldr	r3, [sp, #8]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d0eb      	beq.n	800d398 <_strtol_l.constprop.0+0xac>
 800d3c0:	1e6b      	subs	r3, r5, #1
 800d3c2:	9301      	str	r3, [sp, #4]
 800d3c4:	e007      	b.n	800d3d6 <_strtol_l.constprop.0+0xea>
 800d3c6:	2f00      	cmp	r7, #0
 800d3c8:	d000      	beq.n	800d3cc <_strtol_l.constprop.0+0xe0>
 800d3ca:	4240      	negs	r0, r0
 800d3cc:	9b02      	ldr	r3, [sp, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d0e2      	beq.n	800d398 <_strtol_l.constprop.0+0xac>
 800d3d2:	2a00      	cmp	r2, #0
 800d3d4:	d1f4      	bne.n	800d3c0 <_strtol_l.constprop.0+0xd4>
 800d3d6:	9b02      	ldr	r3, [sp, #8]
 800d3d8:	9a01      	ldr	r2, [sp, #4]
 800d3da:	601a      	str	r2, [r3, #0]
 800d3dc:	e7dc      	b.n	800d398 <_strtol_l.constprop.0+0xac>
 800d3de:	2430      	movs	r4, #48	; 0x30
 800d3e0:	2e00      	cmp	r6, #0
 800d3e2:	d1ae      	bne.n	800d342 <_strtol_l.constprop.0+0x56>
 800d3e4:	3608      	adds	r6, #8
 800d3e6:	e7ac      	b.n	800d342 <_strtol_l.constprop.0+0x56>
 800d3e8:	2c30      	cmp	r4, #48	; 0x30
 800d3ea:	d0a2      	beq.n	800d332 <_strtol_l.constprop.0+0x46>
 800d3ec:	260a      	movs	r6, #10
 800d3ee:	e7a8      	b.n	800d342 <_strtol_l.constprop.0+0x56>
 800d3f0:	0800eee1 	.word	0x0800eee1
 800d3f4:	7fffffff 	.word	0x7fffffff

0800d3f8 <_strtol_r>:
 800d3f8:	b510      	push	{r4, lr}
 800d3fa:	f7ff ff77 	bl	800d2ec <_strtol_l.constprop.0>
 800d3fe:	bd10      	pop	{r4, pc}

0800d400 <__ssputs_r>:
 800d400:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d402:	b085      	sub	sp, #20
 800d404:	9301      	str	r3, [sp, #4]
 800d406:	9203      	str	r2, [sp, #12]
 800d408:	688e      	ldr	r6, [r1, #8]
 800d40a:	9a01      	ldr	r2, [sp, #4]
 800d40c:	0007      	movs	r7, r0
 800d40e:	000c      	movs	r4, r1
 800d410:	680b      	ldr	r3, [r1, #0]
 800d412:	4296      	cmp	r6, r2
 800d414:	d831      	bhi.n	800d47a <__ssputs_r+0x7a>
 800d416:	898a      	ldrh	r2, [r1, #12]
 800d418:	2190      	movs	r1, #144	; 0x90
 800d41a:	00c9      	lsls	r1, r1, #3
 800d41c:	420a      	tst	r2, r1
 800d41e:	d029      	beq.n	800d474 <__ssputs_r+0x74>
 800d420:	2003      	movs	r0, #3
 800d422:	6921      	ldr	r1, [r4, #16]
 800d424:	1a5b      	subs	r3, r3, r1
 800d426:	9302      	str	r3, [sp, #8]
 800d428:	6963      	ldr	r3, [r4, #20]
 800d42a:	4343      	muls	r3, r0
 800d42c:	0fdd      	lsrs	r5, r3, #31
 800d42e:	18ed      	adds	r5, r5, r3
 800d430:	9b01      	ldr	r3, [sp, #4]
 800d432:	9802      	ldr	r0, [sp, #8]
 800d434:	3301      	adds	r3, #1
 800d436:	181b      	adds	r3, r3, r0
 800d438:	106d      	asrs	r5, r5, #1
 800d43a:	42ab      	cmp	r3, r5
 800d43c:	d900      	bls.n	800d440 <__ssputs_r+0x40>
 800d43e:	001d      	movs	r5, r3
 800d440:	0552      	lsls	r2, r2, #21
 800d442:	d529      	bpl.n	800d498 <__ssputs_r+0x98>
 800d444:	0029      	movs	r1, r5
 800d446:	0038      	movs	r0, r7
 800d448:	f7fe fbd8 	bl	800bbfc <_malloc_r>
 800d44c:	1e06      	subs	r6, r0, #0
 800d44e:	d02d      	beq.n	800d4ac <__ssputs_r+0xac>
 800d450:	9a02      	ldr	r2, [sp, #8]
 800d452:	6921      	ldr	r1, [r4, #16]
 800d454:	f000 fa22 	bl	800d89c <memcpy>
 800d458:	89a2      	ldrh	r2, [r4, #12]
 800d45a:	4b19      	ldr	r3, [pc, #100]	; (800d4c0 <__ssputs_r+0xc0>)
 800d45c:	401a      	ands	r2, r3
 800d45e:	2380      	movs	r3, #128	; 0x80
 800d460:	4313      	orrs	r3, r2
 800d462:	81a3      	strh	r3, [r4, #12]
 800d464:	9b02      	ldr	r3, [sp, #8]
 800d466:	6126      	str	r6, [r4, #16]
 800d468:	18f6      	adds	r6, r6, r3
 800d46a:	6026      	str	r6, [r4, #0]
 800d46c:	6165      	str	r5, [r4, #20]
 800d46e:	9e01      	ldr	r6, [sp, #4]
 800d470:	1aed      	subs	r5, r5, r3
 800d472:	60a5      	str	r5, [r4, #8]
 800d474:	9b01      	ldr	r3, [sp, #4]
 800d476:	429e      	cmp	r6, r3
 800d478:	d900      	bls.n	800d47c <__ssputs_r+0x7c>
 800d47a:	9e01      	ldr	r6, [sp, #4]
 800d47c:	0032      	movs	r2, r6
 800d47e:	9903      	ldr	r1, [sp, #12]
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	f000 f9d4 	bl	800d82e <memmove>
 800d486:	2000      	movs	r0, #0
 800d488:	68a3      	ldr	r3, [r4, #8]
 800d48a:	1b9b      	subs	r3, r3, r6
 800d48c:	60a3      	str	r3, [r4, #8]
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	199b      	adds	r3, r3, r6
 800d492:	6023      	str	r3, [r4, #0]
 800d494:	b005      	add	sp, #20
 800d496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d498:	002a      	movs	r2, r5
 800d49a:	0038      	movs	r0, r7
 800d49c:	f000 fdc8 	bl	800e030 <_realloc_r>
 800d4a0:	1e06      	subs	r6, r0, #0
 800d4a2:	d1df      	bne.n	800d464 <__ssputs_r+0x64>
 800d4a4:	0038      	movs	r0, r7
 800d4a6:	6921      	ldr	r1, [r4, #16]
 800d4a8:	f7fe fb32 	bl	800bb10 <_free_r>
 800d4ac:	230c      	movs	r3, #12
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	603b      	str	r3, [r7, #0]
 800d4b2:	89a2      	ldrh	r2, [r4, #12]
 800d4b4:	3334      	adds	r3, #52	; 0x34
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	81a3      	strh	r3, [r4, #12]
 800d4ba:	4240      	negs	r0, r0
 800d4bc:	e7ea      	b.n	800d494 <__ssputs_r+0x94>
 800d4be:	46c0      	nop			; (mov r8, r8)
 800d4c0:	fffffb7f 	.word	0xfffffb7f

0800d4c4 <_svfiprintf_r>:
 800d4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4c6:	b0a1      	sub	sp, #132	; 0x84
 800d4c8:	9003      	str	r0, [sp, #12]
 800d4ca:	001d      	movs	r5, r3
 800d4cc:	898b      	ldrh	r3, [r1, #12]
 800d4ce:	000f      	movs	r7, r1
 800d4d0:	0016      	movs	r6, r2
 800d4d2:	061b      	lsls	r3, r3, #24
 800d4d4:	d511      	bpl.n	800d4fa <_svfiprintf_r+0x36>
 800d4d6:	690b      	ldr	r3, [r1, #16]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d10e      	bne.n	800d4fa <_svfiprintf_r+0x36>
 800d4dc:	2140      	movs	r1, #64	; 0x40
 800d4de:	f7fe fb8d 	bl	800bbfc <_malloc_r>
 800d4e2:	6038      	str	r0, [r7, #0]
 800d4e4:	6138      	str	r0, [r7, #16]
 800d4e6:	2800      	cmp	r0, #0
 800d4e8:	d105      	bne.n	800d4f6 <_svfiprintf_r+0x32>
 800d4ea:	230c      	movs	r3, #12
 800d4ec:	9a03      	ldr	r2, [sp, #12]
 800d4ee:	3801      	subs	r0, #1
 800d4f0:	6013      	str	r3, [r2, #0]
 800d4f2:	b021      	add	sp, #132	; 0x84
 800d4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4f6:	2340      	movs	r3, #64	; 0x40
 800d4f8:	617b      	str	r3, [r7, #20]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	ac08      	add	r4, sp, #32
 800d4fe:	6163      	str	r3, [r4, #20]
 800d500:	3320      	adds	r3, #32
 800d502:	7663      	strb	r3, [r4, #25]
 800d504:	3310      	adds	r3, #16
 800d506:	76a3      	strb	r3, [r4, #26]
 800d508:	9507      	str	r5, [sp, #28]
 800d50a:	0035      	movs	r5, r6
 800d50c:	782b      	ldrb	r3, [r5, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d001      	beq.n	800d516 <_svfiprintf_r+0x52>
 800d512:	2b25      	cmp	r3, #37	; 0x25
 800d514:	d148      	bne.n	800d5a8 <_svfiprintf_r+0xe4>
 800d516:	1bab      	subs	r3, r5, r6
 800d518:	9305      	str	r3, [sp, #20]
 800d51a:	42b5      	cmp	r5, r6
 800d51c:	d00b      	beq.n	800d536 <_svfiprintf_r+0x72>
 800d51e:	0032      	movs	r2, r6
 800d520:	0039      	movs	r1, r7
 800d522:	9803      	ldr	r0, [sp, #12]
 800d524:	f7ff ff6c 	bl	800d400 <__ssputs_r>
 800d528:	3001      	adds	r0, #1
 800d52a:	d100      	bne.n	800d52e <_svfiprintf_r+0x6a>
 800d52c:	e0af      	b.n	800d68e <_svfiprintf_r+0x1ca>
 800d52e:	6963      	ldr	r3, [r4, #20]
 800d530:	9a05      	ldr	r2, [sp, #20]
 800d532:	189b      	adds	r3, r3, r2
 800d534:	6163      	str	r3, [r4, #20]
 800d536:	782b      	ldrb	r3, [r5, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d100      	bne.n	800d53e <_svfiprintf_r+0x7a>
 800d53c:	e0a7      	b.n	800d68e <_svfiprintf_r+0x1ca>
 800d53e:	2201      	movs	r2, #1
 800d540:	2300      	movs	r3, #0
 800d542:	4252      	negs	r2, r2
 800d544:	6062      	str	r2, [r4, #4]
 800d546:	a904      	add	r1, sp, #16
 800d548:	3254      	adds	r2, #84	; 0x54
 800d54a:	1852      	adds	r2, r2, r1
 800d54c:	1c6e      	adds	r6, r5, #1
 800d54e:	6023      	str	r3, [r4, #0]
 800d550:	60e3      	str	r3, [r4, #12]
 800d552:	60a3      	str	r3, [r4, #8]
 800d554:	7013      	strb	r3, [r2, #0]
 800d556:	65a3      	str	r3, [r4, #88]	; 0x58
 800d558:	4b55      	ldr	r3, [pc, #340]	; (800d6b0 <_svfiprintf_r+0x1ec>)
 800d55a:	2205      	movs	r2, #5
 800d55c:	0018      	movs	r0, r3
 800d55e:	7831      	ldrb	r1, [r6, #0]
 800d560:	9305      	str	r3, [sp, #20]
 800d562:	f7fd fc28 	bl	800adb6 <memchr>
 800d566:	1c75      	adds	r5, r6, #1
 800d568:	2800      	cmp	r0, #0
 800d56a:	d11f      	bne.n	800d5ac <_svfiprintf_r+0xe8>
 800d56c:	6822      	ldr	r2, [r4, #0]
 800d56e:	06d3      	lsls	r3, r2, #27
 800d570:	d504      	bpl.n	800d57c <_svfiprintf_r+0xb8>
 800d572:	2353      	movs	r3, #83	; 0x53
 800d574:	a904      	add	r1, sp, #16
 800d576:	185b      	adds	r3, r3, r1
 800d578:	2120      	movs	r1, #32
 800d57a:	7019      	strb	r1, [r3, #0]
 800d57c:	0713      	lsls	r3, r2, #28
 800d57e:	d504      	bpl.n	800d58a <_svfiprintf_r+0xc6>
 800d580:	2353      	movs	r3, #83	; 0x53
 800d582:	a904      	add	r1, sp, #16
 800d584:	185b      	adds	r3, r3, r1
 800d586:	212b      	movs	r1, #43	; 0x2b
 800d588:	7019      	strb	r1, [r3, #0]
 800d58a:	7833      	ldrb	r3, [r6, #0]
 800d58c:	2b2a      	cmp	r3, #42	; 0x2a
 800d58e:	d016      	beq.n	800d5be <_svfiprintf_r+0xfa>
 800d590:	0035      	movs	r5, r6
 800d592:	2100      	movs	r1, #0
 800d594:	200a      	movs	r0, #10
 800d596:	68e3      	ldr	r3, [r4, #12]
 800d598:	782a      	ldrb	r2, [r5, #0]
 800d59a:	1c6e      	adds	r6, r5, #1
 800d59c:	3a30      	subs	r2, #48	; 0x30
 800d59e:	2a09      	cmp	r2, #9
 800d5a0:	d94e      	bls.n	800d640 <_svfiprintf_r+0x17c>
 800d5a2:	2900      	cmp	r1, #0
 800d5a4:	d111      	bne.n	800d5ca <_svfiprintf_r+0x106>
 800d5a6:	e017      	b.n	800d5d8 <_svfiprintf_r+0x114>
 800d5a8:	3501      	adds	r5, #1
 800d5aa:	e7af      	b.n	800d50c <_svfiprintf_r+0x48>
 800d5ac:	9b05      	ldr	r3, [sp, #20]
 800d5ae:	6822      	ldr	r2, [r4, #0]
 800d5b0:	1ac0      	subs	r0, r0, r3
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	4083      	lsls	r3, r0
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	002e      	movs	r6, r5
 800d5ba:	6023      	str	r3, [r4, #0]
 800d5bc:	e7cc      	b.n	800d558 <_svfiprintf_r+0x94>
 800d5be:	9b07      	ldr	r3, [sp, #28]
 800d5c0:	1d19      	adds	r1, r3, #4
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	9107      	str	r1, [sp, #28]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	db01      	blt.n	800d5ce <_svfiprintf_r+0x10a>
 800d5ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5cc:	e004      	b.n	800d5d8 <_svfiprintf_r+0x114>
 800d5ce:	425b      	negs	r3, r3
 800d5d0:	60e3      	str	r3, [r4, #12]
 800d5d2:	2302      	movs	r3, #2
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	782b      	ldrb	r3, [r5, #0]
 800d5da:	2b2e      	cmp	r3, #46	; 0x2e
 800d5dc:	d10a      	bne.n	800d5f4 <_svfiprintf_r+0x130>
 800d5de:	786b      	ldrb	r3, [r5, #1]
 800d5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800d5e2:	d135      	bne.n	800d650 <_svfiprintf_r+0x18c>
 800d5e4:	9b07      	ldr	r3, [sp, #28]
 800d5e6:	3502      	adds	r5, #2
 800d5e8:	1d1a      	adds	r2, r3, #4
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	9207      	str	r2, [sp, #28]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	db2b      	blt.n	800d64a <_svfiprintf_r+0x186>
 800d5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5f4:	4e2f      	ldr	r6, [pc, #188]	; (800d6b4 <_svfiprintf_r+0x1f0>)
 800d5f6:	2203      	movs	r2, #3
 800d5f8:	0030      	movs	r0, r6
 800d5fa:	7829      	ldrb	r1, [r5, #0]
 800d5fc:	f7fd fbdb 	bl	800adb6 <memchr>
 800d600:	2800      	cmp	r0, #0
 800d602:	d006      	beq.n	800d612 <_svfiprintf_r+0x14e>
 800d604:	2340      	movs	r3, #64	; 0x40
 800d606:	1b80      	subs	r0, r0, r6
 800d608:	4083      	lsls	r3, r0
 800d60a:	6822      	ldr	r2, [r4, #0]
 800d60c:	3501      	adds	r5, #1
 800d60e:	4313      	orrs	r3, r2
 800d610:	6023      	str	r3, [r4, #0]
 800d612:	7829      	ldrb	r1, [r5, #0]
 800d614:	2206      	movs	r2, #6
 800d616:	4828      	ldr	r0, [pc, #160]	; (800d6b8 <_svfiprintf_r+0x1f4>)
 800d618:	1c6e      	adds	r6, r5, #1
 800d61a:	7621      	strb	r1, [r4, #24]
 800d61c:	f7fd fbcb 	bl	800adb6 <memchr>
 800d620:	2800      	cmp	r0, #0
 800d622:	d03c      	beq.n	800d69e <_svfiprintf_r+0x1da>
 800d624:	4b25      	ldr	r3, [pc, #148]	; (800d6bc <_svfiprintf_r+0x1f8>)
 800d626:	2b00      	cmp	r3, #0
 800d628:	d125      	bne.n	800d676 <_svfiprintf_r+0x1b2>
 800d62a:	2207      	movs	r2, #7
 800d62c:	9b07      	ldr	r3, [sp, #28]
 800d62e:	3307      	adds	r3, #7
 800d630:	4393      	bics	r3, r2
 800d632:	3308      	adds	r3, #8
 800d634:	9307      	str	r3, [sp, #28]
 800d636:	6963      	ldr	r3, [r4, #20]
 800d638:	9a04      	ldr	r2, [sp, #16]
 800d63a:	189b      	adds	r3, r3, r2
 800d63c:	6163      	str	r3, [r4, #20]
 800d63e:	e764      	b.n	800d50a <_svfiprintf_r+0x46>
 800d640:	4343      	muls	r3, r0
 800d642:	0035      	movs	r5, r6
 800d644:	2101      	movs	r1, #1
 800d646:	189b      	adds	r3, r3, r2
 800d648:	e7a6      	b.n	800d598 <_svfiprintf_r+0xd4>
 800d64a:	2301      	movs	r3, #1
 800d64c:	425b      	negs	r3, r3
 800d64e:	e7d0      	b.n	800d5f2 <_svfiprintf_r+0x12e>
 800d650:	2300      	movs	r3, #0
 800d652:	200a      	movs	r0, #10
 800d654:	001a      	movs	r2, r3
 800d656:	3501      	adds	r5, #1
 800d658:	6063      	str	r3, [r4, #4]
 800d65a:	7829      	ldrb	r1, [r5, #0]
 800d65c:	1c6e      	adds	r6, r5, #1
 800d65e:	3930      	subs	r1, #48	; 0x30
 800d660:	2909      	cmp	r1, #9
 800d662:	d903      	bls.n	800d66c <_svfiprintf_r+0x1a8>
 800d664:	2b00      	cmp	r3, #0
 800d666:	d0c5      	beq.n	800d5f4 <_svfiprintf_r+0x130>
 800d668:	9209      	str	r2, [sp, #36]	; 0x24
 800d66a:	e7c3      	b.n	800d5f4 <_svfiprintf_r+0x130>
 800d66c:	4342      	muls	r2, r0
 800d66e:	0035      	movs	r5, r6
 800d670:	2301      	movs	r3, #1
 800d672:	1852      	adds	r2, r2, r1
 800d674:	e7f1      	b.n	800d65a <_svfiprintf_r+0x196>
 800d676:	aa07      	add	r2, sp, #28
 800d678:	9200      	str	r2, [sp, #0]
 800d67a:	0021      	movs	r1, r4
 800d67c:	003a      	movs	r2, r7
 800d67e:	4b10      	ldr	r3, [pc, #64]	; (800d6c0 <_svfiprintf_r+0x1fc>)
 800d680:	9803      	ldr	r0, [sp, #12]
 800d682:	f7fc fbcf 	bl	8009e24 <_printf_float>
 800d686:	9004      	str	r0, [sp, #16]
 800d688:	9b04      	ldr	r3, [sp, #16]
 800d68a:	3301      	adds	r3, #1
 800d68c:	d1d3      	bne.n	800d636 <_svfiprintf_r+0x172>
 800d68e:	89bb      	ldrh	r3, [r7, #12]
 800d690:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d692:	065b      	lsls	r3, r3, #25
 800d694:	d400      	bmi.n	800d698 <_svfiprintf_r+0x1d4>
 800d696:	e72c      	b.n	800d4f2 <_svfiprintf_r+0x2e>
 800d698:	2001      	movs	r0, #1
 800d69a:	4240      	negs	r0, r0
 800d69c:	e729      	b.n	800d4f2 <_svfiprintf_r+0x2e>
 800d69e:	aa07      	add	r2, sp, #28
 800d6a0:	9200      	str	r2, [sp, #0]
 800d6a2:	0021      	movs	r1, r4
 800d6a4:	003a      	movs	r2, r7
 800d6a6:	4b06      	ldr	r3, [pc, #24]	; (800d6c0 <_svfiprintf_r+0x1fc>)
 800d6a8:	9803      	ldr	r0, [sp, #12]
 800d6aa:	f7fc fe81 	bl	800a3b0 <_printf_i>
 800d6ae:	e7ea      	b.n	800d686 <_svfiprintf_r+0x1c2>
 800d6b0:	0800efe1 	.word	0x0800efe1
 800d6b4:	0800efe7 	.word	0x0800efe7
 800d6b8:	0800efeb 	.word	0x0800efeb
 800d6bc:	08009e25 	.word	0x08009e25
 800d6c0:	0800d401 	.word	0x0800d401

0800d6c4 <__sflush_r>:
 800d6c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6c6:	898b      	ldrh	r3, [r1, #12]
 800d6c8:	0005      	movs	r5, r0
 800d6ca:	000c      	movs	r4, r1
 800d6cc:	071a      	lsls	r2, r3, #28
 800d6ce:	d45c      	bmi.n	800d78a <__sflush_r+0xc6>
 800d6d0:	684a      	ldr	r2, [r1, #4]
 800d6d2:	2a00      	cmp	r2, #0
 800d6d4:	dc04      	bgt.n	800d6e0 <__sflush_r+0x1c>
 800d6d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d6d8:	2a00      	cmp	r2, #0
 800d6da:	dc01      	bgt.n	800d6e0 <__sflush_r+0x1c>
 800d6dc:	2000      	movs	r0, #0
 800d6de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d6e2:	2f00      	cmp	r7, #0
 800d6e4:	d0fa      	beq.n	800d6dc <__sflush_r+0x18>
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	2080      	movs	r0, #128	; 0x80
 800d6ea:	682e      	ldr	r6, [r5, #0]
 800d6ec:	602a      	str	r2, [r5, #0]
 800d6ee:	001a      	movs	r2, r3
 800d6f0:	0140      	lsls	r0, r0, #5
 800d6f2:	6a21      	ldr	r1, [r4, #32]
 800d6f4:	4002      	ands	r2, r0
 800d6f6:	4203      	tst	r3, r0
 800d6f8:	d034      	beq.n	800d764 <__sflush_r+0xa0>
 800d6fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6fc:	89a3      	ldrh	r3, [r4, #12]
 800d6fe:	075b      	lsls	r3, r3, #29
 800d700:	d506      	bpl.n	800d710 <__sflush_r+0x4c>
 800d702:	6863      	ldr	r3, [r4, #4]
 800d704:	1ac0      	subs	r0, r0, r3
 800d706:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <__sflush_r+0x4c>
 800d70c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d70e:	1ac0      	subs	r0, r0, r3
 800d710:	0002      	movs	r2, r0
 800d712:	2300      	movs	r3, #0
 800d714:	0028      	movs	r0, r5
 800d716:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d718:	6a21      	ldr	r1, [r4, #32]
 800d71a:	47b8      	blx	r7
 800d71c:	89a2      	ldrh	r2, [r4, #12]
 800d71e:	1c43      	adds	r3, r0, #1
 800d720:	d106      	bne.n	800d730 <__sflush_r+0x6c>
 800d722:	6829      	ldr	r1, [r5, #0]
 800d724:	291d      	cmp	r1, #29
 800d726:	d82c      	bhi.n	800d782 <__sflush_r+0xbe>
 800d728:	4b2a      	ldr	r3, [pc, #168]	; (800d7d4 <__sflush_r+0x110>)
 800d72a:	410b      	asrs	r3, r1
 800d72c:	07db      	lsls	r3, r3, #31
 800d72e:	d428      	bmi.n	800d782 <__sflush_r+0xbe>
 800d730:	2300      	movs	r3, #0
 800d732:	6063      	str	r3, [r4, #4]
 800d734:	6923      	ldr	r3, [r4, #16]
 800d736:	6023      	str	r3, [r4, #0]
 800d738:	04d2      	lsls	r2, r2, #19
 800d73a:	d505      	bpl.n	800d748 <__sflush_r+0x84>
 800d73c:	1c43      	adds	r3, r0, #1
 800d73e:	d102      	bne.n	800d746 <__sflush_r+0x82>
 800d740:	682b      	ldr	r3, [r5, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d100      	bne.n	800d748 <__sflush_r+0x84>
 800d746:	6560      	str	r0, [r4, #84]	; 0x54
 800d748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d74a:	602e      	str	r6, [r5, #0]
 800d74c:	2900      	cmp	r1, #0
 800d74e:	d0c5      	beq.n	800d6dc <__sflush_r+0x18>
 800d750:	0023      	movs	r3, r4
 800d752:	3344      	adds	r3, #68	; 0x44
 800d754:	4299      	cmp	r1, r3
 800d756:	d002      	beq.n	800d75e <__sflush_r+0x9a>
 800d758:	0028      	movs	r0, r5
 800d75a:	f7fe f9d9 	bl	800bb10 <_free_r>
 800d75e:	2000      	movs	r0, #0
 800d760:	6360      	str	r0, [r4, #52]	; 0x34
 800d762:	e7bc      	b.n	800d6de <__sflush_r+0x1a>
 800d764:	2301      	movs	r3, #1
 800d766:	0028      	movs	r0, r5
 800d768:	47b8      	blx	r7
 800d76a:	1c43      	adds	r3, r0, #1
 800d76c:	d1c6      	bne.n	800d6fc <__sflush_r+0x38>
 800d76e:	682b      	ldr	r3, [r5, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d0c3      	beq.n	800d6fc <__sflush_r+0x38>
 800d774:	2b1d      	cmp	r3, #29
 800d776:	d001      	beq.n	800d77c <__sflush_r+0xb8>
 800d778:	2b16      	cmp	r3, #22
 800d77a:	d101      	bne.n	800d780 <__sflush_r+0xbc>
 800d77c:	602e      	str	r6, [r5, #0]
 800d77e:	e7ad      	b.n	800d6dc <__sflush_r+0x18>
 800d780:	89a2      	ldrh	r2, [r4, #12]
 800d782:	2340      	movs	r3, #64	; 0x40
 800d784:	4313      	orrs	r3, r2
 800d786:	81a3      	strh	r3, [r4, #12]
 800d788:	e7a9      	b.n	800d6de <__sflush_r+0x1a>
 800d78a:	690e      	ldr	r6, [r1, #16]
 800d78c:	2e00      	cmp	r6, #0
 800d78e:	d0a5      	beq.n	800d6dc <__sflush_r+0x18>
 800d790:	680f      	ldr	r7, [r1, #0]
 800d792:	600e      	str	r6, [r1, #0]
 800d794:	1bba      	subs	r2, r7, r6
 800d796:	9201      	str	r2, [sp, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	079b      	lsls	r3, r3, #30
 800d79c:	d100      	bne.n	800d7a0 <__sflush_r+0xdc>
 800d79e:	694a      	ldr	r2, [r1, #20]
 800d7a0:	60a2      	str	r2, [r4, #8]
 800d7a2:	9b01      	ldr	r3, [sp, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	dd99      	ble.n	800d6dc <__sflush_r+0x18>
 800d7a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d7aa:	0032      	movs	r2, r6
 800d7ac:	001f      	movs	r7, r3
 800d7ae:	0028      	movs	r0, r5
 800d7b0:	9b01      	ldr	r3, [sp, #4]
 800d7b2:	6a21      	ldr	r1, [r4, #32]
 800d7b4:	47b8      	blx	r7
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	dc06      	bgt.n	800d7c8 <__sflush_r+0x104>
 800d7ba:	2340      	movs	r3, #64	; 0x40
 800d7bc:	2001      	movs	r0, #1
 800d7be:	89a2      	ldrh	r2, [r4, #12]
 800d7c0:	4240      	negs	r0, r0
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	81a3      	strh	r3, [r4, #12]
 800d7c6:	e78a      	b.n	800d6de <__sflush_r+0x1a>
 800d7c8:	9b01      	ldr	r3, [sp, #4]
 800d7ca:	1836      	adds	r6, r6, r0
 800d7cc:	1a1b      	subs	r3, r3, r0
 800d7ce:	9301      	str	r3, [sp, #4]
 800d7d0:	e7e7      	b.n	800d7a2 <__sflush_r+0xde>
 800d7d2:	46c0      	nop			; (mov r8, r8)
 800d7d4:	dfbffffe 	.word	0xdfbffffe

0800d7d8 <_fflush_r>:
 800d7d8:	690b      	ldr	r3, [r1, #16]
 800d7da:	b570      	push	{r4, r5, r6, lr}
 800d7dc:	0005      	movs	r5, r0
 800d7de:	000c      	movs	r4, r1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d102      	bne.n	800d7ea <_fflush_r+0x12>
 800d7e4:	2500      	movs	r5, #0
 800d7e6:	0028      	movs	r0, r5
 800d7e8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d004      	beq.n	800d7f8 <_fflush_r+0x20>
 800d7ee:	6a03      	ldr	r3, [r0, #32]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d101      	bne.n	800d7f8 <_fflush_r+0x20>
 800d7f4:	f7fd f984 	bl	800ab00 <__sinit>
 800d7f8:	220c      	movs	r2, #12
 800d7fa:	5ea3      	ldrsh	r3, [r4, r2]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d0f1      	beq.n	800d7e4 <_fflush_r+0xc>
 800d800:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d802:	07d2      	lsls	r2, r2, #31
 800d804:	d404      	bmi.n	800d810 <_fflush_r+0x38>
 800d806:	059b      	lsls	r3, r3, #22
 800d808:	d402      	bmi.n	800d810 <_fflush_r+0x38>
 800d80a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d80c:	f7fd fad1 	bl	800adb2 <__retarget_lock_acquire_recursive>
 800d810:	0028      	movs	r0, r5
 800d812:	0021      	movs	r1, r4
 800d814:	f7ff ff56 	bl	800d6c4 <__sflush_r>
 800d818:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d81a:	0005      	movs	r5, r0
 800d81c:	07db      	lsls	r3, r3, #31
 800d81e:	d4e2      	bmi.n	800d7e6 <_fflush_r+0xe>
 800d820:	89a3      	ldrh	r3, [r4, #12]
 800d822:	059b      	lsls	r3, r3, #22
 800d824:	d4df      	bmi.n	800d7e6 <_fflush_r+0xe>
 800d826:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d828:	f7fd fac4 	bl	800adb4 <__retarget_lock_release_recursive>
 800d82c:	e7db      	b.n	800d7e6 <_fflush_r+0xe>

0800d82e <memmove>:
 800d82e:	b510      	push	{r4, lr}
 800d830:	4288      	cmp	r0, r1
 800d832:	d902      	bls.n	800d83a <memmove+0xc>
 800d834:	188b      	adds	r3, r1, r2
 800d836:	4298      	cmp	r0, r3
 800d838:	d303      	bcc.n	800d842 <memmove+0x14>
 800d83a:	2300      	movs	r3, #0
 800d83c:	e007      	b.n	800d84e <memmove+0x20>
 800d83e:	5c8b      	ldrb	r3, [r1, r2]
 800d840:	5483      	strb	r3, [r0, r2]
 800d842:	3a01      	subs	r2, #1
 800d844:	d2fb      	bcs.n	800d83e <memmove+0x10>
 800d846:	bd10      	pop	{r4, pc}
 800d848:	5ccc      	ldrb	r4, [r1, r3]
 800d84a:	54c4      	strb	r4, [r0, r3]
 800d84c:	3301      	adds	r3, #1
 800d84e:	429a      	cmp	r2, r3
 800d850:	d1fa      	bne.n	800d848 <memmove+0x1a>
 800d852:	e7f8      	b.n	800d846 <memmove+0x18>

0800d854 <strncmp>:
 800d854:	b530      	push	{r4, r5, lr}
 800d856:	0005      	movs	r5, r0
 800d858:	1e10      	subs	r0, r2, #0
 800d85a:	d00b      	beq.n	800d874 <strncmp+0x20>
 800d85c:	2400      	movs	r4, #0
 800d85e:	3a01      	subs	r2, #1
 800d860:	5d2b      	ldrb	r3, [r5, r4]
 800d862:	5d08      	ldrb	r0, [r1, r4]
 800d864:	4283      	cmp	r3, r0
 800d866:	d104      	bne.n	800d872 <strncmp+0x1e>
 800d868:	42a2      	cmp	r2, r4
 800d86a:	d002      	beq.n	800d872 <strncmp+0x1e>
 800d86c:	3401      	adds	r4, #1
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1f6      	bne.n	800d860 <strncmp+0xc>
 800d872:	1a18      	subs	r0, r3, r0
 800d874:	bd30      	pop	{r4, r5, pc}
	...

0800d878 <_sbrk_r>:
 800d878:	2300      	movs	r3, #0
 800d87a:	b570      	push	{r4, r5, r6, lr}
 800d87c:	4d06      	ldr	r5, [pc, #24]	; (800d898 <_sbrk_r+0x20>)
 800d87e:	0004      	movs	r4, r0
 800d880:	0008      	movs	r0, r1
 800d882:	602b      	str	r3, [r5, #0]
 800d884:	f7f6 fdc8 	bl	8004418 <_sbrk>
 800d888:	1c43      	adds	r3, r0, #1
 800d88a:	d103      	bne.n	800d894 <_sbrk_r+0x1c>
 800d88c:	682b      	ldr	r3, [r5, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d000      	beq.n	800d894 <_sbrk_r+0x1c>
 800d892:	6023      	str	r3, [r4, #0]
 800d894:	bd70      	pop	{r4, r5, r6, pc}
 800d896:	46c0      	nop			; (mov r8, r8)
 800d898:	20000660 	.word	0x20000660

0800d89c <memcpy>:
 800d89c:	2300      	movs	r3, #0
 800d89e:	b510      	push	{r4, lr}
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d100      	bne.n	800d8a6 <memcpy+0xa>
 800d8a4:	bd10      	pop	{r4, pc}
 800d8a6:	5ccc      	ldrb	r4, [r1, r3]
 800d8a8:	54c4      	strb	r4, [r0, r3]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	e7f8      	b.n	800d8a0 <memcpy+0x4>
	...

0800d8b0 <nan>:
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	4901      	ldr	r1, [pc, #4]	; (800d8b8 <nan+0x8>)
 800d8b4:	4770      	bx	lr
 800d8b6:	46c0      	nop			; (mov r8, r8)
 800d8b8:	7ff80000 	.word	0x7ff80000

0800d8bc <__assert_func>:
 800d8bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d8be:	0014      	movs	r4, r2
 800d8c0:	001a      	movs	r2, r3
 800d8c2:	4b09      	ldr	r3, [pc, #36]	; (800d8e8 <__assert_func+0x2c>)
 800d8c4:	0005      	movs	r5, r0
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	000e      	movs	r6, r1
 800d8ca:	68d8      	ldr	r0, [r3, #12]
 800d8cc:	4b07      	ldr	r3, [pc, #28]	; (800d8ec <__assert_func+0x30>)
 800d8ce:	2c00      	cmp	r4, #0
 800d8d0:	d101      	bne.n	800d8d6 <__assert_func+0x1a>
 800d8d2:	4b07      	ldr	r3, [pc, #28]	; (800d8f0 <__assert_func+0x34>)
 800d8d4:	001c      	movs	r4, r3
 800d8d6:	4907      	ldr	r1, [pc, #28]	; (800d8f4 <__assert_func+0x38>)
 800d8d8:	9301      	str	r3, [sp, #4]
 800d8da:	9402      	str	r4, [sp, #8]
 800d8dc:	002b      	movs	r3, r5
 800d8de:	9600      	str	r6, [sp, #0]
 800d8e0:	f000 fbe2 	bl	800e0a8 <fiprintf>
 800d8e4:	f000 fbf0 	bl	800e0c8 <abort>
 800d8e8:	2000007c 	.word	0x2000007c
 800d8ec:	0800effa 	.word	0x0800effa
 800d8f0:	0800f035 	.word	0x0800f035
 800d8f4:	0800f007 	.word	0x0800f007

0800d8f8 <_calloc_r>:
 800d8f8:	b570      	push	{r4, r5, r6, lr}
 800d8fa:	0c0b      	lsrs	r3, r1, #16
 800d8fc:	0c15      	lsrs	r5, r2, #16
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d11e      	bne.n	800d940 <_calloc_r+0x48>
 800d902:	2d00      	cmp	r5, #0
 800d904:	d10c      	bne.n	800d920 <_calloc_r+0x28>
 800d906:	b289      	uxth	r1, r1
 800d908:	b294      	uxth	r4, r2
 800d90a:	434c      	muls	r4, r1
 800d90c:	0021      	movs	r1, r4
 800d90e:	f7fe f975 	bl	800bbfc <_malloc_r>
 800d912:	1e05      	subs	r5, r0, #0
 800d914:	d01b      	beq.n	800d94e <_calloc_r+0x56>
 800d916:	0022      	movs	r2, r4
 800d918:	2100      	movs	r1, #0
 800d91a:	f7fd f9c5 	bl	800aca8 <memset>
 800d91e:	e016      	b.n	800d94e <_calloc_r+0x56>
 800d920:	1c2b      	adds	r3, r5, #0
 800d922:	1c0c      	adds	r4, r1, #0
 800d924:	b289      	uxth	r1, r1
 800d926:	b292      	uxth	r2, r2
 800d928:	434a      	muls	r2, r1
 800d92a:	b2a1      	uxth	r1, r4
 800d92c:	b29c      	uxth	r4, r3
 800d92e:	434c      	muls	r4, r1
 800d930:	0c13      	lsrs	r3, r2, #16
 800d932:	18e4      	adds	r4, r4, r3
 800d934:	0c23      	lsrs	r3, r4, #16
 800d936:	d107      	bne.n	800d948 <_calloc_r+0x50>
 800d938:	0424      	lsls	r4, r4, #16
 800d93a:	b292      	uxth	r2, r2
 800d93c:	4314      	orrs	r4, r2
 800d93e:	e7e5      	b.n	800d90c <_calloc_r+0x14>
 800d940:	2d00      	cmp	r5, #0
 800d942:	d101      	bne.n	800d948 <_calloc_r+0x50>
 800d944:	1c14      	adds	r4, r2, #0
 800d946:	e7ed      	b.n	800d924 <_calloc_r+0x2c>
 800d948:	230c      	movs	r3, #12
 800d94a:	2500      	movs	r5, #0
 800d94c:	6003      	str	r3, [r0, #0]
 800d94e:	0028      	movs	r0, r5
 800d950:	bd70      	pop	{r4, r5, r6, pc}

0800d952 <rshift>:
 800d952:	0002      	movs	r2, r0
 800d954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d956:	6904      	ldr	r4, [r0, #16]
 800d958:	114b      	asrs	r3, r1, #5
 800d95a:	b085      	sub	sp, #20
 800d95c:	3214      	adds	r2, #20
 800d95e:	9302      	str	r3, [sp, #8]
 800d960:	114d      	asrs	r5, r1, #5
 800d962:	0013      	movs	r3, r2
 800d964:	42ac      	cmp	r4, r5
 800d966:	dd32      	ble.n	800d9ce <rshift+0x7c>
 800d968:	261f      	movs	r6, #31
 800d96a:	000f      	movs	r7, r1
 800d96c:	114b      	asrs	r3, r1, #5
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	00a5      	lsls	r5, r4, #2
 800d972:	18d3      	adds	r3, r2, r3
 800d974:	4037      	ands	r7, r6
 800d976:	1955      	adds	r5, r2, r5
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	9701      	str	r7, [sp, #4]
 800d97c:	4231      	tst	r1, r6
 800d97e:	d10d      	bne.n	800d99c <rshift+0x4a>
 800d980:	0016      	movs	r6, r2
 800d982:	0019      	movs	r1, r3
 800d984:	428d      	cmp	r5, r1
 800d986:	d836      	bhi.n	800d9f6 <rshift+0xa4>
 800d988:	9900      	ldr	r1, [sp, #0]
 800d98a:	2300      	movs	r3, #0
 800d98c:	3903      	subs	r1, #3
 800d98e:	428d      	cmp	r5, r1
 800d990:	d302      	bcc.n	800d998 <rshift+0x46>
 800d992:	9b02      	ldr	r3, [sp, #8]
 800d994:	1ae4      	subs	r4, r4, r3
 800d996:	00a3      	lsls	r3, r4, #2
 800d998:	18d3      	adds	r3, r2, r3
 800d99a:	e018      	b.n	800d9ce <rshift+0x7c>
 800d99c:	2120      	movs	r1, #32
 800d99e:	9e01      	ldr	r6, [sp, #4]
 800d9a0:	9f01      	ldr	r7, [sp, #4]
 800d9a2:	1b89      	subs	r1, r1, r6
 800d9a4:	9e00      	ldr	r6, [sp, #0]
 800d9a6:	9103      	str	r1, [sp, #12]
 800d9a8:	ce02      	ldmia	r6!, {r1}
 800d9aa:	4694      	mov	ip, r2
 800d9ac:	40f9      	lsrs	r1, r7
 800d9ae:	42b5      	cmp	r5, r6
 800d9b0:	d816      	bhi.n	800d9e0 <rshift+0x8e>
 800d9b2:	9e00      	ldr	r6, [sp, #0]
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	3601      	adds	r6, #1
 800d9b8:	42b5      	cmp	r5, r6
 800d9ba:	d303      	bcc.n	800d9c4 <rshift+0x72>
 800d9bc:	9b02      	ldr	r3, [sp, #8]
 800d9be:	1ae3      	subs	r3, r4, r3
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	3b04      	subs	r3, #4
 800d9c4:	18d3      	adds	r3, r2, r3
 800d9c6:	6019      	str	r1, [r3, #0]
 800d9c8:	2900      	cmp	r1, #0
 800d9ca:	d000      	beq.n	800d9ce <rshift+0x7c>
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	1a99      	subs	r1, r3, r2
 800d9d0:	1089      	asrs	r1, r1, #2
 800d9d2:	6101      	str	r1, [r0, #16]
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d101      	bne.n	800d9dc <rshift+0x8a>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	6143      	str	r3, [r0, #20]
 800d9dc:	b005      	add	sp, #20
 800d9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9e0:	6837      	ldr	r7, [r6, #0]
 800d9e2:	9b03      	ldr	r3, [sp, #12]
 800d9e4:	409f      	lsls	r7, r3
 800d9e6:	430f      	orrs	r7, r1
 800d9e8:	4661      	mov	r1, ip
 800d9ea:	c180      	stmia	r1!, {r7}
 800d9ec:	468c      	mov	ip, r1
 800d9ee:	9b01      	ldr	r3, [sp, #4]
 800d9f0:	ce02      	ldmia	r6!, {r1}
 800d9f2:	40d9      	lsrs	r1, r3
 800d9f4:	e7db      	b.n	800d9ae <rshift+0x5c>
 800d9f6:	c980      	ldmia	r1!, {r7}
 800d9f8:	c680      	stmia	r6!, {r7}
 800d9fa:	e7c3      	b.n	800d984 <rshift+0x32>

0800d9fc <__hexdig_fun>:
 800d9fc:	0002      	movs	r2, r0
 800d9fe:	3a30      	subs	r2, #48	; 0x30
 800da00:	0003      	movs	r3, r0
 800da02:	2a09      	cmp	r2, #9
 800da04:	d802      	bhi.n	800da0c <__hexdig_fun+0x10>
 800da06:	3b20      	subs	r3, #32
 800da08:	b2d8      	uxtb	r0, r3
 800da0a:	4770      	bx	lr
 800da0c:	0002      	movs	r2, r0
 800da0e:	3a61      	subs	r2, #97	; 0x61
 800da10:	2a05      	cmp	r2, #5
 800da12:	d801      	bhi.n	800da18 <__hexdig_fun+0x1c>
 800da14:	3b47      	subs	r3, #71	; 0x47
 800da16:	e7f7      	b.n	800da08 <__hexdig_fun+0xc>
 800da18:	001a      	movs	r2, r3
 800da1a:	3a41      	subs	r2, #65	; 0x41
 800da1c:	2000      	movs	r0, #0
 800da1e:	2a05      	cmp	r2, #5
 800da20:	d8f3      	bhi.n	800da0a <__hexdig_fun+0xe>
 800da22:	3b27      	subs	r3, #39	; 0x27
 800da24:	e7f0      	b.n	800da08 <__hexdig_fun+0xc>
	...

0800da28 <__gethex>:
 800da28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da2a:	b089      	sub	sp, #36	; 0x24
 800da2c:	9307      	str	r3, [sp, #28]
 800da2e:	2302      	movs	r3, #2
 800da30:	9201      	str	r2, [sp, #4]
 800da32:	680a      	ldr	r2, [r1, #0]
 800da34:	425b      	negs	r3, r3
 800da36:	9003      	str	r0, [sp, #12]
 800da38:	9106      	str	r1, [sp, #24]
 800da3a:	1c96      	adds	r6, r2, #2
 800da3c:	1a9b      	subs	r3, r3, r2
 800da3e:	199a      	adds	r2, r3, r6
 800da40:	9600      	str	r6, [sp, #0]
 800da42:	9205      	str	r2, [sp, #20]
 800da44:	9a00      	ldr	r2, [sp, #0]
 800da46:	3601      	adds	r6, #1
 800da48:	7810      	ldrb	r0, [r2, #0]
 800da4a:	2830      	cmp	r0, #48	; 0x30
 800da4c:	d0f7      	beq.n	800da3e <__gethex+0x16>
 800da4e:	f7ff ffd5 	bl	800d9fc <__hexdig_fun>
 800da52:	2300      	movs	r3, #0
 800da54:	001d      	movs	r5, r3
 800da56:	9302      	str	r3, [sp, #8]
 800da58:	4298      	cmp	r0, r3
 800da5a:	d11d      	bne.n	800da98 <__gethex+0x70>
 800da5c:	2201      	movs	r2, #1
 800da5e:	49a6      	ldr	r1, [pc, #664]	; (800dcf8 <__gethex+0x2d0>)
 800da60:	9800      	ldr	r0, [sp, #0]
 800da62:	f7ff fef7 	bl	800d854 <strncmp>
 800da66:	0007      	movs	r7, r0
 800da68:	42a8      	cmp	r0, r5
 800da6a:	d169      	bne.n	800db40 <__gethex+0x118>
 800da6c:	9b00      	ldr	r3, [sp, #0]
 800da6e:	0034      	movs	r4, r6
 800da70:	7858      	ldrb	r0, [r3, #1]
 800da72:	f7ff ffc3 	bl	800d9fc <__hexdig_fun>
 800da76:	2301      	movs	r3, #1
 800da78:	9302      	str	r3, [sp, #8]
 800da7a:	42a8      	cmp	r0, r5
 800da7c:	d02f      	beq.n	800dade <__gethex+0xb6>
 800da7e:	9600      	str	r6, [sp, #0]
 800da80:	9b00      	ldr	r3, [sp, #0]
 800da82:	7818      	ldrb	r0, [r3, #0]
 800da84:	2830      	cmp	r0, #48	; 0x30
 800da86:	d009      	beq.n	800da9c <__gethex+0x74>
 800da88:	f7ff ffb8 	bl	800d9fc <__hexdig_fun>
 800da8c:	4242      	negs	r2, r0
 800da8e:	4142      	adcs	r2, r0
 800da90:	2301      	movs	r3, #1
 800da92:	0035      	movs	r5, r6
 800da94:	9202      	str	r2, [sp, #8]
 800da96:	9305      	str	r3, [sp, #20]
 800da98:	9c00      	ldr	r4, [sp, #0]
 800da9a:	e004      	b.n	800daa6 <__gethex+0x7e>
 800da9c:	9b00      	ldr	r3, [sp, #0]
 800da9e:	3301      	adds	r3, #1
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	e7ed      	b.n	800da80 <__gethex+0x58>
 800daa4:	3401      	adds	r4, #1
 800daa6:	7820      	ldrb	r0, [r4, #0]
 800daa8:	f7ff ffa8 	bl	800d9fc <__hexdig_fun>
 800daac:	1e07      	subs	r7, r0, #0
 800daae:	d1f9      	bne.n	800daa4 <__gethex+0x7c>
 800dab0:	2201      	movs	r2, #1
 800dab2:	0020      	movs	r0, r4
 800dab4:	4990      	ldr	r1, [pc, #576]	; (800dcf8 <__gethex+0x2d0>)
 800dab6:	f7ff fecd 	bl	800d854 <strncmp>
 800daba:	2800      	cmp	r0, #0
 800dabc:	d10d      	bne.n	800dada <__gethex+0xb2>
 800dabe:	2d00      	cmp	r5, #0
 800dac0:	d106      	bne.n	800dad0 <__gethex+0xa8>
 800dac2:	3401      	adds	r4, #1
 800dac4:	0025      	movs	r5, r4
 800dac6:	7820      	ldrb	r0, [r4, #0]
 800dac8:	f7ff ff98 	bl	800d9fc <__hexdig_fun>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d102      	bne.n	800dad6 <__gethex+0xae>
 800dad0:	1b2d      	subs	r5, r5, r4
 800dad2:	00af      	lsls	r7, r5, #2
 800dad4:	e003      	b.n	800dade <__gethex+0xb6>
 800dad6:	3401      	adds	r4, #1
 800dad8:	e7f5      	b.n	800dac6 <__gethex+0x9e>
 800dada:	2d00      	cmp	r5, #0
 800dadc:	d1f8      	bne.n	800dad0 <__gethex+0xa8>
 800dade:	2220      	movs	r2, #32
 800dae0:	7823      	ldrb	r3, [r4, #0]
 800dae2:	0026      	movs	r6, r4
 800dae4:	4393      	bics	r3, r2
 800dae6:	2b50      	cmp	r3, #80	; 0x50
 800dae8:	d11d      	bne.n	800db26 <__gethex+0xfe>
 800daea:	7863      	ldrb	r3, [r4, #1]
 800daec:	2b2b      	cmp	r3, #43	; 0x2b
 800daee:	d02c      	beq.n	800db4a <__gethex+0x122>
 800daf0:	2b2d      	cmp	r3, #45	; 0x2d
 800daf2:	d02e      	beq.n	800db52 <__gethex+0x12a>
 800daf4:	2300      	movs	r3, #0
 800daf6:	1c66      	adds	r6, r4, #1
 800daf8:	9304      	str	r3, [sp, #16]
 800dafa:	7830      	ldrb	r0, [r6, #0]
 800dafc:	f7ff ff7e 	bl	800d9fc <__hexdig_fun>
 800db00:	1e43      	subs	r3, r0, #1
 800db02:	b2db      	uxtb	r3, r3
 800db04:	2b18      	cmp	r3, #24
 800db06:	d82b      	bhi.n	800db60 <__gethex+0x138>
 800db08:	3810      	subs	r0, #16
 800db0a:	0005      	movs	r5, r0
 800db0c:	7870      	ldrb	r0, [r6, #1]
 800db0e:	f7ff ff75 	bl	800d9fc <__hexdig_fun>
 800db12:	1e43      	subs	r3, r0, #1
 800db14:	b2db      	uxtb	r3, r3
 800db16:	3601      	adds	r6, #1
 800db18:	2b18      	cmp	r3, #24
 800db1a:	d91c      	bls.n	800db56 <__gethex+0x12e>
 800db1c:	9b04      	ldr	r3, [sp, #16]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d000      	beq.n	800db24 <__gethex+0xfc>
 800db22:	426d      	negs	r5, r5
 800db24:	197f      	adds	r7, r7, r5
 800db26:	9b06      	ldr	r3, [sp, #24]
 800db28:	601e      	str	r6, [r3, #0]
 800db2a:	9b02      	ldr	r3, [sp, #8]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d019      	beq.n	800db64 <__gethex+0x13c>
 800db30:	2600      	movs	r6, #0
 800db32:	9b05      	ldr	r3, [sp, #20]
 800db34:	42b3      	cmp	r3, r6
 800db36:	d100      	bne.n	800db3a <__gethex+0x112>
 800db38:	3606      	adds	r6, #6
 800db3a:	0030      	movs	r0, r6
 800db3c:	b009      	add	sp, #36	; 0x24
 800db3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db40:	2301      	movs	r3, #1
 800db42:	2700      	movs	r7, #0
 800db44:	9c00      	ldr	r4, [sp, #0]
 800db46:	9302      	str	r3, [sp, #8]
 800db48:	e7c9      	b.n	800dade <__gethex+0xb6>
 800db4a:	2300      	movs	r3, #0
 800db4c:	9304      	str	r3, [sp, #16]
 800db4e:	1ca6      	adds	r6, r4, #2
 800db50:	e7d3      	b.n	800dafa <__gethex+0xd2>
 800db52:	2301      	movs	r3, #1
 800db54:	e7fa      	b.n	800db4c <__gethex+0x124>
 800db56:	230a      	movs	r3, #10
 800db58:	435d      	muls	r5, r3
 800db5a:	182d      	adds	r5, r5, r0
 800db5c:	3d10      	subs	r5, #16
 800db5e:	e7d5      	b.n	800db0c <__gethex+0xe4>
 800db60:	0026      	movs	r6, r4
 800db62:	e7e0      	b.n	800db26 <__gethex+0xfe>
 800db64:	9b00      	ldr	r3, [sp, #0]
 800db66:	9902      	ldr	r1, [sp, #8]
 800db68:	1ae3      	subs	r3, r4, r3
 800db6a:	3b01      	subs	r3, #1
 800db6c:	2b07      	cmp	r3, #7
 800db6e:	dc0a      	bgt.n	800db86 <__gethex+0x15e>
 800db70:	9803      	ldr	r0, [sp, #12]
 800db72:	f7fe f8d5 	bl	800bd20 <_Balloc>
 800db76:	1e05      	subs	r5, r0, #0
 800db78:	d108      	bne.n	800db8c <__gethex+0x164>
 800db7a:	002a      	movs	r2, r5
 800db7c:	21e4      	movs	r1, #228	; 0xe4
 800db7e:	4b5f      	ldr	r3, [pc, #380]	; (800dcfc <__gethex+0x2d4>)
 800db80:	485f      	ldr	r0, [pc, #380]	; (800dd00 <__gethex+0x2d8>)
 800db82:	f7ff fe9b 	bl	800d8bc <__assert_func>
 800db86:	3101      	adds	r1, #1
 800db88:	105b      	asrs	r3, r3, #1
 800db8a:	e7ef      	b.n	800db6c <__gethex+0x144>
 800db8c:	0003      	movs	r3, r0
 800db8e:	3314      	adds	r3, #20
 800db90:	9302      	str	r3, [sp, #8]
 800db92:	9305      	str	r3, [sp, #20]
 800db94:	2300      	movs	r3, #0
 800db96:	001e      	movs	r6, r3
 800db98:	9304      	str	r3, [sp, #16]
 800db9a:	9b00      	ldr	r3, [sp, #0]
 800db9c:	42a3      	cmp	r3, r4
 800db9e:	d33f      	bcc.n	800dc20 <__gethex+0x1f8>
 800dba0:	9c05      	ldr	r4, [sp, #20]
 800dba2:	9b02      	ldr	r3, [sp, #8]
 800dba4:	c440      	stmia	r4!, {r6}
 800dba6:	1ae4      	subs	r4, r4, r3
 800dba8:	10a4      	asrs	r4, r4, #2
 800dbaa:	0030      	movs	r0, r6
 800dbac:	612c      	str	r4, [r5, #16]
 800dbae:	f7fe f9af 	bl	800bf10 <__hi0bits>
 800dbb2:	9b01      	ldr	r3, [sp, #4]
 800dbb4:	0164      	lsls	r4, r4, #5
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	1a26      	subs	r6, r4, r0
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	429e      	cmp	r6, r3
 800dbbe:	dd51      	ble.n	800dc64 <__gethex+0x23c>
 800dbc0:	1af6      	subs	r6, r6, r3
 800dbc2:	0031      	movs	r1, r6
 800dbc4:	0028      	movs	r0, r5
 800dbc6:	f7fe fd43 	bl	800c650 <__any_on>
 800dbca:	1e04      	subs	r4, r0, #0
 800dbcc:	d016      	beq.n	800dbfc <__gethex+0x1d4>
 800dbce:	2401      	movs	r4, #1
 800dbd0:	231f      	movs	r3, #31
 800dbd2:	0020      	movs	r0, r4
 800dbd4:	1e72      	subs	r2, r6, #1
 800dbd6:	4013      	ands	r3, r2
 800dbd8:	4098      	lsls	r0, r3
 800dbda:	0003      	movs	r3, r0
 800dbdc:	1151      	asrs	r1, r2, #5
 800dbde:	9802      	ldr	r0, [sp, #8]
 800dbe0:	0089      	lsls	r1, r1, #2
 800dbe2:	5809      	ldr	r1, [r1, r0]
 800dbe4:	4219      	tst	r1, r3
 800dbe6:	d009      	beq.n	800dbfc <__gethex+0x1d4>
 800dbe8:	42a2      	cmp	r2, r4
 800dbea:	dd06      	ble.n	800dbfa <__gethex+0x1d2>
 800dbec:	0028      	movs	r0, r5
 800dbee:	1eb1      	subs	r1, r6, #2
 800dbf0:	f7fe fd2e 	bl	800c650 <__any_on>
 800dbf4:	3402      	adds	r4, #2
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d100      	bne.n	800dbfc <__gethex+0x1d4>
 800dbfa:	2402      	movs	r4, #2
 800dbfc:	0031      	movs	r1, r6
 800dbfe:	0028      	movs	r0, r5
 800dc00:	f7ff fea7 	bl	800d952 <rshift>
 800dc04:	19bf      	adds	r7, r7, r6
 800dc06:	9b01      	ldr	r3, [sp, #4]
 800dc08:	689b      	ldr	r3, [r3, #8]
 800dc0a:	42bb      	cmp	r3, r7
 800dc0c:	da3a      	bge.n	800dc84 <__gethex+0x25c>
 800dc0e:	0029      	movs	r1, r5
 800dc10:	9803      	ldr	r0, [sp, #12]
 800dc12:	f7fe f8c9 	bl	800bda8 <_Bfree>
 800dc16:	2300      	movs	r3, #0
 800dc18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc1a:	26a3      	movs	r6, #163	; 0xa3
 800dc1c:	6013      	str	r3, [r2, #0]
 800dc1e:	e78c      	b.n	800db3a <__gethex+0x112>
 800dc20:	3c01      	subs	r4, #1
 800dc22:	7823      	ldrb	r3, [r4, #0]
 800dc24:	2b2e      	cmp	r3, #46	; 0x2e
 800dc26:	d012      	beq.n	800dc4e <__gethex+0x226>
 800dc28:	9b04      	ldr	r3, [sp, #16]
 800dc2a:	2b20      	cmp	r3, #32
 800dc2c:	d104      	bne.n	800dc38 <__gethex+0x210>
 800dc2e:	9b05      	ldr	r3, [sp, #20]
 800dc30:	c340      	stmia	r3!, {r6}
 800dc32:	2600      	movs	r6, #0
 800dc34:	9305      	str	r3, [sp, #20]
 800dc36:	9604      	str	r6, [sp, #16]
 800dc38:	7820      	ldrb	r0, [r4, #0]
 800dc3a:	f7ff fedf 	bl	800d9fc <__hexdig_fun>
 800dc3e:	230f      	movs	r3, #15
 800dc40:	4018      	ands	r0, r3
 800dc42:	9b04      	ldr	r3, [sp, #16]
 800dc44:	4098      	lsls	r0, r3
 800dc46:	3304      	adds	r3, #4
 800dc48:	4306      	orrs	r6, r0
 800dc4a:	9304      	str	r3, [sp, #16]
 800dc4c:	e7a5      	b.n	800db9a <__gethex+0x172>
 800dc4e:	9b00      	ldr	r3, [sp, #0]
 800dc50:	42a3      	cmp	r3, r4
 800dc52:	d8e9      	bhi.n	800dc28 <__gethex+0x200>
 800dc54:	2201      	movs	r2, #1
 800dc56:	0020      	movs	r0, r4
 800dc58:	4927      	ldr	r1, [pc, #156]	; (800dcf8 <__gethex+0x2d0>)
 800dc5a:	f7ff fdfb 	bl	800d854 <strncmp>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d1e2      	bne.n	800dc28 <__gethex+0x200>
 800dc62:	e79a      	b.n	800db9a <__gethex+0x172>
 800dc64:	9b00      	ldr	r3, [sp, #0]
 800dc66:	2400      	movs	r4, #0
 800dc68:	429e      	cmp	r6, r3
 800dc6a:	dacc      	bge.n	800dc06 <__gethex+0x1de>
 800dc6c:	1b9e      	subs	r6, r3, r6
 800dc6e:	0029      	movs	r1, r5
 800dc70:	0032      	movs	r2, r6
 800dc72:	9803      	ldr	r0, [sp, #12]
 800dc74:	f7fe fab8 	bl	800c1e8 <__lshift>
 800dc78:	0003      	movs	r3, r0
 800dc7a:	3314      	adds	r3, #20
 800dc7c:	0005      	movs	r5, r0
 800dc7e:	1bbf      	subs	r7, r7, r6
 800dc80:	9302      	str	r3, [sp, #8]
 800dc82:	e7c0      	b.n	800dc06 <__gethex+0x1de>
 800dc84:	9b01      	ldr	r3, [sp, #4]
 800dc86:	685e      	ldr	r6, [r3, #4]
 800dc88:	42be      	cmp	r6, r7
 800dc8a:	dd70      	ble.n	800dd6e <__gethex+0x346>
 800dc8c:	9b00      	ldr	r3, [sp, #0]
 800dc8e:	1bf6      	subs	r6, r6, r7
 800dc90:	42b3      	cmp	r3, r6
 800dc92:	dc37      	bgt.n	800dd04 <__gethex+0x2dc>
 800dc94:	9b01      	ldr	r3, [sp, #4]
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	2b02      	cmp	r3, #2
 800dc9a:	d024      	beq.n	800dce6 <__gethex+0x2be>
 800dc9c:	2b03      	cmp	r3, #3
 800dc9e:	d026      	beq.n	800dcee <__gethex+0x2c6>
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d117      	bne.n	800dcd4 <__gethex+0x2ac>
 800dca4:	9b00      	ldr	r3, [sp, #0]
 800dca6:	42b3      	cmp	r3, r6
 800dca8:	d114      	bne.n	800dcd4 <__gethex+0x2ac>
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d10b      	bne.n	800dcc6 <__gethex+0x29e>
 800dcae:	9b01      	ldr	r3, [sp, #4]
 800dcb0:	9a07      	ldr	r2, [sp, #28]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	2662      	movs	r6, #98	; 0x62
 800dcb6:	6013      	str	r3, [r2, #0]
 800dcb8:	2301      	movs	r3, #1
 800dcba:	9a02      	ldr	r2, [sp, #8]
 800dcbc:	612b      	str	r3, [r5, #16]
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcc2:	601d      	str	r5, [r3, #0]
 800dcc4:	e739      	b.n	800db3a <__gethex+0x112>
 800dcc6:	9900      	ldr	r1, [sp, #0]
 800dcc8:	0028      	movs	r0, r5
 800dcca:	3901      	subs	r1, #1
 800dccc:	f7fe fcc0 	bl	800c650 <__any_on>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	d1ec      	bne.n	800dcae <__gethex+0x286>
 800dcd4:	0029      	movs	r1, r5
 800dcd6:	9803      	ldr	r0, [sp, #12]
 800dcd8:	f7fe f866 	bl	800bda8 <_Bfree>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dce0:	2650      	movs	r6, #80	; 0x50
 800dce2:	6013      	str	r3, [r2, #0]
 800dce4:	e729      	b.n	800db3a <__gethex+0x112>
 800dce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d1f3      	bne.n	800dcd4 <__gethex+0x2ac>
 800dcec:	e7df      	b.n	800dcae <__gethex+0x286>
 800dcee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d1dc      	bne.n	800dcae <__gethex+0x286>
 800dcf4:	e7ee      	b.n	800dcd4 <__gethex+0x2ac>
 800dcf6:	46c0      	nop			; (mov r8, r8)
 800dcf8:	0800ee8c 	.word	0x0800ee8c
 800dcfc:	0800ed25 	.word	0x0800ed25
 800dd00:	0800f036 	.word	0x0800f036
 800dd04:	1e77      	subs	r7, r6, #1
 800dd06:	2c00      	cmp	r4, #0
 800dd08:	d12f      	bne.n	800dd6a <__gethex+0x342>
 800dd0a:	2f00      	cmp	r7, #0
 800dd0c:	d004      	beq.n	800dd18 <__gethex+0x2f0>
 800dd0e:	0039      	movs	r1, r7
 800dd10:	0028      	movs	r0, r5
 800dd12:	f7fe fc9d 	bl	800c650 <__any_on>
 800dd16:	0004      	movs	r4, r0
 800dd18:	231f      	movs	r3, #31
 800dd1a:	117a      	asrs	r2, r7, #5
 800dd1c:	401f      	ands	r7, r3
 800dd1e:	3b1e      	subs	r3, #30
 800dd20:	40bb      	lsls	r3, r7
 800dd22:	9902      	ldr	r1, [sp, #8]
 800dd24:	0092      	lsls	r2, r2, #2
 800dd26:	5852      	ldr	r2, [r2, r1]
 800dd28:	421a      	tst	r2, r3
 800dd2a:	d001      	beq.n	800dd30 <__gethex+0x308>
 800dd2c:	2302      	movs	r3, #2
 800dd2e:	431c      	orrs	r4, r3
 800dd30:	9b00      	ldr	r3, [sp, #0]
 800dd32:	0031      	movs	r1, r6
 800dd34:	1b9b      	subs	r3, r3, r6
 800dd36:	2602      	movs	r6, #2
 800dd38:	0028      	movs	r0, r5
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	f7ff fe09 	bl	800d952 <rshift>
 800dd40:	9b01      	ldr	r3, [sp, #4]
 800dd42:	685f      	ldr	r7, [r3, #4]
 800dd44:	2c00      	cmp	r4, #0
 800dd46:	d041      	beq.n	800ddcc <__gethex+0x3a4>
 800dd48:	9b01      	ldr	r3, [sp, #4]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d010      	beq.n	800dd72 <__gethex+0x34a>
 800dd50:	2b03      	cmp	r3, #3
 800dd52:	d012      	beq.n	800dd7a <__gethex+0x352>
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d106      	bne.n	800dd66 <__gethex+0x33e>
 800dd58:	07a2      	lsls	r2, r4, #30
 800dd5a:	d504      	bpl.n	800dd66 <__gethex+0x33e>
 800dd5c:	9a02      	ldr	r2, [sp, #8]
 800dd5e:	6812      	ldr	r2, [r2, #0]
 800dd60:	4314      	orrs	r4, r2
 800dd62:	421c      	tst	r4, r3
 800dd64:	d10c      	bne.n	800dd80 <__gethex+0x358>
 800dd66:	2310      	movs	r3, #16
 800dd68:	e02f      	b.n	800ddca <__gethex+0x3a2>
 800dd6a:	2401      	movs	r4, #1
 800dd6c:	e7d4      	b.n	800dd18 <__gethex+0x2f0>
 800dd6e:	2601      	movs	r6, #1
 800dd70:	e7e8      	b.n	800dd44 <__gethex+0x31c>
 800dd72:	2301      	movs	r3, #1
 800dd74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd76:	1a9b      	subs	r3, r3, r2
 800dd78:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d0f2      	beq.n	800dd66 <__gethex+0x33e>
 800dd80:	692b      	ldr	r3, [r5, #16]
 800dd82:	2000      	movs	r0, #0
 800dd84:	9302      	str	r3, [sp, #8]
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	9304      	str	r3, [sp, #16]
 800dd8a:	002b      	movs	r3, r5
 800dd8c:	9a04      	ldr	r2, [sp, #16]
 800dd8e:	3314      	adds	r3, #20
 800dd90:	1899      	adds	r1, r3, r2
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	1c54      	adds	r4, r2, #1
 800dd96:	d01e      	beq.n	800ddd6 <__gethex+0x3ae>
 800dd98:	3201      	adds	r2, #1
 800dd9a:	601a      	str	r2, [r3, #0]
 800dd9c:	002b      	movs	r3, r5
 800dd9e:	3314      	adds	r3, #20
 800dda0:	2e02      	cmp	r6, #2
 800dda2:	d141      	bne.n	800de28 <__gethex+0x400>
 800dda4:	9a01      	ldr	r2, [sp, #4]
 800dda6:	9900      	ldr	r1, [sp, #0]
 800dda8:	6812      	ldr	r2, [r2, #0]
 800ddaa:	3a01      	subs	r2, #1
 800ddac:	428a      	cmp	r2, r1
 800ddae:	d10b      	bne.n	800ddc8 <__gethex+0x3a0>
 800ddb0:	221f      	movs	r2, #31
 800ddb2:	9800      	ldr	r0, [sp, #0]
 800ddb4:	1149      	asrs	r1, r1, #5
 800ddb6:	4002      	ands	r2, r0
 800ddb8:	2001      	movs	r0, #1
 800ddba:	0004      	movs	r4, r0
 800ddbc:	4094      	lsls	r4, r2
 800ddbe:	0089      	lsls	r1, r1, #2
 800ddc0:	58cb      	ldr	r3, [r1, r3]
 800ddc2:	4223      	tst	r3, r4
 800ddc4:	d000      	beq.n	800ddc8 <__gethex+0x3a0>
 800ddc6:	2601      	movs	r6, #1
 800ddc8:	2320      	movs	r3, #32
 800ddca:	431e      	orrs	r6, r3
 800ddcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddce:	601d      	str	r5, [r3, #0]
 800ddd0:	9b07      	ldr	r3, [sp, #28]
 800ddd2:	601f      	str	r7, [r3, #0]
 800ddd4:	e6b1      	b.n	800db3a <__gethex+0x112>
 800ddd6:	c301      	stmia	r3!, {r0}
 800ddd8:	4299      	cmp	r1, r3
 800ddda:	d8da      	bhi.n	800dd92 <__gethex+0x36a>
 800dddc:	68ab      	ldr	r3, [r5, #8]
 800ddde:	9a02      	ldr	r2, [sp, #8]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	db18      	blt.n	800de16 <__gethex+0x3ee>
 800dde4:	6869      	ldr	r1, [r5, #4]
 800dde6:	9803      	ldr	r0, [sp, #12]
 800dde8:	3101      	adds	r1, #1
 800ddea:	f7fd ff99 	bl	800bd20 <_Balloc>
 800ddee:	1e04      	subs	r4, r0, #0
 800ddf0:	d104      	bne.n	800ddfc <__gethex+0x3d4>
 800ddf2:	0022      	movs	r2, r4
 800ddf4:	2184      	movs	r1, #132	; 0x84
 800ddf6:	4b1c      	ldr	r3, [pc, #112]	; (800de68 <__gethex+0x440>)
 800ddf8:	481c      	ldr	r0, [pc, #112]	; (800de6c <__gethex+0x444>)
 800ddfa:	e6c2      	b.n	800db82 <__gethex+0x15a>
 800ddfc:	0029      	movs	r1, r5
 800ddfe:	692a      	ldr	r2, [r5, #16]
 800de00:	310c      	adds	r1, #12
 800de02:	3202      	adds	r2, #2
 800de04:	0092      	lsls	r2, r2, #2
 800de06:	300c      	adds	r0, #12
 800de08:	f7ff fd48 	bl	800d89c <memcpy>
 800de0c:	0029      	movs	r1, r5
 800de0e:	9803      	ldr	r0, [sp, #12]
 800de10:	f7fd ffca 	bl	800bda8 <_Bfree>
 800de14:	0025      	movs	r5, r4
 800de16:	692b      	ldr	r3, [r5, #16]
 800de18:	1c5a      	adds	r2, r3, #1
 800de1a:	612a      	str	r2, [r5, #16]
 800de1c:	2201      	movs	r2, #1
 800de1e:	3304      	adds	r3, #4
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	18eb      	adds	r3, r5, r3
 800de24:	605a      	str	r2, [r3, #4]
 800de26:	e7b9      	b.n	800dd9c <__gethex+0x374>
 800de28:	692a      	ldr	r2, [r5, #16]
 800de2a:	9902      	ldr	r1, [sp, #8]
 800de2c:	428a      	cmp	r2, r1
 800de2e:	dd09      	ble.n	800de44 <__gethex+0x41c>
 800de30:	2101      	movs	r1, #1
 800de32:	0028      	movs	r0, r5
 800de34:	f7ff fd8d 	bl	800d952 <rshift>
 800de38:	9b01      	ldr	r3, [sp, #4]
 800de3a:	3701      	adds	r7, #1
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	42bb      	cmp	r3, r7
 800de40:	dac1      	bge.n	800ddc6 <__gethex+0x39e>
 800de42:	e6e4      	b.n	800dc0e <__gethex+0x1e6>
 800de44:	221f      	movs	r2, #31
 800de46:	9c00      	ldr	r4, [sp, #0]
 800de48:	9900      	ldr	r1, [sp, #0]
 800de4a:	2601      	movs	r6, #1
 800de4c:	4014      	ands	r4, r2
 800de4e:	4211      	tst	r1, r2
 800de50:	d0ba      	beq.n	800ddc8 <__gethex+0x3a0>
 800de52:	9a04      	ldr	r2, [sp, #16]
 800de54:	189b      	adds	r3, r3, r2
 800de56:	3b04      	subs	r3, #4
 800de58:	6818      	ldr	r0, [r3, #0]
 800de5a:	f7fe f859 	bl	800bf10 <__hi0bits>
 800de5e:	2320      	movs	r3, #32
 800de60:	1b1b      	subs	r3, r3, r4
 800de62:	4298      	cmp	r0, r3
 800de64:	dbe4      	blt.n	800de30 <__gethex+0x408>
 800de66:	e7af      	b.n	800ddc8 <__gethex+0x3a0>
 800de68:	0800ed25 	.word	0x0800ed25
 800de6c:	0800f036 	.word	0x0800f036

0800de70 <L_shift>:
 800de70:	2308      	movs	r3, #8
 800de72:	b570      	push	{r4, r5, r6, lr}
 800de74:	2520      	movs	r5, #32
 800de76:	1a9a      	subs	r2, r3, r2
 800de78:	0092      	lsls	r2, r2, #2
 800de7a:	1aad      	subs	r5, r5, r2
 800de7c:	6843      	ldr	r3, [r0, #4]
 800de7e:	6804      	ldr	r4, [r0, #0]
 800de80:	001e      	movs	r6, r3
 800de82:	40ae      	lsls	r6, r5
 800de84:	40d3      	lsrs	r3, r2
 800de86:	4334      	orrs	r4, r6
 800de88:	6004      	str	r4, [r0, #0]
 800de8a:	6043      	str	r3, [r0, #4]
 800de8c:	3004      	adds	r0, #4
 800de8e:	4288      	cmp	r0, r1
 800de90:	d3f4      	bcc.n	800de7c <L_shift+0xc>
 800de92:	bd70      	pop	{r4, r5, r6, pc}

0800de94 <__match>:
 800de94:	b530      	push	{r4, r5, lr}
 800de96:	6803      	ldr	r3, [r0, #0]
 800de98:	780c      	ldrb	r4, [r1, #0]
 800de9a:	3301      	adds	r3, #1
 800de9c:	2c00      	cmp	r4, #0
 800de9e:	d102      	bne.n	800dea6 <__match+0x12>
 800dea0:	6003      	str	r3, [r0, #0]
 800dea2:	2001      	movs	r0, #1
 800dea4:	bd30      	pop	{r4, r5, pc}
 800dea6:	781a      	ldrb	r2, [r3, #0]
 800dea8:	0015      	movs	r5, r2
 800deaa:	3d41      	subs	r5, #65	; 0x41
 800deac:	2d19      	cmp	r5, #25
 800deae:	d800      	bhi.n	800deb2 <__match+0x1e>
 800deb0:	3220      	adds	r2, #32
 800deb2:	3101      	adds	r1, #1
 800deb4:	42a2      	cmp	r2, r4
 800deb6:	d0ef      	beq.n	800de98 <__match+0x4>
 800deb8:	2000      	movs	r0, #0
 800deba:	e7f3      	b.n	800dea4 <__match+0x10>

0800debc <__hexnan>:
 800debc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800debe:	680b      	ldr	r3, [r1, #0]
 800dec0:	b08b      	sub	sp, #44	; 0x2c
 800dec2:	9201      	str	r2, [sp, #4]
 800dec4:	9901      	ldr	r1, [sp, #4]
 800dec6:	115a      	asrs	r2, r3, #5
 800dec8:	0092      	lsls	r2, r2, #2
 800deca:	188a      	adds	r2, r1, r2
 800decc:	9202      	str	r2, [sp, #8]
 800dece:	0019      	movs	r1, r3
 800ded0:	221f      	movs	r2, #31
 800ded2:	4011      	ands	r1, r2
 800ded4:	9008      	str	r0, [sp, #32]
 800ded6:	9106      	str	r1, [sp, #24]
 800ded8:	4213      	tst	r3, r2
 800deda:	d002      	beq.n	800dee2 <__hexnan+0x26>
 800dedc:	9b02      	ldr	r3, [sp, #8]
 800dede:	3304      	adds	r3, #4
 800dee0:	9302      	str	r3, [sp, #8]
 800dee2:	9b02      	ldr	r3, [sp, #8]
 800dee4:	2500      	movs	r5, #0
 800dee6:	1f1f      	subs	r7, r3, #4
 800dee8:	003e      	movs	r6, r7
 800deea:	003c      	movs	r4, r7
 800deec:	9b08      	ldr	r3, [sp, #32]
 800deee:	603d      	str	r5, [r7, #0]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	9507      	str	r5, [sp, #28]
 800def4:	9305      	str	r3, [sp, #20]
 800def6:	9503      	str	r5, [sp, #12]
 800def8:	9b05      	ldr	r3, [sp, #20]
 800defa:	3301      	adds	r3, #1
 800defc:	9309      	str	r3, [sp, #36]	; 0x24
 800defe:	9b05      	ldr	r3, [sp, #20]
 800df00:	785b      	ldrb	r3, [r3, #1]
 800df02:	9304      	str	r3, [sp, #16]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d028      	beq.n	800df5a <__hexnan+0x9e>
 800df08:	9804      	ldr	r0, [sp, #16]
 800df0a:	f7ff fd77 	bl	800d9fc <__hexdig_fun>
 800df0e:	2800      	cmp	r0, #0
 800df10:	d154      	bne.n	800dfbc <__hexnan+0x100>
 800df12:	9b04      	ldr	r3, [sp, #16]
 800df14:	2b20      	cmp	r3, #32
 800df16:	d819      	bhi.n	800df4c <__hexnan+0x90>
 800df18:	9b03      	ldr	r3, [sp, #12]
 800df1a:	9a07      	ldr	r2, [sp, #28]
 800df1c:	4293      	cmp	r3, r2
 800df1e:	dd12      	ble.n	800df46 <__hexnan+0x8a>
 800df20:	42b4      	cmp	r4, r6
 800df22:	d206      	bcs.n	800df32 <__hexnan+0x76>
 800df24:	2d07      	cmp	r5, #7
 800df26:	dc04      	bgt.n	800df32 <__hexnan+0x76>
 800df28:	002a      	movs	r2, r5
 800df2a:	0031      	movs	r1, r6
 800df2c:	0020      	movs	r0, r4
 800df2e:	f7ff ff9f 	bl	800de70 <L_shift>
 800df32:	9b01      	ldr	r3, [sp, #4]
 800df34:	2508      	movs	r5, #8
 800df36:	429c      	cmp	r4, r3
 800df38:	d905      	bls.n	800df46 <__hexnan+0x8a>
 800df3a:	1f26      	subs	r6, r4, #4
 800df3c:	2500      	movs	r5, #0
 800df3e:	0034      	movs	r4, r6
 800df40:	9b03      	ldr	r3, [sp, #12]
 800df42:	6035      	str	r5, [r6, #0]
 800df44:	9307      	str	r3, [sp, #28]
 800df46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df48:	9305      	str	r3, [sp, #20]
 800df4a:	e7d5      	b.n	800def8 <__hexnan+0x3c>
 800df4c:	9b04      	ldr	r3, [sp, #16]
 800df4e:	2b29      	cmp	r3, #41	; 0x29
 800df50:	d159      	bne.n	800e006 <__hexnan+0x14a>
 800df52:	9b05      	ldr	r3, [sp, #20]
 800df54:	9a08      	ldr	r2, [sp, #32]
 800df56:	3302      	adds	r3, #2
 800df58:	6013      	str	r3, [r2, #0]
 800df5a:	9b03      	ldr	r3, [sp, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d052      	beq.n	800e006 <__hexnan+0x14a>
 800df60:	42b4      	cmp	r4, r6
 800df62:	d206      	bcs.n	800df72 <__hexnan+0xb6>
 800df64:	2d07      	cmp	r5, #7
 800df66:	dc04      	bgt.n	800df72 <__hexnan+0xb6>
 800df68:	002a      	movs	r2, r5
 800df6a:	0031      	movs	r1, r6
 800df6c:	0020      	movs	r0, r4
 800df6e:	f7ff ff7f 	bl	800de70 <L_shift>
 800df72:	9b01      	ldr	r3, [sp, #4]
 800df74:	429c      	cmp	r4, r3
 800df76:	d935      	bls.n	800dfe4 <__hexnan+0x128>
 800df78:	001a      	movs	r2, r3
 800df7a:	0023      	movs	r3, r4
 800df7c:	cb02      	ldmia	r3!, {r1}
 800df7e:	c202      	stmia	r2!, {r1}
 800df80:	429f      	cmp	r7, r3
 800df82:	d2fb      	bcs.n	800df7c <__hexnan+0xc0>
 800df84:	9b02      	ldr	r3, [sp, #8]
 800df86:	1c62      	adds	r2, r4, #1
 800df88:	1ed9      	subs	r1, r3, #3
 800df8a:	2304      	movs	r3, #4
 800df8c:	4291      	cmp	r1, r2
 800df8e:	d305      	bcc.n	800df9c <__hexnan+0xe0>
 800df90:	9b02      	ldr	r3, [sp, #8]
 800df92:	3b04      	subs	r3, #4
 800df94:	1b1b      	subs	r3, r3, r4
 800df96:	089b      	lsrs	r3, r3, #2
 800df98:	3301      	adds	r3, #1
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	9a01      	ldr	r2, [sp, #4]
 800df9e:	18d3      	adds	r3, r2, r3
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	c304      	stmia	r3!, {r2}
 800dfa4:	429f      	cmp	r7, r3
 800dfa6:	d2fc      	bcs.n	800dfa2 <__hexnan+0xe6>
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d104      	bne.n	800dfb8 <__hexnan+0xfc>
 800dfae:	9b01      	ldr	r3, [sp, #4]
 800dfb0:	429f      	cmp	r7, r3
 800dfb2:	d126      	bne.n	800e002 <__hexnan+0x146>
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	603b      	str	r3, [r7, #0]
 800dfb8:	2005      	movs	r0, #5
 800dfba:	e025      	b.n	800e008 <__hexnan+0x14c>
 800dfbc:	9b03      	ldr	r3, [sp, #12]
 800dfbe:	3501      	adds	r5, #1
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	9303      	str	r3, [sp, #12]
 800dfc4:	2d08      	cmp	r5, #8
 800dfc6:	dd06      	ble.n	800dfd6 <__hexnan+0x11a>
 800dfc8:	9b01      	ldr	r3, [sp, #4]
 800dfca:	429c      	cmp	r4, r3
 800dfcc:	d9bb      	bls.n	800df46 <__hexnan+0x8a>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	2501      	movs	r5, #1
 800dfd2:	3c04      	subs	r4, #4
 800dfd4:	6023      	str	r3, [r4, #0]
 800dfd6:	220f      	movs	r2, #15
 800dfd8:	6823      	ldr	r3, [r4, #0]
 800dfda:	4010      	ands	r0, r2
 800dfdc:	011b      	lsls	r3, r3, #4
 800dfde:	4303      	orrs	r3, r0
 800dfe0:	6023      	str	r3, [r4, #0]
 800dfe2:	e7b0      	b.n	800df46 <__hexnan+0x8a>
 800dfe4:	9b06      	ldr	r3, [sp, #24]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d0de      	beq.n	800dfa8 <__hexnan+0xec>
 800dfea:	2320      	movs	r3, #32
 800dfec:	9a06      	ldr	r2, [sp, #24]
 800dfee:	9902      	ldr	r1, [sp, #8]
 800dff0:	1a9b      	subs	r3, r3, r2
 800dff2:	2201      	movs	r2, #1
 800dff4:	4252      	negs	r2, r2
 800dff6:	40da      	lsrs	r2, r3
 800dff8:	3904      	subs	r1, #4
 800dffa:	680b      	ldr	r3, [r1, #0]
 800dffc:	4013      	ands	r3, r2
 800dffe:	600b      	str	r3, [r1, #0]
 800e000:	e7d2      	b.n	800dfa8 <__hexnan+0xec>
 800e002:	3f04      	subs	r7, #4
 800e004:	e7d0      	b.n	800dfa8 <__hexnan+0xec>
 800e006:	2004      	movs	r0, #4
 800e008:	b00b      	add	sp, #44	; 0x2c
 800e00a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e00c <__ascii_mbtowc>:
 800e00c:	b082      	sub	sp, #8
 800e00e:	2900      	cmp	r1, #0
 800e010:	d100      	bne.n	800e014 <__ascii_mbtowc+0x8>
 800e012:	a901      	add	r1, sp, #4
 800e014:	1e10      	subs	r0, r2, #0
 800e016:	d006      	beq.n	800e026 <__ascii_mbtowc+0x1a>
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d006      	beq.n	800e02a <__ascii_mbtowc+0x1e>
 800e01c:	7813      	ldrb	r3, [r2, #0]
 800e01e:	600b      	str	r3, [r1, #0]
 800e020:	7810      	ldrb	r0, [r2, #0]
 800e022:	1e43      	subs	r3, r0, #1
 800e024:	4198      	sbcs	r0, r3
 800e026:	b002      	add	sp, #8
 800e028:	4770      	bx	lr
 800e02a:	2002      	movs	r0, #2
 800e02c:	4240      	negs	r0, r0
 800e02e:	e7fa      	b.n	800e026 <__ascii_mbtowc+0x1a>

0800e030 <_realloc_r>:
 800e030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e032:	0007      	movs	r7, r0
 800e034:	000e      	movs	r6, r1
 800e036:	0014      	movs	r4, r2
 800e038:	2900      	cmp	r1, #0
 800e03a:	d105      	bne.n	800e048 <_realloc_r+0x18>
 800e03c:	0011      	movs	r1, r2
 800e03e:	f7fd fddd 	bl	800bbfc <_malloc_r>
 800e042:	0005      	movs	r5, r0
 800e044:	0028      	movs	r0, r5
 800e046:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e048:	2a00      	cmp	r2, #0
 800e04a:	d103      	bne.n	800e054 <_realloc_r+0x24>
 800e04c:	f7fd fd60 	bl	800bb10 <_free_r>
 800e050:	0025      	movs	r5, r4
 800e052:	e7f7      	b.n	800e044 <_realloc_r+0x14>
 800e054:	f000 f83f 	bl	800e0d6 <_malloc_usable_size_r>
 800e058:	9001      	str	r0, [sp, #4]
 800e05a:	4284      	cmp	r4, r0
 800e05c:	d803      	bhi.n	800e066 <_realloc_r+0x36>
 800e05e:	0035      	movs	r5, r6
 800e060:	0843      	lsrs	r3, r0, #1
 800e062:	42a3      	cmp	r3, r4
 800e064:	d3ee      	bcc.n	800e044 <_realloc_r+0x14>
 800e066:	0021      	movs	r1, r4
 800e068:	0038      	movs	r0, r7
 800e06a:	f7fd fdc7 	bl	800bbfc <_malloc_r>
 800e06e:	1e05      	subs	r5, r0, #0
 800e070:	d0e8      	beq.n	800e044 <_realloc_r+0x14>
 800e072:	9b01      	ldr	r3, [sp, #4]
 800e074:	0022      	movs	r2, r4
 800e076:	429c      	cmp	r4, r3
 800e078:	d900      	bls.n	800e07c <_realloc_r+0x4c>
 800e07a:	001a      	movs	r2, r3
 800e07c:	0031      	movs	r1, r6
 800e07e:	0028      	movs	r0, r5
 800e080:	f7ff fc0c 	bl	800d89c <memcpy>
 800e084:	0031      	movs	r1, r6
 800e086:	0038      	movs	r0, r7
 800e088:	f7fd fd42 	bl	800bb10 <_free_r>
 800e08c:	e7da      	b.n	800e044 <_realloc_r+0x14>

0800e08e <__ascii_wctomb>:
 800e08e:	0003      	movs	r3, r0
 800e090:	1e08      	subs	r0, r1, #0
 800e092:	d005      	beq.n	800e0a0 <__ascii_wctomb+0x12>
 800e094:	2aff      	cmp	r2, #255	; 0xff
 800e096:	d904      	bls.n	800e0a2 <__ascii_wctomb+0x14>
 800e098:	228a      	movs	r2, #138	; 0x8a
 800e09a:	2001      	movs	r0, #1
 800e09c:	601a      	str	r2, [r3, #0]
 800e09e:	4240      	negs	r0, r0
 800e0a0:	4770      	bx	lr
 800e0a2:	2001      	movs	r0, #1
 800e0a4:	700a      	strb	r2, [r1, #0]
 800e0a6:	e7fb      	b.n	800e0a0 <__ascii_wctomb+0x12>

0800e0a8 <fiprintf>:
 800e0a8:	b40e      	push	{r1, r2, r3}
 800e0aa:	b517      	push	{r0, r1, r2, r4, lr}
 800e0ac:	4c05      	ldr	r4, [pc, #20]	; (800e0c4 <fiprintf+0x1c>)
 800e0ae:	ab05      	add	r3, sp, #20
 800e0b0:	cb04      	ldmia	r3!, {r2}
 800e0b2:	0001      	movs	r1, r0
 800e0b4:	6820      	ldr	r0, [r4, #0]
 800e0b6:	9301      	str	r3, [sp, #4]
 800e0b8:	f000 f83c 	bl	800e134 <_vfiprintf_r>
 800e0bc:	bc1e      	pop	{r1, r2, r3, r4}
 800e0be:	bc08      	pop	{r3}
 800e0c0:	b003      	add	sp, #12
 800e0c2:	4718      	bx	r3
 800e0c4:	2000007c 	.word	0x2000007c

0800e0c8 <abort>:
 800e0c8:	2006      	movs	r0, #6
 800e0ca:	b510      	push	{r4, lr}
 800e0cc:	f000 fa1e 	bl	800e50c <raise>
 800e0d0:	2001      	movs	r0, #1
 800e0d2:	f7f6 f930 	bl	8004336 <_exit>

0800e0d6 <_malloc_usable_size_r>:
 800e0d6:	1f0b      	subs	r3, r1, #4
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	1f18      	subs	r0, r3, #4
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	da01      	bge.n	800e0e4 <_malloc_usable_size_r+0xe>
 800e0e0:	580b      	ldr	r3, [r1, r0]
 800e0e2:	18c0      	adds	r0, r0, r3
 800e0e4:	4770      	bx	lr

0800e0e6 <__sfputc_r>:
 800e0e6:	6893      	ldr	r3, [r2, #8]
 800e0e8:	b510      	push	{r4, lr}
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	6093      	str	r3, [r2, #8]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	da04      	bge.n	800e0fc <__sfputc_r+0x16>
 800e0f2:	6994      	ldr	r4, [r2, #24]
 800e0f4:	42a3      	cmp	r3, r4
 800e0f6:	db07      	blt.n	800e108 <__sfputc_r+0x22>
 800e0f8:	290a      	cmp	r1, #10
 800e0fa:	d005      	beq.n	800e108 <__sfputc_r+0x22>
 800e0fc:	6813      	ldr	r3, [r2, #0]
 800e0fe:	1c58      	adds	r0, r3, #1
 800e100:	6010      	str	r0, [r2, #0]
 800e102:	7019      	strb	r1, [r3, #0]
 800e104:	0008      	movs	r0, r1
 800e106:	bd10      	pop	{r4, pc}
 800e108:	f000 f930 	bl	800e36c <__swbuf_r>
 800e10c:	0001      	movs	r1, r0
 800e10e:	e7f9      	b.n	800e104 <__sfputc_r+0x1e>

0800e110 <__sfputs_r>:
 800e110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e112:	0006      	movs	r6, r0
 800e114:	000f      	movs	r7, r1
 800e116:	0014      	movs	r4, r2
 800e118:	18d5      	adds	r5, r2, r3
 800e11a:	42ac      	cmp	r4, r5
 800e11c:	d101      	bne.n	800e122 <__sfputs_r+0x12>
 800e11e:	2000      	movs	r0, #0
 800e120:	e007      	b.n	800e132 <__sfputs_r+0x22>
 800e122:	7821      	ldrb	r1, [r4, #0]
 800e124:	003a      	movs	r2, r7
 800e126:	0030      	movs	r0, r6
 800e128:	f7ff ffdd 	bl	800e0e6 <__sfputc_r>
 800e12c:	3401      	adds	r4, #1
 800e12e:	1c43      	adds	r3, r0, #1
 800e130:	d1f3      	bne.n	800e11a <__sfputs_r+0xa>
 800e132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e134 <_vfiprintf_r>:
 800e134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e136:	b0a1      	sub	sp, #132	; 0x84
 800e138:	000f      	movs	r7, r1
 800e13a:	0015      	movs	r5, r2
 800e13c:	001e      	movs	r6, r3
 800e13e:	9003      	str	r0, [sp, #12]
 800e140:	2800      	cmp	r0, #0
 800e142:	d004      	beq.n	800e14e <_vfiprintf_r+0x1a>
 800e144:	6a03      	ldr	r3, [r0, #32]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d101      	bne.n	800e14e <_vfiprintf_r+0x1a>
 800e14a:	f7fc fcd9 	bl	800ab00 <__sinit>
 800e14e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e150:	07db      	lsls	r3, r3, #31
 800e152:	d405      	bmi.n	800e160 <_vfiprintf_r+0x2c>
 800e154:	89bb      	ldrh	r3, [r7, #12]
 800e156:	059b      	lsls	r3, r3, #22
 800e158:	d402      	bmi.n	800e160 <_vfiprintf_r+0x2c>
 800e15a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e15c:	f7fc fe29 	bl	800adb2 <__retarget_lock_acquire_recursive>
 800e160:	89bb      	ldrh	r3, [r7, #12]
 800e162:	071b      	lsls	r3, r3, #28
 800e164:	d502      	bpl.n	800e16c <_vfiprintf_r+0x38>
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d113      	bne.n	800e194 <_vfiprintf_r+0x60>
 800e16c:	0039      	movs	r1, r7
 800e16e:	9803      	ldr	r0, [sp, #12]
 800e170:	f000 f93e 	bl	800e3f0 <__swsetup_r>
 800e174:	2800      	cmp	r0, #0
 800e176:	d00d      	beq.n	800e194 <_vfiprintf_r+0x60>
 800e178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e17a:	07db      	lsls	r3, r3, #31
 800e17c:	d503      	bpl.n	800e186 <_vfiprintf_r+0x52>
 800e17e:	2001      	movs	r0, #1
 800e180:	4240      	negs	r0, r0
 800e182:	b021      	add	sp, #132	; 0x84
 800e184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e186:	89bb      	ldrh	r3, [r7, #12]
 800e188:	059b      	lsls	r3, r3, #22
 800e18a:	d4f8      	bmi.n	800e17e <_vfiprintf_r+0x4a>
 800e18c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e18e:	f7fc fe11 	bl	800adb4 <__retarget_lock_release_recursive>
 800e192:	e7f4      	b.n	800e17e <_vfiprintf_r+0x4a>
 800e194:	2300      	movs	r3, #0
 800e196:	ac08      	add	r4, sp, #32
 800e198:	6163      	str	r3, [r4, #20]
 800e19a:	3320      	adds	r3, #32
 800e19c:	7663      	strb	r3, [r4, #25]
 800e19e:	3310      	adds	r3, #16
 800e1a0:	76a3      	strb	r3, [r4, #26]
 800e1a2:	9607      	str	r6, [sp, #28]
 800e1a4:	002e      	movs	r6, r5
 800e1a6:	7833      	ldrb	r3, [r6, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d001      	beq.n	800e1b0 <_vfiprintf_r+0x7c>
 800e1ac:	2b25      	cmp	r3, #37	; 0x25
 800e1ae:	d148      	bne.n	800e242 <_vfiprintf_r+0x10e>
 800e1b0:	1b73      	subs	r3, r6, r5
 800e1b2:	9305      	str	r3, [sp, #20]
 800e1b4:	42ae      	cmp	r6, r5
 800e1b6:	d00b      	beq.n	800e1d0 <_vfiprintf_r+0x9c>
 800e1b8:	002a      	movs	r2, r5
 800e1ba:	0039      	movs	r1, r7
 800e1bc:	9803      	ldr	r0, [sp, #12]
 800e1be:	f7ff ffa7 	bl	800e110 <__sfputs_r>
 800e1c2:	3001      	adds	r0, #1
 800e1c4:	d100      	bne.n	800e1c8 <_vfiprintf_r+0x94>
 800e1c6:	e0af      	b.n	800e328 <_vfiprintf_r+0x1f4>
 800e1c8:	6963      	ldr	r3, [r4, #20]
 800e1ca:	9a05      	ldr	r2, [sp, #20]
 800e1cc:	189b      	adds	r3, r3, r2
 800e1ce:	6163      	str	r3, [r4, #20]
 800e1d0:	7833      	ldrb	r3, [r6, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d100      	bne.n	800e1d8 <_vfiprintf_r+0xa4>
 800e1d6:	e0a7      	b.n	800e328 <_vfiprintf_r+0x1f4>
 800e1d8:	2201      	movs	r2, #1
 800e1da:	2300      	movs	r3, #0
 800e1dc:	4252      	negs	r2, r2
 800e1de:	6062      	str	r2, [r4, #4]
 800e1e0:	a904      	add	r1, sp, #16
 800e1e2:	3254      	adds	r2, #84	; 0x54
 800e1e4:	1852      	adds	r2, r2, r1
 800e1e6:	1c75      	adds	r5, r6, #1
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	60e3      	str	r3, [r4, #12]
 800e1ec:	60a3      	str	r3, [r4, #8]
 800e1ee:	7013      	strb	r3, [r2, #0]
 800e1f0:	65a3      	str	r3, [r4, #88]	; 0x58
 800e1f2:	4b59      	ldr	r3, [pc, #356]	; (800e358 <_vfiprintf_r+0x224>)
 800e1f4:	2205      	movs	r2, #5
 800e1f6:	0018      	movs	r0, r3
 800e1f8:	7829      	ldrb	r1, [r5, #0]
 800e1fa:	9305      	str	r3, [sp, #20]
 800e1fc:	f7fc fddb 	bl	800adb6 <memchr>
 800e200:	1c6e      	adds	r6, r5, #1
 800e202:	2800      	cmp	r0, #0
 800e204:	d11f      	bne.n	800e246 <_vfiprintf_r+0x112>
 800e206:	6822      	ldr	r2, [r4, #0]
 800e208:	06d3      	lsls	r3, r2, #27
 800e20a:	d504      	bpl.n	800e216 <_vfiprintf_r+0xe2>
 800e20c:	2353      	movs	r3, #83	; 0x53
 800e20e:	a904      	add	r1, sp, #16
 800e210:	185b      	adds	r3, r3, r1
 800e212:	2120      	movs	r1, #32
 800e214:	7019      	strb	r1, [r3, #0]
 800e216:	0713      	lsls	r3, r2, #28
 800e218:	d504      	bpl.n	800e224 <_vfiprintf_r+0xf0>
 800e21a:	2353      	movs	r3, #83	; 0x53
 800e21c:	a904      	add	r1, sp, #16
 800e21e:	185b      	adds	r3, r3, r1
 800e220:	212b      	movs	r1, #43	; 0x2b
 800e222:	7019      	strb	r1, [r3, #0]
 800e224:	782b      	ldrb	r3, [r5, #0]
 800e226:	2b2a      	cmp	r3, #42	; 0x2a
 800e228:	d016      	beq.n	800e258 <_vfiprintf_r+0x124>
 800e22a:	002e      	movs	r6, r5
 800e22c:	2100      	movs	r1, #0
 800e22e:	200a      	movs	r0, #10
 800e230:	68e3      	ldr	r3, [r4, #12]
 800e232:	7832      	ldrb	r2, [r6, #0]
 800e234:	1c75      	adds	r5, r6, #1
 800e236:	3a30      	subs	r2, #48	; 0x30
 800e238:	2a09      	cmp	r2, #9
 800e23a:	d94e      	bls.n	800e2da <_vfiprintf_r+0x1a6>
 800e23c:	2900      	cmp	r1, #0
 800e23e:	d111      	bne.n	800e264 <_vfiprintf_r+0x130>
 800e240:	e017      	b.n	800e272 <_vfiprintf_r+0x13e>
 800e242:	3601      	adds	r6, #1
 800e244:	e7af      	b.n	800e1a6 <_vfiprintf_r+0x72>
 800e246:	9b05      	ldr	r3, [sp, #20]
 800e248:	6822      	ldr	r2, [r4, #0]
 800e24a:	1ac0      	subs	r0, r0, r3
 800e24c:	2301      	movs	r3, #1
 800e24e:	4083      	lsls	r3, r0
 800e250:	4313      	orrs	r3, r2
 800e252:	0035      	movs	r5, r6
 800e254:	6023      	str	r3, [r4, #0]
 800e256:	e7cc      	b.n	800e1f2 <_vfiprintf_r+0xbe>
 800e258:	9b07      	ldr	r3, [sp, #28]
 800e25a:	1d19      	adds	r1, r3, #4
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	9107      	str	r1, [sp, #28]
 800e260:	2b00      	cmp	r3, #0
 800e262:	db01      	blt.n	800e268 <_vfiprintf_r+0x134>
 800e264:	930b      	str	r3, [sp, #44]	; 0x2c
 800e266:	e004      	b.n	800e272 <_vfiprintf_r+0x13e>
 800e268:	425b      	negs	r3, r3
 800e26a:	60e3      	str	r3, [r4, #12]
 800e26c:	2302      	movs	r3, #2
 800e26e:	4313      	orrs	r3, r2
 800e270:	6023      	str	r3, [r4, #0]
 800e272:	7833      	ldrb	r3, [r6, #0]
 800e274:	2b2e      	cmp	r3, #46	; 0x2e
 800e276:	d10a      	bne.n	800e28e <_vfiprintf_r+0x15a>
 800e278:	7873      	ldrb	r3, [r6, #1]
 800e27a:	2b2a      	cmp	r3, #42	; 0x2a
 800e27c:	d135      	bne.n	800e2ea <_vfiprintf_r+0x1b6>
 800e27e:	9b07      	ldr	r3, [sp, #28]
 800e280:	3602      	adds	r6, #2
 800e282:	1d1a      	adds	r2, r3, #4
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	9207      	str	r2, [sp, #28]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	db2b      	blt.n	800e2e4 <_vfiprintf_r+0x1b0>
 800e28c:	9309      	str	r3, [sp, #36]	; 0x24
 800e28e:	4d33      	ldr	r5, [pc, #204]	; (800e35c <_vfiprintf_r+0x228>)
 800e290:	2203      	movs	r2, #3
 800e292:	0028      	movs	r0, r5
 800e294:	7831      	ldrb	r1, [r6, #0]
 800e296:	f7fc fd8e 	bl	800adb6 <memchr>
 800e29a:	2800      	cmp	r0, #0
 800e29c:	d006      	beq.n	800e2ac <_vfiprintf_r+0x178>
 800e29e:	2340      	movs	r3, #64	; 0x40
 800e2a0:	1b40      	subs	r0, r0, r5
 800e2a2:	4083      	lsls	r3, r0
 800e2a4:	6822      	ldr	r2, [r4, #0]
 800e2a6:	3601      	adds	r6, #1
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	6023      	str	r3, [r4, #0]
 800e2ac:	7831      	ldrb	r1, [r6, #0]
 800e2ae:	2206      	movs	r2, #6
 800e2b0:	482b      	ldr	r0, [pc, #172]	; (800e360 <_vfiprintf_r+0x22c>)
 800e2b2:	1c75      	adds	r5, r6, #1
 800e2b4:	7621      	strb	r1, [r4, #24]
 800e2b6:	f7fc fd7e 	bl	800adb6 <memchr>
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d043      	beq.n	800e346 <_vfiprintf_r+0x212>
 800e2be:	4b29      	ldr	r3, [pc, #164]	; (800e364 <_vfiprintf_r+0x230>)
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d125      	bne.n	800e310 <_vfiprintf_r+0x1dc>
 800e2c4:	2207      	movs	r2, #7
 800e2c6:	9b07      	ldr	r3, [sp, #28]
 800e2c8:	3307      	adds	r3, #7
 800e2ca:	4393      	bics	r3, r2
 800e2cc:	3308      	adds	r3, #8
 800e2ce:	9307      	str	r3, [sp, #28]
 800e2d0:	6963      	ldr	r3, [r4, #20]
 800e2d2:	9a04      	ldr	r2, [sp, #16]
 800e2d4:	189b      	adds	r3, r3, r2
 800e2d6:	6163      	str	r3, [r4, #20]
 800e2d8:	e764      	b.n	800e1a4 <_vfiprintf_r+0x70>
 800e2da:	4343      	muls	r3, r0
 800e2dc:	002e      	movs	r6, r5
 800e2de:	2101      	movs	r1, #1
 800e2e0:	189b      	adds	r3, r3, r2
 800e2e2:	e7a6      	b.n	800e232 <_vfiprintf_r+0xfe>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	425b      	negs	r3, r3
 800e2e8:	e7d0      	b.n	800e28c <_vfiprintf_r+0x158>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	200a      	movs	r0, #10
 800e2ee:	001a      	movs	r2, r3
 800e2f0:	3601      	adds	r6, #1
 800e2f2:	6063      	str	r3, [r4, #4]
 800e2f4:	7831      	ldrb	r1, [r6, #0]
 800e2f6:	1c75      	adds	r5, r6, #1
 800e2f8:	3930      	subs	r1, #48	; 0x30
 800e2fa:	2909      	cmp	r1, #9
 800e2fc:	d903      	bls.n	800e306 <_vfiprintf_r+0x1d2>
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0c5      	beq.n	800e28e <_vfiprintf_r+0x15a>
 800e302:	9209      	str	r2, [sp, #36]	; 0x24
 800e304:	e7c3      	b.n	800e28e <_vfiprintf_r+0x15a>
 800e306:	4342      	muls	r2, r0
 800e308:	002e      	movs	r6, r5
 800e30a:	2301      	movs	r3, #1
 800e30c:	1852      	adds	r2, r2, r1
 800e30e:	e7f1      	b.n	800e2f4 <_vfiprintf_r+0x1c0>
 800e310:	aa07      	add	r2, sp, #28
 800e312:	9200      	str	r2, [sp, #0]
 800e314:	0021      	movs	r1, r4
 800e316:	003a      	movs	r2, r7
 800e318:	4b13      	ldr	r3, [pc, #76]	; (800e368 <_vfiprintf_r+0x234>)
 800e31a:	9803      	ldr	r0, [sp, #12]
 800e31c:	f7fb fd82 	bl	8009e24 <_printf_float>
 800e320:	9004      	str	r0, [sp, #16]
 800e322:	9b04      	ldr	r3, [sp, #16]
 800e324:	3301      	adds	r3, #1
 800e326:	d1d3      	bne.n	800e2d0 <_vfiprintf_r+0x19c>
 800e328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e32a:	07db      	lsls	r3, r3, #31
 800e32c:	d405      	bmi.n	800e33a <_vfiprintf_r+0x206>
 800e32e:	89bb      	ldrh	r3, [r7, #12]
 800e330:	059b      	lsls	r3, r3, #22
 800e332:	d402      	bmi.n	800e33a <_vfiprintf_r+0x206>
 800e334:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e336:	f7fc fd3d 	bl	800adb4 <__retarget_lock_release_recursive>
 800e33a:	89bb      	ldrh	r3, [r7, #12]
 800e33c:	065b      	lsls	r3, r3, #25
 800e33e:	d500      	bpl.n	800e342 <_vfiprintf_r+0x20e>
 800e340:	e71d      	b.n	800e17e <_vfiprintf_r+0x4a>
 800e342:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e344:	e71d      	b.n	800e182 <_vfiprintf_r+0x4e>
 800e346:	aa07      	add	r2, sp, #28
 800e348:	9200      	str	r2, [sp, #0]
 800e34a:	0021      	movs	r1, r4
 800e34c:	003a      	movs	r2, r7
 800e34e:	4b06      	ldr	r3, [pc, #24]	; (800e368 <_vfiprintf_r+0x234>)
 800e350:	9803      	ldr	r0, [sp, #12]
 800e352:	f7fc f82d 	bl	800a3b0 <_printf_i>
 800e356:	e7e3      	b.n	800e320 <_vfiprintf_r+0x1ec>
 800e358:	0800efe1 	.word	0x0800efe1
 800e35c:	0800efe7 	.word	0x0800efe7
 800e360:	0800efeb 	.word	0x0800efeb
 800e364:	08009e25 	.word	0x08009e25
 800e368:	0800e111 	.word	0x0800e111

0800e36c <__swbuf_r>:
 800e36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36e:	0006      	movs	r6, r0
 800e370:	000d      	movs	r5, r1
 800e372:	0014      	movs	r4, r2
 800e374:	2800      	cmp	r0, #0
 800e376:	d004      	beq.n	800e382 <__swbuf_r+0x16>
 800e378:	6a03      	ldr	r3, [r0, #32]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <__swbuf_r+0x16>
 800e37e:	f7fc fbbf 	bl	800ab00 <__sinit>
 800e382:	69a3      	ldr	r3, [r4, #24]
 800e384:	60a3      	str	r3, [r4, #8]
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	071b      	lsls	r3, r3, #28
 800e38a:	d528      	bpl.n	800e3de <__swbuf_r+0x72>
 800e38c:	6923      	ldr	r3, [r4, #16]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d025      	beq.n	800e3de <__swbuf_r+0x72>
 800e392:	6923      	ldr	r3, [r4, #16]
 800e394:	6820      	ldr	r0, [r4, #0]
 800e396:	b2ef      	uxtb	r7, r5
 800e398:	1ac0      	subs	r0, r0, r3
 800e39a:	6963      	ldr	r3, [r4, #20]
 800e39c:	b2ed      	uxtb	r5, r5
 800e39e:	4283      	cmp	r3, r0
 800e3a0:	dc05      	bgt.n	800e3ae <__swbuf_r+0x42>
 800e3a2:	0021      	movs	r1, r4
 800e3a4:	0030      	movs	r0, r6
 800e3a6:	f7ff fa17 	bl	800d7d8 <_fflush_r>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	d11d      	bne.n	800e3ea <__swbuf_r+0x7e>
 800e3ae:	68a3      	ldr	r3, [r4, #8]
 800e3b0:	3001      	adds	r0, #1
 800e3b2:	3b01      	subs	r3, #1
 800e3b4:	60a3      	str	r3, [r4, #8]
 800e3b6:	6823      	ldr	r3, [r4, #0]
 800e3b8:	1c5a      	adds	r2, r3, #1
 800e3ba:	6022      	str	r2, [r4, #0]
 800e3bc:	701f      	strb	r7, [r3, #0]
 800e3be:	6963      	ldr	r3, [r4, #20]
 800e3c0:	4283      	cmp	r3, r0
 800e3c2:	d004      	beq.n	800e3ce <__swbuf_r+0x62>
 800e3c4:	89a3      	ldrh	r3, [r4, #12]
 800e3c6:	07db      	lsls	r3, r3, #31
 800e3c8:	d507      	bpl.n	800e3da <__swbuf_r+0x6e>
 800e3ca:	2d0a      	cmp	r5, #10
 800e3cc:	d105      	bne.n	800e3da <__swbuf_r+0x6e>
 800e3ce:	0021      	movs	r1, r4
 800e3d0:	0030      	movs	r0, r6
 800e3d2:	f7ff fa01 	bl	800d7d8 <_fflush_r>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d107      	bne.n	800e3ea <__swbuf_r+0x7e>
 800e3da:	0028      	movs	r0, r5
 800e3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3de:	0021      	movs	r1, r4
 800e3e0:	0030      	movs	r0, r6
 800e3e2:	f000 f805 	bl	800e3f0 <__swsetup_r>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d0d3      	beq.n	800e392 <__swbuf_r+0x26>
 800e3ea:	2501      	movs	r5, #1
 800e3ec:	426d      	negs	r5, r5
 800e3ee:	e7f4      	b.n	800e3da <__swbuf_r+0x6e>

0800e3f0 <__swsetup_r>:
 800e3f0:	4b30      	ldr	r3, [pc, #192]	; (800e4b4 <__swsetup_r+0xc4>)
 800e3f2:	b570      	push	{r4, r5, r6, lr}
 800e3f4:	0005      	movs	r5, r0
 800e3f6:	6818      	ldr	r0, [r3, #0]
 800e3f8:	000c      	movs	r4, r1
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	d004      	beq.n	800e408 <__swsetup_r+0x18>
 800e3fe:	6a03      	ldr	r3, [r0, #32]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d101      	bne.n	800e408 <__swsetup_r+0x18>
 800e404:	f7fc fb7c 	bl	800ab00 <__sinit>
 800e408:	230c      	movs	r3, #12
 800e40a:	5ee2      	ldrsh	r2, [r4, r3]
 800e40c:	b293      	uxth	r3, r2
 800e40e:	0711      	lsls	r1, r2, #28
 800e410:	d423      	bmi.n	800e45a <__swsetup_r+0x6a>
 800e412:	06d9      	lsls	r1, r3, #27
 800e414:	d407      	bmi.n	800e426 <__swsetup_r+0x36>
 800e416:	2309      	movs	r3, #9
 800e418:	2001      	movs	r0, #1
 800e41a:	602b      	str	r3, [r5, #0]
 800e41c:	3337      	adds	r3, #55	; 0x37
 800e41e:	4313      	orrs	r3, r2
 800e420:	81a3      	strh	r3, [r4, #12]
 800e422:	4240      	negs	r0, r0
 800e424:	bd70      	pop	{r4, r5, r6, pc}
 800e426:	075b      	lsls	r3, r3, #29
 800e428:	d513      	bpl.n	800e452 <__swsetup_r+0x62>
 800e42a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e42c:	2900      	cmp	r1, #0
 800e42e:	d008      	beq.n	800e442 <__swsetup_r+0x52>
 800e430:	0023      	movs	r3, r4
 800e432:	3344      	adds	r3, #68	; 0x44
 800e434:	4299      	cmp	r1, r3
 800e436:	d002      	beq.n	800e43e <__swsetup_r+0x4e>
 800e438:	0028      	movs	r0, r5
 800e43a:	f7fd fb69 	bl	800bb10 <_free_r>
 800e43e:	2300      	movs	r3, #0
 800e440:	6363      	str	r3, [r4, #52]	; 0x34
 800e442:	2224      	movs	r2, #36	; 0x24
 800e444:	89a3      	ldrh	r3, [r4, #12]
 800e446:	4393      	bics	r3, r2
 800e448:	81a3      	strh	r3, [r4, #12]
 800e44a:	2300      	movs	r3, #0
 800e44c:	6063      	str	r3, [r4, #4]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	2308      	movs	r3, #8
 800e454:	89a2      	ldrh	r2, [r4, #12]
 800e456:	4313      	orrs	r3, r2
 800e458:	81a3      	strh	r3, [r4, #12]
 800e45a:	6923      	ldr	r3, [r4, #16]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d10b      	bne.n	800e478 <__swsetup_r+0x88>
 800e460:	21a0      	movs	r1, #160	; 0xa0
 800e462:	2280      	movs	r2, #128	; 0x80
 800e464:	89a3      	ldrh	r3, [r4, #12]
 800e466:	0089      	lsls	r1, r1, #2
 800e468:	0092      	lsls	r2, r2, #2
 800e46a:	400b      	ands	r3, r1
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d003      	beq.n	800e478 <__swsetup_r+0x88>
 800e470:	0021      	movs	r1, r4
 800e472:	0028      	movs	r0, r5
 800e474:	f000 f892 	bl	800e59c <__smakebuf_r>
 800e478:	220c      	movs	r2, #12
 800e47a:	5ea3      	ldrsh	r3, [r4, r2]
 800e47c:	2001      	movs	r0, #1
 800e47e:	001a      	movs	r2, r3
 800e480:	b299      	uxth	r1, r3
 800e482:	4002      	ands	r2, r0
 800e484:	4203      	tst	r3, r0
 800e486:	d00f      	beq.n	800e4a8 <__swsetup_r+0xb8>
 800e488:	2200      	movs	r2, #0
 800e48a:	60a2      	str	r2, [r4, #8]
 800e48c:	6962      	ldr	r2, [r4, #20]
 800e48e:	4252      	negs	r2, r2
 800e490:	61a2      	str	r2, [r4, #24]
 800e492:	2000      	movs	r0, #0
 800e494:	6922      	ldr	r2, [r4, #16]
 800e496:	4282      	cmp	r2, r0
 800e498:	d1c4      	bne.n	800e424 <__swsetup_r+0x34>
 800e49a:	0609      	lsls	r1, r1, #24
 800e49c:	d5c2      	bpl.n	800e424 <__swsetup_r+0x34>
 800e49e:	2240      	movs	r2, #64	; 0x40
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	81a3      	strh	r3, [r4, #12]
 800e4a4:	3801      	subs	r0, #1
 800e4a6:	e7bd      	b.n	800e424 <__swsetup_r+0x34>
 800e4a8:	0788      	lsls	r0, r1, #30
 800e4aa:	d400      	bmi.n	800e4ae <__swsetup_r+0xbe>
 800e4ac:	6962      	ldr	r2, [r4, #20]
 800e4ae:	60a2      	str	r2, [r4, #8]
 800e4b0:	e7ef      	b.n	800e492 <__swsetup_r+0xa2>
 800e4b2:	46c0      	nop			; (mov r8, r8)
 800e4b4:	2000007c 	.word	0x2000007c

0800e4b8 <_raise_r>:
 800e4b8:	b570      	push	{r4, r5, r6, lr}
 800e4ba:	0004      	movs	r4, r0
 800e4bc:	000d      	movs	r5, r1
 800e4be:	291f      	cmp	r1, #31
 800e4c0:	d904      	bls.n	800e4cc <_raise_r+0x14>
 800e4c2:	2316      	movs	r3, #22
 800e4c4:	6003      	str	r3, [r0, #0]
 800e4c6:	2001      	movs	r0, #1
 800e4c8:	4240      	negs	r0, r0
 800e4ca:	bd70      	pop	{r4, r5, r6, pc}
 800e4cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d004      	beq.n	800e4dc <_raise_r+0x24>
 800e4d2:	008a      	lsls	r2, r1, #2
 800e4d4:	189b      	adds	r3, r3, r2
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	2a00      	cmp	r2, #0
 800e4da:	d108      	bne.n	800e4ee <_raise_r+0x36>
 800e4dc:	0020      	movs	r0, r4
 800e4de:	f000 f831 	bl	800e544 <_getpid_r>
 800e4e2:	002a      	movs	r2, r5
 800e4e4:	0001      	movs	r1, r0
 800e4e6:	0020      	movs	r0, r4
 800e4e8:	f000 f81a 	bl	800e520 <_kill_r>
 800e4ec:	e7ed      	b.n	800e4ca <_raise_r+0x12>
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	2a01      	cmp	r2, #1
 800e4f2:	d0ea      	beq.n	800e4ca <_raise_r+0x12>
 800e4f4:	1c51      	adds	r1, r2, #1
 800e4f6:	d103      	bne.n	800e500 <_raise_r+0x48>
 800e4f8:	2316      	movs	r3, #22
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	6023      	str	r3, [r4, #0]
 800e4fe:	e7e4      	b.n	800e4ca <_raise_r+0x12>
 800e500:	2400      	movs	r4, #0
 800e502:	0028      	movs	r0, r5
 800e504:	601c      	str	r4, [r3, #0]
 800e506:	4790      	blx	r2
 800e508:	0020      	movs	r0, r4
 800e50a:	e7de      	b.n	800e4ca <_raise_r+0x12>

0800e50c <raise>:
 800e50c:	b510      	push	{r4, lr}
 800e50e:	4b03      	ldr	r3, [pc, #12]	; (800e51c <raise+0x10>)
 800e510:	0001      	movs	r1, r0
 800e512:	6818      	ldr	r0, [r3, #0]
 800e514:	f7ff ffd0 	bl	800e4b8 <_raise_r>
 800e518:	bd10      	pop	{r4, pc}
 800e51a:	46c0      	nop			; (mov r8, r8)
 800e51c:	2000007c 	.word	0x2000007c

0800e520 <_kill_r>:
 800e520:	2300      	movs	r3, #0
 800e522:	b570      	push	{r4, r5, r6, lr}
 800e524:	4d06      	ldr	r5, [pc, #24]	; (800e540 <_kill_r+0x20>)
 800e526:	0004      	movs	r4, r0
 800e528:	0008      	movs	r0, r1
 800e52a:	0011      	movs	r1, r2
 800e52c:	602b      	str	r3, [r5, #0]
 800e52e:	f7f5 fef2 	bl	8004316 <_kill>
 800e532:	1c43      	adds	r3, r0, #1
 800e534:	d103      	bne.n	800e53e <_kill_r+0x1e>
 800e536:	682b      	ldr	r3, [r5, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d000      	beq.n	800e53e <_kill_r+0x1e>
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
 800e540:	20000660 	.word	0x20000660

0800e544 <_getpid_r>:
 800e544:	b510      	push	{r4, lr}
 800e546:	f7f5 fee0 	bl	800430a <_getpid>
 800e54a:	bd10      	pop	{r4, pc}

0800e54c <__swhatbuf_r>:
 800e54c:	b570      	push	{r4, r5, r6, lr}
 800e54e:	000e      	movs	r6, r1
 800e550:	001d      	movs	r5, r3
 800e552:	230e      	movs	r3, #14
 800e554:	5ec9      	ldrsh	r1, [r1, r3]
 800e556:	0014      	movs	r4, r2
 800e558:	b096      	sub	sp, #88	; 0x58
 800e55a:	2900      	cmp	r1, #0
 800e55c:	da0c      	bge.n	800e578 <__swhatbuf_r+0x2c>
 800e55e:	89b2      	ldrh	r2, [r6, #12]
 800e560:	2380      	movs	r3, #128	; 0x80
 800e562:	0011      	movs	r1, r2
 800e564:	4019      	ands	r1, r3
 800e566:	421a      	tst	r2, r3
 800e568:	d013      	beq.n	800e592 <__swhatbuf_r+0x46>
 800e56a:	2100      	movs	r1, #0
 800e56c:	3b40      	subs	r3, #64	; 0x40
 800e56e:	2000      	movs	r0, #0
 800e570:	6029      	str	r1, [r5, #0]
 800e572:	6023      	str	r3, [r4, #0]
 800e574:	b016      	add	sp, #88	; 0x58
 800e576:	bd70      	pop	{r4, r5, r6, pc}
 800e578:	466a      	mov	r2, sp
 800e57a:	f000 f84d 	bl	800e618 <_fstat_r>
 800e57e:	2800      	cmp	r0, #0
 800e580:	dbed      	blt.n	800e55e <__swhatbuf_r+0x12>
 800e582:	23f0      	movs	r3, #240	; 0xf0
 800e584:	9901      	ldr	r1, [sp, #4]
 800e586:	021b      	lsls	r3, r3, #8
 800e588:	4019      	ands	r1, r3
 800e58a:	4b03      	ldr	r3, [pc, #12]	; (800e598 <__swhatbuf_r+0x4c>)
 800e58c:	18c9      	adds	r1, r1, r3
 800e58e:	424b      	negs	r3, r1
 800e590:	4159      	adcs	r1, r3
 800e592:	2380      	movs	r3, #128	; 0x80
 800e594:	00db      	lsls	r3, r3, #3
 800e596:	e7ea      	b.n	800e56e <__swhatbuf_r+0x22>
 800e598:	ffffe000 	.word	0xffffe000

0800e59c <__smakebuf_r>:
 800e59c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e59e:	2602      	movs	r6, #2
 800e5a0:	898b      	ldrh	r3, [r1, #12]
 800e5a2:	0005      	movs	r5, r0
 800e5a4:	000c      	movs	r4, r1
 800e5a6:	4233      	tst	r3, r6
 800e5a8:	d006      	beq.n	800e5b8 <__smakebuf_r+0x1c>
 800e5aa:	0023      	movs	r3, r4
 800e5ac:	3347      	adds	r3, #71	; 0x47
 800e5ae:	6023      	str	r3, [r4, #0]
 800e5b0:	6123      	str	r3, [r4, #16]
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	6163      	str	r3, [r4, #20]
 800e5b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e5b8:	466a      	mov	r2, sp
 800e5ba:	ab01      	add	r3, sp, #4
 800e5bc:	f7ff ffc6 	bl	800e54c <__swhatbuf_r>
 800e5c0:	9900      	ldr	r1, [sp, #0]
 800e5c2:	0007      	movs	r7, r0
 800e5c4:	0028      	movs	r0, r5
 800e5c6:	f7fd fb19 	bl	800bbfc <_malloc_r>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d108      	bne.n	800e5e0 <__smakebuf_r+0x44>
 800e5ce:	220c      	movs	r2, #12
 800e5d0:	5ea3      	ldrsh	r3, [r4, r2]
 800e5d2:	059a      	lsls	r2, r3, #22
 800e5d4:	d4ef      	bmi.n	800e5b6 <__smakebuf_r+0x1a>
 800e5d6:	2203      	movs	r2, #3
 800e5d8:	4393      	bics	r3, r2
 800e5da:	431e      	orrs	r6, r3
 800e5dc:	81a6      	strh	r6, [r4, #12]
 800e5de:	e7e4      	b.n	800e5aa <__smakebuf_r+0xe>
 800e5e0:	2380      	movs	r3, #128	; 0x80
 800e5e2:	89a2      	ldrh	r2, [r4, #12]
 800e5e4:	6020      	str	r0, [r4, #0]
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	81a3      	strh	r3, [r4, #12]
 800e5ea:	9b00      	ldr	r3, [sp, #0]
 800e5ec:	6120      	str	r0, [r4, #16]
 800e5ee:	6163      	str	r3, [r4, #20]
 800e5f0:	9b01      	ldr	r3, [sp, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00c      	beq.n	800e610 <__smakebuf_r+0x74>
 800e5f6:	0028      	movs	r0, r5
 800e5f8:	230e      	movs	r3, #14
 800e5fa:	5ee1      	ldrsh	r1, [r4, r3]
 800e5fc:	f000 f81e 	bl	800e63c <_isatty_r>
 800e600:	2800      	cmp	r0, #0
 800e602:	d005      	beq.n	800e610 <__smakebuf_r+0x74>
 800e604:	2303      	movs	r3, #3
 800e606:	89a2      	ldrh	r2, [r4, #12]
 800e608:	439a      	bics	r2, r3
 800e60a:	3b02      	subs	r3, #2
 800e60c:	4313      	orrs	r3, r2
 800e60e:	81a3      	strh	r3, [r4, #12]
 800e610:	89a3      	ldrh	r3, [r4, #12]
 800e612:	433b      	orrs	r3, r7
 800e614:	81a3      	strh	r3, [r4, #12]
 800e616:	e7ce      	b.n	800e5b6 <__smakebuf_r+0x1a>

0800e618 <_fstat_r>:
 800e618:	2300      	movs	r3, #0
 800e61a:	b570      	push	{r4, r5, r6, lr}
 800e61c:	4d06      	ldr	r5, [pc, #24]	; (800e638 <_fstat_r+0x20>)
 800e61e:	0004      	movs	r4, r0
 800e620:	0008      	movs	r0, r1
 800e622:	0011      	movs	r1, r2
 800e624:	602b      	str	r3, [r5, #0]
 800e626:	f7f5 fed5 	bl	80043d4 <_fstat>
 800e62a:	1c43      	adds	r3, r0, #1
 800e62c:	d103      	bne.n	800e636 <_fstat_r+0x1e>
 800e62e:	682b      	ldr	r3, [r5, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d000      	beq.n	800e636 <_fstat_r+0x1e>
 800e634:	6023      	str	r3, [r4, #0]
 800e636:	bd70      	pop	{r4, r5, r6, pc}
 800e638:	20000660 	.word	0x20000660

0800e63c <_isatty_r>:
 800e63c:	2300      	movs	r3, #0
 800e63e:	b570      	push	{r4, r5, r6, lr}
 800e640:	4d06      	ldr	r5, [pc, #24]	; (800e65c <_isatty_r+0x20>)
 800e642:	0004      	movs	r4, r0
 800e644:	0008      	movs	r0, r1
 800e646:	602b      	str	r3, [r5, #0]
 800e648:	f7f5 fed2 	bl	80043f0 <_isatty>
 800e64c:	1c43      	adds	r3, r0, #1
 800e64e:	d103      	bne.n	800e658 <_isatty_r+0x1c>
 800e650:	682b      	ldr	r3, [r5, #0]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d000      	beq.n	800e658 <_isatty_r+0x1c>
 800e656:	6023      	str	r3, [r4, #0]
 800e658:	bd70      	pop	{r4, r5, r6, pc}
 800e65a:	46c0      	nop			; (mov r8, r8)
 800e65c:	20000660 	.word	0x20000660

0800e660 <_init>:
 800e660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e662:	46c0      	nop			; (mov r8, r8)
 800e664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e666:	bc08      	pop	{r3}
 800e668:	469e      	mov	lr, r3
 800e66a:	4770      	bx	lr

0800e66c <_fini>:
 800e66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66e:	46c0      	nop			; (mov r8, r8)
 800e670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e672:	bc08      	pop	{r3}
 800e674:	469e      	mov	lr, r3
 800e676:	4770      	bx	lr
